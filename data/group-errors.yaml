mod: "DefMod(Definition(char_sz,Vector(),@nat,@nat.succ
  (@bit1.{0} @nat @nat.has_one @nat.has_add
    (@bit1.{0} @nat @nat.has_one @nat.has_add
      (@bit1.{0} @nat @nat.has_one @nat.has_add
        (@bit1.{0} @nat @nat.has_one @nat.has_add
          (@bit1.{0} @nat @nat.has_one @nat.has_add
            (@bit1.{0} @nat @nat.has_one @nat.has_add
              (@bit1.{0} @nat @nat.has_one @nat.has_add
                (@has_one.one.{0} @nat @nat.has_one)))))))),0))"
err: "java.util.concurrent.TimeoutException: Task timed-out after 5 minutes of inactivity"

mod: "DefMod(Definition(char,Vector(),Type 0,@fin @char_sz,0))"
err: "provingground.interface.UnParsedException: could not parse expression @char_sz"

mod: "IndMod(InductiveType(_private.608265362.string_imp,Vector(),Type 0),0,Vector((_private.608265362.string_imp.mk,∀ (data : @list.{0} @char), @_private.608265362.string_imp)))"
err: "provingground.interface.UnParsedException: could not parse expression @char"

mod: "DefMod(Definition(_private.608265362.string_imp.rec_on,Vector(Param(l)),∀ {C : (∀ (n_0 : @_private.608265362.string_imp), Sort l)}
  (n : @_private.608265362.string_imp)
  (e_1 :
    (∀ (data : @list.{0} @char), C (@_private.608265362.string_imp.mk data))),
C n,λ {C : (∀ (n_0 : @_private.608265362.string_imp), Sort l)}
  (n : @_private.608265362.string_imp)
  (e_1 :
    (∀ (data : @list.{0} @char), C (@_private.608265362.string_imp.mk data))),
@_private.608265362.string_imp.rec.{l} C e_1 n,0))"
err: "provingground.interface.UnParsedException: could not parse expression @_private.608265362.string_imp"

mod: "DefMod(Definition(string,Vector(),Type 0,@_private.608265362.string_imp,0))"
err: "provingground.interface.UnParsedException: could not parse expression @_private.608265362.string_imp"

mod: "DefMod(Definition(unsigned_sz,Vector(),@nat,@nat.succ
  (@bit1.{0} @nat @nat.has_one @nat.has_add
    (@bit1.{0} @nat @nat.has_one @nat.has_add
      (@bit1.{0} @nat @nat.has_one @nat.has_add
        (@bit1.{0} @nat @nat.has_one @nat.has_add
          (@bit1.{0} @nat @nat.has_one @nat.has_add
            (@bit1.{0} @nat @nat.has_one @nat.has_add
              (@bit1.{0} @nat @nat.has_one @nat.has_add
                (@bit1.{0} @nat @nat.has_one @nat.has_add
                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@bit1.{0} @nat @nat.has_one
                                                    @nat.has_add
                                                    (@bit1.{0} @nat @nat.has_one
                                                      @nat.has_add
                                                      (@bit1.{0} @nat
                                                        @nat.has_one
                                                        @nat.has_add
                                                        (@bit1.{0} @nat
                                                          @nat.has_one
                                                          @nat.has_add
                                                          (@bit1.{0} @nat
                                                            @nat.has_one
                                                            @nat.has_add
                                                            (@bit1.{0} @nat
                                                              @nat.has_one
                                                              @nat.has_add
                                                              (@bit1.{0} @nat
                                                                @nat.has_one
                                                                @nat.has_add
                                                                (@has_one.one.{0}
                                                                  @nat
                                                                  @nat.has_one)))))))))))))))))))))))))))))))),0))"
err: "java.util.concurrent.TimeoutException: Task timed-out after 5 minutes of inactivity"

mod: "DefMod(Definition(unsigned,Vector(),Type 0,@fin @unsigned_sz,0))"
err: "provingground.interface.UnParsedException: could not parse expression @unsigned_sz"

mod: "IndMod(InductiveType(name,Vector(),Type 0),0,Vector((name.anonymous,@name), (name.mk_string,∀ (a : @string) (a_0 : @name), @name), (name.mk_numeral,∀ (a : @unsigned) (a_0 : @name), @name)))"
err: "provingground.interface.UnParsedException: could not parse expression @string"

mod: "DefMod(Definition(auto_param,Vector(Param(u)),∀ (α : Sort u) (tac_name : @name), Sort u,λ (α : Sort u) (tac_name : @name), α,0))"
err: "provingground.interface.UnParsedException: could not parse expression @name"

mod: "DefMod(Definition(_private.608265362.string_imp.cases_on,Vector(Param(l)),∀ {C : (∀ (n_0 : @_private.608265362.string_imp), Sort l)}
  (n : @_private.608265362.string_imp)
  (e_1 :
    (∀ (data : @list.{0} @char), C (@_private.608265362.string_imp.mk data))),
C n,λ {C : (∀ (n_0 : @_private.608265362.string_imp), Sort l)}
  (n : @_private.608265362.string_imp)
  (e_1 :
    (∀ (data : @list.{0} @char), C (@_private.608265362.string_imp.mk data))),
@_private.608265362.string_imp.rec.{l} C e_1 n,0))"
err: "provingground.interface.UnParsedException: could not parse expression @_private.608265362.string_imp"

mod: "DefMod(Definition(string.str._main,Vector(),∀ (a : @string) (a_0 : @char), @string,λ (a : @string) (a_0 : @char),
@_private.608265362.string_imp.cases_on.{1} (λ (a_1 : @string), @string) a
  (λ (data : @list.{0} @char),
  @_private.608265362.string_imp.mk (@list.cons.{0} @char a_0 data)),0))"
err: "provingground.interface.UnParsedException: could not parse expression @string"

mod: "DefMod(Definition(string.str,Vector(),∀ (a : @string) (a_0 : @char), @string,@string.str._main,0))"
err: "provingground.interface.UnParsedException: could not parse expression @string.str._main"

mod: "DefMod(Definition(string.empty,Vector(),@string,@_private.608265362.string_imp.mk (@list.nil.{0} @char),0))"
err: "provingground.interface.UnParsedException: could not parse expression @char"

mod: "DefMod(Definition(nat.less_than_or_equal.dcases_on,Vector(),∀ {a : @nat} {C : (∀ (a_1 : @nat) (h : @nat.less_than_or_equal a a_1), Prop)}
  {a_0 : @nat} (n : @nat.less_than_or_equal a a_0)
  (e_1 : C a (@nat.less_than_or_equal.refl a))
  (e_2 :
    (∀ {b : @nat} (a_1 : @nat.less_than_or_equal a b),
    C (@nat.succ b) (@nat.less_than_or_equal.step a b a_1))),
C a_0 n,λ {a : @nat} {C : (∀ (a_1 : @nat) (h : @nat.less_than_or_equal a a_1), Prop)}
  {a_0 : @nat} (n : @nat.less_than_or_equal a a_0)
  (e_1 : C a (@nat.less_than_or_equal.refl a))
  (e_2 :
    (∀ {b : @nat} (a_1 : @nat.less_than_or_equal a b),
    C (@nat.succ b) (@nat.less_than_or_equal.step a b a_1))),
@nat.less_than_or_equal.rec a
  (λ (a_1 : @nat), ∀ (h : @nat.less_than_or_equal a a_1), C a_1 h)
  (λ (a_1 : @nat.less_than_or_equal a a), e_1)
  (λ {b : @nat} (a_1 : @nat.less_than_or_equal a b)
    (ih_1 : (∀ (h : @nat.less_than_or_equal a b), C b h))
    (a_2 : @nat.less_than_or_equal a (@nat.succ b)),
  e_2 b a_1) a_0 n n,0))"
err: "provingground.HoTT$ApplnFailException: function func  cannot act on given term"

mod: "DefMod(Definition(nat.not_succ_le_zero,Vector(),∀ (n : @nat)
  (a :
    @has_le.le.{0} @nat @nat.has_le (@nat.succ n)
      (@has_zero.zero.{0} @nat @nat.has_zero)),
@false,λ (n : @nat)
  (a :
    @has_le.le.{0} @nat @nat.has_le (@nat.succ n)
      (@has_zero.zero.{0} @nat @nat.has_zero)),
@nat.less_than_or_equal.dcases_on (@nat.succ n)
  (λ (t_1 : @nat) (a_1 : @nat.less_than_or_equal (@nat.succ n) t_1),
  ∀ (H_1 : @eq.{1} @nat (@has_zero.zero.{0} @nat @nat.has_zero) t_1)
    (H_2 :
      @heq.{0}
        (@has_le.le.{0} @nat @nat.has_le (@nat.succ n)
          (@has_zero.zero.{0} @nat @nat.has_zero)) a
        (@nat.less_than_or_equal (@nat.succ n) t_1) a_1),
  @false) (@has_zero.zero.{0} @nat @nat.has_zero) a
  (λ (a_0 : @eq.{1} @nat @nat.zero (@nat.succ n)),
  @nat.no_confusion.{0}
    (∀ (H_2 :
        @heq.{0}
          (@has_le.le.{0} @nat @nat.has_le (@nat.succ n)
            (@has_zero.zero.{0} @nat @nat.has_zero)) a
          (@nat.less_than_or_equal (@nat.succ n) (@nat.succ n))
          (@nat.less_than_or_equal.refl (@nat.succ n))),
    @false) @nat.zero (@nat.succ n) a_0)
  (λ {b : @nat} (a_1 : @nat.less_than_or_equal (@nat.succ n) b)
    (a_0 : @eq.{1} @nat @nat.zero (@nat.succ b)),
  @nat.no_confusion.{0}
    (∀ (H_2 :
        @heq.{0}
          (@has_le.le.{0} @nat @nat.has_le (@nat.succ n)
            (@has_zero.zero.{0} @nat @nat.has_zero)) a
          (@nat.less_than_or_equal (@nat.succ n) (@nat.succ b))
          (@nat.less_than_or_equal.step (@nat.succ n) b a_1)),
    @false) @nat.zero (@nat.succ b) a_0)
  (@eq.refl.{1} @nat (@has_zero.zero.{0} @nat @nat.has_zero))
  (@heq.refl.{0}
    (@has_le.le.{0} @nat @nat.has_le (@nat.succ n)
      (@has_zero.zero.{0} @nat @nat.has_zero)) a),0))"
err: "provingground.interface.UnParsedException: could not parse expression @nat.less_than_or_equal.dcases_on"

mod: "DefMod(Definition(nat.decidable_le._main,Vector(),∀ (a b : @nat), @decidable (@has_le.le.{0} @nat @nat.has_le a b),λ (a b : @nat),
@nat.brec_on.{1}
  (λ (a_0 : @nat),
  ∀ (b_0 : @nat),
  @decidable (@has_le.le.{0} @nat @nat.has_le a_0 b_0)) a
  (λ (a_0 : @nat)
    (F :
      @nat.below.{1}
        (λ (a_1 : @nat),
        ∀ (b_1 : @nat),
        @decidable (@has_le.le.{0} @nat @nat.has_le a_1 b_1)) a_0) (b_0 : @nat),
  (λ (a_1 b_1 : @nat)
      (F_0 :
        @nat.below.{1}
          (λ (a_2 : @nat),
          ∀ (b_2 : @nat),
          @decidable (@has_le.le.{0} @nat @nat.has_le a_2 b_2)) a_1),
    @nat.cases_on.{1}
      (λ (a_2 : @nat),
      ∀ (F_1 :
          @nat.below.{1}
            (λ (a_3 : @nat),
            ∀ (b_2 : @nat),
            @decidable (@has_le.le.{0} @nat @nat.has_le a_3 b_2)) a_2),
      @decidable (@has_le.le.{0} @nat @nat.has_le a_2 b_1)) a_1
      (λ (F_1 :
          @nat.below.{1}
            (λ (a_2 : @nat),
            ∀ (b_2 : @nat),
            @decidable (@has_le.le.{0} @nat @nat.has_le a_2 b_2)) @nat.zero),
      @decidable.is_true
        (@has_le.le.{0} @nat @nat.has_le (@has_zero.zero.{0} @nat @nat.has_zero)
          b_1) (@nat.zero_le b_1))
      (λ (a_2 : @nat)
        (F_1 :
          @nat.below.{1}
            (λ (a_3 : @nat),
            ∀ (b_2 : @nat),
            @decidable (@has_le.le.{0} @nat @nat.has_le a_3 b_2))
            (@nat.succ a_2)),
      @nat.cases_on.{1}
        (λ (b_2 : @nat),
        @decidable (@has_le.le.{0} @nat @nat.has_le (@nat.succ a_2) b_2)) b_1
        (@decidable.is_false
          (@has_le.le.{0} @nat @nat.has_le
            (@has_add.add.{0} @nat @nat.has_add a_2
              (@has_one.one.{0} @nat @nat.has_one))
            (@has_zero.zero.{0} @nat @nat.has_zero))
          (@nat.not_succ_le_zero a_2))
        (λ (a_1_0 : @nat),
        @nat.decidable_le._match_1 a_2 a_1_0
          (@pprod.fst.{1 1}
            ((λ (a_3 : @nat),
              ∀ (b_2 : @nat),
              @decidable (@has_le.le.{0} @nat @nat.has_le a_3 b_2))
              (@pprod.fst.{1 1}
                ((λ (a_3 : @nat), ∀ (a_4 : @nat), @nat) @nat.zero)
                (@nat.rec.{2} (λ (n : @nat), Type 0) @punit.{1}
                  (λ (a_3 : @nat) (ih_1 : Type 0),
                  @pprod.{1 1}
                    (@pprod.{1 1} ((λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) a_3)
                      ih_1) @punit.{1}) @nat.zero)
                (@pprod.fst.{1 1}
                  (@pprod.{1 1}
                    ((λ (a_3 : @nat), ∀ (a_4 : @nat), @nat) @nat.zero)
                    (@nat.rec.{2} (λ (n : @nat), Type 0) @punit.{1}
                      (λ (a_3 : @nat) (ih_1 : Type 0),
                      @pprod.{1 1}
                        (@pprod.{1 1}
                          ((λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) a_3) ih_1)
                        @punit.{1}) @nat.zero)) @punit.{1}
                  (@pprod.mk.{1 1}
                    (@pprod.{1 1}
                      ((λ (a_3 : @nat), ∀ (a_4 : @nat), @nat) @nat.zero)
                      (@nat.below.{1} (λ (a_3 : @nat), ∀ (a_4 : @nat), @nat)
                        @nat.zero)) @punit.{1}
                    (@nat.rec.{1}
                      (λ (n : @nat),
                      @pprod.{1 1} ((λ (a_3 : @nat), ∀ (a_4 : @nat), @nat) n)
                        (@nat.below.{1} (λ (a_3 : @nat), ∀ (a_4 : @nat), @nat)
                          n))
                      (@pprod.mk.{1 1}
                        ((λ (a_3 : @nat), ∀ (a_4 : @nat), @nat) @nat.zero)
                        @punit.{1}
                        ((λ (a_3 : @nat)
                            (F_2 :
                              @nat.below.{1}
                                (λ (a_5 : @nat), ∀ (a_6 : @nat), @nat) a_3)
                            (a_4 : @nat),
                          (λ (a_5 a_6 : @nat)
                              (F_3 :
                                @nat.below.{1}
                                  (λ (a_7 : @nat), ∀ (a_8 : @nat), @nat) a_6),
                            @nat.cases_on.{1}
                              (λ (a_7 : @nat),
                              ∀ (F_4 :
                                  @nat.below.{1}
                                    (λ (a_8 : @nat), ∀ (a_9 : @nat), @nat) a_7),
                              @nat) a_6
                              (λ (F_4 :
                                  @nat.below.{1}
                                    (λ (a_7 : @nat), ∀ (a_8 : @nat), @nat)
                                    @nat.zero),
                              a_5)
                              (λ (a_1_1 : @nat)
                                (F_4 :
                                  @nat.below.{1}
                                    (λ (a_7 : @nat), ∀ (a_8 : @nat), @nat)
                                    (@nat.succ a_1_1)),
                              @nat.succ
                                (@pprod.fst.{1 1}
                                  ((λ (a_7 : @nat), ∀ (a_8 : @nat), @nat) a_1_1)
                                  (@nat.rec.{2} (λ (n : @nat), Type 0)
                                    @punit.{1}
                                    (λ (a_7 : @nat) (ih_1 : Type 0),
                                    @pprod.{1 1}
                                      (@pprod.{1 1}
                                        ((λ (a_8 : @nat), ∀ (a_9 : @nat), @nat)
                                          a_7) ih_1) @punit.{1}) a_1_1)
                                  (@pprod.fst.{1 1}
                                    (@pprod.{1 1}
                                      ((λ (a_7 : @nat), ∀ (a_8 : @nat), @nat)
                                        a_1_1)
                                      (@nat.rec.{2} (λ (n : @nat), Type 0)
                                        @punit.{1}
                                        (λ (a_7 : @nat) (ih_1 : Type 0),
                                        @pprod.{1 1}
                                          (@pprod.{1 1}
                                            ((λ (a_8 : @nat),
                                              ∀ (a_9 : @nat),
                                              @nat) a_7) ih_1) @punit.{1})
                                        a_1_1)) @punit.{1} F_4) a_5)) F_3) a_4
                            a_3 F_2) @nat.zero @punit.star.{1}) @punit.star.{1})
                      (λ (a_3 : @nat)
                        (ih_1 :
                          @pprod.{1 1}
                            ((λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) a_3)
                            (@nat.below.{1}
                              (λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) a_3)),
                      @pprod.mk.{1 1}
                        ((λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) (@nat.succ a_3))
                        (@pprod.{1 1}
                          (@pprod.{1 1}
                            ((λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) a_3)
                            (@nat.below.{1}
                              (λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) a_3))
                          @punit.{1})
                        ((λ (a_4 : @nat)
                            (F_2 :
                              @nat.below.{1}
                                (λ (a_6 : @nat), ∀ (a_7 : @nat), @nat) a_4)
                            (a_5 : @nat),
                          (λ (a_6 a_7 : @nat)
                              (F_3 :
                                @nat.below.{1}
                                  (λ (a_8 : @nat), ∀ (a_9 : @nat), @nat) a_7),
                            @nat.cases_on.{1}
                              (λ (a_8 : @nat),
                              ∀ (F_4 :
                                  @nat.below.{1}
                                    (λ (a_9 : @nat), ∀ (a_10 : @nat), @nat)
                                    a_8),
                              @nat) a_7
                              (λ (F_4 :
                                  @nat.below.{1}
                                    (λ (a_8 : @nat), ∀ (a_9 : @nat), @nat)
                                    @nat.zero),
                              a_6)
                              (λ (a_1_1 : @nat)
                                (F_4 :
                                  @nat.below.{1}
                                    (λ (a_8 : @nat), ∀ (a_9 : @nat), @nat)
                                    (@nat.succ a_1_1)),
                              @nat.succ
                                (@pprod.fst.{1 1}
                                  ((λ (a_8 : @nat), ∀ (a_9 : @nat), @nat) a_1_1)
                                  (@nat.rec.{2} (λ (n : @nat), Type 0)
                                    @punit.{1}
                                    (λ (a_8 : @nat) (ih_1_0 : Type 0),
                                    @pprod.{1 1}
                                      (@pprod.{1 1}
                                        ((λ (a_9 : @nat), ∀ (a_10 : @nat), @nat)
                                          a_8) ih_1_0) @punit.{1}) a_1_1)
                                  (@pprod.fst.{1 1}
                                    (@pprod.{1 1}
                                      ((λ (a_8 : @nat), ∀ (a_9 : @nat), @nat)
                                        a_1_1)
                                      (@nat.rec.{2} (λ (n : @nat), Type 0)
                                        @punit.{1}
                                        (λ (a_8 : @nat) (ih_1_0 : Type 0),
                                        @pprod.{1 1}
                                          (@pprod.{1 1}
                                            ((λ (a_9 : @nat),
                                              ∀ (a_10 : @nat),
                                              @nat) a_8) ih_1_0) @punit.{1})
                                        a_1_1)) @punit.{1} F_4) a_6)) F_3) a_5
                            a_4 F_2) (@nat.succ a_3)
                          (@pprod.mk.{1 1}
                            (@pprod.{1 1}
                              ((λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) a_3)
                              (@nat.below.{1}
                                (λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) a_3))
                            @punit.{1} ih_1 @punit.star.{1}))
                        (@pprod.mk.{1 1}
                          (@pprod.{1 1}
                            ((λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) a_3)
                            (@nat.below.{1}
                              (λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) a_3))
                          @punit.{1} ih_1 @punit.star.{1})) @nat.zero)
                    @punit.star.{1})) a_2))
            (@nat.rec.{2} (λ (n : @nat), Type 0) @punit.{1}
              (λ (a_3 : @nat) (ih_1 : Type 0),
              @pprod.{1 1}
                (@pprod.{1 1}
                  ((λ (a_4 : @nat),
                    ∀ (b_2 : @nat),
                    @decidable (@has_le.le.{0} @nat @nat.has_le a_4 b_2)) a_3)
                  ih_1) @punit.{1})
              (@pprod.fst.{1 1}
                ((λ (a_3 : @nat), ∀ (a_4 : @nat), @nat) @nat.zero)
                (@nat.rec.{2} (λ (n : @nat), Type 0) @punit.{1}
                  (λ (a_3 : @nat) (ih_1 : Type 0),
                  @pprod.{1 1}
                    (@pprod.{1 1} ((λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) a_3)
                      ih_1) @punit.{1}) @nat.zero)
                (@pprod.fst.{1 1}
                  (@pprod.{1 1}
                    ((λ (a_3 : @nat), ∀ (a_4 : @nat), @nat) @nat.zero)
                    (@nat.rec.{2} (λ (n : @nat), Type 0) @punit.{1}
                      (λ (a_3 : @nat) (ih_1 : Type 0),
                      @pprod.{1 1}
                        (@pprod.{1 1}
                          ((λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) a_3) ih_1)
                        @punit.{1}) @nat.zero)) @punit.{1}
                  (@pprod.mk.{1 1}
                    (@pprod.{1 1}
                      ((λ (a_3 : @nat), ∀ (a_4 : @nat), @nat) @nat.zero)
                      (@nat.below.{1} (λ (a_3 : @nat), ∀ (a_4 : @nat), @nat)
                        @nat.zero)) @punit.{1}
                    (@nat.rec.{1}
                      (λ (n : @nat),
                      @pprod.{1 1} ((λ (a_3 : @nat), ∀ (a_4 : @nat), @nat) n)
                        (@nat.below.{1} (λ (a_3 : @nat), ∀ (a_4 : @nat), @nat)
                          n))
                      (@pprod.mk.{1 1}
                        ((λ (a_3 : @nat), ∀ (a_4 : @nat), @nat) @nat.zero)
                        @punit.{1}
                        ((λ (a_3 : @nat)
                            (F_2 :
                              @nat.below.{1}
                                (λ (a_5 : @nat), ∀ (a_6 : @nat), @nat) a_3)
                            (a_4 : @nat),
                          (λ (a_5 a_6 : @nat)
                              (F_3 :
                                @nat.below.{1}
                                  (λ (a_7 : @nat), ∀ (a_8 : @nat), @nat) a_6),
                            @nat.cases_on.{1}
                              (λ (a_7 : @nat),
                              ∀ (F_4 :
                                  @nat.below.{1}
                                    (λ (a_8 : @nat), ∀ (a_9 : @nat), @nat) a_7),
                              @nat) a_6
                              (λ (F_4 :
                                  @nat.below.{1}
                                    (λ (a_7 : @nat), ∀ (a_8 : @nat), @nat)
                                    @nat.zero),
                              a_5)
                              (λ (a_1_1 : @nat)
                                (F_4 :
                                  @nat.below.{1}
                                    (λ (a_7 : @nat), ∀ (a_8 : @nat), @nat)
                                    (@nat.succ a_1_1)),
                              @nat.succ
                                (@pprod.fst.{1 1}
                                  ((λ (a_7 : @nat), ∀ (a_8 : @nat), @nat) a_1_1)
                                  (@nat.rec.{2} (λ (n : @nat), Type 0)
                                    @punit.{1}
                                    (λ (a_7 : @nat) (ih_1 : Type 0),
                                    @pprod.{1 1}
                                      (@pprod.{1 1}
                                        ((λ (a_8 : @nat), ∀ (a_9 : @nat), @nat)
                                          a_7) ih_1) @punit.{1}) a_1_1)
                                  (@pprod.fst.{1 1}
                                    (@pprod.{1 1}
                                      ((λ (a_7 : @nat), ∀ (a_8 : @nat), @nat)
                                        a_1_1)
                                      (@nat.rec.{2} (λ (n : @nat), Type 0)
                                        @punit.{1}
                                        (λ (a_7 : @nat) (ih_1 : Type 0),
                                        @pprod.{1 1}
                                          (@pprod.{1 1}
                                            ((λ (a_8 : @nat),
                                              ∀ (a_9 : @nat),
                                              @nat) a_7) ih_1) @punit.{1})
                                        a_1_1)) @punit.{1} F_4) a_5)) F_3) a_4
                            a_3 F_2) @nat.zero @punit.star.{1}) @punit.star.{1})
                      (λ (a_3 : @nat)
                        (ih_1 :
                          @pprod.{1 1}
                            ((λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) a_3)
                            (@nat.below.{1}
                              (λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) a_3)),
                      @pprod.mk.{1 1}
                        ((λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) (@nat.succ a_3))
                        (@pprod.{1 1}
                          (@pprod.{1 1}
                            ((λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) a_3)
                            (@nat.below.{1}
                              (λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) a_3))
                          @punit.{1})
                        ((λ (a_4 : @nat)
                            (F_2 :
                              @nat.below.{1}
                                (λ (a_6 : @nat), ∀ (a_7 : @nat), @nat) a_4)
                            (a_5 : @nat),
                          (λ (a_6 a_7 : @nat)
                              (F_3 :
                                @nat.below.{1}
                                  (λ (a_8 : @nat), ∀ (a_9 : @nat), @nat) a_7),
                            @nat.cases_on.{1}
                              (λ (a_8 : @nat),
                              ∀ (F_4 :
                                  @nat.below.{1}
                                    (λ (a_9 : @nat), ∀ (a_10 : @nat), @nat)
                                    a_8),
                              @nat) a_7
                              (λ (F_4 :
                                  @nat.below.{1}
                                    (λ (a_8 : @nat), ∀ (a_9 : @nat), @nat)
                                    @nat.zero),
                              a_6)
                              (λ (a_1_1 : @nat)
                                (F_4 :
                                  @nat.below.{1}
                                    (λ (a_8 : @nat), ∀ (a_9 : @nat), @nat)
                                    (@nat.succ a_1_1)),
                              @nat.succ
                                (@pprod.fst.{1 1}
                                  ((λ (a_8 : @nat), ∀ (a_9 : @nat), @nat) a_1_1)
                                  (@nat.rec.{2} (λ (n : @nat), Type 0)
                                    @punit.{1}
                                    (λ (a_8 : @nat) (ih_1_0 : Type 0),
                                    @pprod.{1 1}
                                      (@pprod.{1 1}
                                        ((λ (a_9 : @nat), ∀ (a_10 : @nat), @nat)
                                          a_8) ih_1_0) @punit.{1}) a_1_1)
                                  (@pprod.fst.{1 1}
                                    (@pprod.{1 1}
                                      ((λ (a_8 : @nat), ∀ (a_9 : @nat), @nat)
                                        a_1_1)
                                      (@nat.rec.{2} (λ (n : @nat), Type 0)
                                        @punit.{1}
                                        (λ (a_8 : @nat) (ih_1_0 : Type 0),
                                        @pprod.{1 1}
                                          (@pprod.{1 1}
                                            ((λ (a_9 : @nat),
                                              ∀ (a_10 : @nat),
                                              @nat) a_8) ih_1_0) @punit.{1})
                                        a_1_1)) @punit.{1} F_4) a_6)) F_3) a_5
                            a_4 F_2) (@nat.succ a_3)
                          (@pprod.mk.{1 1}
                            (@pprod.{1 1}
                              ((λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) a_3)
                              (@nat.below.{1}
                                (λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) a_3))
                            @punit.{1} ih_1 @punit.star.{1}))
                        (@pprod.mk.{1 1}
                          (@pprod.{1 1}
                            ((λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) a_3)
                            (@nat.below.{1}
                              (λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) a_3))
                          @punit.{1} ih_1 @punit.star.{1})) @nat.zero)
                    @punit.star.{1})) a_2))
            (@pprod.fst.{1 1}
              (@pprod.{1 1}
                ((λ (a_3 : @nat),
                  ∀ (b_2 : @nat),
                  @decidable (@has_le.le.{0} @nat @nat.has_le a_3 b_2))
                  (@pprod.fst.{1 1}
                    ((λ (a_3 : @nat), ∀ (a_4 : @nat), @nat) @nat.zero)
                    (@nat.rec.{2} (λ (n : @nat), Type 0) @punit.{1}
                      (λ (a_3 : @nat) (ih_1 : Type 0),
                      @pprod.{1 1}
                        (@pprod.{1 1}
                          ((λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) a_3) ih_1)
                        @punit.{1}) @nat.zero)
                    (@pprod.fst.{1 1}
                      (@pprod.{1 1}
                        ((λ (a_3 : @nat), ∀ (a_4 : @nat), @nat) @nat.zero)
                        (@nat.rec.{2} (λ (n : @nat), Type 0) @punit.{1}
                          (λ (a_3 : @nat) (ih_1 : Type 0),
                          @pprod.{1 1}
                            (@pprod.{1 1}
                              ((λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) a_3) ih_1)
                            @punit.{1}) @nat.zero)) @punit.{1}
                      (@pprod.mk.{1 1}
                        (@pprod.{1 1}
                          ((λ (a_3 : @nat), ∀ (a_4 : @nat), @nat) @nat.zero)
                          (@nat.below.{1} (λ (a_3 : @nat), ∀ (a_4 : @nat), @nat)
                            @nat.zero)) @punit.{1}
                        (@nat.rec.{1}
                          (λ (n : @nat),
                          @pprod.{1 1}
                            ((λ (a_3 : @nat), ∀ (a_4 : @nat), @nat) n)
                            (@nat.below.{1}
                              (λ (a_3 : @nat), ∀ (a_4 : @nat), @nat) n))
                          (@pprod.mk.{1 1}
                            ((λ (a_3 : @nat), ∀ (a_4 : @nat), @nat) @nat.zero)
                            @punit.{1}
                            ((λ (a_3 : @nat)
                                (F_2 :
                                  @nat.below.{1}
                                    (λ (a_5 : @nat), ∀ (a_6 : @nat), @nat) a_3)
                                (a_4 : @nat),
                              (λ (a_5 a_6 : @nat)
                                  (F_3 :
                                    @nat.below.{1}
                                      (λ (a_7 : @nat), ∀ (a_8 : @nat), @nat)
                                      a_6),
                                @nat.cases_on.{1}
                                  (λ (a_7 : @nat),
                                  ∀ (F_4 :
                                      @nat.below.{1}
                                        (λ (a_8 : @nat), ∀ (a_9 : @nat), @nat)
                                        a_7),
                                  @nat) a_6
                                  (λ (F_4 :
                                      @nat.below.{1}
                                        (λ (a_7 : @nat), ∀ (a_8 : @nat), @nat)
                                        @nat.zero),
                                  a_5)
                                  (λ (a_1_1 : @nat)
                                    (F_4 :
                                      @nat.below.{1}
                                        (λ (a_7 : @nat), ∀ (a_8 : @nat), @nat)
                                        (@nat.succ a_1_1)),
                                  @nat.succ
                                    (@pprod.fst.{1 1}
                                      ((λ (a_7 : @nat), ∀ (a_8 : @nat), @nat)
                                        a_1_1)
                                      (@nat.rec.{2} (λ (n : @nat), Type 0)
                                        @punit.{1}
                                        (λ (a_7 : @nat) (ih_1 : Type 0),
                                        @pprod.{1 1}
                                          (@pprod.{1 1}
                                            ((λ (a_8 : @nat),
                                              ∀ (a_9 : @nat),
                                              @nat) a_7) ih_1) @punit.{1})
                                        a_1_1)
                                      (@pprod.fst.{1 1}
                                        (@pprod.{1 1}
                                          ((λ (a_7 : @nat),
                                            ∀ (a_8 : @nat),
                                            @nat) a_1_1)
                                          (@nat.rec.{2} (λ (n : @nat), Type 0)
                                            @punit.{1}
                                            (λ (a_7 : @nat) (ih_1 : Type 0),
                                            @pprod.{1 1}
                                              (@pprod.{1 1}
                                                ((λ (a_8 : @nat),
                                                  ∀ (a_9 : @nat),
                                                  @nat) a_7) ih_1) @punit.{1})
                                            a_1_1)) @punit.{1} F_4) a_5)) F_3)
                                a_4 a_3 F_2) @nat.zero @punit.star.{1})
                            @punit.star.{1})
                          (λ (a_3 : @nat)
                            (ih_1 :
                              @pprod.{1 1}
                                ((λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) a_3)
                                (@nat.below.{1}
                                  (λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) a_3)),
                          @pprod.mk.{1 1}
                            ((λ (a_4 : @nat), ∀ (a_5 : @nat), @nat)
                              (@nat.succ a_3))
                            (@pprod.{1 1}
                              (@pprod.{1 1}
                                ((λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) a_3)
                                (@nat.below.{1}
                                  (λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) a_3))
                              @punit.{1})
                            ((λ (a_4 : @nat)
                                (F_2 :
                                  @nat.below.{1}
                                    (λ (a_6 : @nat), ∀ (a_7 : @nat), @nat) a_4)
                                (a_5 : @nat),
                              (λ (a_6 a_7 : @nat)
                                  (F_3 :
                                    @nat.below.{1}
                                      (λ (a_8 : @nat), ∀ (a_9 : @nat), @nat)
                                      a_7),
                                @nat.cases_on.{1}
                                  (λ (a_8 : @nat),
                                  ∀ (F_4 :
                                      @nat.below.{1}
                                        (λ (a_9 : @nat), ∀ (a_10 : @nat), @nat)
                                        a_8),
                                  @nat) a_7
                                  (λ (F_4 :
                                      @nat.below.{1}
                                        (λ (a_8 : @nat), ∀ (a_9 : @nat), @nat)
                                        @nat.zero),
                                  a_6)
                                  (λ (a_1_1 : @nat)
                                    (F_4 :
                                      @nat.below.{1}
                                        (λ (a_8 : @nat), ∀ (a_9 : @nat), @nat)
                                        (@nat.succ a_1_1)),
                                  @nat.succ
                                    (@pprod.fst.{1 1}
                                      ((λ (a_8 : @nat), ∀ (a_9 : @nat), @nat)
                                        a_1_1)
                                      (@nat.rec.{2} (λ (n : @nat), Type 0)
                                        @punit.{1}
                                        (λ (a_8 : @nat) (ih_1_0 : Type 0),
                                        @pprod.{1 1}
                                          (@pprod.{1 1}
                                            ((λ (a_9 : @nat),
                                              ∀ (a_10 : @nat),
                                              @nat) a_8) ih_1_0) @punit.{1})
                                        a_1_1)
                                      (@pprod.fst.{1 1}
                                        (@pprod.{1 1}
                                          ((λ (a_8 : @nat),
                                            ∀ (a_9 : @nat),
                                            @nat) a_1_1)
                                          (@nat.rec.{2} (λ (n : @nat), Type 0)
                                            @punit.{1}
                                            (λ (a_8 : @nat) (ih_1_0 : Type 0),
                                            @pprod.{1 1}
                                              (@pprod.{1 1}
                                                ((λ (a_9 : @nat),
                                                  ∀ (a_10 : @nat),
                                                  @nat) a_8) ih_1_0) @punit.{1})
                                            a_1_1)) @punit.{1} F_4) a_6)) F_3)
                                a_5 a_4 F_2) (@nat.succ a_3)
                              (@pprod.mk.{1 1}
                                (@pprod.{1 1}
                                  ((λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) a_3)
                                  (@nat.below.{1}
                                    (λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) a_3))
                                @punit.{1} ih_1 @punit.star.{1}))
                            (@pprod.mk.{1 1}
                              (@pprod.{1 1}
                                ((λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) a_3)
                                (@nat.below.{1}
                                  (λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) a_3))
                              @punit.{1} ih_1 @punit.star.{1})) @nat.zero)
                        @punit.star.{1})) a_2))
                (@nat.rec.{2} (λ (n : @nat), Type 0) @punit.{1}
                  (λ (a_3 : @nat) (ih_1 : Type 0),
                  @pprod.{1 1}
                    (@pprod.{1 1}
                      ((λ (a_4 : @nat),
                        ∀ (b_2 : @nat),
                        @decidable (@has_le.le.{0} @nat @nat.has_le a_4 b_2))
                        a_3) ih_1) @punit.{1})
                  (@pprod.fst.{1 1}
                    ((λ (a_3 : @nat), ∀ (a_4 : @nat), @nat) @nat.zero)
                    (@nat.rec.{2} (λ (n : @nat), Type 0) @punit.{1}
                      (λ (a_3 : @nat) (ih_1 : Type 0),
                      @pprod.{1 1}
                        (@pprod.{1 1}
                          ((λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) a_3) ih_1)
                        @punit.{1}) @nat.zero)
                    (@pprod.fst.{1 1}
                      (@pprod.{1 1}
                        ((λ (a_3 : @nat), ∀ (a_4 : @nat), @nat) @nat.zero)
                        (@nat.rec.{2} (λ (n : @nat), Type 0) @punit.{1}
                          (λ (a_3 : @nat) (ih_1 : Type 0),
                          @pprod.{1 1}
                            (@pprod.{1 1}
                              ((λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) a_3) ih_1)
                            @punit.{1}) @nat.zero)) @punit.{1}
                      (@pprod.mk.{1 1}
                        (@pprod.{1 1}
                          ((λ (a_3 : @nat), ∀ (a_4 : @nat), @nat) @nat.zero)
                          (@nat.below.{1} (λ (a_3 : @nat), ∀ (a_4 : @nat), @nat)
                            @nat.zero)) @punit.{1}
                        (@nat.rec.{1}
                          (λ (n : @nat),
                          @pprod.{1 1}
                            ((λ (a_3 : @nat), ∀ (a_4 : @nat), @nat) n)
                            (@nat.below.{1}
                              (λ (a_3 : @nat), ∀ (a_4 : @nat), @nat) n))
                          (@pprod.mk.{1 1}
                            ((λ (a_3 : @nat), ∀ (a_4 : @nat), @nat) @nat.zero)
                            @punit.{1}
                            ((λ (a_3 : @nat)
                                (F_2 :
                                  @nat.below.{1}
                                    (λ (a_5 : @nat), ∀ (a_6 : @nat), @nat) a_3)
                                (a_4 : @nat),
                              (λ (a_5 a_6 : @nat)
                                  (F_3 :
                                    @nat.below.{1}
                                      (λ (a_7 : @nat), ∀ (a_8 : @nat), @nat)
                                      a_6),
                                @nat.cases_on.{1}
                                  (λ (a_7 : @nat),
                                  ∀ (F_4 :
                                      @nat.below.{1}
                                        (λ (a_8 : @nat), ∀ (a_9 : @nat), @nat)
                                        a_7),
                                  @nat) a_6
                                  (λ (F_4 :
                                      @nat.below.{1}
                                        (λ (a_7 : @nat), ∀ (a_8 : @nat), @nat)
                                        @nat.zero),
                                  a_5)
                                  (λ (a_1_1 : @nat)
                                    (F_4 :
                                      @nat.below.{1}
                                        (λ (a_7 : @nat), ∀ (a_8 : @nat), @nat)
                                        (@nat.succ a_1_1)),
                                  @nat.succ
                                    (@pprod.fst.{1 1}
                                      ((λ (a_7 : @nat), ∀ (a_8 : @nat), @nat)
                                        a_1_1)
                                      (@nat.rec.{2} (λ (n : @nat), Type 0)
                                        @punit.{1}
                                        (λ (a_7 : @nat) (ih_1 : Type 0),
                                        @pprod.{1 1}
                                          (@pprod.{1 1}
                                            ((λ (a_8 : @nat),
                                              ∀ (a_9 : @nat),
                                              @nat) a_7) ih_1) @punit.{1})
                                        a_1_1)
                                      (@pprod.fst.{1 1}
                                        (@pprod.{1 1}
                                          ((λ (a_7 : @nat),
                                            ∀ (a_8 : @nat),
                                            @nat) a_1_1)
                                          (@nat.rec.{2} (λ (n : @nat), Type 0)
                                            @punit.{1}
                                            (λ (a_7 : @nat) (ih_1 : Type 0),
                                            @pprod.{1 1}
                                              (@pprod.{1 1}
                                                ((λ (a_8 : @nat),
                                                  ∀ (a_9 : @nat),
                                                  @nat) a_7) ih_1) @punit.{1})
                                            a_1_1)) @punit.{1} F_4) a_5)) F_3)
                                a_4 a_3 F_2) @nat.zero @punit.star.{1})
                            @punit.star.{1})
                          (λ (a_3 : @nat)
                            (ih_1 :
                              @pprod.{1 1}
                                ((λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) a_3)
                                (@nat.below.{1}
                                  (λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) a_3)),
                          @pprod.mk.{1 1}
                            ((λ (a_4 : @nat), ∀ (a_5 : @nat), @nat)
                              (@nat.succ a_3))
                            (@pprod.{1 1}
                              (@pprod.{1 1}
                                ((λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) a_3)
                                (@nat.below.{1}
                                  (λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) a_3))
                              @punit.{1})
                            ((λ (a_4 : @nat)
                                (F_2 :
                                  @nat.below.{1}
                                    (λ (a_6 : @nat), ∀ (a_7 : @nat), @nat) a_4)
                                (a_5 : @nat),
                              (λ (a_6 a_7 : @nat)
                                  (F_3 :
                                    @nat.below.{1}
                                      (λ (a_8 : @nat), ∀ (a_9 : @nat), @nat)
                                      a_7),
                                @nat.cases_on.{1}
                                  (λ (a_8 : @nat),
                                  ∀ (F_4 :
                                      @nat.below.{1}
                                        (λ (a_9 : @nat), ∀ (a_10 : @nat), @nat)
                                        a_8),
                                  @nat) a_7
                                  (λ (F_4 :
                                      @nat.below.{1}
                                        (λ (a_8 : @nat), ∀ (a_9 : @nat), @nat)
                                        @nat.zero),
                                  a_6)
                                  (λ (a_1_1 : @nat)
                                    (F_4 :
                                      @nat.below.{1}
                                        (λ (a_8 : @nat), ∀ (a_9 : @nat), @nat)
                                        (@nat.succ a_1_1)),
                                  @nat.succ
                                    (@pprod.fst.{1 1}
                                      ((λ (a_8 : @nat), ∀ (a_9 : @nat), @nat)
                                        a_1_1)
                                      (@nat.rec.{2} (λ (n : @nat), Type 0)
                                        @punit.{1}
                                        (λ (a_8 : @nat) (ih_1_0 : Type 0),
                                        @pprod.{1 1}
                                          (@pprod.{1 1}
                                            ((λ (a_9 : @nat),
                                              ∀ (a_10 : @nat),
                                              @nat) a_8) ih_1_0) @punit.{1})
                                        a_1_1)
                                      (@pprod.fst.{1 1}
                                        (@pprod.{1 1}
                                          ((λ (a_8 : @nat),
                                            ∀ (a_9 : @nat),
                                            @nat) a_1_1)
                                          (@nat.rec.{2} (λ (n : @nat), Type 0)
                                            @punit.{1}
                                            (λ (a_8 : @nat) (ih_1_0 : Type 0),
                                            @pprod.{1 1}
                                              (@pprod.{1 1}
                                                ((λ (a_9 : @nat),
                                                  ∀ (a_10 : @nat),
                                                  @nat) a_8) ih_1_0) @punit.{1})
                                            a_1_1)) @punit.{1} F_4) a_6)) F_3)
                                a_5 a_4 F_2) (@nat.succ a_3)
                              (@pprod.mk.{1 1}
                                (@pprod.{1 1}
                                  ((λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) a_3)
                                  (@nat.below.{1}
                                    (λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) a_3))
                                @punit.{1} ih_1 @punit.star.{1}))
                            (@pprod.mk.{1 1}
                              (@pprod.{1 1}
                                ((λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) a_3)
                                (@nat.below.{1}
                                  (λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) a_3))
                              @punit.{1} ih_1 @punit.star.{1})) @nat.zero)
                        @punit.star.{1})) a_2))) @punit.{1} F_1) a_1_0))) F_0)
    a_0 b_0 F) b,0))"
err: "provingground.interface.UnParsedException: could not parse expression @nat.not_succ_le_zero"

mod: "DefMod(Definition(nat.decidable_le,Vector(),∀ (a b : @nat), @decidable (@has_le.le.{0} @nat @nat.has_le a b),@nat.decidable_le._main,0))"
err: "provingground.interface.UnParsedException: could not parse expression @nat.decidable_le._main"

mod: "DefMod(Definition(nat.decidable_lt,Vector(),∀ (a b : @nat), @decidable (@has_lt.lt.{0} @nat @nat.has_lt a b),λ (a b : @nat), @nat.decidable_le (@nat.succ a) b,0))"
err: "provingground.interface.UnParsedException: could not parse expression @nat.decidable_le"

mod: "DefMod(Definition(char.zero_lt_char_sz,Vector(),@has_lt.lt.{0} @nat @nat.has_lt (@has_zero.zero.{0} @nat @nat.has_zero) @char_sz,@nat.zero_lt_succ
  (@bit1.{0} @nat @nat.has_one @nat.has_add
    (@bit1.{0} @nat @nat.has_one @nat.has_add
      (@bit1.{0} @nat @nat.has_one @nat.has_add
        (@bit1.{0} @nat @nat.has_one @nat.has_add
          (@bit1.{0} @nat @nat.has_one @nat.has_add
            (@bit1.{0} @nat @nat.has_one @nat.has_add
              (@bit1.{0} @nat @nat.has_one @nat.has_add
                (@has_one.one.{0} @nat @nat.has_one)))))))),0))"
err: "java.util.concurrent.TimeoutException: Task timed-out after 5 minutes of inactivity"

mod: "DefMod(Definition(char.of_nat,Vector(),∀ (n : @nat), @char,λ (n : @nat),
@dite.{1} (@has_lt.lt.{0} @nat @nat.has_lt n @char_sz)
  (@nat.decidable_lt n @char_sz) @char
  (λ (h : @has_lt.lt.{0} @nat @nat.has_lt n @char_sz), @fin.mk @char_sz n h)
  (λ (h : @not (@has_lt.lt.{0} @nat @nat.has_lt n @char_sz)),
  @fin.mk @char_sz (@has_zero.zero.{0} @nat @nat.has_zero)
    @char.zero_lt_char_sz),0))"
err: "provingground.interface.UnParsedException: could not parse expression @char_sz"

mod: "IndMod(InductiveType(functor,Vector(Param(u), Param(v)),∀ (f : (∀ (a : Type u), Type v)), Type (max (u+1) v)),1,Vector((functor.mk,∀ {f : (∀ (a : Type u), Type v)} (to_has_map : @has_map.{u v} f)
  (map_const_eq :
    @auto_param.{0}
      (∀ {α β : Type u},
      @eq.{max (u+1) (v+1)} (∀ (a : α) (a_0 : f β), f α)
        (@has_map.map_const.{u v} f to_has_map α β)
        (@function.comp.{u+1 u+1 v+1} α (∀ (a : β), α) (∀ (a : f β), f α)
          (@has_map.map.{u v} f to_has_map β α)
          (@function.const.{u+1 u+1} α β)))
      (@name.mk_string
        (@string.str
          (@string.str
            (@string.str
              (@string.str
                (@string.str
                  (@string.str
                    (@string.str
                      (@string.str
                        (@string.str
                          (@string.str
                            (@string.str
                              (@string.str
                                (@string.str
                                  (@string.str
                                    (@string.str
                                      (@string.str @string.empty
                                        (@char.of_nat
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit0.{0} @nat @nat.has_add
                                                (@bit0.{0} @nat @nat.has_add
                                                  (@bit0.{0} @nat @nat.has_add
                                                    (@bit1.{0} @nat @nat.has_one
                                                      @nat.has_add
                                                      (@has_one.one.{0} @nat
                                                        @nat.has_one)))))))))
                                      (@char.of_nat
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit0.{0} @nat @nat.has_add
                                                  (@bit1.{0} @nat @nat.has_one
                                                    @nat.has_add
                                                    (@has_one.one.{0} @nat
                                                      @nat.has_one)))))))))
                                    (@char.of_nat
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit0.{0} @nat @nat.has_add
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@has_one.one.{0} @nat
                                                    @nat.has_one)))))))))
                                  (@char.of_nat
                                    (@bit0.{0} @nat @nat.has_add
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@bit0.{0} @nat @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@has_one.one.{0} @nat
                                                  @nat.has_one)))))))))
                                (@char.of_nat
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@has_one.one.{0} @nat
                                                @nat.has_one)))))))))
                              (@char.of_nat
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@has_one.one.{0} @nat
                                              @nat.has_one)))))))))
                            (@char.of_nat
                              (@bit0.{0} @nat @nat.has_add
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@has_one.one.{0} @nat
                                            @nat.has_one)))))))))
                          (@char.of_nat
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit0.{0} @nat @nat.has_add
                                        (@has_one.one.{0} @nat
                                          @nat.has_one)))))))))
                        (@char.of_nat
                          (@bit0.{0} @nat @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@has_one.one.{0} @nat
                                        @nat.has_one)))))))))
                      (@char.of_nat
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit0.{0} @nat @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@has_one.one.{0} @nat @nat.has_one)))))))))
                    (@char.of_nat
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@has_one.one.{0} @nat @nat.has_one)))))))))
                  (@char.of_nat
                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit0.{0} @nat @nat.has_add
                          (@bit0.{0} @nat @nat.has_add
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@has_one.one.{0} @nat @nat.has_one)))))))))
                (@char.of_nat
                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@has_one.one.{0} @nat @nat.has_one)))))))))
              (@char.of_nat
                (@bit0.{0} @nat @nat.has_add
                  (@bit0.{0} @nat @nat.has_add
                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                      (@bit0.{0} @nat @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@has_one.one.{0} @nat @nat.has_one)))))))))
            (@char.of_nat
              (@bit1.{0} @nat @nat.has_one @nat.has_add
                (@bit0.{0} @nat @nat.has_add
                  (@bit0.{0} @nat @nat.has_add
                    (@bit0.{0} @nat @nat.has_add
                      (@bit0.{0} @nat @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@has_one.one.{0} @nat @nat.has_one)))))))))
          (@char.of_nat
            (@bit1.{0} @nat @nat.has_one @nat.has_add
              (@bit1.{0} @nat @nat.has_one @nat.has_add
                (@bit0.{0} @nat @nat.has_add
                  (@bit0.{0} @nat @nat.has_add
                    (@bit0.{0} @nat @nat.has_add
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@has_one.one.{0} @nat @nat.has_one)))))))))
        @name.anonymous))
  (id_map :
    (∀ {α : Type u} (x : f α),
    @eq.{v+1} (f α) (@has_map.map.{u v} f to_has_map α α (@id.{u+1} α) x) x))
  (map_comp :
    (∀ {α β γ : Type u} (g : (∀ (a : α), β)) (h : (∀ (a : β), γ)) (x : f α),
    @eq.{v+1} (f γ)
      (@has_map.map.{u v} (λ {α_0 : Type u}, f α_0) to_has_map α γ
        (@function.comp.{u+1 u+1 u+1} α β γ h g) x)
      (@has_map.map.{u v} f to_has_map β γ h
        (@has_map.map.{u v} f to_has_map α β g x)))),
@functor.{u v} f)))"
err: "provingground.interface.UnParsedException: could not parse expression @name.anonymous"

mod: "DefMod(Definition(functor.to_has_map,Vector(Param(u), Param(v)),∀ (f : (∀ (a : Type u), Type v)) [c : @functor.{u v} f], @has_map.{u v} f,λ (f : (∀ (a : Type u), Type v)) [c : @functor.{u v} f],
@functor.rec.{(max (u+1) v)+1 u v} f
  (λ [c_0 : @functor.{u v} f], @has_map.{u v} f)
  (λ (to_has_map : @has_map.{u v} f)
    (map_const_eq :
      @auto_param.{0}
        (∀ {α β : Type u},
        @eq.{max (u+1) (v+1)} (∀ (a : α) (a_0 : f β), f α)
          (@has_map.map_const.{u v} f to_has_map α β)
          (@function.comp.{u+1 u+1 v+1} α (∀ (a : β), α) (∀ (a : f β), f α)
            (@has_map.map.{u v} f to_has_map β α)
            (@function.const.{u+1 u+1} α β)))
        (@name.mk_string
          (@string.str
            (@string.str
              (@string.str
                (@string.str
                  (@string.str
                    (@string.str
                      (@string.str
                        (@string.str
                          (@string.str
                            (@string.str
                              (@string.str
                                (@string.str
                                  (@string.str
                                    (@string.str
                                      (@string.str
                                        (@string.str @string.empty
                                          (@char.of_nat
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit0.{0} @nat @nat.has_add
                                                  (@bit0.{0} @nat @nat.has_add
                                                    (@bit0.{0} @nat @nat.has_add
                                                      (@bit1.{0} @nat
                                                        @nat.has_one
                                                        @nat.has_add
                                                        (@has_one.one.{0} @nat
                                                          @nat.has_one)))))))))
                                        (@char.of_nat
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@bit0.{0} @nat @nat.has_add
                                                    (@bit1.{0} @nat @nat.has_one
                                                      @nat.has_add
                                                      (@has_one.one.{0} @nat
                                                        @nat.has_one)))))))))
                                      (@char.of_nat
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit0.{0} @nat @nat.has_add
                                                  (@bit1.{0} @nat @nat.has_one
                                                    @nat.has_add
                                                    (@has_one.one.{0} @nat
                                                      @nat.has_one)))))))))
                                    (@char.of_nat
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit0.{0} @nat @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@has_one.one.{0} @nat
                                                    @nat.has_one)))))))))
                                  (@char.of_nat
                                    (@bit0.{0} @nat @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit0.{0} @nat @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@has_one.one.{0} @nat
                                                  @nat.has_one)))))))))
                                (@char.of_nat
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@bit0.{0} @nat @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@has_one.one.{0} @nat
                                                @nat.has_one)))))))))
                              (@char.of_nat
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@has_one.one.{0} @nat
                                              @nat.has_one)))))))))
                            (@char.of_nat
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@has_one.one.{0} @nat
                                            @nat.has_one)))))))))
                          (@char.of_nat
                            (@bit0.{0} @nat @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit0.{0} @nat @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@has_one.one.{0} @nat
                                          @nat.has_one)))))))))
                        (@char.of_nat
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@has_one.one.{0} @nat
                                        @nat.has_one)))))))))
                      (@char.of_nat
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@has_one.one.{0} @nat @nat.has_one)))))))))
                    (@char.of_nat
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit0.{0} @nat @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@has_one.one.{0} @nat @nat.has_one)))))))))
                  (@char.of_nat
                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@has_one.one.{0} @nat @nat.has_one)))))))))
                (@char.of_nat
                  (@bit0.{0} @nat @nat.has_add
                    (@bit0.{0} @nat @nat.has_add
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit0.{0} @nat @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@has_one.one.{0} @nat @nat.has_one)))))))))
              (@char.of_nat
                (@bit1.{0} @nat @nat.has_one @nat.has_add
                  (@bit0.{0} @nat @nat.has_add
                    (@bit0.{0} @nat @nat.has_add
                      (@bit0.{0} @nat @nat.has_add
                        (@bit0.{0} @nat @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@has_one.one.{0} @nat @nat.has_one)))))))))
            (@char.of_nat
              (@bit1.{0} @nat @nat.has_one @nat.has_add
                (@bit1.{0} @nat @nat.has_one @nat.has_add
                  (@bit0.{0} @nat @nat.has_add
                    (@bit0.{0} @nat @nat.has_add
                      (@bit0.{0} @nat @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@has_one.one.{0} @nat @nat.has_one)))))))))
          @name.anonymous))
    (id_map :
      (∀ {α : Type u} (x : f α),
      @eq.{v+1} (f α) (@has_map.map.{u v} f to_has_map α α (@id.{u+1} α) x) x))
    (map_comp :
      (∀ {α β γ : Type u} (g : (∀ (a : α), β)) (h : (∀ (a : β), γ)) (x : f α),
      @eq.{v+1} (f γ)
        (@has_map.map.{u v} (λ {α_0 : Type u}, f α_0) to_has_map α γ
          (@function.comp.{u+1 u+1 u+1} α β γ h g) x)
        (@has_map.map.{u v} f to_has_map β γ h
          (@has_map.map.{u v} f to_has_map α β g x)))),
  to_has_map) c,0))"
err: "provingground.interface.UnParsedException: could not parse expression @functor.{u v}"

mod: "IndMod(InductiveType(applicative,Vector(Param(u), Param(v)),∀ (f : (∀ (a : Type u), Type v)), Sort (max (u+2) (v+1))),1,Vector((applicative.mk,∀ {f : (∀ (a : Type u), Type v)} (to_functor : @functor.{u v} f)
  (to_has_pure : @has_pure.{u v} f) (to_has_seq : @has_seq.{u v} f)
  (to_has_seq_left : @has_seq_left.{u v} f)
  (to_has_seq_right : @has_seq_right.{u v} f)
  (seq_left_eq :
    @auto_param.{0}
      (∀ {α β : Type u} (a : f α) (b : f β),
      @eq.{v+1} (f α) (@has_seq_left.seq_left.{u v} f to_has_seq_left α β a b)
        (@has_seq.seq.{u v} f to_has_seq β α
          (@has_map.map.{u v} f (@functor.to_has_map.{u v} f to_functor) α
            (∀ (a_0 : β), α) (@function.const.{u+1 u+1} α β) a) b))
      (@name.mk_string
        (@string.str
          (@string.str
            (@string.str
              (@string.str
                (@string.str
                  (@string.str
                    (@string.str
                      (@string.str
                        (@string.str
                          (@string.str
                            (@string.str
                              (@string.str
                                (@string.str
                                  (@string.str
                                    (@string.str
                                      (@string.str @string.empty
                                        (@char.of_nat
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit0.{0} @nat @nat.has_add
                                                (@bit0.{0} @nat @nat.has_add
                                                  (@bit0.{0} @nat @nat.has_add
                                                    (@bit1.{0} @nat @nat.has_one
                                                      @nat.has_add
                                                      (@has_one.one.{0} @nat
                                                        @nat.has_one)))))))))
                                      (@char.of_nat
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit0.{0} @nat @nat.has_add
                                                  (@bit1.{0} @nat @nat.has_one
                                                    @nat.has_add
                                                    (@has_one.one.{0} @nat
                                                      @nat.has_one)))))))))
                                    (@char.of_nat
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit0.{0} @nat @nat.has_add
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@has_one.one.{0} @nat
                                                    @nat.has_one)))))))))
                                  (@char.of_nat
                                    (@bit0.{0} @nat @nat.has_add
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@bit0.{0} @nat @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@has_one.one.{0} @nat
                                                  @nat.has_one)))))))))
                                (@char.of_nat
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@has_one.one.{0} @nat
                                                @nat.has_one)))))))))
                              (@char.of_nat
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@has_one.one.{0} @nat
                                              @nat.has_one)))))))))
                            (@char.of_nat
                              (@bit0.{0} @nat @nat.has_add
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@has_one.one.{0} @nat
                                            @nat.has_one)))))))))
                          (@char.of_nat
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit0.{0} @nat @nat.has_add
                                        (@has_one.one.{0} @nat
                                          @nat.has_one)))))))))
                        (@char.of_nat
                          (@bit0.{0} @nat @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@has_one.one.{0} @nat
                                        @nat.has_one)))))))))
                      (@char.of_nat
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit0.{0} @nat @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@has_one.one.{0} @nat @nat.has_one)))))))))
                    (@char.of_nat
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@has_one.one.{0} @nat @nat.has_one)))))))))
                  (@char.of_nat
                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit0.{0} @nat @nat.has_add
                          (@bit0.{0} @nat @nat.has_add
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@has_one.one.{0} @nat @nat.has_one)))))))))
                (@char.of_nat
                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@has_one.one.{0} @nat @nat.has_one)))))))))
              (@char.of_nat
                (@bit0.{0} @nat @nat.has_add
                  (@bit0.{0} @nat @nat.has_add
                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                      (@bit0.{0} @nat @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@has_one.one.{0} @nat @nat.has_one)))))))))
            (@char.of_nat
              (@bit1.{0} @nat @nat.has_one @nat.has_add
                (@bit0.{0} @nat @nat.has_add
                  (@bit0.{0} @nat @nat.has_add
                    (@bit0.{0} @nat @nat.has_add
                      (@bit0.{0} @nat @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@has_one.one.{0} @nat @nat.has_one)))))))))
          (@char.of_nat
            (@bit1.{0} @nat @nat.has_one @nat.has_add
              (@bit1.{0} @nat @nat.has_one @nat.has_add
                (@bit0.{0} @nat @nat.has_add
                  (@bit0.{0} @nat @nat.has_add
                    (@bit0.{0} @nat @nat.has_add
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@has_one.one.{0} @nat @nat.has_one)))))))))
        @name.anonymous))
  (seq_right_eq :
    @auto_param.{0}
      (∀ {α β : Type u} (a : f α) (b : f β),
      @eq.{v+1} (f β)
        (@has_seq_right.seq_right.{u v} f to_has_seq_right α β a b)
        (@has_seq.seq.{u v} f to_has_seq β β
          (@has_map.map.{u v} f (@functor.to_has_map.{u v} f to_functor) α
            (∀ (a_0 : β), β)
            (@function.const.{u+1 u+1} (∀ (a_0 : β), β) α (@id.{u+1} β)) a) b))
      (@name.mk_string
        (@string.str
          (@string.str
            (@string.str
              (@string.str
                (@string.str
                  (@string.str
                    (@string.str
                      (@string.str
                        (@string.str
                          (@string.str
                            (@string.str
                              (@string.str
                                (@string.str
                                  (@string.str
                                    (@string.str
                                      (@string.str @string.empty
                                        (@char.of_nat
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit0.{0} @nat @nat.has_add
                                                (@bit0.{0} @nat @nat.has_add
                                                  (@bit0.{0} @nat @nat.has_add
                                                    (@bit1.{0} @nat @nat.has_one
                                                      @nat.has_add
                                                      (@has_one.one.{0} @nat
                                                        @nat.has_one)))))))))
                                      (@char.of_nat
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit0.{0} @nat @nat.has_add
                                                  (@bit1.{0} @nat @nat.has_one
                                                    @nat.has_add
                                                    (@has_one.one.{0} @nat
                                                      @nat.has_one)))))))))
                                    (@char.of_nat
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit0.{0} @nat @nat.has_add
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@has_one.one.{0} @nat
                                                    @nat.has_one)))))))))
                                  (@char.of_nat
                                    (@bit0.{0} @nat @nat.has_add
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@bit0.{0} @nat @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@has_one.one.{0} @nat
                                                  @nat.has_one)))))))))
                                (@char.of_nat
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@has_one.one.{0} @nat
                                                @nat.has_one)))))))))
                              (@char.of_nat
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@has_one.one.{0} @nat
                                              @nat.has_one)))))))))
                            (@char.of_nat
                              (@bit0.{0} @nat @nat.has_add
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@has_one.one.{0} @nat
                                            @nat.has_one)))))))))
                          (@char.of_nat
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit0.{0} @nat @nat.has_add
                                        (@has_one.one.{0} @nat
                                          @nat.has_one)))))))))
                        (@char.of_nat
                          (@bit0.{0} @nat @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@has_one.one.{0} @nat
                                        @nat.has_one)))))))))
                      (@char.of_nat
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit0.{0} @nat @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@has_one.one.{0} @nat @nat.has_one)))))))))
                    (@char.of_nat
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@has_one.one.{0} @nat @nat.has_one)))))))))
                  (@char.of_nat
                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit0.{0} @nat @nat.has_add
                          (@bit0.{0} @nat @nat.has_add
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@has_one.one.{0} @nat @nat.has_one)))))))))
                (@char.of_nat
                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@has_one.one.{0} @nat @nat.has_one)))))))))
              (@char.of_nat
                (@bit0.{0} @nat @nat.has_add
                  (@bit0.{0} @nat @nat.has_add
                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                      (@bit0.{0} @nat @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@has_one.one.{0} @nat @nat.has_one)))))))))
            (@char.of_nat
              (@bit1.{0} @nat @nat.has_one @nat.has_add
                (@bit0.{0} @nat @nat.has_add
                  (@bit0.{0} @nat @nat.has_add
                    (@bit0.{0} @nat @nat.has_add
                      (@bit0.{0} @nat @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@has_one.one.{0} @nat @nat.has_one)))))))))
          (@char.of_nat
            (@bit1.{0} @nat @nat.has_one @nat.has_add
              (@bit1.{0} @nat @nat.has_one @nat.has_add
                (@bit0.{0} @nat @nat.has_add
                  (@bit0.{0} @nat @nat.has_add
                    (@bit0.{0} @nat @nat.has_add
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@has_one.one.{0} @nat @nat.has_one)))))))))
        @name.anonymous))
  (pure_seq_eq_map :
    (∀ {α β : Type u} (g : (∀ (a : α), β)) (x : f α),
    @eq.{v+1} (f β)
      (@has_seq.seq.{u v} f to_has_seq α β
        (@has_pure.pure.{u v} f to_has_pure (∀ (a : α), β) g) x)
      (@has_map.map.{u v} f (@functor.to_has_map.{u v} f to_functor) α β g x)))
  (map_pure :
    (∀ {α β : Type u} (g : (∀ (a : α), β)) (x : α),
    @eq.{v+1} (f β)
      (@has_map.map.{u v} (λ {α_0 : Type u}, f α_0)
        (@functor.to_has_map.{u v} f to_functor) α β g
        (@has_pure.pure.{u v} f to_has_pure α x))
      (@has_pure.pure.{u v} f to_has_pure β (g x))))
  (seq_pure :
    (∀ {α β : Type u} (g : f (∀ (a : α), β)) (x : α),
    @eq.{v+1} (f β)
      (@has_seq.seq.{u v} f to_has_seq α β g
        (@has_pure.pure.{u v} f to_has_pure α x))
      (@has_map.map.{u v} f (@functor.to_has_map.{u v} f to_functor)
        (∀ (a : α), β) β (λ (g_0 : (∀ (a : α), β)), g_0 x) g)))
  (seq_assoc :
    (∀ {α β γ : Type u} (x : f α) (g : f (∀ (a : α), β)) (h : f (∀ (a : β), γ)),
    @eq.{v+1} (f γ)
      (@has_seq.seq.{u v} f to_has_seq β γ h
        (@has_seq.seq.{u v} f to_has_seq α β g x))
      (@has_seq.seq.{u v} f to_has_seq α γ
        (@has_seq.seq.{u v} f to_has_seq (∀ (a : α), β) (∀ (a : α), γ)
          (@has_map.map.{u v} f (@functor.to_has_map.{u v} f to_functor)
            (∀ (a : β), γ) (∀ (a : (∀ (a_1 : α), β)) (a_0 : α), γ)
            (@function.comp.{u+1 u+1 u+1} α β γ) h) g) x))),
@applicative.{u v} f)))"
err: "provingground.interface.UnParsedException: could not parse expression @functor.{u v}"

mod: "DefMod(Definition(applicative.to_has_pure,Vector(Param(u), Param(v)),∀ (f : (∀ (a : Type u), Type v)) [c : @applicative.{u v} f], @has_pure.{u v} f,λ (f : (∀ (a : Type u), Type v)) [c : @applicative.{u v} f],
@applicative.rec.{max (u+2) (v+1) u v} f
  (λ [c_0 : @applicative.{u v} f], @has_pure.{u v} f)
  (λ (to_functor : @functor.{u v} f) (to_has_pure : @has_pure.{u v} f)
    (to_has_seq : @has_seq.{u v} f) (to_has_seq_left : @has_seq_left.{u v} f)
    (to_has_seq_right : @has_seq_right.{u v} f)
    (seq_left_eq :
      @auto_param.{0}
        (∀ {α β : Type u} (a : f α) (b : f β),
        @eq.{v+1} (f α) (@has_seq_left.seq_left.{u v} f to_has_seq_left α β a b)
          (@has_seq.seq.{u v} f to_has_seq β α
            (@has_map.map.{u v} f (@functor.to_has_map.{u v} f to_functor) α
              (∀ (a_0 : β), α) (@function.const.{u+1 u+1} α β) a) b))
        (@name.mk_string
          (@string.str
            (@string.str
              (@string.str
                (@string.str
                  (@string.str
                    (@string.str
                      (@string.str
                        (@string.str
                          (@string.str
                            (@string.str
                              (@string.str
                                (@string.str
                                  (@string.str
                                    (@string.str
                                      (@string.str
                                        (@string.str @string.empty
                                          (@char.of_nat
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit0.{0} @nat @nat.has_add
                                                  (@bit0.{0} @nat @nat.has_add
                                                    (@bit0.{0} @nat @nat.has_add
                                                      (@bit1.{0} @nat
                                                        @nat.has_one
                                                        @nat.has_add
                                                        (@has_one.one.{0} @nat
                                                          @nat.has_one)))))))))
                                        (@char.of_nat
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@bit0.{0} @nat @nat.has_add
                                                    (@bit1.{0} @nat @nat.has_one
                                                      @nat.has_add
                                                      (@has_one.one.{0} @nat
                                                        @nat.has_one)))))))))
                                      (@char.of_nat
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit0.{0} @nat @nat.has_add
                                                  (@bit1.{0} @nat @nat.has_one
                                                    @nat.has_add
                                                    (@has_one.one.{0} @nat
                                                      @nat.has_one)))))))))
                                    (@char.of_nat
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit0.{0} @nat @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@has_one.one.{0} @nat
                                                    @nat.has_one)))))))))
                                  (@char.of_nat
                                    (@bit0.{0} @nat @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit0.{0} @nat @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@has_one.one.{0} @nat
                                                  @nat.has_one)))))))))
                                (@char.of_nat
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@bit0.{0} @nat @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@has_one.one.{0} @nat
                                                @nat.has_one)))))))))
                              (@char.of_nat
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@has_one.one.{0} @nat
                                              @nat.has_one)))))))))
                            (@char.of_nat
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@has_one.one.{0} @nat
                                            @nat.has_one)))))))))
                          (@char.of_nat
                            (@bit0.{0} @nat @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit0.{0} @nat @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@has_one.one.{0} @nat
                                          @nat.has_one)))))))))
                        (@char.of_nat
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@has_one.one.{0} @nat
                                        @nat.has_one)))))))))
                      (@char.of_nat
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@has_one.one.{0} @nat @nat.has_one)))))))))
                    (@char.of_nat
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit0.{0} @nat @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@has_one.one.{0} @nat @nat.has_one)))))))))
                  (@char.of_nat
                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@has_one.one.{0} @nat @nat.has_one)))))))))
                (@char.of_nat
                  (@bit0.{0} @nat @nat.has_add
                    (@bit0.{0} @nat @nat.has_add
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit0.{0} @nat @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@has_one.one.{0} @nat @nat.has_one)))))))))
              (@char.of_nat
                (@bit1.{0} @nat @nat.has_one @nat.has_add
                  (@bit0.{0} @nat @nat.has_add
                    (@bit0.{0} @nat @nat.has_add
                      (@bit0.{0} @nat @nat.has_add
                        (@bit0.{0} @nat @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@has_one.one.{0} @nat @nat.has_one)))))))))
            (@char.of_nat
              (@bit1.{0} @nat @nat.has_one @nat.has_add
                (@bit1.{0} @nat @nat.has_one @nat.has_add
                  (@bit0.{0} @nat @nat.has_add
                    (@bit0.{0} @nat @nat.has_add
                      (@bit0.{0} @nat @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@has_one.one.{0} @nat @nat.has_one)))))))))
          @name.anonymous))
    (seq_right_eq :
      @auto_param.{0}
        (∀ {α β : Type u} (a : f α) (b : f β),
        @eq.{v+1} (f β)
          (@has_seq_right.seq_right.{u v} f to_has_seq_right α β a b)
          (@has_seq.seq.{u v} f to_has_seq β β
            (@has_map.map.{u v} f (@functor.to_has_map.{u v} f to_functor) α
              (∀ (a_0 : β), β)
              (@function.const.{u+1 u+1} (∀ (a_0 : β), β) α (@id.{u+1} β)) a)
            b))
        (@name.mk_string
          (@string.str
            (@string.str
              (@string.str
                (@string.str
                  (@string.str
                    (@string.str
                      (@string.str
                        (@string.str
                          (@string.str
                            (@string.str
                              (@string.str
                                (@string.str
                                  (@string.str
                                    (@string.str
                                      (@string.str
                                        (@string.str @string.empty
                                          (@char.of_nat
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit0.{0} @nat @nat.has_add
                                                  (@bit0.{0} @nat @nat.has_add
                                                    (@bit0.{0} @nat @nat.has_add
                                                      (@bit1.{0} @nat
                                                        @nat.has_one
                                                        @nat.has_add
                                                        (@has_one.one.{0} @nat
                                                          @nat.has_one)))))))))
                                        (@char.of_nat
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@bit0.{0} @nat @nat.has_add
                                                    (@bit1.{0} @nat @nat.has_one
                                                      @nat.has_add
                                                      (@has_one.one.{0} @nat
                                                        @nat.has_one)))))))))
                                      (@char.of_nat
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit0.{0} @nat @nat.has_add
                                                  (@bit1.{0} @nat @nat.has_one
                                                    @nat.has_add
                                                    (@has_one.one.{0} @nat
                                                      @nat.has_one)))))))))
                                    (@char.of_nat
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit0.{0} @nat @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@has_one.one.{0} @nat
                                                    @nat.has_one)))))))))
                                  (@char.of_nat
                                    (@bit0.{0} @nat @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit0.{0} @nat @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@has_one.one.{0} @nat
                                                  @nat.has_one)))))))))
                                (@char.of_nat
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@bit0.{0} @nat @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@has_one.one.{0} @nat
                                                @nat.has_one)))))))))
                              (@char.of_nat
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@has_one.one.{0} @nat
                                              @nat.has_one)))))))))
                            (@char.of_nat
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@has_one.one.{0} @nat
                                            @nat.has_one)))))))))
                          (@char.of_nat
                            (@bit0.{0} @nat @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit0.{0} @nat @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@has_one.one.{0} @nat
                                          @nat.has_one)))))))))
                        (@char.of_nat
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@has_one.one.{0} @nat
                                        @nat.has_one)))))))))
                      (@char.of_nat
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@has_one.one.{0} @nat @nat.has_one)))))))))
                    (@char.of_nat
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit0.{0} @nat @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@has_one.one.{0} @nat @nat.has_one)))))))))
                  (@char.of_nat
                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@has_one.one.{0} @nat @nat.has_one)))))))))
                (@char.of_nat
                  (@bit0.{0} @nat @nat.has_add
                    (@bit0.{0} @nat @nat.has_add
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit0.{0} @nat @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@has_one.one.{0} @nat @nat.has_one)))))))))
              (@char.of_nat
                (@bit1.{0} @nat @nat.has_one @nat.has_add
                  (@bit0.{0} @nat @nat.has_add
                    (@bit0.{0} @nat @nat.has_add
                      (@bit0.{0} @nat @nat.has_add
                        (@bit0.{0} @nat @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@has_one.one.{0} @nat @nat.has_one)))))))))
            (@char.of_nat
              (@bit1.{0} @nat @nat.has_one @nat.has_add
                (@bit1.{0} @nat @nat.has_one @nat.has_add
                  (@bit0.{0} @nat @nat.has_add
                    (@bit0.{0} @nat @nat.has_add
                      (@bit0.{0} @nat @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@has_one.one.{0} @nat @nat.has_one)))))))))
          @name.anonymous))
    (pure_seq_eq_map :
      (∀ {α β : Type u} (g : (∀ (a : α), β)) (x : f α),
      @eq.{v+1} (f β)
        (@has_seq.seq.{u v} f to_has_seq α β
          (@has_pure.pure.{u v} f to_has_pure (∀ (a : α), β) g) x)
        (@has_map.map.{u v} f (@functor.to_has_map.{u v} f to_functor) α β g
          x)))
    (map_pure :
      (∀ {α β : Type u} (g : (∀ (a : α), β)) (x : α),
      @eq.{v+1} (f β)
        (@has_map.map.{u v} (λ {α_0 : Type u}, f α_0)
          (@functor.to_has_map.{u v} f to_functor) α β g
          (@has_pure.pure.{u v} f to_has_pure α x))
        (@has_pure.pure.{u v} f to_has_pure β (g x))))
    (seq_pure :
      (∀ {α β : Type u} (g : f (∀ (a : α), β)) (x : α),
      @eq.{v+1} (f β)
        (@has_seq.seq.{u v} f to_has_seq α β g
          (@has_pure.pure.{u v} f to_has_pure α x))
        (@has_map.map.{u v} f (@functor.to_has_map.{u v} f to_functor)
          (∀ (a : α), β) β (λ (g_0 : (∀ (a : α), β)), g_0 x) g)))
    (seq_assoc :
      (∀ {α β γ : Type u} (x : f α) (g : f (∀ (a : α), β))
        (h : f (∀ (a : β), γ)),
      @eq.{v+1} (f γ)
        (@has_seq.seq.{u v} f to_has_seq β γ h
          (@has_seq.seq.{u v} f to_has_seq α β g x))
        (@has_seq.seq.{u v} f to_has_seq α γ
          (@has_seq.seq.{u v} f to_has_seq (∀ (a : α), β) (∀ (a : α), γ)
            (@has_map.map.{u v} f (@functor.to_has_map.{u v} f to_functor)
              (∀ (a : β), γ) (∀ (a : (∀ (a_1 : α), β)) (a_0 : α), γ)
              (@function.comp.{u+1 u+1 u+1} α β γ) h) g) x))),
  to_has_pure) c,0))"
err: "provingground.interface.UnParsedException: could not parse expression @applicative.{u v}"

mod: "DefMod(Definition(applicative.to_functor,Vector(Param(u), Param(v)),∀ (f : (∀ (a : Type u), Type v)) [c : @applicative.{u v} f], @functor.{u v} f,λ (f : (∀ (a : Type u), Type v)) [c : @applicative.{u v} f],
@applicative.rec.{(max (u+1) v)+1 u v} f
  (λ [c_0 : @applicative.{u v} f], @functor.{u v} f)
  (λ (to_functor : @functor.{u v} f) (to_has_pure : @has_pure.{u v} f)
    (to_has_seq : @has_seq.{u v} f) (to_has_seq_left : @has_seq_left.{u v} f)
    (to_has_seq_right : @has_seq_right.{u v} f)
    (seq_left_eq :
      @auto_param.{0}
        (∀ {α β : Type u} (a : f α) (b : f β),
        @eq.{v+1} (f α) (@has_seq_left.seq_left.{u v} f to_has_seq_left α β a b)
          (@has_seq.seq.{u v} f to_has_seq β α
            (@has_map.map.{u v} f (@functor.to_has_map.{u v} f to_functor) α
              (∀ (a_0 : β), α) (@function.const.{u+1 u+1} α β) a) b))
        (@name.mk_string
          (@string.str
            (@string.str
              (@string.str
                (@string.str
                  (@string.str
                    (@string.str
                      (@string.str
                        (@string.str
                          (@string.str
                            (@string.str
                              (@string.str
                                (@string.str
                                  (@string.str
                                    (@string.str
                                      (@string.str
                                        (@string.str @string.empty
                                          (@char.of_nat
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit0.{0} @nat @nat.has_add
                                                  (@bit0.{0} @nat @nat.has_add
                                                    (@bit0.{0} @nat @nat.has_add
                                                      (@bit1.{0} @nat
                                                        @nat.has_one
                                                        @nat.has_add
                                                        (@has_one.one.{0} @nat
                                                          @nat.has_one)))))))))
                                        (@char.of_nat
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@bit0.{0} @nat @nat.has_add
                                                    (@bit1.{0} @nat @nat.has_one
                                                      @nat.has_add
                                                      (@has_one.one.{0} @nat
                                                        @nat.has_one)))))))))
                                      (@char.of_nat
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit0.{0} @nat @nat.has_add
                                                  (@bit1.{0} @nat @nat.has_one
                                                    @nat.has_add
                                                    (@has_one.one.{0} @nat
                                                      @nat.has_one)))))))))
                                    (@char.of_nat
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit0.{0} @nat @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@has_one.one.{0} @nat
                                                    @nat.has_one)))))))))
                                  (@char.of_nat
                                    (@bit0.{0} @nat @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit0.{0} @nat @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@has_one.one.{0} @nat
                                                  @nat.has_one)))))))))
                                (@char.of_nat
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@bit0.{0} @nat @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@has_one.one.{0} @nat
                                                @nat.has_one)))))))))
                              (@char.of_nat
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@has_one.one.{0} @nat
                                              @nat.has_one)))))))))
                            (@char.of_nat
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@has_one.one.{0} @nat
                                            @nat.has_one)))))))))
                          (@char.of_nat
                            (@bit0.{0} @nat @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit0.{0} @nat @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@has_one.one.{0} @nat
                                          @nat.has_one)))))))))
                        (@char.of_nat
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@has_one.one.{0} @nat
                                        @nat.has_one)))))))))
                      (@char.of_nat
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@has_one.one.{0} @nat @nat.has_one)))))))))
                    (@char.of_nat
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit0.{0} @nat @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@has_one.one.{0} @nat @nat.has_one)))))))))
                  (@char.of_nat
                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@has_one.one.{0} @nat @nat.has_one)))))))))
                (@char.of_nat
                  (@bit0.{0} @nat @nat.has_add
                    (@bit0.{0} @nat @nat.has_add
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit0.{0} @nat @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@has_one.one.{0} @nat @nat.has_one)))))))))
              (@char.of_nat
                (@bit1.{0} @nat @nat.has_one @nat.has_add
                  (@bit0.{0} @nat @nat.has_add
                    (@bit0.{0} @nat @nat.has_add
                      (@bit0.{0} @nat @nat.has_add
                        (@bit0.{0} @nat @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@has_one.one.{0} @nat @nat.has_one)))))))))
            (@char.of_nat
              (@bit1.{0} @nat @nat.has_one @nat.has_add
                (@bit1.{0} @nat @nat.has_one @nat.has_add
                  (@bit0.{0} @nat @nat.has_add
                    (@bit0.{0} @nat @nat.has_add
                      (@bit0.{0} @nat @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@has_one.one.{0} @nat @nat.has_one)))))))))
          @name.anonymous))
    (seq_right_eq :
      @auto_param.{0}
        (∀ {α β : Type u} (a : f α) (b : f β),
        @eq.{v+1} (f β)
          (@has_seq_right.seq_right.{u v} f to_has_seq_right α β a b)
          (@has_seq.seq.{u v} f to_has_seq β β
            (@has_map.map.{u v} f (@functor.to_has_map.{u v} f to_functor) α
              (∀ (a_0 : β), β)
              (@function.const.{u+1 u+1} (∀ (a_0 : β), β) α (@id.{u+1} β)) a)
            b))
        (@name.mk_string
          (@string.str
            (@string.str
              (@string.str
                (@string.str
                  (@string.str
                    (@string.str
                      (@string.str
                        (@string.str
                          (@string.str
                            (@string.str
                              (@string.str
                                (@string.str
                                  (@string.str
                                    (@string.str
                                      (@string.str
                                        (@string.str @string.empty
                                          (@char.of_nat
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit0.{0} @nat @nat.has_add
                                                  (@bit0.{0} @nat @nat.has_add
                                                    (@bit0.{0} @nat @nat.has_add
                                                      (@bit1.{0} @nat
                                                        @nat.has_one
                                                        @nat.has_add
                                                        (@has_one.one.{0} @nat
                                                          @nat.has_one)))))))))
                                        (@char.of_nat
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@bit0.{0} @nat @nat.has_add
                                                    (@bit1.{0} @nat @nat.has_one
                                                      @nat.has_add
                                                      (@has_one.one.{0} @nat
                                                        @nat.has_one)))))))))
                                      (@char.of_nat
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit0.{0} @nat @nat.has_add
                                                  (@bit1.{0} @nat @nat.has_one
                                                    @nat.has_add
                                                    (@has_one.one.{0} @nat
                                                      @nat.has_one)))))))))
                                    (@char.of_nat
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit0.{0} @nat @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@has_one.one.{0} @nat
                                                    @nat.has_one)))))))))
                                  (@char.of_nat
                                    (@bit0.{0} @nat @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit0.{0} @nat @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@has_one.one.{0} @nat
                                                  @nat.has_one)))))))))
                                (@char.of_nat
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@bit0.{0} @nat @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@has_one.one.{0} @nat
                                                @nat.has_one)))))))))
                              (@char.of_nat
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@has_one.one.{0} @nat
                                              @nat.has_one)))))))))
                            (@char.of_nat
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@has_one.one.{0} @nat
                                            @nat.has_one)))))))))
                          (@char.of_nat
                            (@bit0.{0} @nat @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit0.{0} @nat @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@has_one.one.{0} @nat
                                          @nat.has_one)))))))))
                        (@char.of_nat
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@has_one.one.{0} @nat
                                        @nat.has_one)))))))))
                      (@char.of_nat
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@has_one.one.{0} @nat @nat.has_one)))))))))
                    (@char.of_nat
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit0.{0} @nat @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@has_one.one.{0} @nat @nat.has_one)))))))))
                  (@char.of_nat
                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@has_one.one.{0} @nat @nat.has_one)))))))))
                (@char.of_nat
                  (@bit0.{0} @nat @nat.has_add
                    (@bit0.{0} @nat @nat.has_add
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit0.{0} @nat @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@has_one.one.{0} @nat @nat.has_one)))))))))
              (@char.of_nat
                (@bit1.{0} @nat @nat.has_one @nat.has_add
                  (@bit0.{0} @nat @nat.has_add
                    (@bit0.{0} @nat @nat.has_add
                      (@bit0.{0} @nat @nat.has_add
                        (@bit0.{0} @nat @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@has_one.one.{0} @nat @nat.has_one)))))))))
            (@char.of_nat
              (@bit1.{0} @nat @nat.has_one @nat.has_add
                (@bit1.{0} @nat @nat.has_one @nat.has_add
                  (@bit0.{0} @nat @nat.has_add
                    (@bit0.{0} @nat @nat.has_add
                      (@bit0.{0} @nat @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@has_one.one.{0} @nat @nat.has_one)))))))))
          @name.anonymous))
    (pure_seq_eq_map :
      (∀ {α β : Type u} (g : (∀ (a : α), β)) (x : f α),
      @eq.{v+1} (f β)
        (@has_seq.seq.{u v} f to_has_seq α β
          (@has_pure.pure.{u v} f to_has_pure (∀ (a : α), β) g) x)
        (@has_map.map.{u v} f (@functor.to_has_map.{u v} f to_functor) α β g
          x)))
    (map_pure :
      (∀ {α β : Type u} (g : (∀ (a : α), β)) (x : α),
      @eq.{v+1} (f β)
        (@has_map.map.{u v} (λ {α_0 : Type u}, f α_0)
          (@functor.to_has_map.{u v} f to_functor) α β g
          (@has_pure.pure.{u v} f to_has_pure α x))
        (@has_pure.pure.{u v} f to_has_pure β (g x))))
    (seq_pure :
      (∀ {α β : Type u} (g : f (∀ (a : α), β)) (x : α),
      @eq.{v+1} (f β)
        (@has_seq.seq.{u v} f to_has_seq α β g
          (@has_pure.pure.{u v} f to_has_pure α x))
        (@has_map.map.{u v} f (@functor.to_has_map.{u v} f to_functor)
          (∀ (a : α), β) β (λ (g_0 : (∀ (a : α), β)), g_0 x) g)))
    (seq_assoc :
      (∀ {α β γ : Type u} (x : f α) (g : f (∀ (a : α), β))
        (h : f (∀ (a : β), γ)),
      @eq.{v+1} (f γ)
        (@has_seq.seq.{u v} f to_has_seq β γ h
          (@has_seq.seq.{u v} f to_has_seq α β g x))
        (@has_seq.seq.{u v} f to_has_seq α γ
          (@has_seq.seq.{u v} f to_has_seq (∀ (a : α), β) (∀ (a : α), γ)
            (@has_map.map.{u v} f (@functor.to_has_map.{u v} f to_functor)
              (∀ (a : β), γ) (∀ (a : (∀ (a_1 : α), β)) (a_0 : α), γ)
              (@function.comp.{u+1 u+1 u+1} α β γ) h) g) x))),
  to_functor) c,0))"
err: "provingground.interface.UnParsedException: could not parse expression @applicative.{u v}"

mod: "DefMod(Definition(applicative.to_has_seq,Vector(Param(u), Param(v)),∀ (f : (∀ (a : Type u), Type v)) [c : @applicative.{u v} f], @has_seq.{u v} f,λ (f : (∀ (a : Type u), Type v)) [c : @applicative.{u v} f],
@applicative.rec.{(max (u+1) v)+1 u v} f
  (λ [c_0 : @applicative.{u v} f], @has_seq.{u v} f)
  (λ (to_functor : @functor.{u v} f) (to_has_pure : @has_pure.{u v} f)
    (to_has_seq : @has_seq.{u v} f) (to_has_seq_left : @has_seq_left.{u v} f)
    (to_has_seq_right : @has_seq_right.{u v} f)
    (seq_left_eq :
      @auto_param.{0}
        (∀ {α β : Type u} (a : f α) (b : f β),
        @eq.{v+1} (f α) (@has_seq_left.seq_left.{u v} f to_has_seq_left α β a b)
          (@has_seq.seq.{u v} f to_has_seq β α
            (@has_map.map.{u v} f (@functor.to_has_map.{u v} f to_functor) α
              (∀ (a_0 : β), α) (@function.const.{u+1 u+1} α β) a) b))
        (@name.mk_string
          (@string.str
            (@string.str
              (@string.str
                (@string.str
                  (@string.str
                    (@string.str
                      (@string.str
                        (@string.str
                          (@string.str
                            (@string.str
                              (@string.str
                                (@string.str
                                  (@string.str
                                    (@string.str
                                      (@string.str
                                        (@string.str @string.empty
                                          (@char.of_nat
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit0.{0} @nat @nat.has_add
                                                  (@bit0.{0} @nat @nat.has_add
                                                    (@bit0.{0} @nat @nat.has_add
                                                      (@bit1.{0} @nat
                                                        @nat.has_one
                                                        @nat.has_add
                                                        (@has_one.one.{0} @nat
                                                          @nat.has_one)))))))))
                                        (@char.of_nat
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@bit0.{0} @nat @nat.has_add
                                                    (@bit1.{0} @nat @nat.has_one
                                                      @nat.has_add
                                                      (@has_one.one.{0} @nat
                                                        @nat.has_one)))))))))
                                      (@char.of_nat
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit0.{0} @nat @nat.has_add
                                                  (@bit1.{0} @nat @nat.has_one
                                                    @nat.has_add
                                                    (@has_one.one.{0} @nat
                                                      @nat.has_one)))))))))
                                    (@char.of_nat
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit0.{0} @nat @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@has_one.one.{0} @nat
                                                    @nat.has_one)))))))))
                                  (@char.of_nat
                                    (@bit0.{0} @nat @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit0.{0} @nat @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@has_one.one.{0} @nat
                                                  @nat.has_one)))))))))
                                (@char.of_nat
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@bit0.{0} @nat @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@has_one.one.{0} @nat
                                                @nat.has_one)))))))))
                              (@char.of_nat
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@has_one.one.{0} @nat
                                              @nat.has_one)))))))))
                            (@char.of_nat
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@has_one.one.{0} @nat
                                            @nat.has_one)))))))))
                          (@char.of_nat
                            (@bit0.{0} @nat @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit0.{0} @nat @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@has_one.one.{0} @nat
                                          @nat.has_one)))))))))
                        (@char.of_nat
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@has_one.one.{0} @nat
                                        @nat.has_one)))))))))
                      (@char.of_nat
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@has_one.one.{0} @nat @nat.has_one)))))))))
                    (@char.of_nat
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit0.{0} @nat @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@has_one.one.{0} @nat @nat.has_one)))))))))
                  (@char.of_nat
                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@has_one.one.{0} @nat @nat.has_one)))))))))
                (@char.of_nat
                  (@bit0.{0} @nat @nat.has_add
                    (@bit0.{0} @nat @nat.has_add
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit0.{0} @nat @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@has_one.one.{0} @nat @nat.has_one)))))))))
              (@char.of_nat
                (@bit1.{0} @nat @nat.has_one @nat.has_add
                  (@bit0.{0} @nat @nat.has_add
                    (@bit0.{0} @nat @nat.has_add
                      (@bit0.{0} @nat @nat.has_add
                        (@bit0.{0} @nat @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@has_one.one.{0} @nat @nat.has_one)))))))))
            (@char.of_nat
              (@bit1.{0} @nat @nat.has_one @nat.has_add
                (@bit1.{0} @nat @nat.has_one @nat.has_add
                  (@bit0.{0} @nat @nat.has_add
                    (@bit0.{0} @nat @nat.has_add
                      (@bit0.{0} @nat @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@has_one.one.{0} @nat @nat.has_one)))))))))
          @name.anonymous))
    (seq_right_eq :
      @auto_param.{0}
        (∀ {α β : Type u} (a : f α) (b : f β),
        @eq.{v+1} (f β)
          (@has_seq_right.seq_right.{u v} f to_has_seq_right α β a b)
          (@has_seq.seq.{u v} f to_has_seq β β
            (@has_map.map.{u v} f (@functor.to_has_map.{u v} f to_functor) α
              (∀ (a_0 : β), β)
              (@function.const.{u+1 u+1} (∀ (a_0 : β), β) α (@id.{u+1} β)) a)
            b))
        (@name.mk_string
          (@string.str
            (@string.str
              (@string.str
                (@string.str
                  (@string.str
                    (@string.str
                      (@string.str
                        (@string.str
                          (@string.str
                            (@string.str
                              (@string.str
                                (@string.str
                                  (@string.str
                                    (@string.str
                                      (@string.str
                                        (@string.str @string.empty
                                          (@char.of_nat
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit0.{0} @nat @nat.has_add
                                                  (@bit0.{0} @nat @nat.has_add
                                                    (@bit0.{0} @nat @nat.has_add
                                                      (@bit1.{0} @nat
                                                        @nat.has_one
                                                        @nat.has_add
                                                        (@has_one.one.{0} @nat
                                                          @nat.has_one)))))))))
                                        (@char.of_nat
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@bit0.{0} @nat @nat.has_add
                                                    (@bit1.{0} @nat @nat.has_one
                                                      @nat.has_add
                                                      (@has_one.one.{0} @nat
                                                        @nat.has_one)))))))))
                                      (@char.of_nat
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit0.{0} @nat @nat.has_add
                                                  (@bit1.{0} @nat @nat.has_one
                                                    @nat.has_add
                                                    (@has_one.one.{0} @nat
                                                      @nat.has_one)))))))))
                                    (@char.of_nat
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit0.{0} @nat @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@has_one.one.{0} @nat
                                                    @nat.has_one)))))))))
                                  (@char.of_nat
                                    (@bit0.{0} @nat @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit0.{0} @nat @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@has_one.one.{0} @nat
                                                  @nat.has_one)))))))))
                                (@char.of_nat
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@bit0.{0} @nat @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@has_one.one.{0} @nat
                                                @nat.has_one)))))))))
                              (@char.of_nat
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@has_one.one.{0} @nat
                                              @nat.has_one)))))))))
                            (@char.of_nat
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@has_one.one.{0} @nat
                                            @nat.has_one)))))))))
                          (@char.of_nat
                            (@bit0.{0} @nat @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit0.{0} @nat @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@has_one.one.{0} @nat
                                          @nat.has_one)))))))))
                        (@char.of_nat
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@has_one.one.{0} @nat
                                        @nat.has_one)))))))))
                      (@char.of_nat
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@has_one.one.{0} @nat @nat.has_one)))))))))
                    (@char.of_nat
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit0.{0} @nat @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@has_one.one.{0} @nat @nat.has_one)))))))))
                  (@char.of_nat
                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@has_one.one.{0} @nat @nat.has_one)))))))))
                (@char.of_nat
                  (@bit0.{0} @nat @nat.has_add
                    (@bit0.{0} @nat @nat.has_add
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit0.{0} @nat @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@has_one.one.{0} @nat @nat.has_one)))))))))
              (@char.of_nat
                (@bit1.{0} @nat @nat.has_one @nat.has_add
                  (@bit0.{0} @nat @nat.has_add
                    (@bit0.{0} @nat @nat.has_add
                      (@bit0.{0} @nat @nat.has_add
                        (@bit0.{0} @nat @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@has_one.one.{0} @nat @nat.has_one)))))))))
            (@char.of_nat
              (@bit1.{0} @nat @nat.has_one @nat.has_add
                (@bit1.{0} @nat @nat.has_one @nat.has_add
                  (@bit0.{0} @nat @nat.has_add
                    (@bit0.{0} @nat @nat.has_add
                      (@bit0.{0} @nat @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@has_one.one.{0} @nat @nat.has_one)))))))))
          @name.anonymous))
    (pure_seq_eq_map :
      (∀ {α β : Type u} (g : (∀ (a : α), β)) (x : f α),
      @eq.{v+1} (f β)
        (@has_seq.seq.{u v} f to_has_seq α β
          (@has_pure.pure.{u v} f to_has_pure (∀ (a : α), β) g) x)
        (@has_map.map.{u v} f (@functor.to_has_map.{u v} f to_functor) α β g
          x)))
    (map_pure :
      (∀ {α β : Type u} (g : (∀ (a : α), β)) (x : α),
      @eq.{v+1} (f β)
        (@has_map.map.{u v} (λ {α_0 : Type u}, f α_0)
          (@functor.to_has_map.{u v} f to_functor) α β g
          (@has_pure.pure.{u v} f to_has_pure α x))
        (@has_pure.pure.{u v} f to_has_pure β (g x))))
    (seq_pure :
      (∀ {α β : Type u} (g : f (∀ (a : α), β)) (x : α),
      @eq.{v+1} (f β)
        (@has_seq.seq.{u v} f to_has_seq α β g
          (@has_pure.pure.{u v} f to_has_pure α x))
        (@has_map.map.{u v} f (@functor.to_has_map.{u v} f to_functor)
          (∀ (a : α), β) β (λ (g_0 : (∀ (a : α), β)), g_0 x) g)))
    (seq_assoc :
      (∀ {α β γ : Type u} (x : f α) (g : f (∀ (a : α), β))
        (h : f (∀ (a : β), γ)),
      @eq.{v+1} (f γ)
        (@has_seq.seq.{u v} f to_has_seq β γ h
          (@has_seq.seq.{u v} f to_has_seq α β g x))
        (@has_seq.seq.{u v} f to_has_seq α γ
          (@has_seq.seq.{u v} f to_has_seq (∀ (a : α), β) (∀ (a : α), γ)
            (@has_map.map.{u v} f (@functor.to_has_map.{u v} f to_functor)
              (∀ (a : β), γ) (∀ (a : (∀ (a_1 : α), β)) (a_0 : α), γ)
              (@function.comp.{u+1 u+1 u+1} α β γ) h) g) x))),
  to_has_seq) c,0))"
err: "provingground.interface.UnParsedException: could not parse expression @applicative.{u v}"

mod: "IndMod(InductiveType(monad,Vector(Param(u), Param(v)),∀ (m : (∀ (a : Type u), Type v)), Type (max (u+1) v)),1,Vector((monad.mk,∀ {m : (∀ (a : Type u), Type v)} (to_applicative : @applicative.{u v} m)
  (to_has_bind : @has_bind.{u v} m)
  (bind_pure_comp_eq_map :
    @auto_param.{0}
      (∀ {α β : Type u} (f : (∀ (a : α), β)) (x : m α),
      @eq.{v+1} (m β)
        (@has_bind.bind.{u v} m to_has_bind α β x
          (@function.comp.{u+1 u+1 v+1} α β (m β)
            (@has_pure.pure.{u v} m
              (@applicative.to_has_pure.{u v} m to_applicative) β) f))
        (@has_map.map.{u v} m
          (@functor.to_has_map.{u v} m
            (@applicative.to_functor.{u v} m to_applicative)) α β f x))
      (@name.mk_string
        (@string.str
          (@string.str
            (@string.str
              (@string.str
                (@string.str
                  (@string.str
                    (@string.str
                      (@string.str
                        (@string.str
                          (@string.str
                            (@string.str
                              (@string.str
                                (@string.str
                                  (@string.str
                                    (@string.str
                                      (@string.str @string.empty
                                        (@char.of_nat
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit0.{0} @nat @nat.has_add
                                                (@bit0.{0} @nat @nat.has_add
                                                  (@bit0.{0} @nat @nat.has_add
                                                    (@bit1.{0} @nat @nat.has_one
                                                      @nat.has_add
                                                      (@has_one.one.{0} @nat
                                                        @nat.has_one)))))))))
                                      (@char.of_nat
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit0.{0} @nat @nat.has_add
                                                  (@bit1.{0} @nat @nat.has_one
                                                    @nat.has_add
                                                    (@has_one.one.{0} @nat
                                                      @nat.has_one)))))))))
                                    (@char.of_nat
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit0.{0} @nat @nat.has_add
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@has_one.one.{0} @nat
                                                    @nat.has_one)))))))))
                                  (@char.of_nat
                                    (@bit0.{0} @nat @nat.has_add
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@bit0.{0} @nat @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@has_one.one.{0} @nat
                                                  @nat.has_one)))))))))
                                (@char.of_nat
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@has_one.one.{0} @nat
                                                @nat.has_one)))))))))
                              (@char.of_nat
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@has_one.one.{0} @nat
                                              @nat.has_one)))))))))
                            (@char.of_nat
                              (@bit0.{0} @nat @nat.has_add
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@has_one.one.{0} @nat
                                            @nat.has_one)))))))))
                          (@char.of_nat
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit0.{0} @nat @nat.has_add
                                        (@has_one.one.{0} @nat
                                          @nat.has_one)))))))))
                        (@char.of_nat
                          (@bit0.{0} @nat @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@has_one.one.{0} @nat
                                        @nat.has_one)))))))))
                      (@char.of_nat
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit0.{0} @nat @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@has_one.one.{0} @nat @nat.has_one)))))))))
                    (@char.of_nat
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@has_one.one.{0} @nat @nat.has_one)))))))))
                  (@char.of_nat
                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit0.{0} @nat @nat.has_add
                          (@bit0.{0} @nat @nat.has_add
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@has_one.one.{0} @nat @nat.has_one)))))))))
                (@char.of_nat
                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@has_one.one.{0} @nat @nat.has_one)))))))))
              (@char.of_nat
                (@bit0.{0} @nat @nat.has_add
                  (@bit0.{0} @nat @nat.has_add
                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                      (@bit0.{0} @nat @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@has_one.one.{0} @nat @nat.has_one)))))))))
            (@char.of_nat
              (@bit1.{0} @nat @nat.has_one @nat.has_add
                (@bit0.{0} @nat @nat.has_add
                  (@bit0.{0} @nat @nat.has_add
                    (@bit0.{0} @nat @nat.has_add
                      (@bit0.{0} @nat @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@has_one.one.{0} @nat @nat.has_one)))))))))
          (@char.of_nat
            (@bit1.{0} @nat @nat.has_one @nat.has_add
              (@bit1.{0} @nat @nat.has_one @nat.has_add
                (@bit0.{0} @nat @nat.has_add
                  (@bit0.{0} @nat @nat.has_add
                    (@bit0.{0} @nat @nat.has_add
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@has_one.one.{0} @nat @nat.has_one)))))))))
        @name.anonymous))
  (bind_map_eq_seq :
    @auto_param.{0}
      (∀ {α β : Type u} (f : m (∀ (a : α), β)) (x : m α),
      @eq.{v+1} (m β)
        (@has_bind.bind.{u v} m to_has_bind (∀ (a : α), β) β f
          (λ (x_0 : (∀ (a : α), β)),
          @has_map.map.{u v} m
            (@functor.to_has_map.{u v} m
              (@applicative.to_functor.{u v} m to_applicative)) α β x_0 x))
        (@has_seq.seq.{u v} m (@applicative.to_has_seq.{u v} m to_applicative) α
          β f x))
      (@name.mk_string
        (@string.str
          (@string.str
            (@string.str
              (@string.str
                (@string.str
                  (@string.str
                    (@string.str
                      (@string.str
                        (@string.str
                          (@string.str
                            (@string.str
                              (@string.str
                                (@string.str
                                  (@string.str
                                    (@string.str
                                      (@string.str @string.empty
                                        (@char.of_nat
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit0.{0} @nat @nat.has_add
                                                (@bit0.{0} @nat @nat.has_add
                                                  (@bit0.{0} @nat @nat.has_add
                                                    (@bit1.{0} @nat @nat.has_one
                                                      @nat.has_add
                                                      (@has_one.one.{0} @nat
                                                        @nat.has_one)))))))))
                                      (@char.of_nat
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit0.{0} @nat @nat.has_add
                                                  (@bit1.{0} @nat @nat.has_one
                                                    @nat.has_add
                                                    (@has_one.one.{0} @nat
                                                      @nat.has_one)))))))))
                                    (@char.of_nat
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit0.{0} @nat @nat.has_add
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@has_one.one.{0} @nat
                                                    @nat.has_one)))))))))
                                  (@char.of_nat
                                    (@bit0.{0} @nat @nat.has_add
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@bit0.{0} @nat @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@has_one.one.{0} @nat
                                                  @nat.has_one)))))))))
                                (@char.of_nat
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@has_one.one.{0} @nat
                                                @nat.has_one)))))))))
                              (@char.of_nat
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@has_one.one.{0} @nat
                                              @nat.has_one)))))))))
                            (@char.of_nat
                              (@bit0.{0} @nat @nat.has_add
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@has_one.one.{0} @nat
                                            @nat.has_one)))))))))
                          (@char.of_nat
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit0.{0} @nat @nat.has_add
                                        (@has_one.one.{0} @nat
                                          @nat.has_one)))))))))
                        (@char.of_nat
                          (@bit0.{0} @nat @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@has_one.one.{0} @nat
                                        @nat.has_one)))))))))
                      (@char.of_nat
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit0.{0} @nat @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@has_one.one.{0} @nat @nat.has_one)))))))))
                    (@char.of_nat
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@has_one.one.{0} @nat @nat.has_one)))))))))
                  (@char.of_nat
                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit0.{0} @nat @nat.has_add
                          (@bit0.{0} @nat @nat.has_add
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@has_one.one.{0} @nat @nat.has_one)))))))))
                (@char.of_nat
                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@has_one.one.{0} @nat @nat.has_one)))))))))
              (@char.of_nat
                (@bit0.{0} @nat @nat.has_add
                  (@bit0.{0} @nat @nat.has_add
                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                      (@bit0.{0} @nat @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@has_one.one.{0} @nat @nat.has_one)))))))))
            (@char.of_nat
              (@bit1.{0} @nat @nat.has_one @nat.has_add
                (@bit0.{0} @nat @nat.has_add
                  (@bit0.{0} @nat @nat.has_add
                    (@bit0.{0} @nat @nat.has_add
                      (@bit0.{0} @nat @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@has_one.one.{0} @nat @nat.has_one)))))))))
          (@char.of_nat
            (@bit1.{0} @nat @nat.has_one @nat.has_add
              (@bit1.{0} @nat @nat.has_one @nat.has_add
                (@bit0.{0} @nat @nat.has_add
                  (@bit0.{0} @nat @nat.has_add
                    (@bit0.{0} @nat @nat.has_add
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@has_one.one.{0} @nat @nat.has_one)))))))))
        @name.anonymous))
  (pure_bind :
    (∀ {α β : Type u} (x : α) (f : (∀ (a : α), m β)),
    @eq.{v+1} (m β)
      (@has_bind.bind.{u v} m to_has_bind α β
        (@has_pure.pure.{u v} m
          (@applicative.to_has_pure.{u v} m to_applicative) α x) f) (f x)))
  (bind_assoc :
    (∀ {α β γ : Type u} (x : m α) (f : (∀ (a : α), m β)) (g : (∀ (a : β), m γ)),
    @eq.{v+1} (m γ)
      (@has_bind.bind.{u v} m to_has_bind β γ
        (@has_bind.bind.{u v} m to_has_bind α β x f) g)
      (@has_bind.bind.{u v} m to_has_bind α γ x
        (λ (x_0 : α), @has_bind.bind.{u v} m to_has_bind β γ (f x_0) g)))),
@monad.{u v} m)))"
err: "provingground.interface.UnParsedException: could not parse expression @applicative.{u v}"

mod: "DefMod(Definition(monad.to_applicative,Vector(Param(u), Param(v)),∀ (m : (∀ (a : Type u), Type v)) [c : @monad.{u v} m], @applicative.{u v} m,λ (m : (∀ (a : Type u), Type v)) [c : @monad.{u v} m],
@monad.rec.{max (u+2) (v+1) u v} m
  (λ [c_0 : @monad.{u v} m], @applicative.{u v} m)
  (λ (to_applicative : @applicative.{u v} m) (to_has_bind : @has_bind.{u v} m)
    (bind_pure_comp_eq_map :
      @auto_param.{0}
        (∀ {α β : Type u} (f : (∀ (a : α), β)) (x : m α),
        @eq.{v+1} (m β)
          (@has_bind.bind.{u v} m to_has_bind α β x
            (@function.comp.{u+1 u+1 v+1} α β (m β)
              (@has_pure.pure.{u v} m
                (@applicative.to_has_pure.{u v} m to_applicative) β) f))
          (@has_map.map.{u v} m
            (@functor.to_has_map.{u v} m
              (@applicative.to_functor.{u v} m to_applicative)) α β f x))
        (@name.mk_string
          (@string.str
            (@string.str
              (@string.str
                (@string.str
                  (@string.str
                    (@string.str
                      (@string.str
                        (@string.str
                          (@string.str
                            (@string.str
                              (@string.str
                                (@string.str
                                  (@string.str
                                    (@string.str
                                      (@string.str
                                        (@string.str @string.empty
                                          (@char.of_nat
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit0.{0} @nat @nat.has_add
                                                  (@bit0.{0} @nat @nat.has_add
                                                    (@bit0.{0} @nat @nat.has_add
                                                      (@bit1.{0} @nat
                                                        @nat.has_one
                                                        @nat.has_add
                                                        (@has_one.one.{0} @nat
                                                          @nat.has_one)))))))))
                                        (@char.of_nat
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@bit0.{0} @nat @nat.has_add
                                                    (@bit1.{0} @nat @nat.has_one
                                                      @nat.has_add
                                                      (@has_one.one.{0} @nat
                                                        @nat.has_one)))))))))
                                      (@char.of_nat
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit0.{0} @nat @nat.has_add
                                                  (@bit1.{0} @nat @nat.has_one
                                                    @nat.has_add
                                                    (@has_one.one.{0} @nat
                                                      @nat.has_one)))))))))
                                    (@char.of_nat
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit0.{0} @nat @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@has_one.one.{0} @nat
                                                    @nat.has_one)))))))))
                                  (@char.of_nat
                                    (@bit0.{0} @nat @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit0.{0} @nat @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@has_one.one.{0} @nat
                                                  @nat.has_one)))))))))
                                (@char.of_nat
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@bit0.{0} @nat @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@has_one.one.{0} @nat
                                                @nat.has_one)))))))))
                              (@char.of_nat
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@has_one.one.{0} @nat
                                              @nat.has_one)))))))))
                            (@char.of_nat
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@has_one.one.{0} @nat
                                            @nat.has_one)))))))))
                          (@char.of_nat
                            (@bit0.{0} @nat @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit0.{0} @nat @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@has_one.one.{0} @nat
                                          @nat.has_one)))))))))
                        (@char.of_nat
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@has_one.one.{0} @nat
                                        @nat.has_one)))))))))
                      (@char.of_nat
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@has_one.one.{0} @nat @nat.has_one)))))))))
                    (@char.of_nat
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit0.{0} @nat @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@has_one.one.{0} @nat @nat.has_one)))))))))
                  (@char.of_nat
                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@has_one.one.{0} @nat @nat.has_one)))))))))
                (@char.of_nat
                  (@bit0.{0} @nat @nat.has_add
                    (@bit0.{0} @nat @nat.has_add
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit0.{0} @nat @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@has_one.one.{0} @nat @nat.has_one)))))))))
              (@char.of_nat
                (@bit1.{0} @nat @nat.has_one @nat.has_add
                  (@bit0.{0} @nat @nat.has_add
                    (@bit0.{0} @nat @nat.has_add
                      (@bit0.{0} @nat @nat.has_add
                        (@bit0.{0} @nat @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@has_one.one.{0} @nat @nat.has_one)))))))))
            (@char.of_nat
              (@bit1.{0} @nat @nat.has_one @nat.has_add
                (@bit1.{0} @nat @nat.has_one @nat.has_add
                  (@bit0.{0} @nat @nat.has_add
                    (@bit0.{0} @nat @nat.has_add
                      (@bit0.{0} @nat @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@has_one.one.{0} @nat @nat.has_one)))))))))
          @name.anonymous))
    (bind_map_eq_seq :
      @auto_param.{0}
        (∀ {α β : Type u} (f : m (∀ (a : α), β)) (x : m α),
        @eq.{v+1} (m β)
          (@has_bind.bind.{u v} m to_has_bind (∀ (a : α), β) β f
            (λ (x_0 : (∀ (a : α), β)),
            @has_map.map.{u v} m
              (@functor.to_has_map.{u v} m
                (@applicative.to_functor.{u v} m to_applicative)) α β x_0 x))
          (@has_seq.seq.{u v} m (@applicative.to_has_seq.{u v} m to_applicative)
            α β f x))
        (@name.mk_string
          (@string.str
            (@string.str
              (@string.str
                (@string.str
                  (@string.str
                    (@string.str
                      (@string.str
                        (@string.str
                          (@string.str
                            (@string.str
                              (@string.str
                                (@string.str
                                  (@string.str
                                    (@string.str
                                      (@string.str
                                        (@string.str @string.empty
                                          (@char.of_nat
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit0.{0} @nat @nat.has_add
                                                  (@bit0.{0} @nat @nat.has_add
                                                    (@bit0.{0} @nat @nat.has_add
                                                      (@bit1.{0} @nat
                                                        @nat.has_one
                                                        @nat.has_add
                                                        (@has_one.one.{0} @nat
                                                          @nat.has_one)))))))))
                                        (@char.of_nat
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@bit0.{0} @nat @nat.has_add
                                                    (@bit1.{0} @nat @nat.has_one
                                                      @nat.has_add
                                                      (@has_one.one.{0} @nat
                                                        @nat.has_one)))))))))
                                      (@char.of_nat
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit0.{0} @nat @nat.has_add
                                                  (@bit1.{0} @nat @nat.has_one
                                                    @nat.has_add
                                                    (@has_one.one.{0} @nat
                                                      @nat.has_one)))))))))
                                    (@char.of_nat
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit0.{0} @nat @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@has_one.one.{0} @nat
                                                    @nat.has_one)))))))))
                                  (@char.of_nat
                                    (@bit0.{0} @nat @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit0.{0} @nat @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@has_one.one.{0} @nat
                                                  @nat.has_one)))))))))
                                (@char.of_nat
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@bit0.{0} @nat @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@has_one.one.{0} @nat
                                                @nat.has_one)))))))))
                              (@char.of_nat
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@has_one.one.{0} @nat
                                              @nat.has_one)))))))))
                            (@char.of_nat
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@has_one.one.{0} @nat
                                            @nat.has_one)))))))))
                          (@char.of_nat
                            (@bit0.{0} @nat @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit0.{0} @nat @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@has_one.one.{0} @nat
                                          @nat.has_one)))))))))
                        (@char.of_nat
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@has_one.one.{0} @nat
                                        @nat.has_one)))))))))
                      (@char.of_nat
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@has_one.one.{0} @nat @nat.has_one)))))))))
                    (@char.of_nat
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit0.{0} @nat @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@has_one.one.{0} @nat @nat.has_one)))))))))
                  (@char.of_nat
                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@has_one.one.{0} @nat @nat.has_one)))))))))
                (@char.of_nat
                  (@bit0.{0} @nat @nat.has_add
                    (@bit0.{0} @nat @nat.has_add
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit0.{0} @nat @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@has_one.one.{0} @nat @nat.has_one)))))))))
              (@char.of_nat
                (@bit1.{0} @nat @nat.has_one @nat.has_add
                  (@bit0.{0} @nat @nat.has_add
                    (@bit0.{0} @nat @nat.has_add
                      (@bit0.{0} @nat @nat.has_add
                        (@bit0.{0} @nat @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@has_one.one.{0} @nat @nat.has_one)))))))))
            (@char.of_nat
              (@bit1.{0} @nat @nat.has_one @nat.has_add
                (@bit1.{0} @nat @nat.has_one @nat.has_add
                  (@bit0.{0} @nat @nat.has_add
                    (@bit0.{0} @nat @nat.has_add
                      (@bit0.{0} @nat @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@has_one.one.{0} @nat @nat.has_one)))))))))
          @name.anonymous))
    (pure_bind :
      (∀ {α β : Type u} (x : α) (f : (∀ (a : α), m β)),
      @eq.{v+1} (m β)
        (@has_bind.bind.{u v} m to_has_bind α β
          (@has_pure.pure.{u v} m
            (@applicative.to_has_pure.{u v} m to_applicative) α x) f) (f x)))
    (bind_assoc :
      (∀ {α β γ : Type u} (x : m α) (f : (∀ (a : α), m β))
        (g : (∀ (a : β), m γ)),
      @eq.{v+1} (m γ)
        (@has_bind.bind.{u v} m to_has_bind β γ
          (@has_bind.bind.{u v} m to_has_bind α β x f) g)
        (@has_bind.bind.{u v} m to_has_bind α γ x
          (λ (x_0 : α), @has_bind.bind.{u v} m to_has_bind β γ (f x_0) g)))),
  to_applicative) c,0))"
err: "provingground.interface.UnParsedException: could not parse expression @monad.{u v}"

mod: "DefMod(Definition(return,Vector(Param(u), Param(v)),∀ {m : (∀ (a_0 : Type u), Type v)} [inst_1 : @monad.{u v} m] {α : Type u}
  (a : α),
m α,λ {m : (∀ (a : Type u), Type v)} [inst_1 : @monad.{u v} m] {α : Type u},
@pure.{u v} (λ {α_0 : Type u}, m α_0)
  (@applicative.to_has_pure.{u v} (λ {α_0 : Type u}, m α_0)
    (@monad.to_applicative.{u v} (λ {α_0 : Type u}, m α_0) inst_1)) α,0))"
err: "provingground.interface.UnParsedException: could not parse expression @monad.{u v}"

mod: "DefMod(Definition(monad.to_has_bind,Vector(Param(u), Param(v)),∀ (m : (∀ (a : Type u), Type v)) [c : @monad.{u v} m], @has_bind.{u v} m,λ (m : (∀ (a : Type u), Type v)) [c : @monad.{u v} m],
@monad.rec.{max (u+2) (v+1) u v} m (λ [c_0 : @monad.{u v} m], @has_bind.{u v} m)
  (λ (to_applicative : @applicative.{u v} m) (to_has_bind : @has_bind.{u v} m)
    (bind_pure_comp_eq_map :
      @auto_param.{0}
        (∀ {α β : Type u} (f : (∀ (a : α), β)) (x : m α),
        @eq.{v+1} (m β)
          (@has_bind.bind.{u v} m to_has_bind α β x
            (@function.comp.{u+1 u+1 v+1} α β (m β)
              (@has_pure.pure.{u v} m
                (@applicative.to_has_pure.{u v} m to_applicative) β) f))
          (@has_map.map.{u v} m
            (@functor.to_has_map.{u v} m
              (@applicative.to_functor.{u v} m to_applicative)) α β f x))
        (@name.mk_string
          (@string.str
            (@string.str
              (@string.str
                (@string.str
                  (@string.str
                    (@string.str
                      (@string.str
                        (@string.str
                          (@string.str
                            (@string.str
                              (@string.str
                                (@string.str
                                  (@string.str
                                    (@string.str
                                      (@string.str
                                        (@string.str @string.empty
                                          (@char.of_nat
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit0.{0} @nat @nat.has_add
                                                  (@bit0.{0} @nat @nat.has_add
                                                    (@bit0.{0} @nat @nat.has_add
                                                      (@bit1.{0} @nat
                                                        @nat.has_one
                                                        @nat.has_add
                                                        (@has_one.one.{0} @nat
                                                          @nat.has_one)))))))))
                                        (@char.of_nat
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@bit0.{0} @nat @nat.has_add
                                                    (@bit1.{0} @nat @nat.has_one
                                                      @nat.has_add
                                                      (@has_one.one.{0} @nat
                                                        @nat.has_one)))))))))
                                      (@char.of_nat
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit0.{0} @nat @nat.has_add
                                                  (@bit1.{0} @nat @nat.has_one
                                                    @nat.has_add
                                                    (@has_one.one.{0} @nat
                                                      @nat.has_one)))))))))
                                    (@char.of_nat
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit0.{0} @nat @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@has_one.one.{0} @nat
                                                    @nat.has_one)))))))))
                                  (@char.of_nat
                                    (@bit0.{0} @nat @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit0.{0} @nat @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@has_one.one.{0} @nat
                                                  @nat.has_one)))))))))
                                (@char.of_nat
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@bit0.{0} @nat @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@has_one.one.{0} @nat
                                                @nat.has_one)))))))))
                              (@char.of_nat
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@has_one.one.{0} @nat
                                              @nat.has_one)))))))))
                            (@char.of_nat
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@has_one.one.{0} @nat
                                            @nat.has_one)))))))))
                          (@char.of_nat
                            (@bit0.{0} @nat @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit0.{0} @nat @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@has_one.one.{0} @nat
                                          @nat.has_one)))))))))
                        (@char.of_nat
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@has_one.one.{0} @nat
                                        @nat.has_one)))))))))
                      (@char.of_nat
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@has_one.one.{0} @nat @nat.has_one)))))))))
                    (@char.of_nat
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit0.{0} @nat @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@has_one.one.{0} @nat @nat.has_one)))))))))
                  (@char.of_nat
                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@has_one.one.{0} @nat @nat.has_one)))))))))
                (@char.of_nat
                  (@bit0.{0} @nat @nat.has_add
                    (@bit0.{0} @nat @nat.has_add
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit0.{0} @nat @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@has_one.one.{0} @nat @nat.has_one)))))))))
              (@char.of_nat
                (@bit1.{0} @nat @nat.has_one @nat.has_add
                  (@bit0.{0} @nat @nat.has_add
                    (@bit0.{0} @nat @nat.has_add
                      (@bit0.{0} @nat @nat.has_add
                        (@bit0.{0} @nat @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@has_one.one.{0} @nat @nat.has_one)))))))))
            (@char.of_nat
              (@bit1.{0} @nat @nat.has_one @nat.has_add
                (@bit1.{0} @nat @nat.has_one @nat.has_add
                  (@bit0.{0} @nat @nat.has_add
                    (@bit0.{0} @nat @nat.has_add
                      (@bit0.{0} @nat @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@has_one.one.{0} @nat @nat.has_one)))))))))
          @name.anonymous))
    (bind_map_eq_seq :
      @auto_param.{0}
        (∀ {α β : Type u} (f : m (∀ (a : α), β)) (x : m α),
        @eq.{v+1} (m β)
          (@has_bind.bind.{u v} m to_has_bind (∀ (a : α), β) β f
            (λ (x_0 : (∀ (a : α), β)),
            @has_map.map.{u v} m
              (@functor.to_has_map.{u v} m
                (@applicative.to_functor.{u v} m to_applicative)) α β x_0 x))
          (@has_seq.seq.{u v} m (@applicative.to_has_seq.{u v} m to_applicative)
            α β f x))
        (@name.mk_string
          (@string.str
            (@string.str
              (@string.str
                (@string.str
                  (@string.str
                    (@string.str
                      (@string.str
                        (@string.str
                          (@string.str
                            (@string.str
                              (@string.str
                                (@string.str
                                  (@string.str
                                    (@string.str
                                      (@string.str
                                        (@string.str @string.empty
                                          (@char.of_nat
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit0.{0} @nat @nat.has_add
                                                  (@bit0.{0} @nat @nat.has_add
                                                    (@bit0.{0} @nat @nat.has_add
                                                      (@bit1.{0} @nat
                                                        @nat.has_one
                                                        @nat.has_add
                                                        (@has_one.one.{0} @nat
                                                          @nat.has_one)))))))))
                                        (@char.of_nat
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@bit0.{0} @nat @nat.has_add
                                                    (@bit1.{0} @nat @nat.has_one
                                                      @nat.has_add
                                                      (@has_one.one.{0} @nat
                                                        @nat.has_one)))))))))
                                      (@char.of_nat
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit0.{0} @nat @nat.has_add
                                                  (@bit1.{0} @nat @nat.has_one
                                                    @nat.has_add
                                                    (@has_one.one.{0} @nat
                                                      @nat.has_one)))))))))
                                    (@char.of_nat
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit0.{0} @nat @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@has_one.one.{0} @nat
                                                    @nat.has_one)))))))))
                                  (@char.of_nat
                                    (@bit0.{0} @nat @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit0.{0} @nat @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@has_one.one.{0} @nat
                                                  @nat.has_one)))))))))
                                (@char.of_nat
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@bit0.{0} @nat @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@has_one.one.{0} @nat
                                                @nat.has_one)))))))))
                              (@char.of_nat
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@has_one.one.{0} @nat
                                              @nat.has_one)))))))))
                            (@char.of_nat
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@has_one.one.{0} @nat
                                            @nat.has_one)))))))))
                          (@char.of_nat
                            (@bit0.{0} @nat @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit0.{0} @nat @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@has_one.one.{0} @nat
                                          @nat.has_one)))))))))
                        (@char.of_nat
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@has_one.one.{0} @nat
                                        @nat.has_one)))))))))
                      (@char.of_nat
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@has_one.one.{0} @nat @nat.has_one)))))))))
                    (@char.of_nat
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit0.{0} @nat @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@has_one.one.{0} @nat @nat.has_one)))))))))
                  (@char.of_nat
                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@has_one.one.{0} @nat @nat.has_one)))))))))
                (@char.of_nat
                  (@bit0.{0} @nat @nat.has_add
                    (@bit0.{0} @nat @nat.has_add
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit0.{0} @nat @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@has_one.one.{0} @nat @nat.has_one)))))))))
              (@char.of_nat
                (@bit1.{0} @nat @nat.has_one @nat.has_add
                  (@bit0.{0} @nat @nat.has_add
                    (@bit0.{0} @nat @nat.has_add
                      (@bit0.{0} @nat @nat.has_add
                        (@bit0.{0} @nat @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@has_one.one.{0} @nat @nat.has_one)))))))))
            (@char.of_nat
              (@bit1.{0} @nat @nat.has_one @nat.has_add
                (@bit1.{0} @nat @nat.has_one @nat.has_add
                  (@bit0.{0} @nat @nat.has_add
                    (@bit0.{0} @nat @nat.has_add
                      (@bit0.{0} @nat @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@has_one.one.{0} @nat @nat.has_one)))))))))
          @name.anonymous))
    (pure_bind :
      (∀ {α β : Type u} (x : α) (f : (∀ (a : α), m β)),
      @eq.{v+1} (m β)
        (@has_bind.bind.{u v} m to_has_bind α β
          (@has_pure.pure.{u v} m
            (@applicative.to_has_pure.{u v} m to_applicative) α x) f) (f x)))
    (bind_assoc :
      (∀ {α β γ : Type u} (x : m α) (f : (∀ (a : α), m β))
        (g : (∀ (a : β), m γ)),
      @eq.{v+1} (m γ)
        (@has_bind.bind.{u v} m to_has_bind β γ
          (@has_bind.bind.{u v} m to_has_bind α β x f) g)
        (@has_bind.bind.{u v} m to_has_bind α γ x
          (λ (x_0 : α), @has_bind.bind.{u v} m to_has_bind β γ (f x_0) g)))),
  to_has_bind) c,0))"
err: "provingground.interface.UnParsedException: could not parse expression @monad.{u v}"

mod: "DefMod(Definition(list.mfilter._main,Vector(Param(v)),∀ {m : (∀ (a_0 : Type 0), Type v)} [inst_1 : @monad.{0 v} m] {α : Type 0}
  (f : (∀ (a_0 : α), m @bool)) (a : @list.{0} α),
m (@list.{0} α),λ {m : (∀ (a_0 : Type 0), Type v)} [inst_1 : @monad.{0 v} m] {α : Type 0}
  (f : (∀ (a_0 : α), m @bool)) (a : @list.{0} α),
@list.brec_on.{v+1 0} α (λ (a_0 : @list.{0} α), m (@list.{0} α)) a
  (λ (a_0 : @list.{0} α)
    (F : @list.below.{v+1 0} α (λ (a_1 : @list.{0} α), m (@list.{0} α)) a_0),
  (λ (a_1 : @list.{0} α)
      (F_0 :
        @list.below.{v+1 0} α (λ (a_2 : @list.{0} α), m (@list.{0} α)) a_1),
    @list.cases_on.{max 1 (v+1) 0} α
      (λ (a_2 : @list.{0} α),
      ∀ (F_1 :
          @list.below.{v+1 0} α (λ (a_3 : @list.{0} α), m (@list.{0} α)) a_2),
      m (@list.{0} α)) a_1
      (λ (F_1 :
          @list.below.{v+1 0} α (λ (a_2 : @list.{0} α), m (@list.{0} α))
            (@list.nil.{0} α)),
      @return.{0 v} m inst_1 (@list.{0} α) (@list.nil.{0} α))
      (λ (a_2 : α) (a_1_0 : @list.{0} α)
        (F_1 :
          @list.below.{v+1 0} α (λ (a_3 : @list.{0} α), m (@list.{0} α))
            (@list.cons.{0} α a_2 a_1_0)),
      @has_bind.bind.{0 v} m (@monad.to_has_bind.{0 v} m inst_1) @bool
        (@list.{0} α) (f a_2)
        (λ (b : @bool),
        @has_bind.bind.{0 v} m (@monad.to_has_bind.{0 v} m inst_1) (@list.{0} α)
          (@list.{0} α)
          (@pprod.fst.{v+1 max 1 (v+1)}
            ((λ (a_3 : @list.{0} α), m (@list.{0} α)) a_1_0)
            (@list.rec.{(max 1 (v+1))+1 0} α
              (λ (n : @list.{0} α), Sort (max 1 (v+1))) @punit.{max 1 (v+1)}
              (λ (a_3 : α) (a_4 : @list.{0} α) (ih_1 : Sort (max 1 (v+1))),
              @pprod.{max 1 (v+1) max 1 (v+1)}
                (@pprod.{v+1 max 1 (v+1)}
                  ((λ (a_5 : @list.{0} α), m (@list.{0} α)) a_4) ih_1)
                @punit.{max 1 (v+1)}) a_1_0)
            (@pprod.fst.{max 1 (v+1) max 1 (v+1)}
              (@pprod.{v+1 max 1 (v+1)}
                ((λ (a_3 : @list.{0} α), m (@list.{0} α)) a_1_0)
                (@list.rec.{(max 1 (v+1))+1 0} α
                  (λ (n : @list.{0} α), Sort (max 1 (v+1))) @punit.{max 1 (v+1)}
                  (λ (a_3 : α) (a_4 : @list.{0} α) (ih_1 : Sort (max 1 (v+1))),
                  @pprod.{max 1 (v+1) max 1 (v+1)}
                    (@pprod.{v+1 max 1 (v+1)}
                      ((λ (a_5 : @list.{0} α), m (@list.{0} α)) a_4) ih_1)
                    @punit.{max 1 (v+1)}) a_1_0)) @punit.{max 1 (v+1)} F_1))
          (λ (t : @list.{0} α),
          @cond.{v} (m (@list.{0} α)) b
            (@return.{0 v} m inst_1 (@list.{0} α) (@list.cons.{0} α a_2 t))
            (@return.{0 v} m inst_1 (@list.{0} α) t)))) F_0) a_0 F),0))"
err: "provingground.interface.UnParsedException: could not parse expression @monad.{0 v}"

mod: "DefMod(Definition(list.mfilter,Vector(Param(v)),∀ {m : (∀ (a_0 : Type 0), Type v)} [inst_1 : @monad.{0 v} m] {α : Type 0}
  (f : (∀ (a_0 : α), m @bool)) (a : @list.{0} α),
m (@list.{0} α),λ {m : (∀ (a : Type 0), Type v)} [inst_1 : @monad.{0 v} m] {α : Type 0}
  (f : (∀ (a : α), m @bool)),
@list.mfilter._main.{v} m inst_1 α f,0))"
err: "provingground.interface.UnParsedException: could not parse expression @monad.{0 v}"

mod: "DefMod(Definition(monad.filter,Vector(Param(u_1)),∀ {m : (∀ (a_0 : Type 0), Type u_1)} [inst_1 : @monad.{0 u_1} m] {α : Type 0}
  (f : (∀ (a_0 : α), m @bool)) (a : @list.{0} α),
m (@list.{0} α),@list.mfilter.{u_1},0))"
err: "provingground.interface.UnParsedException: could not parse expression @list.mfilter.{u_1}"

mod: "DefMod(Definition(monad.filter.equations._eqn_1,Vector(Param(u_1)),@eq.{max (max 2 (u_1+2)) (max ((max 1 u_1)+1) (max 2 (max 1 (u_1+1))))}
  (∀ {m : (∀ (a_0 : Type 0), Type u_1)} [inst_1 : @monad.{0 u_1} m] {α : Type 0}
    (f : (∀ (a_0 : α), m @bool)) (a : @list.{0} α),
  m (@list.{0} α)) @monad.filter.{u_1} @list.mfilter.{u_1},@eq.refl.{max (max 2 (u_1+2)) (max ((max 1 u_1)+1) (max 2 (max 1 (u_1+1))))}
  (∀ {m : (∀ (a_0 : Type 0), Type u_1)} [inst_1 : @monad.{0 u_1} m] {α : Type 0}
    (f : (∀ (a_0 : α), m @bool)) (a : @list.{0} α),
  m (@list.{0} α)) @monad.filter.{u_1},0))"
err: "provingground.interface.UnParsedException: could not parse expression @monad.filter.{u_1}"

mod: "DefMod(Definition(option_t,Vector(Param(u), Param(v)),∀ (m : (∀ (a : Type u), Type v)) [inst_1 : @monad.{u v} m] (α : Type u), Type v,λ (m : (∀ (a : Type u), Type v)) [inst_1 : @monad.{u v} m] (α : Type u),
m (@option.{u} α),0))"
err: "provingground.interface.UnParsedException: could not parse expression @monad.{u v}"

mod: "DefMod(Definition(option_t_bind._match_1,Vector(Param(u), Param(v)),∀ {m : (∀ (a_0 : Type u), Type v)} [inst_1 : @monad.{u v} m] {α β : Type u}
  (b : (∀ (a_0 : α), @option_t.{u v} m inst_1 β)) (a : @option.{u} α),
m (@option.{u} β),λ {m : (∀ (a_0 : Type u), Type v)} [inst_1 : @monad.{u v} m] {α β : Type u}
  (b : (∀ (a_0 : α), @option_t.{u v} m inst_1 β)) (a : @option.{u} α),
@option.cases_on.{v+1 u} α (λ (a_0 : @option.{u} α), m (@option.{u} β)) a
  (@id_rhs.{v+1} (m (@option.{u} β))
    (@return.{u v} m inst_1 (@option.{u} β) (@option.none.{u} β)))
  (λ (a_1 : α), @id_rhs.{v+1} (@option_t.{u v} m inst_1 β) (b a_1)),0))"
err: "provingground.interface.UnParsedException: could not parse expression @monad.{u v}"

mod: "DefMod(Definition(option_t_bind,Vector(Param(u), Param(v)),∀ {m : (∀ (a_0 : Type u), Type v)} [inst_1 : @monad.{u v} m] {α β : Type u}
  (a : @option_t.{u v} m inst_1 α)
  (b : (∀ (a_0 : α), @option_t.{u v} m inst_1 β)),
@option_t.{u v} m inst_1 β,λ {m : (∀ (a_0 : Type u), Type v)} [inst_1 : @monad.{u v} m] {α β : Type u}
  (a : @option_t.{u v} m inst_1 α)
  (b : (∀ (a_0 : α), @option_t.{u v} m inst_1 β)),
(λ (this : m (@option.{u} β)), this)
  (@has_bind.bind.{u v} m (@monad.to_has_bind.{u v} m inst_1) (@option.{u} α)
    (@option.{u} β) a
    (λ (o : @option.{u} α), @option_t_bind._match_1.{u v} m inst_1 α β b o)),0))"
err: "provingground.interface.UnParsedException: could not parse expression @monad.{u v}"

mod: "DefMod(Definition(option_t_return,Vector(Param(u), Param(v)),∀ {m : (∀ (a_0 : Type u), Type v)} [inst_1 : @monad.{u v} m] {α : Type u}
  (a : α),
@option_t.{u v} m inst_1 α,λ {m : (∀ (a_0 : Type u), Type v)} [inst_1 : @monad.{u v} m] {α : Type u}
  (a : α),
(λ (this : m (@option.{u} α)), this)
  (@return.{u v} m inst_1 (@option.{u} α) (@option.some.{u} α a)),0))"
err: "provingground.interface.UnParsedException: could not parse expression @monad.{u v}"

mod: "DefMod(Definition(option_t.monad._proof_4,Vector(Param(u), Param(v)),∀ {m : (∀ (a_0 : Type u), Type v)} [inst_1 : @monad.{u v} m] (α β : Type u)
  (a : @option_t.{u v} m inst_1 α) (b : @option_t.{u v} m inst_1 β),
@eq.{v+1} (@option_t.{u v} m inst_1 α)
  (@has_seq_left.seq_left.{u v} (@option_t.{u v} m inst_1)
    (@has_seq_left.mk.{u v} (@option_t.{u v} m inst_1)
      (λ (α_0 β_0 : Type u) (a_0 : @option_t.{u v} m inst_1 α_0)
        (b_0 : @option_t.{u v} m inst_1 β_0),
      (λ (α_1 β_1 : Type u) (f : @option_t.{u v} m inst_1 (∀ (a_1 : α_1), β_1))
          (x : @option_t.{u v} m inst_1 α_1),
        @option_t_bind.{u v} m inst_1 (∀ (a_1 : α_1), β_1) β_1 f
          (λ (x_0 : (∀ (a_1 : α_1), β_1)),
          (λ (α_2 β_2 : Type u) (f_0 : (∀ (a_1 : α_2), β_2))
              (x_1 : @option_t.{u v} m inst_1 α_2),
            @option_t_bind.{u v} m inst_1 α_2 β_2 x_1
              (@function.comp.{u+1 u+1 v+1} α_2 β_2
                (@option_t.{u v} m inst_1 β_2)
                (@option_t_return.{u v} m inst_1 β_2) f_0)) α_1 β_1 x_0 x)) β_0
        α_0
        ((λ (α_1 β_1 : Type u) (f : (∀ (a_1 : α_1), β_1))
            (x : @option_t.{u v} m inst_1 α_1),
          @option_t_bind.{u v} m inst_1 α_1 β_1 x
            (@function.comp.{u+1 u+1 v+1} α_1 β_1 (@option_t.{u v} m inst_1 β_1)
              (@option_t_return.{u v} m inst_1 β_1) f)) α_0 (∀ (a_1 : β_0), α_0)
          (@function.const.{u+1 u+1} α_0 β_0) a_0) b_0)) α β a b)
  (@has_seq_left.seq_left.{u v} (@option_t.{u v} m inst_1)
    (@has_seq_left.mk.{u v} (@option_t.{u v} m inst_1)
      (λ (α_0 β_0 : Type u) (a_0 : @option_t.{u v} m inst_1 α_0)
        (b_0 : @option_t.{u v} m inst_1 β_0),
      (λ (α_1 β_1 : Type u) (f : @option_t.{u v} m inst_1 (∀ (a_1 : α_1), β_1))
          (x : @option_t.{u v} m inst_1 α_1),
        @option_t_bind.{u v} m inst_1 (∀ (a_1 : α_1), β_1) β_1 f
          (λ (x_0 : (∀ (a_1 : α_1), β_1)),
          (λ (α_2 β_2 : Type u) (f_0 : (∀ (a_1 : α_2), β_2))
              (x_1 : @option_t.{u v} m inst_1 α_2),
            @option_t_bind.{u v} m inst_1 α_2 β_2 x_1
              (@function.comp.{u+1 u+1 v+1} α_2 β_2
                (@option_t.{u v} m inst_1 β_2)
                (@option_t_return.{u v} m inst_1 β_2) f_0)) α_1 β_1 x_0 x)) β_0
        α_0
        ((λ (α_1 β_1 : Type u) (f : (∀ (a_1 : α_1), β_1))
            (x : @option_t.{u v} m inst_1 α_1),
          @option_t_bind.{u v} m inst_1 α_1 β_1 x
            (@function.comp.{u+1 u+1 v+1} α_1 β_1 (@option_t.{u v} m inst_1 β_1)
              (@option_t_return.{u v} m inst_1 β_1) f)) α_0 (∀ (a_1 : β_0), α_0)
          (@function.const.{u+1 u+1} α_0 β_0) a_0) b_0)) α β a b),λ {m : (∀ (a_0 : Type u), Type v)} [inst_1 : @monad.{u v} m] (α β : Type u)
  (a : @option_t.{u v} m inst_1 α) (b : @option_t.{u v} m inst_1 β),
@rfl.{v+1} (@option_t.{u v} m inst_1 α)
  (@has_seq_left.seq_left.{u v} (@option_t.{u v} m inst_1)
    (@has_seq_left.mk.{u v} (@option_t.{u v} m inst_1)
      (λ (α_0 β_0 : Type u) (a_0 : @option_t.{u v} m inst_1 α_0)
        (b_0 : @option_t.{u v} m inst_1 β_0),
      (λ (α_1 β_1 : Type u) (f : @option_t.{u v} m inst_1 (∀ (a_1 : α_1), β_1))
          (x : @option_t.{u v} m inst_1 α_1),
        @option_t_bind.{u v} m inst_1 (∀ (a_1 : α_1), β_1) β_1 f
          (λ (x_0 : (∀ (a_1 : α_1), β_1)),
          (λ (α_2 β_2 : Type u) (f_0 : (∀ (a_1 : α_2), β_2))
              (x_1 : @option_t.{u v} m inst_1 α_2),
            @option_t_bind.{u v} m inst_1 α_2 β_2 x_1
              (@function.comp.{u+1 u+1 v+1} α_2 β_2
                (@option_t.{u v} m inst_1 β_2)
                (@option_t_return.{u v} m inst_1 β_2) f_0)) α_1 β_1 x_0 x)) β_0
        α_0
        ((λ (α_1 β_1 : Type u) (f : (∀ (a_1 : α_1), β_1))
            (x : @option_t.{u v} m inst_1 α_1),
          @option_t_bind.{u v} m inst_1 α_1 β_1 x
            (@function.comp.{u+1 u+1 v+1} α_1 β_1 (@option_t.{u v} m inst_1 β_1)
              (@option_t_return.{u v} m inst_1 β_1) f)) α_0 (∀ (a_1 : β_0), α_0)
          (@function.const.{u+1 u+1} α_0 β_0) a_0) b_0)) α β a b),0))"
err: "provingground.interface.UnParsedException: could not parse expression @monad.{u v}"

mod: "IndMod(InductiveType(monad.monad_transformer,Vector(Param(u_1)),∀ (transformer :
    (∀ (m : (∀ (a_0 : Type 0), Type u_1)) [inst_1 : @monad.{0 u_1} m]
      (a : Type 0),
    Type 0)),
Type (u_1+1)),1,Vector((monad.monad_transformer.mk,∀ {transformer :
    (∀ (m : (∀ (a_0 : Type 0), Type u_1)) [inst_1 : @monad.{0 u_1} m]
      (a : Type 0),
    Type 0)}
  (is_monad :
    (∀ (m : (∀ (a : Type 0), Type u_1)) [inst_1 : @monad.{0 u_1} m],
    @monad.{0 0} (transformer m inst_1)))
  (monad_lift :
    (∀ (m : (∀ (a_0 : Type 0), Type u_1)) [inst_2 : @monad.{0 u_1} m]
      (α : Type 0) (a : m α),
    transformer m inst_2 α)),
@monad.monad_transformer.{u_1} transformer)))"
err: "provingground.interface.UnParsedException: could not parse expression @monad.{0 u_1}"

mod: "DefMod(Definition(monad.monad_transformer.monad_lift,Vector(Param(u_1)),∀ (transformer :
    (∀ (m_0 : (∀ (a_1 : Type 0), Type u_1)) [inst_1 : @monad.{0 u_1} m_0]
      (a_0 : Type 0),
    Type 0)) [c : @monad.monad_transformer.{u_1} transformer]
  (m : (∀ (a_0 : Type 0), Type u_1)) [inst_2 : @monad.{0 u_1} m] (α : Type 0)
  (a : m α),
transformer m inst_2 α,λ (transformer :
    (∀ (m : (∀ (a_0 : Type 0), Type u_1)) [inst_1 : @monad.{0 u_1} m]
      (a : Type 0),
    Type 0)) [c : @monad.monad_transformer.{u_1} transformer],
@monad.monad_transformer.rec.{max (max 2
  (u_1+2))
  (max ((max 1
  u_1)+1)
  (max 2
  (max (u_1+1)
  1))) u_1} transformer
  (λ [c_0 : @monad.monad_transformer.{u_1} transformer],
  ∀ (m : (∀ (a_0 : Type 0), Type u_1)) [inst_2 : @monad.{0 u_1} m] (α : Type 0)
    (a : m α),
  transformer m inst_2 α)
  (λ (is_monad :
      (∀ (m : (∀ (a : Type 0), Type u_1)) [inst_1 : @monad.{0 u_1} m],
      @monad.{0 0} (transformer m inst_1)))
    (monad_lift :
      (∀ (m : (∀ (a_0 : Type 0), Type u_1)) [inst_2 : @monad.{0 u_1} m]
        (α : Type 0) (a : m α),
      transformer m inst_2 α)),
  monad_lift) c,0))"
err: "provingground.interface.UnParsedException: could not parse expression @monad.{0 u_1}"

mod: "DefMod(Definition(monad.monad_transformer_lift,Vector(),∀ (t :
    (∀ (m_0 : (∀ (a_0 : Type 0), Type 0)) [inst_1_0 : @monad.{0 0} m_0]
      (a : Type 0),
    Type 0)) (m : (∀ (a : Type 0), Type 0))
  [inst_1 : @monad.monad_transformer.{0} t] [inst_2 : @monad.{0 0} m],
@monad.has_monad_lift m (t m inst_2),λ (t :
    (∀ (m_0 : (∀ (a_0 : Type 0), Type 0)) [inst_1_0 : @monad.{0 0} m_0]
      (a : Type 0),
    Type 0)) (m : (∀ (a : Type 0), Type 0))
  [inst_1 : @monad.monad_transformer.{0} t] [inst_2 : @monad.{0 0} m],
@monad.has_monad_lift.mk m (t m inst_2)
  (@monad.monad_transformer.monad_lift.{0} t inst_1 m inst_2),0))"
err: "provingground.interface.UnParsedException: could not parse expression @monad.{0 0}"

mod: "DefMod(Definition(monad.map_pure._default,Vector(Param(v), Param(u)),∀ {m : (∀ (a : Type u), Type v)} (to_applicative : @applicative.{u v} m)
  (to_has_bind : @has_bind.{u v} m)
  (bind_pure_comp_eq_map :
    @auto_param.{0}
      (∀ {α β : Type u} (f : (∀ (a : α), β)) (x : m α),
      @eq.{v+1} (m β)
        (@has_bind.bind.{u v} m to_has_bind α β x
          (@function.comp.{u+1 u+1 v+1} α β (m β)
            (@has_pure.pure.{u v} m
              (@applicative.to_has_pure.{u v} m to_applicative) β) f))
        (@has_map.map.{u v} m
          (@functor.to_has_map.{u v} m
            (@applicative.to_functor.{u v} m to_applicative)) α β f x))
      (@name.mk_string
        (@string.str
          (@string.str
            (@string.str
              (@string.str
                (@string.str
                  (@string.str
                    (@string.str
                      (@string.str
                        (@string.str
                          (@string.str
                            (@string.str
                              (@string.str
                                (@string.str
                                  (@string.str
                                    (@string.str
                                      (@string.str @string.empty
                                        (@char.of_nat
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit0.{0} @nat @nat.has_add
                                                (@bit0.{0} @nat @nat.has_add
                                                  (@bit0.{0} @nat @nat.has_add
                                                    (@bit1.{0} @nat @nat.has_one
                                                      @nat.has_add
                                                      (@has_one.one.{0} @nat
                                                        @nat.has_one)))))))))
                                      (@char.of_nat
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit0.{0} @nat @nat.has_add
                                                  (@bit1.{0} @nat @nat.has_one
                                                    @nat.has_add
                                                    (@has_one.one.{0} @nat
                                                      @nat.has_one)))))))))
                                    (@char.of_nat
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit0.{0} @nat @nat.has_add
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@has_one.one.{0} @nat
                                                    @nat.has_one)))))))))
                                  (@char.of_nat
                                    (@bit0.{0} @nat @nat.has_add
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@bit0.{0} @nat @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@has_one.one.{0} @nat
                                                  @nat.has_one)))))))))
                                (@char.of_nat
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@has_one.one.{0} @nat
                                                @nat.has_one)))))))))
                              (@char.of_nat
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@has_one.one.{0} @nat
                                              @nat.has_one)))))))))
                            (@char.of_nat
                              (@bit0.{0} @nat @nat.has_add
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@has_one.one.{0} @nat
                                            @nat.has_one)))))))))
                          (@char.of_nat
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit0.{0} @nat @nat.has_add
                                        (@has_one.one.{0} @nat
                                          @nat.has_one)))))))))
                        (@char.of_nat
                          (@bit0.{0} @nat @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@has_one.one.{0} @nat
                                        @nat.has_one)))))))))
                      (@char.of_nat
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit0.{0} @nat @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@has_one.one.{0} @nat @nat.has_one)))))))))
                    (@char.of_nat
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@has_one.one.{0} @nat @nat.has_one)))))))))
                  (@char.of_nat
                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit0.{0} @nat @nat.has_add
                          (@bit0.{0} @nat @nat.has_add
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@has_one.one.{0} @nat @nat.has_one)))))))))
                (@char.of_nat
                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@has_one.one.{0} @nat @nat.has_one)))))))))
              (@char.of_nat
                (@bit0.{0} @nat @nat.has_add
                  (@bit0.{0} @nat @nat.has_add
                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                      (@bit0.{0} @nat @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@has_one.one.{0} @nat @nat.has_one)))))))))
            (@char.of_nat
              (@bit1.{0} @nat @nat.has_one @nat.has_add
                (@bit0.{0} @nat @nat.has_add
                  (@bit0.{0} @nat @nat.has_add
                    (@bit0.{0} @nat @nat.has_add
                      (@bit0.{0} @nat @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@has_one.one.{0} @nat @nat.has_one)))))))))
          (@char.of_nat
            (@bit1.{0} @nat @nat.has_one @nat.has_add
              (@bit1.{0} @nat @nat.has_one @nat.has_add
                (@bit0.{0} @nat @nat.has_add
                  (@bit0.{0} @nat @nat.has_add
                    (@bit0.{0} @nat @nat.has_add
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@has_one.one.{0} @nat @nat.has_one)))))))))
        @name.anonymous))
  (pure_bind :
    (∀ {α β : Type u} (x : α) (f : (∀ (a : α), m β)),
    @eq.{v+1} (m β)
      (@has_bind.bind.{u v} m to_has_bind α β
        (@has_pure.pure.{u v} m
          (@applicative.to_has_pure.{u v} m to_applicative) α x) f) (f x))),
(λ {f : (∀ (a : Type u), Type v)} (c : @applicative.{u v} f),
  ∀ {α β : Type u} (g : (∀ (a : α), β)) (x : α),
  @eq.{v+1} (f β)
    (@has_map.map.{u v} (λ {α_0 : Type u}, f α_0)
      (@functor.to_has_map.{u v} f (@applicative.to_functor.{u v} f c)) α β g
      (@has_pure.pure.{u v} f (@applicative.to_has_pure.{u v} f c) α x))
    (@has_pure.pure.{u v} f (@applicative.to_has_pure.{u v} f c) β (g x))) m
  to_applicative,λ {m : (∀ (a : Type u), Type v)} (to_applicative : @applicative.{u v} m)
  (to_has_bind : @has_bind.{u v} m)
  (bind_pure_comp_eq_map :
    @auto_param.{0}
      (∀ {α β : Type u} (f : (∀ (a : α), β)) (x : m α),
      @eq.{v+1} (m β)
        (@has_bind.bind.{u v} m to_has_bind α β x
          (@function.comp.{u+1 u+1 v+1} α β (m β)
            (@has_pure.pure.{u v} m
              (@applicative.to_has_pure.{u v} m to_applicative) β) f))
        (@has_map.map.{u v} m
          (@functor.to_has_map.{u v} m
            (@applicative.to_functor.{u v} m to_applicative)) α β f x))
      (@name.mk_string
        (@string.str
          (@string.str
            (@string.str
              (@string.str
                (@string.str
                  (@string.str
                    (@string.str
                      (@string.str
                        (@string.str
                          (@string.str
                            (@string.str
                              (@string.str
                                (@string.str
                                  (@string.str
                                    (@string.str
                                      (@string.str @string.empty
                                        (@char.of_nat
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit0.{0} @nat @nat.has_add
                                                (@bit0.{0} @nat @nat.has_add
                                                  (@bit0.{0} @nat @nat.has_add
                                                    (@bit1.{0} @nat @nat.has_one
                                                      @nat.has_add
                                                      (@has_one.one.{0} @nat
                                                        @nat.has_one)))))))))
                                      (@char.of_nat
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit0.{0} @nat @nat.has_add
                                                  (@bit1.{0} @nat @nat.has_one
                                                    @nat.has_add
                                                    (@has_one.one.{0} @nat
                                                      @nat.has_one)))))))))
                                    (@char.of_nat
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit0.{0} @nat @nat.has_add
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@has_one.one.{0} @nat
                                                    @nat.has_one)))))))))
                                  (@char.of_nat
                                    (@bit0.{0} @nat @nat.has_add
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@bit0.{0} @nat @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@has_one.one.{0} @nat
                                                  @nat.has_one)))))))))
                                (@char.of_nat
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@has_one.one.{0} @nat
                                                @nat.has_one)))))))))
                              (@char.of_nat
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@has_one.one.{0} @nat
                                              @nat.has_one)))))))))
                            (@char.of_nat
                              (@bit0.{0} @nat @nat.has_add
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@has_one.one.{0} @nat
                                            @nat.has_one)))))))))
                          (@char.of_nat
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit0.{0} @nat @nat.has_add
                                        (@has_one.one.{0} @nat
                                          @nat.has_one)))))))))
                        (@char.of_nat
                          (@bit0.{0} @nat @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@has_one.one.{0} @nat
                                        @nat.has_one)))))))))
                      (@char.of_nat
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit0.{0} @nat @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@has_one.one.{0} @nat @nat.has_one)))))))))
                    (@char.of_nat
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@has_one.one.{0} @nat @nat.has_one)))))))))
                  (@char.of_nat
                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit0.{0} @nat @nat.has_add
                          (@bit0.{0} @nat @nat.has_add
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@has_one.one.{0} @nat @nat.has_one)))))))))
                (@char.of_nat
                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@has_one.one.{0} @nat @nat.has_one)))))))))
              (@char.of_nat
                (@bit0.{0} @nat @nat.has_add
                  (@bit0.{0} @nat @nat.has_add
                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                      (@bit0.{0} @nat @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@has_one.one.{0} @nat @nat.has_one)))))))))
            (@char.of_nat
              (@bit1.{0} @nat @nat.has_one @nat.has_add
                (@bit0.{0} @nat @nat.has_add
                  (@bit0.{0} @nat @nat.has_add
                    (@bit0.{0} @nat @nat.has_add
                      (@bit0.{0} @nat @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@has_one.one.{0} @nat @nat.has_one)))))))))
          (@char.of_nat
            (@bit1.{0} @nat @nat.has_one @nat.has_add
              (@bit1.{0} @nat @nat.has_one @nat.has_add
                (@bit0.{0} @nat @nat.has_add
                  (@bit0.{0} @nat @nat.has_add
                    (@bit0.{0} @nat @nat.has_add
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@has_one.one.{0} @nat @nat.has_one)))))))))
        @name.anonymous))
  (pure_bind :
    (∀ {α β : Type u} (x : α) (f : (∀ (a : α), m β)),
    @eq.{v+1} (m β)
      (@has_bind.bind.{u v} m to_has_bind α β
        (@has_pure.pure.{u v} m
          (@applicative.to_has_pure.{u v} m to_applicative) α x) f) (f x))),
@id.{0}
  (∀ (α β : Type u) (g : (∀ (a : α), β)) (x : α),
  @eq.{v+1} (m β)
    (@has_map.map.{u v} (λ {α_0 : Type u}, m α_0)
      (@functor.to_has_map.{u v} m
        (@applicative.to_functor.{u v} m to_applicative)) α β g
      (@has_pure.pure.{u v} m (@applicative.to_has_pure.{u v} m to_applicative)
        α x))
    (@has_pure.pure.{u v} m (@applicative.to_has_pure.{u v} m to_applicative) β
      (g x)))
  (λ (α β : Type u) (g : (∀ (a : α), β)) (x : α),
  @eq.trans.{v+1} (m β)
    (@has_map.map.{u v} (λ {α_0 : Type u}, m α_0)
      (@functor.to_has_map.{u v} m
        (@applicative.to_functor.{u v} m to_applicative)) α β g
      (@has_pure.pure.{u v} m (@applicative.to_has_pure.{u v} m to_applicative)
        α x))
    (@has_bind.bind.{u v} m to_has_bind α β
      (@has_pure.pure.{u v} m (@applicative.to_has_pure.{u v} m to_applicative)
        α x)
      (@function.comp.{u+1 u+1 v+1} α β (m β)
        (@has_pure.pure.{u v} m
          (@applicative.to_has_pure.{u v} m to_applicative) β) g))
    (@has_pure.pure.{u v} m (@applicative.to_has_pure.{u v} m to_applicative) β
      (g x))
    (@eq.symm.{v+1} (m β)
      (@has_bind.bind.{u v} m to_has_bind α β
        (@has_pure.pure.{u v} m
          (@applicative.to_has_pure.{u v} m to_applicative) α x)
        (@function.comp.{u+1 u+1 v+1} α β (m β)
          (@has_pure.pure.{u v} m
            (@applicative.to_has_pure.{u v} m to_applicative) β) g))
      (@has_map.map.{u v} (λ {α_0 : Type u}, m α_0)
        (@functor.to_has_map.{u v} m
          (@applicative.to_functor.{u v} m to_applicative)) α β g
        (@has_pure.pure.{u v} m
          (@applicative.to_has_pure.{u v} m to_applicative) α x))
      (bind_pure_comp_eq_map α β g
        (@has_pure.pure.{u v} m
          (@applicative.to_has_pure.{u v} m to_applicative) α x)))
    (pure_bind α β x
      (@function.comp.{u+1 u+1 v+1} α β (m β)
        (@has_pure.pure.{u v} m
          (@applicative.to_has_pure.{u v} m to_applicative) β) g))),0))"
err: "provingground.interface.UnParsedException: could not parse expression @applicative.{u v}"

mod: "DefMod(Definition(monad.map_pure._default.equations._eqn_1,Vector(Param(u), Param(v)),∀ {m : (∀ (a : Type u), Type v)} (to_applicative : @applicative.{u v} m)
  (to_has_bind : @has_bind.{u v} m)
  (bind_pure_comp_eq_map :
    @auto_param.{0}
      (∀ {α β : Type u} (f : (∀ (a : α), β)) (x : m α),
      @eq.{v+1} (m β)
        (@has_bind.bind.{u v} m to_has_bind α β x
          (@function.comp.{u+1 u+1 v+1} α β (m β)
            (@has_pure.pure.{u v} m
              (@applicative.to_has_pure.{u v} m to_applicative) β) f))
        (@has_map.map.{u v} m
          (@functor.to_has_map.{u v} m
            (@applicative.to_functor.{u v} m to_applicative)) α β f x))
      (@name.mk_string
        (@string.str
          (@string.str
            (@string.str
              (@string.str
                (@string.str
                  (@string.str
                    (@string.str
                      (@string.str
                        (@string.str
                          (@string.str
                            (@string.str
                              (@string.str
                                (@string.str
                                  (@string.str
                                    (@string.str
                                      (@string.str @string.empty
                                        (@char.of_nat
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit0.{0} @nat @nat.has_add
                                                (@bit0.{0} @nat @nat.has_add
                                                  (@bit0.{0} @nat @nat.has_add
                                                    (@bit1.{0} @nat @nat.has_one
                                                      @nat.has_add
                                                      (@has_one.one.{0} @nat
                                                        @nat.has_one)))))))))
                                      (@char.of_nat
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit0.{0} @nat @nat.has_add
                                                  (@bit1.{0} @nat @nat.has_one
                                                    @nat.has_add
                                                    (@has_one.one.{0} @nat
                                                      @nat.has_one)))))))))
                                    (@char.of_nat
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit0.{0} @nat @nat.has_add
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@has_one.one.{0} @nat
                                                    @nat.has_one)))))))))
                                  (@char.of_nat
                                    (@bit0.{0} @nat @nat.has_add
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@bit0.{0} @nat @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@has_one.one.{0} @nat
                                                  @nat.has_one)))))))))
                                (@char.of_nat
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@has_one.one.{0} @nat
                                                @nat.has_one)))))))))
                              (@char.of_nat
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@has_one.one.{0} @nat
                                              @nat.has_one)))))))))
                            (@char.of_nat
                              (@bit0.{0} @nat @nat.has_add
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@has_one.one.{0} @nat
                                            @nat.has_one)))))))))
                          (@char.of_nat
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit0.{0} @nat @nat.has_add
                                        (@has_one.one.{0} @nat
                                          @nat.has_one)))))))))
                        (@char.of_nat
                          (@bit0.{0} @nat @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@has_one.one.{0} @nat
                                        @nat.has_one)))))))))
                      (@char.of_nat
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit0.{0} @nat @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@has_one.one.{0} @nat @nat.has_one)))))))))
                    (@char.of_nat
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@has_one.one.{0} @nat @nat.has_one)))))))))
                  (@char.of_nat
                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit0.{0} @nat @nat.has_add
                          (@bit0.{0} @nat @nat.has_add
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@has_one.one.{0} @nat @nat.has_one)))))))))
                (@char.of_nat
                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@has_one.one.{0} @nat @nat.has_one)))))))))
              (@char.of_nat
                (@bit0.{0} @nat @nat.has_add
                  (@bit0.{0} @nat @nat.has_add
                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                      (@bit0.{0} @nat @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@has_one.one.{0} @nat @nat.has_one)))))))))
            (@char.of_nat
              (@bit1.{0} @nat @nat.has_one @nat.has_add
                (@bit0.{0} @nat @nat.has_add
                  (@bit0.{0} @nat @nat.has_add
                    (@bit0.{0} @nat @nat.has_add
                      (@bit0.{0} @nat @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@has_one.one.{0} @nat @nat.has_one)))))))))
          (@char.of_nat
            (@bit1.{0} @nat @nat.has_one @nat.has_add
              (@bit1.{0} @nat @nat.has_one @nat.has_add
                (@bit0.{0} @nat @nat.has_add
                  (@bit0.{0} @nat @nat.has_add
                    (@bit0.{0} @nat @nat.has_add
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@has_one.one.{0} @nat @nat.has_one)))))))))
        @name.anonymous))
  (pure_bind :
    (∀ {α β : Type u} (x : α) (f : (∀ (a : α), m β)),
    @eq.{v+1} (m β)
      (@has_bind.bind.{u v} m to_has_bind α β
        (@has_pure.pure.{u v} m
          (@applicative.to_has_pure.{u v} m to_applicative) α x) f) (f x))),
@eq.{0}
  ((λ {f : (∀ (a : Type u), Type v)} (c : @applicative.{u v} f),
    ∀ {α β : Type u} (g : (∀ (a : α), β)) (x : α),
    @eq.{v+1} (f β)
      (@has_map.map.{u v} (λ {α_0 : Type u}, f α_0)
        (@functor.to_has_map.{u v} f (@applicative.to_functor.{u v} f c)) α β g
        (@has_pure.pure.{u v} f (@applicative.to_has_pure.{u v} f c) α x))
      (@has_pure.pure.{u v} f (@applicative.to_has_pure.{u v} f c) β (g x))) m
    to_applicative)
  (@monad.map_pure._default.{v u} m to_applicative to_has_bind
    bind_pure_comp_eq_map pure_bind)
  (@id.{0}
    (∀ (α β : Type u) (g : (∀ (a : α), β)) (x : α),
    @eq.{v+1} (m β)
      (@has_map.map.{u v} (λ {α_0 : Type u}, m α_0)
        (@functor.to_has_map.{u v} m
          (@applicative.to_functor.{u v} m to_applicative)) α β g
        (@has_pure.pure.{u v} m
          (@applicative.to_has_pure.{u v} m to_applicative) α x))
      (@has_pure.pure.{u v} m (@applicative.to_has_pure.{u v} m to_applicative)
        β (g x)))
    (λ (α β : Type u) (g : (∀ (a : α), β)) (x : α),
    @eq.trans.{v+1} (m β)
      (@has_map.map.{u v} (λ {α_0 : Type u}, m α_0)
        (@functor.to_has_map.{u v} m
          (@applicative.to_functor.{u v} m to_applicative)) α β g
        (@has_pure.pure.{u v} m
          (@applicative.to_has_pure.{u v} m to_applicative) α x))
      (@has_bind.bind.{u v} m to_has_bind α β
        (@has_pure.pure.{u v} m
          (@applicative.to_has_pure.{u v} m to_applicative) α x)
        (@function.comp.{u+1 u+1 v+1} α β (m β)
          (@has_pure.pure.{u v} m
            (@applicative.to_has_pure.{u v} m to_applicative) β) g))
      (@has_pure.pure.{u v} m (@applicative.to_has_pure.{u v} m to_applicative)
        β (g x))
      (@eq.symm.{v+1} (m β)
        (@has_bind.bind.{u v} m to_has_bind α β
          (@has_pure.pure.{u v} m
            (@applicative.to_has_pure.{u v} m to_applicative) α x)
          (@function.comp.{u+1 u+1 v+1} α β (m β)
            (@has_pure.pure.{u v} m
              (@applicative.to_has_pure.{u v} m to_applicative) β) g))
        (@has_map.map.{u v} (λ {α_0 : Type u}, m α_0)
          (@functor.to_has_map.{u v} m
            (@applicative.to_functor.{u v} m to_applicative)) α β g
          (@has_pure.pure.{u v} m
            (@applicative.to_has_pure.{u v} m to_applicative) α x))
        (bind_pure_comp_eq_map α β g
          (@has_pure.pure.{u v} m
            (@applicative.to_has_pure.{u v} m to_applicative) α x)))
      (pure_bind α β x
        (@function.comp.{u+1 u+1 v+1} α β (m β)
          (@has_pure.pure.{u v} m
            (@applicative.to_has_pure.{u v} m to_applicative) β) g)))),λ {m : (∀ (a : Type u), Type v)} (to_applicative : @applicative.{u v} m)
  (to_has_bind : @has_bind.{u v} m)
  (bind_pure_comp_eq_map :
    @auto_param.{0}
      (∀ {α β : Type u} (f : (∀ (a : α), β)) (x : m α),
      @eq.{v+1} (m β)
        (@has_bind.bind.{u v} m to_has_bind α β x
          (@function.comp.{u+1 u+1 v+1} α β (m β)
            (@has_pure.pure.{u v} m
              (@applicative.to_has_pure.{u v} m to_applicative) β) f))
        (@has_map.map.{u v} m
          (@functor.to_has_map.{u v} m
            (@applicative.to_functor.{u v} m to_applicative)) α β f x))
      (@name.mk_string
        (@string.str
          (@string.str
            (@string.str
              (@string.str
                (@string.str
                  (@string.str
                    (@string.str
                      (@string.str
                        (@string.str
                          (@string.str
                            (@string.str
                              (@string.str
                                (@string.str
                                  (@string.str
                                    (@string.str
                                      (@string.str @string.empty
                                        (@char.of_nat
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit0.{0} @nat @nat.has_add
                                                (@bit0.{0} @nat @nat.has_add
                                                  (@bit0.{0} @nat @nat.has_add
                                                    (@bit1.{0} @nat @nat.has_one
                                                      @nat.has_add
                                                      (@has_one.one.{0} @nat
                                                        @nat.has_one)))))))))
                                      (@char.of_nat
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit0.{0} @nat @nat.has_add
                                                  (@bit1.{0} @nat @nat.has_one
                                                    @nat.has_add
                                                    (@has_one.one.{0} @nat
                                                      @nat.has_one)))))))))
                                    (@char.of_nat
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit0.{0} @nat @nat.has_add
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@has_one.one.{0} @nat
                                                    @nat.has_one)))))))))
                                  (@char.of_nat
                                    (@bit0.{0} @nat @nat.has_add
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@bit0.{0} @nat @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@has_one.one.{0} @nat
                                                  @nat.has_one)))))))))
                                (@char.of_nat
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@has_one.one.{0} @nat
                                                @nat.has_one)))))))))
                              (@char.of_nat
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@has_one.one.{0} @nat
                                              @nat.has_one)))))))))
                            (@char.of_nat
                              (@bit0.{0} @nat @nat.has_add
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@has_one.one.{0} @nat
                                            @nat.has_one)))))))))
                          (@char.of_nat
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit0.{0} @nat @nat.has_add
                                        (@has_one.one.{0} @nat
                                          @nat.has_one)))))))))
                        (@char.of_nat
                          (@bit0.{0} @nat @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@has_one.one.{0} @nat
                                        @nat.has_one)))))))))
                      (@char.of_nat
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit0.{0} @nat @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@has_one.one.{0} @nat @nat.has_one)))))))))
                    (@char.of_nat
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@has_one.one.{0} @nat @nat.has_one)))))))))
                  (@char.of_nat
                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit0.{0} @nat @nat.has_add
                          (@bit0.{0} @nat @nat.has_add
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@has_one.one.{0} @nat @nat.has_one)))))))))
                (@char.of_nat
                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@has_one.one.{0} @nat @nat.has_one)))))))))
              (@char.of_nat
                (@bit0.{0} @nat @nat.has_add
                  (@bit0.{0} @nat @nat.has_add
                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                      (@bit0.{0} @nat @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@has_one.one.{0} @nat @nat.has_one)))))))))
            (@char.of_nat
              (@bit1.{0} @nat @nat.has_one @nat.has_add
                (@bit0.{0} @nat @nat.has_add
                  (@bit0.{0} @nat @nat.has_add
                    (@bit0.{0} @nat @nat.has_add
                      (@bit0.{0} @nat @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@has_one.one.{0} @nat @nat.has_one)))))))))
          (@char.of_nat
            (@bit1.{0} @nat @nat.has_one @nat.has_add
              (@bit1.{0} @nat @nat.has_one @nat.has_add
                (@bit0.{0} @nat @nat.has_add
                  (@bit0.{0} @nat @nat.has_add
                    (@bit0.{0} @nat @nat.has_add
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@has_one.one.{0} @nat @nat.has_one)))))))))
        @name.anonymous))
  (pure_bind :
    (∀ {α β : Type u} (x : α) (f : (∀ (a : α), m β)),
    @eq.{v+1} (m β)
      (@has_bind.bind.{u v} m to_has_bind α β
        (@has_pure.pure.{u v} m
          (@applicative.to_has_pure.{u v} m to_applicative) α x) f) (f x))),
@eq.refl.{0}
  ((λ {f : (∀ (a : Type u), Type v)} (c : @applicative.{u v} f),
    ∀ {α β : Type u} (g : (∀ (a : α), β)) (x : α),
    @eq.{v+1} (f β)
      (@has_map.map.{u v} (λ {α_0 : Type u}, f α_0)
        (@functor.to_has_map.{u v} f (@applicative.to_functor.{u v} f c)) α β g
        (@has_pure.pure.{u v} f (@applicative.to_has_pure.{u v} f c) α x))
      (@has_pure.pure.{u v} f (@applicative.to_has_pure.{u v} f c) β (g x))) m
    to_applicative)
  (@monad.map_pure._default.{v u} m to_applicative to_has_bind
    bind_pure_comp_eq_map pure_bind),0))"
err: "provingground.interface.UnParsedException: could not parse expression @applicative.{u v}"

mod: "DefMod(Definition(eq.dcases_on,Vector(Param(l), Param(u)),∀ {α : Sort u} {a : α} {C : (∀ (a_1 : α) (h : @eq.{u} α a a_1), Sort l)}
  {a_0 : α} (n : @eq.{u} α a a_0) (e_1 : C a (@eq.refl.{u} α a)),
C a_0 n,λ {α : Sort u} {a : α} {C : (∀ (a_1 : α) (h : @eq.{u} α a a_1), Sort l)}
  {a_0 : α} (n : @eq.{u} α a a_0) (e_1 : C a (@eq.refl.{u} α a)),
@eq.rec.{l u} α a (λ (a_1 : α), ∀ (h : @eq.{u} α a a_1), C a_1 h)
  (λ (a_1 : @eq.{u} α a a), e_1) a_0 n n,0))"
err: "provingground.HoTT$ApplnFailException: function func  cannot act on given term"

mod: "DefMod(Definition(bool.ff_ne_tt,Vector(),∀ (a : @eq.{1} @bool @bool.ff @bool.tt), @false,λ (a : @eq.{1} @bool @bool.ff @bool.tt),
@eq.dcases_on.{0 1} @bool @bool.ff
  (λ (t_1 : @bool) (a_1 : @eq.{1} @bool @bool.ff t_1),
  ∀ (H_1 : @eq.{1} @bool @bool.tt t_1)
    (H_2 :
      @heq.{0} (@eq.{1} @bool @bool.ff @bool.tt) a (@eq.{1} @bool @bool.ff t_1)
        a_1),
  @false) @bool.tt a
  (λ (H_1 : @eq.{1} @bool @bool.tt @bool.ff),
  @bool.no_confusion.{0}
    (∀ (H_2 :
        @heq.{0} (@eq.{1} @bool @bool.ff @bool.tt) a
          (@eq.{1} @bool @bool.ff @bool.ff) (@eq.refl.{1} @bool @bool.ff)),
    @false) @bool.tt @bool.ff H_1) (@eq.refl.{1} @bool @bool.tt)
  (@heq.refl.{0} (@eq.{1} @bool @bool.ff @bool.tt) a),0))"
err: "provingground.interface.UnParsedException: could not parse expression @eq.dcases_on.{0 1}"

mod: "DefMod(Definition(option.get._main,Vector(Param(u)),∀ {α : Type u} {o : @option.{u} α}
  (a : @coe_sort.{1 1} @bool @coe_sort_bool (@option.is_some.{u} α o)),
α,λ {α : Type u} {o : @option.{u} α}
  (a : @coe_sort.{1 1} @bool @coe_sort_bool (@option.is_some.{u} α o)),
@option.cases_on.{u+1 u} α
  (λ {o_0 : @option.{u} α},
  ∀ (a_0 : @coe_sort.{1 1} @bool @coe_sort_bool (@option.is_some.{u} α o_0)),
  α) o
  (λ (a_0 :
      @coe_sort.{1 1} @bool @coe_sort_bool
        (@option.is_some.{u} α (@option.none.{u} α))),
  @false.rec.{u+1} α (@bool.ff_ne_tt a_0))
  (λ (a_0 : α)
    (a_1 :
      @coe_sort.{1 1} @bool @coe_sort_bool
        (@option.is_some.{u} α (@option.some.{u} α a_0))),
  a_0) a,0))"
err: "provingground.interface.UnParsedException: could not parse expression @bool.ff_ne_tt"

mod: "IndMod(InductiveType(monad_fail,Vector(Param(u), Param(v)),∀ (m : (∀ (a : Type u), Type v)), Sort (max (u+2) (v+1))),1,Vector((monad_fail.mk,∀ {m : (∀ (a : Type u), Type v)} (to_monad : @monad.{u v} m)
  (fail : (∀ {a : Type u} (a_0 : @string), m a)),
@monad_fail.{u v} m)))"
err: "provingground.interface.UnParsedException: could not parse expression @monad.{u v}"

mod: "DefMod(Definition(functor.sizeof,Vector(Param(u), Param(v)),∀ (f : (∀ (a : Type u), Type v)) (x : @functor.{u v} f), @nat,λ (f : (∀ (a : Type u), Type v)),
@functor.rec.{1 u v} f (λ (x : @functor.{u v} f), @nat)
  (λ (to_has_map : @has_map.{u v} f)
    (map_const_eq :
      @auto_param.{0}
        (∀ {α β : Type u},
        @eq.{max (u+1) (v+1)} (∀ (a : α) (a_0 : f β), f α)
          (@has_map.map_const.{u v} f to_has_map α β)
          (@function.comp.{u+1 u+1 v+1} α (∀ (a : β), α) (∀ (a : f β), f α)
            (@has_map.map.{u v} f to_has_map β α)
            (@function.const.{u+1 u+1} α β)))
        (@name.mk_string
          (@string.str
            (@string.str
              (@string.str
                (@string.str
                  (@string.str
                    (@string.str
                      (@string.str
                        (@string.str
                          (@string.str
                            (@string.str
                              (@string.str
                                (@string.str
                                  (@string.str
                                    (@string.str
                                      (@string.str
                                        (@string.str @string.empty
                                          (@char.of_nat
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit0.{0} @nat @nat.has_add
                                                  (@bit0.{0} @nat @nat.has_add
                                                    (@bit0.{0} @nat @nat.has_add
                                                      (@bit1.{0} @nat
                                                        @nat.has_one
                                                        @nat.has_add
                                                        (@has_one.one.{0} @nat
                                                          @nat.has_one)))))))))
                                        (@char.of_nat
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@bit0.{0} @nat @nat.has_add
                                                    (@bit1.{0} @nat @nat.has_one
                                                      @nat.has_add
                                                      (@has_one.one.{0} @nat
                                                        @nat.has_one)))))))))
                                      (@char.of_nat
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit0.{0} @nat @nat.has_add
                                                  (@bit1.{0} @nat @nat.has_one
                                                    @nat.has_add
                                                    (@has_one.one.{0} @nat
                                                      @nat.has_one)))))))))
                                    (@char.of_nat
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit0.{0} @nat @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@has_one.one.{0} @nat
                                                    @nat.has_one)))))))))
                                  (@char.of_nat
                                    (@bit0.{0} @nat @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit0.{0} @nat @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@has_one.one.{0} @nat
                                                  @nat.has_one)))))))))
                                (@char.of_nat
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@bit0.{0} @nat @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@has_one.one.{0} @nat
                                                @nat.has_one)))))))))
                              (@char.of_nat
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@has_one.one.{0} @nat
                                              @nat.has_one)))))))))
                            (@char.of_nat
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@has_one.one.{0} @nat
                                            @nat.has_one)))))))))
                          (@char.of_nat
                            (@bit0.{0} @nat @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit0.{0} @nat @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@has_one.one.{0} @nat
                                          @nat.has_one)))))))))
                        (@char.of_nat
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@has_one.one.{0} @nat
                                        @nat.has_one)))))))))
                      (@char.of_nat
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@has_one.one.{0} @nat @nat.has_one)))))))))
                    (@char.of_nat
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit0.{0} @nat @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@has_one.one.{0} @nat @nat.has_one)))))))))
                  (@char.of_nat
                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@has_one.one.{0} @nat @nat.has_one)))))))))
                (@char.of_nat
                  (@bit0.{0} @nat @nat.has_add
                    (@bit0.{0} @nat @nat.has_add
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit0.{0} @nat @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@has_one.one.{0} @nat @nat.has_one)))))))))
              (@char.of_nat
                (@bit1.{0} @nat @nat.has_one @nat.has_add
                  (@bit0.{0} @nat @nat.has_add
                    (@bit0.{0} @nat @nat.has_add
                      (@bit0.{0} @nat @nat.has_add
                        (@bit0.{0} @nat @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@has_one.one.{0} @nat @nat.has_one)))))))))
            (@char.of_nat
              (@bit1.{0} @nat @nat.has_one @nat.has_add
                (@bit1.{0} @nat @nat.has_one @nat.has_add
                  (@bit0.{0} @nat @nat.has_add
                    (@bit0.{0} @nat @nat.has_add
                      (@bit0.{0} @nat @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@has_one.one.{0} @nat @nat.has_one)))))))))
          @name.anonymous))
    (id_map :
      (∀ {α : Type u} (x : f α),
      @eq.{v+1} (f α) (@has_map.map.{u v} f to_has_map α α (@id.{u+1} α) x) x))
    (map_comp :
      (∀ {α β γ : Type u} (g : (∀ (a : α), β)) (h : (∀ (a : β), γ)) (x : f α),
      @eq.{v+1} (f γ)
        (@has_map.map.{u v} (λ {α_0 : Type u}, f α_0) to_has_map α γ
          (@function.comp.{u+1 u+1 u+1} α β γ h g) x)
        (@has_map.map.{u v} f to_has_map β γ h
          (@has_map.map.{u v} f to_has_map α β g x)))),
  @has_add.add.{0} @nat @nat.has_add
    (@has_add.add.{0} @nat @nat.has_add
      (@has_add.add.{0} @nat @nat.has_add
        (@has_add.add.{0} @nat @nat.has_add (@has_one.one.{0} @nat @nat.has_one)
          (@sizeof.{(max (u+1) v)+1} (@has_map.{u v} f)
            (@has_map.has_sizeof_inst.{u v} f) to_has_map))
        (@sizeof.{0}
          (@auto_param.{0}
            (∀ {α β : Type u},
            @eq.{max (u+1) (v+1)} (∀ (a : α) (a_0 : f β), f α)
              (@has_map.map_const.{u v} f to_has_map α β)
              (@function.comp.{u+1 u+1 v+1} α (∀ (a : β), α) (∀ (a : f β), f α)
                (@has_map.map.{u v} f to_has_map β α)
                (@function.const.{u+1 u+1} α β)))
            (@name.mk_string
              (@string.str
                (@string.str
                  (@string.str
                    (@string.str
                      (@string.str
                        (@string.str
                          (@string.str
                            (@string.str
                              (@string.str
                                (@string.str
                                  (@string.str
                                    (@string.str
                                      (@string.str
                                        (@string.str
                                          (@string.str
                                            (@string.str @string.empty
                                              (@char.of_nat
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@bit1.{0} @nat @nat.has_one
                                                    @nat.has_add
                                                    (@bit0.{0} @nat @nat.has_add
                                                      (@bit0.{0} @nat
                                                        @nat.has_add
                                                        (@bit0.{0} @nat
                                                          @nat.has_add
                                                          (@bit1.{0} @nat
                                                            @nat.has_one
                                                            @nat.has_add
                                                            (@has_one.one.{0}
                                                              @nat
                                                              @nat.has_one)))))))))
                                            (@char.of_nat
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@bit1.{0} @nat @nat.has_one
                                                    @nat.has_add
                                                    (@bit1.{0} @nat @nat.has_one
                                                      @nat.has_add
                                                      (@bit0.{0} @nat
                                                        @nat.has_add
                                                        (@bit1.{0} @nat
                                                          @nat.has_one
                                                          @nat.has_add
                                                          (@has_one.one.{0} @nat
                                                            @nat.has_one)))))))))
                                          (@char.of_nat
                                            (@bit0.{0} @nat @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@bit1.{0} @nat @nat.has_one
                                                    @nat.has_add
                                                    (@bit0.{0} @nat @nat.has_add
                                                      (@bit1.{0} @nat
                                                        @nat.has_one
                                                        @nat.has_add
                                                        (@has_one.one.{0} @nat
                                                          @nat.has_one)))))))))
                                        (@char.of_nat
                                          (@bit0.{0} @nat @nat.has_add
                                            (@bit0.{0} @nat @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit0.{0} @nat @nat.has_add
                                                  (@bit1.{0} @nat @nat.has_one
                                                    @nat.has_add
                                                    (@bit1.{0} @nat @nat.has_one
                                                      @nat.has_add
                                                      (@has_one.one.{0} @nat
                                                        @nat.has_one)))))))))
                                      (@char.of_nat
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit0.{0} @nat @nat.has_add
                                              (@bit0.{0} @nat @nat.has_add
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@bit1.{0} @nat @nat.has_one
                                                    @nat.has_add
                                                    (@has_one.one.{0} @nat
                                                      @nat.has_one)))))))))
                                    (@char.of_nat
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit0.{0} @nat @nat.has_add
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@has_one.one.{0} @nat
                                                    @nat.has_one)))))))))
                                  (@char.of_nat
                                    (@bit0.{0} @nat @nat.has_add
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit0.{0} @nat @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@has_one.one.{0} @nat
                                                  @nat.has_one)))))))))
                                (@char.of_nat
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit0.{0} @nat @nat.has_add
                                              (@has_one.one.{0} @nat
                                                @nat.has_one)))))))))
                              (@char.of_nat
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@has_one.one.{0} @nat
                                              @nat.has_one)))))))))
                            (@char.of_nat
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit0.{0} @nat @nat.has_add
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@has_one.one.{0} @nat
                                            @nat.has_one)))))))))
                          (@char.of_nat
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@has_one.one.{0} @nat
                                          @nat.has_one)))))))))
                        (@char.of_nat
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@has_one.one.{0} @nat
                                        @nat.has_one)))))))))
                      (@char.of_nat
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit0.{0} @nat @nat.has_add
                                    (@has_one.one.{0} @nat @nat.has_one)))))))))
                    (@char.of_nat
                      (@bit0.{0} @nat @nat.has_add
                        (@bit0.{0} @nat @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@has_one.one.{0} @nat @nat.has_one)))))))))
                  (@char.of_nat
                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                      (@bit0.{0} @nat @nat.has_add
                        (@bit0.{0} @nat @nat.has_add
                          (@bit0.{0} @nat @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@has_one.one.{0} @nat @nat.has_one)))))))))
                (@char.of_nat
                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                      (@bit0.{0} @nat @nat.has_add
                        (@bit0.{0} @nat @nat.has_add
                          (@bit0.{0} @nat @nat.has_add
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@has_one.one.{0} @nat @nat.has_one)))))))))
              @name.anonymous))
          (@default_has_sizeof.{0}
            (@auto_param.{0}
              (∀ {α β : Type u},
              @eq.{max (u+1) (v+1)} (∀ (a : α) (a_0 : f β), f α)
                (@has_map.map_const.{u v} f to_has_map α β)
                (@function.comp.{u+1 u+1 v+1} α (∀ (a : β), α)
                  (∀ (a : f β), f α) (@has_map.map.{u v} f to_has_map β α)
                  (@function.const.{u+1 u+1} α β)))
              (@name.mk_string
                (@string.str
                  (@string.str
                    (@string.str
                      (@string.str
                        (@string.str
                          (@string.str
                            (@string.str
                              (@string.str
                                (@string.str
                                  (@string.str
                                    (@string.str
                                      (@string.str
                                        (@string.str
                                          (@string.str
                                            (@string.str
                                              (@string.str @string.empty
                                                (@char.of_nat
                                                  (@bit1.{0} @nat @nat.has_one
                                                    @nat.has_add
                                                    (@bit1.{0} @nat @nat.has_one
                                                      @nat.has_add
                                                      (@bit0.{0} @nat
                                                        @nat.has_add
                                                        (@bit0.{0} @nat
                                                          @nat.has_add
                                                          (@bit0.{0} @nat
                                                            @nat.has_add
                                                            (@bit1.{0} @nat
                                                              @nat.has_one
                                                              @nat.has_add
                                                              (@has_one.one.{0}
                                                                @nat
                                                                @nat.has_one)))))))))
                                              (@char.of_nat
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@bit1.{0} @nat @nat.has_one
                                                    @nat.has_add
                                                    (@bit1.{0} @nat @nat.has_one
                                                      @nat.has_add
                                                      (@bit1.{0} @nat
                                                        @nat.has_one
                                                        @nat.has_add
                                                        (@bit0.{0} @nat
                                                          @nat.has_add
                                                          (@bit1.{0} @nat
                                                            @nat.has_one
                                                            @nat.has_add
                                                            (@has_one.one.{0}
                                                              @nat
                                                              @nat.has_one)))))))))
                                            (@char.of_nat
                                              (@bit0.{0} @nat @nat.has_add
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@bit1.{0} @nat @nat.has_one
                                                    @nat.has_add
                                                    (@bit1.{0} @nat @nat.has_one
                                                      @nat.has_add
                                                      (@bit0.{0} @nat
                                                        @nat.has_add
                                                        (@bit1.{0} @nat
                                                          @nat.has_one
                                                          @nat.has_add
                                                          (@has_one.one.{0} @nat
                                                            @nat.has_one)))))))))
                                          (@char.of_nat
                                            (@bit0.{0} @nat @nat.has_add
                                              (@bit0.{0} @nat @nat.has_add
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@bit0.{0} @nat @nat.has_add
                                                    (@bit1.{0} @nat @nat.has_one
                                                      @nat.has_add
                                                      (@bit1.{0} @nat
                                                        @nat.has_one
                                                        @nat.has_add
                                                        (@has_one.one.{0} @nat
                                                          @nat.has_one)))))))))
                                        (@char.of_nat
                                          (@bit0.{0} @nat @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit0.{0} @nat @nat.has_add
                                                (@bit0.{0} @nat @nat.has_add
                                                  (@bit1.{0} @nat @nat.has_one
                                                    @nat.has_add
                                                    (@bit1.{0} @nat @nat.has_one
                                                      @nat.has_add
                                                      (@has_one.one.{0} @nat
                                                        @nat.has_one)))))))))
                                      (@char.of_nat
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit0.{0} @nat @nat.has_add
                                                  (@bit1.{0} @nat @nat.has_one
                                                    @nat.has_add
                                                    (@has_one.one.{0} @nat
                                                      @nat.has_one)))))))))
                                    (@char.of_nat
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit0.{0} @nat @nat.has_add
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@has_one.one.{0} @nat
                                                    @nat.has_one)))))))))
                                  (@char.of_nat
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit0.{0} @nat @nat.has_add
                                                (@has_one.one.{0} @nat
                                                  @nat.has_one)))))))))
                                (@char.of_nat
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit0.{0} @nat @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@bit0.{0} @nat @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@has_one.one.{0} @nat
                                                @nat.has_one)))))))))
                              (@char.of_nat
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit0.{0} @nat @nat.has_add
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@has_one.one.{0} @nat
                                              @nat.has_one)))))))))
                            (@char.of_nat
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit0.{0} @nat @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@has_one.one.{0} @nat
                                            @nat.has_one)))))))))
                          (@char.of_nat
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@has_one.one.{0} @nat
                                          @nat.has_one)))))))))
                        (@char.of_nat
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit0.{0} @nat @nat.has_add
                                      (@has_one.one.{0} @nat
                                        @nat.has_one)))))))))
                      (@char.of_nat
                        (@bit0.{0} @nat @nat.has_add
                          (@bit0.{0} @nat @nat.has_add
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@has_one.one.{0} @nat @nat.has_one)))))))))
                    (@char.of_nat
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit0.{0} @nat @nat.has_add
                          (@bit0.{0} @nat @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@has_one.one.{0} @nat @nat.has_one)))))))))
                  (@char.of_nat
                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit0.{0} @nat @nat.has_add
                          (@bit0.{0} @nat @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@has_one.one.{0} @nat @nat.has_one)))))))))
                @name.anonymous))) map_const_eq))
      (@sizeof.{0}
        (∀ {α : Type u} (x : f α),
        @eq.{v+1} (f α) (@has_map.map.{u v} f to_has_map α α (@id.{u+1} α) x) x)
        (@default_has_sizeof.{0}
          (∀ {α : Type u} (x : f α),
          @eq.{v+1} (f α) (@has_map.map.{u v} f to_has_map α α (@id.{u+1} α) x)
            x)) id_map))
    (@sizeof.{0}
      (∀ {α β γ : Type u} (g : (∀ (a : α), β)) (h : (∀ (a : β), γ)) (x : f α),
      @eq.{v+1} (f γ)
        (@has_map.map.{u v} (λ {α_0 : Type u}, f α_0) to_has_map α γ
          (@function.comp.{u+1 u+1 u+1} α β γ h g) x)
        (@has_map.map.{u v} f to_has_map β γ h
          (@has_map.map.{u v} f to_has_map α β g x)))
      (@default_has_sizeof.{0}
        (∀ {α β γ : Type u} (g : (∀ (a : α), β)) (h : (∀ (a : β), γ)) (x : f α),
        @eq.{v+1} (f γ)
          (@has_map.map.{u v} (λ {α_0 : Type u}, f α_0) to_has_map α γ
            (@function.comp.{u+1 u+1 u+1} α β γ h g) x)
          (@has_map.map.{u v} f to_has_map β γ h
            (@has_map.map.{u v} f to_has_map α β g x)))) map_comp)),0))"
err: "java.util.NoSuchElementException: key not found: functor"

mod: "DefMod(Definition(functor.has_sizeof_inst,Vector(Param(u), Param(v)),∀ (f : (∀ (a : Type u), Type v)),
@has_sizeof.{(max (u+1) v)+1} (@functor.{u v} f),λ (f : (∀ (a : Type u), Type v)),
@has_sizeof.mk.{(max (u+1) v)+1} (@functor.{u v} f) (@functor.sizeof.{u v} f),0))"
err: "provingground.interface.UnParsedException: could not parse expression @functor.sizeof.{u v}"

mod: "DefMod(Definition(applicative.sizeof,Vector(Param(u), Param(v)),∀ (f : (∀ (a : Type u), Type v)) (x : @applicative.{u v} f), @nat,λ (f : (∀ (a : Type u), Type v)),
@applicative.rec.{1 u v} f (λ (x : @applicative.{u v} f), @nat)
  (λ (to_functor : @functor.{u v} f) (to_has_pure : @has_pure.{u v} f)
    (to_has_seq : @has_seq.{u v} f) (to_has_seq_left : @has_seq_left.{u v} f)
    (to_has_seq_right : @has_seq_right.{u v} f)
    (seq_left_eq :
      @auto_param.{0}
        (∀ {α β : Type u} (a : f α) (b : f β),
        @eq.{v+1} (f α) (@has_seq_left.seq_left.{u v} f to_has_seq_left α β a b)
          (@has_seq.seq.{u v} f to_has_seq β α
            (@has_map.map.{u v} f (@functor.to_has_map.{u v} f to_functor) α
              (∀ (a_0 : β), α) (@function.const.{u+1 u+1} α β) a) b))
        (@name.mk_string
          (@string.str
            (@string.str
              (@string.str
                (@string.str
                  (@string.str
                    (@string.str
                      (@string.str
                        (@string.str
                          (@string.str
                            (@string.str
                              (@string.str
                                (@string.str
                                  (@string.str
                                    (@string.str
                                      (@string.str
                                        (@string.str @string.empty
                                          (@char.of_nat
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit0.{0} @nat @nat.has_add
                                                  (@bit0.{0} @nat @nat.has_add
                                                    (@bit0.{0} @nat @nat.has_add
                                                      (@bit1.{0} @nat
                                                        @nat.has_one
                                                        @nat.has_add
                                                        (@has_one.one.{0} @nat
                                                          @nat.has_one)))))))))
                                        (@char.of_nat
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@bit0.{0} @nat @nat.has_add
                                                    (@bit1.{0} @nat @nat.has_one
                                                      @nat.has_add
                                                      (@has_one.one.{0} @nat
                                                        @nat.has_one)))))))))
                                      (@char.of_nat
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit0.{0} @nat @nat.has_add
                                                  (@bit1.{0} @nat @nat.has_one
                                                    @nat.has_add
                                                    (@has_one.one.{0} @nat
                                                      @nat.has_one)))))))))
                                    (@char.of_nat
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit0.{0} @nat @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@has_one.one.{0} @nat
                                                    @nat.has_one)))))))))
                                  (@char.of_nat
                                    (@bit0.{0} @nat @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit0.{0} @nat @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@has_one.one.{0} @nat
                                                  @nat.has_one)))))))))
                                (@char.of_nat
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@bit0.{0} @nat @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@has_one.one.{0} @nat
                                                @nat.has_one)))))))))
                              (@char.of_nat
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@has_one.one.{0} @nat
                                              @nat.has_one)))))))))
                            (@char.of_nat
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@has_one.one.{0} @nat
                                            @nat.has_one)))))))))
                          (@char.of_nat
                            (@bit0.{0} @nat @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit0.{0} @nat @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@has_one.one.{0} @nat
                                          @nat.has_one)))))))))
                        (@char.of_nat
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@has_one.one.{0} @nat
                                        @nat.has_one)))))))))
                      (@char.of_nat
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@has_one.one.{0} @nat @nat.has_one)))))))))
                    (@char.of_nat
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit0.{0} @nat @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@has_one.one.{0} @nat @nat.has_one)))))))))
                  (@char.of_nat
                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@has_one.one.{0} @nat @nat.has_one)))))))))
                (@char.of_nat
                  (@bit0.{0} @nat @nat.has_add
                    (@bit0.{0} @nat @nat.has_add
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit0.{0} @nat @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@has_one.one.{0} @nat @nat.has_one)))))))))
              (@char.of_nat
                (@bit1.{0} @nat @nat.has_one @nat.has_add
                  (@bit0.{0} @nat @nat.has_add
                    (@bit0.{0} @nat @nat.has_add
                      (@bit0.{0} @nat @nat.has_add
                        (@bit0.{0} @nat @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@has_one.one.{0} @nat @nat.has_one)))))))))
            (@char.of_nat
              (@bit1.{0} @nat @nat.has_one @nat.has_add
                (@bit1.{0} @nat @nat.has_one @nat.has_add
                  (@bit0.{0} @nat @nat.has_add
                    (@bit0.{0} @nat @nat.has_add
                      (@bit0.{0} @nat @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@has_one.one.{0} @nat @nat.has_one)))))))))
          @name.anonymous))
    (seq_right_eq :
      @auto_param.{0}
        (∀ {α β : Type u} (a : f α) (b : f β),
        @eq.{v+1} (f β)
          (@has_seq_right.seq_right.{u v} f to_has_seq_right α β a b)
          (@has_seq.seq.{u v} f to_has_seq β β
            (@has_map.map.{u v} f (@functor.to_has_map.{u v} f to_functor) α
              (∀ (a_0 : β), β)
              (@function.const.{u+1 u+1} (∀ (a_0 : β), β) α (@id.{u+1} β)) a)
            b))
        (@name.mk_string
          (@string.str
            (@string.str
              (@string.str
                (@string.str
                  (@string.str
                    (@string.str
                      (@string.str
                        (@string.str
                          (@string.str
                            (@string.str
                              (@string.str
                                (@string.str
                                  (@string.str
                                    (@string.str
                                      (@string.str
                                        (@string.str @string.empty
                                          (@char.of_nat
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit0.{0} @nat @nat.has_add
                                                  (@bit0.{0} @nat @nat.has_add
                                                    (@bit0.{0} @nat @nat.has_add
                                                      (@bit1.{0} @nat
                                                        @nat.has_one
                                                        @nat.has_add
                                                        (@has_one.one.{0} @nat
                                                          @nat.has_one)))))))))
                                        (@char.of_nat
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@bit0.{0} @nat @nat.has_add
                                                    (@bit1.{0} @nat @nat.has_one
                                                      @nat.has_add
                                                      (@has_one.one.{0} @nat
                                                        @nat.has_one)))))))))
                                      (@char.of_nat
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit0.{0} @nat @nat.has_add
                                                  (@bit1.{0} @nat @nat.has_one
                                                    @nat.has_add
                                                    (@has_one.one.{0} @nat
                                                      @nat.has_one)))))))))
                                    (@char.of_nat
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit0.{0} @nat @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@has_one.one.{0} @nat
                                                    @nat.has_one)))))))))
                                  (@char.of_nat
                                    (@bit0.{0} @nat @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit0.{0} @nat @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@has_one.one.{0} @nat
                                                  @nat.has_one)))))))))
                                (@char.of_nat
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@bit0.{0} @nat @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@has_one.one.{0} @nat
                                                @nat.has_one)))))))))
                              (@char.of_nat
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@has_one.one.{0} @nat
                                              @nat.has_one)))))))))
                            (@char.of_nat
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@has_one.one.{0} @nat
                                            @nat.has_one)))))))))
                          (@char.of_nat
                            (@bit0.{0} @nat @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit0.{0} @nat @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@has_one.one.{0} @nat
                                          @nat.has_one)))))))))
                        (@char.of_nat
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@has_one.one.{0} @nat
                                        @nat.has_one)))))))))
                      (@char.of_nat
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@has_one.one.{0} @nat @nat.has_one)))))))))
                    (@char.of_nat
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit0.{0} @nat @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@has_one.one.{0} @nat @nat.has_one)))))))))
                  (@char.of_nat
                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@has_one.one.{0} @nat @nat.has_one)))))))))
                (@char.of_nat
                  (@bit0.{0} @nat @nat.has_add
                    (@bit0.{0} @nat @nat.has_add
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit0.{0} @nat @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@has_one.one.{0} @nat @nat.has_one)))))))))
              (@char.of_nat
                (@bit1.{0} @nat @nat.has_one @nat.has_add
                  (@bit0.{0} @nat @nat.has_add
                    (@bit0.{0} @nat @nat.has_add
                      (@bit0.{0} @nat @nat.has_add
                        (@bit0.{0} @nat @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@has_one.one.{0} @nat @nat.has_one)))))))))
            (@char.of_nat
              (@bit1.{0} @nat @nat.has_one @nat.has_add
                (@bit1.{0} @nat @nat.has_one @nat.has_add
                  (@bit0.{0} @nat @nat.has_add
                    (@bit0.{0} @nat @nat.has_add
                      (@bit0.{0} @nat @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@has_one.one.{0} @nat @nat.has_one)))))))))
          @name.anonymous))
    (pure_seq_eq_map :
      (∀ {α β : Type u} (g : (∀ (a : α), β)) (x : f α),
      @eq.{v+1} (f β)
        (@has_seq.seq.{u v} f to_has_seq α β
          (@has_pure.pure.{u v} f to_has_pure (∀ (a : α), β) g) x)
        (@has_map.map.{u v} f (@functor.to_has_map.{u v} f to_functor) α β g
          x)))
    (map_pure :
      (∀ {α β : Type u} (g : (∀ (a : α), β)) (x : α),
      @eq.{v+1} (f β)
        (@has_map.map.{u v} (λ {α_0 : Type u}, f α_0)
          (@functor.to_has_map.{u v} f to_functor) α β g
          (@has_pure.pure.{u v} f to_has_pure α x))
        (@has_pure.pure.{u v} f to_has_pure β (g x))))
    (seq_pure :
      (∀ {α β : Type u} (g : f (∀ (a : α), β)) (x : α),
      @eq.{v+1} (f β)
        (@has_seq.seq.{u v} f to_has_seq α β g
          (@has_pure.pure.{u v} f to_has_pure α x))
        (@has_map.map.{u v} f (@functor.to_has_map.{u v} f to_functor)
          (∀ (a : α), β) β (λ (g_0 : (∀ (a : α), β)), g_0 x) g)))
    (seq_assoc :
      (∀ {α β γ : Type u} (x : f α) (g : f (∀ (a : α), β))
        (h : f (∀ (a : β), γ)),
      @eq.{v+1} (f γ)
        (@has_seq.seq.{u v} f to_has_seq β γ h
          (@has_seq.seq.{u v} f to_has_seq α β g x))
        (@has_seq.seq.{u v} f to_has_seq α γ
          (@has_seq.seq.{u v} f to_has_seq (∀ (a : α), β) (∀ (a : α), γ)
            (@has_map.map.{u v} f (@functor.to_has_map.{u v} f to_functor)
              (∀ (a : β), γ) (∀ (a : (∀ (a_1 : α), β)) (a_0 : α), γ)
              (@function.comp.{u+1 u+1 u+1} α β γ) h) g) x))),
  @has_add.add.{0} @nat @nat.has_add
    (@has_add.add.{0} @nat @nat.has_add
      (@has_add.add.{0} @nat @nat.has_add
        (@has_add.add.{0} @nat @nat.has_add
          (@has_add.add.{0} @nat @nat.has_add
            (@has_add.add.{0} @nat @nat.has_add
              (@has_add.add.{0} @nat @nat.has_add
                (@has_add.add.{0} @nat @nat.has_add
                  (@has_add.add.{0} @nat @nat.has_add
                    (@has_add.add.{0} @nat @nat.has_add
                      (@has_add.add.{0} @nat @nat.has_add
                        (@has_one.one.{0} @nat @nat.has_one)
                        (@sizeof.{(max (u+1) v)+1} (@functor.{u v} f)
                          (@functor.has_sizeof_inst.{u v} f) to_functor))
                      (@sizeof.{max (u+2) (v+1)} (@has_pure.{u v} f)
                        (@has_pure.has_sizeof_inst.{u v} f) to_has_pure))
                    (@sizeof.{(max (u+1) v)+1} (@has_seq.{u v} f)
                      (@has_seq.has_sizeof_inst.{u v} f) to_has_seq))
                  (@sizeof.{(max (u+1) v)+1} (@has_seq_left.{u v} f)
                    (@has_seq_left.has_sizeof_inst.{u v} f) to_has_seq_left))
                (@sizeof.{(max (u+1) v)+1} (@has_seq_right.{u v} f)
                  (@has_seq_right.has_sizeof_inst.{u v} f) to_has_seq_right))
              (@sizeof.{0}
                (@auto_param.{0}
                  (∀ {α β : Type u} (a : f α) (b : f β),
                  @eq.{v+1} (f α)
                    (@has_seq_left.seq_left.{u v} f to_has_seq_left α β a b)
                    (@has_seq.seq.{u v} f to_has_seq β α
                      (@has_map.map.{u v} f
                        (@functor.to_has_map.{u v} f to_functor) α
                        (∀ (a_0 : β), α) (@function.const.{u+1 u+1} α β) a) b))
                  (@name.mk_string
                    (@string.str
                      (@string.str
                        (@string.str
                          (@string.str
                            (@string.str
                              (@string.str
                                (@string.str
                                  (@string.str
                                    (@string.str
                                      (@string.str
                                        (@string.str
                                          (@string.str
                                            (@string.str
                                              (@string.str
                                                (@string.str
                                                  (@string.str @string.empty
                                                    (@char.of_nat
                                                      (@bit1.{0} @nat
                                                        @nat.has_one
                                                        @nat.has_add
                                                        (@bit1.{0} @nat
                                                          @nat.has_one
                                                          @nat.has_add
                                                          (@bit0.{0} @nat
                                                            @nat.has_add
                                                            (@bit0.{0} @nat
                                                              @nat.has_add
                                                              (@bit0.{0} @nat
                                                                @nat.has_add
                                                                (@bit1.{0} @nat
                                                                  @nat.has_one
                                                                  @nat.has_add
                                                                  (@has_one.one.{0}
                                                                    @nat
                                                                    @nat.has_one)))))))))
                                                  (@char.of_nat
                                                    (@bit1.{0} @nat @nat.has_one
                                                      @nat.has_add
                                                      (@bit1.{0} @nat
                                                        @nat.has_one
                                                        @nat.has_add
                                                        (@bit1.{0} @nat
                                                          @nat.has_one
                                                          @nat.has_add
                                                          (@bit1.{0} @nat
                                                            @nat.has_one
                                                            @nat.has_add
                                                            (@bit0.{0} @nat
                                                              @nat.has_add
                                                              (@bit1.{0} @nat
                                                                @nat.has_one
                                                                @nat.has_add
                                                                (@has_one.one.{0}
                                                                  @nat
                                                                  @nat.has_one)))))))))
                                                (@char.of_nat
                                                  (@bit0.{0} @nat @nat.has_add
                                                    (@bit1.{0} @nat @nat.has_one
                                                      @nat.has_add
                                                      (@bit1.{0} @nat
                                                        @nat.has_one
                                                        @nat.has_add
                                                        (@bit1.{0} @nat
                                                          @nat.has_one
                                                          @nat.has_add
                                                          (@bit0.{0} @nat
                                                            @nat.has_add
                                                            (@bit1.{0} @nat
                                                              @nat.has_one
                                                              @nat.has_add
                                                              (@has_one.one.{0}
                                                                @nat
                                                                @nat.has_one)))))))))
                                              (@char.of_nat
                                                (@bit0.{0} @nat @nat.has_add
                                                  (@bit0.{0} @nat @nat.has_add
                                                    (@bit1.{0} @nat @nat.has_one
                                                      @nat.has_add
                                                      (@bit0.{0} @nat
                                                        @nat.has_add
                                                        (@bit1.{0} @nat
                                                          @nat.has_one
                                                          @nat.has_add
                                                          (@bit1.{0} @nat
                                                            @nat.has_one
                                                            @nat.has_add
                                                            (@has_one.one.{0}
                                                              @nat
                                                              @nat.has_one)))))))))
                                            (@char.of_nat
                                              (@bit0.{0} @nat @nat.has_add
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@bit0.{0} @nat @nat.has_add
                                                    (@bit0.{0} @nat @nat.has_add
                                                      (@bit1.{0} @nat
                                                        @nat.has_one
                                                        @nat.has_add
                                                        (@bit1.{0} @nat
                                                          @nat.has_one
                                                          @nat.has_add
                                                          (@has_one.one.{0} @nat
                                                            @nat.has_one)))))))))
                                          (@char.of_nat
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@bit1.{0} @nat @nat.has_one
                                                    @nat.has_add
                                                    (@bit0.{0} @nat @nat.has_add
                                                      (@bit1.{0} @nat
                                                        @nat.has_one
                                                        @nat.has_add
                                                        (@has_one.one.{0} @nat
                                                          @nat.has_one)))))))))
                                        (@char.of_nat
                                          (@bit0.{0} @nat @nat.has_add
                                            (@bit0.{0} @nat @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@bit0.{0} @nat @nat.has_add
                                                    (@bit1.{0} @nat @nat.has_one
                                                      @nat.has_add
                                                      (@has_one.one.{0} @nat
                                                        @nat.has_one)))))))))
                                      (@char.of_nat
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@bit0.{0} @nat @nat.has_add
                                                    (@has_one.one.{0} @nat
                                                      @nat.has_one)))))))))
                                    (@char.of_nat
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit0.{0} @nat @nat.has_add
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@has_one.one.{0} @nat
                                                    @nat.has_one)))))))))
                                  (@char.of_nat
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit0.{0} @nat @nat.has_add
                                            (@bit0.{0} @nat @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@has_one.one.{0} @nat
                                                  @nat.has_one)))))))))
                                (@char.of_nat
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@has_one.one.{0} @nat
                                                @nat.has_one)))))))))
                              (@char.of_nat
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit0.{0} @nat @nat.has_add
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@has_one.one.{0} @nat
                                              @nat.has_one)))))))))
                            (@char.of_nat
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@has_one.one.{0} @nat
                                            @nat.has_one)))))))))
                          (@char.of_nat
                            (@bit0.{0} @nat @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@has_one.one.{0} @nat
                                          @nat.has_one)))))))))
                        (@char.of_nat
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@has_one.one.{0} @nat
                                        @nat.has_one)))))))))
                      (@char.of_nat
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@has_one.one.{0} @nat @nat.has_one)))))))))
                    @name.anonymous))
                (@default_has_sizeof.{0}
                  (@auto_param.{0}
                    (∀ {α β : Type u} (a : f α) (b : f β),
                    @eq.{v+1} (f α)
                      (@has_seq_left.seq_left.{u v} f to_has_seq_left α β a b)
                      (@has_seq.seq.{u v} f to_has_seq β α
                        (@has_map.map.{u v} f
                          (@functor.to_has_map.{u v} f to_functor) α
                          (∀ (a_0 : β), α) (@function.const.{u+1 u+1} α β) a)
                        b))
                    (@name.mk_string
                      (@string.str
                        (@string.str
                          (@string.str
                            (@string.str
                              (@string.str
                                (@string.str
                                  (@string.str
                                    (@string.str
                                      (@string.str
                                        (@string.str
                                          (@string.str
                                            (@string.str
                                              (@string.str
                                                (@string.str
                                                  (@string.str
                                                    (@string.str @string.empty
                                                      (@char.of_nat
                                                        (@bit1.{0} @nat
                                                          @nat.has_one
                                                          @nat.has_add
                                                          (@bit1.{0} @nat
                                                            @nat.has_one
                                                            @nat.has_add
                                                            (@bit0.{0} @nat
                                                              @nat.has_add
                                                              (@bit0.{0} @nat
                                                                @nat.has_add
                                                                (@bit0.{0} @nat
                                                                  @nat.has_add
                                                                  (@bit1.{0}
                                                                    @nat
                                                                    @nat.has_one
                                                                    @nat.has_add
                                                                    (@has_one.one.{0}
                                                                      @nat
                                                                      @nat.has_one)))))))))
                                                    (@char.of_nat
                                                      (@bit1.{0} @nat
                                                        @nat.has_one
                                                        @nat.has_add
                                                        (@bit1.{0} @nat
                                                          @nat.has_one
                                                          @nat.has_add
                                                          (@bit1.{0} @nat
                                                            @nat.has_one
                                                            @nat.has_add
                                                            (@bit1.{0} @nat
                                                              @nat.has_one
                                                              @nat.has_add
                                                              (@bit0.{0} @nat
                                                                @nat.has_add
                                                                (@bit1.{0} @nat
                                                                  @nat.has_one
                                                                  @nat.has_add
                                                                  (@has_one.one.{0}
                                                                    @nat
                                                                    @nat.has_one)))))))))
                                                  (@char.of_nat
                                                    (@bit0.{0} @nat @nat.has_add
                                                      (@bit1.{0} @nat
                                                        @nat.has_one
                                                        @nat.has_add
                                                        (@bit1.{0} @nat
                                                          @nat.has_one
                                                          @nat.has_add
                                                          (@bit1.{0} @nat
                                                            @nat.has_one
                                                            @nat.has_add
                                                            (@bit0.{0} @nat
                                                              @nat.has_add
                                                              (@bit1.{0} @nat
                                                                @nat.has_one
                                                                @nat.has_add
                                                                (@has_one.one.{0}
                                                                  @nat
                                                                  @nat.has_one)))))))))
                                                (@char.of_nat
                                                  (@bit0.{0} @nat @nat.has_add
                                                    (@bit0.{0} @nat @nat.has_add
                                                      (@bit1.{0} @nat
                                                        @nat.has_one
                                                        @nat.has_add
                                                        (@bit0.{0} @nat
                                                          @nat.has_add
                                                          (@bit1.{0} @nat
                                                            @nat.has_one
                                                            @nat.has_add
                                                            (@bit1.{0} @nat
                                                              @nat.has_one
                                                              @nat.has_add
                                                              (@has_one.one.{0}
                                                                @nat
                                                                @nat.has_one)))))))))
                                              (@char.of_nat
                                                (@bit0.{0} @nat @nat.has_add
                                                  (@bit1.{0} @nat @nat.has_one
                                                    @nat.has_add
                                                    (@bit0.{0} @nat @nat.has_add
                                                      (@bit0.{0} @nat
                                                        @nat.has_add
                                                        (@bit1.{0} @nat
                                                          @nat.has_one
                                                          @nat.has_add
                                                          (@bit1.{0} @nat
                                                            @nat.has_one
                                                            @nat.has_add
                                                            (@has_one.one.{0}
                                                              @nat
                                                              @nat.has_one)))))))))
                                            (@char.of_nat
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@bit1.{0} @nat @nat.has_one
                                                    @nat.has_add
                                                    (@bit1.{0} @nat @nat.has_one
                                                      @nat.has_add
                                                      (@bit0.{0} @nat
                                                        @nat.has_add
                                                        (@bit1.{0} @nat
                                                          @nat.has_one
                                                          @nat.has_add
                                                          (@has_one.one.{0} @nat
                                                            @nat.has_one)))))))))
                                          (@char.of_nat
                                            (@bit0.{0} @nat @nat.has_add
                                              (@bit0.{0} @nat @nat.has_add
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@bit1.{0} @nat @nat.has_one
                                                    @nat.has_add
                                                    (@bit0.{0} @nat @nat.has_add
                                                      (@bit1.{0} @nat
                                                        @nat.has_one
                                                        @nat.has_add
                                                        (@has_one.one.{0} @nat
                                                          @nat.has_one)))))))))
                                        (@char.of_nat
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@bit1.{0} @nat @nat.has_one
                                                    @nat.has_add
                                                    (@bit0.{0} @nat @nat.has_add
                                                      (@has_one.one.{0} @nat
                                                        @nat.has_one)))))))))
                                      (@char.of_nat
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit0.{0} @nat @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit0.{0} @nat @nat.has_add
                                                  (@bit1.{0} @nat @nat.has_one
                                                    @nat.has_add
                                                    (@has_one.one.{0} @nat
                                                      @nat.has_one)))))))))
                                    (@char.of_nat
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit0.{0} @nat @nat.has_add
                                            (@bit0.{0} @nat @nat.has_add
                                              (@bit0.{0} @nat @nat.has_add
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@has_one.one.{0} @nat
                                                    @nat.has_one)))))))))
                                  (@char.of_nat
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@bit0.{0} @nat @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@has_one.one.{0} @nat
                                                  @nat.has_one)))))))))
                                (@char.of_nat
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@has_one.one.{0} @nat
                                                @nat.has_one)))))))))
                              (@char.of_nat
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@bit0.{0} @nat @nat.has_add
                                            (@has_one.one.{0} @nat
                                              @nat.has_one)))))))))
                            (@char.of_nat
                              (@bit0.{0} @nat @nat.has_add
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit0.{0} @nat @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@has_one.one.{0} @nat
                                            @nat.has_one)))))))))
                          (@char.of_nat
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit0.{0} @nat @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@has_one.one.{0} @nat
                                          @nat.has_one)))))))))
                        (@char.of_nat
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@has_one.one.{0} @nat
                                        @nat.has_one))))))))) @name.anonymous)))
                seq_left_eq))
            (@sizeof.{0}
              (@auto_param.{0}
                (∀ {α β : Type u} (a : f α) (b : f β),
                @eq.{v+1} (f β)
                  (@has_seq_right.seq_right.{u v} f to_has_seq_right α β a b)
                  (@has_seq.seq.{u v} f to_has_seq β β
                    (@has_map.map.{u v} f
                      (@functor.to_has_map.{u v} f to_functor) α
                      (∀ (a_0 : β), β)
                      (@function.const.{u+1 u+1} (∀ (a_0 : β), β) α
                        (@id.{u+1} β)) a) b))
                (@name.mk_string
                  (@string.str
                    (@string.str
                      (@string.str
                        (@string.str
                          (@string.str
                            (@string.str
                              (@string.str
                                (@string.str
                                  (@string.str
                                    (@string.str
                                      (@string.str
                                        (@string.str
                                          (@string.str
                                            (@string.str
                                              (@string.str
                                                (@string.str @string.empty
                                                  (@char.of_nat
                                                    (@bit1.{0} @nat @nat.has_one
                                                      @nat.has_add
                                                      (@bit1.{0} @nat
                                                        @nat.has_one
                                                        @nat.has_add
                                                        (@bit0.{0} @nat
                                                          @nat.has_add
                                                          (@bit0.{0} @nat
                                                            @nat.has_add
                                                            (@bit0.{0} @nat
                                                              @nat.has_add
                                                              (@bit1.{0} @nat
                                                                @nat.has_one
                                                                @nat.has_add
                                                                (@has_one.one.{0}
                                                                  @nat
                                                                  @nat.has_one)))))))))
                                                (@char.of_nat
                                                  (@bit1.{0} @nat @nat.has_one
                                                    @nat.has_add
                                                    (@bit1.{0} @nat @nat.has_one
                                                      @nat.has_add
                                                      (@bit1.{0} @nat
                                                        @nat.has_one
                                                        @nat.has_add
                                                        (@bit1.{0} @nat
                                                          @nat.has_one
                                                          @nat.has_add
                                                          (@bit0.{0} @nat
                                                            @nat.has_add
                                                            (@bit1.{0} @nat
                                                              @nat.has_one
                                                              @nat.has_add
                                                              (@has_one.one.{0}
                                                                @nat
                                                                @nat.has_one)))))))))
                                              (@char.of_nat
                                                (@bit0.{0} @nat @nat.has_add
                                                  (@bit1.{0} @nat @nat.has_one
                                                    @nat.has_add
                                                    (@bit1.{0} @nat @nat.has_one
                                                      @nat.has_add
                                                      (@bit1.{0} @nat
                                                        @nat.has_one
                                                        @nat.has_add
                                                        (@bit0.{0} @nat
                                                          @nat.has_add
                                                          (@bit1.{0} @nat
                                                            @nat.has_one
                                                            @nat.has_add
                                                            (@has_one.one.{0}
                                                              @nat
                                                              @nat.has_one)))))))))
                                            (@char.of_nat
                                              (@bit0.{0} @nat @nat.has_add
                                                (@bit0.{0} @nat @nat.has_add
                                                  (@bit1.{0} @nat @nat.has_one
                                                    @nat.has_add
                                                    (@bit0.{0} @nat @nat.has_add
                                                      (@bit1.{0} @nat
                                                        @nat.has_one
                                                        @nat.has_add
                                                        (@bit1.{0} @nat
                                                          @nat.has_one
                                                          @nat.has_add
                                                          (@has_one.one.{0} @nat
                                                            @nat.has_one)))))))))
                                          (@char.of_nat
                                            (@bit0.{0} @nat @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit0.{0} @nat @nat.has_add
                                                  (@bit0.{0} @nat @nat.has_add
                                                    (@bit1.{0} @nat @nat.has_one
                                                      @nat.has_add
                                                      (@bit1.{0} @nat
                                                        @nat.has_one
                                                        @nat.has_add
                                                        (@has_one.one.{0} @nat
                                                          @nat.has_one)))))))))
                                        (@char.of_nat
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@bit0.{0} @nat @nat.has_add
                                                    (@bit1.{0} @nat @nat.has_one
                                                      @nat.has_add
                                                      (@has_one.one.{0} @nat
                                                        @nat.has_one)))))))))
                                      (@char.of_nat
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit0.{0} @nat @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit0.{0} @nat @nat.has_add
                                                  (@bit1.{0} @nat @nat.has_one
                                                    @nat.has_add
                                                    (@has_one.one.{0} @nat
                                                      @nat.has_one)))))))))
                                    (@char.of_nat
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit0.{0} @nat @nat.has_add
                                                  (@has_one.one.{0} @nat
                                                    @nat.has_one)))))))))
                                  (@char.of_nat
                                    (@bit0.{0} @nat @nat.has_add
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit0.{0} @nat @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@has_one.one.{0} @nat
                                                  @nat.has_one)))))))))
                                (@char.of_nat
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit0.{0} @nat @nat.has_add
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit0.{0} @nat @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@has_one.one.{0} @nat
                                                @nat.has_one)))))))))
                              (@char.of_nat
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@has_one.one.{0} @nat
                                              @nat.has_one)))))))))
                            (@char.of_nat
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit0.{0} @nat @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@has_one.one.{0} @nat
                                            @nat.has_one)))))))))
                          (@char.of_nat
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit0.{0} @nat @nat.has_add
                                        (@has_one.one.{0} @nat
                                          @nat.has_one)))))))))
                        (@char.of_nat
                          (@bit0.{0} @nat @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@has_one.one.{0} @nat
                                        @nat.has_one)))))))))
                      (@char.of_nat
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit0.{0} @nat @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@has_one.one.{0} @nat @nat.has_one)))))))))
                    (@char.of_nat
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit0.{0} @nat @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@has_one.one.{0} @nat @nat.has_one)))))))))
                  @name.anonymous))
              (@default_has_sizeof.{0}
                (@auto_param.{0}
                  (∀ {α β : Type u} (a : f α) (b : f β),
                  @eq.{v+1} (f β)
                    (@has_seq_right.seq_right.{u v} f to_has_seq_right α β a b)
                    (@has_seq.seq.{u v} f to_has_seq β β
                      (@has_map.map.{u v} f
                        (@functor.to_has_map.{u v} f to_functor) α
                        (∀ (a_0 : β), β)
                        (@function.const.{u+1 u+1} (∀ (a_0 : β), β) α
                          (@id.{u+1} β)) a) b))
                  (@name.mk_string
                    (@string.str
                      (@string.str
                        (@string.str
                          (@string.str
                            (@string.str
                              (@string.str
                                (@string.str
                                  (@string.str
                                    (@string.str
                                      (@string.str
                                        (@string.str
                                          (@string.str
                                            (@string.str
                                              (@string.str
                                                (@string.str
                                                  (@string.str @string.empty
                                                    (@char.of_nat
                                                      (@bit1.{0} @nat
                                                        @nat.has_one
                                                        @nat.has_add
                                                        (@bit1.{0} @nat
                                                          @nat.has_one
                                                          @nat.has_add
                                                          (@bit0.{0} @nat
                                                            @nat.has_add
                                                            (@bit0.{0} @nat
                                                              @nat.has_add
                                                              (@bit0.{0} @nat
                                                                @nat.has_add
                                                                (@bit1.{0} @nat
                                                                  @nat.has_one
                                                                  @nat.has_add
                                                                  (@has_one.one.{0}
                                                                    @nat
                                                                    @nat.has_one)))))))))
                                                  (@char.of_nat
                                                    (@bit1.{0} @nat @nat.has_one
                                                      @nat.has_add
                                                      (@bit1.{0} @nat
                                                        @nat.has_one
                                                        @nat.has_add
                                                        (@bit1.{0} @nat
                                                          @nat.has_one
                                                          @nat.has_add
                                                          (@bit1.{0} @nat
                                                            @nat.has_one
                                                            @nat.has_add
                                                            (@bit0.{0} @nat
                                                              @nat.has_add
                                                              (@bit1.{0} @nat
                                                                @nat.has_one
                                                                @nat.has_add
                                                                (@has_one.one.{0}
                                                                  @nat
                                                                  @nat.has_one)))))))))
                                                (@char.of_nat
                                                  (@bit0.{0} @nat @nat.has_add
                                                    (@bit1.{0} @nat @nat.has_one
                                                      @nat.has_add
                                                      (@bit1.{0} @nat
                                                        @nat.has_one
                                                        @nat.has_add
                                                        (@bit1.{0} @nat
                                                          @nat.has_one
                                                          @nat.has_add
                                                          (@bit0.{0} @nat
                                                            @nat.has_add
                                                            (@bit1.{0} @nat
                                                              @nat.has_one
                                                              @nat.has_add
                                                              (@has_one.one.{0}
                                                                @nat
                                                                @nat.has_one)))))))))
                                              (@char.of_nat
                                                (@bit0.{0} @nat @nat.has_add
                                                  (@bit0.{0} @nat @nat.has_add
                                                    (@bit1.{0} @nat @nat.has_one
                                                      @nat.has_add
                                                      (@bit0.{0} @nat
                                                        @nat.has_add
                                                        (@bit1.{0} @nat
                                                          @nat.has_one
                                                          @nat.has_add
                                                          (@bit1.{0} @nat
                                                            @nat.has_one
                                                            @nat.has_add
                                                            (@has_one.one.{0}
                                                              @nat
                                                              @nat.has_one)))))))))
                                            (@char.of_nat
                                              (@bit0.{0} @nat @nat.has_add
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@bit0.{0} @nat @nat.has_add
                                                    (@bit0.{0} @nat @nat.has_add
                                                      (@bit1.{0} @nat
                                                        @nat.has_one
                                                        @nat.has_add
                                                        (@bit1.{0} @nat
                                                          @nat.has_one
                                                          @nat.has_add
                                                          (@has_one.one.{0} @nat
                                                            @nat.has_one)))))))))
                                          (@char.of_nat
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@bit1.{0} @nat @nat.has_one
                                                    @nat.has_add
                                                    (@bit0.{0} @nat @nat.has_add
                                                      (@bit1.{0} @nat
                                                        @nat.has_one
                                                        @nat.has_add
                                                        (@has_one.one.{0} @nat
                                                          @nat.has_one)))))))))
                                        (@char.of_nat
                                          (@bit0.{0} @nat @nat.has_add
                                            (@bit0.{0} @nat @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@bit0.{0} @nat @nat.has_add
                                                    (@bit1.{0} @nat @nat.has_one
                                                      @nat.has_add
                                                      (@has_one.one.{0} @nat
                                                        @nat.has_one)))))))))
                                      (@char.of_nat
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@bit0.{0} @nat @nat.has_add
                                                    (@has_one.one.{0} @nat
                                                      @nat.has_one)))))))))
                                    (@char.of_nat
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit0.{0} @nat @nat.has_add
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@has_one.one.{0} @nat
                                                    @nat.has_one)))))))))
                                  (@char.of_nat
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit0.{0} @nat @nat.has_add
                                            (@bit0.{0} @nat @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@has_one.one.{0} @nat
                                                  @nat.has_one)))))))))
                                (@char.of_nat
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@has_one.one.{0} @nat
                                                @nat.has_one)))))))))
                              (@char.of_nat
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit0.{0} @nat @nat.has_add
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@has_one.one.{0} @nat
                                              @nat.has_one)))))))))
                            (@char.of_nat
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@has_one.one.{0} @nat
                                            @nat.has_one)))))))))
                          (@char.of_nat
                            (@bit0.{0} @nat @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@has_one.one.{0} @nat
                                          @nat.has_one)))))))))
                        (@char.of_nat
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@has_one.one.{0} @nat
                                        @nat.has_one)))))))))
                      (@char.of_nat
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@has_one.one.{0} @nat @nat.has_one)))))))))
                    @name.anonymous))) seq_right_eq))
          (@sizeof.{0}
            (∀ {α β : Type u} (g : (∀ (a : α), β)) (x : f α),
            @eq.{v+1} (f β)
              (@has_seq.seq.{u v} f to_has_seq α β
                (@has_pure.pure.{u v} f to_has_pure (∀ (a : α), β) g) x)
              (@has_map.map.{u v} f (@functor.to_has_map.{u v} f to_functor) α β
                g x))
            (@default_has_sizeof.{0}
              (∀ {α β : Type u} (g : (∀ (a : α), β)) (x : f α),
              @eq.{v+1} (f β)
                (@has_seq.seq.{u v} f to_has_seq α β
                  (@has_pure.pure.{u v} f to_has_pure (∀ (a : α), β) g) x)
                (@has_map.map.{u v} f (@functor.to_has_map.{u v} f to_functor) α
                  β g x))) pure_seq_eq_map))
        (@sizeof.{0}
          (∀ {α β : Type u} (g : (∀ (a : α), β)) (x : α),
          @eq.{v+1} (f β)
            (@has_map.map.{u v} (λ {α_0 : Type u}, f α_0)
              (@functor.to_has_map.{u v} f to_functor) α β g
              (@has_pure.pure.{u v} f to_has_pure α x))
            (@has_pure.pure.{u v} f to_has_pure β (g x)))
          (@default_has_sizeof.{0}
            (∀ {α β : Type u} (g : (∀ (a : α), β)) (x : α),
            @eq.{v+1} (f β)
              (@has_map.map.{u v} (λ {α_0 : Type u}, f α_0)
                (@functor.to_has_map.{u v} f to_functor) α β g
                (@has_pure.pure.{u v} f to_has_pure α x))
              (@has_pure.pure.{u v} f to_has_pure β (g x)))) map_pure))
      (@sizeof.{0}
        (∀ {α β : Type u} (g : f (∀ (a : α), β)) (x : α),
        @eq.{v+1} (f β)
          (@has_seq.seq.{u v} f to_has_seq α β g
            (@has_pure.pure.{u v} f to_has_pure α x))
          (@has_map.map.{u v} f (@functor.to_has_map.{u v} f to_functor)
            (∀ (a : α), β) β (λ (g_0 : (∀ (a : α), β)), g_0 x) g))
        (@default_has_sizeof.{0}
          (∀ {α β : Type u} (g : f (∀ (a : α), β)) (x : α),
          @eq.{v+1} (f β)
            (@has_seq.seq.{u v} f to_has_seq α β g
              (@has_pure.pure.{u v} f to_has_pure α x))
            (@has_map.map.{u v} f (@functor.to_has_map.{u v} f to_functor)
              (∀ (a : α), β) β (λ (g_0 : (∀ (a : α), β)), g_0 x) g))) seq_pure))
    (@sizeof.{0}
      (∀ {α β γ : Type u} (x : f α) (g : f (∀ (a : α), β))
        (h : f (∀ (a : β), γ)),
      @eq.{v+1} (f γ)
        (@has_seq.seq.{u v} f to_has_seq β γ h
          (@has_seq.seq.{u v} f to_has_seq α β g x))
        (@has_seq.seq.{u v} f to_has_seq α γ
          (@has_seq.seq.{u v} f to_has_seq (∀ (a : α), β) (∀ (a : α), γ)
            (@has_map.map.{u v} f (@functor.to_has_map.{u v} f to_functor)
              (∀ (a : β), γ) (∀ (a : (∀ (a_1 : α), β)) (a_0 : α), γ)
              (@function.comp.{u+1 u+1 u+1} α β γ) h) g) x))
      (@default_has_sizeof.{0}
        (∀ {α β γ : Type u} (x : f α) (g : f (∀ (a : α), β))
          (h : f (∀ (a : β), γ)),
        @eq.{v+1} (f γ)
          (@has_seq.seq.{u v} f to_has_seq β γ h
            (@has_seq.seq.{u v} f to_has_seq α β g x))
          (@has_seq.seq.{u v} f to_has_seq α γ
            (@has_seq.seq.{u v} f to_has_seq (∀ (a : α), β) (∀ (a : α), γ)
              (@has_map.map.{u v} f (@functor.to_has_map.{u v} f to_functor)
                (∀ (a : β), γ) (∀ (a : (∀ (a_1 : α), β)) (a_0 : α), γ)
                (@function.comp.{u+1 u+1 u+1} α β γ) h) g) x))) seq_assoc)),0))"
err: "java.util.NoSuchElementException: key not found: applicative"

mod: "DefMod(Definition(applicative.has_sizeof_inst,Vector(Param(u), Param(v)),∀ (f : (∀ (a : Type u), Type v)),
@has_sizeof.{max (u+2) (v+1)} (@applicative.{u v} f),λ (f : (∀ (a : Type u), Type v)),
@has_sizeof.mk.{max (u+2) (v+1)} (@applicative.{u v} f)
  (@applicative.sizeof.{u v} f),0))"
err: "provingground.interface.UnParsedException: could not parse expression @applicative.sizeof.{u v}"

mod: "DefMod(Definition(monad.sizeof,Vector(Param(u), Param(v)),∀ (m : (∀ (a : Type u), Type v)) (x : @monad.{u v} m), @nat,λ (m : (∀ (a : Type u), Type v)),
@monad.rec.{1 u v} m (λ (x : @monad.{u v} m), @nat)
  (λ (to_applicative : @applicative.{u v} m) (to_has_bind : @has_bind.{u v} m)
    (bind_pure_comp_eq_map :
      @auto_param.{0}
        (∀ {α β : Type u} (f : (∀ (a : α), β)) (x : m α),
        @eq.{v+1} (m β)
          (@has_bind.bind.{u v} m to_has_bind α β x
            (@function.comp.{u+1 u+1 v+1} α β (m β)
              (@has_pure.pure.{u v} m
                (@applicative.to_has_pure.{u v} m to_applicative) β) f))
          (@has_map.map.{u v} m
            (@functor.to_has_map.{u v} m
              (@applicative.to_functor.{u v} m to_applicative)) α β f x))
        (@name.mk_string
          (@string.str
            (@string.str
              (@string.str
                (@string.str
                  (@string.str
                    (@string.str
                      (@string.str
                        (@string.str
                          (@string.str
                            (@string.str
                              (@string.str
                                (@string.str
                                  (@string.str
                                    (@string.str
                                      (@string.str
                                        (@string.str @string.empty
                                          (@char.of_nat
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit0.{0} @nat @nat.has_add
                                                  (@bit0.{0} @nat @nat.has_add
                                                    (@bit0.{0} @nat @nat.has_add
                                                      (@bit1.{0} @nat
                                                        @nat.has_one
                                                        @nat.has_add
                                                        (@has_one.one.{0} @nat
                                                          @nat.has_one)))))))))
                                        (@char.of_nat
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@bit0.{0} @nat @nat.has_add
                                                    (@bit1.{0} @nat @nat.has_one
                                                      @nat.has_add
                                                      (@has_one.one.{0} @nat
                                                        @nat.has_one)))))))))
                                      (@char.of_nat
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit0.{0} @nat @nat.has_add
                                                  (@bit1.{0} @nat @nat.has_one
                                                    @nat.has_add
                                                    (@has_one.one.{0} @nat
                                                      @nat.has_one)))))))))
                                    (@char.of_nat
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit0.{0} @nat @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@has_one.one.{0} @nat
                                                    @nat.has_one)))))))))
                                  (@char.of_nat
                                    (@bit0.{0} @nat @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit0.{0} @nat @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@has_one.one.{0} @nat
                                                  @nat.has_one)))))))))
                                (@char.of_nat
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@bit0.{0} @nat @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@has_one.one.{0} @nat
                                                @nat.has_one)))))))))
                              (@char.of_nat
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@has_one.one.{0} @nat
                                              @nat.has_one)))))))))
                            (@char.of_nat
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@has_one.one.{0} @nat
                                            @nat.has_one)))))))))
                          (@char.of_nat
                            (@bit0.{0} @nat @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit0.{0} @nat @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@has_one.one.{0} @nat
                                          @nat.has_one)))))))))
                        (@char.of_nat
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@has_one.one.{0} @nat
                                        @nat.has_one)))))))))
                      (@char.of_nat
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@has_one.one.{0} @nat @nat.has_one)))))))))
                    (@char.of_nat
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit0.{0} @nat @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@has_one.one.{0} @nat @nat.has_one)))))))))
                  (@char.of_nat
                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@has_one.one.{0} @nat @nat.has_one)))))))))
                (@char.of_nat
                  (@bit0.{0} @nat @nat.has_add
                    (@bit0.{0} @nat @nat.has_add
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit0.{0} @nat @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@has_one.one.{0} @nat @nat.has_one)))))))))
              (@char.of_nat
                (@bit1.{0} @nat @nat.has_one @nat.has_add
                  (@bit0.{0} @nat @nat.has_add
                    (@bit0.{0} @nat @nat.has_add
                      (@bit0.{0} @nat @nat.has_add
                        (@bit0.{0} @nat @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@has_one.one.{0} @nat @nat.has_one)))))))))
            (@char.of_nat
              (@bit1.{0} @nat @nat.has_one @nat.has_add
                (@bit1.{0} @nat @nat.has_one @nat.has_add
                  (@bit0.{0} @nat @nat.has_add
                    (@bit0.{0} @nat @nat.has_add
                      (@bit0.{0} @nat @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@has_one.one.{0} @nat @nat.has_one)))))))))
          @name.anonymous))
    (bind_map_eq_seq :
      @auto_param.{0}
        (∀ {α β : Type u} (f : m (∀ (a : α), β)) (x : m α),
        @eq.{v+1} (m β)
          (@has_bind.bind.{u v} m to_has_bind (∀ (a : α), β) β f
            (λ (x_0 : (∀ (a : α), β)),
            @has_map.map.{u v} m
              (@functor.to_has_map.{u v} m
                (@applicative.to_functor.{u v} m to_applicative)) α β x_0 x))
          (@has_seq.seq.{u v} m (@applicative.to_has_seq.{u v} m to_applicative)
            α β f x))
        (@name.mk_string
          (@string.str
            (@string.str
              (@string.str
                (@string.str
                  (@string.str
                    (@string.str
                      (@string.str
                        (@string.str
                          (@string.str
                            (@string.str
                              (@string.str
                                (@string.str
                                  (@string.str
                                    (@string.str
                                      (@string.str
                                        (@string.str @string.empty
                                          (@char.of_nat
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit0.{0} @nat @nat.has_add
                                                  (@bit0.{0} @nat @nat.has_add
                                                    (@bit0.{0} @nat @nat.has_add
                                                      (@bit1.{0} @nat
                                                        @nat.has_one
                                                        @nat.has_add
                                                        (@has_one.one.{0} @nat
                                                          @nat.has_one)))))))))
                                        (@char.of_nat
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@bit0.{0} @nat @nat.has_add
                                                    (@bit1.{0} @nat @nat.has_one
                                                      @nat.has_add
                                                      (@has_one.one.{0} @nat
                                                        @nat.has_one)))))))))
                                      (@char.of_nat
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit0.{0} @nat @nat.has_add
                                                  (@bit1.{0} @nat @nat.has_one
                                                    @nat.has_add
                                                    (@has_one.one.{0} @nat
                                                      @nat.has_one)))))))))
                                    (@char.of_nat
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit0.{0} @nat @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@has_one.one.{0} @nat
                                                    @nat.has_one)))))))))
                                  (@char.of_nat
                                    (@bit0.{0} @nat @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit0.{0} @nat @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@has_one.one.{0} @nat
                                                  @nat.has_one)))))))))
                                (@char.of_nat
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@bit0.{0} @nat @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@has_one.one.{0} @nat
                                                @nat.has_one)))))))))
                              (@char.of_nat
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@has_one.one.{0} @nat
                                              @nat.has_one)))))))))
                            (@char.of_nat
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@has_one.one.{0} @nat
                                            @nat.has_one)))))))))
                          (@char.of_nat
                            (@bit0.{0} @nat @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit0.{0} @nat @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@has_one.one.{0} @nat
                                          @nat.has_one)))))))))
                        (@char.of_nat
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@has_one.one.{0} @nat
                                        @nat.has_one)))))))))
                      (@char.of_nat
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@has_one.one.{0} @nat @nat.has_one)))))))))
                    (@char.of_nat
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit0.{0} @nat @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@has_one.one.{0} @nat @nat.has_one)))))))))
                  (@char.of_nat
                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@has_one.one.{0} @nat @nat.has_one)))))))))
                (@char.of_nat
                  (@bit0.{0} @nat @nat.has_add
                    (@bit0.{0} @nat @nat.has_add
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit0.{0} @nat @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@has_one.one.{0} @nat @nat.has_one)))))))))
              (@char.of_nat
                (@bit1.{0} @nat @nat.has_one @nat.has_add
                  (@bit0.{0} @nat @nat.has_add
                    (@bit0.{0} @nat @nat.has_add
                      (@bit0.{0} @nat @nat.has_add
                        (@bit0.{0} @nat @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@has_one.one.{0} @nat @nat.has_one)))))))))
            (@char.of_nat
              (@bit1.{0} @nat @nat.has_one @nat.has_add
                (@bit1.{0} @nat @nat.has_one @nat.has_add
                  (@bit0.{0} @nat @nat.has_add
                    (@bit0.{0} @nat @nat.has_add
                      (@bit0.{0} @nat @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@has_one.one.{0} @nat @nat.has_one)))))))))
          @name.anonymous))
    (pure_bind :
      (∀ {α β : Type u} (x : α) (f : (∀ (a : α), m β)),
      @eq.{v+1} (m β)
        (@has_bind.bind.{u v} m to_has_bind α β
          (@has_pure.pure.{u v} m
            (@applicative.to_has_pure.{u v} m to_applicative) α x) f) (f x)))
    (bind_assoc :
      (∀ {α β γ : Type u} (x : m α) (f : (∀ (a : α), m β))
        (g : (∀ (a : β), m γ)),
      @eq.{v+1} (m γ)
        (@has_bind.bind.{u v} m to_has_bind β γ
          (@has_bind.bind.{u v} m to_has_bind α β x f) g)
        (@has_bind.bind.{u v} m to_has_bind α γ x
          (λ (x_0 : α), @has_bind.bind.{u v} m to_has_bind β γ (f x_0) g)))),
  @has_add.add.{0} @nat @nat.has_add
    (@has_add.add.{0} @nat @nat.has_add
      (@has_add.add.{0} @nat @nat.has_add
        (@has_add.add.{0} @nat @nat.has_add
          (@has_add.add.{0} @nat @nat.has_add
            (@has_add.add.{0} @nat @nat.has_add
              (@has_one.one.{0} @nat @nat.has_one)
              (@sizeof.{max (u+2) (v+1)} (@applicative.{u v} m)
                (@applicative.has_sizeof_inst.{u v} m) to_applicative))
            (@sizeof.{max (u+2) (v+1)} (@has_bind.{u v} m)
              (@has_bind.has_sizeof_inst.{u v} m) to_has_bind))
          (@sizeof.{0}
            (@auto_param.{0}
              (∀ {α β : Type u} (f : (∀ (a : α), β)) (x : m α),
              @eq.{v+1} (m β)
                (@has_bind.bind.{u v} m to_has_bind α β x
                  (@function.comp.{u+1 u+1 v+1} α β (m β)
                    (@has_pure.pure.{u v} m
                      (@applicative.to_has_pure.{u v} m to_applicative) β) f))
                (@has_map.map.{u v} m
                  (@functor.to_has_map.{u v} m
                    (@applicative.to_functor.{u v} m to_applicative)) α β f x))
              (@name.mk_string
                (@string.str
                  (@string.str
                    (@string.str
                      (@string.str
                        (@string.str
                          (@string.str
                            (@string.str
                              (@string.str
                                (@string.str
                                  (@string.str
                                    (@string.str
                                      (@string.str
                                        (@string.str
                                          (@string.str
                                            (@string.str
                                              (@string.str @string.empty
                                                (@char.of_nat
                                                  (@bit1.{0} @nat @nat.has_one
                                                    @nat.has_add
                                                    (@bit1.{0} @nat @nat.has_one
                                                      @nat.has_add
                                                      (@bit0.{0} @nat
                                                        @nat.has_add
                                                        (@bit0.{0} @nat
                                                          @nat.has_add
                                                          (@bit0.{0} @nat
                                                            @nat.has_add
                                                            (@bit1.{0} @nat
                                                              @nat.has_one
                                                              @nat.has_add
                                                              (@has_one.one.{0}
                                                                @nat
                                                                @nat.has_one)))))))))
                                              (@char.of_nat
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@bit1.{0} @nat @nat.has_one
                                                    @nat.has_add
                                                    (@bit1.{0} @nat @nat.has_one
                                                      @nat.has_add
                                                      (@bit1.{0} @nat
                                                        @nat.has_one
                                                        @nat.has_add
                                                        (@bit0.{0} @nat
                                                          @nat.has_add
                                                          (@bit1.{0} @nat
                                                            @nat.has_one
                                                            @nat.has_add
                                                            (@has_one.one.{0}
                                                              @nat
                                                              @nat.has_one)))))))))
                                            (@char.of_nat
                                              (@bit0.{0} @nat @nat.has_add
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@bit1.{0} @nat @nat.has_one
                                                    @nat.has_add
                                                    (@bit1.{0} @nat @nat.has_one
                                                      @nat.has_add
                                                      (@bit0.{0} @nat
                                                        @nat.has_add
                                                        (@bit1.{0} @nat
                                                          @nat.has_one
                                                          @nat.has_add
                                                          (@has_one.one.{0} @nat
                                                            @nat.has_one)))))))))
                                          (@char.of_nat
                                            (@bit0.{0} @nat @nat.has_add
                                              (@bit0.{0} @nat @nat.has_add
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@bit0.{0} @nat @nat.has_add
                                                    (@bit1.{0} @nat @nat.has_one
                                                      @nat.has_add
                                                      (@bit1.{0} @nat
                                                        @nat.has_one
                                                        @nat.has_add
                                                        (@has_one.one.{0} @nat
                                                          @nat.has_one)))))))))
                                        (@char.of_nat
                                          (@bit0.{0} @nat @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit0.{0} @nat @nat.has_add
                                                (@bit0.{0} @nat @nat.has_add
                                                  (@bit1.{0} @nat @nat.has_one
                                                    @nat.has_add
                                                    (@bit1.{0} @nat @nat.has_one
                                                      @nat.has_add
                                                      (@has_one.one.{0} @nat
                                                        @nat.has_one)))))))))
                                      (@char.of_nat
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit0.{0} @nat @nat.has_add
                                                  (@bit1.{0} @nat @nat.has_one
                                                    @nat.has_add
                                                    (@has_one.one.{0} @nat
                                                      @nat.has_one)))))))))
                                    (@char.of_nat
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit0.{0} @nat @nat.has_add
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@has_one.one.{0} @nat
                                                    @nat.has_one)))))))))
                                  (@char.of_nat
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit0.{0} @nat @nat.has_add
                                                (@has_one.one.{0} @nat
                                                  @nat.has_one)))))))))
                                (@char.of_nat
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit0.{0} @nat @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@bit0.{0} @nat @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@has_one.one.{0} @nat
                                                @nat.has_one)))))))))
                              (@char.of_nat
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit0.{0} @nat @nat.has_add
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@has_one.one.{0} @nat
                                              @nat.has_one)))))))))
                            (@char.of_nat
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit0.{0} @nat @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@has_one.one.{0} @nat
                                            @nat.has_one)))))))))
                          (@char.of_nat
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@has_one.one.{0} @nat
                                          @nat.has_one)))))))))
                        (@char.of_nat
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit0.{0} @nat @nat.has_add
                                      (@has_one.one.{0} @nat
                                        @nat.has_one)))))))))
                      (@char.of_nat
                        (@bit0.{0} @nat @nat.has_add
                          (@bit0.{0} @nat @nat.has_add
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@has_one.one.{0} @nat @nat.has_one)))))))))
                    (@char.of_nat
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit0.{0} @nat @nat.has_add
                          (@bit0.{0} @nat @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@has_one.one.{0} @nat @nat.has_one)))))))))
                  (@char.of_nat
                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit0.{0} @nat @nat.has_add
                          (@bit0.{0} @nat @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@has_one.one.{0} @nat @nat.has_one)))))))))
                @name.anonymous))
            (@default_has_sizeof.{0}
              (@auto_param.{0}
                (∀ {α β : Type u} (f : (∀ (a : α), β)) (x : m α),
                @eq.{v+1} (m β)
                  (@has_bind.bind.{u v} m to_has_bind α β x
                    (@function.comp.{u+1 u+1 v+1} α β (m β)
                      (@has_pure.pure.{u v} m
                        (@applicative.to_has_pure.{u v} m to_applicative) β) f))
                  (@has_map.map.{u v} m
                    (@functor.to_has_map.{u v} m
                      (@applicative.to_functor.{u v} m to_applicative)) α β f
                    x))
                (@name.mk_string
                  (@string.str
                    (@string.str
                      (@string.str
                        (@string.str
                          (@string.str
                            (@string.str
                              (@string.str
                                (@string.str
                                  (@string.str
                                    (@string.str
                                      (@string.str
                                        (@string.str
                                          (@string.str
                                            (@string.str
                                              (@string.str
                                                (@string.str @string.empty
                                                  (@char.of_nat
                                                    (@bit1.{0} @nat @nat.has_one
                                                      @nat.has_add
                                                      (@bit1.{0} @nat
                                                        @nat.has_one
                                                        @nat.has_add
                                                        (@bit0.{0} @nat
                                                          @nat.has_add
                                                          (@bit0.{0} @nat
                                                            @nat.has_add
                                                            (@bit0.{0} @nat
                                                              @nat.has_add
                                                              (@bit1.{0} @nat
                                                                @nat.has_one
                                                                @nat.has_add
                                                                (@has_one.one.{0}
                                                                  @nat
                                                                  @nat.has_one)))))))))
                                                (@char.of_nat
                                                  (@bit1.{0} @nat @nat.has_one
                                                    @nat.has_add
                                                    (@bit1.{0} @nat @nat.has_one
                                                      @nat.has_add
                                                      (@bit1.{0} @nat
                                                        @nat.has_one
                                                        @nat.has_add
                                                        (@bit1.{0} @nat
                                                          @nat.has_one
                                                          @nat.has_add
                                                          (@bit0.{0} @nat
                                                            @nat.has_add
                                                            (@bit1.{0} @nat
                                                              @nat.has_one
                                                              @nat.has_add
                                                              (@has_one.one.{0}
                                                                @nat
                                                                @nat.has_one)))))))))
                                              (@char.of_nat
                                                (@bit0.{0} @nat @nat.has_add
                                                  (@bit1.{0} @nat @nat.has_one
                                                    @nat.has_add
                                                    (@bit1.{0} @nat @nat.has_one
                                                      @nat.has_add
                                                      (@bit1.{0} @nat
                                                        @nat.has_one
                                                        @nat.has_add
                                                        (@bit0.{0} @nat
                                                          @nat.has_add
                                                          (@bit1.{0} @nat
                                                            @nat.has_one
                                                            @nat.has_add
                                                            (@has_one.one.{0}
                                                              @nat
                                                              @nat.has_one)))))))))
                                            (@char.of_nat
                                              (@bit0.{0} @nat @nat.has_add
                                                (@bit0.{0} @nat @nat.has_add
                                                  (@bit1.{0} @nat @nat.has_one
                                                    @nat.has_add
                                                    (@bit0.{0} @nat @nat.has_add
                                                      (@bit1.{0} @nat
                                                        @nat.has_one
                                                        @nat.has_add
                                                        (@bit1.{0} @nat
                                                          @nat.has_one
                                                          @nat.has_add
                                                          (@has_one.one.{0} @nat
                                                            @nat.has_one)))))))))
                                          (@char.of_nat
                                            (@bit0.{0} @nat @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit0.{0} @nat @nat.has_add
                                                  (@bit0.{0} @nat @nat.has_add
                                                    (@bit1.{0} @nat @nat.has_one
                                                      @nat.has_add
                                                      (@bit1.{0} @nat
                                                        @nat.has_one
                                                        @nat.has_add
                                                        (@has_one.one.{0} @nat
                                                          @nat.has_one)))))))))
                                        (@char.of_nat
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@bit0.{0} @nat @nat.has_add
                                                    (@bit1.{0} @nat @nat.has_one
                                                      @nat.has_add
                                                      (@has_one.one.{0} @nat
                                                        @nat.has_one)))))))))
                                      (@char.of_nat
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit0.{0} @nat @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit0.{0} @nat @nat.has_add
                                                  (@bit1.{0} @nat @nat.has_one
                                                    @nat.has_add
                                                    (@has_one.one.{0} @nat
                                                      @nat.has_one)))))))))
                                    (@char.of_nat
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit0.{0} @nat @nat.has_add
                                                  (@has_one.one.{0} @nat
                                                    @nat.has_one)))))))))
                                  (@char.of_nat
                                    (@bit0.{0} @nat @nat.has_add
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit0.{0} @nat @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@has_one.one.{0} @nat
                                                  @nat.has_one)))))))))
                                (@char.of_nat
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit0.{0} @nat @nat.has_add
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit0.{0} @nat @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@has_one.one.{0} @nat
                                                @nat.has_one)))))))))
                              (@char.of_nat
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@has_one.one.{0} @nat
                                              @nat.has_one)))))))))
                            (@char.of_nat
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit0.{0} @nat @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@has_one.one.{0} @nat
                                            @nat.has_one)))))))))
                          (@char.of_nat
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit0.{0} @nat @nat.has_add
                                        (@has_one.one.{0} @nat
                                          @nat.has_one)))))))))
                        (@char.of_nat
                          (@bit0.{0} @nat @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@has_one.one.{0} @nat
                                        @nat.has_one)))))))))
                      (@char.of_nat
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit0.{0} @nat @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@has_one.one.{0} @nat @nat.has_one)))))))))
                    (@char.of_nat
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit0.{0} @nat @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@has_one.one.{0} @nat @nat.has_one)))))))))
                  @name.anonymous))) bind_pure_comp_eq_map))
        (@sizeof.{0}
          (@auto_param.{0}
            (∀ {α β : Type u} (f : m (∀ (a : α), β)) (x : m α),
            @eq.{v+1} (m β)
              (@has_bind.bind.{u v} m to_has_bind (∀ (a : α), β) β f
                (λ (x_0 : (∀ (a : α), β)),
                @has_map.map.{u v} m
                  (@functor.to_has_map.{u v} m
                    (@applicative.to_functor.{u v} m to_applicative)) α β x_0
                  x))
              (@has_seq.seq.{u v} m
                (@applicative.to_has_seq.{u v} m to_applicative) α β f x))
            (@name.mk_string
              (@string.str
                (@string.str
                  (@string.str
                    (@string.str
                      (@string.str
                        (@string.str
                          (@string.str
                            (@string.str
                              (@string.str
                                (@string.str
                                  (@string.str
                                    (@string.str
                                      (@string.str
                                        (@string.str
                                          (@string.str
                                            (@string.str @string.empty
                                              (@char.of_nat
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@bit1.{0} @nat @nat.has_one
                                                    @nat.has_add
                                                    (@bit0.{0} @nat @nat.has_add
                                                      (@bit0.{0} @nat
                                                        @nat.has_add
                                                        (@bit0.{0} @nat
                                                          @nat.has_add
                                                          (@bit1.{0} @nat
                                                            @nat.has_one
                                                            @nat.has_add
                                                            (@has_one.one.{0}
                                                              @nat
                                                              @nat.has_one)))))))))
                                            (@char.of_nat
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@bit1.{0} @nat @nat.has_one
                                                    @nat.has_add
                                                    (@bit1.{0} @nat @nat.has_one
                                                      @nat.has_add
                                                      (@bit0.{0} @nat
                                                        @nat.has_add
                                                        (@bit1.{0} @nat
                                                          @nat.has_one
                                                          @nat.has_add
                                                          (@has_one.one.{0} @nat
                                                            @nat.has_one)))))))))
                                          (@char.of_nat
                                            (@bit0.{0} @nat @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@bit1.{0} @nat @nat.has_one
                                                    @nat.has_add
                                                    (@bit0.{0} @nat @nat.has_add
                                                      (@bit1.{0} @nat
                                                        @nat.has_one
                                                        @nat.has_add
                                                        (@has_one.one.{0} @nat
                                                          @nat.has_one)))))))))
                                        (@char.of_nat
                                          (@bit0.{0} @nat @nat.has_add
                                            (@bit0.{0} @nat @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit0.{0} @nat @nat.has_add
                                                  (@bit1.{0} @nat @nat.has_one
                                                    @nat.has_add
                                                    (@bit1.{0} @nat @nat.has_one
                                                      @nat.has_add
                                                      (@has_one.one.{0} @nat
                                                        @nat.has_one)))))))))
                                      (@char.of_nat
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit0.{0} @nat @nat.has_add
                                              (@bit0.{0} @nat @nat.has_add
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@bit1.{0} @nat @nat.has_one
                                                    @nat.has_add
                                                    (@has_one.one.{0} @nat
                                                      @nat.has_one)))))))))
                                    (@char.of_nat
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit0.{0} @nat @nat.has_add
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@has_one.one.{0} @nat
                                                    @nat.has_one)))))))))
                                  (@char.of_nat
                                    (@bit0.{0} @nat @nat.has_add
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit0.{0} @nat @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@has_one.one.{0} @nat
                                                  @nat.has_one)))))))))
                                (@char.of_nat
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit0.{0} @nat @nat.has_add
                                              (@has_one.one.{0} @nat
                                                @nat.has_one)))))))))
                              (@char.of_nat
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@has_one.one.{0} @nat
                                              @nat.has_one)))))))))
                            (@char.of_nat
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit0.{0} @nat @nat.has_add
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@has_one.one.{0} @nat
                                            @nat.has_one)))))))))
                          (@char.of_nat
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@has_one.one.{0} @nat
                                          @nat.has_one)))))))))
                        (@char.of_nat
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@has_one.one.{0} @nat
                                        @nat.has_one)))))))))
                      (@char.of_nat
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit0.{0} @nat @nat.has_add
                                    (@has_one.one.{0} @nat @nat.has_one)))))))))
                    (@char.of_nat
                      (@bit0.{0} @nat @nat.has_add
                        (@bit0.{0} @nat @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@has_one.one.{0} @nat @nat.has_one)))))))))
                  (@char.of_nat
                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                      (@bit0.{0} @nat @nat.has_add
                        (@bit0.{0} @nat @nat.has_add
                          (@bit0.{0} @nat @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@has_one.one.{0} @nat @nat.has_one)))))))))
                (@char.of_nat
                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                      (@bit0.{0} @nat @nat.has_add
                        (@bit0.{0} @nat @nat.has_add
                          (@bit0.{0} @nat @nat.has_add
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@has_one.one.{0} @nat @nat.has_one)))))))))
              @name.anonymous))
          (@default_has_sizeof.{0}
            (@auto_param.{0}
              (∀ {α β : Type u} (f : m (∀ (a : α), β)) (x : m α),
              @eq.{v+1} (m β)
                (@has_bind.bind.{u v} m to_has_bind (∀ (a : α), β) β f
                  (λ (x_0 : (∀ (a : α), β)),
                  @has_map.map.{u v} m
                    (@functor.to_has_map.{u v} m
                      (@applicative.to_functor.{u v} m to_applicative)) α β x_0
                    x))
                (@has_seq.seq.{u v} m
                  (@applicative.to_has_seq.{u v} m to_applicative) α β f x))
              (@name.mk_string
                (@string.str
                  (@string.str
                    (@string.str
                      (@string.str
                        (@string.str
                          (@string.str
                            (@string.str
                              (@string.str
                                (@string.str
                                  (@string.str
                                    (@string.str
                                      (@string.str
                                        (@string.str
                                          (@string.str
                                            (@string.str
                                              (@string.str @string.empty
                                                (@char.of_nat
                                                  (@bit1.{0} @nat @nat.has_one
                                                    @nat.has_add
                                                    (@bit1.{0} @nat @nat.has_one
                                                      @nat.has_add
                                                      (@bit0.{0} @nat
                                                        @nat.has_add
                                                        (@bit0.{0} @nat
                                                          @nat.has_add
                                                          (@bit0.{0} @nat
                                                            @nat.has_add
                                                            (@bit1.{0} @nat
                                                              @nat.has_one
                                                              @nat.has_add
                                                              (@has_one.one.{0}
                                                                @nat
                                                                @nat.has_one)))))))))
                                              (@char.of_nat
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@bit1.{0} @nat @nat.has_one
                                                    @nat.has_add
                                                    (@bit1.{0} @nat @nat.has_one
                                                      @nat.has_add
                                                      (@bit1.{0} @nat
                                                        @nat.has_one
                                                        @nat.has_add
                                                        (@bit0.{0} @nat
                                                          @nat.has_add
                                                          (@bit1.{0} @nat
                                                            @nat.has_one
                                                            @nat.has_add
                                                            (@has_one.one.{0}
                                                              @nat
                                                              @nat.has_one)))))))))
                                            (@char.of_nat
                                              (@bit0.{0} @nat @nat.has_add
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@bit1.{0} @nat @nat.has_one
                                                    @nat.has_add
                                                    (@bit1.{0} @nat @nat.has_one
                                                      @nat.has_add
                                                      (@bit0.{0} @nat
                                                        @nat.has_add
                                                        (@bit1.{0} @nat
                                                          @nat.has_one
                                                          @nat.has_add
                                                          (@has_one.one.{0} @nat
                                                            @nat.has_one)))))))))
                                          (@char.of_nat
                                            (@bit0.{0} @nat @nat.has_add
                                              (@bit0.{0} @nat @nat.has_add
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@bit0.{0} @nat @nat.has_add
                                                    (@bit1.{0} @nat @nat.has_one
                                                      @nat.has_add
                                                      (@bit1.{0} @nat
                                                        @nat.has_one
                                                        @nat.has_add
                                                        (@has_one.one.{0} @nat
                                                          @nat.has_one)))))))))
                                        (@char.of_nat
                                          (@bit0.{0} @nat @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit0.{0} @nat @nat.has_add
                                                (@bit0.{0} @nat @nat.has_add
                                                  (@bit1.{0} @nat @nat.has_one
                                                    @nat.has_add
                                                    (@bit1.{0} @nat @nat.has_one
                                                      @nat.has_add
                                                      (@has_one.one.{0} @nat
                                                        @nat.has_one)))))))))
                                      (@char.of_nat
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit1.{0} @nat @nat.has_one
                                                @nat.has_add
                                                (@bit0.{0} @nat @nat.has_add
                                                  (@bit1.{0} @nat @nat.has_one
                                                    @nat.has_add
                                                    (@has_one.one.{0} @nat
                                                      @nat.has_one)))))))))
                                    (@char.of_nat
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit0.{0} @nat @nat.has_add
                                                (@bit1.{0} @nat @nat.has_one
                                                  @nat.has_add
                                                  (@has_one.one.{0} @nat
                                                    @nat.has_one)))))))))
                                  (@char.of_nat
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@bit0.{0} @nat @nat.has_add
                                                (@has_one.one.{0} @nat
                                                  @nat.has_one)))))))))
                                (@char.of_nat
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit0.{0} @nat @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@bit0.{0} @nat @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@has_one.one.{0} @nat
                                                @nat.has_one)))))))))
                              (@char.of_nat
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit0.{0} @nat @nat.has_add
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@has_one.one.{0} @nat
                                              @nat.has_one)))))))))
                            (@char.of_nat
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit0.{0} @nat @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@has_one.one.{0} @nat
                                            @nat.has_one)))))))))
                          (@char.of_nat
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@has_one.one.{0} @nat
                                          @nat.has_one)))))))))
                        (@char.of_nat
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit0.{0} @nat @nat.has_add
                                      (@has_one.one.{0} @nat
                                        @nat.has_one)))))))))
                      (@char.of_nat
                        (@bit0.{0} @nat @nat.has_add
                          (@bit0.{0} @nat @nat.has_add
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@has_one.one.{0} @nat @nat.has_one)))))))))
                    (@char.of_nat
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit0.{0} @nat @nat.has_add
                          (@bit0.{0} @nat @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@has_one.one.{0} @nat @nat.has_one)))))))))
                  (@char.of_nat
                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit0.{0} @nat @nat.has_add
                          (@bit0.{0} @nat @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@has_one.one.{0} @nat @nat.has_one)))))))))
                @name.anonymous))) bind_map_eq_seq))
      (@sizeof.{0}
        (∀ {α β : Type u} (x : α) (f : (∀ (a : α), m β)),
        @eq.{v+1} (m β)
          (@has_bind.bind.{u v} m to_has_bind α β
            (@has_pure.pure.{u v} m
              (@applicative.to_has_pure.{u v} m to_applicative) α x) f) (f x))
        (@default_has_sizeof.{0}
          (∀ {α β : Type u} (x : α) (f : (∀ (a : α), m β)),
          @eq.{v+1} (m β)
            (@has_bind.bind.{u v} m to_has_bind α β
              (@has_pure.pure.{u v} m
                (@applicative.to_has_pure.{u v} m to_applicative) α x) f)
            (f x))) pure_bind))
    (@sizeof.{0}
      (∀ {α β γ : Type u} (x : m α) (f : (∀ (a : α), m β))
        (g : (∀ (a : β), m γ)),
      @eq.{v+1} (m γ)
        (@has_bind.bind.{u v} m to_has_bind β γ
          (@has_bind.bind.{u v} m to_has_bind α β x f) g)
        (@has_bind.bind.{u v} m to_has_bind α γ x
          (λ (x_0 : α), @has_bind.bind.{u v} m to_has_bind β γ (f x_0) g)))
      (@default_has_sizeof.{0}
        (∀ {α β γ : Type u} (x : m α) (f : (∀ (a : α), m β))
          (g : (∀ (a : β), m γ)),
        @eq.{v+1} (m γ)
          (@has_bind.bind.{u v} m to_has_bind β γ
            (@has_bind.bind.{u v} m to_has_bind α β x f) g)
          (@has_bind.bind.{u v} m to_has_bind α γ x
            (λ (x_0 : α), @has_bind.bind.{u v} m to_has_bind β γ (f x_0) g))))
      bind_assoc)),0))"
err: "java.util.NoSuchElementException: key not found: monad"

mod: "DefMod(Definition(monad.has_sizeof_inst,Vector(Param(u), Param(v)),∀ (m : (∀ (a : Type u), Type v)), @has_sizeof.{(max (u+1) v)+1} (@monad.{u v} m),λ (m : (∀ (a : Type u), Type v)),
@has_sizeof.mk.{(max (u+1) v)+1} (@monad.{u v} m) (@monad.sizeof.{u v} m),0))"
err: "provingground.interface.UnParsedException: could not parse expression @monad.sizeof.{u v}"

mod: "DefMod(Definition(monad_fail.sizeof,Vector(Param(u), Param(v)),∀ (m : (∀ (a : Type u), Type v)) (x : @monad_fail.{u v} m), @nat,λ (m : (∀ (a : Type u), Type v)),
@monad_fail.rec.{1 u v} m (λ (x : @monad_fail.{u v} m), @nat)
  (λ (to_monad : @monad.{u v} m) (fail : (∀ {a : Type u} (a_0 : @string), m a)),
  @has_add.add.{0} @nat @nat.has_add
    (@has_add.add.{0} @nat @nat.has_add (@has_one.one.{0} @nat @nat.has_one)
      (@sizeof.{(max (u+1) v)+1} (@monad.{u v} m)
        (@monad.has_sizeof_inst.{u v} m) to_monad))
    (@sizeof.{max (u+2) (max 1 (v+1))} (∀ {a : Type u} (a_0 : @string), m a)
      (@default_has_sizeof.{max (u+2) (max 1 (v+1))}
        (∀ {a : Type u} (a_0 : @string), m a)) fail)),0))"
err: "java.util.NoSuchElementException: key not found: monad_fail"

mod: "DefMod(Definition(acc.rec_on,Vector(Param(l), Param(u)),∀ {α : Sort u} {r : (∀ (a_0 a_1 : α), Prop)} {C : (∀ (a_0 : α), Sort l)} {a : α}
  (n : @acc.{u} α r a)
  (e_1 :
    (∀ (x : α) (a_0 : (∀ (y : α) (a_1 : r y x), @acc.{u} α r y))
      (ih_1 : (∀ (y : α) (a_1 : r y x), C y)),
    C x)),
C a,λ {α : Sort u} {r : (∀ (a_0 a_1 : α), Prop)} {C : (∀ (a_0 : α), Sort l)} {a : α}
  (n : @acc.{u} α r a)
  (e_1 :
    (∀ (x : α) (a_0 : (∀ (y : α) (a_1 : r y x), @acc.{u} α r y))
      (ih_1 : (∀ (y : α) (a_1 : r y x), C y)),
    C x)),
@acc.rec.{l u} α r C e_1 a n,0))"
err: "java.util.NoSuchElementException: None.get"

mod: "DefMod(Definition(_private.1241109601.acc_aux,Vector(Param(u), Param(v)),∀ {α : Sort u} {β : Sort v} {r : (∀ (a_0 a_1 : β), Prop)} (f : (∀ (a_0 : α), β))
  {b : β} (ac : @acc.{v} β r b) (x : α) (a : @eq.{v} β (f x) b),
@acc.{u} α (@inv_image.{u v} α β r f) x,λ {α : Sort u} {β : Sort v} {r : (∀ (a a_0 : β), Prop)} (f : (∀ (a : α), β))
  {b : β} (ac : @acc.{v} β r b),
@acc.rec_on.{0 v} β r
  (λ (x : β),
  ∀ (x_0 : α) (a : @eq.{v} β (f x_0) x),
  @acc.{u} α (@inv_image.{u v} α β r f) x_0) b ac
  (λ (x : β) (acx : (∀ (y : β) (a : r y x), @acc.{v} β r y))
    (ih :
      (∀ (y : β) (a : r y x) (x_0 : α) (a_0 : @eq.{v} β (f x_0) y),
      @acc.{u} α (@inv_image.{u v} α β r f) x_0)) (z : α)
    (e : @eq.{v} β (f z) x),
  @acc.intro.{u} α (@inv_image.{u v} α β r f) z
    (λ (y : α) (lt : @inv_image.{u v} α β r f y z),
    @eq.rec_on.{0 v} β (f z)
      (λ (x_0 : β),
      ∀ (a : (∀ (y_0 : β) (a_1 : r y_0 x_0), @acc.{v} β r y_0))
        (a_0 :
          (∀ (y_0 : β) (a_1 : r y_0 x_0) (x_1 : α)
            (a_2 : @eq.{v} β (f x_1) y_0),
          @acc.{u} α (@inv_image.{u v} α β r f) x_1)),
      @acc.{u} α (@inv_image.{u v} α β r f) y) x e
      (λ (acx_0 : (∀ (y_0 : β) (a : r y_0 (f z)), @acc.{v} β r y_0))
        (ih_0 :
          (∀ (y_0 : β) (a : r y_0 (f z)) (x_0 : α)
            (a_0 : @eq.{v} β (f x_0) y_0),
          @acc.{u} α (@inv_image.{u v} α β r f) x_0)),
      ih_0 (f y) lt y (@rfl.{v} β (f y))) acx ih)),0))"
err: "provingground.interface.UnParsedException: could not parse expression @acc.rec_on.{0 v}"

mod: "DefMod(Definition(_private.4173940857._private.1241109601.acc_aux.equations._eqn_1,Vector(Param(u), Param(v)),∀ {α : Sort u} {β : Sort v} {r : (∀ (a a_0 : β), Prop)} (f : (∀ (a : α), β))
  {b : β} (ac : @acc.{v} β r b),
@eq.{0}
  (∀ (x : α) (a : @eq.{v} β (f x) b), @acc.{u} α (@inv_image.{u v} α β r f) x)
  (@_private.1241109601.acc_aux.{u v} α β r f b ac)
  (@acc.rec_on.{0 v} β r
    (λ (x : β),
    ∀ (x_0 : α) (a : @eq.{v} β (f x_0) x),
    @acc.{u} α (@inv_image.{u v} α β r f) x_0) b ac
    (λ (x : β) (acx : (∀ (y : β) (a : r y x), @acc.{v} β r y))
      (ih :
        (∀ (y : β) (a : r y x) (x_0 : α) (a_0 : @eq.{v} β (f x_0) y),
        @acc.{u} α (@inv_image.{u v} α β r f) x_0)) (z : α)
      (e : @eq.{v} β (f z) x),
    @acc.intro.{u} α (@inv_image.{u v} α β r f) z
      (λ (y : α) (lt : @inv_image.{u v} α β r f y z),
      @eq.rec_on.{0 v} β (f z)
        (λ (x_0 : β),
        ∀ (a : (∀ (y_0 : β) (a_1 : r y_0 x_0), @acc.{v} β r y_0))
          (a_0 :
            (∀ (y_0 : β) (a_1 : r y_0 x_0) (x_1 : α)
              (a_2 : @eq.{v} β (f x_1) y_0),
            @acc.{u} α (@inv_image.{u v} α β r f) x_1)),
        @acc.{u} α (@inv_image.{u v} α β r f) y) x e
        (λ (acx_0 : (∀ (y_0 : β) (a : r y_0 (f z)), @acc.{v} β r y_0))
          (ih_0 :
            (∀ (y_0 : β) (a : r y_0 (f z)) (x_0 : α)
              (a_0 : @eq.{v} β (f x_0) y_0),
            @acc.{u} α (@inv_image.{u v} α β r f) x_0)),
        ih_0 (f y) lt y (@rfl.{v} β (f y))) acx ih))),λ {α : Sort u} {β : Sort v} {r : (∀ (a a_0 : β), Prop)} (f : (∀ (a : α), β))
  {b : β} (ac : @acc.{v} β r b),
@eq.refl.{0}
  (∀ (x : α) (a : @eq.{v} β (f x) b), @acc.{u} α (@inv_image.{u v} α β r f) x)
  (@_private.1241109601.acc_aux.{u v} α β r f b ac),0))"
err: "provingground.interface.UnParsedException: could not parse expression @_private.1241109601.acc_aux.{u v}"

mod: "DefMod(Definition(bool.decidable_eq._main,Vector(),@decidable_eq.{1} @bool,λ (a b : @bool),
@bool.cases_on.{1} (λ (a_0 : @bool), @decidable (@eq.{1} @bool a_0 b)) a
  (@bool.cases_on.{1} (λ (b_0 : @bool), @decidable (@eq.{1} @bool @bool.ff b_0))
    b
    (@decidable.is_true (@eq.{1} @bool @bool.ff @bool.ff)
      (@rfl.{1} @bool @bool.ff))
    (@decidable.is_false (@eq.{1} @bool @bool.ff @bool.tt) @bool.ff_ne_tt))
  (@bool.cases_on.{1} (λ (b_0 : @bool), @decidable (@eq.{1} @bool @bool.tt b_0))
    b
    (@decidable.is_false (@eq.{1} @bool @bool.tt @bool.ff)
      (@ne.symm.{1} @bool @bool.ff @bool.tt @bool.ff_ne_tt))
    (@decidable.is_true (@eq.{1} @bool @bool.tt @bool.tt)
      (@rfl.{1} @bool @bool.tt))),0))"
err: "provingground.interface.UnParsedException: could not parse expression @bool.ff_ne_tt"

mod: "DefMod(Definition(bool.decidable_eq,Vector(),@decidable_eq.{1} @bool,@bool.decidable_eq._main,0))"
err: "provingground.interface.UnParsedException: could not parse expression @bool.decidable_eq._main"

mod: "DefMod(Definition(bool.decidable_eq._main.equations._eqn_3,Vector(),@eq.{1} (@decidable (@eq.{1} @bool @bool.tt @bool.ff))
  (@bool.decidable_eq._main @bool.tt @bool.ff)
  (@decidable.is_false (@eq.{1} @bool @bool.tt @bool.ff)
    (@ne.symm.{1} @bool @bool.ff @bool.tt @bool.ff_ne_tt)),@eq.refl.{1} ((λ (a : @bool), @decidable (@eq.{1} @bool a @bool.ff)) @bool.tt)
  (@bool.cases_on.{1} (λ (a : @bool), @decidable (@eq.{1} @bool a @bool.ff))
    @bool.tt
    (@bool.cases_on.{1} (λ (b : @bool), @decidable (@eq.{1} @bool @bool.ff b))
      @bool.ff
      (@decidable.is_true (@eq.{1} @bool @bool.ff @bool.ff)
        (@rfl.{1} @bool @bool.ff))
      (@decidable.is_false (@eq.{1} @bool @bool.ff @bool.tt) @bool.ff_ne_tt))
    (@bool.cases_on.{1} (λ (b : @bool), @decidable (@eq.{1} @bool @bool.tt b))
      @bool.ff
      (@decidable.is_false (@eq.{1} @bool @bool.tt @bool.ff)
        (@ne.symm.{1} @bool @bool.ff @bool.tt @bool.ff_ne_tt))
      (@decidable.is_true (@eq.{1} @bool @bool.tt @bool.tt)
        (@rfl.{1} @bool @bool.tt)))),0))"
err: "provingground.interface.UnParsedException: could not parse expression @bool.ff_ne_tt"

mod: "DefMod(Definition(bool.decidable_eq.equations._eqn_3,Vector(),@eq.{1} (@decidable (@eq.{1} @bool @bool.tt @bool.ff))
  (@bool.decidable_eq @bool.tt @bool.ff)
  (@decidable.is_false (@eq.{1} @bool @bool.tt @bool.ff)
    (@ne.symm.{1} @bool @bool.ff @bool.tt @bool.ff_ne_tt)),@bool.decidable_eq._main.equations._eqn_3,0))"
err: "provingground.interface.UnParsedException: could not parse expression @bool.decidable_eq._main.equations._eqn_3"

mod: "DefMod(Definition(monoid.mul_assoc,Vector(Param(u)),∀ {α : Type u} [c : @monoid.{u} α] (a b c_0 : α),
@eq.{u+1} α
  (@has_mul.mul.{u} α (@has_mul.mk.{u} α (@monoid.mul.{u} α c))
    (@has_mul.mul.{u} α (@has_mul.mk.{u} α (@monoid.mul.{u} α c)) a b) c_0)
  (@has_mul.mul.{u} α (@has_mul.mk.{u} α (@monoid.mul.{u} α c)) a
    (@has_mul.mul.{u} α (@has_mul.mk.{u} α (@monoid.mul.{u} α c)) b c_0)),λ (α : Type u) [c : @monoid.{u} α],
@monoid.rec.{0 u} α
  (λ [c_0 : @monoid.{u} α],
  ∀ (a b c_1 : α),
  @eq.{u+1} α
    (@has_mul.mul.{u} α (@has_mul.mk.{u} α (@monoid.mul.{u} α c_0))
      (@has_mul.mul.{u} α (@has_mul.mk.{u} α (@monoid.mul.{u} α c_0)) a b) c_1)
    (@has_mul.mul.{u} α (@has_mul.mk.{u} α (@monoid.mul.{u} α c_0)) a
      (@has_mul.mul.{u} α (@has_mul.mk.{u} α (@monoid.mul.{u} α c_0)) b c_1)))
  (λ (mul : (∀ (a a_0 : α), α))
    (mul_assoc :
      (∀ (a b c_0 : α),
      @eq.{u+1} α
        (@has_mul.mul.{u} α (@has_mul.mk.{u} α mul)
          (@has_mul.mul.{u} α (@has_mul.mk.{u} α mul) a b) c_0)
        (@has_mul.mul.{u} α (@has_mul.mk.{u} α mul) a
          (@has_mul.mul.{u} α (@has_mul.mk.{u} α mul) b c_0)))) (one : α)
    (one_mul :
      (∀ (a : α),
      @eq.{u+1} α
        (@has_mul.mul.{u} α
          (@semigroup.to_has_mul.{u} α (@semigroup.mk.{u} α mul mul_assoc))
          (@has_one.one.{u} α (@has_one.mk.{u} α one)) a) a))
    (mul_one :
      (∀ (a : α),
      @eq.{u+1} α
        (@has_mul.mul.{u} α
          (@semigroup.to_has_mul.{u} α (@semigroup.mk.{u} α mul mul_assoc)) a
          (@has_one.one.{u} α (@has_one.mk.{u} α one))) a)),
  mul_assoc) c,0))"
err: "java.util.concurrent.TimeoutException: Task timed-out after 5 minutes of inactivity"

mod: "DefMod(Definition(monoid.to_semigroup,Vector(Param(u)),∀ (α : Type u) [s : @monoid.{u} α], @semigroup.{u} α,λ (α : Type u) [s : @monoid.{u} α],
@semigroup.mk.{u} α (@monoid.mul.{u} α s) (@monoid.mul_assoc.{u} α s),0))"
err: "provingground.interface.UnParsedException: could not parse expression @monoid.mul_assoc.{u}"

mod: "IndMod(InductiveType(group,Vector(Param(u)),∀ (α : Type u), Type u),1,Vector((group.mk,∀ {α : Type u} (mul : (∀ (a a_0 : α), α))
  (mul_assoc :
    (∀ (a b c : α),
    @eq.{u+1} α
      (@has_mul.mul.{u} α (@has_mul.mk.{u} α mul)
        (@has_mul.mul.{u} α (@has_mul.mk.{u} α mul) a b) c)
      (@has_mul.mul.{u} α (@has_mul.mk.{u} α mul) a
        (@has_mul.mul.{u} α (@has_mul.mk.{u} α mul) b c)))) (one : α)
  (one_mul :
    (∀ (a : α),
    @eq.{u+1} α
      (@has_mul.mul.{u} α
        (@semigroup.to_has_mul.{u} α (@semigroup.mk.{u} α mul mul_assoc))
        (@has_one.one.{u} α (@has_one.mk.{u} α one)) a) a))
  (mul_one :
    (∀ (a : α),
    @eq.{u+1} α
      (@has_mul.mul.{u} α
        (@semigroup.to_has_mul.{u} α (@semigroup.mk.{u} α mul mul_assoc)) a
        (@has_one.one.{u} α (@has_one.mk.{u} α one))) a)) (inv : (∀ (a : α), α))
  (mul_left_inv :
    (∀ (a : α),
    @eq.{u+1} α
      (@has_mul.mul.{u} α
        (@semigroup.to_has_mul.{u} α
          (@monoid.to_semigroup.{u} α
            (@monoid.mk.{u} α mul mul_assoc one one_mul mul_one)))
        (@has_inv.inv.{u} α (@has_inv.mk.{u} α inv) a) a)
      (@has_one.one.{u} α
        (@monoid.to_has_one.{u} α
          (@monoid.mk.{u} α mul mul_assoc one one_mul mul_one))))),
@group.{u} α)))"
err: "provingground.interface.UnParsedException: could not parse expression @monoid.to_semigroup.{u}"

mod: "DefMod(Definition(group.mul,Vector(Param(u)),∀ {α : Type u} [c : @group.{u} α] (a a_0 : α), α,λ (α : Type u) [c : @group.{u} α],
@group.rec.{u+1 u} α (λ [c_0 : @group.{u} α], ∀ (a a_0 : α), α)
  (λ (mul : (∀ (a a_0 : α), α))
    (mul_assoc :
      (∀ (a b c_0 : α),
      @eq.{u+1} α
        (@has_mul.mul.{u} α (@has_mul.mk.{u} α mul)
          (@has_mul.mul.{u} α (@has_mul.mk.{u} α mul) a b) c_0)
        (@has_mul.mul.{u} α (@has_mul.mk.{u} α mul) a
          (@has_mul.mul.{u} α (@has_mul.mk.{u} α mul) b c_0)))) (one : α)
    (one_mul :
      (∀ (a : α),
      @eq.{u+1} α
        (@has_mul.mul.{u} α
          (@semigroup.to_has_mul.{u} α (@semigroup.mk.{u} α mul mul_assoc))
          (@has_one.one.{u} α (@has_one.mk.{u} α one)) a) a))
    (mul_one :
      (∀ (a : α),
      @eq.{u+1} α
        (@has_mul.mul.{u} α
          (@semigroup.to_has_mul.{u} α (@semigroup.mk.{u} α mul mul_assoc)) a
          (@has_one.one.{u} α (@has_one.mk.{u} α one))) a))
    (inv : (∀ (a : α), α))
    (mul_left_inv :
      (∀ (a : α),
      @eq.{u+1} α
        (@has_mul.mul.{u} α
          (@semigroup.to_has_mul.{u} α
            (@monoid.to_semigroup.{u} α
              (@monoid.mk.{u} α mul mul_assoc one one_mul mul_one)))
          (@has_inv.inv.{u} α (@has_inv.mk.{u} α inv) a) a)
        (@has_one.one.{u} α
          (@monoid.to_has_one.{u} α
            (@monoid.mk.{u} α mul mul_assoc one one_mul mul_one))))),
  mul) c,0))"
err: "provingground.interface.UnParsedException: could not parse expression @group.{u}"

mod: "DefMod(Definition(group.mul_assoc,Vector(Param(u)),∀ {α : Type u} [c : @group.{u} α] (a b c_0 : α),
@eq.{u+1} α
  (@has_mul.mul.{u} α (@has_mul.mk.{u} α (@group.mul.{u} α c))
    (@has_mul.mul.{u} α (@has_mul.mk.{u} α (@group.mul.{u} α c)) a b) c_0)
  (@has_mul.mul.{u} α (@has_mul.mk.{u} α (@group.mul.{u} α c)) a
    (@has_mul.mul.{u} α (@has_mul.mk.{u} α (@group.mul.{u} α c)) b c_0)),λ (α : Type u) [c : @group.{u} α],
@group.rec.{0 u} α
  (λ [c_0 : @group.{u} α],
  ∀ (a b c_1 : α),
  @eq.{u+1} α
    (@has_mul.mul.{u} α (@has_mul.mk.{u} α (@group.mul.{u} α c_0))
      (@has_mul.mul.{u} α (@has_mul.mk.{u} α (@group.mul.{u} α c_0)) a b) c_1)
    (@has_mul.mul.{u} α (@has_mul.mk.{u} α (@group.mul.{u} α c_0)) a
      (@has_mul.mul.{u} α (@has_mul.mk.{u} α (@group.mul.{u} α c_0)) b c_1)))
  (λ (mul : (∀ (a a_0 : α), α))
    (mul_assoc :
      (∀ (a b c_0 : α),
      @eq.{u+1} α
        (@has_mul.mul.{u} α (@has_mul.mk.{u} α mul)
          (@has_mul.mul.{u} α (@has_mul.mk.{u} α mul) a b) c_0)
        (@has_mul.mul.{u} α (@has_mul.mk.{u} α mul) a
          (@has_mul.mul.{u} α (@has_mul.mk.{u} α mul) b c_0)))) (one : α)
    (one_mul :
      (∀ (a : α),
      @eq.{u+1} α
        (@has_mul.mul.{u} α
          (@semigroup.to_has_mul.{u} α (@semigroup.mk.{u} α mul mul_assoc))
          (@has_one.one.{u} α (@has_one.mk.{u} α one)) a) a))
    (mul_one :
      (∀ (a : α),
      @eq.{u+1} α
        (@has_mul.mul.{u} α
          (@semigroup.to_has_mul.{u} α (@semigroup.mk.{u} α mul mul_assoc)) a
          (@has_one.one.{u} α (@has_one.mk.{u} α one))) a))
    (inv : (∀ (a : α), α))
    (mul_left_inv :
      (∀ (a : α),
      @eq.{u+1} α
        (@has_mul.mul.{u} α
          (@semigroup.to_has_mul.{u} α
            (@monoid.to_semigroup.{u} α
              (@monoid.mk.{u} α mul mul_assoc one one_mul mul_one)))
          (@has_inv.inv.{u} α (@has_inv.mk.{u} α inv) a) a)
        (@has_one.one.{u} α
          (@monoid.to_has_one.{u} α
            (@monoid.mk.{u} α mul mul_assoc one one_mul mul_one))))),
  mul_assoc) c,0))"
err: "provingground.interface.UnParsedException: could not parse expression @group.{u}"

mod: "DefMod(Definition(group.one,Vector(Param(u)),∀ (α : Type u) [c : @group.{u} α], α,λ (α : Type u) [c : @group.{u} α],
@group.rec.{u+1 u} α (λ [c_0 : @group.{u} α], α)
  (λ (mul : (∀ (a a_0 : α), α))
    (mul_assoc :
      (∀ (a b c_0 : α),
      @eq.{u+1} α
        (@has_mul.mul.{u} α (@has_mul.mk.{u} α mul)
          (@has_mul.mul.{u} α (@has_mul.mk.{u} α mul) a b) c_0)
        (@has_mul.mul.{u} α (@has_mul.mk.{u} α mul) a
          (@has_mul.mul.{u} α (@has_mul.mk.{u} α mul) b c_0)))) (one : α)
    (one_mul :
      (∀ (a : α),
      @eq.{u+1} α
        (@has_mul.mul.{u} α
          (@semigroup.to_has_mul.{u} α (@semigroup.mk.{u} α mul mul_assoc))
          (@has_one.one.{u} α (@has_one.mk.{u} α one)) a) a))
    (mul_one :
      (∀ (a : α),
      @eq.{u+1} α
        (@has_mul.mul.{u} α
          (@semigroup.to_has_mul.{u} α (@semigroup.mk.{u} α mul mul_assoc)) a
          (@has_one.one.{u} α (@has_one.mk.{u} α one))) a))
    (inv : (∀ (a : α), α))
    (mul_left_inv :
      (∀ (a : α),
      @eq.{u+1} α
        (@has_mul.mul.{u} α
          (@semigroup.to_has_mul.{u} α
            (@monoid.to_semigroup.{u} α
              (@monoid.mk.{u} α mul mul_assoc one one_mul mul_one)))
          (@has_inv.inv.{u} α (@has_inv.mk.{u} α inv) a) a)
        (@has_one.one.{u} α
          (@monoid.to_has_one.{u} α
            (@monoid.mk.{u} α mul mul_assoc one one_mul mul_one))))),
  one) c,0))"
err: "provingground.interface.UnParsedException: could not parse expression @group.{u}"

mod: "DefMod(Definition(group.one_mul,Vector(Param(u)),∀ {α : Type u} [c : @group.{u} α] (a : α),
@eq.{u+1} α
  (@has_mul.mul.{u} α
    (@semigroup.to_has_mul.{u} α
      (@semigroup.mk.{u} α (@group.mul.{u} α c) (@group.mul_assoc.{u} α c)))
    (@has_one.one.{u} α (@has_one.mk.{u} α (@group.one.{u} α c))) a) a,λ (α : Type u) [c : @group.{u} α],
@group.rec.{0 u} α
  (λ [c_0 : @group.{u} α],
  ∀ (a : α),
  @eq.{u+1} α
    (@has_mul.mul.{u} α
      (@semigroup.to_has_mul.{u} α
        (@semigroup.mk.{u} α (@group.mul.{u} α c_0)
          (@group.mul_assoc.{u} α c_0)))
      (@has_one.one.{u} α (@has_one.mk.{u} α (@group.one.{u} α c_0))) a) a)
  (λ (mul : (∀ (a a_0 : α), α))
    (mul_assoc :
      (∀ (a b c_0 : α),
      @eq.{u+1} α
        (@has_mul.mul.{u} α (@has_mul.mk.{u} α mul)
          (@has_mul.mul.{u} α (@has_mul.mk.{u} α mul) a b) c_0)
        (@has_mul.mul.{u} α (@has_mul.mk.{u} α mul) a
          (@has_mul.mul.{u} α (@has_mul.mk.{u} α mul) b c_0)))) (one : α)
    (one_mul :
      (∀ (a : α),
      @eq.{u+1} α
        (@has_mul.mul.{u} α
          (@semigroup.to_has_mul.{u} α (@semigroup.mk.{u} α mul mul_assoc))
          (@has_one.one.{u} α (@has_one.mk.{u} α one)) a) a))
    (mul_one :
      (∀ (a : α),
      @eq.{u+1} α
        (@has_mul.mul.{u} α
          (@semigroup.to_has_mul.{u} α (@semigroup.mk.{u} α mul mul_assoc)) a
          (@has_one.one.{u} α (@has_one.mk.{u} α one))) a))
    (inv : (∀ (a : α), α))
    (mul_left_inv :
      (∀ (a : α),
      @eq.{u+1} α
        (@has_mul.mul.{u} α
          (@semigroup.to_has_mul.{u} α
            (@monoid.to_semigroup.{u} α
              (@monoid.mk.{u} α mul mul_assoc one one_mul mul_one)))
          (@has_inv.inv.{u} α (@has_inv.mk.{u} α inv) a) a)
        (@has_one.one.{u} α
          (@monoid.to_has_one.{u} α
            (@monoid.mk.{u} α mul mul_assoc one one_mul mul_one))))),
  one_mul) c,0))"
err: "provingground.interface.UnParsedException: could not parse expression @group.{u}"

mod: "DefMod(Definition(group.mul_one,Vector(Param(u)),∀ {α : Type u} [c : @group.{u} α] (a : α),
@eq.{u+1} α
  (@has_mul.mul.{u} α
    (@semigroup.to_has_mul.{u} α
      (@semigroup.mk.{u} α (@group.mul.{u} α c) (@group.mul_assoc.{u} α c))) a
    (@has_one.one.{u} α (@has_one.mk.{u} α (@group.one.{u} α c)))) a,λ (α : Type u) [c : @group.{u} α],
@group.rec.{0 u} α
  (λ [c_0 : @group.{u} α],
  ∀ (a : α),
  @eq.{u+1} α
    (@has_mul.mul.{u} α
      (@semigroup.to_has_mul.{u} α
        (@semigroup.mk.{u} α (@group.mul.{u} α c_0)
          (@group.mul_assoc.{u} α c_0))) a
      (@has_one.one.{u} α (@has_one.mk.{u} α (@group.one.{u} α c_0)))) a)
  (λ (mul : (∀ (a a_0 : α), α))
    (mul_assoc :
      (∀ (a b c_0 : α),
      @eq.{u+1} α
        (@has_mul.mul.{u} α (@has_mul.mk.{u} α mul)
          (@has_mul.mul.{u} α (@has_mul.mk.{u} α mul) a b) c_0)
        (@has_mul.mul.{u} α (@has_mul.mk.{u} α mul) a
          (@has_mul.mul.{u} α (@has_mul.mk.{u} α mul) b c_0)))) (one : α)
    (one_mul :
      (∀ (a : α),
      @eq.{u+1} α
        (@has_mul.mul.{u} α
          (@semigroup.to_has_mul.{u} α (@semigroup.mk.{u} α mul mul_assoc))
          (@has_one.one.{u} α (@has_one.mk.{u} α one)) a) a))
    (mul_one :
      (∀ (a : α),
      @eq.{u+1} α
        (@has_mul.mul.{u} α
          (@semigroup.to_has_mul.{u} α (@semigroup.mk.{u} α mul mul_assoc)) a
          (@has_one.one.{u} α (@has_one.mk.{u} α one))) a))
    (inv : (∀ (a : α), α))
    (mul_left_inv :
      (∀ (a : α),
      @eq.{u+1} α
        (@has_mul.mul.{u} α
          (@semigroup.to_has_mul.{u} α
            (@monoid.to_semigroup.{u} α
              (@monoid.mk.{u} α mul mul_assoc one one_mul mul_one)))
          (@has_inv.inv.{u} α (@has_inv.mk.{u} α inv) a) a)
        (@has_one.one.{u} α
          (@monoid.to_has_one.{u} α
            (@monoid.mk.{u} α mul mul_assoc one one_mul mul_one))))),
  mul_one) c,0))"
err: "provingground.interface.UnParsedException: could not parse expression @group.{u}"

mod: "DefMod(Definition(group.to_monoid,Vector(Param(u)),∀ (α : Type u) [s : @group.{u} α], @monoid.{u} α,λ (α : Type u) [s : @group.{u} α],
@monoid.mk.{u} α (@group.mul.{u} α s) (@group.mul_assoc.{u} α s)
  (@group.one.{u} α s) (@group.one_mul.{u} α s) (@group.mul_one.{u} α s),0))"
err: "provingground.interface.UnParsedException: could not parse expression @group.{u}"

mod: "DefMod(Definition(group.inv,Vector(Param(u)),∀ {α : Type u} [c : @group.{u} α] (a : α), α,λ (α : Type u) [c : @group.{u} α],
@group.rec.{u+1 u} α (λ [c_0 : @group.{u} α], ∀ (a : α), α)
  (λ (mul : (∀ (a a_0 : α), α))
    (mul_assoc :
      (∀ (a b c_0 : α),
      @eq.{u+1} α
        (@has_mul.mul.{u} α (@has_mul.mk.{u} α mul)
          (@has_mul.mul.{u} α (@has_mul.mk.{u} α mul) a b) c_0)
        (@has_mul.mul.{u} α (@has_mul.mk.{u} α mul) a
          (@has_mul.mul.{u} α (@has_mul.mk.{u} α mul) b c_0)))) (one : α)
    (one_mul :
      (∀ (a : α),
      @eq.{u+1} α
        (@has_mul.mul.{u} α
          (@semigroup.to_has_mul.{u} α (@semigroup.mk.{u} α mul mul_assoc))
          (@has_one.one.{u} α (@has_one.mk.{u} α one)) a) a))
    (mul_one :
      (∀ (a : α),
      @eq.{u+1} α
        (@has_mul.mul.{u} α
          (@semigroup.to_has_mul.{u} α (@semigroup.mk.{u} α mul mul_assoc)) a
          (@has_one.one.{u} α (@has_one.mk.{u} α one))) a))
    (inv : (∀ (a : α), α))
    (mul_left_inv :
      (∀ (a : α),
      @eq.{u+1} α
        (@has_mul.mul.{u} α
          (@semigroup.to_has_mul.{u} α
            (@monoid.to_semigroup.{u} α
              (@monoid.mk.{u} α mul mul_assoc one one_mul mul_one)))
          (@has_inv.inv.{u} α (@has_inv.mk.{u} α inv) a) a)
        (@has_one.one.{u} α
          (@monoid.to_has_one.{u} α
            (@monoid.mk.{u} α mul mul_assoc one one_mul mul_one))))),
  inv) c,0))"
err: "provingground.interface.UnParsedException: could not parse expression @group.{u}"

mod: "DefMod(Definition(group.to_has_inv,Vector(Param(u)),∀ (α : Type u) [s : @group.{u} α], @has_inv.{u} α,λ (α : Type u) [s : @group.{u} α], @has_inv.mk.{u} α (@group.inv.{u} α s),0))"
err: "provingground.interface.UnParsedException: could not parse expression @group.{u}"

mod: "DefMod(Definition(group.mul_left_inv,Vector(Param(u)),∀ {α : Type u} [c : @group.{u} α] (a : α),
@eq.{u+1} α
  (@has_mul.mul.{u} α
    (@semigroup.to_has_mul.{u} α
      (@monoid.to_semigroup.{u} α
        (@monoid.mk.{u} α (@group.mul.{u} α c) (@group.mul_assoc.{u} α c)
          (@group.one.{u} α c) (@group.one_mul.{u} α c)
          (@group.mul_one.{u} α c))))
    (@has_inv.inv.{u} α (@has_inv.mk.{u} α (@group.inv.{u} α c)) a) a)
  (@has_one.one.{u} α
    (@monoid.to_has_one.{u} α
      (@monoid.mk.{u} α (@group.mul.{u} α c) (@group.mul_assoc.{u} α c)
        (@group.one.{u} α c) (@group.one_mul.{u} α c)
        (@group.mul_one.{u} α c)))),λ (α : Type u) [c : @group.{u} α],
@group.rec.{0 u} α
  (λ [c_0 : @group.{u} α],
  ∀ (a : α),
  @eq.{u+1} α
    (@has_mul.mul.{u} α
      (@semigroup.to_has_mul.{u} α
        (@monoid.to_semigroup.{u} α
          (@monoid.mk.{u} α (@group.mul.{u} α c_0) (@group.mul_assoc.{u} α c_0)
            (@group.one.{u} α c_0) (@group.one_mul.{u} α c_0)
            (@group.mul_one.{u} α c_0))))
      (@has_inv.inv.{u} α (@has_inv.mk.{u} α (@group.inv.{u} α c_0)) a) a)
    (@has_one.one.{u} α
      (@monoid.to_has_one.{u} α
        (@monoid.mk.{u} α (@group.mul.{u} α c_0) (@group.mul_assoc.{u} α c_0)
          (@group.one.{u} α c_0) (@group.one_mul.{u} α c_0)
          (@group.mul_one.{u} α c_0)))))
  (λ (mul : (∀ (a a_0 : α), α))
    (mul_assoc :
      (∀ (a b c_0 : α),
      @eq.{u+1} α
        (@has_mul.mul.{u} α (@has_mul.mk.{u} α mul)
          (@has_mul.mul.{u} α (@has_mul.mk.{u} α mul) a b) c_0)
        (@has_mul.mul.{u} α (@has_mul.mk.{u} α mul) a
          (@has_mul.mul.{u} α (@has_mul.mk.{u} α mul) b c_0)))) (one : α)
    (one_mul :
      (∀ (a : α),
      @eq.{u+1} α
        (@has_mul.mul.{u} α
          (@semigroup.to_has_mul.{u} α (@semigroup.mk.{u} α mul mul_assoc))
          (@has_one.one.{u} α (@has_one.mk.{u} α one)) a) a))
    (mul_one :
      (∀ (a : α),
      @eq.{u+1} α
        (@has_mul.mul.{u} α
          (@semigroup.to_has_mul.{u} α (@semigroup.mk.{u} α mul mul_assoc)) a
          (@has_one.one.{u} α (@has_one.mk.{u} α one))) a))
    (inv : (∀ (a : α), α))
    (mul_left_inv :
      (∀ (a : α),
      @eq.{u+1} α
        (@has_mul.mul.{u} α
          (@semigroup.to_has_mul.{u} α
            (@monoid.to_semigroup.{u} α
              (@monoid.mk.{u} α mul mul_assoc one one_mul mul_one)))
          (@has_inv.inv.{u} α (@has_inv.mk.{u} α inv) a) a)
        (@has_one.one.{u} α
          (@monoid.to_has_one.{u} α
            (@monoid.mk.{u} α mul mul_assoc one one_mul mul_one))))),
  mul_left_inv) c,0))"
err: "provingground.interface.UnParsedException: could not parse expression @group.{u}"

mod: "DefMod(Definition(mul_left_inv,Vector(Param(u)),∀ {α : Type u} [inst_1 : @group.{u} α] (a : α),
@eq.{u+1} α
  (@has_mul.mul.{u} α
    (@semigroup.to_has_mul.{u} α
      (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1)))
    (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) a) a)
  (@has_one.one.{u} α
    (@monoid.to_has_one.{u} α (@group.to_monoid.{u} α inst_1))),λ {α : Type u} [inst_1 : @group.{u} α], @group.mul_left_inv.{u} α inst_1,0))"
err: "provingground.interface.UnParsedException: could not parse expression @group.{u}"

mod: "DefMod(Definition(monoid.mul_one,Vector(Param(u)),∀ {α : Type u} [c : @monoid.{u} α] (a : α),
@eq.{u+1} α
  (@has_mul.mul.{u} α
    (@semigroup.to_has_mul.{u} α
      (@semigroup.mk.{u} α (@monoid.mul.{u} α c) (@monoid.mul_assoc.{u} α c))) a
    (@has_one.one.{u} α (@has_one.mk.{u} α (@monoid.one.{u} α c)))) a,λ (α : Type u) [c : @monoid.{u} α],
@monoid.rec.{0 u} α
  (λ [c_0 : @monoid.{u} α],
  ∀ (a : α),
  @eq.{u+1} α
    (@has_mul.mul.{u} α
      (@semigroup.to_has_mul.{u} α
        (@semigroup.mk.{u} α (@monoid.mul.{u} α c_0)
          (@monoid.mul_assoc.{u} α c_0))) a
      (@has_one.one.{u} α (@has_one.mk.{u} α (@monoid.one.{u} α c_0)))) a)
  (λ (mul : (∀ (a a_0 : α), α))
    (mul_assoc :
      (∀ (a b c_0 : α),
      @eq.{u+1} α
        (@has_mul.mul.{u} α (@has_mul.mk.{u} α mul)
          (@has_mul.mul.{u} α (@has_mul.mk.{u} α mul) a b) c_0)
        (@has_mul.mul.{u} α (@has_mul.mk.{u} α mul) a
          (@has_mul.mul.{u} α (@has_mul.mk.{u} α mul) b c_0)))) (one : α)
    (one_mul :
      (∀ (a : α),
      @eq.{u+1} α
        (@has_mul.mul.{u} α
          (@semigroup.to_has_mul.{u} α (@semigroup.mk.{u} α mul mul_assoc))
          (@has_one.one.{u} α (@has_one.mk.{u} α one)) a) a))
    (mul_one :
      (∀ (a : α),
      @eq.{u+1} α
        (@has_mul.mul.{u} α
          (@semigroup.to_has_mul.{u} α (@semigroup.mk.{u} α mul mul_assoc)) a
          (@has_one.one.{u} α (@has_one.mk.{u} α one))) a)),
  mul_one) c,0))"
err: "provingground.interface.UnParsedException: could not parse expression @monoid.mul_assoc.{u}"

mod: "DefMod(Definition(mul_one,Vector(Param(u)),∀ {α : Type u} [inst_1 : @monoid.{u} α] (a : α),
@eq.{u+1} α
  (@has_mul.mul.{u} α
    (@semigroup.to_has_mul.{u} α (@monoid.to_semigroup.{u} α inst_1)) a
    (@has_one.one.{u} α (@monoid.to_has_one.{u} α inst_1))) a,λ {α : Type u} [inst_1 : @monoid.{u} α], @monoid.mul_one.{u} α inst_1,0))"
err: "provingground.interface.UnParsedException: could not parse expression @monoid.mul_one.{u}"

mod: "DefMod(Definition(inv_mul_cancel_right,Vector(Param(u)),∀ {α : Type u} [inst_1 : @group.{u} α] (a b : α),
@eq.{u+1} α
  (@has_mul.mul.{u} α
    (@semigroup.to_has_mul.{u} α
      (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1)))
    (@has_mul.mul.{u} α
      (@semigroup.to_has_mul.{u} α
        (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1))) a
      (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) b)) b) a,λ {α : Type u} [inst_1 : @group.{u} α] (a b : α),
@eq.mpr.{0}
  (@eq.{u+1} α
    (@has_mul.mul.{u} α
      (@semigroup.to_has_mul.{u} α
        (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1)))
      (@has_mul.mul.{u} α
        (@semigroup.to_has_mul.{u} α
          (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1))) a
        (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) b)) b) a) @true
  (@id_locked.{0}
    (@eq.{1} Prop
      (@eq.{u+1} α
        (@has_mul.mul.{u} α
          (@semigroup.to_has_mul.{u} α
            (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1)))
          (@has_mul.mul.{u} α
            (@semigroup.to_has_mul.{u} α
              (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1))) a
            (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) b)) b) a)
      @true)
    (@eq.trans.{1} Prop
      (@eq.{u+1} α
        (@has_mul.mul.{u} α
          (@semigroup.to_has_mul.{u} α
            (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1)))
          (@has_mul.mul.{u} α
            (@semigroup.to_has_mul.{u} α
              (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1))) a
            (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) b)) b) a)
      (@eq.{u+1} α a a) @true
      ((λ (a_0 a_1 : α) (e_1 : @eq.{u+1} α a_0 a_1) (a_2 a_3 : α)
          (e_2 : @eq.{u+1} α a_2 a_3),
        @congr.{u+1 1} α Prop (@eq.{u+1} α a_0) (@eq.{u+1} α a_1) a_2 a_3
          (@congr_arg.{u+1 max (u+1) 1} α (∀ (a_4 : α), Prop) a_0 a_1
            (@eq.{u+1} α) e_1) e_2)
        (@has_mul.mul.{u} α
          (@semigroup.to_has_mul.{u} α
            (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1)))
          (@has_mul.mul.{u} α
            (@semigroup.to_has_mul.{u} α
              (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1))) a
            (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) b)) b) a
        (@eq.trans.{u+1} α
          (@has_mul.mul.{u} α
            (@semigroup.to_has_mul.{u} α
              (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1)))
            (@has_mul.mul.{u} α
              (@semigroup.to_has_mul.{u} α
                (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1))) a
              (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) b)) b)
          (@has_mul.mul.{u} α
            (@semigroup.to_has_mul.{u} α
              (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1))) a
            (@has_one.one.{u} α
              (@monoid.to_has_one.{u} α (@group.to_monoid.{u} α inst_1)))) a
          (@eq.trans.{u+1} α
            (@has_mul.mul.{u} α
              (@semigroup.to_has_mul.{u} α
                (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1)))
              (@has_mul.mul.{u} α
                (@semigroup.to_has_mul.{u} α
                  (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1)))
                a (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) b)) b)
            (@has_mul.mul.{u} α
              (@semigroup.to_has_mul.{u} α
                (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1))) a
              (@has_mul.mul.{u} α
                (@semigroup.to_has_mul.{u} α
                  (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1)))
                (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) b) b))
            (@has_mul.mul.{u} α
              (@semigroup.to_has_mul.{u} α
                (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1))) a
              (@has_one.one.{u} α
                (@monoid.to_has_one.{u} α (@group.to_monoid.{u} α inst_1))))
            (@mul_assoc.{u} α
              (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1)) a
              (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) b) b)
            ((λ [c : @has_mul.{u} α] (a_0 a_1 : α) (e_2 : @eq.{u+1} α a_0 a_1)
                (a_2 a_3 : α) (e_3 : @eq.{u+1} α a_2 a_3),
              @congr.{u+1 u+1} α α (@has_mul.mul.{u} α c a_0)
                (@has_mul.mul.{u} α c a_1) a_2 a_3
                (@congr_arg.{u+1 u+1} α (∀ (a_4 : α), α) a_0 a_1
                  (@has_mul.mul.{u} α c) e_2) e_3)
              (@semigroup.to_has_mul.{u} α
                (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1))) a
              a (@eq.refl.{u+1} α a)
              (@has_mul.mul.{u} α
                (@semigroup.to_has_mul.{u} α
                  (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1)))
                (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) b) b)
              (@has_one.one.{u} α
                (@monoid.to_has_one.{u} α (@group.to_monoid.{u} α inst_1)))
              (@mul_left_inv.{u} α inst_1 b)))
          (@mul_one.{u} α (@group.to_monoid.{u} α inst_1) a)) a a
        (@eq.refl.{u+1} α a))
      (@propext (@eq.{u+1} α a a) @true (@eq_self_iff_true.{u+1} α a))))
  @trivial,0))"
err: "provingground.interface.UnParsedException: could not parse expression @group.{u}"

mod: "DefMod(Definition(subrelation.accessible,Vector(Param(u)),∀ {α : Sort u} {r Q : (∀ (a_0 a_1 : α), Prop)} (h : @subrelation.{u} α Q r)
  {a : α} (ac : @acc.{u} α r a),
@acc.{u} α Q a,λ {α : Sort u} {r Q : (∀ (a_0 a_1 : α), Prop)} (h : @subrelation.{u} α Q r)
  {a : α} (ac : @acc.{u} α r a),
@acc.rec_on.{0 u} α r (λ (x : α), @acc.{u} α Q x) a ac
  (λ (x : α) (ax : (∀ (y : α) (a_0 : r y x), @acc.{u} α r y))
    (ih : (∀ (y : α) (a_0 : r y x), @acc.{u} α Q y)),
  @acc.intro.{u} α Q x (λ (y : α) (lt : Q y x), ih y (h y x lt))),0))"
err: "provingground.interface.UnParsedException: could not parse expression @acc.rec_on.{0 u}"

mod: "DefMod(Definition(subrelation.wf,Vector(Param(u)),∀ {α : Sort u} {r Q : (∀ (a a_0 : α), Prop)} (h : @subrelation.{u} α Q r)
  (h_0 : @well_founded.{u} α r),
@well_founded.{u} α Q,λ {α : Sort u} {r Q : (∀ (a a_0 : α), Prop)} (h : @subrelation.{u} α Q r)
  (h_0 : @well_founded.{u} α r),
@well_founded.intro.{u} α Q
  (λ (a : α),
  @subrelation.accessible.{u} α r Q h a (@well_founded.apply.{u} α r h_0 a)),0))"
err: "provingground.interface.UnParsedException: could not parse expression @subrelation.accessible.{u}"

mod: "DefMod(Definition(prod.lex_accessible,Vector(Param(u), Param(v)),∀ {α : Type u} {β : Type v} {ra : (∀ (a_0 a_1 : α), Prop)}
  {rb : (∀ (a_0 a_1 : β), Prop)} {a : α} (aca : @acc.{u+1} α ra a)
  (acb : (∀ (b_0 : β), @acc.{v+1} β rb b_0)) (b : β),
@acc.{max (u+1) (v+1)} (@prod.{u v} α β) (@prod.lex.{u v} α β ra rb)
  (@prod.mk.{u v} α β a b),λ {α : Type u} {β : Type v} {ra : (∀ (a_0 a_1 : α), Prop)}
  {rb : (∀ (a_0 a_1 : β), Prop)} {a : α} (aca : @acc.{u+1} α ra a)
  (acb : (∀ (b : β), @acc.{v+1} β rb b)),
@acc.rec_on.{0 u+1} α ra
  (λ (x : α),
  ∀ (b : β),
  @acc.{max (u+1) (v+1)} (@prod.{u v} α β) (@prod.lex.{u v} α β ra rb)
    (@prod.mk.{u v} α β x b)) a aca
  (λ (xa : α) (aca_0 : (∀ (y : α) (a_0 : ra y xa), @acc.{u+1} α ra y))
    (iha :
      (∀ (y : α) (a_0 : ra y xa) (b_0 : β),
      @acc.{max (u+1) (v+1)} (@prod.{u v} α β) (@prod.lex.{u v} α β ra rb)
        (@prod.mk.{u v} α β y b_0))) (b : β),
  @acc.rec_on.{0 v+1} β rb
    (λ (x : β),
    @acc.{max (u+1) (v+1)} (@prod.{u v} α β) (@prod.lex.{u v} α β ra rb)
      (@prod.mk.{u v} α β xa x)) b (acb b)
    (λ (xb : β) (acb_0 : (∀ (y : β) (a_0 : rb y xb), @acc.{v+1} β rb y))
      (ihb :
        (∀ (y : β) (a_0 : rb y xb),
        @acc.{max (u+1) (v+1)} (@prod.{u v} α β) (@prod.lex.{u v} α β ra rb)
          (@prod.mk.{u v} α β xa y))),
    @acc.intro.{max (u+1) (v+1)} (@prod.{u v} α β) (@prod.lex.{u v} α β ra rb)
      (@prod.mk.{u v} α β xa xb)
      (λ (p : @prod.{u v} α β)
        (lt : @prod.lex.{u v} α β ra rb p (@prod.mk.{u v} α β xa xb)),
      (λ (aux :
            (∀ (a_0 : @eq.{u+1} α xa xa) (a_1 : @eq.{v+1} β xb xb),
            @acc.{max (u+1) (v+1)} (@prod.{u v} α β) (@prod.lex.{u v} α β ra rb)
              p)),
        aux (@rfl.{u+1} α xa) (@rfl.{v+1} β xb))
        (@prod.lex.rec_on.{u v} α β ra rb
          (λ (p_0 p_1 : @prod.{u v} α β),
          ∀ (a_0 : @eq.{u+1} α (@prod.fst.{u v} α β p_1) xa)
            (a_1 : @eq.{v+1} β (@prod.snd.{u v} α β p_1) xb),
          @acc.{max (u+1) (v+1)} (@prod.{u v} α β) (@prod.lex.{u v} α β ra rb)
            p_0) p (@prod.mk.{u v} α β xa xb) lt
          (λ (a_0 : α) (b_0 : β) (a_1 : α) (b_1 : β) (h : ra a_0 a_1)
            (eq : @eq.{u+1} α a_1 xa) (eq_0 : @eq.{v+1} β b_1 xb),
          iha a_0 (@eq.rec_on.{0 u+1} α a_1 (λ (x : α), ra a_0 x) xa eq h) b_0)
          (λ (a_0 : α) (b_0 b_1 : β) (h : rb b_0 b_1) (eq : @eq.{u+1} α a_0 xa)
            (eq_0 : @eq.{v+1} β b_1 xb),
          @eq.rec_on.{0 u+1} α xa
            (λ (x : α),
            @acc.{max (u+1) (v+1)} (@prod.{u v} α β) (@prod.lex.{u v} α β ra rb)
              (@prod.mk.{u v} α β x b_0)) a_0 (@eq.symm.{u+1} α a_0 xa eq)
            (ihb b_0
              (@eq.rec_on.{0 v+1} β b_1 (λ (x : β), rb b_0 x) xb eq_0 h))))))),0))"
err: "provingground.interface.UnParsedException: could not parse expression @acc.rec_on.{0 u+1}"

mod: "DefMod(Definition(prod.lex_wf,Vector(Param(u), Param(v)),∀ {α : Type u} {β : Type v} {ra : (∀ (a a_0 : α), Prop)}
  {rb : (∀ (a a_0 : β), Prop)} (ha : @well_founded.{u+1} α ra)
  (hb : @well_founded.{v+1} β rb),
@well_founded.{max (u+1) (v+1)} (@prod.{u v} α β) (@prod.lex.{u v} α β ra rb),λ {α : Type u} {β : Type v} {ra : (∀ (a a_0 : α), Prop)}
  {rb : (∀ (a a_0 : β), Prop)} (ha : @well_founded.{u+1} α ra)
  (hb : @well_founded.{v+1} β rb),
@well_founded.intro.{max (u+1) (v+1)} (@prod.{u v} α β)
  (@prod.lex.{u v} α β ra rb)
  (λ (p : @prod.{u v} α β),
  @prod.cases_on.{0 u v} α β
    (λ (x : @prod.{u v} α β),
    @acc.{max (u+1) (v+1)} (@prod.{u v} α β) (@prod.lex.{u v} α β ra rb) x) p
    (λ (a : α) (b : β),
    @prod.lex_accessible.{u v} α β ra rb a (@well_founded.apply.{u+1} α ra ha a)
      (@well_founded.apply.{v+1} β rb hb) b)),0))"
err: "provingground.interface.UnParsedException: could not parse expression @prod.lex_accessible.{u v}"

mod: "DefMod(Definition(prod.rprod_wf,Vector(Param(u), Param(v)),∀ {α : Type u} {β : Type v} {ra : (∀ (a a_0 : α), Prop)}
  {rb : (∀ (a a_0 : β), Prop)} (ha : @well_founded.{u+1} α ra)
  (hb : @well_founded.{v+1} β rb),
@well_founded.{max (u+1) (v+1)} (@prod.{u v} α β) (@prod.rprod.{u v} α β ra rb),λ {α : Type u} {β : Type v} {ra : (∀ (a a_0 : α), Prop)}
  {rb : (∀ (a a_0 : β), Prop)} (ha : @well_founded.{u+1} α ra)
  (hb : @well_founded.{v+1} β rb),
@subrelation.wf.{max (u+1) (v+1)} (@prod.{u v} α β)
  (λ (a b : @prod.{u v} α β), @prod.lex.{u v} α β ra rb a b)
  (@prod.rprod.{u v} α β ra rb) (@prod.rprod_sub_lex.{u v} α β ra rb)
  (@prod.lex_wf.{u v} α β ra rb ha hb),0))"
err: "provingground.interface.UnParsedException: could not parse expression @prod.lex_wf.{u v}"

mod: "DefMod(Definition(prod.rprod_wf.equations._eqn_1,Vector(Param(u), Param(v)),∀ {α : Type u} {β : Type v} {ra : (∀ (a a_0 : α), Prop)}
  {rb : (∀ (a a_0 : β), Prop)} (ha : @well_founded.{u+1} α ra)
  (hb : @well_founded.{v+1} β rb),
@eq.{0}
  (@well_founded.{max (u+1) (v+1)} (@prod.{u v} α β)
    (@prod.rprod.{u v} α β ra rb)) (@prod.rprod_wf.{u v} α β ra rb ha hb)
  (@subrelation.wf.{max (u+1) (v+1)} (@prod.{u v} α β)
    (λ (a b : @prod.{u v} α β), @prod.lex.{u v} α β ra rb a b)
    (@prod.rprod.{u v} α β ra rb) (@prod.rprod_sub_lex.{u v} α β ra rb)
    (@prod.lex_wf.{u v} α β ra rb ha hb)),λ {α : Type u} {β : Type v} {ra : (∀ (a a_0 : α), Prop)}
  {rb : (∀ (a a_0 : β), Prop)} (ha : @well_founded.{u+1} α ra)
  (hb : @well_founded.{v+1} β rb),
@eq.refl.{0}
  (@well_founded.{max (u+1) (v+1)} (@prod.{u v} α β)
    (@prod.rprod.{u v} α β ra rb)) (@prod.rprod_wf.{u v} α β ra rb ha hb),0))"
err: "provingground.interface.UnParsedException: could not parse expression @prod.rprod_wf.{u v}"

mod: "DefMod(Definition(monoid.one_mul,Vector(Param(u)),∀ {α : Type u} [c : @monoid.{u} α] (a : α),
@eq.{u+1} α
  (@has_mul.mul.{u} α
    (@semigroup.to_has_mul.{u} α
      (@semigroup.mk.{u} α (@monoid.mul.{u} α c) (@monoid.mul_assoc.{u} α c)))
    (@has_one.one.{u} α (@has_one.mk.{u} α (@monoid.one.{u} α c))) a) a,λ (α : Type u) [c : @monoid.{u} α],
@monoid.rec.{0 u} α
  (λ [c_0 : @monoid.{u} α],
  ∀ (a : α),
  @eq.{u+1} α
    (@has_mul.mul.{u} α
      (@semigroup.to_has_mul.{u} α
        (@semigroup.mk.{u} α (@monoid.mul.{u} α c_0)
          (@monoid.mul_assoc.{u} α c_0)))
      (@has_one.one.{u} α (@has_one.mk.{u} α (@monoid.one.{u} α c_0))) a) a)
  (λ (mul : (∀ (a a_0 : α), α))
    (mul_assoc :
      (∀ (a b c_0 : α),
      @eq.{u+1} α
        (@has_mul.mul.{u} α (@has_mul.mk.{u} α mul)
          (@has_mul.mul.{u} α (@has_mul.mk.{u} α mul) a b) c_0)
        (@has_mul.mul.{u} α (@has_mul.mk.{u} α mul) a
          (@has_mul.mul.{u} α (@has_mul.mk.{u} α mul) b c_0)))) (one : α)
    (one_mul :
      (∀ (a : α),
      @eq.{u+1} α
        (@has_mul.mul.{u} α
          (@semigroup.to_has_mul.{u} α (@semigroup.mk.{u} α mul mul_assoc))
          (@has_one.one.{u} α (@has_one.mk.{u} α one)) a) a))
    (mul_one :
      (∀ (a : α),
      @eq.{u+1} α
        (@has_mul.mul.{u} α
          (@semigroup.to_has_mul.{u} α (@semigroup.mk.{u} α mul mul_assoc)) a
          (@has_one.one.{u} α (@has_one.mk.{u} α one))) a)),
  one_mul) c,0))"
err: "provingground.interface.UnParsedException: could not parse expression @monoid.mul_assoc.{u}"

mod: "DefMod(Definition(one_mul,Vector(Param(u)),∀ {α : Type u} [inst_1 : @monoid.{u} α] (a : α),
@eq.{u+1} α
  (@has_mul.mul.{u} α
    (@semigroup.to_has_mul.{u} α (@monoid.to_semigroup.{u} α inst_1))
    (@has_one.one.{u} α (@monoid.to_has_one.{u} α inst_1)) a) a,λ {α : Type u} [inst_1 : @monoid.{u} α], @monoid.one_mul.{u} α inst_1,0))"
err: "provingground.interface.UnParsedException: could not parse expression @monoid.one_mul.{u}"

mod: "DefMod(Definition(inv_eq_of_mul_eq_one,Vector(Param(u)),∀ {α : Type u} [inst_1 : @group.{u} α] {a b : α}
  (h :
    @eq.{u+1} α
      (@has_mul.mul.{u} α
        (@semigroup.to_has_mul.{u} α
          (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1))) a b)
      (@has_one.one.{u} α
        (@monoid.to_has_one.{u} α (@group.to_monoid.{u} α inst_1)))),
@eq.{u+1} α (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) a) b,λ {α : Type u} [inst_1 : @group.{u} α] {a b : α}
  (h :
    @eq.{u+1} α
      (@has_mul.mul.{u} α
        (@semigroup.to_has_mul.{u} α
          (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1))) a b)
      (@has_one.one.{u} α
        (@monoid.to_has_one.{u} α (@group.to_monoid.{u} α inst_1)))),
@eq.mpr.{0}
  (@eq.{u+1} α (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) a) b)
  (@eq.{u+1} α
    (@has_mul.mul.{u} α
      (@semigroup.to_has_mul.{u} α
        (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1)))
      (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) a)
      (@has_one.one.{u} α
        (@monoid.to_has_one.{u} α (@group.to_monoid.{u} α inst_1)))) b)
  (@id_locked.{0}
    (@eq.{1} Prop
      (@eq.{u+1} α (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) a) b)
      (@eq.{u+1} α
        (@has_mul.mul.{u} α
          (@semigroup.to_has_mul.{u} α
            (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1)))
          (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) a)
          (@has_one.one.{u} α
            (@monoid.to_has_one.{u} α (@group.to_monoid.{u} α inst_1)))) b))
    (@eq.rec.{0 u+1} α (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) a)
      (λ (a_0 : α),
      @eq.{1} Prop
        (@eq.{u+1} α (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) a) b)
        (@eq.{u+1} α a_0 b))
      (@eq.refl.{1} Prop
        (@eq.{u+1} α (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) a) b))
      (@has_mul.mul.{u} α
        (@semigroup.to_has_mul.{u} α
          (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1)))
        (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) a)
        (@has_one.one.{u} α
          (@monoid.to_has_one.{u} α (@group.to_monoid.{u} α inst_1))))
      (@eq.symm.{u+1} α
        (@has_mul.mul.{u} α
          (@semigroup.to_has_mul.{u} α
            (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1)))
          (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) a)
          (@has_one.one.{u} α
            (@monoid.to_has_one.{u} α (@group.to_monoid.{u} α inst_1))))
        (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) a)
        (@mul_one.{u} α (@group.to_monoid.{u} α inst_1)
          (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) a)))))
  (@eq.mpr.{0}
    (@eq.{u+1} α
      (@has_mul.mul.{u} α
        (@semigroup.to_has_mul.{u} α
          (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1)))
        (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) a)
        (@has_one.one.{u} α
          (@monoid.to_has_one.{u} α (@group.to_monoid.{u} α inst_1)))) b)
    (@eq.{u+1} α
      (@has_mul.mul.{u} α
        (@semigroup.to_has_mul.{u} α
          (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1)))
        (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) a)
        (@has_mul.mul.{u} α
          (@semigroup.to_has_mul.{u} α
            (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1))) a b))
      b)
    (@id_locked.{0}
      (@eq.{1} Prop
        (@eq.{u+1} α
          (@has_mul.mul.{u} α
            (@semigroup.to_has_mul.{u} α
              (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1)))
            (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) a)
            (@has_one.one.{u} α
              (@monoid.to_has_one.{u} α (@group.to_monoid.{u} α inst_1)))) b)
        (@eq.{u+1} α
          (@has_mul.mul.{u} α
            (@semigroup.to_has_mul.{u} α
              (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1)))
            (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) a)
            (@has_mul.mul.{u} α
              (@semigroup.to_has_mul.{u} α
                (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1))) a
              b)) b))
      (@eq.rec.{0 u+1} α
        (@has_one.one.{u} α
          (@monoid.to_has_one.{u} α (@group.to_monoid.{u} α inst_1)))
        (λ (a_0 : α),
        @eq.{1} Prop
          (@eq.{u+1} α
            (@has_mul.mul.{u} α
              (@semigroup.to_has_mul.{u} α
                (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1)))
              (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) a)
              (@has_one.one.{u} α
                (@monoid.to_has_one.{u} α (@group.to_monoid.{u} α inst_1)))) b)
          (@eq.{u+1} α
            (@has_mul.mul.{u} α
              (@semigroup.to_has_mul.{u} α
                (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1)))
              (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) a) a_0) b))
        (@eq.refl.{1} Prop
          (@eq.{u+1} α
            (@has_mul.mul.{u} α
              (@semigroup.to_has_mul.{u} α
                (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1)))
              (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) a)
              (@has_one.one.{u} α
                (@monoid.to_has_one.{u} α (@group.to_monoid.{u} α inst_1)))) b))
        (@has_mul.mul.{u} α
          (@semigroup.to_has_mul.{u} α
            (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1))) a b)
        (@eq.symm.{u+1} α
          (@has_mul.mul.{u} α
            (@semigroup.to_has_mul.{u} α
              (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1))) a b)
          (@has_one.one.{u} α
            (@monoid.to_has_one.{u} α (@group.to_monoid.{u} α inst_1))) h)))
    (@eq.mpr.{0}
      (@eq.{u+1} α
        (@has_mul.mul.{u} α
          (@semigroup.to_has_mul.{u} α
            (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1)))
          (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) a)
          (@has_mul.mul.{u} α
            (@semigroup.to_has_mul.{u} α
              (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1))) a
            b)) b)
      (@eq.{u+1} α
        (@has_mul.mul.{u} α
          (@semigroup.to_has_mul.{u} α
            (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1)))
          (@has_mul.mul.{u} α
            (@semigroup.to_has_mul.{u} α
              (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1)))
            (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) a) a) b) b)
      (@id_locked.{0}
        (@eq.{1} Prop
          (@eq.{u+1} α
            (@has_mul.mul.{u} α
              (@semigroup.to_has_mul.{u} α
                (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1)))
              (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) a)
              (@has_mul.mul.{u} α
                (@semigroup.to_has_mul.{u} α
                  (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1)))
                a b)) b)
          (@eq.{u+1} α
            (@has_mul.mul.{u} α
              (@semigroup.to_has_mul.{u} α
                (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1)))
              (@has_mul.mul.{u} α
                (@semigroup.to_has_mul.{u} α
                  (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1)))
                (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) a) a) b)
            b))
        (@eq.rec.{0 u+1} α
          (@has_mul.mul.{u} α
            (@semigroup.to_has_mul.{u} α
              (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1)))
            (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) a)
            (@has_mul.mul.{u} α
              (@semigroup.to_has_mul.{u} α
                (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1))) a
              b))
          (λ (a_0 : α),
          @eq.{1} Prop
            (@eq.{u+1} α
              (@has_mul.mul.{u} α
                (@semigroup.to_has_mul.{u} α
                  (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1)))
                (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) a)
                (@has_mul.mul.{u} α
                  (@semigroup.to_has_mul.{u} α
                    (@monoid.to_semigroup.{u} α
                      (@group.to_monoid.{u} α inst_1))) a b)) b)
            (@eq.{u+1} α a_0 b))
          (@eq.refl.{1} Prop
            (@eq.{u+1} α
              (@has_mul.mul.{u} α
                (@semigroup.to_has_mul.{u} α
                  (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1)))
                (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) a)
                (@has_mul.mul.{u} α
                  (@semigroup.to_has_mul.{u} α
                    (@monoid.to_semigroup.{u} α
                      (@group.to_monoid.{u} α inst_1))) a b)) b))
          (@has_mul.mul.{u} α
            (@semigroup.to_has_mul.{u} α
              (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1)))
            (@has_mul.mul.{u} α
              (@semigroup.to_has_mul.{u} α
                (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1)))
              (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) a) a) b)
          (@eq.symm.{u+1} α
            (@has_mul.mul.{u} α
              (@semigroup.to_has_mul.{u} α
                (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1)))
              (@has_mul.mul.{u} α
                (@semigroup.to_has_mul.{u} α
                  (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1)))
                (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) a) a) b)
            (@has_mul.mul.{u} α
              (@semigroup.to_has_mul.{u} α
                (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1)))
              (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) a)
              (@has_mul.mul.{u} α
                (@semigroup.to_has_mul.{u} α
                  (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1)))
                a b))
            (@mul_assoc.{u} α
              (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1))
              (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) a) a b))))
      (@eq.mpr.{0}
        (@eq.{u+1} α
          (@has_mul.mul.{u} α
            (@semigroup.to_has_mul.{u} α
              (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1)))
            (@has_mul.mul.{u} α
              (@semigroup.to_has_mul.{u} α
                (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1)))
              (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) a) a) b) b)
        (@eq.{u+1} α
          (@has_mul.mul.{u} α
            (@semigroup.to_has_mul.{u} α
              (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1)))
            (@has_one.one.{u} α
              (@monoid.to_has_one.{u} α (@group.to_monoid.{u} α inst_1))) b) b)
        (@id_locked.{0}
          (@eq.{1} Prop
            (@eq.{u+1} α
              (@has_mul.mul.{u} α
                (@semigroup.to_has_mul.{u} α
                  (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1)))
                (@has_mul.mul.{u} α
                  (@semigroup.to_has_mul.{u} α
                    (@monoid.to_semigroup.{u} α
                      (@group.to_monoid.{u} α inst_1)))
                  (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) a) a) b)
              b)
            (@eq.{u+1} α
              (@has_mul.mul.{u} α
                (@semigroup.to_has_mul.{u} α
                  (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1)))
                (@has_one.one.{u} α
                  (@monoid.to_has_one.{u} α (@group.to_monoid.{u} α inst_1))) b)
              b))
          (@eq.rec.{0 u+1} α
            (@has_mul.mul.{u} α
              (@semigroup.to_has_mul.{u} α
                (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1)))
              (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) a) a)
            (λ (a_0 : α),
            @eq.{1} Prop
              (@eq.{u+1} α
                (@has_mul.mul.{u} α
                  (@semigroup.to_has_mul.{u} α
                    (@monoid.to_semigroup.{u} α
                      (@group.to_monoid.{u} α inst_1)))
                  (@has_mul.mul.{u} α
                    (@semigroup.to_has_mul.{u} α
                      (@monoid.to_semigroup.{u} α
                        (@group.to_monoid.{u} α inst_1)))
                    (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) a) a)
                  b) b)
              (@eq.{u+1} α
                (@has_mul.mul.{u} α
                  (@semigroup.to_has_mul.{u} α
                    (@monoid.to_semigroup.{u} α
                      (@group.to_monoid.{u} α inst_1))) a_0 b) b))
            (@eq.refl.{1} Prop
              (@eq.{u+1} α
                (@has_mul.mul.{u} α
                  (@semigroup.to_has_mul.{u} α
                    (@monoid.to_semigroup.{u} α
                      (@group.to_monoid.{u} α inst_1)))
                  (@has_mul.mul.{u} α
                    (@semigroup.to_has_mul.{u} α
                      (@monoid.to_semigroup.{u} α
                        (@group.to_monoid.{u} α inst_1)))
                    (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) a) a)
                  b) b))
            (@has_one.one.{u} α
              (@monoid.to_has_one.{u} α (@group.to_monoid.{u} α inst_1)))
            (@mul_left_inv.{u} α inst_1 a)))
        (@eq.mpr.{0}
          (@eq.{u+1} α
            (@has_mul.mul.{u} α
              (@semigroup.to_has_mul.{u} α
                (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1)))
              (@has_one.one.{u} α
                (@monoid.to_has_one.{u} α (@group.to_monoid.{u} α inst_1))) b)
            b) (@eq.{u+1} α b b)
          (@id_locked.{0}
            (@eq.{1} Prop
              (@eq.{u+1} α
                (@has_mul.mul.{u} α
                  (@semigroup.to_has_mul.{u} α
                    (@monoid.to_semigroup.{u} α
                      (@group.to_monoid.{u} α inst_1)))
                  (@has_one.one.{u} α
                    (@monoid.to_has_one.{u} α (@group.to_monoid.{u} α inst_1)))
                  b) b) (@eq.{u+1} α b b))
            (@eq.rec.{0 u+1} α
              (@has_mul.mul.{u} α
                (@semigroup.to_has_mul.{u} α
                  (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1)))
                (@has_one.one.{u} α
                  (@monoid.to_has_one.{u} α (@group.to_monoid.{u} α inst_1))) b)
              (λ (a_0 : α),
              @eq.{1} Prop
                (@eq.{u+1} α
                  (@has_mul.mul.{u} α
                    (@semigroup.to_has_mul.{u} α
                      (@monoid.to_semigroup.{u} α
                        (@group.to_monoid.{u} α inst_1)))
                    (@has_one.one.{u} α
                      (@monoid.to_has_one.{u} α
                        (@group.to_monoid.{u} α inst_1))) b) b)
                (@eq.{u+1} α a_0 b))
              (@eq.refl.{1} Prop
                (@eq.{u+1} α
                  (@has_mul.mul.{u} α
                    (@semigroup.to_has_mul.{u} α
                      (@monoid.to_semigroup.{u} α
                        (@group.to_monoid.{u} α inst_1)))
                    (@has_one.one.{u} α
                      (@monoid.to_has_one.{u} α
                        (@group.to_monoid.{u} α inst_1))) b) b)) b
              (@one_mul.{u} α (@group.to_monoid.{u} α inst_1) b)))
          (@eq.refl.{u+1} α b))))),0))"
err: "provingground.interface.UnParsedException: could not parse expression @group.{u}"

mod: "DefMod(Definition(inv_inv,Vector(Param(u)),∀ {α : Type u} [inst_1 : @group.{u} α] (a : α),
@eq.{u+1} α
  (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1)
    (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) a)) a,λ {α : Type u} [inst_1 : @group.{u} α] (a : α),
@inv_eq_of_mul_eq_one.{u} α inst_1
  (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) a) a
  (@mul_left_inv.{u} α inst_1 a),0))"
err: "provingground.interface.UnParsedException: could not parse expression @group.{u}"

mod: "DefMod(Definition(mul_right_inv,Vector(Param(u)),∀ {α : Type u} [inst_1 : @group.{u} α] (a : α),
@eq.{u+1} α
  (@has_mul.mul.{u} α
    (@semigroup.to_has_mul.{u} α
      (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1))) a
    (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) a))
  (@has_one.one.{u} α
    (@monoid.to_has_one.{u} α (@group.to_monoid.{u} α inst_1))),λ {α : Type u} [inst_1 : @group.{u} α] (a : α),
(λ (this :
      @eq.{u+1} α
        (@has_mul.mul.{u} α
          (@semigroup.to_has_mul.{u} α
            (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1)))
          (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1)
            (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) a))
          (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) a))
        (@has_one.one.{u} α
          (@monoid.to_has_one.{u} α (@group.to_monoid.{u} α inst_1)))),
  @eq.mp.{0}
    (@eq.{u+1} α
      (@has_mul.mul.{u} α
        (@semigroup.to_has_mul.{u} α
          (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1)))
        (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1)
          (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) a))
        (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) a))
      (@has_one.one.{u} α
        (@monoid.to_has_one.{u} α (@group.to_monoid.{u} α inst_1))))
    (@eq.{u+1} α
      (@has_mul.mul.{u} α
        (@semigroup.to_has_mul.{u} α
          (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1))) a
        (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) a))
      (@has_one.one.{u} α
        (@monoid.to_has_one.{u} α (@group.to_monoid.{u} α inst_1))))
    (@eq.rec.{0 u+1} α
      (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1)
        (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) a))
      (λ (a_0 : α),
      @eq.{1} Prop
        (@eq.{u+1} α
          (@has_mul.mul.{u} α
            (@semigroup.to_has_mul.{u} α
              (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1)))
            (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1)
              (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) a))
            (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) a))
          (@has_one.one.{u} α
            (@monoid.to_has_one.{u} α (@group.to_monoid.{u} α inst_1))))
        (@eq.{u+1} α
          (@has_mul.mul.{u} α
            (@semigroup.to_has_mul.{u} α
              (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1))) a_0
            (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) a))
          (@has_one.one.{u} α
            (@monoid.to_has_one.{u} α (@group.to_monoid.{u} α inst_1)))))
      (@eq.refl.{1} Prop
        (@eq.{u+1} α
          (@has_mul.mul.{u} α
            (@semigroup.to_has_mul.{u} α
              (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1)))
            (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1)
              (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) a))
            (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) a))
          (@has_one.one.{u} α
            (@monoid.to_has_one.{u} α (@group.to_monoid.{u} α inst_1))))) a
      (@inv_inv.{u} α inst_1 a)) this)
  (@eq.mpr.{0}
    (@eq.{u+1} α
      (@has_mul.mul.{u} α
        (@semigroup.to_has_mul.{u} α
          (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1)))
        (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1)
          (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) a))
        (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) a))
      (@has_one.one.{u} α
        (@monoid.to_has_one.{u} α (@group.to_monoid.{u} α inst_1))))
    (@eq.{u+1} α
      (@has_one.one.{u} α
        (@monoid.to_has_one.{u} α (@group.to_monoid.{u} α inst_1)))
      (@has_one.one.{u} α
        (@monoid.to_has_one.{u} α (@group.to_monoid.{u} α inst_1))))
    (@id_locked.{0}
      (@eq.{1} Prop
        (@eq.{u+1} α
          (@has_mul.mul.{u} α
            (@semigroup.to_has_mul.{u} α
              (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1)))
            (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1)
              (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) a))
            (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) a))
          (@has_one.one.{u} α
            (@monoid.to_has_one.{u} α (@group.to_monoid.{u} α inst_1))))
        (@eq.{u+1} α
          (@has_one.one.{u} α
            (@monoid.to_has_one.{u} α (@group.to_monoid.{u} α inst_1)))
          (@has_one.one.{u} α
            (@monoid.to_has_one.{u} α (@group.to_monoid.{u} α inst_1)))))
      (@eq.rec.{0 u+1} α
        (@has_mul.mul.{u} α
          (@semigroup.to_has_mul.{u} α
            (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1)))
          (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1)
            (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) a))
          (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) a))
        (λ (a_0 : α),
        @eq.{1} Prop
          (@eq.{u+1} α
            (@has_mul.mul.{u} α
              (@semigroup.to_has_mul.{u} α
                (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1)))
              (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1)
                (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) a))
              (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) a))
            (@has_one.one.{u} α
              (@monoid.to_has_one.{u} α (@group.to_monoid.{u} α inst_1))))
          (@eq.{u+1} α a_0
            (@has_one.one.{u} α
              (@monoid.to_has_one.{u} α (@group.to_monoid.{u} α inst_1)))))
        (@eq.refl.{1} Prop
          (@eq.{u+1} α
            (@has_mul.mul.{u} α
              (@semigroup.to_has_mul.{u} α
                (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1)))
              (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1)
                (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) a))
              (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) a))
            (@has_one.one.{u} α
              (@monoid.to_has_one.{u} α (@group.to_monoid.{u} α inst_1)))))
        (@has_one.one.{u} α
          (@monoid.to_has_one.{u} α (@group.to_monoid.{u} α inst_1)))
        (@mul_left_inv.{u} α inst_1
          (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) a))))
    (@eq.refl.{u+1} α
      (@has_one.one.{u} α
        (@monoid.to_has_one.{u} α (@group.to_monoid.{u} α inst_1))))),0))"
err: "provingground.interface.UnParsedException: could not parse expression @group.{u}"

mod: "DefMod(Definition(group.mul_right_cancel,Vector(Param(u)),∀ {α : Type u} [inst_1 : @group.{u} α] {a b c : α}
  (h :
    @eq.{u+1} α
      (@has_mul.mul.{u} α
        (@semigroup.to_has_mul.{u} α
          (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1))) a b)
      (@has_mul.mul.{u} α
        (@semigroup.to_has_mul.{u} α
          (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1))) c b)),
@eq.{u+1} α a c,λ {α : Type u} [inst_1 : @group.{u} α] {a b c : α}
  (h :
    @eq.{u+1} α
      (@has_mul.mul.{u} α
        (@semigroup.to_has_mul.{u} α
          (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1))) a b)
      (@has_mul.mul.{u} α
        (@semigroup.to_has_mul.{u} α
          (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1))) c b)),
(λ (this :
      @eq.{u+1} α
        (@has_mul.mul.{u} α
          (@semigroup.to_has_mul.{u} α
            (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1)))
          (@has_mul.mul.{u} α
            (@semigroup.to_has_mul.{u} α
              (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1))) a b)
          (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) b)) a),
  @eq.mpr.{0} (@eq.{u+1} α a c) (@eq.{u+1} α a a)
    (@id_locked.{0} (@eq.{1} Prop (@eq.{u+1} α a c) (@eq.{u+1} α a a))
      (@eq.rec.{0 u+1} α c
        (λ (a_0 : α), @eq.{1} Prop (@eq.{u+1} α a c) (@eq.{u+1} α a a_0))
        (@eq.refl.{1} Prop (@eq.{u+1} α a c)) a
        (@eq.mp.{0}
          (@eq.{u+1} α
            (@has_mul.mul.{u} α
              (@semigroup.to_has_mul.{u} α
                (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1)))
              (@has_mul.mul.{u} α
                (@semigroup.to_has_mul.{u} α
                  (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1)))
                a b) (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) b)) a)
          (@eq.{u+1} α c a)
          ((λ (a_0 a_1 : α) (e_1 : @eq.{u+1} α a_0 a_1) (a_2 a_3 : α)
              (e_2 : @eq.{u+1} α a_2 a_3),
            @congr.{u+1 1} α Prop (@eq.{u+1} α a_0) (@eq.{u+1} α a_1) a_2 a_3
              (@congr_arg.{u+1 max (u+1) 1} α (∀ (a_4 : α), Prop) a_0 a_1
                (@eq.{u+1} α) e_1) e_2)
            (@has_mul.mul.{u} α
              (@semigroup.to_has_mul.{u} α
                (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1)))
              (@has_mul.mul.{u} α
                (@semigroup.to_has_mul.{u} α
                  (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1)))
                a b) (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) b)) c
            (@eq.trans.{u+1} α
              (@has_mul.mul.{u} α
                (@semigroup.to_has_mul.{u} α
                  (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1)))
                (@has_mul.mul.{u} α
                  (@semigroup.to_has_mul.{u} α
                    (@monoid.to_semigroup.{u} α
                      (@group.to_monoid.{u} α inst_1))) a b)
                (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) b))
              (@has_mul.mul.{u} α
                (@semigroup.to_has_mul.{u} α
                  (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1)))
                c
                (@has_one.one.{u} α
                  (@monoid.to_has_one.{u} α (@group.to_monoid.{u} α inst_1)))) c
              (@eq.trans.{u+1} α
                (@has_mul.mul.{u} α
                  (@semigroup.to_has_mul.{u} α
                    (@monoid.to_semigroup.{u} α
                      (@group.to_monoid.{u} α inst_1)))
                  (@has_mul.mul.{u} α
                    (@semigroup.to_has_mul.{u} α
                      (@monoid.to_semigroup.{u} α
                        (@group.to_monoid.{u} α inst_1))) a b)
                  (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) b))
                (@has_mul.mul.{u} α
                  (@semigroup.to_has_mul.{u} α
                    (@monoid.to_semigroup.{u} α
                      (@group.to_monoid.{u} α inst_1))) c
                  (@has_mul.mul.{u} α
                    (@semigroup.to_has_mul.{u} α
                      (@monoid.to_semigroup.{u} α
                        (@group.to_monoid.{u} α inst_1))) b
                    (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) b)))
                (@has_mul.mul.{u} α
                  (@semigroup.to_has_mul.{u} α
                    (@monoid.to_semigroup.{u} α
                      (@group.to_monoid.{u} α inst_1))) c
                  (@has_one.one.{u} α
                    (@monoid.to_has_one.{u} α (@group.to_monoid.{u} α inst_1))))
                (@eq.trans.{u+1} α
                  (@has_mul.mul.{u} α
                    (@semigroup.to_has_mul.{u} α
                      (@monoid.to_semigroup.{u} α
                        (@group.to_monoid.{u} α inst_1)))
                    (@has_mul.mul.{u} α
                      (@semigroup.to_has_mul.{u} α
                        (@monoid.to_semigroup.{u} α
                          (@group.to_monoid.{u} α inst_1))) a b)
                    (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) b))
                  (@has_mul.mul.{u} α
                    (@semigroup.to_has_mul.{u} α
                      (@monoid.to_semigroup.{u} α
                        (@group.to_monoid.{u} α inst_1)))
                    (@has_mul.mul.{u} α
                      (@semigroup.to_has_mul.{u} α
                        (@monoid.to_semigroup.{u} α
                          (@group.to_monoid.{u} α inst_1))) c b)
                    (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) b))
                  (@has_mul.mul.{u} α
                    (@semigroup.to_has_mul.{u} α
                      (@monoid.to_semigroup.{u} α
                        (@group.to_monoid.{u} α inst_1))) c
                    (@has_mul.mul.{u} α
                      (@semigroup.to_has_mul.{u} α
                        (@monoid.to_semigroup.{u} α
                          (@group.to_monoid.{u} α inst_1))) b
                      (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) b)))
                  ((λ [c_0 : @has_mul.{u} α] (a_0 a_1 : α)
                      (e_2 : @eq.{u+1} α a_0 a_1) (a_2 a_3 : α)
                      (e_3 : @eq.{u+1} α a_2 a_3),
                    @congr.{u+1 u+1} α α (@has_mul.mul.{u} α c_0 a_0)
                      (@has_mul.mul.{u} α c_0 a_1) a_2 a_3
                      (@congr_arg.{u+1 u+1} α (∀ (a_4 : α), α) a_0 a_1
                        (@has_mul.mul.{u} α c_0) e_2) e_3)
                    (@semigroup.to_has_mul.{u} α
                      (@monoid.to_semigroup.{u} α
                        (@group.to_monoid.{u} α inst_1)))
                    (@has_mul.mul.{u} α
                      (@semigroup.to_has_mul.{u} α
                        (@monoid.to_semigroup.{u} α
                          (@group.to_monoid.{u} α inst_1))) a b)
                    (@has_mul.mul.{u} α
                      (@semigroup.to_has_mul.{u} α
                        (@monoid.to_semigroup.{u} α
                          (@group.to_monoid.{u} α inst_1))) c b) h
                    (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) b)
                    (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) b)
                    (@eq.refl.{u+1} α
                      (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) b)))
                  (@mul_assoc.{u} α
                    (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1))
                    c b
                    (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) b)))
                ((λ [c_0 : @has_mul.{u} α] (a_0 a_1 : α)
                    (e_2 : @eq.{u+1} α a_0 a_1) (a_2 a_3 : α)
                    (e_3 : @eq.{u+1} α a_2 a_3),
                  @congr.{u+1 u+1} α α (@has_mul.mul.{u} α c_0 a_0)
                    (@has_mul.mul.{u} α c_0 a_1) a_2 a_3
                    (@congr_arg.{u+1 u+1} α (∀ (a_4 : α), α) a_0 a_1
                      (@has_mul.mul.{u} α c_0) e_2) e_3)
                  (@semigroup.to_has_mul.{u} α
                    (@monoid.to_semigroup.{u} α
                      (@group.to_monoid.{u} α inst_1))) c c (@eq.refl.{u+1} α c)
                  (@has_mul.mul.{u} α
                    (@semigroup.to_has_mul.{u} α
                      (@monoid.to_semigroup.{u} α
                        (@group.to_monoid.{u} α inst_1))) b
                    (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) b))
                  (@has_one.one.{u} α
                    (@monoid.to_has_one.{u} α (@group.to_monoid.{u} α inst_1)))
                  (@mul_right_inv.{u} α inst_1 b)))
              (@mul_one.{u} α (@group.to_monoid.{u} α inst_1) c)) a a
            (@eq.refl.{u+1} α a)) this))) (@eq.refl.{u+1} α a))
  (@eq.mpr.{0}
    (@eq.{u+1} α
      (@has_mul.mul.{u} α
        (@semigroup.to_has_mul.{u} α
          (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1)))
        (@has_mul.mul.{u} α
          (@semigroup.to_has_mul.{u} α
            (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1))) a b)
        (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) b)) a) @true
    (@id_locked.{0}
      (@eq.{1} Prop
        (@eq.{u+1} α
          (@has_mul.mul.{u} α
            (@semigroup.to_has_mul.{u} α
              (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1)))
            (@has_mul.mul.{u} α
              (@semigroup.to_has_mul.{u} α
                (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1))) a
              b) (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) b)) a)
        @true)
      (@eq.trans.{1} Prop
        (@eq.{u+1} α
          (@has_mul.mul.{u} α
            (@semigroup.to_has_mul.{u} α
              (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1)))
            (@has_mul.mul.{u} α
              (@semigroup.to_has_mul.{u} α
                (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1))) a
              b) (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) b)) a)
        (@eq.{u+1} α a a) @true
        ((λ (a_0 a_1 : α) (e_1 : @eq.{u+1} α a_0 a_1) (a_2 a_3 : α)
            (e_2 : @eq.{u+1} α a_2 a_3),
          @congr.{u+1 1} α Prop (@eq.{u+1} α a_0) (@eq.{u+1} α a_1) a_2 a_3
            (@congr_arg.{u+1 max (u+1) 1} α (∀ (a_4 : α), Prop) a_0 a_1
              (@eq.{u+1} α) e_1) e_2)
          (@has_mul.mul.{u} α
            (@semigroup.to_has_mul.{u} α
              (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1)))
            (@has_mul.mul.{u} α
              (@semigroup.to_has_mul.{u} α
                (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1))) a
              b) (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) b)) a
          (@eq.trans.{u+1} α
            (@has_mul.mul.{u} α
              (@semigroup.to_has_mul.{u} α
                (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1)))
              (@has_mul.mul.{u} α
                (@semigroup.to_has_mul.{u} α
                  (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1)))
                a b) (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) b))
            (@has_mul.mul.{u} α
              (@semigroup.to_has_mul.{u} α
                (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1))) a
              (@has_one.one.{u} α
                (@monoid.to_has_one.{u} α (@group.to_monoid.{u} α inst_1)))) a
            (@eq.trans.{u+1} α
              (@has_mul.mul.{u} α
                (@semigroup.to_has_mul.{u} α
                  (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1)))
                (@has_mul.mul.{u} α
                  (@semigroup.to_has_mul.{u} α
                    (@monoid.to_semigroup.{u} α
                      (@group.to_monoid.{u} α inst_1))) a b)
                (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) b))
              (@has_mul.mul.{u} α
                (@semigroup.to_has_mul.{u} α
                  (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1)))
                a
                (@has_mul.mul.{u} α
                  (@semigroup.to_has_mul.{u} α
                    (@monoid.to_semigroup.{u} α
                      (@group.to_monoid.{u} α inst_1))) b
                  (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) b)))
              (@has_mul.mul.{u} α
                (@semigroup.to_has_mul.{u} α
                  (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1)))
                a
                (@has_one.one.{u} α
                  (@monoid.to_has_one.{u} α (@group.to_monoid.{u} α inst_1))))
              (@mul_assoc.{u} α
                (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1)) a b
                (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) b))
              ((λ [c_0 : @has_mul.{u} α] (a_0 a_1 : α)
                  (e_2 : @eq.{u+1} α a_0 a_1) (a_2 a_3 : α)
                  (e_3 : @eq.{u+1} α a_2 a_3),
                @congr.{u+1 u+1} α α (@has_mul.mul.{u} α c_0 a_0)
                  (@has_mul.mul.{u} α c_0 a_1) a_2 a_3
                  (@congr_arg.{u+1 u+1} α (∀ (a_4 : α), α) a_0 a_1
                    (@has_mul.mul.{u} α c_0) e_2) e_3)
                (@semigroup.to_has_mul.{u} α
                  (@monoid.to_semigroup.{u} α (@group.to_monoid.{u} α inst_1)))
                a a (@eq.refl.{u+1} α a)
                (@has_mul.mul.{u} α
                  (@semigroup.to_has_mul.{u} α
                    (@monoid.to_semigroup.{u} α
                      (@group.to_monoid.{u} α inst_1))) b
                  (@has_inv.inv.{u} α (@group.to_has_inv.{u} α inst_1) b))
                (@has_one.one.{u} α
                  (@monoid.to_has_one.{u} α (@group.to_monoid.{u} α inst_1)))
                (@mul_right_inv.{u} α inst_1 b)))
            (@mul_one.{u} α (@group.to_monoid.{u} α inst_1) a)) a a
          (@eq.refl.{u+1} α a))
        (@propext (@eq.{u+1} α a a) @true (@eq_self_iff_true.{u+1} α a))))
    @trivial),0))"
err: "provingground.interface.UnParsedException: could not parse expression @group.{u}"

mod: "DefMod(Definition(prod.cmp._main,Vector(Param(u), Param(v)),∀ {α : Type u} {β : Type v} [inst_1 : @has_ordering.{u} α]
  [inst_2 : @has_ordering.{v} β] (a a_0 : @prod.{u v} α β),
@ordering,λ {α : Type u} {β : Type v} [inst_1 : @has_ordering.{u} α]
  [inst_2 : @has_ordering.{v} β] (a a_0 : @prod.{u v} α β),
@prod.cases_on.{1 u v} α β (λ (a_1 : @prod.{u v} α β), @ordering) a
  (λ (fst : α) (snd : β),
  @prod.cases_on.{1 u v} α β (λ (a_1 : @prod.{u v} α β), @ordering) a_0
    (λ (fst_1 : α) (snd_1 : β),
    @ordering.or_else (@has_ordering.cmp.{u} α inst_1 fst fst_1)
      (λ (a_1 : @unit), @has_ordering.cmp.{v} β inst_2 snd snd_1))),0))"
err: "provingground.HoTT$ApplnFailException: function func  cannot act on given term"

mod: "DefMod(Definition(prod.cmp,Vector(Param(u), Param(v)),∀ {α : Type u} {β : Type v} [inst_1 : @has_ordering.{u} α]
  [inst_2 : @has_ordering.{v} β] (a a_0 : @prod.{u v} α β),
@ordering,λ {α : Type u} {β : Type v} [inst_1 : @has_ordering.{u} α]
  [inst_2 : @has_ordering.{v} β],
@prod.cmp._main.{u v} α β inst_1 inst_2,0))"
err: "provingground.interface.UnParsedException: could not parse expression @prod.cmp._main.{u v}"

mod: "DefMod(Definition(prod.has_ordering,Vector(Param(u), Param(v)),∀ {α : Type u} {β : Type v} [inst_3 : @has_ordering.{u} α]
  [inst_4 : @has_ordering.{v} β],
@has_ordering.{max u v} (@prod.{u v} α β),λ {α : Type u} {β : Type v} [inst_3 : @has_ordering.{u} α]
  [inst_4 : @has_ordering.{v} β],
@has_ordering.mk.{max u v} (@prod.{u v} α β) (@prod.cmp.{u v} α β inst_3 inst_4),0))"
err: "provingground.interface.UnParsedException: could not parse expression @prod.cmp.{u v}"

mod: "DefMod(Definition(prod.has_ordering.equations._eqn_1,Vector(Param(u), Param(v)),∀ {α : Type u} {β : Type v} [inst_3 : @has_ordering.{u} α]
  [inst_4 : @has_ordering.{v} β],
@eq.{(max u v)+1} (@has_ordering.{max u v} (@prod.{u v} α β))
  (@prod.has_ordering.{u v} α β inst_3 inst_4)
  (@has_ordering.mk.{max u v} (@prod.{u v} α β)
    (@prod.cmp.{u v} α β inst_3 inst_4)),λ {α : Type u} {β : Type v} [inst_3 : @has_ordering.{u} α]
  [inst_4 : @has_ordering.{v} β],
@eq.refl.{(max u v)+1} (@has_ordering.{max u v} (@prod.{u v} α β))
  (@prod.has_ordering.{u v} α β inst_3 inst_4),0))"
err: "provingground.interface.UnParsedException: could not parse expression @prod.has_ordering.{u v}"

mod: "DefMod(Definition(add_monoid.add_assoc,Vector(Param(u)),∀ {α : Type u} [c : @add_monoid.{u} α] (a b c_0 : α),
@eq.{u+1} α
  (@has_add.add.{u} α (@has_add.mk.{u} α (@add_monoid.add.{u} α c))
    (@has_add.add.{u} α (@has_add.mk.{u} α (@add_monoid.add.{u} α c)) a b) c_0)
  (@has_add.add.{u} α (@has_add.mk.{u} α (@add_monoid.add.{u} α c)) a
    (@has_add.add.{u} α (@has_add.mk.{u} α (@add_monoid.add.{u} α c)) b c_0)),λ (α : Type u) [c : @add_monoid.{u} α],
@add_monoid.rec.{0 u} α
  (λ [c_0 : @add_monoid.{u} α],
  ∀ (a b c_1 : α),
  @eq.{u+1} α
    (@has_add.add.{u} α (@has_add.mk.{u} α (@add_monoid.add.{u} α c_0))
      (@has_add.add.{u} α (@has_add.mk.{u} α (@add_monoid.add.{u} α c_0)) a b)
      c_1)
    (@has_add.add.{u} α (@has_add.mk.{u} α (@add_monoid.add.{u} α c_0)) a
      (@has_add.add.{u} α (@has_add.mk.{u} α (@add_monoid.add.{u} α c_0)) b
        c_1)))
  (λ (add : (∀ (a a_0 : α), α))
    (add_assoc :
      (∀ (a b c_0 : α),
      @eq.{u+1} α
        (@has_add.add.{u} α (@has_add.mk.{u} α add)
          (@has_add.add.{u} α (@has_add.mk.{u} α add) a b) c_0)
        (@has_add.add.{u} α (@has_add.mk.{u} α add) a
          (@has_add.add.{u} α (@has_add.mk.{u} α add) b c_0)))) (zero : α)
    (zero_add :
      (∀ (a : α),
      @eq.{u+1} α
        (@has_add.add.{u} α
          (@add_semigroup.to_has_add.{u} α
            (@add_semigroup.mk.{u} α add add_assoc))
          (@has_zero.zero.{u} α (@has_zero.mk.{u} α zero)) a) a))
    (add_zero :
      (∀ (a : α),
      @eq.{u+1} α
        (@has_add.add.{u} α
          (@add_semigroup.to_has_add.{u} α
            (@add_semigroup.mk.{u} α add add_assoc)) a
          (@has_zero.zero.{u} α (@has_zero.mk.{u} α zero))) a)),
  add_assoc) c,0))"
err: "java.util.concurrent.TimeoutException: Task timed-out after 5 minutes of inactivity"

mod: "DefMod(Definition(add_monoid.to_add_semigroup,Vector(Param(u)),∀ (α : Type u) [s : @add_monoid.{u} α], @add_semigroup.{u} α,λ (α : Type u) [s : @add_monoid.{u} α],
@add_semigroup.mk.{u} α (@add_monoid.add.{u} α s)
  (@add_monoid.add_assoc.{u} α s),0))"
err: "provingground.interface.UnParsedException: could not parse expression @add_monoid.add_assoc.{u}"

mod: "IndMod(InductiveType(add_group,Vector(Param(u)),∀ (α : Type u), Type u),1,Vector((add_group.mk,∀ {α : Type u} (add : (∀ (a a_0 : α), α))
  (add_assoc :
    (∀ (a b c : α),
    @eq.{u+1} α
      (@has_add.add.{u} α (@has_add.mk.{u} α add)
        (@has_add.add.{u} α (@has_add.mk.{u} α add) a b) c)
      (@has_add.add.{u} α (@has_add.mk.{u} α add) a
        (@has_add.add.{u} α (@has_add.mk.{u} α add) b c)))) (zero : α)
  (zero_add :
    (∀ (a : α),
    @eq.{u+1} α
      (@has_add.add.{u} α
        (@add_semigroup.to_has_add.{u} α
          (@add_semigroup.mk.{u} α add add_assoc))
        (@has_zero.zero.{u} α (@has_zero.mk.{u} α zero)) a) a))
  (add_zero :
    (∀ (a : α),
    @eq.{u+1} α
      (@has_add.add.{u} α
        (@add_semigroup.to_has_add.{u} α
          (@add_semigroup.mk.{u} α add add_assoc)) a
        (@has_zero.zero.{u} α (@has_zero.mk.{u} α zero))) a))
  (neg : (∀ (a : α), α))
  (add_left_neg :
    (∀ (a : α),
    @eq.{u+1} α
      (@has_add.add.{u} α
        (@add_semigroup.to_has_add.{u} α
          (@add_monoid.to_add_semigroup.{u} α
            (@add_monoid.mk.{u} α add add_assoc zero zero_add add_zero)))
        (@has_neg.neg.{u} α (@has_neg.mk.{u} α neg) a) a)
      (@has_zero.zero.{u} α
        (@add_monoid.to_has_zero.{u} α
          (@add_monoid.mk.{u} α add add_assoc zero zero_add add_zero))))),
@add_group.{u} α)))"
err: "provingground.interface.UnParsedException: could not parse expression @add_monoid.to_add_semigroup.{u}"

mod: "DefMod(Definition(add_group.add,Vector(Param(u)),∀ {α : Type u} [c : @add_group.{u} α] (a a_0 : α), α,λ (α : Type u) [c : @add_group.{u} α],
@add_group.rec.{u+1 u} α (λ [c_0 : @add_group.{u} α], ∀ (a a_0 : α), α)
  (λ (add : (∀ (a a_0 : α), α))
    (add_assoc :
      (∀ (a b c_0 : α),
      @eq.{u+1} α
        (@has_add.add.{u} α (@has_add.mk.{u} α add)
          (@has_add.add.{u} α (@has_add.mk.{u} α add) a b) c_0)
        (@has_add.add.{u} α (@has_add.mk.{u} α add) a
          (@has_add.add.{u} α (@has_add.mk.{u} α add) b c_0)))) (zero : α)
    (zero_add :
      (∀ (a : α),
      @eq.{u+1} α
        (@has_add.add.{u} α
          (@add_semigroup.to_has_add.{u} α
            (@add_semigroup.mk.{u} α add add_assoc))
          (@has_zero.zero.{u} α (@has_zero.mk.{u} α zero)) a) a))
    (add_zero :
      (∀ (a : α),
      @eq.{u+1} α
        (@has_add.add.{u} α
          (@add_semigroup.to_has_add.{u} α
            (@add_semigroup.mk.{u} α add add_assoc)) a
          (@has_zero.zero.{u} α (@has_zero.mk.{u} α zero))) a))
    (neg : (∀ (a : α), α))
    (add_left_neg :
      (∀ (a : α),
      @eq.{u+1} α
        (@has_add.add.{u} α
          (@add_semigroup.to_has_add.{u} α
            (@add_monoid.to_add_semigroup.{u} α
              (@add_monoid.mk.{u} α add add_assoc zero zero_add add_zero)))
          (@has_neg.neg.{u} α (@has_neg.mk.{u} α neg) a) a)
        (@has_zero.zero.{u} α
          (@add_monoid.to_has_zero.{u} α
            (@add_monoid.mk.{u} α add add_assoc zero zero_add add_zero))))),
  add) c,0))"
err: "provingground.interface.UnParsedException: could not parse expression @add_group.{u}"

mod: "DefMod(Definition(add_group.add_assoc,Vector(Param(u)),∀ {α : Type u} [c : @add_group.{u} α] (a b c_0 : α),
@eq.{u+1} α
  (@has_add.add.{u} α (@has_add.mk.{u} α (@add_group.add.{u} α c))
    (@has_add.add.{u} α (@has_add.mk.{u} α (@add_group.add.{u} α c)) a b) c_0)
  (@has_add.add.{u} α (@has_add.mk.{u} α (@add_group.add.{u} α c)) a
    (@has_add.add.{u} α (@has_add.mk.{u} α (@add_group.add.{u} α c)) b c_0)),λ (α : Type u) [c : @add_group.{u} α],
@add_group.rec.{0 u} α
  (λ [c_0 : @add_group.{u} α],
  ∀ (a b c_1 : α),
  @eq.{u+1} α
    (@has_add.add.{u} α (@has_add.mk.{u} α (@add_group.add.{u} α c_0))
      (@has_add.add.{u} α (@has_add.mk.{u} α (@add_group.add.{u} α c_0)) a b)
      c_1)
    (@has_add.add.{u} α (@has_add.mk.{u} α (@add_group.add.{u} α c_0)) a
      (@has_add.add.{u} α (@has_add.mk.{u} α (@add_group.add.{u} α c_0)) b
        c_1)))
  (λ (add : (∀ (a a_0 : α), α))
    (add_assoc :
      (∀ (a b c_0 : α),
      @eq.{u+1} α
        (@has_add.add.{u} α (@has_add.mk.{u} α add)
          (@has_add.add.{u} α (@has_add.mk.{u} α add) a b) c_0)
        (@has_add.add.{u} α (@has_add.mk.{u} α add) a
          (@has_add.add.{u} α (@has_add.mk.{u} α add) b c_0)))) (zero : α)
    (zero_add :
      (∀ (a : α),
      @eq.{u+1} α
        (@has_add.add.{u} α
          (@add_semigroup.to_has_add.{u} α
            (@add_semigroup.mk.{u} α add add_assoc))
          (@has_zero.zero.{u} α (@has_zero.mk.{u} α zero)) a) a))
    (add_zero :
      (∀ (a : α),
      @eq.{u+1} α
        (@has_add.add.{u} α
          (@add_semigroup.to_has_add.{u} α
            (@add_semigroup.mk.{u} α add add_assoc)) a
          (@has_zero.zero.{u} α (@has_zero.mk.{u} α zero))) a))
    (neg : (∀ (a : α), α))
    (add_left_neg :
      (∀ (a : α),
      @eq.{u+1} α
        (@has_add.add.{u} α
          (@add_semigroup.to_has_add.{u} α
            (@add_monoid.to_add_semigroup.{u} α
              (@add_monoid.mk.{u} α add add_assoc zero zero_add add_zero)))
          (@has_neg.neg.{u} α (@has_neg.mk.{u} α neg) a) a)
        (@has_zero.zero.{u} α
          (@add_monoid.to_has_zero.{u} α
            (@add_monoid.mk.{u} α add add_assoc zero zero_add add_zero))))),
  add_assoc) c,0))"
err: "provingground.interface.UnParsedException: could not parse expression @add_group.{u}"

mod: "DefMod(Definition(add_group.zero,Vector(Param(u)),∀ (α : Type u) [c : @add_group.{u} α], α,λ (α : Type u) [c : @add_group.{u} α],
@add_group.rec.{u+1 u} α (λ [c_0 : @add_group.{u} α], α)
  (λ (add : (∀ (a a_0 : α), α))
    (add_assoc :
      (∀ (a b c_0 : α),
      @eq.{u+1} α
        (@has_add.add.{u} α (@has_add.mk.{u} α add)
          (@has_add.add.{u} α (@has_add.mk.{u} α add) a b) c_0)
        (@has_add.add.{u} α (@has_add.mk.{u} α add) a
          (@has_add.add.{u} α (@has_add.mk.{u} α add) b c_0)))) (zero : α)
    (zero_add :
      (∀ (a : α),
      @eq.{u+1} α
        (@has_add.add.{u} α
          (@add_semigroup.to_has_add.{u} α
            (@add_semigroup.mk.{u} α add add_assoc))
          (@has_zero.zero.{u} α (@has_zero.mk.{u} α zero)) a) a))
    (add_zero :
      (∀ (a : α),
      @eq.{u+1} α
        (@has_add.add.{u} α
          (@add_semigroup.to_has_add.{u} α
            (@add_semigroup.mk.{u} α add add_assoc)) a
          (@has_zero.zero.{u} α (@has_zero.mk.{u} α zero))) a))
    (neg : (∀ (a : α), α))
    (add_left_neg :
      (∀ (a : α),
      @eq.{u+1} α
        (@has_add.add.{u} α
          (@add_semigroup.to_has_add.{u} α
            (@add_monoid.to_add_semigroup.{u} α
              (@add_monoid.mk.{u} α add add_assoc zero zero_add add_zero)))
          (@has_neg.neg.{u} α (@has_neg.mk.{u} α neg) a) a)
        (@has_zero.zero.{u} α
          (@add_monoid.to_has_zero.{u} α
            (@add_monoid.mk.{u} α add add_assoc zero zero_add add_zero))))),
  zero) c,0))"
err: "provingground.interface.UnParsedException: could not parse expression @add_group.{u}"

mod: "DefMod(Definition(add_group.zero_add,Vector(Param(u)),∀ {α : Type u} [c : @add_group.{u} α] (a : α),
@eq.{u+1} α
  (@has_add.add.{u} α
    (@add_semigroup.to_has_add.{u} α
      (@add_semigroup.mk.{u} α (@add_group.add.{u} α c)
        (@add_group.add_assoc.{u} α c)))
    (@has_zero.zero.{u} α (@has_zero.mk.{u} α (@add_group.zero.{u} α c))) a) a,λ (α : Type u) [c : @add_group.{u} α],
@add_group.rec.{0 u} α
  (λ [c_0 : @add_group.{u} α],
  ∀ (a : α),
  @eq.{u+1} α
    (@has_add.add.{u} α
      (@add_semigroup.to_has_add.{u} α
        (@add_semigroup.mk.{u} α (@add_group.add.{u} α c_0)
          (@add_group.add_assoc.{u} α c_0)))
      (@has_zero.zero.{u} α (@has_zero.mk.{u} α (@add_group.zero.{u} α c_0))) a)
    a)
  (λ (add : (∀ (a a_0 : α), α))
    (add_assoc :
      (∀ (a b c_0 : α),
      @eq.{u+1} α
        (@has_add.add.{u} α (@has_add.mk.{u} α add)
          (@has_add.add.{u} α (@has_add.mk.{u} α add) a b) c_0)
        (@has_add.add.{u} α (@has_add.mk.{u} α add) a
          (@has_add.add.{u} α (@has_add.mk.{u} α add) b c_0)))) (zero : α)
    (zero_add :
      (∀ (a : α),
      @eq.{u+1} α
        (@has_add.add.{u} α
          (@add_semigroup.to_has_add.{u} α
            (@add_semigroup.mk.{u} α add add_assoc))
          (@has_zero.zero.{u} α (@has_zero.mk.{u} α zero)) a) a))
    (add_zero :
      (∀ (a : α),
      @eq.{u+1} α
        (@has_add.add.{u} α
          (@add_semigroup.to_has_add.{u} α
            (@add_semigroup.mk.{u} α add add_assoc)) a
          (@has_zero.zero.{u} α (@has_zero.mk.{u} α zero))) a))
    (neg : (∀ (a : α), α))
    (add_left_neg :
      (∀ (a : α),
      @eq.{u+1} α
        (@has_add.add.{u} α
          (@add_semigroup.to_has_add.{u} α
            (@add_monoid.to_add_semigroup.{u} α
              (@add_monoid.mk.{u} α add add_assoc zero zero_add add_zero)))
          (@has_neg.neg.{u} α (@has_neg.mk.{u} α neg) a) a)
        (@has_zero.zero.{u} α
          (@add_monoid.to_has_zero.{u} α
            (@add_monoid.mk.{u} α add add_assoc zero zero_add add_zero))))),
  zero_add) c,0))"
err: "provingground.interface.UnParsedException: could not parse expression @add_group.{u}"

mod: "DefMod(Definition(add_group.add_zero,Vector(Param(u)),∀ {α : Type u} [c : @add_group.{u} α] (a : α),
@eq.{u+1} α
  (@has_add.add.{u} α
    (@add_semigroup.to_has_add.{u} α
      (@add_semigroup.mk.{u} α (@add_group.add.{u} α c)
        (@add_group.add_assoc.{u} α c))) a
    (@has_zero.zero.{u} α (@has_zero.mk.{u} α (@add_group.zero.{u} α c)))) a,λ (α : Type u) [c : @add_group.{u} α],
@add_group.rec.{0 u} α
  (λ [c_0 : @add_group.{u} α],
  ∀ (a : α),
  @eq.{u+1} α
    (@has_add.add.{u} α
      (@add_semigroup.to_has_add.{u} α
        (@add_semigroup.mk.{u} α (@add_group.add.{u} α c_0)
          (@add_group.add_assoc.{u} α c_0))) a
      (@has_zero.zero.{u} α (@has_zero.mk.{u} α (@add_group.zero.{u} α c_0))))
    a)
  (λ (add : (∀ (a a_0 : α), α))
    (add_assoc :
      (∀ (a b c_0 : α),
      @eq.{u+1} α
        (@has_add.add.{u} α (@has_add.mk.{u} α add)
          (@has_add.add.{u} α (@has_add.mk.{u} α add) a b) c_0)
        (@has_add.add.{u} α (@has_add.mk.{u} α add) a
          (@has_add.add.{u} α (@has_add.mk.{u} α add) b c_0)))) (zero : α)
    (zero_add :
      (∀ (a : α),
      @eq.{u+1} α
        (@has_add.add.{u} α
          (@add_semigroup.to_has_add.{u} α
            (@add_semigroup.mk.{u} α add add_assoc))
          (@has_zero.zero.{u} α (@has_zero.mk.{u} α zero)) a) a))
    (add_zero :
      (∀ (a : α),
      @eq.{u+1} α
        (@has_add.add.{u} α
          (@add_semigroup.to_has_add.{u} α
            (@add_semigroup.mk.{u} α add add_assoc)) a
          (@has_zero.zero.{u} α (@has_zero.mk.{u} α zero))) a))
    (neg : (∀ (a : α), α))
    (add_left_neg :
      (∀ (a : α),
      @eq.{u+1} α
        (@has_add.add.{u} α
          (@add_semigroup.to_has_add.{u} α
            (@add_monoid.to_add_semigroup.{u} α
              (@add_monoid.mk.{u} α add add_assoc zero zero_add add_zero)))
          (@has_neg.neg.{u} α (@has_neg.mk.{u} α neg) a) a)
        (@has_zero.zero.{u} α
          (@add_monoid.to_has_zero.{u} α
            (@add_monoid.mk.{u} α add add_assoc zero zero_add add_zero))))),
  add_zero) c,0))"
err: "provingground.interface.UnParsedException: could not parse expression @add_group.{u}"

mod: "DefMod(Definition(add_group.to_add_monoid,Vector(Param(u)),∀ (α : Type u) [s : @add_group.{u} α], @add_monoid.{u} α,λ (α : Type u) [s : @add_group.{u} α],
@add_monoid.mk.{u} α (@add_group.add.{u} α s) (@add_group.add_assoc.{u} α s)
  (@add_group.zero.{u} α s) (@add_group.zero_add.{u} α s)
  (@add_group.add_zero.{u} α s),0))"
err: "provingground.interface.UnParsedException: could not parse expression @add_group.{u}"

mod: "DefMod(Definition(add_group.neg,Vector(Param(u)),∀ {α : Type u} [c : @add_group.{u} α] (a : α), α,λ (α : Type u) [c : @add_group.{u} α],
@add_group.rec.{u+1 u} α (λ [c_0 : @add_group.{u} α], ∀ (a : α), α)
  (λ (add : (∀ (a a_0 : α), α))
    (add_assoc :
      (∀ (a b c_0 : α),
      @eq.{u+1} α
        (@has_add.add.{u} α (@has_add.mk.{u} α add)
          (@has_add.add.{u} α (@has_add.mk.{u} α add) a b) c_0)
        (@has_add.add.{u} α (@has_add.mk.{u} α add) a
          (@has_add.add.{u} α (@has_add.mk.{u} α add) b c_0)))) (zero : α)
    (zero_add :
      (∀ (a : α),
      @eq.{u+1} α
        (@has_add.add.{u} α
          (@add_semigroup.to_has_add.{u} α
            (@add_semigroup.mk.{u} α add add_assoc))
          (@has_zero.zero.{u} α (@has_zero.mk.{u} α zero)) a) a))
    (add_zero :
      (∀ (a : α),
      @eq.{u+1} α
        (@has_add.add.{u} α
          (@add_semigroup.to_has_add.{u} α
            (@add_semigroup.mk.{u} α add add_assoc)) a
          (@has_zero.zero.{u} α (@has_zero.mk.{u} α zero))) a))
    (neg : (∀ (a : α), α))
    (add_left_neg :
      (∀ (a : α),
      @eq.{u+1} α
        (@has_add.add.{u} α
          (@add_semigroup.to_has_add.{u} α
            (@add_monoid.to_add_semigroup.{u} α
              (@add_monoid.mk.{u} α add add_assoc zero zero_add add_zero)))
          (@has_neg.neg.{u} α (@has_neg.mk.{u} α neg) a) a)
        (@has_zero.zero.{u} α
          (@add_monoid.to_has_zero.{u} α
            (@add_monoid.mk.{u} α add add_assoc zero zero_add add_zero))))),
  neg) c,0))"
err: "provingground.interface.UnParsedException: could not parse expression @add_group.{u}"

mod: "DefMod(Definition(add_group.to_has_neg,Vector(Param(u)),∀ (α : Type u) [s : @add_group.{u} α], @has_neg.{u} α,λ (α : Type u) [s : @add_group.{u} α],
@has_neg.mk.{u} α (@add_group.neg.{u} α s),0))"
err: "provingground.interface.UnParsedException: could not parse expression @add_group.{u}"

mod: "DefMod(Definition(add_monoid.add_zero,Vector(Param(u)),∀ {α : Type u} [c : @add_monoid.{u} α] (a : α),
@eq.{u+1} α
  (@has_add.add.{u} α
    (@add_semigroup.to_has_add.{u} α
      (@add_semigroup.mk.{u} α (@add_monoid.add.{u} α c)
        (@add_monoid.add_assoc.{u} α c))) a
    (@has_zero.zero.{u} α (@has_zero.mk.{u} α (@add_monoid.zero.{u} α c)))) a,λ (α : Type u) [c : @add_monoid.{u} α],
@add_monoid.rec.{0 u} α
  (λ [c_0 : @add_monoid.{u} α],
  ∀ (a : α),
  @eq.{u+1} α
    (@has_add.add.{u} α
      (@add_semigroup.to_has_add.{u} α
        (@add_semigroup.mk.{u} α (@add_monoid.add.{u} α c_0)
          (@add_monoid.add_assoc.{u} α c_0))) a
      (@has_zero.zero.{u} α (@has_zero.mk.{u} α (@add_monoid.zero.{u} α c_0))))
    a)
  (λ (add : (∀ (a a_0 : α), α))
    (add_assoc :
      (∀ (a b c_0 : α),
      @eq.{u+1} α
        (@has_add.add.{u} α (@has_add.mk.{u} α add)
          (@has_add.add.{u} α (@has_add.mk.{u} α add) a b) c_0)
        (@has_add.add.{u} α (@has_add.mk.{u} α add) a
          (@has_add.add.{u} α (@has_add.mk.{u} α add) b c_0)))) (zero : α)
    (zero_add :
      (∀ (a : α),
      @eq.{u+1} α
        (@has_add.add.{u} α
          (@add_semigroup.to_has_add.{u} α
            (@add_semigroup.mk.{u} α add add_assoc))
          (@has_zero.zero.{u} α (@has_zero.mk.{u} α zero)) a) a))
    (add_zero :
      (∀ (a : α),
      @eq.{u+1} α
        (@has_add.add.{u} α
          (@add_semigroup.to_has_add.{u} α
            (@add_semigroup.mk.{u} α add add_assoc)) a
          (@has_zero.zero.{u} α (@has_zero.mk.{u} α zero))) a)),
  add_zero) c,0))"
err: "provingground.interface.UnParsedException: could not parse expression @add_monoid.add_assoc.{u}"

mod: "DefMod(Definition(add_zero,Vector(Param(u)),∀ {α : Type u} [inst_1 : @add_monoid.{u} α] (a : α),
@eq.{u+1} α
  (@has_add.add.{u} α
    (@add_semigroup.to_has_add.{u} α
      (@add_monoid.to_add_semigroup.{u} α inst_1)) a
    (@has_zero.zero.{u} α (@add_monoid.to_has_zero.{u} α inst_1))) a,λ {α : Type u} [inst_1 : @add_monoid.{u} α], @add_monoid.add_zero.{u} α inst_1,0))"
err: "provingground.interface.UnParsedException: could not parse expression @add_monoid.add_zero.{u}"

mod: "DefMod(Definition(add_group.add_left_neg,Vector(Param(u)),∀ {α : Type u} [c : @add_group.{u} α] (a : α),
@eq.{u+1} α
  (@has_add.add.{u} α
    (@add_semigroup.to_has_add.{u} α
      (@add_monoid.to_add_semigroup.{u} α
        (@add_monoid.mk.{u} α (@add_group.add.{u} α c)
          (@add_group.add_assoc.{u} α c) (@add_group.zero.{u} α c)
          (@add_group.zero_add.{u} α c) (@add_group.add_zero.{u} α c))))
    (@has_neg.neg.{u} α (@has_neg.mk.{u} α (@add_group.neg.{u} α c)) a) a)
  (@has_zero.zero.{u} α
    (@add_monoid.to_has_zero.{u} α
      (@add_monoid.mk.{u} α (@add_group.add.{u} α c)
        (@add_group.add_assoc.{u} α c) (@add_group.zero.{u} α c)
        (@add_group.zero_add.{u} α c) (@add_group.add_zero.{u} α c)))),λ (α : Type u) [c : @add_group.{u} α],
@add_group.rec.{0 u} α
  (λ [c_0 : @add_group.{u} α],
  ∀ (a : α),
  @eq.{u+1} α
    (@has_add.add.{u} α
      (@add_semigroup.to_has_add.{u} α
        (@add_monoid.to_add_semigroup.{u} α
          (@add_monoid.mk.{u} α (@add_group.add.{u} α c_0)
            (@add_group.add_assoc.{u} α c_0) (@add_group.zero.{u} α c_0)
            (@add_group.zero_add.{u} α c_0) (@add_group.add_zero.{u} α c_0))))
      (@has_neg.neg.{u} α (@has_neg.mk.{u} α (@add_group.neg.{u} α c_0)) a) a)
    (@has_zero.zero.{u} α
      (@add_monoid.to_has_zero.{u} α
        (@add_monoid.mk.{u} α (@add_group.add.{u} α c_0)
          (@add_group.add_assoc.{u} α c_0) (@add_group.zero.{u} α c_0)
          (@add_group.zero_add.{u} α c_0) (@add_group.add_zero.{u} α c_0)))))
  (λ (add : (∀ (a a_0 : α), α))
    (add_assoc :
      (∀ (a b c_0 : α),
      @eq.{u+1} α
        (@has_add.add.{u} α (@has_add.mk.{u} α add)
          (@has_add.add.{u} α (@has_add.mk.{u} α add) a b) c_0)
        (@has_add.add.{u} α (@has_add.mk.{u} α add) a
          (@has_add.add.{u} α (@has_add.mk.{u} α add) b c_0)))) (zero : α)
    (zero_add :
      (∀ (a : α),
      @eq.{u+1} α
        (@has_add.add.{u} α
          (@add_semigroup.to_has_add.{u} α
            (@add_semigroup.mk.{u} α add add_assoc))
          (@has_zero.zero.{u} α (@has_zero.mk.{u} α zero)) a) a))
    (add_zero :
      (∀ (a : α),
      @eq.{u+1} α
        (@has_add.add.{u} α
          (@add_semigroup.to_has_add.{u} α
            (@add_semigroup.mk.{u} α add add_assoc)) a
          (@has_zero.zero.{u} α (@has_zero.mk.{u} α zero))) a))
    (neg : (∀ (a : α), α))
    (add_left_neg :
      (∀ (a : α),
      @eq.{u+1} α
        (@has_add.add.{u} α
          (@add_semigroup.to_has_add.{u} α
            (@add_monoid.to_add_semigroup.{u} α
              (@add_monoid.mk.{u} α add add_assoc zero zero_add add_zero)))
          (@has_neg.neg.{u} α (@has_neg.mk.{u} α neg) a) a)
        (@has_zero.zero.{u} α
          (@add_monoid.to_has_zero.{u} α
            (@add_monoid.mk.{u} α add add_assoc zero zero_add add_zero))))),
  add_left_neg) c,0))"
err: "provingground.interface.UnParsedException: could not parse expression @add_group.{u}"

mod: "DefMod(Definition(add_left_neg,Vector(Param(u)),∀ {α : Type u} [inst_1 : @add_group.{u} α] (a : α),
@eq.{u+1} α
  (@has_add.add.{u} α
    (@add_semigroup.to_has_add.{u} α
      (@add_monoid.to_add_semigroup.{u} α
        (@add_group.to_add_monoid.{u} α inst_1)))
    (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) a) a)
  (@has_zero.zero.{u} α
    (@add_monoid.to_has_zero.{u} α (@add_group.to_add_monoid.{u} α inst_1))),λ {α : Type u} [inst_1 : @add_group.{u} α], @add_group.add_left_neg.{u} α inst_1,0))"
err: "provingground.interface.UnParsedException: could not parse expression @add_group.{u}"

mod: "DefMod(Definition(add_monoid.zero_add,Vector(Param(u)),∀ {α : Type u} [c : @add_monoid.{u} α] (a : α),
@eq.{u+1} α
  (@has_add.add.{u} α
    (@add_semigroup.to_has_add.{u} α
      (@add_semigroup.mk.{u} α (@add_monoid.add.{u} α c)
        (@add_monoid.add_assoc.{u} α c)))
    (@has_zero.zero.{u} α (@has_zero.mk.{u} α (@add_monoid.zero.{u} α c))) a) a,λ (α : Type u) [c : @add_monoid.{u} α],
@add_monoid.rec.{0 u} α
  (λ [c_0 : @add_monoid.{u} α],
  ∀ (a : α),
  @eq.{u+1} α
    (@has_add.add.{u} α
      (@add_semigroup.to_has_add.{u} α
        (@add_semigroup.mk.{u} α (@add_monoid.add.{u} α c_0)
          (@add_monoid.add_assoc.{u} α c_0)))
      (@has_zero.zero.{u} α (@has_zero.mk.{u} α (@add_monoid.zero.{u} α c_0)))
      a) a)
  (λ (add : (∀ (a a_0 : α), α))
    (add_assoc :
      (∀ (a b c_0 : α),
      @eq.{u+1} α
        (@has_add.add.{u} α (@has_add.mk.{u} α add)
          (@has_add.add.{u} α (@has_add.mk.{u} α add) a b) c_0)
        (@has_add.add.{u} α (@has_add.mk.{u} α add) a
          (@has_add.add.{u} α (@has_add.mk.{u} α add) b c_0)))) (zero : α)
    (zero_add :
      (∀ (a : α),
      @eq.{u+1} α
        (@has_add.add.{u} α
          (@add_semigroup.to_has_add.{u} α
            (@add_semigroup.mk.{u} α add add_assoc))
          (@has_zero.zero.{u} α (@has_zero.mk.{u} α zero)) a) a))
    (add_zero :
      (∀ (a : α),
      @eq.{u+1} α
        (@has_add.add.{u} α
          (@add_semigroup.to_has_add.{u} α
            (@add_semigroup.mk.{u} α add add_assoc)) a
          (@has_zero.zero.{u} α (@has_zero.mk.{u} α zero))) a)),
  zero_add) c,0))"
err: "provingground.interface.UnParsedException: could not parse expression @add_monoid.add_assoc.{u}"

mod: "DefMod(Definition(zero_add,Vector(Param(u)),∀ {α : Type u} [inst_1 : @add_monoid.{u} α] (a : α),
@eq.{u+1} α
  (@has_add.add.{u} α
    (@add_semigroup.to_has_add.{u} α
      (@add_monoid.to_add_semigroup.{u} α inst_1))
    (@has_zero.zero.{u} α (@add_monoid.to_has_zero.{u} α inst_1)) a) a,λ {α : Type u} [inst_1 : @add_monoid.{u} α], @add_monoid.zero_add.{u} α inst_1,0))"
err: "provingground.interface.UnParsedException: could not parse expression @add_monoid.zero_add.{u}"

mod: "DefMod(Definition(neg_eq_of_add_eq_zero,Vector(Param(u)),∀ {α : Type u} [inst_1 : @add_group.{u} α] {a b : α}
  (h :
    @eq.{u+1} α
      (@has_add.add.{u} α
        (@add_semigroup.to_has_add.{u} α
          (@add_monoid.to_add_semigroup.{u} α
            (@add_group.to_add_monoid.{u} α inst_1))) a b)
      (@has_zero.zero.{u} α
        (@add_monoid.to_has_zero.{u} α
          (@add_group.to_add_monoid.{u} α inst_1)))),
@eq.{u+1} α (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) a) b,λ {α : Type u} [inst_1 : @add_group.{u} α] {a b : α}
  (h :
    @eq.{u+1} α
      (@has_add.add.{u} α
        (@add_semigroup.to_has_add.{u} α
          (@add_monoid.to_add_semigroup.{u} α
            (@add_group.to_add_monoid.{u} α inst_1))) a b)
      (@has_zero.zero.{u} α
        (@add_monoid.to_has_zero.{u} α
          (@add_group.to_add_monoid.{u} α inst_1)))),
@eq.mpr.{0}
  (@eq.{u+1} α (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) a) b)
  (@eq.{u+1} α
    (@has_add.add.{u} α
      (@add_semigroup.to_has_add.{u} α
        (@add_monoid.to_add_semigroup.{u} α
          (@add_group.to_add_monoid.{u} α inst_1)))
      (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) a)
      (@has_zero.zero.{u} α
        (@add_monoid.to_has_zero.{u} α
          (@add_group.to_add_monoid.{u} α inst_1)))) b)
  (@id_locked.{0}
    (@eq.{1} Prop
      (@eq.{u+1} α (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) a)
        b)
      (@eq.{u+1} α
        (@has_add.add.{u} α
          (@add_semigroup.to_has_add.{u} α
            (@add_monoid.to_add_semigroup.{u} α
              (@add_group.to_add_monoid.{u} α inst_1)))
          (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) a)
          (@has_zero.zero.{u} α
            (@add_monoid.to_has_zero.{u} α
              (@add_group.to_add_monoid.{u} α inst_1)))) b))
    (@eq.rec.{0 u+1} α
      (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) a)
      (λ (a_0 : α),
      @eq.{1} Prop
        (@eq.{u+1} α (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) a)
          b) (@eq.{u+1} α a_0 b))
      (@eq.refl.{1} Prop
        (@eq.{u+1} α (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) a)
          b))
      (@has_add.add.{u} α
        (@add_semigroup.to_has_add.{u} α
          (@add_monoid.to_add_semigroup.{u} α
            (@add_group.to_add_monoid.{u} α inst_1)))
        (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) a)
        (@has_zero.zero.{u} α
          (@add_monoid.to_has_zero.{u} α
            (@add_group.to_add_monoid.{u} α inst_1))))
      (@eq.symm.{u+1} α
        (@has_add.add.{u} α
          (@add_semigroup.to_has_add.{u} α
            (@add_monoid.to_add_semigroup.{u} α
              (@add_group.to_add_monoid.{u} α inst_1)))
          (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) a)
          (@has_zero.zero.{u} α
            (@add_monoid.to_has_zero.{u} α
              (@add_group.to_add_monoid.{u} α inst_1))))
        (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) a)
        (@add_zero.{u} α (@add_group.to_add_monoid.{u} α inst_1)
          (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) a)))))
  (@eq.mpr.{0}
    (@eq.{u+1} α
      (@has_add.add.{u} α
        (@add_semigroup.to_has_add.{u} α
          (@add_monoid.to_add_semigroup.{u} α
            (@add_group.to_add_monoid.{u} α inst_1)))
        (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) a)
        (@has_zero.zero.{u} α
          (@add_monoid.to_has_zero.{u} α
            (@add_group.to_add_monoid.{u} α inst_1)))) b)
    (@eq.{u+1} α
      (@has_add.add.{u} α
        (@add_semigroup.to_has_add.{u} α
          (@add_monoid.to_add_semigroup.{u} α
            (@add_group.to_add_monoid.{u} α inst_1)))
        (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) a)
        (@has_add.add.{u} α
          (@add_semigroup.to_has_add.{u} α
            (@add_monoid.to_add_semigroup.{u} α
              (@add_group.to_add_monoid.{u} α inst_1))) a b)) b)
    (@id_locked.{0}
      (@eq.{1} Prop
        (@eq.{u+1} α
          (@has_add.add.{u} α
            (@add_semigroup.to_has_add.{u} α
              (@add_monoid.to_add_semigroup.{u} α
                (@add_group.to_add_monoid.{u} α inst_1)))
            (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) a)
            (@has_zero.zero.{u} α
              (@add_monoid.to_has_zero.{u} α
                (@add_group.to_add_monoid.{u} α inst_1)))) b)
        (@eq.{u+1} α
          (@has_add.add.{u} α
            (@add_semigroup.to_has_add.{u} α
              (@add_monoid.to_add_semigroup.{u} α
                (@add_group.to_add_monoid.{u} α inst_1)))
            (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) a)
            (@has_add.add.{u} α
              (@add_semigroup.to_has_add.{u} α
                (@add_monoid.to_add_semigroup.{u} α
                  (@add_group.to_add_monoid.{u} α inst_1))) a b)) b))
      (@eq.rec.{0 u+1} α
        (@has_zero.zero.{u} α
          (@add_monoid.to_has_zero.{u} α
            (@add_group.to_add_monoid.{u} α inst_1)))
        (λ (a_0 : α),
        @eq.{1} Prop
          (@eq.{u+1} α
            (@has_add.add.{u} α
              (@add_semigroup.to_has_add.{u} α
                (@add_monoid.to_add_semigroup.{u} α
                  (@add_group.to_add_monoid.{u} α inst_1)))
              (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) a)
              (@has_zero.zero.{u} α
                (@add_monoid.to_has_zero.{u} α
                  (@add_group.to_add_monoid.{u} α inst_1)))) b)
          (@eq.{u+1} α
            (@has_add.add.{u} α
              (@add_semigroup.to_has_add.{u} α
                (@add_monoid.to_add_semigroup.{u} α
                  (@add_group.to_add_monoid.{u} α inst_1)))
              (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) a) a_0)
            b))
        (@eq.refl.{1} Prop
          (@eq.{u+1} α
            (@has_add.add.{u} α
              (@add_semigroup.to_has_add.{u} α
                (@add_monoid.to_add_semigroup.{u} α
                  (@add_group.to_add_monoid.{u} α inst_1)))
              (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) a)
              (@has_zero.zero.{u} α
                (@add_monoid.to_has_zero.{u} α
                  (@add_group.to_add_monoid.{u} α inst_1)))) b))
        (@has_add.add.{u} α
          (@add_semigroup.to_has_add.{u} α
            (@add_monoid.to_add_semigroup.{u} α
              (@add_group.to_add_monoid.{u} α inst_1))) a b)
        (@eq.symm.{u+1} α
          (@has_add.add.{u} α
            (@add_semigroup.to_has_add.{u} α
              (@add_monoid.to_add_semigroup.{u} α
                (@add_group.to_add_monoid.{u} α inst_1))) a b)
          (@has_zero.zero.{u} α
            (@add_monoid.to_has_zero.{u} α
              (@add_group.to_add_monoid.{u} α inst_1))) h)))
    (@eq.mpr.{0}
      (@eq.{u+1} α
        (@has_add.add.{u} α
          (@add_semigroup.to_has_add.{u} α
            (@add_monoid.to_add_semigroup.{u} α
              (@add_group.to_add_monoid.{u} α inst_1)))
          (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) a)
          (@has_add.add.{u} α
            (@add_semigroup.to_has_add.{u} α
              (@add_monoid.to_add_semigroup.{u} α
                (@add_group.to_add_monoid.{u} α inst_1))) a b)) b)
      (@eq.{u+1} α
        (@has_add.add.{u} α
          (@add_semigroup.to_has_add.{u} α
            (@add_monoid.to_add_semigroup.{u} α
              (@add_group.to_add_monoid.{u} α inst_1)))
          (@has_add.add.{u} α
            (@add_semigroup.to_has_add.{u} α
              (@add_monoid.to_add_semigroup.{u} α
                (@add_group.to_add_monoid.{u} α inst_1)))
            (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) a) a) b) b)
      (@id_locked.{0}
        (@eq.{1} Prop
          (@eq.{u+1} α
            (@has_add.add.{u} α
              (@add_semigroup.to_has_add.{u} α
                (@add_monoid.to_add_semigroup.{u} α
                  (@add_group.to_add_monoid.{u} α inst_1)))
              (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) a)
              (@has_add.add.{u} α
                (@add_semigroup.to_has_add.{u} α
                  (@add_monoid.to_add_semigroup.{u} α
                    (@add_group.to_add_monoid.{u} α inst_1))) a b)) b)
          (@eq.{u+1} α
            (@has_add.add.{u} α
              (@add_semigroup.to_has_add.{u} α
                (@add_monoid.to_add_semigroup.{u} α
                  (@add_group.to_add_monoid.{u} α inst_1)))
              (@has_add.add.{u} α
                (@add_semigroup.to_has_add.{u} α
                  (@add_monoid.to_add_semigroup.{u} α
                    (@add_group.to_add_monoid.{u} α inst_1)))
                (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) a) a)
              b) b))
        (@eq.rec.{0 u+1} α
          (@has_add.add.{u} α
            (@add_semigroup.to_has_add.{u} α
              (@add_monoid.to_add_semigroup.{u} α
                (@add_group.to_add_monoid.{u} α inst_1)))
            (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) a)
            (@has_add.add.{u} α
              (@add_semigroup.to_has_add.{u} α
                (@add_monoid.to_add_semigroup.{u} α
                  (@add_group.to_add_monoid.{u} α inst_1))) a b))
          (λ (a_0 : α),
          @eq.{1} Prop
            (@eq.{u+1} α
              (@has_add.add.{u} α
                (@add_semigroup.to_has_add.{u} α
                  (@add_monoid.to_add_semigroup.{u} α
                    (@add_group.to_add_monoid.{u} α inst_1)))
                (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) a)
                (@has_add.add.{u} α
                  (@add_semigroup.to_has_add.{u} α
                    (@add_monoid.to_add_semigroup.{u} α
                      (@add_group.to_add_monoid.{u} α inst_1))) a b)) b)
            (@eq.{u+1} α a_0 b))
          (@eq.refl.{1} Prop
            (@eq.{u+1} α
              (@has_add.add.{u} α
                (@add_semigroup.to_has_add.{u} α
                  (@add_monoid.to_add_semigroup.{u} α
                    (@add_group.to_add_monoid.{u} α inst_1)))
                (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) a)
                (@has_add.add.{u} α
                  (@add_semigroup.to_has_add.{u} α
                    (@add_monoid.to_add_semigroup.{u} α
                      (@add_group.to_add_monoid.{u} α inst_1))) a b)) b))
          (@has_add.add.{u} α
            (@add_semigroup.to_has_add.{u} α
              (@add_monoid.to_add_semigroup.{u} α
                (@add_group.to_add_monoid.{u} α inst_1)))
            (@has_add.add.{u} α
              (@add_semigroup.to_has_add.{u} α
                (@add_monoid.to_add_semigroup.{u} α
                  (@add_group.to_add_monoid.{u} α inst_1)))
              (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) a) a) b)
          (@eq.symm.{u+1} α
            (@has_add.add.{u} α
              (@add_semigroup.to_has_add.{u} α
                (@add_monoid.to_add_semigroup.{u} α
                  (@add_group.to_add_monoid.{u} α inst_1)))
              (@has_add.add.{u} α
                (@add_semigroup.to_has_add.{u} α
                  (@add_monoid.to_add_semigroup.{u} α
                    (@add_group.to_add_monoid.{u} α inst_1)))
                (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) a) a)
              b)
            (@has_add.add.{u} α
              (@add_semigroup.to_has_add.{u} α
                (@add_monoid.to_add_semigroup.{u} α
                  (@add_group.to_add_monoid.{u} α inst_1)))
              (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) a)
              (@has_add.add.{u} α
                (@add_semigroup.to_has_add.{u} α
                  (@add_monoid.to_add_semigroup.{u} α
                    (@add_group.to_add_monoid.{u} α inst_1))) a b))
            (@add_assoc.{u} α
              (@add_monoid.to_add_semigroup.{u} α
                (@add_group.to_add_monoid.{u} α inst_1))
              (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) a) a
              b))))
      (@eq.mpr.{0}
        (@eq.{u+1} α
          (@has_add.add.{u} α
            (@add_semigroup.to_has_add.{u} α
              (@add_monoid.to_add_semigroup.{u} α
                (@add_group.to_add_monoid.{u} α inst_1)))
            (@has_add.add.{u} α
              (@add_semigroup.to_has_add.{u} α
                (@add_monoid.to_add_semigroup.{u} α
                  (@add_group.to_add_monoid.{u} α inst_1)))
              (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) a) a) b)
          b)
        (@eq.{u+1} α
          (@has_add.add.{u} α
            (@add_semigroup.to_has_add.{u} α
              (@add_monoid.to_add_semigroup.{u} α
                (@add_group.to_add_monoid.{u} α inst_1)))
            (@has_zero.zero.{u} α
              (@add_monoid.to_has_zero.{u} α
                (@add_group.to_add_monoid.{u} α inst_1))) b) b)
        (@id_locked.{0}
          (@eq.{1} Prop
            (@eq.{u+1} α
              (@has_add.add.{u} α
                (@add_semigroup.to_has_add.{u} α
                  (@add_monoid.to_add_semigroup.{u} α
                    (@add_group.to_add_monoid.{u} α inst_1)))
                (@has_add.add.{u} α
                  (@add_semigroup.to_has_add.{u} α
                    (@add_monoid.to_add_semigroup.{u} α
                      (@add_group.to_add_monoid.{u} α inst_1)))
                  (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) a) a)
                b) b)
            (@eq.{u+1} α
              (@has_add.add.{u} α
                (@add_semigroup.to_has_add.{u} α
                  (@add_monoid.to_add_semigroup.{u} α
                    (@add_group.to_add_monoid.{u} α inst_1)))
                (@has_zero.zero.{u} α
                  (@add_monoid.to_has_zero.{u} α
                    (@add_group.to_add_monoid.{u} α inst_1))) b) b))
          (@eq.rec.{0 u+1} α
            (@has_add.add.{u} α
              (@add_semigroup.to_has_add.{u} α
                (@add_monoid.to_add_semigroup.{u} α
                  (@add_group.to_add_monoid.{u} α inst_1)))
              (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) a) a)
            (λ (a_0 : α),
            @eq.{1} Prop
              (@eq.{u+1} α
                (@has_add.add.{u} α
                  (@add_semigroup.to_has_add.{u} α
                    (@add_monoid.to_add_semigroup.{u} α
                      (@add_group.to_add_monoid.{u} α inst_1)))
                  (@has_add.add.{u} α
                    (@add_semigroup.to_has_add.{u} α
                      (@add_monoid.to_add_semigroup.{u} α
                        (@add_group.to_add_monoid.{u} α inst_1)))
                    (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) a)
                    a) b) b)
              (@eq.{u+1} α
                (@has_add.add.{u} α
                  (@add_semigroup.to_has_add.{u} α
                    (@add_monoid.to_add_semigroup.{u} α
                      (@add_group.to_add_monoid.{u} α inst_1))) a_0 b) b))
            (@eq.refl.{1} Prop
              (@eq.{u+1} α
                (@has_add.add.{u} α
                  (@add_semigroup.to_has_add.{u} α
                    (@add_monoid.to_add_semigroup.{u} α
                      (@add_group.to_add_monoid.{u} α inst_1)))
                  (@has_add.add.{u} α
                    (@add_semigroup.to_has_add.{u} α
                      (@add_monoid.to_add_semigroup.{u} α
                        (@add_group.to_add_monoid.{u} α inst_1)))
                    (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) a)
                    a) b) b))
            (@has_zero.zero.{u} α
              (@add_monoid.to_has_zero.{u} α
                (@add_group.to_add_monoid.{u} α inst_1)))
            (@add_left_neg.{u} α inst_1 a)))
        (@eq.mpr.{0}
          (@eq.{u+1} α
            (@has_add.add.{u} α
              (@add_semigroup.to_has_add.{u} α
                (@add_monoid.to_add_semigroup.{u} α
                  (@add_group.to_add_monoid.{u} α inst_1)))
              (@has_zero.zero.{u} α
                (@add_monoid.to_has_zero.{u} α
                  (@add_group.to_add_monoid.{u} α inst_1))) b) b)
          (@eq.{u+1} α b b)
          (@id_locked.{0}
            (@eq.{1} Prop
              (@eq.{u+1} α
                (@has_add.add.{u} α
                  (@add_semigroup.to_has_add.{u} α
                    (@add_monoid.to_add_semigroup.{u} α
                      (@add_group.to_add_monoid.{u} α inst_1)))
                  (@has_zero.zero.{u} α
                    (@add_monoid.to_has_zero.{u} α
                      (@add_group.to_add_monoid.{u} α inst_1))) b) b)
              (@eq.{u+1} α b b))
            (@eq.rec.{0 u+1} α
              (@has_add.add.{u} α
                (@add_semigroup.to_has_add.{u} α
                  (@add_monoid.to_add_semigroup.{u} α
                    (@add_group.to_add_monoid.{u} α inst_1)))
                (@has_zero.zero.{u} α
                  (@add_monoid.to_has_zero.{u} α
                    (@add_group.to_add_monoid.{u} α inst_1))) b)
              (λ (a_0 : α),
              @eq.{1} Prop
                (@eq.{u+1} α
                  (@has_add.add.{u} α
                    (@add_semigroup.to_has_add.{u} α
                      (@add_monoid.to_add_semigroup.{u} α
                        (@add_group.to_add_monoid.{u} α inst_1)))
                    (@has_zero.zero.{u} α
                      (@add_monoid.to_has_zero.{u} α
                        (@add_group.to_add_monoid.{u} α inst_1))) b) b)
                (@eq.{u+1} α a_0 b))
              (@eq.refl.{1} Prop
                (@eq.{u+1} α
                  (@has_add.add.{u} α
                    (@add_semigroup.to_has_add.{u} α
                      (@add_monoid.to_add_semigroup.{u} α
                        (@add_group.to_add_monoid.{u} α inst_1)))
                    (@has_zero.zero.{u} α
                      (@add_monoid.to_has_zero.{u} α
                        (@add_group.to_add_monoid.{u} α inst_1))) b) b)) b
              (@zero_add.{u} α (@add_group.to_add_monoid.{u} α inst_1) b)))
          (@eq.refl.{u+1} α b))))),0))"
err: "provingground.interface.UnParsedException: could not parse expression @add_group.{u}"

mod: "DefMod(Definition(neg_neg,Vector(Param(u)),∀ {α : Type u} [inst_1 : @add_group.{u} α] (a : α),
@eq.{u+1} α
  (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1)
    (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) a)) a,λ {α : Type u} [inst_1 : @add_group.{u} α] (a : α),
@neg_eq_of_add_eq_zero.{u} α inst_1
  (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) a) a
  (@add_left_neg.{u} α inst_1 a),0))"
err: "provingground.interface.UnParsedException: could not parse expression @add_group.{u}"

mod: "DefMod(Definition(add_right_neg,Vector(Param(u)),∀ {α : Type u} [inst_1 : @add_group.{u} α] (a : α),
@eq.{u+1} α
  (@has_add.add.{u} α
    (@add_semigroup.to_has_add.{u} α
      (@add_monoid.to_add_semigroup.{u} α
        (@add_group.to_add_monoid.{u} α inst_1))) a
    (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) a))
  (@has_zero.zero.{u} α
    (@add_monoid.to_has_zero.{u} α (@add_group.to_add_monoid.{u} α inst_1))),λ {α : Type u} [inst_1 : @add_group.{u} α] (a : α),
(λ (this :
      @eq.{u+1} α
        (@has_add.add.{u} α
          (@add_semigroup.to_has_add.{u} α
            (@add_monoid.to_add_semigroup.{u} α
              (@add_group.to_add_monoid.{u} α inst_1)))
          (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1)
            (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) a))
          (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) a))
        (@has_zero.zero.{u} α
          (@add_monoid.to_has_zero.{u} α
            (@add_group.to_add_monoid.{u} α inst_1)))),
  @eq.mp.{0}
    (@eq.{u+1} α
      (@has_add.add.{u} α
        (@add_semigroup.to_has_add.{u} α
          (@add_monoid.to_add_semigroup.{u} α
            (@add_group.to_add_monoid.{u} α inst_1)))
        (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1)
          (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) a))
        (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) a))
      (@has_zero.zero.{u} α
        (@add_monoid.to_has_zero.{u} α
          (@add_group.to_add_monoid.{u} α inst_1))))
    (@eq.{u+1} α
      (@has_add.add.{u} α
        (@add_semigroup.to_has_add.{u} α
          (@add_monoid.to_add_semigroup.{u} α
            (@add_group.to_add_monoid.{u} α inst_1))) a
        (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) a))
      (@has_zero.zero.{u} α
        (@add_monoid.to_has_zero.{u} α
          (@add_group.to_add_monoid.{u} α inst_1))))
    (@eq.rec.{0 u+1} α
      (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1)
        (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) a))
      (λ (a_0 : α),
      @eq.{1} Prop
        (@eq.{u+1} α
          (@has_add.add.{u} α
            (@add_semigroup.to_has_add.{u} α
              (@add_monoid.to_add_semigroup.{u} α
                (@add_group.to_add_monoid.{u} α inst_1)))
            (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1)
              (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) a))
            (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) a))
          (@has_zero.zero.{u} α
            (@add_monoid.to_has_zero.{u} α
              (@add_group.to_add_monoid.{u} α inst_1))))
        (@eq.{u+1} α
          (@has_add.add.{u} α
            (@add_semigroup.to_has_add.{u} α
              (@add_monoid.to_add_semigroup.{u} α
                (@add_group.to_add_monoid.{u} α inst_1))) a_0
            (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) a))
          (@has_zero.zero.{u} α
            (@add_monoid.to_has_zero.{u} α
              (@add_group.to_add_monoid.{u} α inst_1)))))
      (@eq.refl.{1} Prop
        (@eq.{u+1} α
          (@has_add.add.{u} α
            (@add_semigroup.to_has_add.{u} α
              (@add_monoid.to_add_semigroup.{u} α
                (@add_group.to_add_monoid.{u} α inst_1)))
            (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1)
              (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) a))
            (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) a))
          (@has_zero.zero.{u} α
            (@add_monoid.to_has_zero.{u} α
              (@add_group.to_add_monoid.{u} α inst_1))))) a
      (@neg_neg.{u} α inst_1 a)) this)
  (@eq.mpr.{0}
    (@eq.{u+1} α
      (@has_add.add.{u} α
        (@add_semigroup.to_has_add.{u} α
          (@add_monoid.to_add_semigroup.{u} α
            (@add_group.to_add_monoid.{u} α inst_1)))
        (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1)
          (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) a))
        (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) a))
      (@has_zero.zero.{u} α
        (@add_monoid.to_has_zero.{u} α
          (@add_group.to_add_monoid.{u} α inst_1))))
    (@eq.{u+1} α
      (@has_zero.zero.{u} α
        (@add_monoid.to_has_zero.{u} α (@add_group.to_add_monoid.{u} α inst_1)))
      (@has_zero.zero.{u} α
        (@add_monoid.to_has_zero.{u} α
          (@add_group.to_add_monoid.{u} α inst_1))))
    (@id_locked.{0}
      (@eq.{1} Prop
        (@eq.{u+1} α
          (@has_add.add.{u} α
            (@add_semigroup.to_has_add.{u} α
              (@add_monoid.to_add_semigroup.{u} α
                (@add_group.to_add_monoid.{u} α inst_1)))
            (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1)
              (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) a))
            (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) a))
          (@has_zero.zero.{u} α
            (@add_monoid.to_has_zero.{u} α
              (@add_group.to_add_monoid.{u} α inst_1))))
        (@eq.{u+1} α
          (@has_zero.zero.{u} α
            (@add_monoid.to_has_zero.{u} α
              (@add_group.to_add_monoid.{u} α inst_1)))
          (@has_zero.zero.{u} α
            (@add_monoid.to_has_zero.{u} α
              (@add_group.to_add_monoid.{u} α inst_1)))))
      (@eq.rec.{0 u+1} α
        (@has_add.add.{u} α
          (@add_semigroup.to_has_add.{u} α
            (@add_monoid.to_add_semigroup.{u} α
              (@add_group.to_add_monoid.{u} α inst_1)))
          (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1)
            (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) a))
          (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) a))
        (λ (a_0 : α),
        @eq.{1} Prop
          (@eq.{u+1} α
            (@has_add.add.{u} α
              (@add_semigroup.to_has_add.{u} α
                (@add_monoid.to_add_semigroup.{u} α
                  (@add_group.to_add_monoid.{u} α inst_1)))
              (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1)
                (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) a))
              (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) a))
            (@has_zero.zero.{u} α
              (@add_monoid.to_has_zero.{u} α
                (@add_group.to_add_monoid.{u} α inst_1))))
          (@eq.{u+1} α a_0
            (@has_zero.zero.{u} α
              (@add_monoid.to_has_zero.{u} α
                (@add_group.to_add_monoid.{u} α inst_1)))))
        (@eq.refl.{1} Prop
          (@eq.{u+1} α
            (@has_add.add.{u} α
              (@add_semigroup.to_has_add.{u} α
                (@add_monoid.to_add_semigroup.{u} α
                  (@add_group.to_add_monoid.{u} α inst_1)))
              (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1)
                (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) a))
              (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) a))
            (@has_zero.zero.{u} α
              (@add_monoid.to_has_zero.{u} α
                (@add_group.to_add_monoid.{u} α inst_1)))))
        (@has_zero.zero.{u} α
          (@add_monoid.to_has_zero.{u} α
            (@add_group.to_add_monoid.{u} α inst_1)))
        (@add_left_neg.{u} α inst_1
          (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) a))))
    (@eq.refl.{u+1} α
      (@has_zero.zero.{u} α
        (@add_monoid.to_has_zero.{u} α
          (@add_group.to_add_monoid.{u} α inst_1))))),0))"
err: "provingground.interface.UnParsedException: could not parse expression @add_group.{u}"

mod: "DefMod(Definition(add_group.add_right_cancel,Vector(Param(u)),∀ {α : Type u} [inst_1 : @add_group.{u} α] {a b c : α}
  (h :
    @eq.{u+1} α
      (@has_add.add.{u} α
        (@add_semigroup.to_has_add.{u} α
          (@add_monoid.to_add_semigroup.{u} α
            (@add_group.to_add_monoid.{u} α inst_1))) a b)
      (@has_add.add.{u} α
        (@add_semigroup.to_has_add.{u} α
          (@add_monoid.to_add_semigroup.{u} α
            (@add_group.to_add_monoid.{u} α inst_1))) c b)),
@eq.{u+1} α a c,λ {α : Type u} [inst_1 : @add_group.{u} α] {a b c : α}
  (h :
    @eq.{u+1} α
      (@has_add.add.{u} α
        (@add_semigroup.to_has_add.{u} α
          (@add_monoid.to_add_semigroup.{u} α
            (@add_group.to_add_monoid.{u} α inst_1))) a b)
      (@has_add.add.{u} α
        (@add_semigroup.to_has_add.{u} α
          (@add_monoid.to_add_semigroup.{u} α
            (@add_group.to_add_monoid.{u} α inst_1))) c b)),
(λ (this :
      @eq.{u+1} α
        (@has_add.add.{u} α
          (@add_semigroup.to_has_add.{u} α
            (@add_monoid.to_add_semigroup.{u} α
              (@add_group.to_add_monoid.{u} α inst_1)))
          (@has_add.add.{u} α
            (@add_semigroup.to_has_add.{u} α
              (@add_monoid.to_add_semigroup.{u} α
                (@add_group.to_add_monoid.{u} α inst_1))) a b)
          (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) b)) a),
  @eq.mpr.{0} (@eq.{u+1} α a c) (@eq.{u+1} α a a)
    (@id_locked.{0} (@eq.{1} Prop (@eq.{u+1} α a c) (@eq.{u+1} α a a))
      (@eq.rec.{0 u+1} α c
        (λ (a_0 : α), @eq.{1} Prop (@eq.{u+1} α a c) (@eq.{u+1} α a a_0))
        (@eq.refl.{1} Prop (@eq.{u+1} α a c)) a
        (@eq.mp.{0}
          (@eq.{u+1} α
            (@has_add.add.{u} α
              (@add_semigroup.to_has_add.{u} α
                (@add_monoid.to_add_semigroup.{u} α
                  (@add_group.to_add_monoid.{u} α inst_1)))
              (@has_add.add.{u} α
                (@add_semigroup.to_has_add.{u} α
                  (@add_monoid.to_add_semigroup.{u} α
                    (@add_group.to_add_monoid.{u} α inst_1))) a b)
              (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) b)) a)
          (@eq.{u+1} α c a)
          ((λ (a_0 a_1 : α) (e_1 : @eq.{u+1} α a_0 a_1) (a_2 a_3 : α)
              (e_2 : @eq.{u+1} α a_2 a_3),
            @congr.{u+1 1} α Prop (@eq.{u+1} α a_0) (@eq.{u+1} α a_1) a_2 a_3
              (@congr_arg.{u+1 max (u+1) 1} α (∀ (a_4 : α), Prop) a_0 a_1
                (@eq.{u+1} α) e_1) e_2)
            (@has_add.add.{u} α
              (@add_semigroup.to_has_add.{u} α
                (@add_monoid.to_add_semigroup.{u} α
                  (@add_group.to_add_monoid.{u} α inst_1)))
              (@has_add.add.{u} α
                (@add_semigroup.to_has_add.{u} α
                  (@add_monoid.to_add_semigroup.{u} α
                    (@add_group.to_add_monoid.{u} α inst_1))) a b)
              (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) b)) c
            (@eq.trans.{u+1} α
              (@has_add.add.{u} α
                (@add_semigroup.to_has_add.{u} α
                  (@add_monoid.to_add_semigroup.{u} α
                    (@add_group.to_add_monoid.{u} α inst_1)))
                (@has_add.add.{u} α
                  (@add_semigroup.to_has_add.{u} α
                    (@add_monoid.to_add_semigroup.{u} α
                      (@add_group.to_add_monoid.{u} α inst_1))) a b)
                (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) b))
              (@has_add.add.{u} α
                (@add_semigroup.to_has_add.{u} α
                  (@add_monoid.to_add_semigroup.{u} α
                    (@add_group.to_add_monoid.{u} α inst_1))) c
                (@has_zero.zero.{u} α
                  (@add_monoid.to_has_zero.{u} α
                    (@add_group.to_add_monoid.{u} α inst_1)))) c
              (@eq.trans.{u+1} α
                (@has_add.add.{u} α
                  (@add_semigroup.to_has_add.{u} α
                    (@add_monoid.to_add_semigroup.{u} α
                      (@add_group.to_add_monoid.{u} α inst_1)))
                  (@has_add.add.{u} α
                    (@add_semigroup.to_has_add.{u} α
                      (@add_monoid.to_add_semigroup.{u} α
                        (@add_group.to_add_monoid.{u} α inst_1))) a b)
                  (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) b))
                (@has_add.add.{u} α
                  (@add_semigroup.to_has_add.{u} α
                    (@add_monoid.to_add_semigroup.{u} α
                      (@add_group.to_add_monoid.{u} α inst_1))) c
                  (@has_add.add.{u} α
                    (@add_semigroup.to_has_add.{u} α
                      (@add_monoid.to_add_semigroup.{u} α
                        (@add_group.to_add_monoid.{u} α inst_1))) b
                    (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1)
                      b)))
                (@has_add.add.{u} α
                  (@add_semigroup.to_has_add.{u} α
                    (@add_monoid.to_add_semigroup.{u} α
                      (@add_group.to_add_monoid.{u} α inst_1))) c
                  (@has_zero.zero.{u} α
                    (@add_monoid.to_has_zero.{u} α
                      (@add_group.to_add_monoid.{u} α inst_1))))
                (@eq.trans.{u+1} α
                  (@has_add.add.{u} α
                    (@add_semigroup.to_has_add.{u} α
                      (@add_monoid.to_add_semigroup.{u} α
                        (@add_group.to_add_monoid.{u} α inst_1)))
                    (@has_add.add.{u} α
                      (@add_semigroup.to_has_add.{u} α
                        (@add_monoid.to_add_semigroup.{u} α
                          (@add_group.to_add_monoid.{u} α inst_1))) a b)
                    (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) b))
                  (@has_add.add.{u} α
                    (@add_semigroup.to_has_add.{u} α
                      (@add_monoid.to_add_semigroup.{u} α
                        (@add_group.to_add_monoid.{u} α inst_1)))
                    (@has_add.add.{u} α
                      (@add_semigroup.to_has_add.{u} α
                        (@add_monoid.to_add_semigroup.{u} α
                          (@add_group.to_add_monoid.{u} α inst_1))) c b)
                    (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) b))
                  (@has_add.add.{u} α
                    (@add_semigroup.to_has_add.{u} α
                      (@add_monoid.to_add_semigroup.{u} α
                        (@add_group.to_add_monoid.{u} α inst_1))) c
                    (@has_add.add.{u} α
                      (@add_semigroup.to_has_add.{u} α
                        (@add_monoid.to_add_semigroup.{u} α
                          (@add_group.to_add_monoid.{u} α inst_1))) b
                      (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1)
                        b)))
                  ((λ [c_0 : @has_add.{u} α] (a_0 a_1 : α)
                      (e_2 : @eq.{u+1} α a_0 a_1) (a_2 a_3 : α)
                      (e_3 : @eq.{u+1} α a_2 a_3),
                    @congr.{u+1 u+1} α α (@has_add.add.{u} α c_0 a_0)
                      (@has_add.add.{u} α c_0 a_1) a_2 a_3
                      (@congr_arg.{u+1 u+1} α (∀ (a_4 : α), α) a_0 a_1
                        (@has_add.add.{u} α c_0) e_2) e_3)
                    (@add_semigroup.to_has_add.{u} α
                      (@add_monoid.to_add_semigroup.{u} α
                        (@add_group.to_add_monoid.{u} α inst_1)))
                    (@has_add.add.{u} α
                      (@add_semigroup.to_has_add.{u} α
                        (@add_monoid.to_add_semigroup.{u} α
                          (@add_group.to_add_monoid.{u} α inst_1))) a b)
                    (@has_add.add.{u} α
                      (@add_semigroup.to_has_add.{u} α
                        (@add_monoid.to_add_semigroup.{u} α
                          (@add_group.to_add_monoid.{u} α inst_1))) c b) h
                    (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) b)
                    (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) b)
                    (@eq.refl.{u+1} α
                      (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1)
                        b)))
                  (@add_assoc.{u} α
                    (@add_monoid.to_add_semigroup.{u} α
                      (@add_group.to_add_monoid.{u} α inst_1)) c b
                    (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1)
                      b)))
                ((λ [c_0 : @has_add.{u} α] (a_0 a_1 : α)
                    (e_2 : @eq.{u+1} α a_0 a_1) (a_2 a_3 : α)
                    (e_3 : @eq.{u+1} α a_2 a_3),
                  @congr.{u+1 u+1} α α (@has_add.add.{u} α c_0 a_0)
                    (@has_add.add.{u} α c_0 a_1) a_2 a_3
                    (@congr_arg.{u+1 u+1} α (∀ (a_4 : α), α) a_0 a_1
                      (@has_add.add.{u} α c_0) e_2) e_3)
                  (@add_semigroup.to_has_add.{u} α
                    (@add_monoid.to_add_semigroup.{u} α
                      (@add_group.to_add_monoid.{u} α inst_1))) c c
                  (@eq.refl.{u+1} α c)
                  (@has_add.add.{u} α
                    (@add_semigroup.to_has_add.{u} α
                      (@add_monoid.to_add_semigroup.{u} α
                        (@add_group.to_add_monoid.{u} α inst_1))) b
                    (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) b))
                  (@has_zero.zero.{u} α
                    (@add_monoid.to_has_zero.{u} α
                      (@add_group.to_add_monoid.{u} α inst_1)))
                  (@add_right_neg.{u} α inst_1 b)))
              (@add_zero.{u} α (@add_group.to_add_monoid.{u} α inst_1) c)) a a
            (@eq.refl.{u+1} α a)) this))) (@eq.refl.{u+1} α a))
  (@eq.mpr.{0}
    (@eq.{u+1} α
      (@has_add.add.{u} α
        (@add_semigroup.to_has_add.{u} α
          (@add_monoid.to_add_semigroup.{u} α
            (@add_group.to_add_monoid.{u} α inst_1)))
        (@has_add.add.{u} α
          (@add_semigroup.to_has_add.{u} α
            (@add_monoid.to_add_semigroup.{u} α
              (@add_group.to_add_monoid.{u} α inst_1))) a b)
        (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) b)) a) @true
    (@id_locked.{0}
      (@eq.{1} Prop
        (@eq.{u+1} α
          (@has_add.add.{u} α
            (@add_semigroup.to_has_add.{u} α
              (@add_monoid.to_add_semigroup.{u} α
                (@add_group.to_add_monoid.{u} α inst_1)))
            (@has_add.add.{u} α
              (@add_semigroup.to_has_add.{u} α
                (@add_monoid.to_add_semigroup.{u} α
                  (@add_group.to_add_monoid.{u} α inst_1))) a b)
            (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) b)) a)
        @true)
      (@eq.trans.{1} Prop
        (@eq.{u+1} α
          (@has_add.add.{u} α
            (@add_semigroup.to_has_add.{u} α
              (@add_monoid.to_add_semigroup.{u} α
                (@add_group.to_add_monoid.{u} α inst_1)))
            (@has_add.add.{u} α
              (@add_semigroup.to_has_add.{u} α
                (@add_monoid.to_add_semigroup.{u} α
                  (@add_group.to_add_monoid.{u} α inst_1))) a b)
            (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) b)) a)
        (@eq.{u+1} α a a) @true
        ((λ (a_0 a_1 : α) (e_1 : @eq.{u+1} α a_0 a_1) (a_2 a_3 : α)
            (e_2 : @eq.{u+1} α a_2 a_3),
          @congr.{u+1 1} α Prop (@eq.{u+1} α a_0) (@eq.{u+1} α a_1) a_2 a_3
            (@congr_arg.{u+1 max (u+1) 1} α (∀ (a_4 : α), Prop) a_0 a_1
              (@eq.{u+1} α) e_1) e_2)
          (@has_add.add.{u} α
            (@add_semigroup.to_has_add.{u} α
              (@add_monoid.to_add_semigroup.{u} α
                (@add_group.to_add_monoid.{u} α inst_1)))
            (@has_add.add.{u} α
              (@add_semigroup.to_has_add.{u} α
                (@add_monoid.to_add_semigroup.{u} α
                  (@add_group.to_add_monoid.{u} α inst_1))) a b)
            (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) b)) a
          (@eq.trans.{u+1} α
            (@has_add.add.{u} α
              (@add_semigroup.to_has_add.{u} α
                (@add_monoid.to_add_semigroup.{u} α
                  (@add_group.to_add_monoid.{u} α inst_1)))
              (@has_add.add.{u} α
                (@add_semigroup.to_has_add.{u} α
                  (@add_monoid.to_add_semigroup.{u} α
                    (@add_group.to_add_monoid.{u} α inst_1))) a b)
              (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) b))
            (@has_add.add.{u} α
              (@add_semigroup.to_has_add.{u} α
                (@add_monoid.to_add_semigroup.{u} α
                  (@add_group.to_add_monoid.{u} α inst_1))) a
              (@has_zero.zero.{u} α
                (@add_monoid.to_has_zero.{u} α
                  (@add_group.to_add_monoid.{u} α inst_1)))) a
            (@eq.trans.{u+1} α
              (@has_add.add.{u} α
                (@add_semigroup.to_has_add.{u} α
                  (@add_monoid.to_add_semigroup.{u} α
                    (@add_group.to_add_monoid.{u} α inst_1)))
                (@has_add.add.{u} α
                  (@add_semigroup.to_has_add.{u} α
                    (@add_monoid.to_add_semigroup.{u} α
                      (@add_group.to_add_monoid.{u} α inst_1))) a b)
                (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) b))
              (@has_add.add.{u} α
                (@add_semigroup.to_has_add.{u} α
                  (@add_monoid.to_add_semigroup.{u} α
                    (@add_group.to_add_monoid.{u} α inst_1))) a
                (@has_add.add.{u} α
                  (@add_semigroup.to_has_add.{u} α
                    (@add_monoid.to_add_semigroup.{u} α
                      (@add_group.to_add_monoid.{u} α inst_1))) b
                  (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) b)))
              (@has_add.add.{u} α
                (@add_semigroup.to_has_add.{u} α
                  (@add_monoid.to_add_semigroup.{u} α
                    (@add_group.to_add_monoid.{u} α inst_1))) a
                (@has_zero.zero.{u} α
                  (@add_monoid.to_has_zero.{u} α
                    (@add_group.to_add_monoid.{u} α inst_1))))
              (@add_assoc.{u} α
                (@add_monoid.to_add_semigroup.{u} α
                  (@add_group.to_add_monoid.{u} α inst_1)) a b
                (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) b))
              ((λ [c_0 : @has_add.{u} α] (a_0 a_1 : α)
                  (e_2 : @eq.{u+1} α a_0 a_1) (a_2 a_3 : α)
                  (e_3 : @eq.{u+1} α a_2 a_3),
                @congr.{u+1 u+1} α α (@has_add.add.{u} α c_0 a_0)
                  (@has_add.add.{u} α c_0 a_1) a_2 a_3
                  (@congr_arg.{u+1 u+1} α (∀ (a_4 : α), α) a_0 a_1
                    (@has_add.add.{u} α c_0) e_2) e_3)
                (@add_semigroup.to_has_add.{u} α
                  (@add_monoid.to_add_semigroup.{u} α
                    (@add_group.to_add_monoid.{u} α inst_1))) a a
                (@eq.refl.{u+1} α a)
                (@has_add.add.{u} α
                  (@add_semigroup.to_has_add.{u} α
                    (@add_monoid.to_add_semigroup.{u} α
                      (@add_group.to_add_monoid.{u} α inst_1))) b
                  (@has_neg.neg.{u} α (@add_group.to_has_neg.{u} α inst_1) b))
                (@has_zero.zero.{u} α
                  (@add_monoid.to_has_zero.{u} α
                    (@add_group.to_add_monoid.{u} α inst_1)))
                (@add_right_neg.{u} α inst_1 b)))
            (@add_zero.{u} α (@add_group.to_add_monoid.{u} α inst_1) a)) a a
          (@eq.refl.{u+1} α a))
        (@propext (@eq.{u+1} α a a) @true (@eq_self_iff_true.{u+1} α a))))
    @trivial),0))"
err: "provingground.interface.UnParsedException: could not parse expression @add_group.{u}"

mod: "DefMod(Definition(add_group.to_right_cancel_add_semigroup,Vector(Param(u)),∀ {α : Type u} [s : @add_group.{u} α], @add_right_cancel_semigroup.{u} α,λ {α : Type u} [s : @add_group.{u} α],
@add_right_cancel_semigroup.mk.{u} α (@add_group.add.{u} α s)
  (@add_group.add_assoc.{u} α s) (@add_group.add_right_cancel.{u} α s),0))"
err: "provingground.interface.UnParsedException: could not parse expression @add_group.{u}"

mod: "DefMod(Definition(prod.lex_wf.equations._eqn_1,Vector(Param(u), Param(v)),∀ {α : Type u} {β : Type v} {ra : (∀ (a a_0 : α), Prop)}
  {rb : (∀ (a a_0 : β), Prop)} (ha : @well_founded.{u+1} α ra)
  (hb : @well_founded.{v+1} β rb),
@eq.{0}
  (@well_founded.{max (u+1) (v+1)} (@prod.{u v} α β)
    (@prod.lex.{u v} α β ra rb)) (@prod.lex_wf.{u v} α β ra rb ha hb)
  (@well_founded.intro.{max (u+1) (v+1)} (@prod.{u v} α β)
    (@prod.lex.{u v} α β ra rb)
    (λ (p : @prod.{u v} α β),
    @prod.cases_on.{0 u v} α β
      (λ (x : @prod.{u v} α β),
      @acc.{max (u+1) (v+1)} (@prod.{u v} α β) (@prod.lex.{u v} α β ra rb) x) p
      (λ (a : α) (b : β),
      @prod.lex_accessible.{u v} α β ra rb a
        (@well_founded.apply.{u+1} α ra ha a)
        (@well_founded.apply.{v+1} β rb hb) b))),λ {α : Type u} {β : Type v} {ra : (∀ (a a_0 : α), Prop)}
  {rb : (∀ (a a_0 : β), Prop)} (ha : @well_founded.{u+1} α ra)
  (hb : @well_founded.{v+1} β rb),
@eq.refl.{0}
  (@well_founded.{max (u+1) (v+1)} (@prod.{u v} α β)
    (@prod.lex.{u v} α β ra rb)) (@prod.lex_wf.{u v} α β ra rb ha hb),0))"
err: "provingground.interface.UnParsedException: could not parse expression @prod.lex_wf.{u v}"

mod: "DefMod(Definition(list.decidable_mem._match_1,Vector(Param(u)),∀ {α : Type u} (a b : α) (l : @list.{u} α) (h : @not (@eq.{u+1} α a b))
  (a_0 :
    @decidable (@has_mem.mem.{u u} α (@list.{u} α) (@list.has_mem.{u} α) a l)),
@decidable
  (@has_mem.mem.{u u} α (@list.{u} α) (@list.has_mem.{u} α) a
    (@list.cons.{u} α b l)),λ {α : Type u} (a b : α) (l : @list.{u} α) (h : @not (@eq.{u+1} α a b))
  (a_0 :
    @decidable (@has_mem.mem.{u u} α (@list.{u} α) (@list.has_mem.{u} α) a l)),
@decidable.cases_on.{1}
  (@has_mem.mem.{u u} α (@list.{u} α) (@list.has_mem.{u} α) a l)
  (λ (a_1 :
      @decidable
        (@has_mem.mem.{u u} α (@list.{u} α) (@list.has_mem.{u} α) a l)),
  @decidable
    (@has_mem.mem.{u u} α (@list.{u} α) (@list.has_mem.{u} α) a
      (@list.cons.{u} α b l))) a_0
  (λ (a_1 :
      @not (@has_mem.mem.{u u} α (@list.{u} α) (@list.has_mem.{u} α) a l)),
  @decidable.is_false
    (@has_mem.mem.{u u} α (@list.{u} α) (@list.has_mem.{u} α) a
      (@list.cons.{u} α b l))
    (@not_or (@eq.{u+1} α a b)
      (@pprod.fst.{max (u+1) 1 max (u+1) 1}
        ((λ (a_2 : @list.{u} α), ∀ (a_3 : α), Prop) l)
        (@list.rec.{(max (u+1) 1)+1 u} α
          (λ (n : @list.{u} α), Sort (max (u+1) 1)) @punit.{max (u+1) 1}
          (λ (a_2 : α) (a_3 : @list.{u} α) (ih_1 : Sort (max (u+1) 1)),
          @pprod.{max (u+1) 1 max (u+1) 1}
            (@pprod.{max (u+1) 1 max (u+1) 1}
              ((λ (a_4 : @list.{u} α), ∀ (a_5 : α), Prop) a_3) ih_1)
            @punit.{max (u+1) 1}) l)
        (@pprod.fst.{max (u+1) 1 max (u+1) 1}
          (@pprod.{max (u+1) 1 max (u+1) 1}
            ((λ (a_2 : @list.{u} α), ∀ (a_3 : α), Prop) l)
            (@list.rec.{(max (u+1) 1)+1 u} α
              (λ (n : @list.{u} α), Sort (max (u+1) 1)) @punit.{max (u+1) 1}
              (λ (a_2 : α) (a_3 : @list.{u} α) (ih_1 : Sort (max (u+1) 1)),
              @pprod.{max (u+1) 1 max (u+1) 1}
                (@pprod.{max (u+1) 1 max (u+1) 1}
                  ((λ (a_4 : @list.{u} α), ∀ (a_5 : α), Prop) a_3) ih_1)
                @punit.{max (u+1) 1}) l)) @punit.{max (u+1) 1}
          (@pprod.mk.{max (u+1) 1 max (u+1) 1}
            (@pprod.{max (u+1) 1 max (u+1) 1}
              ((λ (a_2 : @list.{u} α), ∀ (a_3 : α), Prop) l)
              (@list.below.{max (u+1) 1 u} α
                (λ (a_2 : @list.{u} α), ∀ (a_3 : α), Prop) l))
            @punit.{max (u+1) 1}
            (@list.rec.{max (u+1) 1 u} α
              (λ (n : @list.{u} α),
              @pprod.{max (u+1) 1 max (u+1) 1}
                ((λ (a_2 : @list.{u} α), ∀ (a_3 : α), Prop) n)
                (@list.below.{max (u+1) 1 u} α
                  (λ (a_2 : @list.{u} α), ∀ (a_3 : α), Prop) n))
              (@pprod.mk.{max (u+1) 1 max (u+1) 1}
                ((λ (a_2 : @list.{u} α), ∀ (a_3 : α), Prop) (@list.nil.{u} α))
                @punit.{max (u+1) 1}
                ((λ (a_2 : @list.{u} α)
                    (F :
                      @list.below.{max (u+1) 1 u} α
                        (λ (a_4 : @list.{u} α), ∀ (a_5 : α), Prop) a_2)
                    (a_3 : α),
                  (λ (a_4 : α) (a_5 : @list.{u} α)
                      (F_0 :
                        @list.below.{max (u+1) 1 u} α
                          (λ (a_6 : @list.{u} α), ∀ (a_7 : α), Prop) a_5),
                    @list.cases_on.{max (u+1) 1 u} α
                      (λ (a_6 : @list.{u} α),
                      ∀ (F_1 :
                          @list.below.{max (u+1) 1 u} α
                            (λ (a_7 : @list.{u} α), ∀ (a_8 : α), Prop) a_6),
                      Prop) a_5
                      (λ (F_1 :
                          @list.below.{max (u+1) 1 u} α
                            (λ (a_6 : @list.{u} α), ∀ (a_7 : α), Prop)
                            (@list.nil.{u} α)),
                      @false)
                      (λ (a_1_0 : α) (a_2_0 : @list.{u} α)
                        (F_1 :
                          @list.below.{max (u+1) 1 u} α
                            (λ (a_6 : @list.{u} α), ∀ (a_7 : α), Prop)
                            (@list.cons.{u} α a_1_0 a_2_0)),
                      @or (@eq.{u+1} α a_4 a_1_0)
                        (@pprod.fst.{max (u+1) 1 max (u+1) 1}
                          ((λ (a_6 : @list.{u} α), ∀ (a_7 : α), Prop) a_2_0)
                          (@list.rec.{(max (u+1) 1)+1 u} α
                            (λ (n : @list.{u} α), Sort (max (u+1) 1))
                            @punit.{max (u+1) 1}
                            (λ (a_6 : α) (a_7 : @list.{u} α)
                              (ih_1 : Sort (max (u+1) 1)),
                            @pprod.{max (u+1) 1 max (u+1) 1}
                              (@pprod.{max (u+1) 1 max (u+1) 1}
                                ((λ (a_8 : @list.{u} α), ∀ (a_9 : α), Prop) a_7)
                                ih_1) @punit.{max (u+1) 1}) a_2_0)
                          (@pprod.fst.{max (u+1) 1 max (u+1) 1}
                            (@pprod.{max (u+1) 1 max (u+1) 1}
                              ((λ (a_6 : @list.{u} α), ∀ (a_7 : α), Prop) a_2_0)
                              (@list.rec.{(max (u+1) 1)+1 u} α
                                (λ (n : @list.{u} α), Sort (max (u+1) 1))
                                @punit.{max (u+1) 1}
                                (λ (a_6 : α) (a_7 : @list.{u} α)
                                  (ih_1 : Sort (max (u+1) 1)),
                                @pprod.{max (u+1) 1 max (u+1) 1}
                                  (@pprod.{max (u+1) 1 max (u+1) 1}
                                    ((λ (a_8 : @list.{u} α), ∀ (a_9 : α), Prop)
                                      a_7) ih_1) @punit.{max (u+1) 1}) a_2_0))
                            @punit.{max (u+1) 1} F_1) a_4)) F_0) a_3 a_2 F)
                  (@list.nil.{u} α) @punit.star.{max (u+1) 1})
                @punit.star.{max (u+1) 1})
              (λ (a_2 : α) (a_3 : @list.{u} α)
                (ih_1 :
                  @pprod.{max (u+1) 1 max (u+1) 1}
                    ((λ (a_4 : @list.{u} α), ∀ (a_5 : α), Prop) a_3)
                    (@list.below.{max (u+1) 1 u} α
                      (λ (a_4 : @list.{u} α), ∀ (a_5 : α), Prop) a_3)),
              @pprod.mk.{max (u+1) 1 max (u+1) 1}
                ((λ (a_4 : @list.{u} α), ∀ (a_5 : α), Prop)
                  (@list.cons.{u} α a_2 a_3))
                (@pprod.{max (u+1) 1 max (u+1) 1}
                  (@pprod.{max (u+1) 1 max (u+1) 1}
                    ((λ (a_4 : @list.{u} α), ∀ (a_5 : α), Prop) a_3)
                    (@list.below.{max (u+1) 1 u} α
                      (λ (a_4 : @list.{u} α), ∀ (a_5 : α), Prop) a_3))
                  @punit.{max (u+1) 1})
                ((λ (a_4 : @list.{u} α)
                    (F :
                      @list.below.{max (u+1) 1 u} α
                        (λ (a_6 : @list.{u} α), ∀ (a_7 : α), Prop) a_4)
                    (a_5 : α),
                  (λ (a_6 : α) (a_7 : @list.{u} α)
                      (F_0 :
                        @list.below.{max (u+1) 1 u} α
                          (λ (a_8 : @list.{u} α), ∀ (a_9 : α), Prop) a_7),
                    @list.cases_on.{max (u+1) 1 u} α
                      (λ (a_8 : @list.{u} α),
                      ∀ (F_1 :
                          @list.below.{max (u+1) 1 u} α
                            (λ (a_9 : @list.{u} α), ∀ (a_10 : α), Prop) a_8),
                      Prop) a_7
                      (λ (F_1 :
                          @list.below.{max (u+1) 1 u} α
                            (λ (a_8 : @list.{u} α), ∀ (a_9 : α), Prop)
                            (@list.nil.{u} α)),
                      @false)
                      (λ (a_1_0 : α) (a_2_0 : @list.{u} α)
                        (F_1 :
                          @list.below.{max (u+1) 1 u} α
                            (λ (a_8 : @list.{u} α), ∀ (a_9 : α), Prop)
                            (@list.cons.{u} α a_1_0 a_2_0)),
                      @or (@eq.{u+1} α a_6 a_1_0)
                        (@pprod.fst.{max (u+1) 1 max (u+1) 1}
                          ((λ (a_8 : @list.{u} α), ∀ (a_9 : α), Prop) a_2_0)
                          (@list.rec.{(max (u+1) 1)+1 u} α
                            (λ (n : @list.{u} α), Sort (max (u+1) 1))
                            @punit.{max (u+1) 1}
                            (λ (a_8 : α) (a_9 : @list.{u} α)
                              (ih_1_0 : Sort (max (u+1) 1)),
                            @pprod.{max (u+1) 1 max (u+1) 1}
                              (@pprod.{max (u+1) 1 max (u+1) 1}
                                ((λ (a_10 : @list.{u} α), ∀ (a_11 : α), Prop)
                                  a_9) ih_1_0) @punit.{max (u+1) 1}) a_2_0)
                          (@pprod.fst.{max (u+1) 1 max (u+1) 1}
                            (@pprod.{max (u+1) 1 max (u+1) 1}
                              ((λ (a_8 : @list.{u} α), ∀ (a_9 : α), Prop) a_2_0)
                              (@list.rec.{(max (u+1) 1)+1 u} α
                                (λ (n : @list.{u} α), Sort (max (u+1) 1))
                                @punit.{max (u+1) 1}
                                (λ (a_8 : α) (a_9 : @list.{u} α)
                                  (ih_1_0 : Sort (max (u+1) 1)),
                                @pprod.{max (u+1) 1 max (u+1) 1}
                                  (@pprod.{max (u+1) 1 max (u+1) 1}
                                    ((λ (a_10 : @list.{u} α),
                                      ∀ (a_11 : α),
                                      Prop) a_9) ih_1_0) @punit.{max (u+1) 1})
                                a_2_0)) @punit.{max (u+1) 1} F_1) a_6)) F_0) a_5
                    a_4 F) (@list.cons.{u} α a_2 a_3)
                  (@pprod.mk.{max (u+1) 1 max (u+1) 1}
                    (@pprod.{max (u+1) 1 max (u+1) 1}
                      ((λ (a_4 : @list.{u} α), ∀ (a_5 : α), Prop) a_3)
                      (@list.below.{max (u+1) 1 u} α
                        (λ (a_4 : @list.{u} α), ∀ (a_5 : α), Prop) a_3))
                    @punit.{max (u+1) 1} ih_1 @punit.star.{max (u+1) 1}))
                (@pprod.mk.{max (u+1) 1 max (u+1) 1}
                  (@pprod.{max (u+1) 1 max (u+1) 1}
                    ((λ (a_4 : @list.{u} α), ∀ (a_5 : α), Prop) a_3)
                    (@list.below.{max (u+1) 1 u} α
                      (λ (a_4 : @list.{u} α), ∀ (a_5 : α), Prop) a_3))
                  @punit.{max (u+1) 1} ih_1 @punit.star.{max (u+1) 1})) l)
            @punit.star.{max (u+1) 1})) a) h a_1))
  (λ (a_1 : @has_mem.mem.{u u} α (@list.{u} α) (@list.has_mem.{u} α) a l),
  @decidable.is_true
    (@has_mem.mem.{u u} α (@list.{u} α) (@list.has_mem.{u} α) a
      (@list.cons.{u} α b l))
    (@or.inr (@eq.{u+1} α a b)
      (@pprod.fst.{max (u+1) 1 max (u+1) 1}
        ((λ (a_2 : @list.{u} α), ∀ (a_3 : α), Prop) l)
        (@list.rec.{(max (u+1) 1)+1 u} α
          (λ (n : @list.{u} α), Sort (max (u+1) 1)) @punit.{max (u+1) 1}
          (λ (a_2 : α) (a_3 : @list.{u} α) (ih_1 : Sort (max (u+1) 1)),
          @pprod.{max (u+1) 1 max (u+1) 1}
            (@pprod.{max (u+1) 1 max (u+1) 1}
              ((λ (a_4 : @list.{u} α), ∀ (a_5 : α), Prop) a_3) ih_1)
            @punit.{max (u+1) 1}) l)
        (@pprod.fst.{max (u+1) 1 max (u+1) 1}
          (@pprod.{max (u+1) 1 max (u+1) 1}
            ((λ (a_2 : @list.{u} α), ∀ (a_3 : α), Prop) l)
            (@list.rec.{(max (u+1) 1)+1 u} α
              (λ (n : @list.{u} α), Sort (max (u+1) 1)) @punit.{max (u+1) 1}
              (λ (a_2 : α) (a_3 : @list.{u} α) (ih_1 : Sort (max (u+1) 1)),
              @pprod.{max (u+1) 1 max (u+1) 1}
                (@pprod.{max (u+1) 1 max (u+1) 1}
                  ((λ (a_4 : @list.{u} α), ∀ (a_5 : α), Prop) a_3) ih_1)
                @punit.{max (u+1) 1}) l)) @punit.{max (u+1) 1}
          (@pprod.mk.{max (u+1) 1 max (u+1) 1}
            (@pprod.{max (u+1) 1 max (u+1) 1}
              ((λ (a_2 : @list.{u} α), ∀ (a_3 : α), Prop) l)
              (@list.below.{max (u+1) 1 u} α
                (λ (a_2 : @list.{u} α), ∀ (a_3 : α), Prop) l))
            @punit.{max (u+1) 1}
            (@list.rec.{max (u+1) 1 u} α
              (λ (n : @list.{u} α),
              @pprod.{max (u+1) 1 max (u+1) 1}
                ((λ (a_2 : @list.{u} α), ∀ (a_3 : α), Prop) n)
                (@list.below.{max (u+1) 1 u} α
                  (λ (a_2 : @list.{u} α), ∀ (a_3 : α), Prop) n))
              (@pprod.mk.{max (u+1) 1 max (u+1) 1}
                ((λ (a_2 : @list.{u} α), ∀ (a_3 : α), Prop) (@list.nil.{u} α))
                @punit.{max (u+1) 1}
                ((λ (a_2 : @list.{u} α)
                    (F :
                      @list.below.{max (u+1) 1 u} α
                        (λ (a_4 : @list.{u} α), ∀ (a_5 : α), Prop) a_2)
                    (a_3 : α),
                  (λ (a_4 : α) (a_5 : @list.{u} α)
                      (F_0 :
                        @list.below.{max (u+1) 1 u} α
                          (λ (a_6 : @list.{u} α), ∀ (a_7 : α), Prop) a_5),
                    @list.cases_on.{max (u+1) 1 u} α
                      (λ (a_6 : @list.{u} α),
                      ∀ (F_1 :
                          @list.below.{max (u+1) 1 u} α
                            (λ (a_7 : @list.{u} α), ∀ (a_8 : α), Prop) a_6),
                      Prop) a_5
                      (λ (F_1 :
                          @list.below.{max (u+1) 1 u} α
                            (λ (a_6 : @list.{u} α), ∀ (a_7 : α), Prop)
                            (@list.nil.{u} α)),
                      @false)
                      (λ (a_1_0 : α) (a_2_0 : @list.{u} α)
                        (F_1 :
                          @list.below.{max (u+1) 1 u} α
                            (λ (a_6 : @list.{u} α), ∀ (a_7 : α), Prop)
                            (@list.cons.{u} α a_1_0 a_2_0)),
                      @or (@eq.{u+1} α a_4 a_1_0)
                        (@pprod.fst.{max (u+1) 1 max (u+1) 1}
                          ((λ (a_6 : @list.{u} α), ∀ (a_7 : α), Prop) a_2_0)
                          (@list.rec.{(max (u+1) 1)+1 u} α
                            (λ (n : @list.{u} α), Sort (max (u+1) 1))
                            @punit.{max (u+1) 1}
                            (λ (a_6 : α) (a_7 : @list.{u} α)
                              (ih_1 : Sort (max (u+1) 1)),
                            @pprod.{max (u+1) 1 max (u+1) 1}
                              (@pprod.{max (u+1) 1 max (u+1) 1}
                                ((λ (a_8 : @list.{u} α), ∀ (a_9 : α), Prop) a_7)
                                ih_1) @punit.{max (u+1) 1}) a_2_0)
                          (@pprod.fst.{max (u+1) 1 max (u+1) 1}
                            (@pprod.{max (u+1) 1 max (u+1) 1}
                              ((λ (a_6 : @list.{u} α), ∀ (a_7 : α), Prop) a_2_0)
                              (@list.rec.{(max (u+1) 1)+1 u} α
                                (λ (n : @list.{u} α), Sort (max (u+1) 1))
                                @punit.{max (u+1) 1}
                                (λ (a_6 : α) (a_7 : @list.{u} α)
                                  (ih_1 : Sort (max (u+1) 1)),
                                @pprod.{max (u+1) 1 max (u+1) 1}
                                  (@pprod.{max (u+1) 1 max (u+1) 1}
                                    ((λ (a_8 : @list.{u} α), ∀ (a_9 : α), Prop)
                                      a_7) ih_1) @punit.{max (u+1) 1}) a_2_0))
                            @punit.{max (u+1) 1} F_1) a_4)) F_0) a_3 a_2 F)
                  (@list.nil.{u} α) @punit.star.{max (u+1) 1})
                @punit.star.{max (u+1) 1})
              (λ (a_2 : α) (a_3 : @list.{u} α)
                (ih_1 :
                  @pprod.{max (u+1) 1 max (u+1) 1}
                    ((λ (a_4 : @list.{u} α), ∀ (a_5 : α), Prop) a_3)
                    (@list.below.{max (u+1) 1 u} α
                      (λ (a_4 : @list.{u} α), ∀ (a_5 : α), Prop) a_3)),
              @pprod.mk.{max (u+1) 1 max (u+1) 1}
                ((λ (a_4 : @list.{u} α), ∀ (a_5 : α), Prop)
                  (@list.cons.{u} α a_2 a_3))
                (@pprod.{max (u+1) 1 max (u+1) 1}
                  (@pprod.{max (u+1) 1 max (u+1) 1}
                    ((λ (a_4 : @list.{u} α), ∀ (a_5 : α), Prop) a_3)
                    (@list.below.{max (u+1) 1 u} α
                      (λ (a_4 : @list.{u} α), ∀ (a_5 : α), Prop) a_3))
                  @punit.{max (u+1) 1})
                ((λ (a_4 : @list.{u} α)
                    (F :
                      @list.below.{max (u+1) 1 u} α
                        (λ (a_6 : @list.{u} α), ∀ (a_7 : α), Prop) a_4)
                    (a_5 : α),
                  (λ (a_6 : α) (a_7 : @list.{u} α)
                      (F_0 :
                        @list.below.{max (u+1) 1 u} α
                          (λ (a_8 : @list.{u} α), ∀ (a_9 : α), Prop) a_7),
                    @list.cases_on.{max (u+1) 1 u} α
                      (λ (a_8 : @list.{u} α),
                      ∀ (F_1 :
                          @list.below.{max (u+1) 1 u} α
                            (λ (a_9 : @list.{u} α), ∀ (a_10 : α), Prop) a_8),
                      Prop) a_7
                      (λ (F_1 :
                          @list.below.{max (u+1) 1 u} α
                            (λ (a_8 : @list.{u} α), ∀ (a_9 : α), Prop)
                            (@list.nil.{u} α)),
                      @false)
                      (λ (a_1_0 : α) (a_2_0 : @list.{u} α)
                        (F_1 :
                          @list.below.{max (u+1) 1 u} α
                            (λ (a_8 : @list.{u} α), ∀ (a_9 : α), Prop)
                            (@list.cons.{u} α a_1_0 a_2_0)),
                      @or (@eq.{u+1} α a_6 a_1_0)
                        (@pprod.fst.{max (u+1) 1 max (u+1) 1}
                          ((λ (a_8 : @list.{u} α), ∀ (a_9 : α), Prop) a_2_0)
                          (@list.rec.{(max (u+1) 1)+1 u} α
                            (λ (n : @list.{u} α), Sort (max (u+1) 1))
                            @punit.{max (u+1) 1}
                            (λ (a_8 : α) (a_9 : @list.{u} α)
                              (ih_1_0 : Sort (max (u+1) 1)),
                            @pprod.{max (u+1) 1 max (u+1) 1}
                              (@pprod.{max (u+1) 1 max (u+1) 1}
                                ((λ (a_10 : @list.{u} α), ∀ (a_11 : α), Prop)
                                  a_9) ih_1_0) @punit.{max (u+1) 1}) a_2_0)
                          (@pprod.fst.{max (u+1) 1 max (u+1) 1}
                            (@pprod.{max (u+1) 1 max (u+1) 1}
                              ((λ (a_8 : @list.{u} α), ∀ (a_9 : α), Prop) a_2_0)
                              (@list.rec.{(max (u+1) 1)+1 u} α
                                (λ (n : @list.{u} α), Sort (max (u+1) 1))
                                @punit.{max (u+1) 1}
                                (λ (a_8 : α) (a_9 : @list.{u} α)
                                  (ih_1_0 : Sort (max (u+1) 1)),
                                @pprod.{max (u+1) 1 max (u+1) 1}
                                  (@pprod.{max (u+1) 1 max (u+1) 1}
                                    ((λ (a_10 : @list.{u} α),
                                      ∀ (a_11 : α),
                                      Prop) a_9) ih_1_0) @punit.{max (u+1) 1})
                                a_2_0)) @punit.{max (u+1) 1} F_1) a_6)) F_0) a_5
                    a_4 F) (@list.cons.{u} α a_2 a_3)
                  (@pprod.mk.{max (u+1) 1 max (u+1) 1}
                    (@pprod.{max (u+1) 1 max (u+1) 1}
                      ((λ (a_4 : @list.{u} α), ∀ (a_5 : α), Prop) a_3)
                      (@list.below.{max (u+1) 1 u} α
                        (λ (a_4 : @list.{u} α), ∀ (a_5 : α), Prop) a_3))
                    @punit.{max (u+1) 1} ih_1 @punit.star.{max (u+1) 1}))
                (@pprod.mk.{max (u+1) 1 max (u+1) 1}
                  (@pprod.{max (u+1) 1 max (u+1) 1}
                    ((λ (a_4 : @list.{u} α), ∀ (a_5 : α), Prop) a_3)
                    (@list.below.{max (u+1) 1 u} α
                      (λ (a_4 : @list.{u} α), ∀ (a_5 : α), Prop) a_3))
                  @punit.{max (u+1) 1} ih_1 @punit.star.{max (u+1) 1})) l)
            @punit.star.{max (u+1) 1})) a) a_1)),0))"
err: "java.util.concurrent.TimeoutException: Task timed-out after 5 minutes of inactivity"

mod: "DefMod(Definition(list.decidable_mem._main,Vector(Param(u)),∀ {α : Type u} [inst_1 : @decidable_eq.{u+1} α] (a : α) (l : @list.{u} α),
@decidable (@has_mem.mem.{u u} α (@list.{u} α) (@list.has_mem.{u} α) a l),λ {α : Type u} [inst_1 : @decidable_eq.{u+1} α] (a : α) (l : @list.{u} α),
@list.brec_on.{1 u} α
  (λ (l_0 : @list.{u} α),
  @decidable (@has_mem.mem.{u u} α (@list.{u} α) (@list.has_mem.{u} α) a l_0)) l
  (λ (l_0 : @list.{u} α)
    (F :
      @list.below.{1 u} α
        (λ (l_1 : @list.{u} α),
        @decidable
          (@has_mem.mem.{u u} α (@list.{u} α) (@list.has_mem.{u} α) a l_1))
        l_0),
  (λ (l_1 : @list.{u} α)
      (F_0 :
        @list.below.{1 u} α
          (λ (l_2 : @list.{u} α),
          @decidable
            (@has_mem.mem.{u u} α (@list.{u} α) (@list.has_mem.{u} α) a l_2))
          l_1),
    @list.cases_on.{1 u} α
      (λ (l_2 : @list.{u} α),
      ∀ (F_1 :
          @list.below.{1 u} α
            (λ (l_3 : @list.{u} α),
            @decidable
              (@has_mem.mem.{u u} α (@list.{u} α) (@list.has_mem.{u} α) a l_3))
            l_2),
      @decidable
        (@has_mem.mem.{u u} α (@list.{u} α) (@list.has_mem.{u} α) a l_2)) l_1
      (λ (F_1 :
          @list.below.{1 u} α
            (λ (l_2 : @list.{u} α),
            @decidable
              (@has_mem.mem.{u u} α (@list.{u} α) (@list.has_mem.{u} α) a l_2))
            (@list.nil.{u} α)),
      @decidable.is_false
        (@has_mem.mem.{u u} α (@list.{u} α) (@list.has_mem.{u} α) a
          (@list.nil.{u} α)) @not_false)
      (λ (a_1 : α) (a_2 : @list.{u} α)
        (F_1 :
          @list.below.{1 u} α
            (λ (l_2 : @list.{u} α),
            @decidable
              (@has_mem.mem.{u u} α (@list.{u} α) (@list.has_mem.{u} α) a l_2))
            (@list.cons.{u} α a_1 a_2)),
      @dite.{1} (@eq.{u+1} α a a_1) (inst_1 a a_1)
        (@decidable
          (@has_mem.mem.{u u} α (@list.{u} α) (@list.has_mem.{u} α) a
            (@list.cons.{u} α a_1 a_2)))
        (λ (h : @eq.{u+1} α a a_1),
        @decidable.is_true
          (@has_mem.mem.{u u} α (@list.{u} α) (@list.has_mem.{u} α) a
            (@list.cons.{u} α a_1 a_2))
          (@or.inl (@eq.{u+1} α a a_1)
            (@pprod.fst.{max (u+1) 1 max (u+1) 1}
              ((λ (a_0 : @list.{u} α), ∀ (a_3 : α), Prop) a_2)
              (@list.rec.{(max (u+1) 1)+1 u} α
                (λ (n : @list.{u} α), Sort (max (u+1) 1)) @punit.{max (u+1) 1}
                (λ (a_0 : α) (a_3 : @list.{u} α) (ih_1 : Sort (max (u+1) 1)),
                @pprod.{max (u+1) 1 max (u+1) 1}
                  (@pprod.{max (u+1) 1 max (u+1) 1}
                    ((λ (a_4 : @list.{u} α), ∀ (a_5 : α), Prop) a_3) ih_1)
                  @punit.{max (u+1) 1}) a_2)
              (@pprod.fst.{max (u+1) 1 max (u+1) 1}
                (@pprod.{max (u+1) 1 max (u+1) 1}
                  ((λ (a_0 : @list.{u} α), ∀ (a_3 : α), Prop) a_2)
                  (@list.rec.{(max (u+1) 1)+1 u} α
                    (λ (n : @list.{u} α), Sort (max (u+1) 1))
                    @punit.{max (u+1) 1}
                    (λ (a_0 : α) (a_3 : @list.{u} α)
                      (ih_1 : Sort (max (u+1) 1)),
                    @pprod.{max (u+1) 1 max (u+1) 1}
                      (@pprod.{max (u+1) 1 max (u+1) 1}
                        ((λ (a_4 : @list.{u} α), ∀ (a_5 : α), Prop) a_3) ih_1)
                      @punit.{max (u+1) 1}) a_2)) @punit.{max (u+1) 1}
                (@pprod.mk.{max (u+1) 1 max (u+1) 1}
                  (@pprod.{max (u+1) 1 max (u+1) 1}
                    ((λ (a_0 : @list.{u} α), ∀ (a_3 : α), Prop) a_2)
                    (@list.below.{max (u+1) 1 u} α
                      (λ (a_0 : @list.{u} α), ∀ (a_3 : α), Prop) a_2))
                  @punit.{max (u+1) 1}
                  (@list.rec.{max (u+1) 1 u} α
                    (λ (n : @list.{u} α),
                    @pprod.{max (u+1) 1 max (u+1) 1}
                      ((λ (a_0 : @list.{u} α), ∀ (a_3 : α), Prop) n)
                      (@list.below.{max (u+1) 1 u} α
                        (λ (a_0 : @list.{u} α), ∀ (a_3 : α), Prop) n))
                    (@pprod.mk.{max (u+1) 1 max (u+1) 1}
                      ((λ (a_0 : @list.{u} α), ∀ (a_3 : α), Prop)
                        (@list.nil.{u} α)) @punit.{max (u+1) 1}
                      ((λ (a_0 : @list.{u} α)
                          (F_2 :
                            @list.below.{max (u+1) 1 u} α
                              (λ (a_4 : @list.{u} α), ∀ (a_5 : α), Prop) a_0)
                          (a_3 : α),
                        (λ (a_4 : α) (a_5 : @list.{u} α)
                            (F_3 :
                              @list.below.{max (u+1) 1 u} α
                                (λ (a_6 : @list.{u} α), ∀ (a_7 : α), Prop) a_5),
                          @list.cases_on.{max (u+1) 1 u} α
                            (λ (a_6 : @list.{u} α),
                            ∀ (F_4 :
                                @list.below.{max (u+1) 1 u} α
                                  (λ (a_7 : @list.{u} α), ∀ (a_8 : α), Prop)
                                  a_6),
                            Prop) a_5
                            (λ (F_4 :
                                @list.below.{max (u+1) 1 u} α
                                  (λ (a_6 : @list.{u} α), ∀ (a_7 : α), Prop)
                                  (@list.nil.{u} α)),
                            @false)
                            (λ (a_1_0 : α) (a_2_0 : @list.{u} α)
                              (F_4 :
                                @list.below.{max (u+1) 1 u} α
                                  (λ (a_6 : @list.{u} α), ∀ (a_7 : α), Prop)
                                  (@list.cons.{u} α a_1_0 a_2_0)),
                            @or (@eq.{u+1} α a_4 a_1_0)
                              (@pprod.fst.{max (u+1) 1 max (u+1) 1}
                                ((λ (a_6 : @list.{u} α), ∀ (a_7 : α), Prop)
                                  a_2_0)
                                (@list.rec.{(max (u+1) 1)+1 u} α
                                  (λ (n : @list.{u} α), Sort (max (u+1) 1))
                                  @punit.{max (u+1) 1}
                                  (λ (a_6 : α) (a_7 : @list.{u} α)
                                    (ih_1 : Sort (max (u+1) 1)),
                                  @pprod.{max (u+1) 1 max (u+1) 1}
                                    (@pprod.{max (u+1) 1 max (u+1) 1}
                                      ((λ (a_8 : @list.{u} α),
                                        ∀ (a_9 : α),
                                        Prop) a_7) ih_1) @punit.{max (u+1) 1})
                                  a_2_0)
                                (@pprod.fst.{max (u+1) 1 max (u+1) 1}
                                  (@pprod.{max (u+1) 1 max (u+1) 1}
                                    ((λ (a_6 : @list.{u} α), ∀ (a_7 : α), Prop)
                                      a_2_0)
                                    (@list.rec.{(max (u+1) 1)+1 u} α
                                      (λ (n : @list.{u} α), Sort (max (u+1) 1))
                                      @punit.{max (u+1) 1}
                                      (λ (a_6 : α) (a_7 : @list.{u} α)
                                        (ih_1 : Sort (max (u+1) 1)),
                                      @pprod.{max (u+1) 1 max (u+1) 1}
                                        (@pprod.{max (u+1) 1 max (u+1) 1}
                                          ((λ (a_8 : @list.{u} α),
                                            ∀ (a_9 : α),
                                            Prop) a_7) ih_1)
                                        @punit.{max (u+1) 1}) a_2_0))
                                  @punit.{max (u+1) 1} F_4) a_4)) F_3) a_3 a_0
                          F_2) (@list.nil.{u} α) @punit.star.{max (u+1) 1})
                      @punit.star.{max (u+1) 1})
                    (λ (a_0 : α) (a_3 : @list.{u} α)
                      (ih_1 :
                        @pprod.{max (u+1) 1 max (u+1) 1}
                          ((λ (a_4 : @list.{u} α), ∀ (a_5 : α), Prop) a_3)
                          (@list.below.{max (u+1) 1 u} α
                            (λ (a_4 : @list.{u} α), ∀ (a_5 : α), Prop) a_3)),
                    @pprod.mk.{max (u+1) 1 max (u+1) 1}
                      ((λ (a_4 : @list.{u} α), ∀ (a_5 : α), Prop)
                        (@list.cons.{u} α a_0 a_3))
                      (@pprod.{max (u+1) 1 max (u+1) 1}
                        (@pprod.{max (u+1) 1 max (u+1) 1}
                          ((λ (a_4 : @list.{u} α), ∀ (a_5 : α), Prop) a_3)
                          (@list.below.{max (u+1) 1 u} α
                            (λ (a_4 : @list.{u} α), ∀ (a_5 : α), Prop) a_3))
                        @punit.{max (u+1) 1})
                      ((λ (a_4 : @list.{u} α)
                          (F_2 :
                            @list.below.{max (u+1) 1 u} α
                              (λ (a_6 : @list.{u} α), ∀ (a_7 : α), Prop) a_4)
                          (a_5 : α),
                        (λ (a_6 : α) (a_7 : @list.{u} α)
                            (F_3 :
                              @list.below.{max (u+1) 1 u} α
                                (λ (a_8 : @list.{u} α), ∀ (a_9 : α), Prop) a_7),
                          @list.cases_on.{max (u+1) 1 u} α
                            (λ (a_8 : @list.{u} α),
                            ∀ (F_4 :
                                @list.below.{max (u+1) 1 u} α
                                  (λ (a_9 : @list.{u} α), ∀ (a_10 : α), Prop)
                                  a_8),
                            Prop) a_7
                            (λ (F_4 :
                                @list.below.{max (u+1) 1 u} α
                                  (λ (a_8 : @list.{u} α), ∀ (a_9 : α), Prop)
                                  (@list.nil.{u} α)),
                            @false)
                            (λ (a_1_0 : α) (a_2_0 : @list.{u} α)
                              (F_4 :
                                @list.below.{max (u+1) 1 u} α
                                  (λ (a_8 : @list.{u} α), ∀ (a_9 : α), Prop)
                                  (@list.cons.{u} α a_1_0 a_2_0)),
                            @or (@eq.{u+1} α a_6 a_1_0)
                              (@pprod.fst.{max (u+1) 1 max (u+1) 1}
                                ((λ (a_8 : @list.{u} α), ∀ (a_9 : α), Prop)
                                  a_2_0)
                                (@list.rec.{(max (u+1) 1)+1 u} α
                                  (λ (n : @list.{u} α), Sort (max (u+1) 1))
                                  @punit.{max (u+1) 1}
                                  (λ (a_8 : α) (a_9 : @list.{u} α)
                                    (ih_1_0 : Sort (max (u+1) 1)),
                                  @pprod.{max (u+1) 1 max (u+1) 1}
                                    (@pprod.{max (u+1) 1 max (u+1) 1}
                                      ((λ (a_10 : @list.{u} α),
                                        ∀ (a_11 : α),
                                        Prop) a_9) ih_1_0) @punit.{max (u+1) 1})
                                  a_2_0)
                                (@pprod.fst.{max (u+1) 1 max (u+1) 1}
                                  (@pprod.{max (u+1) 1 max (u+1) 1}
                                    ((λ (a_8 : @list.{u} α), ∀ (a_9 : α), Prop)
                                      a_2_0)
                                    (@list.rec.{(max (u+1) 1)+1 u} α
                                      (λ (n : @list.{u} α), Sort (max (u+1) 1))
                                      @punit.{max (u+1) 1}
                                      (λ (a_8 : α) (a_9 : @list.{u} α)
                                        (ih_1_0 : Sort (max (u+1) 1)),
                                      @pprod.{max (u+1) 1 max (u+1) 1}
                                        (@pprod.{max (u+1) 1 max (u+1) 1}
                                          ((λ (a_10 : @list.{u} α),
                                            ∀ (a_11 : α),
                                            Prop) a_9) ih_1_0)
                                        @punit.{max (u+1) 1}) a_2_0))
                                  @punit.{max (u+1) 1} F_4) a_6)) F_3) a_5 a_4
                          F_2) (@list.cons.{u} α a_0 a_3)
                        (@pprod.mk.{max (u+1) 1 max (u+1) 1}
                          (@pprod.{max (u+1) 1 max (u+1) 1}
                            ((λ (a_4 : @list.{u} α), ∀ (a_5 : α), Prop) a_3)
                            (@list.below.{max (u+1) 1 u} α
                              (λ (a_4 : @list.{u} α), ∀ (a_5 : α), Prop) a_3))
                          @punit.{max (u+1) 1} ih_1 @punit.star.{max (u+1) 1}))
                      (@pprod.mk.{max (u+1) 1 max (u+1) 1}
                        (@pprod.{max (u+1) 1 max (u+1) 1}
                          ((λ (a_4 : @list.{u} α), ∀ (a_5 : α), Prop) a_3)
                          (@list.below.{max (u+1) 1 u} α
                            (λ (a_4 : @list.{u} α), ∀ (a_5 : α), Prop) a_3))
                        @punit.{max (u+1) 1} ih_1 @punit.star.{max (u+1) 1}))
                    a_2) @punit.star.{max (u+1) 1})) a) h))
        (λ (h : @not (@eq.{u+1} α a a_1)),
        @list.decidable_mem._match_1.{u} α a a_1 a_2 h
          (@pprod.fst.{1 1}
            ((λ (l_2 : @list.{u} α),
              @decidable
                (@has_mem.mem.{u u} α (@list.{u} α) (@list.has_mem.{u} α) a
                  l_2)) a_2)
            (@list.rec.{2 u} α (λ (n : @list.{u} α), Type 0) @punit.{1}
              (λ (a_0 : α) (a_3 : @list.{u} α) (ih_1 : Type 0),
              @pprod.{1 1}
                (@pprod.{1 1}
                  ((λ (l_2 : @list.{u} α),
                    @decidable
                      (@has_mem.mem.{u u} α (@list.{u} α) (@list.has_mem.{u} α)
                        a l_2)) a_3) ih_1) @punit.{1}) a_2)
            (@pprod.fst.{1 1}
              (@pprod.{1 1}
                ((λ (l_2 : @list.{u} α),
                  @decidable
                    (@has_mem.mem.{u u} α (@list.{u} α) (@list.has_mem.{u} α) a
                      l_2)) a_2)
                (@list.rec.{2 u} α (λ (n : @list.{u} α), Type 0) @punit.{1}
                  (λ (a_0 : α) (a_3 : @list.{u} α) (ih_1 : Type 0),
                  @pprod.{1 1}
                    (@pprod.{1 1}
                      ((λ (l_2 : @list.{u} α),
                        @decidable
                          (@has_mem.mem.{u u} α (@list.{u} α)
                            (@list.has_mem.{u} α) a l_2)) a_3) ih_1) @punit.{1})
                  a_2)) @punit.{1} F_1)))) F_0) l_0 F),0))"
err: "provingground.interface.UnParsedException: could not parse expression @list.decidable_mem._match_1.{u}"

mod: "DefMod(Definition(list.decidable_mem._main.equations._eqn_1,Vector(Param(u)),∀ {α : Type u} [inst_1 : @decidable_eq.{u+1} α] (a : α),
@eq.{1}
  (@decidable
    (@has_mem.mem.{u u} α (@list.{u} α) (@list.has_mem.{u} α) a
      (@list.nil.{u} α)))
  (@list.decidable_mem._main.{u} α inst_1 a (@list.nil.{u} α))
  (@decidable.is_false
    (@has_mem.mem.{u u} α (@list.{u} α) (@list.has_mem.{u} α) a
      (@list.nil.{u} α)) @not_false),λ {α : Type u} [inst_1 : @decidable_eq.{u+1} α] (a : α),
@eq.refl.{1}
  ((λ (l : @list.{u} α),
    @decidable (@has_mem.mem.{u u} α (@list.{u} α) (@list.has_mem.{u} α) a l))
    (@list.nil.{u} α))
  (@list.brec_on.{1 u} α
    (λ (l : @list.{u} α),
    @decidable (@has_mem.mem.{u u} α (@list.{u} α) (@list.has_mem.{u} α) a l))
    (@list.nil.{u} α)
    (λ (l : @list.{u} α)
      (F :
        @list.below.{1 u} α
          (λ (l_0 : @list.{u} α),
          @decidable
            (@has_mem.mem.{u u} α (@list.{u} α) (@list.has_mem.{u} α) a l_0))
          l),
    (λ (l_0 : @list.{u} α)
        (F_0 :
          @list.below.{1 u} α
            (λ (l_1 : @list.{u} α),
            @decidable
              (@has_mem.mem.{u u} α (@list.{u} α) (@list.has_mem.{u} α) a l_1))
            l_0),
      @list.cases_on.{1 u} α
        (λ (l_1 : @list.{u} α),
        ∀ (F_1 :
            @list.below.{1 u} α
              (λ (l_2 : @list.{u} α),
              @decidable
                (@has_mem.mem.{u u} α (@list.{u} α) (@list.has_mem.{u} α) a
                  l_2)) l_1),
        @decidable
          (@has_mem.mem.{u u} α (@list.{u} α) (@list.has_mem.{u} α) a l_1)) l_0
        (λ (F_1 :
            @list.below.{1 u} α
              (λ (l_1 : @list.{u} α),
              @decidable
                (@has_mem.mem.{u u} α (@list.{u} α) (@list.has_mem.{u} α) a
                  l_1)) (@list.nil.{u} α)),
        @decidable.is_false
          (@has_mem.mem.{u u} α (@list.{u} α) (@list.has_mem.{u} α) a
            (@list.nil.{u} α)) @not_false)
        (λ (a_1 : α) (a_2 : @list.{u} α)
          (F_1 :
            @list.below.{1 u} α
              (λ (l_1 : @list.{u} α),
              @decidable
                (@has_mem.mem.{u u} α (@list.{u} α) (@list.has_mem.{u} α) a
                  l_1)) (@list.cons.{u} α a_1 a_2)),
        @dite.{1} (@eq.{u+1} α a a_1) (inst_1 a a_1)
          (@decidable
            (@has_mem.mem.{u u} α (@list.{u} α) (@list.has_mem.{u} α) a
              (@list.cons.{u} α a_1 a_2)))
          (λ (h : @eq.{u+1} α a a_1),
          @decidable.is_true
            (@has_mem.mem.{u u} α (@list.{u} α) (@list.has_mem.{u} α) a
              (@list.cons.{u} α a_1 a_2))
            (@or.inl (@eq.{u+1} α a a_1)
              (@pprod.fst.{max (u+1) 1 max (u+1) 1}
                ((λ (a_0 : @list.{u} α), ∀ (a_3 : α), Prop) a_2)
                (@list.rec.{(max (u+1) 1)+1 u} α
                  (λ (n : @list.{u} α), Sort (max (u+1) 1)) @punit.{max (u+1) 1}
                  (λ (a_0 : α) (a_3 : @list.{u} α) (ih_1 : Sort (max (u+1) 1)),
                  @pprod.{max (u+1) 1 max (u+1) 1}
                    (@pprod.{max (u+1) 1 max (u+1) 1}
                      ((λ (a_4 : @list.{u} α), ∀ (a_5 : α), Prop) a_3) ih_1)
                    @punit.{max (u+1) 1}) a_2)
                (@pprod.fst.{max (u+1) 1 max (u+1) 1}
                  (@pprod.{max (u+1) 1 max (u+1) 1}
                    ((λ (a_0 : @list.{u} α), ∀ (a_3 : α), Prop) a_2)
                    (@list.rec.{(max (u+1) 1)+1 u} α
                      (λ (n : @list.{u} α), Sort (max (u+1) 1))
                      @punit.{max (u+1) 1}
                      (λ (a_0 : α) (a_3 : @list.{u} α)
                        (ih_1 : Sort (max (u+1) 1)),
                      @pprod.{max (u+1) 1 max (u+1) 1}
                        (@pprod.{max (u+1) 1 max (u+1) 1}
                          ((λ (a_4 : @list.{u} α), ∀ (a_5 : α), Prop) a_3) ih_1)
                        @punit.{max (u+1) 1}) a_2)) @punit.{max (u+1) 1}
                  (@pprod.mk.{max (u+1) 1 max (u+1) 1}
                    (@pprod.{max (u+1) 1 max (u+1) 1}
                      ((λ (a_0 : @list.{u} α), ∀ (a_3 : α), Prop) a_2)
                      (@list.below.{max (u+1) 1 u} α
                        (λ (a_0 : @list.{u} α), ∀ (a_3 : α), Prop) a_2))
                    @punit.{max (u+1) 1}
                    (@list.rec.{max (u+1) 1 u} α
                      (λ (n : @list.{u} α),
                      @pprod.{max (u+1) 1 max (u+1) 1}
                        ((λ (a_0 : @list.{u} α), ∀ (a_3 : α), Prop) n)
                        (@list.below.{max (u+1) 1 u} α
                          (λ (a_0 : @list.{u} α), ∀ (a_3 : α), Prop) n))
                      (@pprod.mk.{max (u+1) 1 max (u+1) 1}
                        ((λ (a_0 : @list.{u} α), ∀ (a_3 : α), Prop)
                          (@list.nil.{u} α)) @punit.{max (u+1) 1}
                        ((λ (a_0 : @list.{u} α)
                            (F_2 :
                              @list.below.{max (u+1) 1 u} α
                                (λ (a_4 : @list.{u} α), ∀ (a_5 : α), Prop) a_0)
                            (a_3 : α),
                          (λ (a_4 : α) (a_5 : @list.{u} α)
                              (F_3 :
                                @list.below.{max (u+1) 1 u} α
                                  (λ (a_6 : @list.{u} α), ∀ (a_7 : α), Prop)
                                  a_5),
                            @list.cases_on.{max (u+1) 1 u} α
                              (λ (a_6 : @list.{u} α),
                              ∀ (F_4 :
                                  @list.below.{max (u+1) 1 u} α
                                    (λ (a_7 : @list.{u} α), ∀ (a_8 : α), Prop)
                                    a_6),
                              Prop) a_5
                              (λ (F_4 :
                                  @list.below.{max (u+1) 1 u} α
                                    (λ (a_6 : @list.{u} α), ∀ (a_7 : α), Prop)
                                    (@list.nil.{u} α)),
                              @false)
                              (λ (a_1_0 : α) (a_2_0 : @list.{u} α)
                                (F_4 :
                                  @list.below.{max (u+1) 1 u} α
                                    (λ (a_6 : @list.{u} α), ∀ (a_7 : α), Prop)
                                    (@list.cons.{u} α a_1_0 a_2_0)),
                              @or (@eq.{u+1} α a_4 a_1_0)
                                (@pprod.fst.{max (u+1) 1 max (u+1) 1}
                                  ((λ (a_6 : @list.{u} α), ∀ (a_7 : α), Prop)
                                    a_2_0)
                                  (@list.rec.{(max (u+1) 1)+1 u} α
                                    (λ (n : @list.{u} α), Sort (max (u+1) 1))
                                    @punit.{max (u+1) 1}
                                    (λ (a_6 : α) (a_7 : @list.{u} α)
                                      (ih_1 : Sort (max (u+1) 1)),
                                    @pprod.{max (u+1) 1 max (u+1) 1}
                                      (@pprod.{max (u+1) 1 max (u+1) 1}
                                        ((λ (a_8 : @list.{u} α),
                                          ∀ (a_9 : α),
                                          Prop) a_7) ih_1) @punit.{max (u+1) 1})
                                    a_2_0)
                                  (@pprod.fst.{max (u+1) 1 max (u+1) 1}
                                    (@pprod.{max (u+1) 1 max (u+1) 1}
                                      ((λ (a_6 : @list.{u} α),
                                        ∀ (a_7 : α),
                                        Prop) a_2_0)
                                      (@list.rec.{(max (u+1) 1)+1 u} α
                                        (λ (n : @list.{u} α),
                                        Sort (max (u+1)
                                        1)) @punit.{max (u+1) 1}
                                        (λ (a_6 : α) (a_7 : @list.{u} α)
                                          (ih_1 : Sort (max (u+1) 1)),
                                        @pprod.{max (u+1) 1 max (u+1) 1}
                                          (@pprod.{max (u+1) 1 max (u+1) 1}
                                            ((λ (a_8 : @list.{u} α),
                                              ∀ (a_9 : α),
                                              Prop) a_7) ih_1)
                                          @punit.{max (u+1) 1}) a_2_0))
                                    @punit.{max (u+1) 1} F_4) a_4)) F_3) a_3 a_0
                            F_2) (@list.nil.{u} α) @punit.star.{max (u+1) 1})
                        @punit.star.{max (u+1) 1})
                      (λ (a_0 : α) (a_3 : @list.{u} α)
                        (ih_1 :
                          @pprod.{max (u+1) 1 max (u+1) 1}
                            ((λ (a_4 : @list.{u} α), ∀ (a_5 : α), Prop) a_3)
                            (@list.below.{max (u+1) 1 u} α
                              (λ (a_4 : @list.{u} α), ∀ (a_5 : α), Prop) a_3)),
                      @pprod.mk.{max (u+1) 1 max (u+1) 1}
                        ((λ (a_4 : @list.{u} α), ∀ (a_5 : α), Prop)
                          (@list.cons.{u} α a_0 a_3))
                        (@pprod.{max (u+1) 1 max (u+1) 1}
                          (@pprod.{max (u+1) 1 max (u+1) 1}
                            ((λ (a_4 : @list.{u} α), ∀ (a_5 : α), Prop) a_3)
                            (@list.below.{max (u+1) 1 u} α
                              (λ (a_4 : @list.{u} α), ∀ (a_5 : α), Prop) a_3))
                          @punit.{max (u+1) 1})
                        ((λ (a_4 : @list.{u} α)
                            (F_2 :
                              @list.below.{max (u+1) 1 u} α
                                (λ (a_6 : @list.{u} α), ∀ (a_7 : α), Prop) a_4)
                            (a_5 : α),
                          (λ (a_6 : α) (a_7 : @list.{u} α)
                              (F_3 :
                                @list.below.{max (u+1) 1 u} α
                                  (λ (a_8 : @list.{u} α), ∀ (a_9 : α), Prop)
                                  a_7),
                            @list.cases_on.{max (u+1) 1 u} α
                              (λ (a_8 : @list.{u} α),
                              ∀ (F_4 :
                                  @list.below.{max (u+1) 1 u} α
                                    (λ (a_9 : @list.{u} α), ∀ (a_10 : α), Prop)
                                    a_8),
                              Prop) a_7
                              (λ (F_4 :
                                  @list.below.{max (u+1) 1 u} α
                                    (λ (a_8 : @list.{u} α), ∀ (a_9 : α), Prop)
                                    (@list.nil.{u} α)),
                              @false)
                              (λ (a_1_0 : α) (a_2_0 : @list.{u} α)
                                (F_4 :
                                  @list.below.{max (u+1) 1 u} α
                                    (λ (a_8 : @list.{u} α), ∀ (a_9 : α), Prop)
                                    (@list.cons.{u} α a_1_0 a_2_0)),
                              @or (@eq.{u+1} α a_6 a_1_0)
                                (@pprod.fst.{max (u+1) 1 max (u+1) 1}
                                  ((λ (a_8 : @list.{u} α), ∀ (a_9 : α), Prop)
                                    a_2_0)
                                  (@list.rec.{(max (u+1) 1)+1 u} α
                                    (λ (n : @list.{u} α), Sort (max (u+1) 1))
                                    @punit.{max (u+1) 1}
                                    (λ (a_8 : α) (a_9 : @list.{u} α)
                                      (ih_1_0 : Sort (max (u+1) 1)),
                                    @pprod.{max (u+1) 1 max (u+1) 1}
                                      (@pprod.{max (u+1) 1 max (u+1) 1}
                                        ((λ (a_10 : @list.{u} α),
                                          ∀ (a_11 : α),
                                          Prop) a_9) ih_1_0)
                                      @punit.{max (u+1) 1}) a_2_0)
                                  (@pprod.fst.{max (u+1) 1 max (u+1) 1}
                                    (@pprod.{max (u+1) 1 max (u+1) 1}
                                      ((λ (a_8 : @list.{u} α),
                                        ∀ (a_9 : α),
                                        Prop) a_2_0)
                                      (@list.rec.{(max (u+1) 1)+1 u} α
                                        (λ (n : @list.{u} α),
                                        Sort (max (u+1)
                                        1)) @punit.{max (u+1) 1}
                                        (λ (a_8 : α) (a_9 : @list.{u} α)
                                          (ih_1_0 : Sort (max (u+1) 1)),
                                        @pprod.{max (u+1) 1 max (u+1) 1}
                                          (@pprod.{max (u+1) 1 max (u+1) 1}
                                            ((λ (a_10 : @list.{u} α),
                                              ∀ (a_11 : α),
                                              Prop) a_9) ih_1_0)
                                          @punit.{max (u+1) 1}) a_2_0))
                                    @punit.{max (u+1) 1} F_4) a_6)) F_3) a_5 a_4
                            F_2) (@list.cons.{u} α a_0 a_3)
                          (@pprod.mk.{max (u+1) 1 max (u+1) 1}
                            (@pprod.{max (u+1) 1 max (u+1) 1}
                              ((λ (a_4 : @list.{u} α), ∀ (a_5 : α), Prop) a_3)
                              (@list.below.{max (u+1) 1 u} α
                                (λ (a_4 : @list.{u} α), ∀ (a_5 : α), Prop) a_3))
                            @punit.{max (u+1) 1} ih_1
                            @punit.star.{max (u+1) 1}))
                        (@pprod.mk.{max (u+1) 1 max (u+1) 1}
                          (@pprod.{max (u+1) 1 max (u+1) 1}
                            ((λ (a_4 : @list.{u} α), ∀ (a_5 : α), Prop) a_3)
                            (@list.below.{max (u+1) 1 u} α
                              (λ (a_4 : @list.{u} α), ∀ (a_5 : α), Prop) a_3))
                          @punit.{max (u+1) 1} ih_1 @punit.star.{max (u+1) 1}))
                      a_2) @punit.star.{max (u+1) 1})) a) h))
          (λ (h : @not (@eq.{u+1} α a a_1)),
          @list.decidable_mem._match_1.{u} α a a_1 a_2 h
            (@pprod.fst.{1 1}
              ((λ (l_1 : @list.{u} α),
                @decidable
                  (@has_mem.mem.{u u} α (@list.{u} α) (@list.has_mem.{u} α) a
                    l_1)) a_2)
              (@list.rec.{2 u} α (λ (n : @list.{u} α), Type 0) @punit.{1}
                (λ (a_0 : α) (a_3 : @list.{u} α) (ih_1 : Type 0),
                @pprod.{1 1}
                  (@pprod.{1 1}
                    ((λ (l_1 : @list.{u} α),
                      @decidable
                        (@has_mem.mem.{u u} α (@list.{u} α)
                          (@list.has_mem.{u} α) a l_1)) a_3) ih_1) @punit.{1})
                a_2)
              (@pprod.fst.{1 1}
                (@pprod.{1 1}
                  ((λ (l_1 : @list.{u} α),
                    @decidable
                      (@has_mem.mem.{u u} α (@list.{u} α) (@list.has_mem.{u} α)
                        a l_1)) a_2)
                  (@list.rec.{2 u} α (λ (n : @list.{u} α), Type 0) @punit.{1}
                    (λ (a_0 : α) (a_3 : @list.{u} α) (ih_1 : Type 0),
                    @pprod.{1 1}
                      (@pprod.{1 1}
                        ((λ (l_1 : @list.{u} α),
                          @decidable
                            (@has_mem.mem.{u u} α (@list.{u} α)
                              (@list.has_mem.{u} α) a l_1)) a_3) ih_1)
                      @punit.{1}) a_2)) @punit.{1} F_1)))) F_0) l F)),0))"
err: "java.util.concurrent.TimeoutException: Task timed-out after 5 minutes of inactivity"

mod: "IndMod(InductiveType(has_repr,Vector(Param(u)),∀ (α : Type u), Type u),1,Vector((has_repr.mk,∀ {α : Type u} (repr : (∀ (a : α), @string)), @has_repr.{u} α)))"
err: "provingground.interface.UnParsedException: could not parse expression @string"

mod: "DefMod(Definition(string.append._main,Vector(),∀ (a a_0 : @string), @string,λ (a a_0 : @string),
@_private.608265362.string_imp.cases_on.{1} (λ (a_1 : @string), @string) a
  (λ (data : @list.{0} @char),
  @_private.608265362.string_imp.cases_on.{1} (λ (a_1 : @string), @string) a_0
    (λ (data_1 : @list.{0} @char),
    @_private.608265362.string_imp.mk
      (@has_append.append.{0} (@list.{0} @char) (@list.has_append.{0} @char)
        data_1 data))),0))"
err: "provingground.interface.UnParsedException: could not parse expression @string"

mod: "DefMod(Definition(string.append,Vector(),∀ (a a_0 : @string), @string,@string.append._main,0))"
err: "provingground.interface.UnParsedException: could not parse expression @string.append._main"

mod: "DefMod(Definition(string.has_append,Vector(),@has_append.{0} @string,@has_append.mk.{0} @string @string.append,0))"
err: "provingground.interface.UnParsedException: could not parse expression @string.append"

mod: "DefMod(Definition(has_repr.repr,Vector(Param(u)),∀ {α : Type u} [c : @has_repr.{u} α] (a : α), @string,λ (α : Type u) [c : @has_repr.{u} α],
@has_repr.rec.{max (u+1) 1 u} α (λ [c_0 : @has_repr.{u} α], ∀ (a : α), @string)
  (λ (repr : (∀ (a : α), @string)), repr) c,0))"
err: "provingground.interface.UnParsedException: could not parse expression @has_repr.{u}"

mod: "DefMod(Definition(repr,Vector(Param(u)),∀ {α : Type u} [inst_1 : @has_repr.{u} α] (a : α), @string,λ {α : Type u} [inst_1 : @has_repr.{u} α], @has_repr.repr.{u} α inst_1,0))"
err: "provingground.interface.UnParsedException: could not parse expression @has_repr.{u}"

mod: "DefMod(Definition(sigma.has_repr._match_1,Vector(Param(u), Param(v)),∀ {α : Type u} {β : (∀ (a_0 : α), Type v)} [inst_1 : @has_repr.{u} α]
  [s : (∀ (x : α), @has_repr.{v} (β x))] (a : @sigma.{u v} α β),
@string,λ {α : Type u} {β : (∀ (a_0 : α), Type v)} [inst_1 : @has_repr.{u} α]
  [s : (∀ (x : α), @has_repr.{v} (β x))] (a : @sigma.{u v} α β),
@sigma.cases_on.{1 u v} α β (λ (a_0 : @sigma.{u v} α β), @string) a
  (λ (fst : α) (snd : β fst),
  @has_append.append.{0} @string @string.has_append
    (@has_append.append.{0} @string @string.has_append
      (@has_append.append.{0} @string @string.has_append
        (@has_append.append.{0} @string @string.has_append
          (@string.str
            (@string.str
              (@string.str @string.empty
                (@char.of_nat
                  (@bit0.{0} @nat @nat.has_add
                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                      (@bit0.{0} @nat @nat.has_add
                        (@bit0.{0} @nat @nat.has_add
                          (@bit0.{0} @nat @nat.has_add
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@has_one.one.{0} @nat @nat.has_one))))))))))
              (@char.of_nat
                (@bit1.{0} @nat @nat.has_one @nat.has_add
                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit0.{0} @nat @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@has_one.one.{0} @nat @nat.has_one))))))))))
            (@char.of_nat
              (@bit0.{0} @nat @nat.has_add
                (@bit0.{0} @nat @nat.has_add
                  (@bit0.{0} @nat @nat.has_add
                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                      (@bit0.{0} @nat @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit0.{0} @nat @nat.has_add
                            (@has_one.one.{0} @nat @nat.has_one))))))))))
          (@repr.{u} α inst_1 fst))
        (@string.str
          (@string.str @string.empty
            (@char.of_nat
              (@bit0.{0} @nat @nat.has_add
                (@bit0.{0} @nat @nat.has_add
                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                      (@bit0.{0} @nat @nat.has_add
                        (@has_one.one.{0} @nat @nat.has_one))))))))
          (@char.of_nat
            (@bit0.{0} @nat @nat.has_add
              (@bit0.{0} @nat @nat.has_add
                (@bit0.{0} @nat @nat.has_add
                  (@bit0.{0} @nat @nat.has_add
                    (@bit0.{0} @nat @nat.has_add
                      (@has_one.one.{0} @nat @nat.has_one)))))))))
      (@repr.{v} (β fst) (s fst) snd))
    (@string.str
      (@string.str
        (@string.str @string.empty
          (@char.of_nat
            (@bit0.{0} @nat @nat.has_add
              (@bit1.{0} @nat @nat.has_one @nat.has_add
                (@bit0.{0} @nat @nat.has_add
                  (@bit0.{0} @nat @nat.has_add
                    (@bit0.{0} @nat @nat.has_add
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@has_one.one.{0} @nat @nat.has_one))))))))))
        (@char.of_nat
          (@bit1.{0} @nat @nat.has_one @nat.has_add
            (@bit1.{0} @nat @nat.has_one @nat.has_add
              (@bit1.{0} @nat @nat.has_one @nat.has_add
                (@bit1.{0} @nat @nat.has_one @nat.has_add
                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                    (@bit0.{0} @nat @nat.has_add
                      (@bit0.{0} @nat @nat.has_add
                        (@has_one.one.{0} @nat @nat.has_one))))))))))
      (@char.of_nat
        (@bit1.{0} @nat @nat.has_one @nat.has_add
          (@bit0.{0} @nat @nat.has_add
            (@bit0.{0} @nat @nat.has_add
              (@bit1.{0} @nat @nat.has_one @nat.has_add
                (@bit0.{0} @nat @nat.has_add
                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                    (@bit0.{0} @nat @nat.has_add
                      (@has_one.one.{0} @nat @nat.has_one))))))))))),0))"
err: "provingground.interface.UnParsedException: could not parse expression @has_repr.{u}"

mod: "DefMod(Definition(sigma.has_repr,Vector(Param(u), Param(v)),∀ {α : Type u} {β : (∀ (a : α), Type v)} [inst_1 : @has_repr.{u} α]
  [s : (∀ (x : α), @has_repr.{v} (β x))],
@has_repr.{max u v} (@sigma.{u v} α β),λ {α : Type u} {β : (∀ (a : α), Type v)} [inst_1 : @has_repr.{u} α]
  [s : (∀ (x : α), @has_repr.{v} (β x))],
@has_repr.mk.{max u v} (@sigma.{u v} α β)
  (λ (x : @sigma.{u v} α β), @sigma.has_repr._match_1.{u v} α β inst_1 s x),0))"
err: "provingground.interface.UnParsedException: could not parse expression @has_repr.{u}"

mod: "DefMod(Definition(group.sizeof,Vector(Param(u)),∀ (α : Type u) [α_inst : @has_sizeof.{u+1} α] (x : @group.{u} α), @nat,λ (α : Type u) [α_inst : @has_sizeof.{u+1} α],
@group.rec.{1 u} α (λ (x : @group.{u} α), @nat)
  (λ (mul : (∀ (a a_0 : α), α))
    (mul_assoc :
      (∀ (a b c : α),
      @eq.{u+1} α
        (@has_mul.mul.{u} α (@has_mul.mk.{u} α mul)
          (@has_mul.mul.{u} α (@has_mul.mk.{u} α mul) a b) c)
        (@has_mul.mul.{u} α (@has_mul.mk.{u} α mul) a
          (@has_mul.mul.{u} α (@has_mul.mk.{u} α mul) b c)))) (one : α)
    (one_mul :
      (∀ (a : α),
      @eq.{u+1} α
        (@has_mul.mul.{u} α
          (@semigroup.to_has_mul.{u} α (@semigroup.mk.{u} α mul mul_assoc))
          (@has_one.one.{u} α (@has_one.mk.{u} α one)) a) a))
    (mul_one :
      (∀ (a : α),
      @eq.{u+1} α
        (@has_mul.mul.{u} α
          (@semigroup.to_has_mul.{u} α (@semigroup.mk.{u} α mul mul_assoc)) a
          (@has_one.one.{u} α (@has_one.mk.{u} α one))) a))
    (inv : (∀ (a : α), α))
    (mul_left_inv :
      (∀ (a : α),
      @eq.{u+1} α
        (@has_mul.mul.{u} α
          (@semigroup.to_has_mul.{u} α
            (@monoid.to_semigroup.{u} α
              (@monoid.mk.{u} α mul mul_assoc one one_mul mul_one)))
          (@has_inv.inv.{u} α (@has_inv.mk.{u} α inv) a) a)
        (@has_one.one.{u} α
          (@monoid.to_has_one.{u} α
            (@monoid.mk.{u} α mul mul_assoc one one_mul mul_one))))),
  @has_add.add.{0} @nat @nat.has_add
    (@has_add.add.{0} @nat @nat.has_add
      (@has_add.add.{0} @nat @nat.has_add
        (@has_add.add.{0} @nat @nat.has_add
          (@has_add.add.{0} @nat @nat.has_add
            (@has_add.add.{0} @nat @nat.has_add
              (@has_add.add.{0} @nat @nat.has_add
                (@has_one.one.{0} @nat @nat.has_one)
                (@sizeof.{u+1} (∀ (a a_0 : α), α)
                  (@default_has_sizeof.{u+1} (∀ (a a_0 : α), α)) mul))
              (@sizeof.{0}
                (∀ (a b c : α),
                @eq.{u+1} α
                  (@has_mul.mul.{u} α (@has_mul.mk.{u} α mul)
                    (@has_mul.mul.{u} α (@has_mul.mk.{u} α mul) a b) c)
                  (@has_mul.mul.{u} α (@has_mul.mk.{u} α mul) a
                    (@has_mul.mul.{u} α (@has_mul.mk.{u} α mul) b c)))
                (@default_has_sizeof.{0}
                  (∀ (a b c : α),
                  @eq.{u+1} α
                    (@has_mul.mul.{u} α (@has_mul.mk.{u} α mul)
                      (@has_mul.mul.{u} α (@has_mul.mk.{u} α mul) a b) c)
                    (@has_mul.mul.{u} α (@has_mul.mk.{u} α mul) a
                      (@has_mul.mul.{u} α (@has_mul.mk.{u} α mul) b c))))
                mul_assoc)) (@sizeof.{u+1} α α_inst one))
          (@sizeof.{0}
            (∀ (a : α),
            @eq.{u+1} α
              (@has_mul.mul.{u} α
                (@semigroup.to_has_mul.{u} α
                  (@semigroup.mk.{u} α mul mul_assoc))
                (@has_one.one.{u} α (@has_one.mk.{u} α one)) a) a)
            (@default_has_sizeof.{0}
              (∀ (a : α),
              @eq.{u+1} α
                (@has_mul.mul.{u} α
                  (@semigroup.to_has_mul.{u} α
                    (@semigroup.mk.{u} α mul mul_assoc))
                  (@has_one.one.{u} α (@has_one.mk.{u} α one)) a) a)) one_mul))
        (@sizeof.{0}
          (∀ (a : α),
          @eq.{u+1} α
            (@has_mul.mul.{u} α
              (@semigroup.to_has_mul.{u} α (@semigroup.mk.{u} α mul mul_assoc))
              a (@has_one.one.{u} α (@has_one.mk.{u} α one))) a)
          (@default_has_sizeof.{0}
            (∀ (a : α),
            @eq.{u+1} α
              (@has_mul.mul.{u} α
                (@semigroup.to_has_mul.{u} α
                  (@semigroup.mk.{u} α mul mul_assoc)) a
                (@has_one.one.{u} α (@has_one.mk.{u} α one))) a)) mul_one))
      (@sizeof.{u+1} (∀ (a : α), α) (@default_has_sizeof.{u+1} (∀ (a : α), α))
        inv))
    (@sizeof.{0}
      (∀ (a : α),
      @eq.{u+1} α
        (@has_mul.mul.{u} α
          (@semigroup.to_has_mul.{u} α
            (@monoid.to_semigroup.{u} α
              (@monoid.mk.{u} α mul mul_assoc one one_mul mul_one)))
          (@has_inv.inv.{u} α (@has_inv.mk.{u} α inv) a) a)
        (@has_one.one.{u} α
          (@monoid.to_has_one.{u} α
            (@monoid.mk.{u} α mul mul_assoc one one_mul mul_one))))
      (@default_has_sizeof.{0}
        (∀ (a : α),
        @eq.{u+1} α
          (@has_mul.mul.{u} α
            (@semigroup.to_has_mul.{u} α
              (@monoid.to_semigroup.{u} α
                (@monoid.mk.{u} α mul mul_assoc one one_mul mul_one)))
            (@has_inv.inv.{u} α (@has_inv.mk.{u} α inv) a) a)
          (@has_one.one.{u} α
            (@monoid.to_has_one.{u} α
              (@monoid.mk.{u} α mul mul_assoc one one_mul mul_one)))))
      mul_left_inv)),0))"
err: "java.util.NoSuchElementException: key not found: group"

mod: "DefMod(Definition(group.has_sizeof_inst,Vector(Param(u)),∀ (α : Type u) [α_inst : @has_sizeof.{u+1} α], @has_sizeof.{u+1} (@group.{u} α),λ (α : Type u) [α_inst : @has_sizeof.{u+1} α],
@has_sizeof.mk.{u+1} (@group.{u} α) (@group.sizeof.{u} α α_inst),0))"
err: "provingground.interface.UnParsedException: could not parse expression @group.sizeof.{u}"

mod: "DefMod(Definition(list.repr_aux._main,Vector(Param(u)),∀ {α : Type u} [inst_1 : @has_repr.{u} α] (a : @bool) (a_0 : @list.{u} α),
@string,λ {α : Type u} [inst_1 : @has_repr.{u} α] (a : @bool) (a_0 : @list.{u} α),
@list.brec_on.{1 u} α (λ (a_1 : @list.{u} α), ∀ (a_2 : @bool), @string) a_0
  (λ (a_1 : @list.{u} α)
    (F :
      @list.below.{1 u} α (λ (a_3 : @list.{u} α), ∀ (a_4 : @bool), @string) a_1)
    (a_2 : @bool),
  (λ (a_3 : @bool) (a_4 : @list.{u} α)
      (F_0 :
        @list.below.{1 u} α (λ (a_5 : @list.{u} α), ∀ (a_6 : @bool), @string)
          a_4),
    @bool.cases_on.{1} (λ (a_5 : @bool), @string) a_3
      (@list.cases_on.{1 u} α
        (λ (a_5 : @list.{u} α),
        ∀ (F_1 :
            @list.below.{1 u} α
              (λ (a_6 : @list.{u} α), ∀ (a_7 : @bool), @string) a_5),
        @string) a_4
        (λ (F_1 :
            @list.below.{1 u} α
              (λ (a_5 : @list.{u} α), ∀ (a_6 : @bool), @string)
              (@list.nil.{u} α)),
        @string.empty)
        (λ (a_5 : α) (a_1_0 : @list.{u} α)
          (F_1 :
            @list.below.{1 u} α
              (λ (a_6 : @list.{u} α), ∀ (a_7 : @bool), @string)
              (@list.cons.{u} α a_5 a_1_0)),
        @has_append.append.{0} @string @string.has_append
          (@has_append.append.{0} @string @string.has_append
            (@string.str
              (@string.str @string.empty
                (@char.of_nat
                  (@bit0.{0} @nat @nat.has_add
                    (@bit0.{0} @nat @nat.has_add
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit0.{0} @nat @nat.has_add
                            (@has_one.one.{0} @nat @nat.has_one))))))))
              (@char.of_nat
                (@bit0.{0} @nat @nat.has_add
                  (@bit0.{0} @nat @nat.has_add
                    (@bit0.{0} @nat @nat.has_add
                      (@bit0.{0} @nat @nat.has_add
                        (@bit0.{0} @nat @nat.has_add
                          (@has_one.one.{0} @nat @nat.has_one))))))))
            (@repr.{u} α inst_1 a_5))
          (@pprod.fst.{1 1}
            ((λ (a_6 : @list.{u} α), ∀ (a_7 : @bool), @string) a_1_0)
            (@list.rec.{2 u} α (λ (n : @list.{u} α), Type 0) @punit.{1}
              (λ (a_6 : α) (a_7 : @list.{u} α) (ih_1 : Type 0),
              @pprod.{1 1}
                (@pprod.{1 1}
                  ((λ (a_8 : @list.{u} α), ∀ (a_9 : @bool), @string) a_7) ih_1)
                @punit.{1}) a_1_0)
            (@pprod.fst.{1 1}
              (@pprod.{1 1}
                ((λ (a_6 : @list.{u} α), ∀ (a_7 : @bool), @string) a_1_0)
                (@list.rec.{2 u} α (λ (n : @list.{u} α), Type 0) @punit.{1}
                  (λ (a_6 : α) (a_7 : @list.{u} α) (ih_1 : Type 0),
                  @pprod.{1 1}
                    (@pprod.{1 1}
                      ((λ (a_8 : @list.{u} α), ∀ (a_9 : @bool), @string) a_7)
                      ih_1) @punit.{1}) a_1_0)) @punit.{1} F_1) @bool.ff)) F_0)
      (@list.cases_on.{1 u} α
        (λ (a_5 : @list.{u} α),
        ∀ (F_1 :
            @list.below.{1 u} α
              (λ (a_6 : @list.{u} α), ∀ (a_7 : @bool), @string) a_5),
        @string) a_4
        (λ (F_1 :
            @list.below.{1 u} α
              (λ (a_5 : @list.{u} α), ∀ (a_6 : @bool), @string)
              (@list.nil.{u} α)),
        @string.empty)
        (λ (a_5 : α) (a_1_0 : @list.{u} α)
          (F_1 :
            @list.below.{1 u} α
              (λ (a_6 : @list.{u} α), ∀ (a_7 : @bool), @string)
              (@list.cons.{u} α a_5 a_1_0)),
        @has_append.append.{0} @string @string.has_append
          (@repr.{u} α inst_1 a_5)
          (@pprod.fst.{1 1}
            ((λ (a_6 : @list.{u} α), ∀ (a_7 : @bool), @string) a_1_0)
            (@list.rec.{2 u} α (λ (n : @list.{u} α), Type 0) @punit.{1}
              (λ (a_6 : α) (a_7 : @list.{u} α) (ih_1 : Type 0),
              @pprod.{1 1}
                (@pprod.{1 1}
                  ((λ (a_8 : @list.{u} α), ∀ (a_9 : @bool), @string) a_7) ih_1)
                @punit.{1}) a_1_0)
            (@pprod.fst.{1 1}
              (@pprod.{1 1}
                ((λ (a_6 : @list.{u} α), ∀ (a_7 : @bool), @string) a_1_0)
                (@list.rec.{2 u} α (λ (n : @list.{u} α), Type 0) @punit.{1}
                  (λ (a_6 : α) (a_7 : @list.{u} α) (ih_1 : Type 0),
                  @pprod.{1 1}
                    (@pprod.{1 1}
                      ((λ (a_8 : @list.{u} α), ∀ (a_9 : @bool), @string) a_7)
                      ih_1) @punit.{1}) a_1_0)) @punit.{1} F_1) @bool.ff)) F_0))
    a_2 a_1 F) a,0))"
err: "provingground.interface.UnParsedException: could not parse expression @has_repr.{u}"

mod: "DefMod(Definition(list.repr_aux,Vector(Param(u)),∀ {α : Type u} [inst_1 : @has_repr.{u} α] (a : @bool) (a_0 : @list.{u} α),
@string,λ {α : Type u} [inst_1 : @has_repr.{u} α], @list.repr_aux._main.{u} α inst_1,0))"
err: "provingground.interface.UnParsedException: could not parse expression @has_repr.{u}"

mod: "DefMod(Definition(list.repr._main,Vector(Param(u)),∀ {α : Type u} [inst_1 : @has_repr.{u} α] (a : @list.{u} α), @string,λ {α : Type u} [inst_1 : @has_repr.{u} α] (a : @list.{u} α),
@list.cases_on.{1 u} α (λ (a_0 : @list.{u} α), @string) a
  (@string.str
    (@string.str @string.empty
      (@char.of_nat
        (@bit1.{0} @nat @nat.has_one @nat.has_add
          (@bit1.{0} @nat @nat.has_one @nat.has_add
            (@bit0.{0} @nat @nat.has_add
              (@bit1.{0} @nat @nat.has_one @nat.has_add
                (@bit1.{0} @nat @nat.has_one @nat.has_add
                  (@bit0.{0} @nat @nat.has_add
                    (@has_one.one.{0} @nat @nat.has_one)))))))))
    (@char.of_nat
      (@bit1.{0} @nat @nat.has_one @nat.has_add
        (@bit0.{0} @nat @nat.has_add
          (@bit1.{0} @nat @nat.has_one @nat.has_add
            (@bit1.{0} @nat @nat.has_one @nat.has_add
              (@bit1.{0} @nat @nat.has_one @nat.has_add
                (@bit0.{0} @nat @nat.has_add
                  (@has_one.one.{0} @nat @nat.has_one)))))))))
  (λ (a_0 : α) (a_1 : @list.{u} α),
  @has_append.append.{0} @string @string.has_append
    (@has_append.append.{0} @string @string.has_append
      (@string.str @string.empty
        (@char.of_nat
          (@bit1.{0} @nat @nat.has_one @nat.has_add
            (@bit1.{0} @nat @nat.has_one @nat.has_add
              (@bit0.{0} @nat @nat.has_add
                (@bit1.{0} @nat @nat.has_one @nat.has_add
                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                    (@bit0.{0} @nat @nat.has_add
                      (@has_one.one.{0} @nat @nat.has_one)))))))))
      (@list.repr_aux.{u} α inst_1 @bool.tt (@list.cons.{u} α a_0 a_1)))
    (@string.str @string.empty
      (@char.of_nat
        (@bit1.{0} @nat @nat.has_one @nat.has_add
          (@bit0.{0} @nat @nat.has_add
            (@bit1.{0} @nat @nat.has_one @nat.has_add
              (@bit1.{0} @nat @nat.has_one @nat.has_add
                (@bit1.{0} @nat @nat.has_one @nat.has_add
                  (@bit0.{0} @nat @nat.has_add
                    (@has_one.one.{0} @nat @nat.has_one)))))))))),0))"
err: "provingground.interface.UnParsedException: could not parse expression @has_repr.{u}"

mod: "DefMod(Definition(list.repr,Vector(Param(u)),∀ {α : Type u} [inst_1 : @has_repr.{u} α] (a : @list.{u} α), @string,λ {α : Type u} [inst_1 : @has_repr.{u} α], @list.repr._main.{u} α inst_1,0))"
err: "provingground.interface.UnParsedException: could not parse expression @has_repr.{u}"

mod: "DefMod(Definition(list.has_repr,Vector(Param(u)),∀ {α : Type u} [inst_1 : @has_repr.{u} α], @has_repr.{u} (@list.{u} α),λ {α : Type u} [inst_1 : @has_repr.{u} α],
@has_repr.mk.{u} (@list.{u} α) (@list.repr.{u} α inst_1),0))"
err: "provingground.interface.UnParsedException: could not parse expression @has_repr.{u}"

mod: "DefMod(Definition(list.as_string,Vector(),∀ (s : @list.{0} @char), @string,λ (s : @list.{0} @char),
@_private.608265362.string_imp.mk (@list.reverse.{0} @char s),0))"
err: "provingground.interface.UnParsedException: could not parse expression @char"

mod: "DefMod(Definition(nat.decidable_eq._match_1,Vector(),∀ (x y : @nat) (a : @decidable (@eq.{1} @nat x y)),
@decidable (@eq.{1} @nat (@nat.succ x) (@nat.succ y)),λ (x y : @nat) (a : @decidable (@eq.{1} @nat x y)),
@decidable.cases_on.{1} (@eq.{1} @nat x y)
  (λ (a_0 : @decidable (@eq.{1} @nat x y)),
  @decidable (@eq.{1} @nat (@nat.succ x) (@nat.succ y))) a
  (λ (a_0 : @not (@eq.{1} @nat x y)),
  @decidable.is_false (@eq.{1} @nat (@nat.succ x) (@nat.succ y))
    (λ (h : @eq.{1} @nat (@nat.succ x) (@nat.succ y)),
    @nat.no_confusion.{0} @false (@nat.succ x) (@nat.succ y) h
      (λ (xeqy : @eq.{1} @nat x y),
      @absurd.{0} (@eq.{1} @nat x y) @false xeqy a_0)))
  (λ (a_0 : @eq.{1} @nat x y),
  @decidable.is_true (@eq.{1} @nat (@nat.succ x) (@nat.succ y))
    (@eq.subst.{1} @nat
      (λ (x_0 : @nat), @eq.{1} @nat (@nat.succ x) (@nat.succ x_0)) x y a_0
      (@eq.refl.{1} @nat (@nat.succ x)))),0))"
err: "provingground.HoTT$ApplnFailException: function func  cannot act on given term"

mod: "DefMod(Definition(nat.decidable_eq._main,Vector(),@decidable_eq.{1} @nat,λ (a b : @nat),
@nat.brec_on.{1}
  (λ (a_0 : @nat), ∀ (b_0 : @nat), @decidable (@eq.{1} @nat a_0 b_0)) a
  (λ (a_0 : @nat)
    (F :
      @nat.below.{1}
        (λ (a_1 : @nat), ∀ (b_1 : @nat), @decidable (@eq.{1} @nat a_1 b_1)) a_0)
    (b_0 : @nat),
  (λ (a_1 b_1 : @nat)
      (F_0 :
        @nat.below.{1}
          (λ (a_2 : @nat), ∀ (b_2 : @nat), @decidable (@eq.{1} @nat a_2 b_2))
          a_1),
    @nat.cases_on.{1}
      (λ (a_2 : @nat),
      ∀ (F_1 :
          @nat.below.{1}
            (λ (a_3 : @nat), ∀ (b_2 : @nat), @decidable (@eq.{1} @nat a_3 b_2))
            a_2),
      @decidable (@eq.{1} @nat a_2 b_1)) a_1
      (λ (F_1 :
          @nat.below.{1}
            (λ (a_2 : @nat), ∀ (b_2 : @nat), @decidable (@eq.{1} @nat a_2 b_2))
            @nat.zero),
      @nat.cases_on.{1}
        (λ (b_2 : @nat), @decidable (@eq.{1} @nat @nat.zero b_2)) b_1
        (@decidable.is_true (@eq.{1} @nat @nat.zero @nat.zero)
          (@rfl.{1} @nat @nat.zero))
        (λ (a_2 : @nat),
        @decidable.is_false (@eq.{1} @nat @nat.zero (@nat.succ a_2))
          (λ (h : @eq.{1} @nat @nat.zero (@nat.succ a_2)),
          @nat.no_confusion.{0} @false @nat.zero (@nat.succ a_2) h)))
      (λ (a_2 : @nat)
        (F_1 :
          @nat.below.{1}
            (λ (a_3 : @nat), ∀ (b_2 : @nat), @decidable (@eq.{1} @nat a_3 b_2))
            (@nat.succ a_2)),
      @nat.cases_on.{1}
        (λ (b_2 : @nat), @decidable (@eq.{1} @nat (@nat.succ a_2) b_2)) b_1
        (@decidable.is_false (@eq.{1} @nat (@nat.succ a_2) @nat.zero)
          (λ (h : @eq.{1} @nat (@nat.succ a_2) @nat.zero),
          @nat.no_confusion.{0} @false (@nat.succ a_2) @nat.zero h))
        (λ (a_1_0 : @nat),
        @nat.decidable_eq._match_1 a_2 a_1_0
          (@pprod.fst.{1 1}
            ((λ (a_3 : @nat), ∀ (b_2 : @nat), @decidable (@eq.{1} @nat a_3 b_2))
              a_2)
            (@nat.rec.{2} (λ (n : @nat), Type 0) @punit.{1}
              (λ (a_3 : @nat) (ih_1 : Type 0),
              @pprod.{1 1}
                (@pprod.{1 1}
                  ((λ (a_4 : @nat),
                    ∀ (b_2 : @nat),
                    @decidable (@eq.{1} @nat a_4 b_2)) a_3) ih_1) @punit.{1})
              a_2)
            (@pprod.fst.{1 1}
              (@pprod.{1 1}
                ((λ (a_3 : @nat),
                  ∀ (b_2 : @nat),
                  @decidable (@eq.{1} @nat a_3 b_2)) a_2)
                (@nat.rec.{2} (λ (n : @nat), Type 0) @punit.{1}
                  (λ (a_3 : @nat) (ih_1 : Type 0),
                  @pprod.{1 1}
                    (@pprod.{1 1}
                      ((λ (a_4 : @nat),
                        ∀ (b_2 : @nat),
                        @decidable (@eq.{1} @nat a_4 b_2)) a_3) ih_1)
                    @punit.{1}) a_2)) @punit.{1} F_1) a_1_0))) F_0) a_0 b_0 F) b,0))"
err: "provingground.interface.UnParsedException: could not parse expression @nat.decidable_eq._match_1"

mod: "DefMod(Definition(nat.decidable_eq,Vector(),@decidable_eq.{1} @nat,@nat.decidable_eq._main,0))"
err: "provingground.interface.UnParsedException: could not parse expression @nat.decidable_eq._main"

mod: "DefMod(Definition(nat.digit_char,Vector(),∀ (n : @nat), @char,λ (n : @nat),
@ite.{1} (@eq.{1} @nat n (@has_zero.zero.{0} @nat @nat.has_zero))
  (@nat.decidable_eq n (@has_zero.zero.{0} @nat @nat.has_zero)) @char
  (@char.of_nat
    (@bit0.{0} @nat @nat.has_add
      (@bit0.{0} @nat @nat.has_add
        (@bit0.{0} @nat @nat.has_add
          (@bit0.{0} @nat @nat.has_add
            (@bit1.{0} @nat @nat.has_one @nat.has_add
              (@has_one.one.{0} @nat @nat.has_one)))))))
  (@ite.{1} (@eq.{1} @nat n (@has_one.one.{0} @nat @nat.has_one))
    (@nat.decidable_eq n (@has_one.one.{0} @nat @nat.has_one)) @char
    (@char.of_nat
      (@bit1.{0} @nat @nat.has_one @nat.has_add
        (@bit0.{0} @nat @nat.has_add
          (@bit0.{0} @nat @nat.has_add
            (@bit0.{0} @nat @nat.has_add
              (@bit1.{0} @nat @nat.has_one @nat.has_add
                (@has_one.one.{0} @nat @nat.has_one)))))))
    (@ite.{1}
      (@eq.{1} @nat n
        (@bit0.{0} @nat @nat.has_add (@has_one.one.{0} @nat @nat.has_one)))
      (@nat.decidable_eq n
        (@bit0.{0} @nat @nat.has_add (@has_one.one.{0} @nat @nat.has_one)))
      @char
      (@char.of_nat
        (@bit0.{0} @nat @nat.has_add
          (@bit1.{0} @nat @nat.has_one @nat.has_add
            (@bit0.{0} @nat @nat.has_add
              (@bit0.{0} @nat @nat.has_add
                (@bit1.{0} @nat @nat.has_one @nat.has_add
                  (@has_one.one.{0} @nat @nat.has_one)))))))
      (@ite.{1}
        (@eq.{1} @nat n
          (@bit1.{0} @nat @nat.has_one @nat.has_add
            (@has_one.one.{0} @nat @nat.has_one)))
        (@nat.decidable_eq n
          (@bit1.{0} @nat @nat.has_one @nat.has_add
            (@has_one.one.{0} @nat @nat.has_one))) @char
        (@char.of_nat
          (@bit1.{0} @nat @nat.has_one @nat.has_add
            (@bit1.{0} @nat @nat.has_one @nat.has_add
              (@bit0.{0} @nat @nat.has_add
                (@bit0.{0} @nat @nat.has_add
                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                    (@has_one.one.{0} @nat @nat.has_one)))))))
        (@ite.{1}
          (@eq.{1} @nat n
            (@bit0.{0} @nat @nat.has_add
              (@bit0.{0} @nat @nat.has_add
                (@has_one.one.{0} @nat @nat.has_one))))
          (@nat.decidable_eq n
            (@bit0.{0} @nat @nat.has_add
              (@bit0.{0} @nat @nat.has_add
                (@has_one.one.{0} @nat @nat.has_one)))) @char
          (@char.of_nat
            (@bit0.{0} @nat @nat.has_add
              (@bit0.{0} @nat @nat.has_add
                (@bit1.{0} @nat @nat.has_one @nat.has_add
                  (@bit0.{0} @nat @nat.has_add
                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                      (@has_one.one.{0} @nat @nat.has_one)))))))
          (@ite.{1}
            (@eq.{1} @nat n
              (@bit1.{0} @nat @nat.has_one @nat.has_add
                (@bit0.{0} @nat @nat.has_add
                  (@has_one.one.{0} @nat @nat.has_one))))
            (@nat.decidable_eq n
              (@bit1.{0} @nat @nat.has_one @nat.has_add
                (@bit0.{0} @nat @nat.has_add
                  (@has_one.one.{0} @nat @nat.has_one)))) @char
            (@char.of_nat
              (@bit1.{0} @nat @nat.has_one @nat.has_add
                (@bit0.{0} @nat @nat.has_add
                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                    (@bit0.{0} @nat @nat.has_add
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@has_one.one.{0} @nat @nat.has_one)))))))
            (@ite.{1}
              (@eq.{1} @nat n
                (@bit0.{0} @nat @nat.has_add
                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                    (@has_one.one.{0} @nat @nat.has_one))))
              (@nat.decidable_eq n
                (@bit0.{0} @nat @nat.has_add
                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                    (@has_one.one.{0} @nat @nat.has_one)))) @char
              (@char.of_nat
                (@bit0.{0} @nat @nat.has_add
                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                      (@bit0.{0} @nat @nat.has_add
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@has_one.one.{0} @nat @nat.has_one)))))))
              (@ite.{1}
                (@eq.{1} @nat n
                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                      (@has_one.one.{0} @nat @nat.has_one))))
                (@nat.decidable_eq n
                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                      (@has_one.one.{0} @nat @nat.has_one)))) @char
                (@char.of_nat
                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit0.{0} @nat @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@has_one.one.{0} @nat @nat.has_one)))))))
                (@ite.{1}
                  (@eq.{1} @nat n
                    (@bit0.{0} @nat @nat.has_add
                      (@bit0.{0} @nat @nat.has_add
                        (@bit0.{0} @nat @nat.has_add
                          (@has_one.one.{0} @nat @nat.has_one)))))
                  (@nat.decidable_eq n
                    (@bit0.{0} @nat @nat.has_add
                      (@bit0.{0} @nat @nat.has_add
                        (@bit0.{0} @nat @nat.has_add
                          (@has_one.one.{0} @nat @nat.has_one))))) @char
                  (@char.of_nat
                    (@bit0.{0} @nat @nat.has_add
                      (@bit0.{0} @nat @nat.has_add
                        (@bit0.{0} @nat @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@has_one.one.{0} @nat @nat.has_one)))))))
                  (@ite.{1}
                    (@eq.{1} @nat n
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit0.{0} @nat @nat.has_add
                          (@bit0.{0} @nat @nat.has_add
                            (@has_one.one.{0} @nat @nat.has_one)))))
                    (@nat.decidable_eq n
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit0.{0} @nat @nat.has_add
                          (@bit0.{0} @nat @nat.has_add
                            (@has_one.one.{0} @nat @nat.has_one))))) @char
                    (@char.of_nat
                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                        (@bit0.{0} @nat @nat.has_add
                          (@bit0.{0} @nat @nat.has_add
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@has_one.one.{0} @nat @nat.has_one)))))))
                    (@ite.{1}
                      (@eq.{1} @nat n
                        (@bit0.{0} @nat @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@has_one.one.{0} @nat @nat.has_one)))))
                      (@nat.decidable_eq n
                        (@bit0.{0} @nat @nat.has_add
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@has_one.one.{0} @nat @nat.has_one))))) @char
                      (@char.of_nat
                        (@bit1.{0} @nat @nat.has_one @nat.has_add
                          (@bit0.{0} @nat @nat.has_add
                            (@bit0.{0} @nat @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@has_one.one.{0} @nat @nat.has_one))))))))
                      (@ite.{1}
                        (@eq.{1} @nat n
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@has_one.one.{0} @nat @nat.has_one)))))
                        (@nat.decidable_eq n
                          (@bit1.{0} @nat @nat.has_one @nat.has_add
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@has_one.one.{0} @nat @nat.has_one))))) @char
                        (@char.of_nat
                          (@bit0.{0} @nat @nat.has_add
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@has_one.one.{0} @nat
                                        @nat.has_one))))))))
                        (@ite.{1}
                          (@eq.{1} @nat n
                            (@bit0.{0} @nat @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@has_one.one.{0} @nat @nat.has_one)))))
                          (@nat.decidable_eq n
                            (@bit0.{0} @nat @nat.has_add
                              (@bit0.{0} @nat @nat.has_add
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@has_one.one.{0} @nat @nat.has_one))))) @char
                          (@char.of_nat
                            (@bit1.{0} @nat @nat.has_one @nat.has_add
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit0.{0} @nat @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@has_one.one.{0} @nat
                                          @nat.has_one))))))))
                          (@ite.{1}
                            (@eq.{1} @nat n
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@has_one.one.{0} @nat @nat.has_one)))))
                            (@nat.decidable_eq n
                              (@bit1.{0} @nat @nat.has_one @nat.has_add
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@has_one.one.{0} @nat @nat.has_one)))))
                            @char
                            (@char.of_nat
                              (@bit0.{0} @nat @nat.has_add
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit0.{0} @nat @nat.has_add
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@has_one.one.{0} @nat
                                            @nat.has_one))))))))
                            (@ite.{1}
                              (@eq.{1} @nat n
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@has_one.one.{0} @nat @nat.has_one)))))
                              (@nat.decidable_eq n
                                (@bit0.{0} @nat @nat.has_add
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@has_one.one.{0} @nat @nat.has_one)))))
                              @char
                              (@char.of_nat
                                (@bit1.{0} @nat @nat.has_one @nat.has_add
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit1.{0} @nat @nat.has_one
                                            @nat.has_add
                                            (@has_one.one.{0} @nat
                                              @nat.has_one))))))))
                              (@ite.{1}
                                (@eq.{1} @nat n
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@has_one.one.{0} @nat @nat.has_one)))))
                                (@nat.decidable_eq n
                                  (@bit1.{0} @nat @nat.has_one @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@has_one.one.{0} @nat @nat.has_one)))))
                                @char
                                (@char.of_nat
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit1.{0} @nat @nat.has_one @nat.has_add
                                        (@bit0.{0} @nat @nat.has_add
                                          (@bit0.{0} @nat @nat.has_add
                                            (@bit1.{0} @nat @nat.has_one
                                              @nat.has_add
                                              (@has_one.one.{0} @nat
                                                @nat.has_one))))))))
                                (@char.of_nat
                                  (@bit0.{0} @nat @nat.has_add
                                    (@bit1.{0} @nat @nat.has_one @nat.has_add
                                      (@bit0.{0} @nat @nat.has_add
                                        (@bit1.{0} @nat @nat.has_one
                                          @nat.has_add
                                          (@bit0.{0} @nat @nat.has_add
                                            (@has_one.one.{0} @nat
                                              @nat.has_one)))))))))))))))))))))),0))"
err: "java.util.concurrent.TimeoutException: Task timed-out after 5 minutes of inactivity"

mod: "DefMod(Definition(nat.digit_succ._main,Vector(),∀ (base : @nat) (a : @list.{0} @nat), @list.{0} @nat,λ (base : @nat) (a : @list.{0} @nat),
@list.brec_on.{1 0} @nat (λ (a_0 : @list.{0} @nat), @list.{0} @nat) a
  (λ (a_0 : @list.{0} @nat)
    (F : @list.below.{1 0} @nat (λ (a_1 : @list.{0} @nat), @list.{0} @nat) a_0),
  (λ (a_1 : @list.{0} @nat)
      (F_0 :
        @list.below.{1 0} @nat (λ (a_2 : @list.{0} @nat), @list.{0} @nat) a_1),
    @list.cases_on.{1 0} @nat
      (λ (a_2 : @list.{0} @nat),
      ∀ (F_1 :
          @list.below.{1 0} @nat (λ (a_3 : @list.{0} @nat), @list.{0} @nat)
            a_2),
      @list.{0} @nat) a_1
      (λ (F_1 :
          @list.below.{1 0} @nat (λ (a_2 : @list.{0} @nat), @list.{0} @nat)
            (@list.nil.{0} @nat)),
      @list.cons.{0} @nat (@has_one.one.{0} @nat @nat.has_one)
        (@list.nil.{0} @nat))
      (λ (a_2 : @nat) (a_1_0 : @list.{0} @nat)
        (F_1 :
          @list.below.{1 0} @nat (λ (a_3 : @list.{0} @nat), @list.{0} @nat)
            (@list.cons.{0} @nat a_2 a_1_0)),
      @ite.{1}
        (@eq.{1} @nat
          (@has_add.add.{0} @nat @nat.has_add a_2
            (@has_one.one.{0} @nat @nat.has_one)) base)
        (@nat.decidable_eq
          (@has_add.add.{0} @nat @nat.has_add a_2
            (@has_one.one.{0} @nat @nat.has_one)) base) (@list.{0} @nat)
        (@list.cons.{0} @nat (@has_zero.zero.{0} @nat @nat.has_zero)
          (@pprod.fst.{1 1} ((λ (a_3 : @list.{0} @nat), @list.{0} @nat) a_1_0)
            (@list.rec.{2 0} @nat (λ (n : @list.{0} @nat), Type 0) @punit.{1}
              (λ (a_3 : @nat) (a_4 : @list.{0} @nat) (ih_1 : Type 0),
              @pprod.{1 1}
                (@pprod.{1 1} ((λ (a_5 : @list.{0} @nat), @list.{0} @nat) a_4)
                  ih_1) @punit.{1}) a_1_0)
            (@pprod.fst.{1 1}
              (@pprod.{1 1} ((λ (a_3 : @list.{0} @nat), @list.{0} @nat) a_1_0)
                (@list.rec.{2 0} @nat (λ (n : @list.{0} @nat), Type 0)
                  @punit.{1}
                  (λ (a_3 : @nat) (a_4 : @list.{0} @nat) (ih_1 : Type 0),
                  @pprod.{1 1}
                    (@pprod.{1 1}
                      ((λ (a_5 : @list.{0} @nat), @list.{0} @nat) a_4) ih_1)
                    @punit.{1}) a_1_0)) @punit.{1} F_1)))
        (@list.cons.{0} @nat
          (@has_add.add.{0} @nat @nat.has_add a_2
            (@has_one.one.{0} @nat @nat.has_one)) a_1_0)) F_0) a_0 F),0))"
err: "provingground.interface.UnParsedException: could not parse expression @nat.decidable_eq"

mod: "DefMod(Definition(nat.digit_succ,Vector(),∀ (base : @nat) (a : @list.{0} @nat), @list.{0} @nat,λ (base : @nat), @nat.digit_succ._main base,0))"
err: "provingground.interface.UnParsedException: could not parse expression @nat.digit_succ._main"

mod: "DefMod(Definition(nat.to_digits._main,Vector(),∀ (base a : @nat), @list.{0} @nat,λ (base a : @nat),
@nat.brec_on.{1} (λ (a_0 : @nat), @list.{0} @nat) a
  (λ (a_0 : @nat) (F : @nat.below.{1} (λ (a_1 : @nat), @list.{0} @nat) a_0),
  (λ (a_1 : @nat) (F_0 : @nat.below.{1} (λ (a_2 : @nat), @list.{0} @nat) a_1),
    @nat.cases_on.{1}
      (λ (a_2 : @nat),
      ∀ (F_1 : @nat.below.{1} (λ (a_3 : @nat), @list.{0} @nat) a_2),
      @list.{0} @nat) a_1
      (λ (F_1 : @nat.below.{1} (λ (a_2 : @nat), @list.{0} @nat) @nat.zero),
      @list.cons.{0} @nat (@has_zero.zero.{0} @nat @nat.has_zero)
        (@list.nil.{0} @nat))
      (λ (a_2 : @nat)
        (F_1 : @nat.below.{1} (λ (a_3 : @nat), @list.{0} @nat) (@nat.succ a_2)),
      @nat.digit_succ base
        (@pprod.fst.{1 1}
          ((λ (a_3 : @nat), @list.{0} @nat)
            (@pprod.fst.{1 1} ((λ (a_3 : @nat), ∀ (a_4 : @nat), @nat) @nat.zero)
              (@nat.rec.{2} (λ (n : @nat), Type 0) @punit.{1}
                (λ (a_3 : @nat) (ih_1 : Type 0),
                @pprod.{1 1}
                  (@pprod.{1 1} ((λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) a_3)
                    ih_1) @punit.{1}) @nat.zero)
              (@pprod.fst.{1 1}
                (@pprod.{1 1} ((λ (a_3 : @nat), ∀ (a_4 : @nat), @nat) @nat.zero)
                  (@nat.rec.{2} (λ (n : @nat), Type 0) @punit.{1}
                    (λ (a_3 : @nat) (ih_1 : Type 0),
                    @pprod.{1 1}
                      (@pprod.{1 1} ((λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) a_3)
                        ih_1) @punit.{1}) @nat.zero)) @punit.{1}
                (@pprod.mk.{1 1}
                  (@pprod.{1 1}
                    ((λ (a_3 : @nat), ∀ (a_4 : @nat), @nat) @nat.zero)
                    (@nat.below.{1} (λ (a_3 : @nat), ∀ (a_4 : @nat), @nat)
                      @nat.zero)) @punit.{1}
                  (@nat.rec.{1}
                    (λ (n : @nat),
                    @pprod.{1 1} ((λ (a_3 : @nat), ∀ (a_4 : @nat), @nat) n)
                      (@nat.below.{1} (λ (a_3 : @nat), ∀ (a_4 : @nat), @nat) n))
                    (@pprod.mk.{1 1}
                      ((λ (a_3 : @nat), ∀ (a_4 : @nat), @nat) @nat.zero)
                      @punit.{1}
                      ((λ (a_3 : @nat)
                          (F_2 :
                            @nat.below.{1}
                              (λ (a_5 : @nat), ∀ (a_6 : @nat), @nat) a_3)
                          (a_4 : @nat),
                        (λ (a_5 a_6 : @nat)
                            (F_3 :
                              @nat.below.{1}
                                (λ (a_7 : @nat), ∀ (a_8 : @nat), @nat) a_6),
                          @nat.cases_on.{1}
                            (λ (a_7 : @nat),
                            ∀ (F_4 :
                                @nat.below.{1}
                                  (λ (a_8 : @nat), ∀ (a_9 : @nat), @nat) a_7),
                            @nat) a_6
                            (λ (F_4 :
                                @nat.below.{1}
                                  (λ (a_7 : @nat), ∀ (a_8 : @nat), @nat)
                                  @nat.zero),
                            a_5)
                            (λ (a_1_0 : @nat)
                              (F_4 :
                                @nat.below.{1}
                                  (λ (a_7 : @nat), ∀ (a_8 : @nat), @nat)
                                  (@nat.succ a_1_0)),
                            @nat.succ
                              (@pprod.fst.{1 1}
                                ((λ (a_7 : @nat), ∀ (a_8 : @nat), @nat) a_1_0)
                                (@nat.rec.{2} (λ (n : @nat), Type 0) @punit.{1}
                                  (λ (a_7 : @nat) (ih_1 : Type 0),
                                  @pprod.{1 1}
                                    (@pprod.{1 1}
                                      ((λ (a_8 : @nat), ∀ (a_9 : @nat), @nat)
                                        a_7) ih_1) @punit.{1}) a_1_0)
                                (@pprod.fst.{1 1}
                                  (@pprod.{1 1}
                                    ((λ (a_7 : @nat), ∀ (a_8 : @nat), @nat)
                                      a_1_0)
                                    (@nat.rec.{2} (λ (n : @nat), Type 0)
                                      @punit.{1}
                                      (λ (a_7 : @nat) (ih_1 : Type 0),
                                      @pprod.{1 1}
                                        (@pprod.{1 1}
                                          ((λ (a_8 : @nat),
                                            ∀ (a_9 : @nat),
                                            @nat) a_7) ih_1) @punit.{1}) a_1_0))
                                  @punit.{1} F_4) a_5)) F_3) a_4 a_3 F_2)
                        @nat.zero @punit.star.{1}) @punit.star.{1})
                    (λ (a_3 : @nat)
                      (ih_1 :
                        @pprod.{1 1}
                          ((λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) a_3)
                          (@nat.below.{1} (λ (a_4 : @nat), ∀ (a_5 : @nat), @nat)
                            a_3)),
                    @pprod.mk.{1 1}
                      ((λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) (@nat.succ a_3))
                      (@pprod.{1 1}
                        (@pprod.{1 1}
                          ((λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) a_3)
                          (@nat.below.{1} (λ (a_4 : @nat), ∀ (a_5 : @nat), @nat)
                            a_3)) @punit.{1})
                      ((λ (a_4 : @nat)
                          (F_2 :
                            @nat.below.{1}
                              (λ (a_6 : @nat), ∀ (a_7 : @nat), @nat) a_4)
                          (a_5 : @nat),
                        (λ (a_6 a_7 : @nat)
                            (F_3 :
                              @nat.below.{1}
                                (λ (a_8 : @nat), ∀ (a_9 : @nat), @nat) a_7),
                          @nat.cases_on.{1}
                            (λ (a_8 : @nat),
                            ∀ (F_4 :
                                @nat.below.{1}
                                  (λ (a_9 : @nat), ∀ (a_10 : @nat), @nat) a_8),
                            @nat) a_7
                            (λ (F_4 :
                                @nat.below.{1}
                                  (λ (a_8 : @nat), ∀ (a_9 : @nat), @nat)
                                  @nat.zero),
                            a_6)
                            (λ (a_1_0 : @nat)
                              (F_4 :
                                @nat.below.{1}
                                  (λ (a_8 : @nat), ∀ (a_9 : @nat), @nat)
                                  (@nat.succ a_1_0)),
                            @nat.succ
                              (@pprod.fst.{1 1}
                                ((λ (a_8 : @nat), ∀ (a_9 : @nat), @nat) a_1_0)
                                (@nat.rec.{2} (λ (n : @nat), Type 0) @punit.{1}
                                  (λ (a_8 : @nat) (ih_1_0 : Type 0),
                                  @pprod.{1 1}
                                    (@pprod.{1 1}
                                      ((λ (a_9 : @nat), ∀ (a_10 : @nat), @nat)
                                        a_8) ih_1_0) @punit.{1}) a_1_0)
                                (@pprod.fst.{1 1}
                                  (@pprod.{1 1}
                                    ((λ (a_8 : @nat), ∀ (a_9 : @nat), @nat)
                                      a_1_0)
                                    (@nat.rec.{2} (λ (n : @nat), Type 0)
                                      @punit.{1}
                                      (λ (a_8 : @nat) (ih_1_0 : Type 0),
                                      @pprod.{1 1}
                                        (@pprod.{1 1}
                                          ((λ (a_9 : @nat),
                                            ∀ (a_10 : @nat),
                                            @nat) a_8) ih_1_0) @punit.{1})
                                      a_1_0)) @punit.{1} F_4) a_6)) F_3) a_5 a_4
                          F_2) (@nat.succ a_3)
                        (@pprod.mk.{1 1}
                          (@pprod.{1 1}
                            ((λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) a_3)
                            (@nat.below.{1}
                              (λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) a_3))
                          @punit.{1} ih_1 @punit.star.{1}))
                      (@pprod.mk.{1 1}
                        (@pprod.{1 1}
                          ((λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) a_3)
                          (@nat.below.{1} (λ (a_4 : @nat), ∀ (a_5 : @nat), @nat)
                            a_3)) @punit.{1} ih_1 @punit.star.{1})) @nat.zero)
                  @punit.star.{1})) a_2))
          (@nat.rec.{2} (λ (n : @nat), Type 0) @punit.{1}
            (λ (a_3 : @nat) (ih_1 : Type 0),
            @pprod.{1 1}
              (@pprod.{1 1} ((λ (a_4 : @nat), @list.{0} @nat) a_3) ih_1)
              @punit.{1})
            (@pprod.fst.{1 1} ((λ (a_3 : @nat), ∀ (a_4 : @nat), @nat) @nat.zero)
              (@nat.rec.{2} (λ (n : @nat), Type 0) @punit.{1}
                (λ (a_3 : @nat) (ih_1 : Type 0),
                @pprod.{1 1}
                  (@pprod.{1 1} ((λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) a_3)
                    ih_1) @punit.{1}) @nat.zero)
              (@pprod.fst.{1 1}
                (@pprod.{1 1} ((λ (a_3 : @nat), ∀ (a_4 : @nat), @nat) @nat.zero)
                  (@nat.rec.{2} (λ (n : @nat), Type 0) @punit.{1}
                    (λ (a_3 : @nat) (ih_1 : Type 0),
                    @pprod.{1 1}
                      (@pprod.{1 1} ((λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) a_3)
                        ih_1) @punit.{1}) @nat.zero)) @punit.{1}
                (@pprod.mk.{1 1}
                  (@pprod.{1 1}
                    ((λ (a_3 : @nat), ∀ (a_4 : @nat), @nat) @nat.zero)
                    (@nat.below.{1} (λ (a_3 : @nat), ∀ (a_4 : @nat), @nat)
                      @nat.zero)) @punit.{1}
                  (@nat.rec.{1}
                    (λ (n : @nat),
                    @pprod.{1 1} ((λ (a_3 : @nat), ∀ (a_4 : @nat), @nat) n)
                      (@nat.below.{1} (λ (a_3 : @nat), ∀ (a_4 : @nat), @nat) n))
                    (@pprod.mk.{1 1}
                      ((λ (a_3 : @nat), ∀ (a_4 : @nat), @nat) @nat.zero)
                      @punit.{1}
                      ((λ (a_3 : @nat)
                          (F_2 :
                            @nat.below.{1}
                              (λ (a_5 : @nat), ∀ (a_6 : @nat), @nat) a_3)
                          (a_4 : @nat),
                        (λ (a_5 a_6 : @nat)
                            (F_3 :
                              @nat.below.{1}
                                (λ (a_7 : @nat), ∀ (a_8 : @nat), @nat) a_6),
                          @nat.cases_on.{1}
                            (λ (a_7 : @nat),
                            ∀ (F_4 :
                                @nat.below.{1}
                                  (λ (a_8 : @nat), ∀ (a_9 : @nat), @nat) a_7),
                            @nat) a_6
                            (λ (F_4 :
                                @nat.below.{1}
                                  (λ (a_7 : @nat), ∀ (a_8 : @nat), @nat)
                                  @nat.zero),
                            a_5)
                            (λ (a_1_0 : @nat)
                              (F_4 :
                                @nat.below.{1}
                                  (λ (a_7 : @nat), ∀ (a_8 : @nat), @nat)
                                  (@nat.succ a_1_0)),
                            @nat.succ
                              (@pprod.fst.{1 1}
                                ((λ (a_7 : @nat), ∀ (a_8 : @nat), @nat) a_1_0)
                                (@nat.rec.{2} (λ (n : @nat), Type 0) @punit.{1}
                                  (λ (a_7 : @nat) (ih_1 : Type 0),
                                  @pprod.{1 1}
                                    (@pprod.{1 1}
                                      ((λ (a_8 : @nat), ∀ (a_9 : @nat), @nat)
                                        a_7) ih_1) @punit.{1}) a_1_0)
                                (@pprod.fst.{1 1}
                                  (@pprod.{1 1}
                                    ((λ (a_7 : @nat), ∀ (a_8 : @nat), @nat)
                                      a_1_0)
                                    (@nat.rec.{2} (λ (n : @nat), Type 0)
                                      @punit.{1}
                                      (λ (a_7 : @nat) (ih_1 : Type 0),
                                      @pprod.{1 1}
                                        (@pprod.{1 1}
                                          ((λ (a_8 : @nat),
                                            ∀ (a_9 : @nat),
                                            @nat) a_7) ih_1) @punit.{1}) a_1_0))
                                  @punit.{1} F_4) a_5)) F_3) a_4 a_3 F_2)
                        @nat.zero @punit.star.{1}) @punit.star.{1})
                    (λ (a_3 : @nat)
                      (ih_1 :
                        @pprod.{1 1}
                          ((λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) a_3)
                          (@nat.below.{1} (λ (a_4 : @nat), ∀ (a_5 : @nat), @nat)
                            a_3)),
                    @pprod.mk.{1 1}
                      ((λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) (@nat.succ a_3))
                      (@pprod.{1 1}
                        (@pprod.{1 1}
                          ((λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) a_3)
                          (@nat.below.{1} (λ (a_4 : @nat), ∀ (a_5 : @nat), @nat)
                            a_3)) @punit.{1})
                      ((λ (a_4 : @nat)
                          (F_2 :
                            @nat.below.{1}
                              (λ (a_6 : @nat), ∀ (a_7 : @nat), @nat) a_4)
                          (a_5 : @nat),
                        (λ (a_6 a_7 : @nat)
                            (F_3 :
                              @nat.below.{1}
                                (λ (a_8 : @nat), ∀ (a_9 : @nat), @nat) a_7),
                          @nat.cases_on.{1}
                            (λ (a_8 : @nat),
                            ∀ (F_4 :
                                @nat.below.{1}
                                  (λ (a_9 : @nat), ∀ (a_10 : @nat), @nat) a_8),
                            @nat) a_7
                            (λ (F_4 :
                                @nat.below.{1}
                                  (λ (a_8 : @nat), ∀ (a_9 : @nat), @nat)
                                  @nat.zero),
                            a_6)
                            (λ (a_1_0 : @nat)
                              (F_4 :
                                @nat.below.{1}
                                  (λ (a_8 : @nat), ∀ (a_9 : @nat), @nat)
                                  (@nat.succ a_1_0)),
                            @nat.succ
                              (@pprod.fst.{1 1}
                                ((λ (a_8 : @nat), ∀ (a_9 : @nat), @nat) a_1_0)
                                (@nat.rec.{2} (λ (n : @nat), Type 0) @punit.{1}
                                  (λ (a_8 : @nat) (ih_1_0 : Type 0),
                                  @pprod.{1 1}
                                    (@pprod.{1 1}
                                      ((λ (a_9 : @nat), ∀ (a_10 : @nat), @nat)
                                        a_8) ih_1_0) @punit.{1}) a_1_0)
                                (@pprod.fst.{1 1}
                                  (@pprod.{1 1}
                                    ((λ (a_8 : @nat), ∀ (a_9 : @nat), @nat)
                                      a_1_0)
                                    (@nat.rec.{2} (λ (n : @nat), Type 0)
                                      @punit.{1}
                                      (λ (a_8 : @nat) (ih_1_0 : Type 0),
                                      @pprod.{1 1}
                                        (@pprod.{1 1}
                                          ((λ (a_9 : @nat),
                                            ∀ (a_10 : @nat),
                                            @nat) a_8) ih_1_0) @punit.{1})
                                      a_1_0)) @punit.{1} F_4) a_6)) F_3) a_5 a_4
                          F_2) (@nat.succ a_3)
                        (@pprod.mk.{1 1}
                          (@pprod.{1 1}
                            ((λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) a_3)
                            (@nat.below.{1}
                              (λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) a_3))
                          @punit.{1} ih_1 @punit.star.{1}))
                      (@pprod.mk.{1 1}
                        (@pprod.{1 1}
                          ((λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) a_3)
                          (@nat.below.{1} (λ (a_4 : @nat), ∀ (a_5 : @nat), @nat)
                            a_3)) @punit.{1} ih_1 @punit.star.{1})) @nat.zero)
                  @punit.star.{1})) a_2))
          (@pprod.fst.{1 1}
            (@pprod.{1 1}
              ((λ (a_3 : @nat), @list.{0} @nat)
                (@pprod.fst.{1 1}
                  ((λ (a_3 : @nat), ∀ (a_4 : @nat), @nat) @nat.zero)
                  (@nat.rec.{2} (λ (n : @nat), Type 0) @punit.{1}
                    (λ (a_3 : @nat) (ih_1 : Type 0),
                    @pprod.{1 1}
                      (@pprod.{1 1} ((λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) a_3)
                        ih_1) @punit.{1}) @nat.zero)
                  (@pprod.fst.{1 1}
                    (@pprod.{1 1}
                      ((λ (a_3 : @nat), ∀ (a_4 : @nat), @nat) @nat.zero)
                      (@nat.rec.{2} (λ (n : @nat), Type 0) @punit.{1}
                        (λ (a_3 : @nat) (ih_1 : Type 0),
                        @pprod.{1 1}
                          (@pprod.{1 1}
                            ((λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) a_3) ih_1)
                          @punit.{1}) @nat.zero)) @punit.{1}
                    (@pprod.mk.{1 1}
                      (@pprod.{1 1}
                        ((λ (a_3 : @nat), ∀ (a_4 : @nat), @nat) @nat.zero)
                        (@nat.below.{1} (λ (a_3 : @nat), ∀ (a_4 : @nat), @nat)
                          @nat.zero)) @punit.{1}
                      (@nat.rec.{1}
                        (λ (n : @nat),
                        @pprod.{1 1} ((λ (a_3 : @nat), ∀ (a_4 : @nat), @nat) n)
                          (@nat.below.{1} (λ (a_3 : @nat), ∀ (a_4 : @nat), @nat)
                            n))
                        (@pprod.mk.{1 1}
                          ((λ (a_3 : @nat), ∀ (a_4 : @nat), @nat) @nat.zero)
                          @punit.{1}
                          ((λ (a_3 : @nat)
                              (F_2 :
                                @nat.below.{1}
                                  (λ (a_5 : @nat), ∀ (a_6 : @nat), @nat) a_3)
                              (a_4 : @nat),
                            (λ (a_5 a_6 : @nat)
                                (F_3 :
                                  @nat.below.{1}
                                    (λ (a_7 : @nat), ∀ (a_8 : @nat), @nat) a_6),
                              @nat.cases_on.{1}
                                (λ (a_7 : @nat),
                                ∀ (F_4 :
                                    @nat.below.{1}
                                      (λ (a_8 : @nat), ∀ (a_9 : @nat), @nat)
                                      a_7),
                                @nat) a_6
                                (λ (F_4 :
                                    @nat.below.{1}
                                      (λ (a_7 : @nat), ∀ (a_8 : @nat), @nat)
                                      @nat.zero),
                                a_5)
                                (λ (a_1_0 : @nat)
                                  (F_4 :
                                    @nat.below.{1}
                                      (λ (a_7 : @nat), ∀ (a_8 : @nat), @nat)
                                      (@nat.succ a_1_0)),
                                @nat.succ
                                  (@pprod.fst.{1 1}
                                    ((λ (a_7 : @nat), ∀ (a_8 : @nat), @nat)
                                      a_1_0)
                                    (@nat.rec.{2} (λ (n : @nat), Type 0)
                                      @punit.{1}
                                      (λ (a_7 : @nat) (ih_1 : Type 0),
                                      @pprod.{1 1}
                                        (@pprod.{1 1}
                                          ((λ (a_8 : @nat),
                                            ∀ (a_9 : @nat),
                                            @nat) a_7) ih_1) @punit.{1}) a_1_0)
                                    (@pprod.fst.{1 1}
                                      (@pprod.{1 1}
                                        ((λ (a_7 : @nat), ∀ (a_8 : @nat), @nat)
                                          a_1_0)
                                        (@nat.rec.{2} (λ (n : @nat), Type 0)
                                          @punit.{1}
                                          (λ (a_7 : @nat) (ih_1 : Type 0),
                                          @pprod.{1 1}
                                            (@pprod.{1 1}
                                              ((λ (a_8 : @nat),
                                                ∀ (a_9 : @nat),
                                                @nat) a_7) ih_1) @punit.{1})
                                          a_1_0)) @punit.{1} F_4) a_5)) F_3) a_4
                              a_3 F_2) @nat.zero @punit.star.{1})
                          @punit.star.{1})
                        (λ (a_3 : @nat)
                          (ih_1 :
                            @pprod.{1 1}
                              ((λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) a_3)
                              (@nat.below.{1}
                                (λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) a_3)),
                        @pprod.mk.{1 1}
                          ((λ (a_4 : @nat), ∀ (a_5 : @nat), @nat)
                            (@nat.succ a_3))
                          (@pprod.{1 1}
                            (@pprod.{1 1}
                              ((λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) a_3)
                              (@nat.below.{1}
                                (λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) a_3))
                            @punit.{1})
                          ((λ (a_4 : @nat)
                              (F_2 :
                                @nat.below.{1}
                                  (λ (a_6 : @nat), ∀ (a_7 : @nat), @nat) a_4)
                              (a_5 : @nat),
                            (λ (a_6 a_7 : @nat)
                                (F_3 :
                                  @nat.below.{1}
                                    (λ (a_8 : @nat), ∀ (a_9 : @nat), @nat) a_7),
                              @nat.cases_on.{1}
                                (λ (a_8 : @nat),
                                ∀ (F_4 :
                                    @nat.below.{1}
                                      (λ (a_9 : @nat), ∀ (a_10 : @nat), @nat)
                                      a_8),
                                @nat) a_7
                                (λ (F_4 :
                                    @nat.below.{1}
                                      (λ (a_8 : @nat), ∀ (a_9 : @nat), @nat)
                                      @nat.zero),
                                a_6)
                                (λ (a_1_0 : @nat)
                                  (F_4 :
                                    @nat.below.{1}
                                      (λ (a_8 : @nat), ∀ (a_9 : @nat), @nat)
                                      (@nat.succ a_1_0)),
                                @nat.succ
                                  (@pprod.fst.{1 1}
                                    ((λ (a_8 : @nat), ∀ (a_9 : @nat), @nat)
                                      a_1_0)
                                    (@nat.rec.{2} (λ (n : @nat), Type 0)
                                      @punit.{1}
                                      (λ (a_8 : @nat) (ih_1_0 : Type 0),
                                      @pprod.{1 1}
                                        (@pprod.{1 1}
                                          ((λ (a_9 : @nat),
                                            ∀ (a_10 : @nat),
                                            @nat) a_8) ih_1_0) @punit.{1})
                                      a_1_0)
                                    (@pprod.fst.{1 1}
                                      (@pprod.{1 1}
                                        ((λ (a_8 : @nat), ∀ (a_9 : @nat), @nat)
                                          a_1_0)
                                        (@nat.rec.{2} (λ (n : @nat), Type 0)
                                          @punit.{1}
                                          (λ (a_8 : @nat) (ih_1_0 : Type 0),
                                          @pprod.{1 1}
                                            (@pprod.{1 1}
                                              ((λ (a_9 : @nat),
                                                ∀ (a_10 : @nat),
                                                @nat) a_8) ih_1_0) @punit.{1})
                                          a_1_0)) @punit.{1} F_4) a_6)) F_3) a_5
                              a_4 F_2) (@nat.succ a_3)
                            (@pprod.mk.{1 1}
                              (@pprod.{1 1}
                                ((λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) a_3)
                                (@nat.below.{1}
                                  (λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) a_3))
                              @punit.{1} ih_1 @punit.star.{1}))
                          (@pprod.mk.{1 1}
                            (@pprod.{1 1}
                              ((λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) a_3)
                              (@nat.below.{1}
                                (λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) a_3))
                            @punit.{1} ih_1 @punit.star.{1})) @nat.zero)
                      @punit.star.{1})) a_2))
              (@nat.rec.{2} (λ (n : @nat), Type 0) @punit.{1}
                (λ (a_3 : @nat) (ih_1 : Type 0),
                @pprod.{1 1}
                  (@pprod.{1 1} ((λ (a_4 : @nat), @list.{0} @nat) a_3) ih_1)
                  @punit.{1})
                (@pprod.fst.{1 1}
                  ((λ (a_3 : @nat), ∀ (a_4 : @nat), @nat) @nat.zero)
                  (@nat.rec.{2} (λ (n : @nat), Type 0) @punit.{1}
                    (λ (a_3 : @nat) (ih_1 : Type 0),
                    @pprod.{1 1}
                      (@pprod.{1 1} ((λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) a_3)
                        ih_1) @punit.{1}) @nat.zero)
                  (@pprod.fst.{1 1}
                    (@pprod.{1 1}
                      ((λ (a_3 : @nat), ∀ (a_4 : @nat), @nat) @nat.zero)
                      (@nat.rec.{2} (λ (n : @nat), Type 0) @punit.{1}
                        (λ (a_3 : @nat) (ih_1 : Type 0),
                        @pprod.{1 1}
                          (@pprod.{1 1}
                            ((λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) a_3) ih_1)
                          @punit.{1}) @nat.zero)) @punit.{1}
                    (@pprod.mk.{1 1}
                      (@pprod.{1 1}
                        ((λ (a_3 : @nat), ∀ (a_4 : @nat), @nat) @nat.zero)
                        (@nat.below.{1} (λ (a_3 : @nat), ∀ (a_4 : @nat), @nat)
                          @nat.zero)) @punit.{1}
                      (@nat.rec.{1}
                        (λ (n : @nat),
                        @pprod.{1 1} ((λ (a_3 : @nat), ∀ (a_4 : @nat), @nat) n)
                          (@nat.below.{1} (λ (a_3 : @nat), ∀ (a_4 : @nat), @nat)
                            n))
                        (@pprod.mk.{1 1}
                          ((λ (a_3 : @nat), ∀ (a_4 : @nat), @nat) @nat.zero)
                          @punit.{1}
                          ((λ (a_3 : @nat)
                              (F_2 :
                                @nat.below.{1}
                                  (λ (a_5 : @nat), ∀ (a_6 : @nat), @nat) a_3)
                              (a_4 : @nat),
                            (λ (a_5 a_6 : @nat)
                                (F_3 :
                                  @nat.below.{1}
                                    (λ (a_7 : @nat), ∀ (a_8 : @nat), @nat) a_6),
                              @nat.cases_on.{1}
                                (λ (a_7 : @nat),
                                ∀ (F_4 :
                                    @nat.below.{1}
                                      (λ (a_8 : @nat), ∀ (a_9 : @nat), @nat)
                                      a_7),
                                @nat) a_6
                                (λ (F_4 :
                                    @nat.below.{1}
                                      (λ (a_7 : @nat), ∀ (a_8 : @nat), @nat)
                                      @nat.zero),
                                a_5)
                                (λ (a_1_0 : @nat)
                                  (F_4 :
                                    @nat.below.{1}
                                      (λ (a_7 : @nat), ∀ (a_8 : @nat), @nat)
                                      (@nat.succ a_1_0)),
                                @nat.succ
                                  (@pprod.fst.{1 1}
                                    ((λ (a_7 : @nat), ∀ (a_8 : @nat), @nat)
                                      a_1_0)
                                    (@nat.rec.{2} (λ (n : @nat), Type 0)
                                      @punit.{1}
                                      (λ (a_7 : @nat) (ih_1 : Type 0),
                                      @pprod.{1 1}
                                        (@pprod.{1 1}
                                          ((λ (a_8 : @nat),
                                            ∀ (a_9 : @nat),
                                            @nat) a_7) ih_1) @punit.{1}) a_1_0)
                                    (@pprod.fst.{1 1}
                                      (@pprod.{1 1}
                                        ((λ (a_7 : @nat), ∀ (a_8 : @nat), @nat)
                                          a_1_0)
                                        (@nat.rec.{2} (λ (n : @nat), Type 0)
                                          @punit.{1}
                                          (λ (a_7 : @nat) (ih_1 : Type 0),
                                          @pprod.{1 1}
                                            (@pprod.{1 1}
                                              ((λ (a_8 : @nat),
                                                ∀ (a_9 : @nat),
                                                @nat) a_7) ih_1) @punit.{1})
                                          a_1_0)) @punit.{1} F_4) a_5)) F_3) a_4
                              a_3 F_2) @nat.zero @punit.star.{1})
                          @punit.star.{1})
                        (λ (a_3 : @nat)
                          (ih_1 :
                            @pprod.{1 1}
                              ((λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) a_3)
                              (@nat.below.{1}
                                (λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) a_3)),
                        @pprod.mk.{1 1}
                          ((λ (a_4 : @nat), ∀ (a_5 : @nat), @nat)
                            (@nat.succ a_3))
                          (@pprod.{1 1}
                            (@pprod.{1 1}
                              ((λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) a_3)
                              (@nat.below.{1}
                                (λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) a_3))
                            @punit.{1})
                          ((λ (a_4 : @nat)
                              (F_2 :
                                @nat.below.{1}
                                  (λ (a_6 : @nat), ∀ (a_7 : @nat), @nat) a_4)
                              (a_5 : @nat),
                            (λ (a_6 a_7 : @nat)
                                (F_3 :
                                  @nat.below.{1}
                                    (λ (a_8 : @nat), ∀ (a_9 : @nat), @nat) a_7),
                              @nat.cases_on.{1}
                                (λ (a_8 : @nat),
                                ∀ (F_4 :
                                    @nat.below.{1}
                                      (λ (a_9 : @nat), ∀ (a_10 : @nat), @nat)
                                      a_8),
                                @nat) a_7
                                (λ (F_4 :
                                    @nat.below.{1}
                                      (λ (a_8 : @nat), ∀ (a_9 : @nat), @nat)
                                      @nat.zero),
                                a_6)
                                (λ (a_1_0 : @nat)
                                  (F_4 :
                                    @nat.below.{1}
                                      (λ (a_8 : @nat), ∀ (a_9 : @nat), @nat)
                                      (@nat.succ a_1_0)),
                                @nat.succ
                                  (@pprod.fst.{1 1}
                                    ((λ (a_8 : @nat), ∀ (a_9 : @nat), @nat)
                                      a_1_0)
                                    (@nat.rec.{2} (λ (n : @nat), Type 0)
                                      @punit.{1}
                                      (λ (a_8 : @nat) (ih_1_0 : Type 0),
                                      @pprod.{1 1}
                                        (@pprod.{1 1}
                                          ((λ (a_9 : @nat),
                                            ∀ (a_10 : @nat),
                                            @nat) a_8) ih_1_0) @punit.{1})
                                      a_1_0)
                                    (@pprod.fst.{1 1}
                                      (@pprod.{1 1}
                                        ((λ (a_8 : @nat), ∀ (a_9 : @nat), @nat)
                                          a_1_0)
                                        (@nat.rec.{2} (λ (n : @nat), Type 0)
                                          @punit.{1}
                                          (λ (a_8 : @nat) (ih_1_0 : Type 0),
                                          @pprod.{1 1}
                                            (@pprod.{1 1}
                                              ((λ (a_9 : @nat),
                                                ∀ (a_10 : @nat),
                                                @nat) a_8) ih_1_0) @punit.{1})
                                          a_1_0)) @punit.{1} F_4) a_6)) F_3) a_5
                              a_4 F_2) (@nat.succ a_3)
                            (@pprod.mk.{1 1}
                              (@pprod.{1 1}
                                ((λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) a_3)
                                (@nat.below.{1}
                                  (λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) a_3))
                              @punit.{1} ih_1 @punit.star.{1}))
                          (@pprod.mk.{1 1}
                            (@pprod.{1 1}
                              ((λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) a_3)
                              (@nat.below.{1}
                                (λ (a_4 : @nat), ∀ (a_5 : @nat), @nat) a_3))
                            @punit.{1} ih_1 @punit.star.{1})) @nat.zero)
                      @punit.star.{1})) a_2))) @punit.{1} F_1))) F_0) a_0 F),0))"
err: "provingground.interface.UnParsedException: could not parse expression @nat.digit_succ"

mod: "DefMod(Definition(nat.to_digits,Vector(),∀ (base a : @nat), @list.{0} @nat,λ (base : @nat), @nat.to_digits._main base,0))"
err: "provingground.interface.UnParsedException: could not parse expression @nat.to_digits._main"

mod: "DefMod(Definition(nat.repr,Vector(),∀ (n : @nat), @string,λ (n : @nat),
@list.as_string
  (@list.reverse.{0} @char
    (@list.map.{0 0} @nat @char @nat.digit_char
      (@nat.to_digits
        (@bit0.{0} @nat @nat.has_add
          (@bit1.{0} @nat @nat.has_one @nat.has_add
            (@bit0.{0} @nat @nat.has_add (@has_one.one.{0} @nat @nat.has_one))))
        n))),0))"
err: "provingground.interface.UnParsedException: could not parse expression @nat.to_digits"

mod: "DefMod(Definition(nat.has_repr,Vector(),@has_repr.{0} @nat,@has_repr.mk.{0} @nat @nat.repr,0))"
err: "provingground.interface.UnParsedException: could not parse expression @nat.repr"

mod: "DefMod(Definition(occurrences_repr._main,Vector(),∀ (a : @occurrences), @string,λ (a : @occurrences),
@occurrences.cases_on.{1} (λ (a_0 : @occurrences), @string) a
  (@id_rhs.{1} @string
    (@string.str @string.empty
      (@char.of_nat
        (@bit0.{0} @nat @nat.has_add
          (@bit1.{0} @nat @nat.has_one @nat.has_add
            (@bit0.{0} @nat @nat.has_add
              (@bit1.{0} @nat @nat.has_one @nat.has_add
                (@bit0.{0} @nat @nat.has_add
                  (@has_one.one.{0} @nat @nat.has_one)))))))))
  (λ (a_0 : @list.{0} @nat),
  @id_rhs.{1} @string
    (@repr.{0} (@list.{0} @nat) (@list.has_repr.{0} @nat @nat.has_repr) a_0))
  (λ (a_0 : @list.{0} @nat),
  @id_rhs.{1} @string
    (@has_append.append.{0} @string @string.has_append
      (@string.str @string.empty
        (@char.of_nat
          (@bit1.{0} @nat @nat.has_one @nat.has_add
            (@bit0.{0} @nat @nat.has_add
              (@bit1.{0} @nat @nat.has_one @nat.has_add
                (@bit1.{0} @nat @nat.has_one @nat.has_add
                  (@bit0.{0} @nat @nat.has_add
                    (@has_one.one.{0} @nat @nat.has_one))))))))
      (@repr.{0} (@list.{0} @nat) (@list.has_repr.{0} @nat @nat.has_repr) a_0))),0))"
err: "provingground.interface.UnParsedException: could not parse expression @nat.has_repr"

