or.right_comm	iff	or	or	or	or	iff.trans	or	or	or	or	or	or	iff.trans	or	or	or	or	or	or	or.assoc	iff_subst	or	or	iff	or	or	or	or.comm	iff.refl	or	or	iff.symm	or	or	or	or	or.assoc
and.right_comm	iff	and	and	and	and	iff.trans	and	and	and	and	and	and	iff.trans	and	and	and	and	and	and	and.assoc	iff_subst	and	and	iff	and	and	and	and.comm	iff.refl	and	and	iff.symm	and	and	and	and	and.assoc
or_not_self_iff	iff	or	not	true	iff.intro	or	not	true	trivial	decidable.em
not_or_self_iff	iff	or	not	true	iff.intro	or	not	true	trivial	or.swap	not	decidable.em
and_not_self_iff	iff	and	not	false	iff.intro	and	not	false	and.right	false	and.left	not	false.elim	and	not
not_and_self_iff	iff	and	not	false	iff.intro	and	not	false	and.elim	not	false	absurd	false	false.elim	and	not
not_not_iff	iff	not	not	iff.intro	false	decidable.by_contradiction	not_not_intro
not_not_elim	decidable.by_contradiction
not_or_iff_not_and_not	iff	not	or	and	not	not	or.imp_distrib	false
not_and_iff_not_or_not	iff	not	and	or	not	not	iff.intro	not	and	or	not	not	decidable.by_cases	or	not	not	or.inr	not	not	not.mto	and	and.intro	or.inl	not	not	or.rec	not	not	not	and	not.mto	and	and.left	not.mto	and	and.right
or_iff_not_and_not	iff	or	not	and	not	not	eq.rec	not	or	iff	or	not	eq.rec	or	iff	or	iff.refl	or	not	not	or	eq.symm	not	not	or	or	propext	not	not	or	or	not_not_iff	or	decidable_or	and	not	not	propext	not	or	and	not	not	not_or_iff_not_and_not
and_iff_not_or_not	iff	and	not	or	not	not	eq.rec	not	and	iff	and	not	eq.rec	and	iff	and	iff.refl	and	not	not	and	eq.symm	not	not	and	and	propext	not	not	and	and	not_not_iff	and	decidable_and	or	not	not	propext	not	and	or	not	not	not_and_iff_not_or_not
imp_iff_not_or	iff	or	not	iff.intro	or	not	decidable.by_cases	or	not	or.inr	not	or.inl	not	or.rec	not	not.elim	imp.intro
not_implies_iff_and_not	iff	not	and	not	iff.trans	not	and	not	not	not	and	not	iff.trans	not	not	or	not	and	not	not	not	iff_subst	or	not	iff	not	not	imp_iff_not_or	iff.refl	not	not_or_iff_not_and_not	not	iff_subst	not	not	iff	and	not	not	not	and	not	not_not_iff	iff.refl	and	not	not	not
peirce	decidable.by_cases	imp.intro	imp.syl	not	imp.mp	not.elim
forall_not_of_not_exists	not	decidable.by_cases	not	absurd	Exists	not	exists.intro	imp.id	not
forall_of_not_exists_not	imp.syl	not	not	not	Exists	not	forall_imp_forall	not	not	not_not_elim	forall_not_of_not_exists	not	decidable_not
exists_not_of_not_forall	Exists	not	decidable.by_contradiction	Exists	not	absurd	false	not_not_elim	forall_not_of_not_exists	not	decidable_not
exists_of_not_forall_not	Exists	decidable.by_contradiction	Exists	imp.syl	not	false	not	Exists	forall_not_of_not_exists
