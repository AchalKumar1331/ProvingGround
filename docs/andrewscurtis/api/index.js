Index.PACKAGES = {"reactivemongo.bson" : [], "provingground" : [], "ammonite.ops" : [], "provingground.andrewscurtis" : [{"name" : "provingground.andrewscurtis.ACData", "shortDescription" : "", "object" : "provingground\/andrewscurtis\/ACData$.html", "members_object" : [{"label" : "succFile", "tail" : "(source: Path): Unit", "member" : "provingground.andrewscurtis.ACData.succFile", "link" : "provingground\/andrewscurtis\/ACData$.html#succFile(source:ammonite.ops.Path):Unit", "kind" : "def"}, {"label" : "lastLine", "tail" : "(source: Path, target: Path): Unit", "member" : "provingground.andrewscurtis.ACData.lastLine", "link" : "provingground\/andrewscurtis\/ACData$.html#lastLine(source:ammonite.ops.Path,target:ammonite.ops.Path):Unit", "kind" : "def"}, {"label" : "resetFile", "tail" : "(file: Path): Unit", "member" : "provingground.andrewscurtis.ACData.resetFile", "link" : "provingground\/andrewscurtis\/ACData$.html#resetFile(file:ammonite.ops.Path):Unit", "kind" : "def"}, {"label" : "saveEntropy", "tail" : "(file: String, dir: String, ent: List[Weighted[String]]): Unit", "member" : "provingground.andrewscurtis.ACData.saveEntropy", "link" : "provingground\/andrewscurtis\/ACData$.html#saveEntropy(file:String,dir:String,ent:List[provingground.Weighted[String]]):Unit", "kind" : "def"}, {"label" : "saveFD", "tail" : "(file: String, dir: String, fd: FiniteDistribution[T]): Unit", "member" : "provingground.andrewscurtis.ACData.saveFD", "link" : "provingground\/andrewscurtis\/ACData$.html#saveFD[T](file:String,dir:String,fd:provingground.FiniteDistribution[T]):Unit", "kind" : "def"}, {"label" : "loadData", "tail" : "(dir: String): ACData", "member" : "provingground.andrewscurtis.ACData.loadData", "link" : "provingground\/andrewscurtis\/ACData$.html#loadData(dir:String):provingground.andrewscurtis.ACData", "kind" : "def"}, {"label" : "loadAll", "tail" : "(dir: String): Map[String, Stream[(FiniteDistribution[AtomicMove], FiniteDistribution[Moves])]]", "member" : "provingground.andrewscurtis.ACData.loadAll", "link" : "provingground\/andrewscurtis\/ACData$.html#loadAll(dir:String):scala.collection.immutable.Map[String,scala.collection.immutable.Stream[(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves])]]", "kind" : "def"}, {"label" : "loadState", "tail" : "(file: Path): (FiniteDistribution[AtomicMove], FiniteDistribution[Moves])", "member" : "provingground.andrewscurtis.ACData.loadState", "link" : "provingground\/andrewscurtis\/ACData$.html#loadState(file:ammonite.ops.Path):(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves])", "kind" : "def"}, {"label" : "loadAllFinal", "tail" : "(name: String, dir: String): ACStateData", "member" : "provingground.andrewscurtis.ACData.loadAllFinal", "link" : "provingground\/andrewscurtis\/ACData$.html#loadAllFinal(name:String,dir:String):provingground.andrewscurtis.ACStateData", "kind" : "def"}, {"label" : "loadFinal", "tail" : "(name: String, dir: String): (FiniteDistribution[AtomicMove], FiniteDistribution[Moves])", "member" : "provingground.andrewscurtis.ACData.loadFinal", "link" : "provingground\/andrewscurtis\/ACData$.html#loadFinal(name:String,dir:String):(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves])", "kind" : "def"}, {"label" : "load", "tail" : "(name: String, dir: String): Stream[(FiniteDistribution[AtomicMove], FiniteDistribution[Moves])]", "member" : "provingground.andrewscurtis.ACData.load", "link" : "provingground\/andrewscurtis\/ACData$.html#load(name:String,dir:String):scala.collection.immutable.Stream[(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves])]", "kind" : "def"}, {"label" : "fileSave", "tail" : "(name: String, dir: String, rank: Int)(fdM: FiniteDistribution[AtomicMove], fdV: FiniteDistribution[Moves]): Future[Unit]", "member" : "provingground.andrewscurtis.ACData.fileSave", "link" : "provingground\/andrewscurtis\/ACData$.html#fileSave(name:String,dir:String,rank:Int)(fdM:provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],fdV:provingground.FiniteDistribution[provingground.andrewscurtis.Moves]):scala.concurrent.Future[Unit]", "kind" : "def"}, {"label" : "wd", "tail" : ": ThisType", "member" : "provingground.andrewscurtis.ACData.wd", "link" : "provingground\/andrewscurtis\/ACData$.html#wd:ammonite.ops.pwd.ThisType", "kind" : "val"}, {"label" : "unpickle", "tail" : "(str: String): (FiniteDistribution[AtomicMove], FiniteDistribution[Moves])", "member" : "provingground.andrewscurtis.ACData.unpickle", "link" : "provingground\/andrewscurtis\/ACData$.html#unpickle(str:String):(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves])", "kind" : "def"}, {"label" : "pickle", "tail" : "(state: (FiniteDistribution[AtomicMove], FiniteDistribution[Moves])): String", "member" : "provingground.andrewscurtis.ACData.pickle", "link" : "provingground\/andrewscurtis\/ACData$.html#pickle(state:(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves])):String", "kind" : "def"}, {"label" : "thmFiles", "tail" : "(dir: String, s: (String) ⇒ Boolean): Seq[Path]", "member" : "provingground.andrewscurtis.ACData.thmFiles", "link" : "provingground\/andrewscurtis\/ACData$.html#thmFiles(dir:String,s:String=>Boolean):Seq[ammonite.ops.Path]", "kind" : "def"}, {"label" : "thmFileCSV", "tail" : "(dir: String, file: String, rank: Int, lines: Option[Int]): Unit", "member" : "provingground.andrewscurtis.ACData.thmFileCSV", "link" : "provingground\/andrewscurtis\/ACData$.html#thmFileCSV(dir:String,file:String,rank:Int,lines:Option[Int]):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/ACData$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/ACData$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/ACData$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/ACData$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/ACData$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/ACData$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/ACData$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACData$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACData$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACData$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/ACData$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/ACData$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/andrewscurtis\/ACData$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/ACData$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/ACData$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/ACData$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/ACData$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/ACData$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/ACData$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/andrewscurtis\/ACData.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/andrewscurtis\/ACData.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ACData) ⇒ Boolean, msg: ⇒ Any): ACData", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/ACData.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ACData) ⇒ Boolean): ACData", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/ACData.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): ACData", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/ACData.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ACData", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/ACData.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ACData, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/andrewscurtis\/ACData.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ACData, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/andrewscurtis\/ACData.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "thmCSV", "tail" : "(name: String, rank: Int): Unit", "member" : "provingground.andrewscurtis.ACData.thmCSV", "link" : "provingground\/andrewscurtis\/ACData.html#thmCSV(name:String,rank:Int):Unit", "kind" : "def"}, {"label" : "resetFiles", "tail" : "(): Iterable[Unit]", "member" : "provingground.andrewscurtis.ACData.resetFiles", "link" : "provingground\/andrewscurtis\/ACData.html#resetFiles():scala.collection.immutable.Iterable[Unit]", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): ACData", "member" : "provingground.andrewscurtis.ACData.take", "link" : "provingground\/andrewscurtis\/ACData.html#take(n:Int):provingground.andrewscurtis.ACData", "kind" : "def"}, {"label" : "last", "tail" : "(): ACStateData", "member" : "provingground.andrewscurtis.ACData.last", "link" : "provingground\/andrewscurtis\/ACData.html#last:provingground.andrewscurtis.ACStateData", "kind" : "def"}, {"member" : "provingground.andrewscurtis.ACData#<init>", "error" : "unsupported entity"}, {"label" : "dir", "tail" : ": String", "member" : "provingground.andrewscurtis.ACData.dir", "link" : "provingground\/andrewscurtis\/ACData.html#dir:String", "kind" : "val"}, {"label" : "paths", "tail" : ": Map[String, Stream[(FiniteDistribution[AtomicMove], FiniteDistribution[Moves])]]", "member" : "provingground.andrewscurtis.ACData.paths", "link" : "provingground\/andrewscurtis\/ACData.html#paths:Map[String,Stream[(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves])]]", "kind" : "val"}, {"label" : "states", "tail" : ": Map[String, (FiniteDistribution[AtomicMove], FiniteDistribution[Moves])]", "member" : "provingground.andrewscurtis.ACresults.states", "link" : "provingground\/andrewscurtis\/ACData.html#states:Map[String,(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves])]", "kind" : "lazy val"}, {"label" : "sizes", "tail" : "(): Map[String, Int]", "member" : "provingground.andrewscurtis.ACresults.sizes", "link" : "provingground\/andrewscurtis\/ACData.html#sizes:scala.collection.immutable.Map[String,Int]", "kind" : "def"}, {"label" : "probVec", "tail" : "(name: String, rank: Int)(p: Presentation): Stream[Double]", "member" : "provingground.andrewscurtis.ACresults.probVec", "link" : "provingground\/andrewscurtis\/ACData.html#probVec(name:String,rank:Int)(p:provingground.andrewscurtis.FreeGroups.Presentation):scala.collection.immutable.Stream[Double]", "kind" : "def"}, {"label" : "thmSupp", "tail" : "(name: String, rank: Int): Vector[Presentation]", "member" : "provingground.andrewscurtis.ACresults.thmSupp", "link" : "provingground\/andrewscurtis\/ACData.html#thmSupp(name:String,rank:Int):Vector[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "thmVec", "tail" : "(name: String, rank: Int): Stream[FiniteDistribution[Presentation]]", "member" : "provingground.andrewscurtis.ACresults.thmVec", "link" : "provingground\/andrewscurtis\/ACData.html#thmVec(name:String,rank:Int):scala.collection.immutable.Stream[provingground.FiniteDistribution[provingground.andrewscurtis.FreeGroups.Presentation]]", "kind" : "def"}, {"label" : "names", "tail" : "(): List[String]", "member" : "provingground.andrewscurtis.ACresults.names", "link" : "provingground\/andrewscurtis\/ACData.html#names:List[String]", "kind" : "def"}, {"label" : "thms", "tail" : "(rank: Int): FiniteDistribution[Presentation]", "member" : "provingground.andrewscurtis.ACStates.thms", "link" : "provingground\/andrewscurtis\/ACData.html#thms(rank:Int):provingground.FiniteDistribution[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "moveWeights", "tail" : "(): FiniteDistribution[AtomicMove]", "member" : "provingground.andrewscurtis.ACStates.moveWeights", "link" : "provingground\/andrewscurtis\/ACData.html#moveWeights:provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove]", "kind" : "def"}, {"label" : "proofs", "tail" : "(): FiniteDistribution[Moves]", "member" : "provingground.andrewscurtis.ACStates.proofs", "link" : "provingground\/andrewscurtis\/ACData.html#proofs:provingground.FiniteDistribution[provingground.andrewscurtis.Moves]", "kind" : "def"}, {"label" : "blended", "tail" : "(): (FiniteDistribution[AtomicMove], FiniteDistribution[Moves])", "member" : "provingground.andrewscurtis.ACStates.blended", "link" : "provingground\/andrewscurtis\/ACData.html#blended:(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves])", "kind" : "def"}, {"label" : "combined", "tail" : "(): (FiniteDistribution[AtomicMove], FiniteDistribution[Moves])", "member" : "provingground.andrewscurtis.ACStates.combined", "link" : "provingground\/andrewscurtis\/ACData.html#combined:(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves])", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/ACData.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/ACData.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/ACData.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/ACData.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/ACData.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/ACData.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/ACData.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACData.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACData.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACData.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/ACData.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/ACData.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/ACData.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/ACData.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/ACData.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/ACData.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/andrewscurtis\/ACData.html", "kind" : "case class"}, {"name" : "provingground.andrewscurtis.ACevolution", "shortDescription" : "", "object" : "provingground\/andrewscurtis\/ACevolution$.html", "members_object" : [{"label" : "pickleInit", "tail" : "(rank: Int): String", "member" : "provingground.andrewscurtis.ACevolution.pickleInit", "link" : "provingground\/andrewscurtis\/ACevolution$.html#pickleInit(rank:Int):String", "kind" : "def"}, {"label" : "pickleTriple", "tail" : "(mv: (FiniteDistribution[M], FiniteDistribution[V]), r: Int): String", "member" : "provingground.andrewscurtis.ACevolution.pickleTriple", "link" : "provingground\/andrewscurtis\/ACevolution$.html#pickleTriple(mv:(provingground.FiniteDistribution[provingground.andrewscurtis.ACevolution.M],provingground.FiniteDistribution[provingground.andrewscurtis.ACevolution.V]),r:Int):String", "kind" : "def"}, {"label" : "viewAll", "tail" : "(mv: (FiniteDistribution[M], FiniteDistribution[V]), r: Int): Unit", "member" : "provingground.andrewscurtis.ACevolution.viewAll", "link" : "provingground\/andrewscurtis\/ACevolution$.html#viewAll(mv:(provingground.FiniteDistribution[provingground.andrewscurtis.ACevolution.M],provingground.FiniteDistribution[provingground.andrewscurtis.ACevolution.V]),r:Int):Unit", "kind" : "def"}, {"label" : "presDist", "tail" : "(r: Int)(mv: (FiniteDistribution[M], FiniteDistribution[V])): FiniteDistribution[Presentation]", "member" : "provingground.andrewscurtis.ACevolution.presDist", "link" : "provingground\/andrewscurtis\/ACevolution$.html#presDist(r:Int)(mv:(provingground.FiniteDistribution[provingground.andrewscurtis.ACevolution.M],provingground.FiniteDistribution[provingground.andrewscurtis.ACevolution.V])):provingground.FiniteDistribution[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "step", "tail" : "(rank: Int): DiffbleFunction[(FiniteDistribution[DiffStructure.M], FiniteDistribution[DiffStructure.V]), (FiniteDistribution[DiffStructure.M], FiniteDistribution[DiffStructure.V])]", "member" : "provingground.andrewscurtis.ACevolution.step", "link" : "provingground\/andrewscurtis\/ACevolution$.html#step(rank:Int):provingground.DiffbleFunction[(provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.M],provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.V]),(provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.M],provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.V])]", "kind" : "def"}, {"label" : "evolve", "tail" : "(rank: Int, steps: Int, initV: FiniteDistribution[V]): (FiniteDistribution[DiffStructure.M], FiniteDistribution[DiffStructure.V])", "member" : "provingground.andrewscurtis.ACevolution.evolve", "link" : "provingground\/andrewscurtis\/ACevolution$.html#evolve(rank:Int,steps:Int,initV:provingground.FiniteDistribution[provingground.andrewscurtis.ACevolution.V]):(provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.M],provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.V])", "kind" : "def"}, {"label" : "trivMoveSeq", "tail" : "(): FiniteDistribution[Moves]", "member" : "provingground.andrewscurtis.ACevolution.trivMoveSeq", "link" : "provingground\/andrewscurtis\/ACevolution$.html#trivMoveSeq:provingground.FiniteDistribution[provingground.andrewscurtis.Moves]", "kind" : "def"}, {"label" : "foldPair", "tail" : "(rank: Int): DiffbleFunction[(FiniteDistribution[M], FiniteDistribution[V]), FiniteDistribution[P]]", "member" : "provingground.andrewscurtis.ACevolution.foldPair", "link" : "provingground\/andrewscurtis\/ACevolution$.html#foldPair(rank:Int):provingground.DiffbleFunction[(provingground.FiniteDistribution[provingground.andrewscurtis.ACevolution.M],provingground.FiniteDistribution[provingground.andrewscurtis.ACevolution.V]),provingground.FiniteDistribution[provingground.andrewscurtis.ACevolution.P]]", "kind" : "def"}, {"label" : "P", "tail" : "", "member" : "provingground.andrewscurtis.ACevolution.P", "link" : "provingground\/andrewscurtis\/ACevolution$.html#P=provingground.andrewscurtis.FreeGroups.Presentation", "kind" : "type"}, {"label" : "V", "tail" : "", "member" : "provingground.andrewscurtis.ACevolution.V", "link" : "provingground\/andrewscurtis\/ACevolution$.html#V=provingground.andrewscurtis.Moves", "kind" : "type"}, {"label" : "M", "tail" : "", "member" : "provingground.andrewscurtis.ACevolution.M", "link" : "provingground\/andrewscurtis\/ACevolution$.html#M=provingground.andrewscurtis.AtomicMove", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/ACevolution$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/ACevolution$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/ACevolution$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/ACevolution$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/ACevolution$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/ACevolution$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/ACevolution$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACevolution$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACevolution$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACevolution$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/ACevolution$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/ACevolution$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/andrewscurtis\/ACevolution$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/ACevolution$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/ACevolution$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/ACevolution$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/ACevolution$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/ACevolution$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/ACevolution$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.andrewscurtis.ACFileSaver", "shortDescription" : "", "object" : "provingground\/andrewscurtis\/ACFileSaver$.html", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ACFileSaver) ⇒ Boolean, msg: ⇒ Any): ACFileSaver", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ACFileSaver) ⇒ Boolean): ACFileSaver", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): ACFileSaver", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ACFileSaver", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ACFileSaver, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ACFileSaver, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "save", "tail" : "(): (Snap) ⇒ Unit", "member" : "provingground.andrewscurtis.ACFileSaver.save", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#save:provingground.andrewscurtis.ACElem.Snap=>Unit", "kind" : "def"}, {"member" : "provingground.andrewscurtis.ACFileSaver#<init>", "error" : "unsupported entity"}, {"label" : "receive", "tail" : "(): PartialFunction[Any, Unit]", "member" : "provingground.FDSrc.receive", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#receive:PartialFunction[Any,Unit]", "kind" : "def"}, {"label" : "unhandled", "tail" : "(message: Any): Unit", "member" : "akka.actor.Actor.unhandled", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#unhandled(message:Any):Unit", "kind" : "def"}, {"label" : "postRestart", "tail" : "(reason: Throwable): Unit", "member" : "akka.actor.Actor.postRestart", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#postRestart(reason:Throwable):Unit", "kind" : "def"}, {"label" : "preRestart", "tail" : "(reason: Throwable, message: Option[Any]): Unit", "member" : "akka.actor.Actor.preRestart", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#preRestart(reason:Throwable,message:Option[Any]):Unit", "kind" : "def"}, {"label" : "postStop", "tail" : "(): Unit", "member" : "akka.actor.Actor.postStop", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#postStop():Unit", "kind" : "def"}, {"label" : "preStart", "tail" : "(): Unit", "member" : "akka.actor.Actor.preStart", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#preStart():Unit", "kind" : "def"}, {"label" : "supervisorStrategy", "tail" : "(): SupervisorStrategy", "member" : "akka.actor.Actor.supervisorStrategy", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#supervisorStrategy:akka.actor.SupervisorStrategy", "kind" : "def"}, {"label" : "aroundPostRestart", "tail" : "(reason: Throwable): Unit", "member" : "akka.actor.Actor.aroundPostRestart", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#aroundPostRestart(reason:Throwable):Unit", "kind" : "def"}, {"label" : "aroundPreRestart", "tail" : "(reason: Throwable, message: Option[Any]): Unit", "member" : "akka.actor.Actor.aroundPreRestart", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#aroundPreRestart(reason:Throwable,message:Option[Any]):Unit", "kind" : "def"}, {"label" : "aroundPostStop", "tail" : "(): Unit", "member" : "akka.actor.Actor.aroundPostStop", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#aroundPostStop():Unit", "kind" : "def"}, {"label" : "aroundPreStart", "tail" : "(): Unit", "member" : "akka.actor.Actor.aroundPreStart", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#aroundPreStart():Unit", "kind" : "def"}, {"label" : "aroundReceive", "tail" : "(receive: akka.actor.Actor.Receive, msg: Any): Unit", "member" : "akka.actor.Actor.aroundReceive", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#aroundReceive(receive:akka.actor.Actor.Receive,msg:Any):Unit", "kind" : "def"}, {"label" : "sender", "tail" : "(): ActorRef", "member" : "akka.actor.Actor.sender", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#sender():akka.actor.ActorRef", "kind" : "final def"}, {"label" : "self", "tail" : ": ActorRef", "member" : "akka.actor.Actor.self", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#self:akka.actor.ActorRef", "kind" : "implicit final val"}, {"label" : "context", "tail" : ": ActorContext", "member" : "akka.actor.Actor.context", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#context:akka.actor.ActorContext", "kind" : "implicit val"}, {"label" : "Receive", "tail" : "", "member" : "akka.actor.Actor.Receive", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#Receive=akka.actor.Actor.Receive", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/ACFileSaver.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "actorRef", "tail" : "(dir: String, rank: Int): ActorRef", "member" : "provingground.andrewscurtis.ACFileSaver.actorRef", "link" : "provingground\/andrewscurtis\/ACFileSaver$.html#actorRef(dir:String,rank:Int):akka.actor.ActorRef", "kind" : "def"}, {"label" : "props", "tail" : "(dir: String, rank: Int): Props", "member" : "provingground.andrewscurtis.ACFileSaver.props", "link" : "provingground\/andrewscurtis\/ACFileSaver$.html#props(dir:String,rank:Int):akka.actor.Props", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/ACFileSaver$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/ACFileSaver$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/ACFileSaver$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/ACFileSaver$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/ACFileSaver$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/ACFileSaver$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/ACFileSaver$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACFileSaver$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACFileSaver$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACFileSaver$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/ACFileSaver$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/ACFileSaver$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/andrewscurtis\/ACFileSaver$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/ACFileSaver$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/ACFileSaver$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/ACFileSaver$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/ACFileSaver$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/ACFileSaver$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/ACFileSaver$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/andrewscurtis\/ACFileSaver.html", "kind" : "class"}, {"name" : "provingground.andrewscurtis.ACFlow", "shortDescription" : "", "object" : "provingground\/andrewscurtis\/ACFlow$.html", "members_object" : [{"label" : "moveWeightsFlow", "tail" : "(): Repr[ACMoveWeights]", "member" : "provingground.andrewscurtis.ACFlow.moveWeightsFlow", "link" : "provingground\/andrewscurtis\/ACFlow$.html#moveWeightsFlow:provingground.andrewscurtis.ACFlow.fl.Repr[provingground.andrewscurtis.ACMoveWeights]", "kind" : "def"}, {"label" : "fdMFlow", "tail" : "(): Repr[(String, FiniteDistribution[AtomicMove])]", "member" : "provingground.andrewscurtis.ACFlow.fdMFlow", "link" : "provingground\/andrewscurtis\/ACFlow$.html#fdMFlow:provingground.andrewscurtis.ACFlow.fl.Repr[(String,provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove])]", "kind" : "def"}, {"label" : "elemsFlow", "tail" : "(): Repr[ACElem]", "member" : "provingground.andrewscurtis.ACFlow.elemsFlow", "link" : "provingground\/andrewscurtis\/ACFlow$.html#elemsFlow:provingground.andrewscurtis.ACFlow.fl.Repr[provingground.andrewscurtis.ACElem]", "kind" : "def"}, {"label" : "thmsFlow", "tail" : ": Repr[ACThm]", "member" : "provingground.andrewscurtis.ACFlow.thmsFlow", "link" : "provingground\/andrewscurtis\/ACFlow$.html#thmsFlow:provingground.andrewscurtis.ACFlow.fl.Repr[provingground.andrewscurtis.ACThm]", "kind" : "val"}, {"label" : "loopsFlow", "tail" : ": Repr[(String, Int)]", "member" : "provingground.andrewscurtis.ACFlow.loopsFlow", "link" : "provingground\/andrewscurtis\/ACFlow$.html#loopsFlow:provingground.andrewscurtis.ACFlow.fl.Repr[(String,Int)]", "kind" : "val"}, {"label" : "src", "tail" : ": Source[SnapShot[(FiniteDistribution[AtomicMove], FiniteDistribution[Moves]), Param], ActorRef]", "member" : "provingground.andrewscurtis.ACFlow.src", "link" : "provingground\/andrewscurtis\/ACFlow$.html#src:akka.stream.scaladsl.Source[provingground.SnapShot[(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves]),provingground.andrewscurtis.Param],akka.actor.ActorRef]", "kind" : "val"}, {"label" : "fl", "tail" : ": Flow[Snap, Snap, NotUsed]", "member" : "provingground.andrewscurtis.ACFlow.fl", "link" : "provingground\/andrewscurtis\/ACFlow$.html#fl:akka.stream.scaladsl.Flow[provingground.andrewscurtis.ACElem.Snap,provingground.andrewscurtis.ACElem.Snap,akka.NotUsed]", "kind" : "val"}, {"label" : "mat", "tail" : ": ActorMaterializer", "member" : "provingground.andrewscurtis.ACFlow.mat", "link" : "provingground\/andrewscurtis\/ACFlow$.html#mat:akka.stream.ActorMaterializer", "kind" : "implicit val"}, {"label" : "system", "tail" : ": ActorSystem", "member" : "provingground.andrewscurtis.ACFlow.system", "link" : "provingground\/andrewscurtis\/ACFlow$.html#system:akka.actor.ActorSystem", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/ACFlow$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/ACFlow$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/ACFlow$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/ACFlow$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/ACFlow$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/ACFlow$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/ACFlow$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACFlow$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACFlow$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACFlow$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/ACFlow$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/ACFlow$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/andrewscurtis\/ACFlow$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/ACFlow$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/ACFlow$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/ACFlow$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/ACFlow$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/ACFlow$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/ACFlow$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.andrewscurtis.ACFlowSaver", "shortDescription" : "", "object" : "provingground\/andrewscurtis\/ACFlowSaver$.html", "members_object" : [{"label" : "snapSource", "tail" : "(date: String): Source[Snap, NotUsed]", "member" : "provingground.andrewscurtis.ACFlowSaver.snapSource", "link" : "provingground\/andrewscurtis\/ACFlowSaver$.html#snapSource(date:String):akka.stream.scaladsl.Source[provingground.andrewscurtis.ACElem.Snap,akka.NotUsed]", "kind" : "def"}, {"label" : "snapStream", "tail" : "(date: String): Stream[Snap]", "member" : "provingground.andrewscurtis.ACFlowSaver.snapStream", "link" : "provingground\/andrewscurtis\/ACFlowSaver$.html#snapStream(date:String):scala.collection.immutable.Stream[provingground.andrewscurtis.ACElem.Snap]", "kind" : "def"}, {"label" : "snapSource", "tail" : "(date: String, batch: String): Source[String, NotUsed]", "member" : "provingground.andrewscurtis.ACFlowSaver.snapSource", "link" : "provingground\/andrewscurtis\/ACFlowSaver$.html#snapSource(date:String,batch:String):akka.stream.scaladsl.Source[String,akka.NotUsed]", "kind" : "def"}, {"label" : "snapSink", "tail" : ": Sink[Snap, Future[Done]]", "member" : "provingground.andrewscurtis.ACFlowSaver.snapSink", "link" : "provingground\/andrewscurtis\/ACFlowSaver$.html#snapSink:akka.stream.scaladsl.Sink[provingground.andrewscurtis.ACElem.Snap,scala.concurrent.Future[akka.Done]]", "kind" : "val"}, {"label" : "snapSave", "tail" : "(): (Snap) ⇒ Unit", "member" : "provingground.andrewscurtis.ACFlowSaver.snapSave", "link" : "provingground\/andrewscurtis\/ACFlowSaver$.html#snapSave:provingground.andrewscurtis.ACElem.Snap=>Unit", "kind" : "def"}, {"label" : "snapFile", "tail" : "(batch: Int): Path", "member" : "provingground.andrewscurtis.ACFlowSaver.snapFile", "link" : "provingground\/andrewscurtis\/ACFlowSaver$.html#snapFile(batch:Int):ammonite.ops.Path", "kind" : "def"}, {"label" : "snapd", "tail" : ": ThisType", "member" : "provingground.andrewscurtis.ACFlowSaver.snapd", "link" : "provingground\/andrewscurtis\/ACFlowSaver$.html#snapd:provingground.andrewscurtis.ACData.wd.ThisType", "kind" : "val"}, {"label" : "actorRef", "tail" : "(dir: String, rank: Int): ActorRef", "member" : "provingground.andrewscurtis.ACFlowSaver.actorRef", "link" : "provingground\/andrewscurtis\/ACFlowSaver$.html#actorRef(dir:String,rank:Int):akka.actor.ActorRef", "kind" : "def"}, {"label" : "fileSaver", "tail" : "(dir: String, rank: Int): Sink[Snap, Future[Done]]", "member" : "provingground.andrewscurtis.ACFlowSaver.fileSaver", "link" : "provingground\/andrewscurtis\/ACFlowSaver$.html#fileSaver(dir:String,rank:Int):akka.stream.scaladsl.Sink[provingground.andrewscurtis.ACElem.Snap,scala.concurrent.Future[akka.Done]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/ACFlowSaver$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/ACFlowSaver$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/ACFlowSaver$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/ACFlowSaver$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/ACFlowSaver$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/ACFlowSaver$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/ACFlowSaver$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACFlowSaver$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACFlowSaver$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACFlowSaver$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/ACFlowSaver$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/ACFlowSaver$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/andrewscurtis\/ACFlowSaver$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/ACFlowSaver$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/ACFlowSaver$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/ACFlowSaver$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/ACFlowSaver$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/ACFlowSaver$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/ACFlowSaver$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.andrewscurtis.ACStateData", "shortDescription" : "", "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/andrewscurtis\/ACStateData.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/andrewscurtis\/ACStateData.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ACStateData) ⇒ Boolean, msg: ⇒ Any): ACStateData", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/ACStateData.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ACStateData) ⇒ Boolean): ACStateData", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/ACStateData.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): ACStateData", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/ACStateData.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ACStateData", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/ACStateData.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ACStateData, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/andrewscurtis\/ACStateData.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ACStateData, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/andrewscurtis\/ACStateData.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "spawns", "tail" : "(name: String, mult: Int, p: Param): IndexedSeq[Unit]", "member" : "provingground.andrewscurtis.ACStateData.spawns", "link" : "provingground\/andrewscurtis\/ACStateData.html#spawns(name:String,mult:Int,p:provingground.andrewscurtis.Param):scala.collection.immutable.IndexedSeq[Unit]", "kind" : "def"}, {"label" : "spawn", "tail" : "(name: String, p: Param): Unit", "member" : "provingground.andrewscurtis.ACStateData.spawn", "link" : "provingground\/andrewscurtis\/ACStateData.html#spawn(name:String,p:provingground.andrewscurtis.Param):Unit", "kind" : "def"}, {"label" : "reviveAll", "tail" : "(p: Param)(hub: ActorRef): List[Nothing]", "member" : "provingground.andrewscurtis.ACStateData.reviveAll", "link" : "provingground\/andrewscurtis\/ACStateData.html#reviveAll(p:provingground.andrewscurtis.Param)(implicithub:akka.actor.ActorRef):List[Nothing]", "kind" : "def"}, {"label" : "revive", "tail" : "(name: String, p: Param)(hub: ActorRef): Nothing", "member" : "provingground.andrewscurtis.ACStateData.revive", "link" : "provingground\/andrewscurtis\/ACStateData.html#revive(name:String,p:provingground.andrewscurtis.Param)(implicithub:akka.actor.ActorRef):Nothing", "kind" : "def"}, {"member" : "provingground.andrewscurtis.ACStateData#<init>", "error" : "unsupported entity"}, {"label" : "dir", "tail" : ": String", "member" : "provingground.andrewscurtis.ACStateData.dir", "link" : "provingground\/andrewscurtis\/ACStateData.html#dir:String", "kind" : "val"}, {"label" : "states", "tail" : ": Map[String, (FiniteDistribution[AtomicMove], FiniteDistribution[Moves])]", "member" : "provingground.andrewscurtis.ACStateData.states", "link" : "provingground\/andrewscurtis\/ACStateData.html#states:Map[String,(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves])]", "kind" : "val"}, {"label" : "thms", "tail" : "(rank: Int): FiniteDistribution[Presentation]", "member" : "provingground.andrewscurtis.ACStates.thms", "link" : "provingground\/andrewscurtis\/ACStateData.html#thms(rank:Int):provingground.FiniteDistribution[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "moveWeights", "tail" : "(): FiniteDistribution[AtomicMove]", "member" : "provingground.andrewscurtis.ACStates.moveWeights", "link" : "provingground\/andrewscurtis\/ACStateData.html#moveWeights:provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove]", "kind" : "def"}, {"label" : "proofs", "tail" : "(): FiniteDistribution[Moves]", "member" : "provingground.andrewscurtis.ACStates.proofs", "link" : "provingground\/andrewscurtis\/ACStateData.html#proofs:provingground.FiniteDistribution[provingground.andrewscurtis.Moves]", "kind" : "def"}, {"label" : "blended", "tail" : "(): (FiniteDistribution[AtomicMove], FiniteDistribution[Moves])", "member" : "provingground.andrewscurtis.ACStates.blended", "link" : "provingground\/andrewscurtis\/ACStateData.html#blended:(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves])", "kind" : "def"}, {"label" : "combined", "tail" : "(): (FiniteDistribution[AtomicMove], FiniteDistribution[Moves])", "member" : "provingground.andrewscurtis.ACStates.combined", "link" : "provingground\/andrewscurtis\/ACStateData.html#combined:(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves])", "kind" : "def"}, {"label" : "names", "tail" : "(): List[String]", "member" : "provingground.andrewscurtis.ACStates.names", "link" : "provingground\/andrewscurtis\/ACStateData.html#names:List[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/ACStateData.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/ACStateData.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/ACStateData.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/ACStateData.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/ACStateData.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/ACStateData.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/ACStateData.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACStateData.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACStateData.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACStateData.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/ACStateData.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/ACStateData.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/ACStateData.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/ACStateData.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/ACStateData.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/ACStateData.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/andrewscurtis\/ACStateData.html", "kind" : "case class"}, {"name" : "provingground.andrewscurtis.AndrewsCurtis", "shortDescription" : "", "object" : "provingground\/andrewscurtis\/AndrewsCurtis$.html", "members_object" : [{"label" : "ACFlowData", "tail" : "", "member" : "provingground.andrewscurtis.AndrewsCurtis.ACFlowData", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#ACFlowDataextendsProductwithSerializable", "kind" : "case class"}, {"label" : "ACparameters", "tail" : "", "member" : "provingground.andrewscurtis.AndrewsCurtis.ACparameters", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#ACparametersextendsProductwithSerializable", "kind" : "case class"}, {"label" : "initDstbn", "tail" : "(pthCntn: Double): DynDst[Presentation, Presentation]", "member" : "provingground.andrewscurtis.AndrewsCurtis.initDstbn", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#initDstbn(pthCntn:Double):provingground.andrewscurtis.AndrewsCurtis.DynDst[provingground.andrewscurtis.FreeGroups.Presentation,provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "bestChain", "tail" : "(pres: Vert, chains: Set[Chain], d: DynDstbn): Chain", "member" : "provingground.andrewscurtis.AndrewsCurtis.bestChain", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#bestChain(pres:provingground.andrewscurtis.AndrewsCurtis.Vert,chains:Set[provingground.andrewscurtis.AndrewsCurtis.Chain],d:provingground.andrewscurtis.AndrewsCurtis.DynDstbn):provingground.andrewscurtis.AndrewsCurtis.Chain", "kind" : "def"}, {"label" : "tuneFlowCutoff", "tail" : "(d: DynDstbn, bgwt: (Vert) ⇒ Double, epsilon: Double, cutoff: Double): DynDst[Presentation, ACMoveType]", "member" : "provingground.andrewscurtis.AndrewsCurtis.tuneFlowCutoff", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#tuneFlowCutoff(d:provingground.andrewscurtis.AndrewsCurtis.DynDstbn,bgwt:provingground.andrewscurtis.AndrewsCurtis.Vert=>Double,epsilon:Double,cutoff:Double):provingground.andrewscurtis.AndrewsCurtis.DynDst[provingground.andrewscurtis.FreeGroups.Presentation,provingground.andrewscurtis.AndrewsCurtis.ACMoveType]", "kind" : "def"}, {"label" : "dstbnFlowCutoff", "tail" : "(d: DynDstbn, bgwt: (Vert) ⇒ Double, epsilon: Double, cutoff: Double): DynDstbn", "member" : "provingground.andrewscurtis.AndrewsCurtis.dstbnFlowCutoff", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#dstbnFlowCutoff(d:provingground.andrewscurtis.AndrewsCurtis.DynDstbn,bgwt:provingground.andrewscurtis.AndrewsCurtis.Vert=>Double,epsilon:Double,cutoff:Double):provingground.andrewscurtis.AndrewsCurtis.DynDstbn", "kind" : "def"}, {"label" : "initChains", "tail" : "(d: DynDstbn): Set[Chain]", "member" : "provingground.andrewscurtis.AndrewsCurtis.initChains", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#initChains(d:provingground.andrewscurtis.AndrewsCurtis.DynDstbn):Set[provingground.andrewscurtis.AndrewsCurtis.Chain]", "kind" : "def"}, {"label" : "presSupp", "tail" : "(d: DynDstbn): Set[Presentation]", "member" : "provingground.andrewscurtis.AndrewsCurtis.presSupp", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#presSupp(d:provingground.andrewscurtis.AndrewsCurtis.DynDstbn):scala.collection.immutable.Set[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "chainGenCutoff", "tail" : "(chains: Set[Chain], d: DynDstbn, cutoff: Double): Set[Chain]", "member" : "provingground.andrewscurtis.AndrewsCurtis.chainGenCutoff", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#chainGenCutoff(chains:Set[provingground.andrewscurtis.AndrewsCurtis.Chain],d:provingground.andrewscurtis.AndrewsCurtis.DynDstbn,cutoff:Double):Set[provingground.andrewscurtis.AndrewsCurtis.Chain]", "kind" : "def"}, {"label" : "dstbnflow", "tail" : "(chains: Set[Chain], d: DynDstbn, bgwt: (Vert) ⇒ Double, epsilon: Double, threshold: Double): DynDst[Presentation, ACMoveType]", "member" : "provingground.andrewscurtis.AndrewsCurtis.dstbnflow", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#dstbnflow(chains:Set[provingground.andrewscurtis.AndrewsCurtis.Chain],d:provingground.andrewscurtis.AndrewsCurtis.DynDstbn,bgwt:provingground.andrewscurtis.AndrewsCurtis.Vert=>Double,epsilon:Double,threshold:Double):provingground.andrewscurtis.AndrewsCurtis.DynDst[provingground.andrewscurtis.FreeGroups.Presentation,provingground.andrewscurtis.AndrewsCurtis.ACMoveType]", "kind" : "def"}, {"label" : "dstbnFeedback", "tail" : "(presdstbn: FiniteDistribution[Vert], bgwt: (Vert) ⇒ Double): FiniteDistribution[Vert]", "member" : "provingground.andrewscurtis.AndrewsCurtis.dstbnFeedback", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#dstbnFeedback(presdstbn:provingground.FiniteDistribution[provingground.andrewscurtis.AndrewsCurtis.Vert],bgwt:provingground.andrewscurtis.AndrewsCurtis.Vert=>Double):provingground.FiniteDistribution[provingground.andrewscurtis.AndrewsCurtis.Vert]", "kind" : "def"}, {"label" : "ACbgWt", "tail" : "(presCntn: Double, wrdCntn: Double): (Vert) ⇒ Double", "member" : "provingground.andrewscurtis.AndrewsCurtis.ACbgWt", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#ACbgWt(presCntn:Double,wrdCntn:Double):provingground.andrewscurtis.AndrewsCurtis.Vert=>Double", "kind" : "def"}, {"label" : "backpropdstbn", "tail" : "(chains: Set[Chain], feedback: FiniteDistribution[Vert], d: DynDstbn): DynDst[Presentation, MoveType]", "member" : "provingground.andrewscurtis.AndrewsCurtis.backpropdstbn", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#backpropdstbn(chains:Set[provingground.andrewscurtis.AndrewsCurtis.Chain],feedback:provingground.FiniteDistribution[provingground.andrewscurtis.AndrewsCurtis.Vert],d:provingground.andrewscurtis.AndrewsCurtis.DynDstbn):provingground.andrewscurtis.AndrewsCurtis.DynDst[provingground.andrewscurtis.FreeGroups.Presentation,provingground.andrewscurtis.AndrewsCurtis.MoveType]", "kind" : "def"}, {"label" : "dstbn", "tail" : "(chains: Set[Chain], d: DynDstbn): FiniteDistribution[Vert]", "member" : "provingground.andrewscurtis.AndrewsCurtis.dstbn", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#dstbn(chains:Set[provingground.andrewscurtis.AndrewsCurtis.Chain],d:provingground.andrewscurtis.AndrewsCurtis.DynDstbn):provingground.FiniteDistribution[provingground.andrewscurtis.AndrewsCurtis.Vert]", "kind" : "def"}, {"label" : "Chain", "tail" : "", "member" : "provingground.andrewscurtis.AndrewsCurtis.Chain", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#Chain", "kind" : "object"}, {"label" : "RecChain", "tail" : "", "member" : "provingground.andrewscurtis.AndrewsCurtis.RecChain", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#RecChainextendsAndrewsCurtis.ChainwithProductwithSerializable", "kind" : "case class"}, {"label" : "AtomicChain", "tail" : "", "member" : "provingground.andrewscurtis.AndrewsCurtis.AtomicChain", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#AtomicChainextendsAndrewsCurtis.ChainwithProductwithSerializable", "kind" : "case class"}, {"label" : "Chain", "tail" : "", "member" : "provingground.andrewscurtis.AndrewsCurtis.Chain", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#ChainextendsAnyRef", "kind" : "trait"}, {"label" : "Inv", "tail" : "", "member" : "provingground.andrewscurtis.AndrewsCurtis.Inv", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#InvextendsAndrewsCurtis.MovewithProductwithSerializable", "kind" : "case class"}, {"label" : "Conj", "tail" : "", "member" : "provingground.andrewscurtis.AndrewsCurtis.Conj", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#ConjextendsAndrewsCurtis.MovewithProductwithSerializable", "kind" : "case class"}, {"label" : "LftMult", "tail" : "", "member" : "provingground.andrewscurtis.AndrewsCurtis.LftMult", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#LftMultextendsAndrewsCurtis.MovewithProductwithSerializable", "kind" : "case class"}, {"label" : "RtMult", "tail" : "", "member" : "provingground.andrewscurtis.AndrewsCurtis.RtMult", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#RtMultextendsAndrewsCurtis.MovewithProductwithSerializable", "kind" : "case class"}, {"label" : "ACDeStab", "tail" : "", "member" : "provingground.andrewscurtis.AndrewsCurtis.ACDeStab", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#ACDeStab", "kind" : "object"}, {"label" : "ACStab", "tail" : "", "member" : "provingground.andrewscurtis.AndrewsCurtis.ACStab", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#ACStab", "kind" : "object"}, {"label" : "Move", "tail" : "", "member" : "provingground.andrewscurtis.AndrewsCurtis.Move", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#Moveextendsprovingground.andrewscurtis.AndrewsCurtis.Vert=>provingground.andrewscurtis.AndrewsCurtis.Vert", "kind" : "trait"}, {"label" : "baseDstbn", "tail" : ": DynDst[Presentation, ACMoveType]", "member" : "provingground.andrewscurtis.AndrewsCurtis.baseDstbn", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#baseDstbn:provingground.andrewscurtis.AndrewsCurtis.DynDst[provingground.andrewscurtis.FreeGroups.Presentation,provingground.andrewscurtis.AndrewsCurtis.ACMoveType]", "kind" : "val"}, {"label" : "allMoves", "tail" : "(pres: Presentation): (MoveType) ⇒ List[Move]", "member" : "provingground.andrewscurtis.AndrewsCurtis.allMoves", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#allMoves(pres:provingground.andrewscurtis.FreeGroups.Presentation):provingground.andrewscurtis.AndrewsCurtis.MoveType=>List[provingground.andrewscurtis.AndrewsCurtis.Move]", "kind" : "def"}, {"label" : "multiplicity", "tail" : "(rk: Int): (MoveType) ⇒ Long", "member" : "provingground.andrewscurtis.AndrewsCurtis.multiplicity", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#multiplicity(rk:Int):provingground.andrewscurtis.AndrewsCurtis.MoveType=>Long", "kind" : "def"}, {"label" : "MoveTypeList", "tail" : ": List[ACMoveType]", "member" : "provingground.andrewscurtis.AndrewsCurtis.MoveTypeList", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#MoveTypeList:List[provingground.andrewscurtis.AndrewsCurtis.ACMoveType]", "kind" : "val"}, {"label" : "ACMoveType", "tail" : "", "member" : "provingground.andrewscurtis.AndrewsCurtis.ACMoveType", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#ACMoveType", "kind" : "object"}, {"label" : "ACMoveType", "tail" : "", "member" : "provingground.andrewscurtis.AndrewsCurtis.ACMoveType", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#ACMoveTypeextendsAnyRef", "kind" : "sealed trait"}, {"label" : "MoveType", "tail" : "", "member" : "provingground.andrewscurtis.AndrewsCurtis.MoveType", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#MoveType=provingground.andrewscurtis.AndrewsCurtis.ACMoveType", "kind" : "type"}, {"label" : "Vert", "tail" : "", "member" : "provingground.andrewscurtis.AndrewsCurtis.Vert", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#Vert=provingground.andrewscurtis.FreeGroups.Presentation", "kind" : "type"}, {"label" : "DynDst", "tail" : "", "member" : "provingground.andrewscurtis.AndrewsCurtis.DynDst", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#DynDst", "kind" : "object"}, {"label" : "DynDst", "tail" : "", "member" : "provingground.andrewscurtis.AndrewsCurtis.DynDst", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#DynDst[V,E]extendsProductwithSerializable", "kind" : "case class"}, {"label" : "DynDstbn", "tail" : "", "member" : "provingground.andrewscurtis.AndrewsCurtis.DynDstbn", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#DynDstbn=provingground.andrewscurtis.AndrewsCurtis.DynDst[provingground.andrewscurtis.FreeGroups.Presentation,provingground.andrewscurtis.AndrewsCurtis.ACMoveType]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.andrewscurtis.AndrewsCurtisInterface", "shortDescription" : "", "object" : "provingground\/andrewscurtis\/AndrewsCurtisInterface$.html", "members_object" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/AndrewsCurtisInterface$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/AndrewsCurtisInterface$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/AndrewsCurtisInterface$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/AndrewsCurtisInterface$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/AndrewsCurtisInterface$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/AndrewsCurtisInterface$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/AndrewsCurtisInterface$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/AndrewsCurtisInterface$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/AndrewsCurtisInterface$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/AndrewsCurtisInterface$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/AndrewsCurtisInterface$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/AndrewsCurtisInterface$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/andrewscurtis\/AndrewsCurtisInterface$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/AndrewsCurtisInterface$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/AndrewsCurtisInterface$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/AndrewsCurtisInterface$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/AndrewsCurtisInterface$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/AndrewsCurtisInterface$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/AndrewsCurtisInterface$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.andrewscurtis.SimpleAcRun", "shortDescription" : "", "object" : "provingground\/andrewscurtis\/SimpleAcRun$.html", "members_object" : [{"label" : "PathView", "tail" : "", "member" : "provingground.andrewscurtis.SimpleAcRun.PathView", "link" : "provingground\/andrewscurtis\/SimpleAcRun$.html#PathViewextendsAnyRef", "kind" : "class"}, {"label" : "start", "tail" : "(rank: Int, steps: Int, loops: Int, threads: Int, wordCntn: Double, size: Double, scale: Double)(update: (Path) ⇒ Unit): List[Future[Path]]", "member" : "provingground.andrewscurtis.SimpleAcRun.start", "link" : "provingground\/andrewscurtis\/SimpleAcRun$.html#start(rank:Int,steps:Int,loops:Int,threads:Int,wordCntn:Double,size:Double,scale:Double)(implicitupdate:provingground.andrewscurtis.SimpleAcEvolution.Path=>Unit):List[scala.concurrent.Future[provingground.andrewscurtis.SimpleAcEvolution.Path]]", "kind" : "def"}, {"label" : "restart", "tail" : "(rank: Int, steps: Int, loops: Int, threads: Int, wordCntn: Double, size: Double, scale: Double)(dbread: Future[List[Path]], update: (Path) ⇒ Unit): List[Future[Path]]", "member" : "provingground.andrewscurtis.SimpleAcRun.restart", "link" : "provingground\/andrewscurtis\/SimpleAcRun$.html#restart(rank:Int,steps:Int,loops:Int,threads:Int,wordCntn:Double,size:Double,scale:Double)(implicitdbread:scala.concurrent.Future[List[provingground.andrewscurtis.SimpleAcEvolution.Path]],implicitupdate:provingground.andrewscurtis.SimpleAcEvolution.Path=>Unit):List[scala.concurrent.Future[provingground.andrewscurtis.SimpleAcEvolution.Path]]", "kind" : "def"}, {"label" : "resume", "tail" : "(loops: Int)(dbread: Future[List[Path]], update: (Path) ⇒ Unit): Future[List[Path]]", "member" : "provingground.andrewscurtis.SimpleAcRun.resume", "link" : "provingground\/andrewscurtis\/SimpleAcRun$.html#resume(loops:Int)(implicitdbread:scala.concurrent.Future[List[provingground.andrewscurtis.SimpleAcEvolution.Path]],implicitupdate:provingground.andrewscurtis.SimpleAcEvolution.Path=>Unit):scala.concurrent.Future[List[provingground.andrewscurtis.SimpleAcEvolution.Path]]", "kind" : "def"}, {"label" : "continue", "tail" : "(ps: List[Path], loops: Int)(update: (Path) ⇒ Unit): List[Future[Path]]", "member" : "provingground.andrewscurtis.SimpleAcRun.continue", "link" : "provingground\/andrewscurtis\/SimpleAcRun$.html#continue(ps:List[provingground.andrewscurtis.SimpleAcEvolution.Path],loops:Int)(implicitupdate:provingground.andrewscurtis.SimpleAcEvolution.Path=>Unit):List[scala.concurrent.Future[provingground.andrewscurtis.SimpleAcEvolution.Path]]", "kind" : "def"}, {"label" : "iter", "tail" : "(p: Path, loops: Int, initial: Boolean)(update: (Path) ⇒ Unit): Path", "member" : "provingground.andrewscurtis.SimpleAcRun.iter", "link" : "provingground\/andrewscurtis\/SimpleAcRun$.html#iter(p:provingground.andrewscurtis.SimpleAcEvolution.Path,loops:Int,initial:Boolean)(implicitupdate:provingground.andrewscurtis.SimpleAcEvolution.Path=>Unit):provingground.andrewscurtis.SimpleAcEvolution.Path", "kind" : "def"}, {"label" : "MemDB", "tail" : "", "member" : "provingground.andrewscurtis.SimpleAcRun.MemDB", "link" : "provingground\/andrewscurtis\/SimpleAcRun$.html#MemDB", "kind" : "object"}, {"label" : "InMem", "tail" : "", "member" : "provingground.andrewscurtis.SimpleAcRun.InMem", "link" : "provingground\/andrewscurtis\/SimpleAcRun$.html#InMemextendsAnyRef", "kind" : "class"}, {"label" : "Reactive", "tail" : "", "member" : "provingground.andrewscurtis.SimpleAcRun.Reactive", "link" : "provingground\/andrewscurtis\/SimpleAcRun$.html#Reactive", "kind" : "object"}, {"label" : "getId", "tail" : "(thread: Int): String", "member" : "provingground.andrewscurtis.SimpleAcRun.getId", "link" : "provingground\/andrewscurtis\/SimpleAcRun$.html#getId(thread:Int):String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/SimpleAcRun$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/SimpleAcRun$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/SimpleAcRun$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/SimpleAcRun$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/SimpleAcRun$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/SimpleAcRun$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/SimpleAcRun$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/SimpleAcRun$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/SimpleAcRun$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/SimpleAcRun$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/SimpleAcRun$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/SimpleAcRun$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/andrewscurtis\/SimpleAcRun$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/SimpleAcRun$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/SimpleAcRun$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/SimpleAcRun$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/SimpleAcRun$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/SimpleAcRun$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/SimpleAcRun$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "ammonite" : [], "reactivemongo" : []};