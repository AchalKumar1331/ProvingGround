Index.PACKAGES = {"monix.cats" : [], "provingground.induction" : [{"name" : "provingground.induction.ConstructorPatternMap", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/induction\/ConstructorPatternMap.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/induction\/ConstructorPatternMap.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ConstructorPatternMap[Cod, ConstructorType, H, RecDataType, InducDataType]) ⇒ Boolean, msg: ⇒ Any): ConstructorPatternMap[Cod, ConstructorType, H, RecDataType, InducDataType]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/ConstructorPatternMap.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ConstructorPatternMap[Cod, ConstructorType, H, RecDataType, InducDataType]) ⇒ Boolean): ConstructorPatternMap[Cod, ConstructorType, H, RecDataType, InducDataType]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/ConstructorPatternMap.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): ConstructorPatternMap[Cod, ConstructorType, H, RecDataType, InducDataType]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/ConstructorPatternMap.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ConstructorPatternMap[Cod, ConstructorType, H, RecDataType, InducDataType]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/ConstructorPatternMap.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ConstructorPatternMap[Cod, ConstructorType, H, RecDataType, InducDataType], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/induction\/ConstructorPatternMap.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ConstructorPatternMap[Cod, ConstructorType, H, RecDataType, InducDataType], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/induction\/ConstructorPatternMap.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/ConstructorPatternMap.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/ConstructorPatternMap.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/ConstructorPatternMap.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/ConstructorPatternMap.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/ConstructorPatternMap.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/ConstructorPatternMap.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/ConstructorPatternMap.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorPatternMap.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorPatternMap.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorPatternMap.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/ConstructorPatternMap.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/ConstructorPatternMap.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/ConstructorPatternMap.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/ConstructorPatternMap.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/ConstructorPatternMap.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/ConstructorPatternMap.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/ConstructorPatternMap.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/ConstructorPatternMap.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/ConstructorPatternMap.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "univLevel", "tail" : ": Int", "member" : "provingground.induction.ConstructorPatternMap.univLevel", "link" : "provingground\/induction\/ConstructorPatternMap.html#univLevel:Int", "kind" : "abstract val"}, {"label" : "inducDefCase", "tail" : "(cons: ConstructorType, data: InducDataType, f: ⇒ FuncLike[H, Cod]): (H) ⇒ Option[Cod]", "member" : "provingground.induction.ConstructorPatternMap.inducDefCase", "link" : "provingground\/induction\/ConstructorPatternMap.html#inducDefCase(cons:ConstructorType,data:InducDataType,f:=>provingground.HoTT.FuncLike[H,Cod]):H=>Option[Cod]", "kind" : "abstract def"}, {"label" : "recDefCase", "tail" : "(cons: ConstructorType, data: RecDataType, f: ⇒ Func[H, Cod]): (H) ⇒ Option[Cod]", "member" : "provingground.induction.ConstructorPatternMap.recDefCase", "link" : "provingground\/induction\/ConstructorPatternMap.html#recDefCase(cons:ConstructorType,data:RecDataType,f:=>provingground.HoTT.Func[H,Cod]):H=>Option[Cod]", "kind" : "abstract def"}, {"label" : "inducDataTyp", "tail" : "(w: Typ[H], xs: Func[H, Typ[Cod]])(cons: ConstructorType): Typ[InducDataType]", "member" : "provingground.induction.ConstructorPatternMap.inducDataTyp", "link" : "provingground\/induction\/ConstructorPatternMap.html#inducDataTyp(w:provingground.HoTT.Typ[H],xs:provingground.HoTT.Func[H,provingground.HoTT.Typ[Cod]])(cons:ConstructorType):provingground.HoTT.Typ[InducDataType]", "kind" : "abstract def"}, {"label" : "recDataTyp", "tail" : "(w: Typ[H], x: Typ[Cod]): Typ[RecDataType]", "member" : "provingground.induction.ConstructorPatternMap.recDataTyp", "link" : "provingground\/induction\/ConstructorPatternMap.html#recDataTyp(w:provingground.HoTT.Typ[H],x:provingground.HoTT.Typ[Cod]):provingground.HoTT.Typ[RecDataType]", "kind" : "abstract def"}, {"label" : "subs", "tail" : "(x: Term, y: Term): ConstructorPatternMap[Cod, ConstructorType, H, RecDataType, InducDataType]", "member" : "provingground.induction.ConstructorPatternMap.subs", "link" : "provingground\/induction\/ConstructorPatternMap.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.induction.ConstructorPatternMap[Cod,ConstructorType,H,RecDataType,InducDataType]", "kind" : "abstract def"}], "shortDescription" : "Introduction rule for an inductive type,as in ConstructorShape with the scala type of the codomain specified;hence the scala type of the recurion and induction types are determined.", "object" : "provingground\/induction\/ConstructorPatternMap$.html", "members_object" : [{"label" : "CnstDepFuncPtnMap", "tail" : "", "member" : "provingground.induction.ConstructorPatternMap.CnstDepFuncPtnMap", "link" : "provingground\/induction\/ConstructorPatternMap$.html#CnstDepFuncPtnMap[T<:provingground.HoTT.Termwithprovingground.HoTT.Subs[T],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V],VV<:provingground.HoTT.Termwithprovingground.HoTT.Subs[VV],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],HC<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HC],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],HR<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HR],HI<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HI]]extendsConstructorPatternMap.RecursiveConstructorPatternMap[C,T,HC,provingground.HoTT.FuncLike[T,HC],H,provingground.HoTT.FuncLike[T,V],provingground.HoTT.FuncLike[T,VV],V,VV]withProductwithSerializable", "kind" : "case class"}, {"label" : "CnstFncPtnMap", "tail" : "", "member" : "provingground.induction.ConstructorPatternMap.CnstFncPtnMap", "link" : "provingground\/induction\/ConstructorPatternMap$.html#CnstFncPtnMap[T<:provingground.HoTT.Termwithprovingground.HoTT.Subs[T],Cod<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Cod],HC<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HC],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],HR<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HR],HI<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HI]]extendsConstructorPatternMap.RecursiveConstructorPatternMap[Cod,T,HC,provingground.HoTT.Func[T,HC],H,provingground.HoTT.Func[T,HR],provingground.HoTT.FuncLike[T,HI],HR,HI]withProductwithSerializable", "kind" : "case class"}, {"label" : "FuncPtnMap", "tail" : "", "member" : "provingground.induction.ConstructorPatternMap.FuncPtnMap", "link" : "provingground\/induction\/ConstructorPatternMap$.html#FuncPtnMap[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],HC<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HC],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],HR<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HR],HI<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HI],TT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TT],DT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[DT]]extendsConstructorPatternMap.RecursiveConstructorPatternMap[C,F,HC,provingground.HoTT.Func[F,HC],H,provingground.HoTT.Func[F,provingground.HoTT.Func[TT,HR]],provingground.HoTT.FuncLike[F,provingground.HoTT.Func[DT,HI]],HR,HI]withProductwithSerializable", "kind" : "case class"}, {"label" : "Debug", "tail" : "", "member" : "provingground.induction.ConstructorPatternMap.Debug", "link" : "provingground\/induction\/ConstructorPatternMap$.html#Debug", "kind" : "object"}, {"label" : "RecursiveConstructorPatternMap", "tail" : "", "member" : "provingground.induction.ConstructorPatternMap.RecursiveConstructorPatternMap", "link" : "provingground\/induction\/ConstructorPatternMap$.html#RecursiveConstructorPatternMap[Cod<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Cod],ArgType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[ArgType],HeadConstructorType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HeadConstructorType],CT<:provingground.HoTT.FuncLike[ArgType,HeadConstructorType]withprovingground.HoTT.Subs[CT],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],RecDataType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[RecDataType],InducDataType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[InducDataType],HeadRecDataType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HeadRecDataType],HeadInducDataType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HeadInducDataType]]extendsConstructorPatternMap[Cod,CT,H,RecDataType,InducDataType]", "kind" : "sealed trait"}, {"label" : "IdTargMap", "tail" : "", "member" : "provingground.induction.ConstructorPatternMap.IdTargMap", "link" : "provingground\/induction\/ConstructorPatternMap$.html#IdTargMap[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H]]extendsConstructorPatternMap[C,H,H,C,C]withProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/ConstructorPatternMap$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/ConstructorPatternMap$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/ConstructorPatternMap$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/ConstructorPatternMap$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/ConstructorPatternMap$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/ConstructorPatternMap$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/ConstructorPatternMap$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorPatternMap$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorPatternMap$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorPatternMap$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/ConstructorPatternMap$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/ConstructorPatternMap$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/ConstructorPatternMap$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/ConstructorPatternMap$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/ConstructorPatternMap$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/ConstructorPatternMap$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/ConstructorPatternMap$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/ConstructorPatternMap$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/ConstructorPatternMap$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/induction\/ConstructorPatternMap.html", "kind" : "trait"}, {"name" : "provingground.induction.ConstructorPatternMapper", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/induction\/ConstructorPatternMapper.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/induction\/ConstructorPatternMapper.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ConstructorPatternMapper[Shape, Cod, ConstructorType, H, RecDataType, InducDataType]) ⇒ Boolean, msg: ⇒ Any): ConstructorPatternMapper[Shape, Cod, ConstructorType, H, RecDataType, InducDataType]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/ConstructorPatternMapper.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ConstructorPatternMapper[Shape, Cod, ConstructorType, H, RecDataType, InducDataType]) ⇒ Boolean): ConstructorPatternMapper[Shape, Cod, ConstructorType, H, RecDataType, InducDataType]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/ConstructorPatternMapper.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): ConstructorPatternMapper[Shape, Cod, ConstructorType, H, RecDataType, InducDataType]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/ConstructorPatternMapper.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ConstructorPatternMapper[Shape, Cod, ConstructorType, H, RecDataType, InducDataType]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/ConstructorPatternMapper.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ConstructorPatternMapper[Shape, Cod, ConstructorType, H, RecDataType, InducDataType], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/induction\/ConstructorPatternMapper.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ConstructorPatternMapper[Shape, Cod, ConstructorType, H, RecDataType, InducDataType], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/induction\/ConstructorPatternMapper.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/ConstructorPatternMapper.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/ConstructorPatternMapper.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/ConstructorPatternMapper.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/ConstructorPatternMapper.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/ConstructorPatternMapper.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/ConstructorPatternMapper.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/ConstructorPatternMapper.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorPatternMapper.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorPatternMapper.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorPatternMapper.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/ConstructorPatternMapper.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/ConstructorPatternMapper.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/ConstructorPatternMapper.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/ConstructorPatternMapper.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/ConstructorPatternMapper.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/ConstructorPatternMapper.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/ConstructorPatternMapper.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/ConstructorPatternMapper.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/ConstructorPatternMapper.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "mapper", "tail" : "(): (ConstructorShape[Shape, H, ConstructorType]) ⇒ ConstructorPatternMap[Cod, ConstructorType, H, RecDataType, InducDataType]", "member" : "provingground.induction.ConstructorPatternMapper.mapper", "link" : "provingground\/induction\/ConstructorPatternMapper.html#mapper:provingground.induction.ConstructorShape[Shape,H,ConstructorType]=>provingground.induction.ConstructorPatternMap[Cod,ConstructorType,H,RecDataType,InducDataType]", "kind" : "abstract def"}], "shortDescription" : "", "object" : "provingground\/induction\/ConstructorPatternMapper$.html", "members_object" : [{"label" : "cnstDepFncPtnMapper", "tail" : "(head: ConstructorPatternMapper[HShape, Cod, HC, H, HR, HI]): ConstructorPatternMapper[::[CnstDepFuncConsShape.type, HShape], Cod, FuncLike[T, HC], H, FuncLike[T, HR], FuncLike[T, HI]]", "member" : "provingground.induction.ConstructorPatternMapper.cnstDepFncPtnMapper", "link" : "provingground\/induction\/ConstructorPatternMapper$.html#cnstDepFncPtnMapper[HShape<:shapeless.HList,T<:provingground.HoTT.Termwithprovingground.HoTT.Subs[T],Cod<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Cod],HC<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HC],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],HR<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HR],HI<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HI]](implicithead:provingground.induction.ConstructorPatternMapper[HShape,Cod,HC,H,HR,HI]):provingground.induction.ConstructorPatternMapper[provingground.induction.ConstructorShape.CnstDepFuncConsShape.type::HShape,Cod,provingground.HoTT.FuncLike[T,HC],H,provingground.HoTT.FuncLike[T,HR],provingground.HoTT.FuncLike[T,HI]]", "kind" : "implicit def"}, {"label" : "cnstFncPtnMapper", "tail" : "(head: ConstructorPatternMapper[HShape, Cod, HC, H, HR, HI]): ConstructorPatternMapper[::[CnstFuncConsShape.type, HShape], Cod, Func[T, HC], H, Func[T, HR], FuncLike[T, HI]]", "member" : "provingground.induction.ConstructorPatternMapper.cnstFncPtnMapper", "link" : "provingground\/induction\/ConstructorPatternMapper$.html#cnstFncPtnMapper[HShape<:shapeless.HList,T<:provingground.HoTT.Termwithprovingground.HoTT.Subs[T],Cod<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Cod],HC<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HC],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],HR<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HR],HI<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HI]](implicithead:provingground.induction.ConstructorPatternMapper[HShape,Cod,HC,H,HR,HI]):provingground.induction.ConstructorPatternMapper[provingground.induction.ConstructorShape.CnstFuncConsShape.type::HShape,Cod,provingground.HoTT.Func[T,HC],H,provingground.HoTT.Func[T,HR],provingground.HoTT.FuncLike[T,HI]]", "kind" : "implicit def"}, {"label" : "funcPtnMapper", "tail" : "(tail: IterFuncMapper[H, C, F, TT, DT], head: ConstructorPatternMapper[HShape, C, HC, H, HR, HI]): ConstructorPatternMapper[::[FuncConsShape.type, HShape], C, Func[F, HC], H, Func[F, Func[TT, HR]], FuncLike[F, Func[DT, HI]]]", "member" : "provingground.induction.ConstructorPatternMapper.funcPtnMapper", "link" : "provingground\/induction\/ConstructorPatternMapper$.html#funcPtnMapper[HShape<:shapeless.HList,C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],HC<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HC],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],HR<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HR],HI<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HI],TT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TT],DT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[DT]](implicittail:provingground.induction.IterFuncMapper[H,C,F,TT,DT],implicithead:provingground.induction.ConstructorPatternMapper[HShape,C,HC,H,HR,HI]):provingground.induction.ConstructorPatternMapper[provingground.induction.ConstructorShape.FuncConsShape.type::HShape,C,provingground.HoTT.Func[F,HC],H,provingground.HoTT.Func[F,provingground.HoTT.Func[TT,HR]],provingground.HoTT.FuncLike[F,provingground.HoTT.Func[DT,HI]]]", "kind" : "implicit def"}, {"label" : "idTargMapper", "tail" : "(): ConstructorPatternMapper[HNil, C, H, H, C, C] { def mapper: provingground.induction.ConstructorShape[shapeless.HNil,H,H] => provingground.induction.ConstructorPatternMap.IdTargMap[C,H] }", "member" : "provingground.induction.ConstructorPatternMapper.idTargMapper", "link" : "provingground\/induction\/ConstructorPatternMapper$.html#idTargMapper[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H]]:provingground.induction.ConstructorPatternMapper[shapeless.HNil,C,H,H,C,C]{defmapper:provingground.induction.ConstructorShape[shapeless.HNil,H,H]=>provingground.induction.ConstructorPatternMap.IdTargMap[C,H]}", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/ConstructorPatternMapper$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/ConstructorPatternMapper$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/ConstructorPatternMapper$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/ConstructorPatternMapper$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/ConstructorPatternMapper$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/ConstructorPatternMapper$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/ConstructorPatternMapper$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorPatternMapper$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorPatternMapper$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorPatternMapper$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/ConstructorPatternMapper$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/ConstructorPatternMapper$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/ConstructorPatternMapper$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/ConstructorPatternMapper$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/ConstructorPatternMapper$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/ConstructorPatternMapper$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/ConstructorPatternMapper$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/ConstructorPatternMapper$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/ConstructorPatternMapper$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/induction\/ConstructorPatternMapper.html", "kind" : "object"}, {"name" : "provingground.induction.ConstructorSeqDom", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/induction\/ConstructorSeqDom.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/induction\/ConstructorSeqDom.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ConstructorSeqDom[SS, H, Intros]) ⇒ Boolean, msg: ⇒ Any): ConstructorSeqDom[SS, H, Intros]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/ConstructorSeqDom.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ConstructorSeqDom[SS, H, Intros]) ⇒ Boolean): ConstructorSeqDom[SS, H, Intros]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/ConstructorSeqDom.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): ConstructorSeqDom[SS, H, Intros]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/ConstructorSeqDom.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ConstructorSeqDom[SS, H, Intros]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/ConstructorSeqDom.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ConstructorSeqDom[SS, H, Intros], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/induction\/ConstructorSeqDom.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ConstructorSeqDom[SS, H, Intros], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/induction\/ConstructorSeqDom.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "induc", "tail" : "(W: Typ[H], Xs: Func[H, Typ[C]]): InducType forSome {type InducType <: Term with Subs[InducType]}", "member" : "provingground.induction.ConstructorSeqDom.induc", "link" : "provingground\/induction\/ConstructorSeqDom.html#induc[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C]](W:provingground.HoTT.Typ[H],Xs:provingground.HoTT.Func[H,provingground.HoTT.Typ[C]]):InducTypeforSome{typeInducType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[InducType]}", "kind" : "def"}, {"label" : "rec", "tail" : "(W: Typ[H], X: Typ[C]): RecType forSome {type RecType <: Term with Subs[RecType]}", "member" : "provingground.induction.ConstructorSeqDom.rec", "link" : "provingground\/induction\/ConstructorSeqDom.html#rec[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C]](W:provingground.HoTT.Typ[H],X:provingground.HoTT.Typ[C]):RecTypeforSome{typeRecType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[RecType]}", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/ConstructorSeqDom.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/ConstructorSeqDom.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/ConstructorSeqDom.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/ConstructorSeqDom.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/ConstructorSeqDom.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/ConstructorSeqDom.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/ConstructorSeqDom.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorSeqDom.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorSeqDom.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorSeqDom.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/ConstructorSeqDom.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/ConstructorSeqDom.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/ConstructorSeqDom.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/ConstructorSeqDom.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/ConstructorSeqDom.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/ConstructorSeqDom.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/ConstructorSeqDom.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/ConstructorSeqDom.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/ConstructorSeqDom.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "subs", "tail" : "(x: Term, y: Term): ConstructorSeqDom[SS, H, Intros]", "member" : "provingground.induction.ConstructorSeqDom.subs", "link" : "provingground\/induction\/ConstructorSeqDom.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.induction.ConstructorSeqDom[SS,H,Intros]", "kind" : "abstract def"}, {"label" : "intros", "tail" : "(typ: Typ[H]): Intros", "member" : "provingground.induction.ConstructorSeqDom.intros", "link" : "provingground\/induction\/ConstructorSeqDom.html#intros(typ:provingground.HoTT.Typ[H]):Intros", "kind" : "abstract def"}, {"label" : "mapped", "tail" : "(W: Typ[H]): ConstructorSeqMap[C, H, RecType, InducType, TIntros] forSome {type RecType <: Term with Subs[RecType], type InducType <: Term with Subs[InducType], type TIntros <: HList}", "member" : "provingground.induction.ConstructorSeqDom.mapped", "link" : "provingground\/induction\/ConstructorSeqDom.html#mapped[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C]](W:provingground.HoTT.Typ[H]):provingground.induction.ConstructorSeqMap[C,H,RecType,InducType,TIntros]forSome{typeRecType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[RecType];typeInducType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[InducType];typeTIntros<:shapeless.HList}", "kind" : "abstract def"}], "shortDescription" : "the shape of the definition of an inductive type; when a type is specified we get an object of typeConstructorSeqTL, which is the full definition", "object" : "provingground\/induction\/ConstructorSeqDom$.html", "members_object" : [{"label" : "Cons", "tail" : "", "member" : "provingground.induction.ConstructorSeqDom.Cons", "link" : "provingground\/induction\/ConstructorSeqDom$.html#Cons[TSS<:shapeless.HList,HShape<:shapeless.HList,H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],ConstructorType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[ConstructorType],TIntros<:shapeless.HList]extendsConstructorSeqDom[HShape::TSS,H,ConstructorType::TIntros]withProductwithSerializable", "kind" : "case class"}, {"label" : "Empty", "tail" : "", "member" : "provingground.induction.ConstructorSeqDom.Empty", "link" : "provingground\/induction\/ConstructorSeqDom$.html#Empty[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H]]extendsConstructorSeqDom[shapeless.HNil,H,shapeless.HNil]withProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/ConstructorSeqDom$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/ConstructorSeqDom$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/ConstructorSeqDom$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/ConstructorSeqDom$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/ConstructorSeqDom$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/ConstructorSeqDom$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/ConstructorSeqDom$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorSeqDom$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorSeqDom$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorSeqDom$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/ConstructorSeqDom$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/ConstructorSeqDom$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/ConstructorSeqDom$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/ConstructorSeqDom$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/ConstructorSeqDom$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/ConstructorSeqDom$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/ConstructorSeqDom$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/ConstructorSeqDom$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/ConstructorSeqDom$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/induction\/ConstructorSeqDom.html", "kind" : "trait"}, {"name" : "provingground.induction.ConstructorSeqMap", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/induction\/ConstructorSeqMap.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/induction\/ConstructorSeqMap.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ConstructorSeqMap[C, H, RecType, InducType, Intros]) ⇒ Boolean, msg: ⇒ Any): ConstructorSeqMap[C, H, RecType, InducType, Intros]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/ConstructorSeqMap.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ConstructorSeqMap[C, H, RecType, InducType, Intros]) ⇒ Boolean): ConstructorSeqMap[C, H, RecType, InducType, Intros]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/ConstructorSeqMap.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): ConstructorSeqMap[C, H, RecType, InducType, Intros]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/ConstructorSeqMap.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ConstructorSeqMap[C, H, RecType, InducType, Intros]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/ConstructorSeqMap.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ConstructorSeqMap[C, H, RecType, InducType, Intros], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/induction\/ConstructorSeqMap.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ConstructorSeqMap[C, H, RecType, InducType, Intros], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/induction\/ConstructorSeqMap.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "induc", "tail" : "(fibre: Func[H, Typ[C]]): InducType", "member" : "provingground.induction.ConstructorSeqMap.induc", "link" : "provingground\/induction\/ConstructorSeqMap.html#induc(fibre:provingground.HoTT.Func[H,provingground.HoTT.Typ[C]]):InducType", "kind" : "def"}, {"label" : "rec", "tail" : "(X: Typ[C]): RecType", "member" : "provingground.induction.ConstructorSeqMap.rec", "link" : "provingground\/induction\/ConstructorSeqMap.html#rec(X:provingground.HoTT.Typ[C]):RecType", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/ConstructorSeqMap.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/ConstructorSeqMap.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/ConstructorSeqMap.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/ConstructorSeqMap.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/ConstructorSeqMap.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/ConstructorSeqMap.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/ConstructorSeqMap.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorSeqMap.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorSeqMap.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorSeqMap.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/ConstructorSeqMap.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/ConstructorSeqMap.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/ConstructorSeqMap.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/ConstructorSeqMap.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/ConstructorSeqMap.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/ConstructorSeqMap.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/ConstructorSeqMap.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/ConstructorSeqMap.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/ConstructorSeqMap.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "inducDataLambda", "tail" : "(fibre: Func[H, Typ[C]]): (FuncLike[H, C]) ⇒ InducType", "member" : "provingground.induction.ConstructorSeqMap.inducDataLambda", "link" : "provingground\/induction\/ConstructorSeqMap.html#inducDataLambda(fibre:provingground.HoTT.Func[H,provingground.HoTT.Typ[C]]):provingground.HoTT.FuncLike[H,C]=>InducType", "kind" : "abstract def"}, {"label" : "inducDefn", "tail" : "(fibre: Func[H, Typ[C]]): InductiveDefinition[H, C]", "member" : "provingground.induction.ConstructorSeqMap.inducDefn", "link" : "provingground\/induction\/ConstructorSeqMap.html#inducDefn(fibre:provingground.HoTT.Func[H,provingground.HoTT.Typ[C]]):provingground.induction.InductiveDefinition[H,C]", "kind" : "abstract def"}, {"label" : "recDataLambda", "tail" : "(X: Typ[C]): (Func[H, C]) ⇒ RecType", "member" : "provingground.induction.ConstructorSeqMap.recDataLambda", "link" : "provingground\/induction\/ConstructorSeqMap.html#recDataLambda(X:provingground.HoTT.Typ[C]):provingground.HoTT.Func[H,C]=>RecType", "kind" : "abstract def"}, {"label" : "W", "tail" : ": Typ[H]", "member" : "provingground.induction.ConstructorSeqMap.W", "link" : "provingground\/induction\/ConstructorSeqMap.html#W:provingground.HoTT.Typ[H]", "kind" : "abstract val"}, {"label" : "recDefn", "tail" : "(X: Typ[C]): RecursiveDefinition[H, C]", "member" : "provingground.induction.ConstructorSeqMap.recDefn", "link" : "provingground\/induction\/ConstructorSeqMap.html#recDefn(X:provingground.HoTT.Typ[C]):provingground.induction.RecursiveDefinition[H,C]", "kind" : "abstract def"}], "shortDescription" : "Inductive type definition as in ConstructorSeqTL together with the scala type of a codomain;this determines the scala type of rec_W,X and induc_W, Xs functions.", "object" : "provingground\/induction\/ConstructorSeqMap$.html", "members_object" : [{"label" : "Cons", "tail" : "", "member" : "provingground.induction.ConstructorSeqMap.Cons", "link" : "provingground\/induction\/ConstructorSeqMap$.html#Cons[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],Cod<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Cod],RD<:provingground.HoTT.Termwithprovingground.HoTT.Subs[RD],ID<:provingground.HoTT.Termwithprovingground.HoTT.Subs[ID],TR<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TR],TI<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TI],TIntros<:shapeless.HList]extendsConstructorSeqMap[Cod,H,provingground.HoTT.Func[RD,TR],provingground.HoTT.Func[ID,TI],C::TIntros]withProductwithSerializable", "kind" : "case class"}, {"label" : "InducDataSym", "tail" : "", "member" : "provingground.induction.ConstructorSeqMap.InducDataSym", "link" : "provingground\/induction\/ConstructorSeqMap$.html#InducDataSym[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C]]extendsHoTT.AnySymwithProductwithSerializable", "kind" : "case class"}, {"label" : "RecDataSym", "tail" : "", "member" : "provingground.induction.ConstructorSeqMap.RecDataSym", "link" : "provingground\/induction\/ConstructorSeqMap$.html#RecDataSym[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C]]extendsHoTT.AnySymwithProductwithSerializable", "kind" : "case class"}, {"label" : "Empty", "tail" : "", "member" : "provingground.induction.ConstructorSeqMap.Empty", "link" : "provingground\/induction\/ConstructorSeqMap$.html#Empty[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H]]extendsConstructorSeqMap[C,H,provingground.HoTT.Func[H,C],provingground.HoTT.FuncLike[H,C],shapeless.HNil]withProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/ConstructorSeqMap$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/ConstructorSeqMap$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/ConstructorSeqMap$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/ConstructorSeqMap$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/ConstructorSeqMap$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/ConstructorSeqMap$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/ConstructorSeqMap$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorSeqMap$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorSeqMap$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorSeqMap$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/ConstructorSeqMap$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/ConstructorSeqMap$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/ConstructorSeqMap$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/ConstructorSeqMap$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/ConstructorSeqMap$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/ConstructorSeqMap$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/ConstructorSeqMap$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/ConstructorSeqMap$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/ConstructorSeqMap$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/induction\/ConstructorSeqMap.html", "kind" : "trait"}, {"name" : "provingground.induction.ConstructorSeqMapper", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/induction\/ConstructorSeqMapper.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/induction\/ConstructorSeqMapper.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ConstructorSeqMapper[SS, C, H, RecType, InducType, Intros]) ⇒ Boolean, msg: ⇒ Any): ConstructorSeqMapper[SS, C, H, RecType, InducType, Intros]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/ConstructorSeqMapper.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ConstructorSeqMapper[SS, C, H, RecType, InducType, Intros]) ⇒ Boolean): ConstructorSeqMapper[SS, C, H, RecType, InducType, Intros]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/ConstructorSeqMapper.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): ConstructorSeqMapper[SS, C, H, RecType, InducType, Intros]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/ConstructorSeqMapper.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ConstructorSeqMapper[SS, C, H, RecType, InducType, Intros]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/ConstructorSeqMapper.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ConstructorSeqMapper[SS, C, H, RecType, InducType, Intros], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/induction\/ConstructorSeqMapper.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ConstructorSeqMapper[SS, C, H, RecType, InducType, Intros], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/induction\/ConstructorSeqMapper.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/ConstructorSeqMapper.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/ConstructorSeqMapper.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/ConstructorSeqMapper.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/ConstructorSeqMapper.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/ConstructorSeqMapper.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/ConstructorSeqMapper.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/ConstructorSeqMapper.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorSeqMapper.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorSeqMapper.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorSeqMapper.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/ConstructorSeqMapper.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/ConstructorSeqMapper.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/ConstructorSeqMapper.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/ConstructorSeqMapper.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/ConstructorSeqMapper.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/ConstructorSeqMapper.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/ConstructorSeqMapper.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/ConstructorSeqMapper.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/ConstructorSeqMapper.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "mapped", "tail" : "(seqdom: ConstructorSeqDom[SS, H, Intros])(W: Typ[H]): ConstructorSeqMap[C, H, RecType, InducType, Intros]", "member" : "provingground.induction.ConstructorSeqMapper.mapped", "link" : "provingground\/induction\/ConstructorSeqMapper.html#mapped(seqdom:provingground.induction.ConstructorSeqDom[SS,H,Intros])(W:provingground.HoTT.Typ[H]):provingground.induction.ConstructorSeqMap[C,H,RecType,InducType,Intros]", "kind" : "abstract def"}], "shortDescription" : "given scala type of the codomain and a specific inductive type, lifts a ConstructorSeqDom to a ConstructorSeqMap", "object" : "provingground\/induction\/ConstructorSeqMapper$.html", "members_object" : [{"label" : "cons", "tail" : "(patternMapper: ConstructorPatternMapper[HShape, Cod, ConstructorType, H, RD, ID], tailMapper: ConstructorSeqMapper[TSS, Cod, H, TR, TI, TIntros]): ConstructorSeqMapper[::[HShape, TSS], Cod, H, Func[RD, TR], Func[ID, TI], ::[ConstructorType, TIntros]]", "member" : "provingground.induction.ConstructorSeqMapper.cons", "link" : "provingground\/induction\/ConstructorSeqMapper$.html#cons[TSS<:shapeless.HList,HShape<:shapeless.HList,H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],Cod<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Cod],ConstructorType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[ConstructorType],TIntros<:shapeless.HList,RD<:provingground.HoTT.Termwithprovingground.HoTT.Subs[RD],ID<:provingground.HoTT.Termwithprovingground.HoTT.Subs[ID],TR<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TR],TI<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TI]](implicitpatternMapper:provingground.induction.ConstructorPatternMapper[HShape,Cod,ConstructorType,H,RD,ID],implicittailMapper:provingground.induction.ConstructorSeqMapper[TSS,Cod,H,TR,TI,TIntros]):provingground.induction.ConstructorSeqMapper[HShape::TSS,Cod,H,provingground.HoTT.Func[RD,TR],provingground.HoTT.Func[ID,TI],ConstructorType::TIntros]", "kind" : "implicit def"}, {"label" : "empty", "tail" : "(): ConstructorSeqMapper[HNil, C, H, Func[H, C], FuncLike[H, C], HNil]", "member" : "provingground.induction.ConstructorSeqMapper.empty", "link" : "provingground\/induction\/ConstructorSeqMapper$.html#empty[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C]]:provingground.induction.ConstructorSeqMapper[shapeless.HNil,C,H,provingground.HoTT.Func[H,C],provingground.HoTT.FuncLike[H,C],shapeless.HNil]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/ConstructorSeqMapper$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/ConstructorSeqMapper$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/ConstructorSeqMapper$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/ConstructorSeqMapper$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/ConstructorSeqMapper$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/ConstructorSeqMapper$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/ConstructorSeqMapper$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorSeqMapper$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorSeqMapper$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorSeqMapper$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/ConstructorSeqMapper$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/ConstructorSeqMapper$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/ConstructorSeqMapper$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/ConstructorSeqMapper$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/ConstructorSeqMapper$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/ConstructorSeqMapper$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/ConstructorSeqMapper$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/ConstructorSeqMapper$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/ConstructorSeqMapper$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/induction\/ConstructorSeqMapper.html", "kind" : "trait"}, {"name" : "provingground.induction.ConstructorSeqTL", "shortDescription" : "Essentially the definition of an inductive type; has all parameters of the definition:", "object" : "provingground\/induction\/ConstructorSeqTL$.html", "members_object" : [{"label" : "getExst", "tail" : "(w: Typ[Term], intros: List[Term]): Exst", "member" : "provingground.induction.ConstructorSeqTL.getExst", "link" : "provingground\/induction\/ConstructorSeqTL$.html#getExst(w:provingground.HoTT.Typ[provingground.HoTT.Term],intros:List[provingground.HoTT.Term]):provingground.induction.ConstructorSeqTL.Exst", "kind" : "def"}, {"label" : "Exst", "tail" : "", "member" : "provingground.induction.ConstructorSeqTL.Exst", "link" : "provingground\/induction\/ConstructorSeqTL$.html#Exst", "kind" : "object"}, {"label" : "Exst", "tail" : "", "member" : "provingground.induction.ConstructorSeqTL.Exst", "link" : "provingground\/induction\/ConstructorSeqTL$.html#ExstextendsAnyRef", "kind" : "trait"}, {"label" : "Empty", "tail" : "(W: Typ[H]): ConstructorSeqTL[HNil, H, HNil]", "member" : "provingground.induction.ConstructorSeqTL.Empty", "link" : "provingground\/induction\/ConstructorSeqTL$.html#Empty[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H]](W:provingground.HoTT.Typ[H]):provingground.induction.ConstructorSeqTL[shapeless.HNil,H,shapeless.HNil]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/ConstructorSeqTL$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/ConstructorSeqTL$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/ConstructorSeqTL$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/ConstructorSeqTL$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/ConstructorSeqTL$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/ConstructorSeqTL$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/ConstructorSeqTL$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorSeqTL$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorSeqTL$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorSeqTL$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/ConstructorSeqTL$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/ConstructorSeqTL$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/ConstructorSeqTL$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/ConstructorSeqTL$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/ConstructorSeqTL$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/ConstructorSeqTL$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/ConstructorSeqTL$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/ConstructorSeqTL$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/ConstructorSeqTL$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/induction\/ConstructorSeqTL.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/induction\/ConstructorSeqTL.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ConstructorSeqTL[SS, H, Intros]) ⇒ Boolean, msg: ⇒ Any): ConstructorSeqTL[SS, H, Intros]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/ConstructorSeqTL.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ConstructorSeqTL[SS, H, Intros]) ⇒ Boolean): ConstructorSeqTL[SS, H, Intros]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/ConstructorSeqTL.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): ConstructorSeqTL[SS, H, Intros]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/ConstructorSeqTL.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ConstructorSeqTL[SS, H, Intros]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/ConstructorSeqTL.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ConstructorSeqTL[SS, H, Intros], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/induction\/ConstructorSeqTL.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ConstructorSeqTL[SS, H, Intros], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/induction\/ConstructorSeqTL.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "intros", "tail" : ": Intros", "member" : "provingground.induction.ConstructorSeqTL.intros", "link" : "provingground\/induction\/ConstructorSeqTL.html#intros:Intros", "kind" : "val"}, {"label" : "induc", "tail" : "(Xs: Func[H, Typ[C]])(mapper: ConstructorSeqMapper[SS, C, H, RecType, InducType, Intros]): InducType", "member" : "provingground.induction.ConstructorSeqTL.induc", "link" : "provingground\/induction\/ConstructorSeqTL.html#induc[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],RecType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[RecType],InducType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[InducType]](Xs:provingground.HoTT.Func[H,provingground.HoTT.Typ[C]])(implicitmapper:provingground.induction.ConstructorSeqMapper[SS,C,H,RecType,InducType,Intros]):InducType", "kind" : "def"}, {"label" : "inducE", "tail" : "(Xs: Func[H, Typ[C]]): InducType forSome {type InducType <: Term with Subs[InducType]}", "member" : "provingground.induction.ConstructorSeqTL.inducE", "link" : "provingground\/induction\/ConstructorSeqTL.html#inducE[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C]](Xs:provingground.HoTT.Func[H,provingground.HoTT.Typ[C]]):InducTypeforSome{typeInducType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[InducType]}", "kind" : "def"}, {"label" : "rec", "tail" : "(X: Typ[C])(mapper: ConstructorSeqMapper[SS, C, H, RecType, InducType, Intros]): RecType", "member" : "provingground.induction.ConstructorSeqTL.rec", "link" : "provingground\/induction\/ConstructorSeqTL.html#rec[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],RecType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[RecType],InducType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[InducType]](X:provingground.HoTT.Typ[C])(implicitmapper:provingground.induction.ConstructorSeqMapper[SS,C,H,RecType,InducType,Intros]):RecType", "kind" : "def"}, {"label" : "recE", "tail" : "(X: Typ[C]): RecType forSome {type RecType <: Term with Subs[RecType]}", "member" : "provingground.induction.ConstructorSeqTL.recE", "link" : "provingground\/induction\/ConstructorSeqTL.html#recE[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C]](X:provingground.HoTT.Typ[C]):RecTypeforSome{typeRecType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[RecType]}", "kind" : "def"}, {"label" : "|:", "tail" : "(head: ConstructorTL[S, H, ConstructorType]): ConstructorSeqTL[::[S, SS], H, ::[ConstructorType, Intros]]", "member" : "provingground.induction.ConstructorSeqTL.|:", "link" : "provingground\/induction\/ConstructorSeqTL.html#|:[S<:shapeless.HList,ConstructorType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[ConstructorType]](head:provingground.induction.ConstructorTL[S,H,ConstructorType]):provingground.induction.ConstructorSeqTL[S::SS,H,ConstructorType::Intros]", "kind" : "def"}, {"member" : "provingground.induction.ConstructorSeqTL#<init>", "error" : "unsupported entity"}, {"label" : "typ", "tail" : ": Typ[H]", "member" : "provingground.induction.ConstructorSeqTL.typ", "link" : "provingground\/induction\/ConstructorSeqTL.html#typ:provingground.HoTT.Typ[H]", "kind" : "val"}, {"label" : "seqDom", "tail" : ": ConstructorSeqDom[SS, H, Intros]", "member" : "provingground.induction.ConstructorSeqTL.seqDom", "link" : "provingground\/induction\/ConstructorSeqTL.html#seqDom:provingground.induction.ConstructorSeqDom[SS,H,Intros]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/ConstructorSeqTL.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/ConstructorSeqTL.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/ConstructorSeqTL.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/ConstructorSeqTL.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/ConstructorSeqTL.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/ConstructorSeqTL.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/ConstructorSeqTL.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorSeqTL.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorSeqTL.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorSeqTL.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/ConstructorSeqTL.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/ConstructorSeqTL.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/ConstructorSeqTL.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/ConstructorSeqTL.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/ConstructorSeqTL.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/ConstructorSeqTL.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/induction\/ConstructorSeqTL.html", "kind" : "case class"}, {"name" : "provingground.induction.ConstructorShape", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/induction\/ConstructorShape.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/induction\/ConstructorShape.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ConstructorShape[S, H, ConstructorType]) ⇒ Boolean, msg: ⇒ Any): ConstructorShape[S, H, ConstructorType]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/ConstructorShape.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ConstructorShape[S, H, ConstructorType]) ⇒ Boolean): ConstructorShape[S, H, ConstructorType]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/ConstructorShape.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): ConstructorShape[S, H, ConstructorType]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/ConstructorShape.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ConstructorShape[S, H, ConstructorType]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/ConstructorShape.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ConstructorShape[S, H, ConstructorType], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/induction\/ConstructorShape.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ConstructorShape[S, H, ConstructorType], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/induction\/ConstructorShape.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "~>:", "tail" : "(tailVar: T): CnstDepFuncConsShape[S, H, ConstructorType, T, Nothing]", "member" : "provingground.induction.ConstructorShape.~>:", "link" : "provingground\/induction\/ConstructorShape.html#~>:[T<:provingground.HoTT.Termwithprovingground.HoTT.Subs[T]](tailVar:T):provingground.induction.ConstructorShape.CnstDepFuncConsShape[S,H,ConstructorType,T,Nothing]", "kind" : "def"}, {"label" : "->:", "tail" : "(tail: Typ[T]): CnstFuncConsShape[S, H, ConstructorType, T, Nothing]", "member" : "provingground.induction.ConstructorShape.->:", "link" : "provingground\/induction\/ConstructorShape.html#->:[T<:provingground.HoTT.Termwithprovingground.HoTT.Subs[T]](tail:provingground.HoTT.Typ[T]):provingground.induction.ConstructorShape.CnstFuncConsShape[S,H,ConstructorType,T,Nothing]", "kind" : "def"}, {"label" : "-->:", "tail" : "(that: IdShape.type): FuncConsShape[S, H, ConstructorType, H]", "member" : "provingground.induction.ConstructorShape.-->:", "link" : "provingground\/induction\/ConstructorShape.html#-->:(that:provingground.induction.ConstructorShape.IdShape.type):provingground.induction.ConstructorShape.FuncConsShape[S,H,ConstructorType,H]", "kind" : "def"}, {"label" : "-->:", "tail" : "(that: IterFuncShape[H, F]): FuncConsShape[S, H, ConstructorType, F]", "member" : "provingground.induction.ConstructorShape.-->:", "link" : "provingground\/induction\/ConstructorShape.html#-->:[F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F]](that:provingground.induction.IterFuncShape[H,F]):provingground.induction.ConstructorShape.FuncConsShape[S,H,ConstructorType,F]", "kind" : "def"}, {"label" : "symbcons", "tail" : "(name: AnySym, tp: Typ[H]): symbcons._1.type.Obj with Subs[symbcons._1.type.Obj] forSome {val _1: Typ[ConstructorType]}", "member" : "provingground.induction.ConstructorShape.symbcons", "link" : "provingground\/induction\/ConstructorShape.html#symbcons(name:provingground.HoTT.AnySym,tp:provingground.HoTT.Typ[H]):_1.Objwithprovingground.HoTT.Subs[_1.Obj]forSome{val_1:provingground.HoTT.Typ[ConstructorType]}", "kind" : "def"}, {"label" : "mapped", "tail" : "(): ConstructorPatternMap[Cod, ConstructorType, H, RecDataType, InducDataType] forSome {type RecDataType <: Term with Subs[RecDataType], type InducDataType <: Term with Subs[InducDataType]}", "member" : "provingground.induction.ConstructorShape.mapped", "link" : "provingground\/induction\/ConstructorShape.html#mapped[Cod<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Cod]]:provingground.induction.ConstructorPatternMap[Cod,ConstructorType,H,RecDataType,InducDataType]forSome{typeRecDataType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[RecDataType];typeInducDataType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[InducDataType]}", "kind" : "def"}, {"label" : "lift", "tail" : "(mp: ConstructorPatternMapper[S, Cod, ConstructorType, H, RecDataType, InducDataType]): ConstructorPatternMap[Cod, ConstructorType, H, RecDataType, InducDataType]", "member" : "provingground.induction.ConstructorShape.lift", "link" : "provingground\/induction\/ConstructorShape.html#lift[Cod<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Cod],RecDataType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[RecDataType],InducDataType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[InducDataType]](implicitmp:provingground.induction.ConstructorPatternMapper[S,Cod,ConstructorType,H,RecDataType,InducDataType]):provingground.induction.ConstructorPatternMap[Cod,ConstructorType,H,RecDataType,InducDataType]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/ConstructorShape.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/ConstructorShape.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/ConstructorShape.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/ConstructorShape.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/ConstructorShape.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/ConstructorShape.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/ConstructorShape.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorShape.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorShape.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorShape.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/ConstructorShape.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/ConstructorShape.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/ConstructorShape.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/ConstructorShape.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/ConstructorShape.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/ConstructorShape.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/ConstructorShape.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/ConstructorShape.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/ConstructorShape.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "subs", "tail" : "(x: Term, y: Term): ConstructorShape[S, H, ConstructorType]", "member" : "provingground.induction.ConstructorShape.subs", "link" : "provingground\/induction\/ConstructorShape.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.induction.ConstructorShape[S,H,ConstructorType]", "kind" : "abstract def"}, {"label" : "mapper", "tail" : "(): ConstructorPatternMapper[S, Cod, ConstructorType, H, RecDataType, InducDataType] forSome {type RecDataType <: Term with Subs[RecDataType], type InducDataType <: Term with Subs[InducDataType]}", "member" : "provingground.induction.ConstructorShape.mapper", "link" : "provingground\/induction\/ConstructorShape.html#mapper[Cod<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Cod]]:provingground.induction.ConstructorPatternMapper[S,Cod,ConstructorType,H,RecDataType,InducDataType]forSome{typeRecDataType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[RecDataType];typeInducDataType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[InducDataType]}", "kind" : "abstract def"}, {"label" : "apply", "tail" : "(tp: Typ[H]): Typ[ConstructorType]", "member" : "provingground.induction.ConstructorShape.apply", "link" : "provingground\/induction\/ConstructorShape.html#apply(tp:provingground.HoTT.Typ[H]):provingground.HoTT.Typ[ConstructorType]", "kind" : "abstract def"}], "shortDescription" : "The introduction rule for an inductive type, as a function of the type;typically (A -> B -> W)-> C -> W -> (D -> W) -> W as a function of WMay have Pi-types instead of function types.", "object" : "provingground\/induction\/ConstructorShape$.html", "members_object" : [{"label" : "CnstDepFuncConsShape", "tail" : "", "member" : "provingground.induction.ConstructorShape.CnstDepFuncConsShape", "link" : "provingground\/induction\/ConstructorShape$.html#CnstDepFuncConsShape[HShape<:shapeless.HList,H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],HC<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HC],T<:provingground.HoTT.Termwithprovingground.HoTT.Subs[T],HS<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HS]]extendsConstructorShape[provingground.induction.ConstructorShape.CnstDepFuncConsShape.type::HShape,H,provingground.HoTT.FuncLike[T,HC]]withProductwithSerializable", "kind" : "case class"}, {"label" : "CnstDepFuncConsShape", "tail" : "", "member" : "provingground.induction.ConstructorShape.CnstDepFuncConsShape", "link" : "provingground\/induction\/ConstructorShape$.html#CnstDepFuncConsShape", "kind" : "object"}, {"label" : "CnstFuncConsShape", "tail" : "", "member" : "provingground.induction.ConstructorShape.CnstFuncConsShape", "link" : "provingground\/induction\/ConstructorShape$.html#CnstFuncConsShape[HShape<:shapeless.HList,H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],HC<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HC],T<:provingground.HoTT.Termwithprovingground.HoTT.Subs[T],HS<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HS]]extendsConstructorShape[provingground.induction.ConstructorShape.CnstFuncConsShape.type::HShape,H,provingground.HoTT.Func[T,HC]]withProductwithSerializable", "kind" : "case class"}, {"label" : "CnstFuncConsShape", "tail" : "", "member" : "provingground.induction.ConstructorShape.CnstFuncConsShape", "link" : "provingground\/induction\/ConstructorShape$.html#CnstFuncConsShape", "kind" : "object"}, {"label" : "FuncConsShape", "tail" : "", "member" : "provingground.induction.ConstructorShape.FuncConsShape", "link" : "provingground\/induction\/ConstructorShape$.html#FuncConsShape[HS<:shapeless.HList,H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],HC<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HC],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F]]extendsConstructorShape[provingground.induction.ConstructorShape.FuncConsShape.type::HS,H,provingground.HoTT.Func[F,HC]]withProductwithSerializable", "kind" : "case class"}, {"label" : "FuncConsShape", "tail" : "", "member" : "provingground.induction.ConstructorShape.FuncConsShape", "link" : "provingground\/induction\/ConstructorShape$.html#FuncConsShape", "kind" : "object"}, {"label" : "IdShape", "tail" : "", "member" : "provingground.induction.ConstructorShape.IdShape", "link" : "provingground\/induction\/ConstructorShape$.html#IdShape[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H]]extendsConstructorShape[shapeless.HNil,H,H]withProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/ConstructorShape$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/ConstructorShape$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/ConstructorShape$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/ConstructorShape$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/ConstructorShape$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/ConstructorShape$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/ConstructorShape$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorShape$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorShape$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorShape$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/ConstructorShape$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/ConstructorShape$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/ConstructorShape$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/ConstructorShape$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/ConstructorShape$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/ConstructorShape$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/ConstructorShape$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/ConstructorShape$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/ConstructorShape$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/induction\/ConstructorShape.html", "kind" : "trait"}, {"name" : "provingground.induction.ConstructorTL", "shortDescription" : "an introduction rule for an inductive type", "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/induction\/ConstructorTL.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/induction\/ConstructorTL.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ConstructorTL[S, H, ConstructorType]) ⇒ Boolean, msg: ⇒ Any): ConstructorTL[S, H, ConstructorType]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/ConstructorTL.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ConstructorTL[S, H, ConstructorType]) ⇒ Boolean): ConstructorTL[S, H, ConstructorType]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/ConstructorTL.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): ConstructorTL[S, H, ConstructorType]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/ConstructorTL.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ConstructorTL[S, H, ConstructorType]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/ConstructorTL.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ConstructorTL[S, H, ConstructorType], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/induction\/ConstructorTL.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ConstructorTL[S, H, ConstructorType], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/induction\/ConstructorTL.html#->[B](y:B):(A,B)", "kind" : "def"}, {"member" : "provingground.induction.ConstructorTL#<init>", "error" : "unsupported entity"}, {"label" : "W", "tail" : ": Typ[H]", "member" : "provingground.induction.ConstructorTL.W", "link" : "provingground\/induction\/ConstructorTL.html#W:provingground.HoTT.Typ[H]", "kind" : "val"}, {"label" : "shape", "tail" : ": ConstructorShape[S, H, ConstructorType]", "member" : "provingground.induction.ConstructorTL.shape", "link" : "provingground\/induction\/ConstructorTL.html#shape:provingground.induction.ConstructorShape[S,H,ConstructorType]", "kind" : "val"}, {"label" : "name", "tail" : ": AnySym", "member" : "provingground.induction.ConstructorTL.name", "link" : "provingground\/induction\/ConstructorTL.html#name:provingground.HoTT.AnySym", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/ConstructorTL.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/ConstructorTL.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/ConstructorTL.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/ConstructorTL.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/ConstructorTL.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/ConstructorTL.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/ConstructorTL.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorTL.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorTL.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorTL.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/ConstructorTL.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/ConstructorTL.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/ConstructorTL.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/ConstructorTL.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/ConstructorTL.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/ConstructorTL.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/induction\/ConstructorTL.html", "kind" : "case class"}, {"name" : "provingground.induction.ConstructorTypTL", "shortDescription" : "an introduction rule shape together with the iductive type typ being defined.", "object" : "provingground\/induction\/ConstructorTypTL$.html", "members_object" : [{"label" : "getExst", "tail" : "(w: Typ[Term], cnstTyp: Typ[Term]): Exst", "member" : "provingground.induction.ConstructorTypTL.getExst", "link" : "provingground\/induction\/ConstructorTypTL$.html#getExst(w:provingground.HoTT.Typ[provingground.HoTT.Term],cnstTyp:provingground.HoTT.Typ[provingground.HoTT.Term]):provingground.induction.ConstructorTypTL.Exst", "kind" : "def"}, {"label" : "Exst", "tail" : "", "member" : "provingground.induction.ConstructorTypTL.Exst", "link" : "provingground\/induction\/ConstructorTypTL$.html#Exst", "kind" : "object"}, {"label" : "Exst", "tail" : "", "member" : "provingground.induction.ConstructorTypTL.Exst", "link" : "provingground\/induction\/ConstructorTypTL$.html#ExstextendsAnyRef", "kind" : "trait"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/ConstructorTypTL$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/ConstructorTypTL$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/ConstructorTypTL$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/ConstructorTypTL$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/ConstructorTypTL$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/ConstructorTypTL$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/ConstructorTypTL$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorTypTL$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorTypTL$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorTypTL$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/ConstructorTypTL$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/ConstructorTypTL$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/ConstructorTypTL$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/ConstructorTypTL$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/ConstructorTypTL$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/ConstructorTypTL$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/ConstructorTypTL$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/ConstructorTypTL$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/ConstructorTypTL$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/induction\/ConstructorTypTL.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/induction\/ConstructorTypTL.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ConstructorTypTL[S, H, ConstructorType]) ⇒ Boolean, msg: ⇒ Any): ConstructorTypTL[S, H, ConstructorType]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/ConstructorTypTL.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ConstructorTypTL[S, H, ConstructorType]) ⇒ Boolean): ConstructorTypTL[S, H, ConstructorType]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/ConstructorTypTL.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): ConstructorTypTL[S, H, ConstructorType]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/ConstructorTypTL.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ConstructorTypTL[S, H, ConstructorType]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/ConstructorTypTL.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ConstructorTypTL[S, H, ConstructorType], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/induction\/ConstructorTypTL.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ConstructorTypTL[S, H, ConstructorType], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/induction\/ConstructorTypTL.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "~>>:", "tail" : "(thatVar: H): ConstructorTypTL[::[CnstDepFuncConsShape.type, S], H, FuncLike[H, ConstructorType]]", "member" : "provingground.induction.ConstructorTypTL.~>>:", "link" : "provingground\/induction\/ConstructorTypTL.html#~>>:(thatVar:H):provingground.induction.ConstructorTypTL[provingground.induction.ConstructorShape.CnstDepFuncConsShape.type::S,H,provingground.HoTT.FuncLike[H,ConstructorType]]", "kind" : "def"}, {"label" : "->>:", "tail" : "(that: Typ[T]): ConstructorTypTL[::[CnstFuncConsShape.type, S], H, Func[T, ConstructorType]]", "member" : "provingground.induction.ConstructorTypTL.->>:", "link" : "provingground\/induction\/ConstructorTypTL.html#->>:[T<:provingground.HoTT.Termwithprovingground.HoTT.Subs[T]](that:provingground.HoTT.Typ[T]):provingground.induction.ConstructorTypTL[provingground.induction.ConstructorShape.CnstFuncConsShape.type::S,H,provingground.HoTT.Func[T,ConstructorType]]", "kind" : "def"}, {"label" : "-->>:", "tail" : "(that: IterFuncShape[H, F]): ConstructorTypTL[::[FuncConsShape.type, S], H, Func[F, ConstructorType]]", "member" : "provingground.induction.ConstructorTypTL.-->>:", "link" : "provingground\/induction\/ConstructorTypTL.html#-->>:[F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F]](that:provingground.induction.IterFuncShape[H,F]):provingground.induction.ConstructorTypTL[provingground.induction.ConstructorShape.FuncConsShape.type::S,H,provingground.HoTT.Func[F,ConstructorType]]", "kind" : "def"}, {"label" : "-->>:", "tail" : "(that: Typ[H]): ConstructorTypTL[::[FuncConsShape.type, S], H, Func[H, ConstructorType]]", "member" : "provingground.induction.ConstructorTypTL.-->>:", "link" : "provingground\/induction\/ConstructorTypTL.html#-->>:(that:provingground.HoTT.Typ[H]):provingground.induction.ConstructorTypTL[provingground.induction.ConstructorShape.FuncConsShape.type::S,H,provingground.HoTT.Func[H,ConstructorType]]", "kind" : "def"}, {"label" : ":::", "tail" : "(name: AnySym): ConstructorTL[S, H, ConstructorType]", "member" : "provingground.induction.ConstructorTypTL.:::", "link" : "provingground\/induction\/ConstructorTypTL.html#:::(name:provingground.HoTT.AnySym):provingground.induction.ConstructorTL[S,H,ConstructorType]", "kind" : "def"}, {"member" : "provingground.induction.ConstructorTypTL#<init>", "error" : "unsupported entity"}, {"label" : "typ", "tail" : ": Typ[H]", "member" : "provingground.induction.ConstructorTypTL.typ", "link" : "provingground\/induction\/ConstructorTypTL.html#typ:provingground.HoTT.Typ[H]", "kind" : "val"}, {"label" : "shape", "tail" : ": ConstructorShape[S, H, ConstructorType]", "member" : "provingground.induction.ConstructorTypTL.shape", "link" : "provingground\/induction\/ConstructorTypTL.html#shape:provingground.induction.ConstructorShape[S,H,ConstructorType]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/ConstructorTypTL.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/ConstructorTypTL.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/ConstructorTypTL.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/ConstructorTypTL.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/ConstructorTypTL.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/ConstructorTypTL.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/ConstructorTypTL.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorTypTL.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorTypTL.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorTypTL.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/ConstructorTypTL.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/ConstructorTypTL.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/ConstructorTypTL.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/ConstructorTypTL.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/ConstructorTypTL.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/ConstructorTypTL.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/induction\/ConstructorTypTL.html", "kind" : "case class"}, {"name" : "provingground.induction.IndexedConstructor", "shortDescription" : "", "object" : "provingground\/induction\/IndexedConstructor$.html", "members_object" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/IndexedConstructor$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/IndexedConstructor$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/IndexedConstructor$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/IndexedConstructor$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/IndexedConstructor$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/IndexedConstructor$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/IndexedConstructor$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructor$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructor$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructor$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/IndexedConstructor$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/IndexedConstructor$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/IndexedConstructor$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/IndexedConstructor$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/IndexedConstructor$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/IndexedConstructor$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/IndexedConstructor$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/IndexedConstructor$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/IndexedConstructor$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/induction\/IndexedConstructor.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/induction\/IndexedConstructor.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (IndexedConstructor[S, H, F, ConstructorType, Index]) ⇒ Boolean, msg: ⇒ Any): IndexedConstructor[S, H, F, ConstructorType, Index]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/IndexedConstructor.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (IndexedConstructor[S, H, F, ConstructorType, Index]) ⇒ Boolean): IndexedConstructor[S, H, F, ConstructorType, Index]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/IndexedConstructor.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): IndexedConstructor[S, H, F, ConstructorType, Index]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/IndexedConstructor.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): IndexedConstructor[S, H, F, ConstructorType, Index]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/IndexedConstructor.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (IndexedConstructor[S, H, F, ConstructorType, Index], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/induction\/IndexedConstructor.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (IndexedConstructor[S, H, F, ConstructorType, Index], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/induction\/IndexedConstructor.html#->[B](y:B):(A,B)", "kind" : "def"}, {"member" : "provingground.induction.IndexedConstructor#<init>", "error" : "unsupported entity"}, {"label" : "shape", "tail" : ": IndexedConstructorShape[S, H, F, ConstructorType, Index]", "member" : "provingground.induction.IndexedConstructor.shape", "link" : "provingground\/induction\/IndexedConstructor.html#shape:provingground.induction.IndexedConstructorShape[S,H,F,ConstructorType,Index]", "kind" : "val"}, {"label" : "name", "tail" : ": AnySym", "member" : "provingground.induction.IndexedConstructor.name", "link" : "provingground\/induction\/IndexedConstructor.html#name:provingground.HoTT.AnySym", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/IndexedConstructor.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/IndexedConstructor.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/IndexedConstructor.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/IndexedConstructor.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/IndexedConstructor.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/IndexedConstructor.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/IndexedConstructor.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructor.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructor.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructor.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/IndexedConstructor.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/IndexedConstructor.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/IndexedConstructor.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/IndexedConstructor.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/IndexedConstructor.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/IndexedConstructor.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/induction\/IndexedConstructor.html", "kind" : "case class"}, {"name" : "provingground.induction.IndexedConstructorPatternMap", "shortDescription" : "Introduction rule for an indexed inductive type,as in IndexedConstructorShape with the scala type of the codomain specified;hence the scala type of the recurion and induction types are determined.", "object" : "provingground\/induction\/IndexedConstructorPatternMap$.html", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/induction\/IndexedConstructorPatternMap.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/induction\/IndexedConstructorPatternMap.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (IndexedConstructorPatternMap[Cod, ConstructorType, H, RecDataType, InducDataType, Fb, Index, IF, IDF, IDFT]) ⇒ Boolean, msg: ⇒ Any): IndexedConstructorPatternMap[Cod, ConstructorType, H, RecDataType, InducDataType, Fb, Index, IF, IDF, IDFT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/IndexedConstructorPatternMap.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (IndexedConstructorPatternMap[Cod, ConstructorType, H, RecDataType, InducDataType, Fb, Index, IF, IDF, IDFT]) ⇒ Boolean): IndexedConstructorPatternMap[Cod, ConstructorType, H, RecDataType, InducDataType, Fb, Index, IF, IDF, IDFT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/IndexedConstructorPatternMap.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): IndexedConstructorPatternMap[Cod, ConstructorType, H, RecDataType, InducDataType, Fb, Index, IF, IDF, IDFT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/IndexedConstructorPatternMap.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): IndexedConstructorPatternMap[Cod, ConstructorType, H, RecDataType, InducDataType, Fb, Index, IF, IDF, IDFT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/IndexedConstructorPatternMap.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (IndexedConstructorPatternMap[Cod, ConstructorType, H, RecDataType, InducDataType, Fb, Index, IF, IDF, IDFT], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/induction\/IndexedConstructorPatternMap.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (IndexedConstructorPatternMap[Cod, ConstructorType, H, RecDataType, InducDataType, Fb, Index, IF, IDF, IDFT], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/induction\/IndexedConstructorPatternMap.html#->[B](y:B):(A,B)", "kind" : "def"}, {"member" : "provingground.induction.IndexedConstructorPatternMap#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/IndexedConstructorPatternMap.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/IndexedConstructorPatternMap.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/IndexedConstructorPatternMap.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/IndexedConstructorPatternMap.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/IndexedConstructorPatternMap.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/IndexedConstructorPatternMap.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/IndexedConstructorPatternMap.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructorPatternMap.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructorPatternMap.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructorPatternMap.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/IndexedConstructorPatternMap.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/IndexedConstructorPatternMap.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/IndexedConstructorPatternMap.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/IndexedConstructorPatternMap.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/IndexedConstructorPatternMap.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/IndexedConstructorPatternMap.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/IndexedConstructorPatternMap.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/IndexedConstructorPatternMap.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/IndexedConstructorPatternMap.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "univLevel", "tail" : ": Int", "member" : "provingground.induction.IndexedConstructorPatternMap.univLevel", "link" : "provingground\/induction\/IndexedConstructorPatternMap.html#univLevel:Int", "kind" : "abstract val"}, {"label" : "inducDefCase", "tail" : "(cons: ConstructorType, data: InducDataType, f: ⇒ IDF): (H) ⇒ Option[Cod]", "member" : "provingground.induction.IndexedConstructorPatternMap.inducDefCase", "link" : "provingground\/induction\/IndexedConstructorPatternMap.html#inducDefCase(cons:ConstructorType,data:InducDataType,f:=>IDF):H=>Option[Cod]", "kind" : "abstract def"}, {"label" : "recDefCase", "tail" : "(cons: ConstructorType, data: RecDataType, f: ⇒ IF): (H) ⇒ Option[Cod]", "member" : "provingground.induction.IndexedConstructorPatternMap.recDefCase", "link" : "provingground\/induction\/IndexedConstructorPatternMap.html#recDefCase(cons:ConstructorType,data:RecDataType,f:=>IF):H=>Option[Cod]", "kind" : "abstract def"}, {"label" : "inducDataTyp", "tail" : "(w: Fb, xs: IDFT)(cons: ConstructorType): Typ[InducDataType]", "member" : "provingground.induction.IndexedConstructorPatternMap.inducDataTyp", "link" : "provingground\/induction\/IndexedConstructorPatternMap.html#inducDataTyp(w:Fb,xs:IDFT)(cons:ConstructorType):provingground.HoTT.Typ[InducDataType]", "kind" : "abstract def"}, {"label" : "recDataTyp", "tail" : "(wb: Fb, x: Typ[Cod]): Typ[RecDataType]", "member" : "provingground.induction.IndexedConstructorPatternMap.recDataTyp", "link" : "provingground\/induction\/IndexedConstructorPatternMap.html#recDataTyp(wb:Fb,x:provingground.HoTT.Typ[Cod]):provingground.HoTT.Typ[RecDataType]", "kind" : "abstract def"}, {"label" : "apply", "tail" : "(tp: Fb): Typ[ConstructorType]", "member" : "provingground.induction.IndexedConstructorPatternMap.apply", "link" : "provingground\/induction\/IndexedConstructorPatternMap.html#apply(tp:Fb):provingground.HoTT.Typ[ConstructorType]", "kind" : "abstract def"}, {"label" : "subs", "tail" : "(x: Term, y: Term): IndexedConstructorPatternMap[Cod, ConstructorType, H, RecDataType, InducDataType, Fb, Index, IF, IDF, IDFT]", "member" : "provingground.induction.IndexedConstructorPatternMap.subs", "link" : "provingground\/induction\/IndexedConstructorPatternMap.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.induction.IndexedConstructorPatternMap[Cod,ConstructorType,H,RecDataType,InducDataType,Fb,Index,IF,IDF,IDFT]", "kind" : "abstract def"}, {"label" : "family", "tail" : ": TypFamilyMap[H, Fb, Cod, Index, IF, IDF, IDFT]", "member" : "provingground.induction.IndexedConstructorPatternMap.family", "link" : "provingground\/induction\/IndexedConstructorPatternMap.html#family:provingground.induction.TypFamilyMap[H,Fb,Cod,Index,IF,IDF,IDFT]", "kind" : "abstract val"}], "members_object" : [{"label" : "IndexedCnstDepFncPtnMap", "tail" : "", "member" : "provingground.induction.IndexedConstructorPatternMap.IndexedCnstDepFncPtnMap", "link" : "provingground\/induction\/IndexedConstructorPatternMap$.html#IndexedCnstDepFncPtnMap[T<:provingground.HoTT.Termwithprovingground.HoTT.Subs[T],Cod<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Cod],HC<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HC],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],HR<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HR],HI<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HI],Fb<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Fb],Index<:shapeless.HList,IF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IF],IDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDF],IDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT]]extendsIndexedConstructorPatternMap.IndexedRecursiveConstructorPatternMap[Cod,T,HC,provingground.HoTT.FuncLike[T,HC],H,provingground.HoTT.FuncLike[T,HR],provingground.HoTT.FuncLike[T,HI],HR,HI,Fb,Index,IF,IDF,IDFT]withProductwithSerializable", "kind" : "case class"}, {"label" : "IndexedCnstFncPtnMap", "tail" : "", "member" : "provingground.induction.IndexedConstructorPatternMap.IndexedCnstFncPtnMap", "link" : "provingground\/induction\/IndexedConstructorPatternMap$.html#IndexedCnstFncPtnMap[T<:provingground.HoTT.Termwithprovingground.HoTT.Subs[T],Cod<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Cod],HC<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HC],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],HR<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HR],HI<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HI],Fb<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Fb],Index<:shapeless.HList,IF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IF],IDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDF],IDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT]]extendsIndexedConstructorPatternMap.IndexedRecursiveConstructorPatternMap[Cod,T,HC,provingground.HoTT.Func[T,HC],H,provingground.HoTT.Func[T,HR],provingground.HoTT.FuncLike[T,HI],HR,HI,Fb,Index,IF,IDF,IDFT]withProductwithSerializable", "kind" : "case class"}, {"label" : "IndexedIndexedFuncPtnMap", "tail" : "", "member" : "provingground.induction.IndexedConstructorPatternMap.IndexedIndexedFuncPtnMap", "link" : "provingground\/induction\/IndexedConstructorPatternMap$.html#IndexedIndexedFuncPtnMap[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],HC<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HC],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],HR<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HR],HI<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HI],TT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TT],DT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[DT],Fb<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Fb],Index<:shapeless.HList,IF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IF],IDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDF],IDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT]]extendsIndexedConstructorPatternMap.IndexedRecursiveConstructorPatternMap[C,F,HC,provingground.HoTT.Func[F,HC],H,provingground.HoTT.Func[F,provingground.HoTT.Func[TT,HR]],provingground.HoTT.FuncLike[F,provingground.HoTT.Func[DT,HI]],HR,HI,Fb,Index,IF,IDF,IDFT]withProductwithSerializable", "kind" : "case class"}, {"label" : "IndexedFuncPtnMap", "tail" : "", "member" : "provingground.induction.IndexedConstructorPatternMap.IndexedFuncPtnMap", "link" : "provingground\/induction\/IndexedConstructorPatternMap$.html#IndexedFuncPtnMap[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],HC<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HC],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],HR<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HR],HI<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HI],TT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TT],DT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[DT],Fb<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Fb],Index<:shapeless.HList,IF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IF],IDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDF],IDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT]]extendsIndexedConstructorPatternMap.IndexedRecursiveConstructorPatternMap[C,F,HC,provingground.HoTT.Func[F,HC],H,provingground.HoTT.Func[F,provingground.HoTT.Func[TT,HR]],provingground.HoTT.FuncLike[F,provingground.HoTT.Func[DT,HI]],HR,HI,Fb,Index,IF,IDF,IDFT]withProductwithSerializable", "kind" : "case class"}, {"label" : "IndexedRecursiveConstructorPatternMap", "tail" : "", "member" : "provingground.induction.IndexedConstructorPatternMap.IndexedRecursiveConstructorPatternMap", "link" : "provingground\/induction\/IndexedConstructorPatternMap$.html#IndexedRecursiveConstructorPatternMap[Cod<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Cod],ArgType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[ArgType],HeadConstructorType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HeadConstructorType],CT<:provingground.HoTT.FuncLike[ArgType,HeadConstructorType]withprovingground.HoTT.Subs[CT],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],RecDataType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[RecDataType],InducDataType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[InducDataType],HeadRecDataType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HeadRecDataType],HeadInducDataType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HeadInducDataType],Fb<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Fb],Index<:shapeless.HList,IF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IF],IDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDF],IDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT]]extendsIndexedConstructorPatternMap[Cod,CT,H,RecDataType,InducDataType,Fb,Index,IF,IDF,IDFT]", "kind" : "abstract class"}, {"label" : "IndexedIdMap", "tail" : "", "member" : "provingground.induction.IndexedConstructorPatternMap.IndexedIdMap", "link" : "provingground\/induction\/IndexedConstructorPatternMap$.html#IndexedIdMap[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],Fb<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Fb],Index<:shapeless.HList,IF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IF],IDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDF],IDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT]]extendsIndexedConstructorPatternMap[C,H,H,C,C,Fb,Index,IF,IDF,IDFT]withProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/IndexedConstructorPatternMap$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/IndexedConstructorPatternMap$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/IndexedConstructorPatternMap$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/IndexedConstructorPatternMap$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/IndexedConstructorPatternMap$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/IndexedConstructorPatternMap$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/IndexedConstructorPatternMap$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructorPatternMap$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructorPatternMap$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructorPatternMap$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/IndexedConstructorPatternMap$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/IndexedConstructorPatternMap$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/IndexedConstructorPatternMap$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/IndexedConstructorPatternMap$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/IndexedConstructorPatternMap$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/IndexedConstructorPatternMap$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/IndexedConstructorPatternMap$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/IndexedConstructorPatternMap$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/IndexedConstructorPatternMap$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/induction\/IndexedConstructorPatternMap.html", "kind" : "class"}, {"name" : "provingground.induction.IndexedConstructorPatternMapper", "shortDescription" : "bridge between IndexedConstructorShape and IndexedConstructorPatternMap", "object" : "provingground\/induction\/IndexedConstructorPatternMapper$.html", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/induction\/IndexedConstructorPatternMapper.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/induction\/IndexedConstructorPatternMapper.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (IndexedConstructorPatternMapper[S, Cod, ConstructorType, H, RecDataType, InducDataType, F, Index, IF, IDF, IDFT]) ⇒ Boolean, msg: ⇒ Any): IndexedConstructorPatternMapper[S, Cod, ConstructorType, H, RecDataType, InducDataType, F, Index, IF, IDF, IDFT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/IndexedConstructorPatternMapper.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (IndexedConstructorPatternMapper[S, Cod, ConstructorType, H, RecDataType, InducDataType, F, Index, IF, IDF, IDFT]) ⇒ Boolean): IndexedConstructorPatternMapper[S, Cod, ConstructorType, H, RecDataType, InducDataType, F, Index, IF, IDF, IDFT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/IndexedConstructorPatternMapper.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): IndexedConstructorPatternMapper[S, Cod, ConstructorType, H, RecDataType, InducDataType, F, Index, IF, IDF, IDFT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/IndexedConstructorPatternMapper.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): IndexedConstructorPatternMapper[S, Cod, ConstructorType, H, RecDataType, InducDataType, F, Index, IF, IDF, IDFT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/IndexedConstructorPatternMapper.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (IndexedConstructorPatternMapper[S, Cod, ConstructorType, H, RecDataType, InducDataType, F, Index, IF, IDF, IDFT], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/induction\/IndexedConstructorPatternMapper.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (IndexedConstructorPatternMapper[S, Cod, ConstructorType, H, RecDataType, InducDataType, F, Index, IF, IDF, IDFT], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/induction\/IndexedConstructorPatternMapper.html#->[B](y:B):(A,B)", "kind" : "def"}, {"member" : "provingground.induction.IndexedConstructorPatternMapper#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/IndexedConstructorPatternMapper.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/IndexedConstructorPatternMapper.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/IndexedConstructorPatternMapper.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/IndexedConstructorPatternMapper.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/IndexedConstructorPatternMapper.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/IndexedConstructorPatternMapper.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/IndexedConstructorPatternMapper.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructorPatternMapper.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructorPatternMapper.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructorPatternMapper.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/IndexedConstructorPatternMapper.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/IndexedConstructorPatternMapper.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/IndexedConstructorPatternMapper.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/IndexedConstructorPatternMapper.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/IndexedConstructorPatternMapper.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/IndexedConstructorPatternMapper.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/IndexedConstructorPatternMapper.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/IndexedConstructorPatternMapper.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/IndexedConstructorPatternMapper.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "mapper", "tail" : "(fmlyMapper: TypFamilyMapper[H, F, Cod, Index, IF, IDF, IDFT]): (IndexedConstructorShape[S, H, F, ConstructorType, Index]) ⇒ IndexedConstructorPatternMap[Cod, ConstructorType, H, RecDataType, InducDataType, F, Index, IF, IDF, IDFT]", "member" : "provingground.induction.IndexedConstructorPatternMapper.mapper", "link" : "provingground\/induction\/IndexedConstructorPatternMapper.html#mapper(implicitfmlyMapper:provingground.induction.TypFamilyMapper[H,F,Cod,Index,IF,IDF,IDFT]):provingground.induction.IndexedConstructorShape[S,H,F,ConstructorType,Index]=>provingground.induction.IndexedConstructorPatternMap[Cod,ConstructorType,H,RecDataType,InducDataType,F,Index,IF,IDF,IDFT]", "kind" : "abstract def"}], "members_object" : [{"label" : "indexedCnstDepFncPtnMapper", "tail" : "(arg0: Subst[Index], head: IndexedConstructorPatternMapper[HShape, Cod, HC, H, HR, HI, Fb, Index, IF, IDF, IDFT]): IndexedConstructorPatternMapper[::[IndexedCnstDepFuncConsShape.type, HShape], Cod, FuncLike[T, HC], H, FuncLike[T, HR], FuncLike[T, HI], Fb, Index, IF, IDF, IDFT]", "member" : "provingground.induction.IndexedConstructorPatternMapper.indexedCnstDepFncPtnMapper", "link" : "provingground\/induction\/IndexedConstructorPatternMapper$.html#indexedCnstDepFncPtnMapper[HShape<:shapeless.HList,T<:provingground.HoTT.Termwithprovingground.HoTT.Subs[T],Cod<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Cod],HC<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HC],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],HR<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HR],HI<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HI],Fb<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Fb],Index<:shapeless.HList,IF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IF],IDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDF],IDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT]](implicitevidence$20:provingground.induction.Subst[Index],implicithead:provingground.induction.IndexedConstructorPatternMapper[HShape,Cod,HC,H,HR,HI,Fb,Index,IF,IDF,IDFT]):provingground.induction.IndexedConstructorPatternMapper[provingground.induction.IndexedConstructorShape.IndexedCnstDepFuncConsShape.type::HShape,Cod,provingground.HoTT.FuncLike[T,HC],H,provingground.HoTT.FuncLike[T,HR],provingground.HoTT.FuncLike[T,HI],Fb,Index,IF,IDF,IDFT]", "kind" : "implicit def"}, {"label" : "indexedCnstFncPtnMapper", "tail" : "(arg0: Subst[Index], head: IndexedConstructorPatternMapper[HShape, Cod, HC, H, HR, HI, Fb, Index, IF, IDF, IDFT]): IndexedConstructorPatternMapper[::[IndexedCnstFuncConsShape.type, HShape], Cod, Func[T, HC], H, Func[T, HR], FuncLike[T, HI], Fb, Index, IF, IDF, IDFT]", "member" : "provingground.induction.IndexedConstructorPatternMapper.indexedCnstFncPtnMapper", "link" : "provingground\/induction\/IndexedConstructorPatternMapper$.html#indexedCnstFncPtnMapper[HShape<:shapeless.HList,T<:provingground.HoTT.Termwithprovingground.HoTT.Subs[T],Cod<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Cod],HC<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HC],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],HR<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HR],HI<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HI],Fb<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Fb],Index<:shapeless.HList,IF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IF],IDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDF],IDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT]](implicitevidence$19:provingground.induction.Subst[Index],implicithead:provingground.induction.IndexedConstructorPatternMapper[HShape,Cod,HC,H,HR,HI,Fb,Index,IF,IDF,IDFT]):provingground.induction.IndexedConstructorPatternMapper[provingground.induction.IndexedConstructorShape.IndexedCnstFuncConsShape.type::HShape,Cod,provingground.HoTT.Func[T,HC],H,provingground.HoTT.Func[T,HR],provingground.HoTT.FuncLike[T,HI],Fb,Index,IF,IDF,IDFT]", "kind" : "implicit def"}, {"label" : "indexedIndexedFuncPtnMap", "tail" : "(arg0: Subst[Index], tail: IndexedIterFuncPtnMapper[H, Fb, Index, C, F, TT, DT, IF, IDF, IDFT], head: IndexedConstructorPatternMapper[HShape, C, HC, H, HR, HI, Fb, Index, IF, IDF, IDFT]): IndexedConstructorPatternMapper[::[IndexedIndexedFuncConsShape.type, HShape], C, Func[F, HC], H, Func[F, Func[TT, HR]], FuncLike[F, Func[DT, HI]], Fb, Index, IF, IDF, IDFT]", "member" : "provingground.induction.IndexedConstructorPatternMapper.indexedIndexedFuncPtnMap", "link" : "provingground\/induction\/IndexedConstructorPatternMapper$.html#indexedIndexedFuncPtnMap[HShape<:shapeless.HList,C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],HC<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HC],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],HR<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HR],HI<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HI],TT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TT],DT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[DT],Fb<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Fb],Index<:shapeless.HList,IF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IF],IDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDF],IDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT]](implicitevidence$18:provingground.induction.Subst[Index],implicittail:provingground.induction.IndexedIterFuncPtnMapper[H,Fb,Index,C,F,TT,DT,IF,IDF,IDFT],implicithead:provingground.induction.IndexedConstructorPatternMapper[HShape,C,HC,H,HR,HI,Fb,Index,IF,IDF,IDFT]):provingground.induction.IndexedConstructorPatternMapper[provingground.induction.IndexedConstructorShape.IndexedIndexedFuncConsShape.type::HShape,C,provingground.HoTT.Func[F,HC],H,provingground.HoTT.Func[F,provingground.HoTT.Func[TT,HR]],provingground.HoTT.FuncLike[F,provingground.HoTT.Func[DT,HI]],Fb,Index,IF,IDF,IDFT]", "kind" : "implicit def"}, {"label" : "indexedFuncPtnMap", "tail" : "(arg0: Subst[Index], tail: IterFuncMapper[H, C, FI, TT, DT], head: IndexedConstructorPatternMapper[HShape, C, HC, H, HR, HI, Fb, Index, IF, IDF, IDFT]): IndexedConstructorPatternMapper[::[IndexedFuncConsShape.type, HShape], C, Func[FI, HC], H, Func[FI, Func[TT, HR]], FuncLike[FI, Func[DT, HI]], Fb, Index, IF, IDF, IDFT]", "member" : "provingground.induction.IndexedConstructorPatternMapper.indexedFuncPtnMap", "link" : "provingground\/induction\/IndexedConstructorPatternMapper$.html#indexedFuncPtnMap[HShape<:shapeless.HList,C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],FI<:provingground.HoTT.Termwithprovingground.HoTT.Subs[FI],HC<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HC],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],HR<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HR],HI<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HI],TT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TT],DT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[DT],Fb<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Fb],Index<:shapeless.HList,IF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IF],IDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDF],IDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT]](implicitevidence$17:provingground.induction.Subst[Index],implicittail:provingground.induction.IterFuncMapper[H,C,FI,TT,DT],implicithead:provingground.induction.IndexedConstructorPatternMapper[HShape,C,HC,H,HR,HI,Fb,Index,IF,IDF,IDFT]):provingground.induction.IndexedConstructorPatternMapper[provingground.induction.IndexedConstructorShape.IndexedFuncConsShape.type::HShape,C,provingground.HoTT.Func[FI,HC],H,provingground.HoTT.Func[FI,provingground.HoTT.Func[TT,HR]],provingground.HoTT.FuncLike[FI,provingground.HoTT.Func[DT,HI]],Fb,Index,IF,IDF,IDFT]", "kind" : "implicit def"}, {"label" : "indexedIdMapper", "tail" : "(arg0: Subst[Index], family: TypFamilyMapper[H, F, C, Index, IF, IDF, IDFT]): IndexedConstructorPatternMapper[HNil, C, H, H, C, C, F, Index, IF, IDF, IDFT]", "member" : "provingground.induction.IndexedConstructorPatternMapper.indexedIdMapper", "link" : "provingground\/induction\/IndexedConstructorPatternMapper$.html#indexedIdMapper[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],Index<:shapeless.HList,IF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IF],IDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDF],IDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT]](implicitevidence$16:provingground.induction.Subst[Index],implicitfamily:provingground.induction.TypFamilyMapper[H,F,C,Index,IF,IDF,IDFT]):provingground.induction.IndexedConstructorPatternMapper[shapeless.HNil,C,H,H,C,C,F,Index,IF,IDF,IDFT]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/IndexedConstructorPatternMapper$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/IndexedConstructorPatternMapper$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/IndexedConstructorPatternMapper$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/IndexedConstructorPatternMapper$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/IndexedConstructorPatternMapper$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/IndexedConstructorPatternMapper$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/IndexedConstructorPatternMapper$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructorPatternMapper$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructorPatternMapper$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructorPatternMapper$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/IndexedConstructorPatternMapper$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/IndexedConstructorPatternMapper$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/IndexedConstructorPatternMapper$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/IndexedConstructorPatternMapper$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/IndexedConstructorPatternMapper$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/IndexedConstructorPatternMapper$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/IndexedConstructorPatternMapper$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/IndexedConstructorPatternMapper$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/IndexedConstructorPatternMapper$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/induction\/IndexedConstructorPatternMapper.html", "kind" : "class"}, {"name" : "provingground.induction.IndexedConstructorSeqDom", "shortDescription" : "Essentially the definition of an indexed inductive type;", "object" : "provingground\/induction\/IndexedConstructorSeqDom$.html", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/induction\/IndexedConstructorSeqDom.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/induction\/IndexedConstructorSeqDom.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (IndexedConstructorSeqDom[SS, H, F, Index, Intros]) ⇒ Boolean, msg: ⇒ Any): IndexedConstructorSeqDom[SS, H, F, Index, Intros]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/IndexedConstructorSeqDom.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (IndexedConstructorSeqDom[SS, H, F, Index, Intros]) ⇒ Boolean): IndexedConstructorSeqDom[SS, H, F, Index, Intros]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/IndexedConstructorSeqDom.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): IndexedConstructorSeqDom[SS, H, F, Index, Intros]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/IndexedConstructorSeqDom.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): IndexedConstructorSeqDom[SS, H, F, Index, Intros]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/IndexedConstructorSeqDom.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (IndexedConstructorSeqDom[SS, H, F, Index, Intros], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/induction\/IndexedConstructorSeqDom.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (IndexedConstructorSeqDom[SS, H, F, Index, Intros], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/induction\/IndexedConstructorSeqDom.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "|:", "tail" : "(head: IndexedConstructor[HShape, H, F, HC, Index]): Cons[SS, HShape, H, F, HC, Index, Intros]", "member" : "provingground.induction.IndexedConstructorSeqDom.|:", "link" : "provingground\/induction\/IndexedConstructorSeqDom.html#|:[HShape<:shapeless.HList,HC<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HC]](head:provingground.induction.IndexedConstructor[HShape,H,F,HC,Index]):provingground.induction.IndexedConstructorSeqDom.Cons[SS,HShape,H,F,HC,Index,Intros]", "kind" : "def"}, {"label" : "inducE", "tail" : "(Xs: IDFT): InducType forSome {type InducType <: Term with Subs[InducType]}", "member" : "provingground.induction.IndexedConstructorSeqDom.inducE", "link" : "provingground\/induction\/IndexedConstructorSeqDom.html#inducE[IDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT]](Xs:IDFT):InducTypeforSome{typeInducType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[InducType]}", "kind" : "def"}, {"label" : "induc", "tail" : "(Xs: IDFT)(mapper: IndexedConstructorSeqMapper[SS, C, H, RecType, InducType, Intros, F, Index, IF, IDF, IDFT]): InducType", "member" : "provingground.induction.IndexedConstructorSeqDom.induc", "link" : "provingground\/induction\/IndexedConstructorSeqDom.html#induc[IDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],IF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IF],IDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDF],RecType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[RecType],InducType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[InducType]](Xs:IDFT)(implicitmapper:provingground.induction.IndexedConstructorSeqMapper[SS,C,H,RecType,InducType,Intros,F,Index,IF,IDF,IDFT]):InducType", "kind" : "def"}, {"label" : "getMapper", "tail" : "(X: Typ[C])(mapper: IndexedConstructorSeqMapper[SS, C, H, RecType, InducType, Intros, F, Index, IF, IDF, IDFT]): IndexedConstructorSeqMap[C, H, RecType, InducType, Intros, F, Index, IF, IDF, IDFT]", "member" : "provingground.induction.IndexedConstructorSeqDom.getMapper", "link" : "provingground\/induction\/IndexedConstructorSeqDom.html#getMapper[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],IDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT],IF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IF],IDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDF],RecType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[RecType],InducType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[InducType]](X:provingground.HoTT.Typ[C])(implicitmapper:provingground.induction.IndexedConstructorSeqMapper[SS,C,H,RecType,InducType,Intros,F,Index,IF,IDF,IDFT]):provingground.induction.IndexedConstructorSeqMap[C,H,RecType,InducType,Intros,F,Index,IF,IDF,IDFT]", "kind" : "def"}, {"label" : "getInduc", "tail" : "(X: Typ[C])(mapper: IndexedConstructorSeqMapper[SS, C, H, RecType, InducType, Intros, F, Index, IF, IDF, IDFT]): (IDFT) ⇒ InducType", "member" : "provingground.induction.IndexedConstructorSeqDom.getInduc", "link" : "provingground\/induction\/IndexedConstructorSeqDom.html#getInduc[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],IDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT],IF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IF],IDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDF],RecType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[RecType],InducType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[InducType]](X:provingground.HoTT.Typ[C])(implicitmapper:provingground.induction.IndexedConstructorSeqMapper[SS,C,H,RecType,InducType,Intros,F,Index,IF,IDF,IDFT]):IDFT=>InducType", "kind" : "def"}, {"label" : "rec", "tail" : "(X: Typ[C])(mapper: IndexedConstructorSeqMapper[SS, C, H, RecType, InducType, Intros, F, Index, IF, IDF, IDFT]): RecType", "member" : "provingground.induction.IndexedConstructorSeqDom.rec", "link" : "provingground\/induction\/IndexedConstructorSeqDom.html#rec[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],IF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IF],IDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDF],IDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT],RecType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[RecType],InducType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[InducType]](X:provingground.HoTT.Typ[C])(implicitmapper:provingground.induction.IndexedConstructorSeqMapper[SS,C,H,RecType,InducType,Intros,F,Index,IF,IDF,IDFT]):RecType", "kind" : "def"}, {"label" : "recE", "tail" : "(x: Typ[C]): RecType forSome {type RecType <: Term with Subs[RecType]}", "member" : "provingground.induction.IndexedConstructorSeqDom.recE", "link" : "provingground\/induction\/IndexedConstructorSeqDom.html#recE[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C]](x:provingground.HoTT.Typ[C]):RecTypeforSome{typeRecType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[RecType]}", "kind" : "def"}, {"member" : "provingground.induction.IndexedConstructorSeqDom#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/IndexedConstructorSeqDom.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/IndexedConstructorSeqDom.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/IndexedConstructorSeqDom.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/IndexedConstructorSeqDom.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/IndexedConstructorSeqDom.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/IndexedConstructorSeqDom.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/IndexedConstructorSeqDom.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructorSeqDom.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructorSeqDom.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructorSeqDom.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/IndexedConstructorSeqDom.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/IndexedConstructorSeqDom.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/IndexedConstructorSeqDom.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/IndexedConstructorSeqDom.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/IndexedConstructorSeqDom.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/IndexedConstructorSeqDom.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/IndexedConstructorSeqDom.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/IndexedConstructorSeqDom.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/IndexedConstructorSeqDom.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "subs", "tail" : "(x: Term, y: Term): IndexedConstructorSeqDom[SS, H, F, Index, Intros]", "member" : "provingground.induction.IndexedConstructorSeqDom.subs", "link" : "provingground\/induction\/IndexedConstructorSeqDom.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.induction.IndexedConstructorSeqDom[SS,H,F,Index,Intros]", "kind" : "abstract def"}, {"label" : "mapped", "tail" : "(fmlyMapper: TypFamilyMapper[H, F, C, Index, IF, IDF, IDFT]): IndexedConstructorSeqMap[C, H, RecType, InducType, Intros, F, Index, IF, IDF, IDFT] forSome {type RecType <: Term with Subs[RecType], type InducType <: Term with Subs[InducType]}", "member" : "provingground.induction.IndexedConstructorSeqDom.mapped", "link" : "provingground\/induction\/IndexedConstructorSeqDom.html#mapped[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],IF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IF],IDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDF],IDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT]](implicitfmlyMapper:provingground.induction.TypFamilyMapper[H,F,C,Index,IF,IDF,IDFT]):provingground.induction.IndexedConstructorSeqMap[C,H,RecType,InducType,Intros,F,Index,IF,IDF,IDFT]forSome{typeRecType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[RecType];typeInducType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[InducType]}", "kind" : "abstract def"}, {"label" : "intros", "tail" : ": Intros", "member" : "provingground.induction.IndexedConstructorSeqDom.intros", "link" : "provingground\/induction\/IndexedConstructorSeqDom.html#intros:Intros", "kind" : "abstract val"}, {"label" : "W", "tail" : ": F", "member" : "provingground.induction.IndexedConstructorSeqDom.W", "link" : "provingground\/induction\/IndexedConstructorSeqDom.html#W:F", "kind" : "abstract val"}, {"label" : "family", "tail" : ": TypFamilyPtn[H, F, Index]", "member" : "provingground.induction.IndexedConstructorSeqDom.family", "link" : "provingground\/induction\/IndexedConstructorSeqDom.html#family:provingground.induction.TypFamilyPtn[H,F,Index]", "kind" : "abstract val"}], "members_object" : [{"label" : "Cons", "tail" : "", "member" : "provingground.induction.IndexedConstructorSeqDom.Cons", "link" : "provingground\/induction\/IndexedConstructorSeqDom$.html#Cons[TSS<:shapeless.HList,HShape<:shapeless.HList,H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],HC<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HC],Index<:shapeless.HList,TIntro<:shapeless.HList]extendsIndexedConstructorSeqDom[HShape::TSS,H,F,Index,HC::TIntro]withProductwithSerializable", "kind" : "case class"}, {"label" : "Empty", "tail" : "", "member" : "provingground.induction.IndexedConstructorSeqDom.Empty", "link" : "provingground\/induction\/IndexedConstructorSeqDom$.html#Empty[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],Index<:shapeless.HList]extendsIndexedConstructorSeqDom[shapeless.HNil,H,F,Index,shapeless.HNil]withProductwithSerializable", "kind" : "case class"}, {"label" : "get", "tail" : "(w: F)(g: TypFamilyPtnGetter[F, H, Index]): Empty[H, F, Index]", "member" : "provingground.induction.IndexedConstructorSeqDom.get", "link" : "provingground\/induction\/IndexedConstructorSeqDom$.html#get[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],Index<:shapeless.HList](w:F)(implicitg:provingground.induction.TypFamilyPtnGetter[F,H,Index]):provingground.induction.IndexedConstructorSeqDom.Empty[H,F,Index]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/IndexedConstructorSeqDom$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/IndexedConstructorSeqDom$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/IndexedConstructorSeqDom$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/IndexedConstructorSeqDom$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/IndexedConstructorSeqDom$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/IndexedConstructorSeqDom$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/IndexedConstructorSeqDom$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructorSeqDom$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructorSeqDom$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructorSeqDom$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/IndexedConstructorSeqDom$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/IndexedConstructorSeqDom$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/IndexedConstructorSeqDom$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/IndexedConstructorSeqDom$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/IndexedConstructorSeqDom$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/IndexedConstructorSeqDom$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/IndexedConstructorSeqDom$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/IndexedConstructorSeqDom$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/IndexedConstructorSeqDom$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/induction\/IndexedConstructorSeqDom.html", "kind" : "class"}, {"name" : "provingground.induction.IndexedConstructorSeqMap", "shortDescription" : "indexed version of ConstructorSeqMap, giving definitions of  indexed recursion and induction functions.", "object" : "provingground\/induction\/IndexedConstructorSeqMap$.html", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/induction\/IndexedConstructorSeqMap.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/induction\/IndexedConstructorSeqMap.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (IndexedConstructorSeqMap[C, H, RecType, InducType, Intros, F, Index, IF, IDF, IDFT]) ⇒ Boolean, msg: ⇒ Any): IndexedConstructorSeqMap[C, H, RecType, InducType, Intros, F, Index, IF, IDF, IDFT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/IndexedConstructorSeqMap.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (IndexedConstructorSeqMap[C, H, RecType, InducType, Intros, F, Index, IF, IDF, IDFT]) ⇒ Boolean): IndexedConstructorSeqMap[C, H, RecType, InducType, Intros, F, Index, IF, IDF, IDFT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/IndexedConstructorSeqMap.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): IndexedConstructorSeqMap[C, H, RecType, InducType, Intros, F, Index, IF, IDF, IDFT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/IndexedConstructorSeqMap.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): IndexedConstructorSeqMap[C, H, RecType, InducType, Intros, F, Index, IF, IDF, IDFT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/IndexedConstructorSeqMap.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (IndexedConstructorSeqMap[C, H, RecType, InducType, Intros, F, Index, IF, IDF, IDFT], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/induction\/IndexedConstructorSeqMap.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (IndexedConstructorSeqMap[C, H, RecType, InducType, Intros, F, Index, IF, IDF, IDFT], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/induction\/IndexedConstructorSeqMap.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "inducF", "tail" : "(fibre: Term): InducType", "member" : "provingground.induction.IndexedConstructorSeqMap.inducF", "link" : "provingground\/induction\/IndexedConstructorSeqMap.html#inducF(fibre:provingground.HoTT.Term):InducType", "kind" : "def"}, {"label" : "induc", "tail" : "(fibre: IDFT): InducType", "member" : "provingground.induction.IndexedConstructorSeqMap.induc", "link" : "provingground\/induction\/IndexedConstructorSeqMap.html#induc(fibre:IDFT):InducType", "kind" : "def"}, {"label" : "rec", "tail" : "(X: Typ[C]): RecType", "member" : "provingground.induction.IndexedConstructorSeqMap.rec", "link" : "provingground\/induction\/IndexedConstructorSeqMap.html#rec(X:provingground.HoTT.Typ[C]):RecType", "kind" : "def"}, {"member" : "provingground.induction.IndexedConstructorSeqMap#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/IndexedConstructorSeqMap.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/IndexedConstructorSeqMap.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/IndexedConstructorSeqMap.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/IndexedConstructorSeqMap.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/IndexedConstructorSeqMap.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/IndexedConstructorSeqMap.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/IndexedConstructorSeqMap.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructorSeqMap.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructorSeqMap.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructorSeqMap.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/IndexedConstructorSeqMap.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/IndexedConstructorSeqMap.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/IndexedConstructorSeqMap.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/IndexedConstructorSeqMap.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/IndexedConstructorSeqMap.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/IndexedConstructorSeqMap.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/IndexedConstructorSeqMap.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/IndexedConstructorSeqMap.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/IndexedConstructorSeqMap.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "inducDataLambda", "tail" : "(fibre: IDFT): (IDF) ⇒ InducType", "member" : "provingground.induction.IndexedConstructorSeqMap.inducDataLambda", "link" : "provingground\/induction\/IndexedConstructorSeqMap.html#inducDataLambda(fibre:IDFT):IDF=>InducType", "kind" : "abstract def"}, {"label" : "inducDefn", "tail" : "(fibre: IDFT): IndexedInductiveDefinition[H, F, C, Index, IF, IDF, IDFT]", "member" : "provingground.induction.IndexedConstructorSeqMap.inducDefn", "link" : "provingground\/induction\/IndexedConstructorSeqMap.html#inducDefn(fibre:IDFT):provingground.induction.IndexedInductiveDefinition[H,F,C,Index,IF,IDF,IDFT]", "kind" : "abstract def"}, {"label" : "recDataLambda", "tail" : "(X: Typ[C]): (IF) ⇒ RecType", "member" : "provingground.induction.IndexedConstructorSeqMap.recDataLambda", "link" : "provingground\/induction\/IndexedConstructorSeqMap.html#recDataLambda(X:provingground.HoTT.Typ[C]):IF=>RecType", "kind" : "abstract def"}, {"label" : "W", "tail" : ": F", "member" : "provingground.induction.IndexedConstructorSeqMap.W", "link" : "provingground\/induction\/IndexedConstructorSeqMap.html#W:F", "kind" : "abstract val"}, {"label" : "recDefn", "tail" : "(X: Typ[C]): IndexedRecursiveDefinition[H, F, C, Index, IF, IDF, IDFT]", "member" : "provingground.induction.IndexedConstructorSeqMap.recDefn", "link" : "provingground\/induction\/IndexedConstructorSeqMap.html#recDefn(X:provingground.HoTT.Typ[C]):provingground.induction.IndexedRecursiveDefinition[H,F,C,Index,IF,IDF,IDFT]", "kind" : "abstract def"}, {"label" : "family", "tail" : ": TypFamilyMap[H, F, C, Index, IF, IDF, IDFT]", "member" : "provingground.induction.IndexedConstructorSeqMap.family", "link" : "provingground\/induction\/IndexedConstructorSeqMap.html#family:provingground.induction.TypFamilyMap[H,F,C,Index,IF,IDF,IDFT]", "kind" : "abstract val"}], "members_object" : [{"label" : "Cons", "tail" : "", "member" : "provingground.induction.IndexedConstructorSeqMap.Cons", "link" : "provingground\/induction\/IndexedConstructorSeqMap$.html#Cons[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],Cod<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Cod],RD<:provingground.HoTT.Termwithprovingground.HoTT.Subs[RD],ID<:provingground.HoTT.Termwithprovingground.HoTT.Subs[ID],TR<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TR],TI<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TI],TIntros<:shapeless.HList,F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],Index<:shapeless.HList,IF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IF],IDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDF],IDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT]]extendsIndexedConstructorSeqMap[Cod,H,provingground.HoTT.Func[RD,TR],provingground.HoTT.Func[ID,TI],C::TIntros,F,Index,IF,IDF,IDFT]withProductwithSerializable", "kind" : "case class"}, {"label" : "Empty", "tail" : "", "member" : "provingground.induction.IndexedConstructorSeqMap.Empty", "link" : "provingground\/induction\/IndexedConstructorSeqMap$.html#Empty[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],Index<:shapeless.HList,IF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IF],IDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDF],IDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT]]extendsIndexedConstructorSeqMap[C,H,IF,IDF,shapeless.HNil,F,Index,IF,IDF,IDFT]withProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/IndexedConstructorSeqMap$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/IndexedConstructorSeqMap$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/IndexedConstructorSeqMap$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/IndexedConstructorSeqMap$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/IndexedConstructorSeqMap$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/IndexedConstructorSeqMap$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/IndexedConstructorSeqMap$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructorSeqMap$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructorSeqMap$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructorSeqMap$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/IndexedConstructorSeqMap$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/IndexedConstructorSeqMap$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/IndexedConstructorSeqMap$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/IndexedConstructorSeqMap$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/IndexedConstructorSeqMap$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/IndexedConstructorSeqMap$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/IndexedConstructorSeqMap$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/IndexedConstructorSeqMap$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/IndexedConstructorSeqMap$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/induction\/IndexedConstructorSeqMap.html", "kind" : "class"}, {"name" : "provingground.induction.IndexedConstructorSeqMapper", "shortDescription" : "bride between IndexedConstructorSeqDom and IndexedConstructorSeqMap", "object" : "provingground\/induction\/IndexedConstructorSeqMapper$.html", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/induction\/IndexedConstructorSeqMapper.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/induction\/IndexedConstructorSeqMapper.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (IndexedConstructorSeqMapper[SS, C, H, RecType, InducType, Intros, F, Index, IF, IDF, IDFT]) ⇒ Boolean, msg: ⇒ Any): IndexedConstructorSeqMapper[SS, C, H, RecType, InducType, Intros, F, Index, IF, IDF, IDFT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/IndexedConstructorSeqMapper.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (IndexedConstructorSeqMapper[SS, C, H, RecType, InducType, Intros, F, Index, IF, IDF, IDFT]) ⇒ Boolean): IndexedConstructorSeqMapper[SS, C, H, RecType, InducType, Intros, F, Index, IF, IDF, IDFT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/IndexedConstructorSeqMapper.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): IndexedConstructorSeqMapper[SS, C, H, RecType, InducType, Intros, F, Index, IF, IDF, IDFT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/IndexedConstructorSeqMapper.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): IndexedConstructorSeqMapper[SS, C, H, RecType, InducType, Intros, F, Index, IF, IDF, IDFT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/IndexedConstructorSeqMapper.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (IndexedConstructorSeqMapper[SS, C, H, RecType, InducType, Intros, F, Index, IF, IDF, IDFT], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/induction\/IndexedConstructorSeqMapper.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (IndexedConstructorSeqMapper[SS, C, H, RecType, InducType, Intros, F, Index, IF, IDF, IDFT], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/induction\/IndexedConstructorSeqMapper.html#->[B](y:B):(A,B)", "kind" : "def"}, {"member" : "provingground.induction.IndexedConstructorSeqMapper#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/IndexedConstructorSeqMapper.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/IndexedConstructorSeqMapper.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/IndexedConstructorSeqMapper.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/IndexedConstructorSeqMapper.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/IndexedConstructorSeqMapper.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/IndexedConstructorSeqMapper.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/IndexedConstructorSeqMapper.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructorSeqMapper.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructorSeqMapper.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructorSeqMapper.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/IndexedConstructorSeqMapper.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/IndexedConstructorSeqMapper.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/IndexedConstructorSeqMapper.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/IndexedConstructorSeqMapper.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/IndexedConstructorSeqMapper.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/IndexedConstructorSeqMapper.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/IndexedConstructorSeqMapper.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/IndexedConstructorSeqMapper.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/IndexedConstructorSeqMapper.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "mapped", "tail" : "(seqdom: IndexedConstructorSeqDom[SS, H, F, Index, Intros])(W: F, family: TypFamilyPtn[H, F, Index]): IndexedConstructorSeqMap[C, H, RecType, InducType, Intros, F, Index, IF, IDF, IDFT]", "member" : "provingground.induction.IndexedConstructorSeqMapper.mapped", "link" : "provingground\/induction\/IndexedConstructorSeqMapper.html#mapped(seqdom:provingground.induction.IndexedConstructorSeqDom[SS,H,F,Index,Intros])(W:F,family:provingground.induction.TypFamilyPtn[H,F,Index]):provingground.induction.IndexedConstructorSeqMap[C,H,RecType,InducType,Intros,F,Index,IF,IDF,IDFT]", "kind" : "abstract def"}], "members_object" : [{"label" : "cons", "tail" : "(patternMapper: IndexedConstructorPatternMapper[HShape, Cod, ConstructorType, H, RD, ID, F, Index, IF, IDF, IDFT], tailMapper: IndexedConstructorSeqMapper[TSS, Cod, H, TR, TI, TIntros, F, Index, IF, IDF, IDFT], subst: Subst[Index], fmlyMapper: TypFamilyMapper[H, F, Cod, Index, IF, IDF, IDFT]): IndexedConstructorSeqMapper[::[HShape, TSS], Cod, H, Func[RD, TR], Func[ID, TI], ::[ConstructorType, TIntros], F, Index, IF, IDF, IDFT]", "member" : "provingground.induction.IndexedConstructorSeqMapper.cons", "link" : "provingground\/induction\/IndexedConstructorSeqMapper$.html#cons[TSS<:shapeless.HList,HShape<:shapeless.HList,H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],Cod<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Cod],ConstructorType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[ConstructorType],TIntros<:shapeless.HList,RD<:provingground.HoTT.Termwithprovingground.HoTT.Subs[RD],ID<:provingground.HoTT.Termwithprovingground.HoTT.Subs[ID],TR<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TR],TI<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TI],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],Index<:shapeless.HList,IF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IF],IDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDF],IDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT]](implicitpatternMapper:provingground.induction.IndexedConstructorPatternMapper[HShape,Cod,ConstructorType,H,RD,ID,F,Index,IF,IDF,IDFT],implicittailMapper:provingground.induction.IndexedConstructorSeqMapper[TSS,Cod,H,TR,TI,TIntros,F,Index,IF,IDF,IDFT],implicitsubst:provingground.induction.Subst[Index],implicitfmlyMapper:provingground.induction.TypFamilyMapper[H,F,Cod,Index,IF,IDF,IDFT]):provingground.induction.IndexedConstructorSeqMapper[HShape::TSS,Cod,H,provingground.HoTT.Func[RD,TR],provingground.HoTT.Func[ID,TI],ConstructorType::TIntros,F,Index,IF,IDF,IDFT]", "kind" : "implicit def"}, {"label" : "empty", "tail" : "(subst: Subst[Index], fmlyMapper: TypFamilyMapper[H, F, C, Index, IF, IDF, IDFT]): IndexedConstructorSeqMapper[HNil, C, H, IF, IDF, HNil, F, Index, IF, IDF, IDFT] { def mapped(seqdom: provingground.induction.IndexedConstructorSeqDom[shapeless.HNil,H,F,Index,shapeless.HNil])(W: F,family: provingground.induction.TypFamilyPtn[H,F,Index]): provingground.induction.IndexedConstructorSeqMap.Empty[C,H,F,Index,IF,IDF,IDFT] }", "member" : "provingground.induction.IndexedConstructorSeqMapper.empty", "link" : "provingground\/induction\/IndexedConstructorSeqMapper$.html#empty[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],Index<:shapeless.HList,IF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IF],IDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDF],IDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT]](implicitsubst:provingground.induction.Subst[Index],implicitfmlyMapper:provingground.induction.TypFamilyMapper[H,F,C,Index,IF,IDF,IDFT]):provingground.induction.IndexedConstructorSeqMapper[shapeless.HNil,C,H,IF,IDF,shapeless.HNil,F,Index,IF,IDF,IDFT]{defmapped(seqdom:provingground.induction.IndexedConstructorSeqDom[shapeless.HNil,H,F,Index,shapeless.HNil])(W:F,family:provingground.induction.TypFamilyPtn[H,F,Index]):provingground.induction.IndexedConstructorSeqMap.Empty[C,H,F,Index,IF,IDF,IDFT]}", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/IndexedConstructorSeqMapper$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/IndexedConstructorSeqMapper$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/IndexedConstructorSeqMapper$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/IndexedConstructorSeqMapper$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/IndexedConstructorSeqMapper$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/IndexedConstructorSeqMapper$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/IndexedConstructorSeqMapper$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructorSeqMapper$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructorSeqMapper$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructorSeqMapper$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/IndexedConstructorSeqMapper$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/IndexedConstructorSeqMapper$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/IndexedConstructorSeqMapper$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/IndexedConstructorSeqMapper$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/IndexedConstructorSeqMapper$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/IndexedConstructorSeqMapper$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/IndexedConstructorSeqMapper$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/IndexedConstructorSeqMapper$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/IndexedConstructorSeqMapper$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/induction\/IndexedConstructorSeqMapper.html", "kind" : "class"}, {"name" : "provingground.induction.IndexedConstructorShape", "shortDescription" : "The introduction rule for an indexed inductive type;typically (A -> B -> W(x))-> C -> W(y) -> (D -> W(y)) -> W(z) as a function of WMay have Pi-types instead of function types.", "object" : "provingground\/induction\/IndexedConstructorShape$.html", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/induction\/IndexedConstructorShape.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/induction\/IndexedConstructorShape.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (IndexedConstructorShape[S, H, Fb, ConstructorType, Index]) ⇒ Boolean, msg: ⇒ Any): IndexedConstructorShape[S, H, Fb, ConstructorType, Index]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/IndexedConstructorShape.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (IndexedConstructorShape[S, H, Fb, ConstructorType, Index]) ⇒ Boolean): IndexedConstructorShape[S, H, Fb, ConstructorType, Index]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/IndexedConstructorShape.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): IndexedConstructorShape[S, H, Fb, ConstructorType, Index]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/IndexedConstructorShape.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): IndexedConstructorShape[S, H, Fb, ConstructorType, Index]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/IndexedConstructorShape.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (IndexedConstructorShape[S, H, Fb, ConstructorType, Index], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/induction\/IndexedConstructorShape.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (IndexedConstructorShape[S, H, Fb, ConstructorType, Index], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/induction\/IndexedConstructorShape.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "~>>:", "tail" : "(tailVar: T): IndexedCnstDepFuncConsShape[S, T, H, Fb, ConstructorType, Index]", "member" : "provingground.induction.IndexedConstructorShape.~>>:", "link" : "provingground\/induction\/IndexedConstructorShape.html#~>>:[T<:provingground.HoTT.Termwithprovingground.HoTT.Subs[T]](tailVar:T):provingground.induction.IndexedConstructorShape.IndexedCnstDepFuncConsShape[S,T,H,Fb,ConstructorType,Index]", "kind" : "def"}, {"label" : "->>:", "tail" : "(tail: Typ[T]): IndexedCnstFuncConsShape[S, T, H, Fb, ConstructorType, Index]", "member" : "provingground.induction.IndexedConstructorShape.->>:", "link" : "provingground\/induction\/IndexedConstructorShape.html#->>:[T<:provingground.HoTT.Termwithprovingground.HoTT.Subs[T]](tail:provingground.HoTT.Typ[T]):provingground.induction.IndexedConstructorShape.IndexedCnstFuncConsShape[S,T,H,Fb,ConstructorType,Index]", "kind" : "def"}, {"label" : "-->>:", "tail" : "(that: IndexedIterFuncShape[H, F, Fb, Index], ind: Index): IndexedIndexedFuncConsShape[S, H, F, ConstructorType, Fb, Index]", "member" : "provingground.induction.IndexedConstructorShape.-->>:", "link" : "provingground\/induction\/IndexedConstructorShape.html#-->>:[F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F]](that:provingground.induction.IndexedIterFuncShape[H,F,Fb,Index],ind:Index):provingground.induction.IndexedConstructorShape.IndexedIndexedFuncConsShape[S,H,F,ConstructorType,Fb,Index]", "kind" : "def"}, {"label" : "mapped", "tail" : "(fmlyMapper: TypFamilyMapper[H, Fb, C, Index, IF, IDF, IDFT]): IndexedConstructorPatternMap[C, ConstructorType, H, RecDataType, InducDataType, Fb, Index, IF, IDF, IDFT] forSome {type RecDataType <: Term with Subs[RecDataType], type InducDataType <: Term with Subs[InducDataType]}", "member" : "provingground.induction.IndexedConstructorShape.mapped", "link" : "provingground\/induction\/IndexedConstructorShape.html#mapped[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],IF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IF],IDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDF],IDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT]](implicitfmlyMapper:provingground.induction.TypFamilyMapper[H,Fb,C,Index,IF,IDF,IDFT]):provingground.induction.IndexedConstructorPatternMap[C,ConstructorType,H,RecDataType,InducDataType,Fb,Index,IF,IDF,IDFT]forSome{typeRecDataType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[RecDataType];typeInducDataType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[InducDataType]}", "kind" : "def"}, {"label" : ":::", "tail" : "(name: AnySym): IndexedConstructor[S, H, Fb, ConstructorType, Index]", "member" : "provingground.induction.IndexedConstructorShape.:::", "link" : "provingground\/induction\/IndexedConstructorShape.html#:::(name:provingground.HoTT.AnySym):provingground.induction.IndexedConstructor[S,H,Fb,ConstructorType,Index]", "kind" : "def"}, {"label" : "symbcons", "tail" : "(name: AnySym, tp: Fb): ConstructorType", "member" : "provingground.induction.IndexedConstructorShape.symbcons", "link" : "provingground\/induction\/IndexedConstructorShape.html#symbcons(name:provingground.HoTT.AnySym,tp:Fb):ConstructorType", "kind" : "def"}, {"member" : "provingground.induction.IndexedConstructorShape#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/IndexedConstructorShape.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/IndexedConstructorShape.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/IndexedConstructorShape.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/IndexedConstructorShape.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/IndexedConstructorShape.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/IndexedConstructorShape.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/IndexedConstructorShape.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructorShape.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructorShape.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructorShape.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/IndexedConstructorShape.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/IndexedConstructorShape.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/IndexedConstructorShape.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/IndexedConstructorShape.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/IndexedConstructorShape.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/IndexedConstructorShape.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/IndexedConstructorShape.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/IndexedConstructorShape.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/IndexedConstructorShape.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "mapper", "tail" : "(fmlyMapper: TypFamilyMapper[H, Fb, C, Index, IF, IDF, IDFT]): IndexedConstructorPatternMapper[S, C, ConstructorType, H, RecDataType, InducDataType, Fb, Index, IF, IDF, IDFT] forSome {type RecDataType <: Term with Subs[RecDataType], type InducDataType <: Term with Subs[InducDataType]}", "member" : "provingground.induction.IndexedConstructorShape.mapper", "link" : "provingground\/induction\/IndexedConstructorShape.html#mapper[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],IF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IF],IDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDF],IDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT]](implicitfmlyMapper:provingground.induction.TypFamilyMapper[H,Fb,C,Index,IF,IDF,IDFT]):provingground.induction.IndexedConstructorPatternMapper[S,C,ConstructorType,H,RecDataType,InducDataType,Fb,Index,IF,IDF,IDFT]forSome{typeRecDataType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[RecDataType];typeInducDataType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[InducDataType]}", "kind" : "abstract def"}, {"label" : "subs", "tail" : "(x: Term, y: Term): IndexedConstructorShape[S, H, Fb, ConstructorType, Index]", "member" : "provingground.induction.IndexedConstructorShape.subs", "link" : "provingground\/induction\/IndexedConstructorShape.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.induction.IndexedConstructorShape[S,H,Fb,ConstructorType,Index]", "kind" : "abstract def"}, {"label" : "apply", "tail" : "(tp: Fb): Typ[ConstructorType]", "member" : "provingground.induction.IndexedConstructorShape.apply", "link" : "provingground\/induction\/IndexedConstructorShape.html#apply(tp:Fb):provingground.HoTT.Typ[ConstructorType]", "kind" : "abstract def"}, {"label" : "family", "tail" : ": TypFamilyPtn[H, Fb, Index]", "member" : "provingground.induction.IndexedConstructorShape.family", "link" : "provingground\/induction\/IndexedConstructorShape.html#family:provingground.induction.TypFamilyPtn[H,Fb,Index]", "kind" : "abstract val"}], "members_object" : [{"label" : "IndexedCnstDepFuncConsShape", "tail" : "", "member" : "provingground.induction.IndexedConstructorShape.IndexedCnstDepFuncConsShape", "link" : "provingground\/induction\/IndexedConstructorShape$.html#IndexedCnstDepFuncConsShape[HShape<:shapeless.HList,T<:provingground.HoTT.Termwithprovingground.HoTT.Subs[T],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],HC<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HC],Index<:shapeless.HList]extendsIndexedConstructorShape[provingground.induction.IndexedConstructorShape.IndexedCnstDepFuncConsShape.type::HShape,H,F,provingground.HoTT.FuncLike[T,HC],Index]withProductwithSerializable", "kind" : "case class"}, {"label" : "IndexedCnstDepFuncConsShape", "tail" : "", "member" : "provingground.induction.IndexedConstructorShape.IndexedCnstDepFuncConsShape", "link" : "provingground\/induction\/IndexedConstructorShape$.html#IndexedCnstDepFuncConsShape", "kind" : "object"}, {"label" : "IndexedCnstFuncConsShape", "tail" : "", "member" : "provingground.induction.IndexedConstructorShape.IndexedCnstFuncConsShape", "link" : "provingground\/induction\/IndexedConstructorShape$.html#IndexedCnstFuncConsShape[HShape<:shapeless.HList,T<:provingground.HoTT.Termwithprovingground.HoTT.Subs[T],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],HC<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HC],Index<:shapeless.HList]extendsIndexedConstructorShape[provingground.induction.IndexedConstructorShape.IndexedCnstFuncConsShape.type::HShape,H,F,provingground.HoTT.Func[T,HC],Index]withProductwithSerializable", "kind" : "case class"}, {"label" : "IndexedCnstFuncConsShape", "tail" : "", "member" : "provingground.induction.IndexedConstructorShape.IndexedCnstFuncConsShape", "link" : "provingground\/induction\/IndexedConstructorShape$.html#IndexedCnstFuncConsShape", "kind" : "object"}, {"label" : "IndexedIndexedFuncConsShape", "tail" : "", "member" : "provingground.induction.IndexedConstructorShape.IndexedIndexedFuncConsShape", "link" : "provingground\/induction\/IndexedConstructorShape$.html#IndexedIndexedFuncConsShape[HShape<:shapeless.HList,H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],HC<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HC],Fb<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Fb],Index<:shapeless.HList]extendsIndexedConstructorShape[provingground.induction.IndexedConstructorShape.IndexedIndexedFuncConsShape.type::HShape,H,Fb,provingground.HoTT.Func[F,HC],Index]withProductwithSerializable", "kind" : "case class"}, {"label" : "IndexedIndexedFuncConsShape", "tail" : "", "member" : "provingground.induction.IndexedConstructorShape.IndexedIndexedFuncConsShape", "link" : "provingground\/induction\/IndexedConstructorShape$.html#IndexedIndexedFuncConsShape", "kind" : "object"}, {"label" : "IndexedFuncConsShape", "tail" : "", "member" : "provingground.induction.IndexedConstructorShape.IndexedFuncConsShape", "link" : "provingground\/induction\/IndexedConstructorShape$.html#IndexedFuncConsShape[HShape<:shapeless.HList,H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],FI<:provingground.HoTT.Termwithprovingground.HoTT.Subs[FI],HC<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HC],Index<:shapeless.HList]extendsIndexedConstructorShape[provingground.induction.IndexedConstructorShape.IndexedFuncConsShape.type::HShape,H,F,provingground.HoTT.Func[FI,HC],Index]withProductwithSerializable", "kind" : "case class"}, {"label" : "IndexedFuncConsShape", "tail" : "", "member" : "provingground.induction.IndexedConstructorShape.IndexedFuncConsShape", "link" : "provingground\/induction\/IndexedConstructorShape$.html#IndexedFuncConsShape", "kind" : "object"}, {"label" : "IndexedIdShape", "tail" : "", "member" : "provingground.induction.IndexedConstructorShape.IndexedIdShape", "link" : "provingground\/induction\/IndexedConstructorShape$.html#IndexedIdShape[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],Index<:shapeless.HList]extendsIndexedConstructorShape[shapeless.HNil,H,F,H,Index]withProductwithSerializable", "kind" : "case class"}, {"label" : "get", "tail" : "(w: F, typ: Typ[H])(arg0: Subst[Index], g: TypFamilyPtnGetter[F, H, Index]): IndexedIdShape[H, F, Index]", "member" : "provingground.induction.IndexedConstructorShape.get", "link" : "provingground\/induction\/IndexedConstructorShape$.html#get[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],Index<:shapeless.HList](w:F,typ:provingground.HoTT.Typ[H])(implicitevidence$9:provingground.induction.Subst[Index],implicitg:provingground.induction.TypFamilyPtnGetter[F,H,Index]):provingground.induction.IndexedConstructorShape.IndexedIdShape[H,F,Index]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/IndexedConstructorShape$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/IndexedConstructorShape$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/IndexedConstructorShape$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/IndexedConstructorShape$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/IndexedConstructorShape$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/IndexedConstructorShape$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/IndexedConstructorShape$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructorShape$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructorShape$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructorShape$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/IndexedConstructorShape$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/IndexedConstructorShape$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/IndexedConstructorShape$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/IndexedConstructorShape$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/IndexedConstructorShape$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/IndexedConstructorShape$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/IndexedConstructorShape$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/IndexedConstructorShape$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/IndexedConstructorShape$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/induction\/IndexedConstructorShape.html", "kind" : "class"}, {"name" : "provingground.induction.IndexedInductiveDefinition", "shortDescription" : "indexed version of InductiveDefinition", "object" : "provingground\/induction\/IndexedInductiveDefinition$.html", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/induction\/IndexedInductiveDefinition.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/induction\/IndexedInductiveDefinition.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (IndexedInductiveDefinition[H, F, C, Index, IF, IDF, IDFT]) ⇒ Boolean, msg: ⇒ Any): IndexedInductiveDefinition[H, F, C, Index, IF, IDF, IDFT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/IndexedInductiveDefinition.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (IndexedInductiveDefinition[H, F, C, Index, IF, IDF, IDFT]) ⇒ Boolean): IndexedInductiveDefinition[H, F, C, Index, IF, IDF, IDFT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/IndexedInductiveDefinition.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): IndexedInductiveDefinition[H, F, C, Index, IF, IDF, IDFT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/IndexedInductiveDefinition.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): IndexedInductiveDefinition[H, F, C, Index, IF, IDF, IDFT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/IndexedInductiveDefinition.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (IndexedInductiveDefinition[H, F, C, Index, IF, IDF, IDFT], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/induction\/IndexedInductiveDefinition.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (IndexedInductiveDefinition[H, F, C, Index, IF, IDF, IDFT], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/induction\/IndexedInductiveDefinition.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "iterDepFunc", "tail" : ": IDF", "member" : "provingground.induction.IndexedInductiveDefinition.iterDepFunc", "link" : "provingground\/induction\/IndexedInductiveDefinition.html#iterDepFunc:IDF", "kind" : "lazy val"}, {"label" : "Funcs", "tail" : "", "member" : "provingground.induction.IndexedInductiveDefinition.Funcs", "link" : "provingground\/induction\/IndexedInductiveDefinition.html#FuncsextendsHoTT.IndInducFuncLike[H,C,F,IDFT]withProductwithSerializable", "kind" : "case class"}, {"member" : "provingground.induction.IndexedInductiveDefinition#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/IndexedInductiveDefinition.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/IndexedInductiveDefinition.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/IndexedInductiveDefinition.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/IndexedInductiveDefinition.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/IndexedInductiveDefinition.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/IndexedInductiveDefinition.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/IndexedInductiveDefinition.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedInductiveDefinition.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedInductiveDefinition.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedInductiveDefinition.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/IndexedInductiveDefinition.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/IndexedInductiveDefinition.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/IndexedInductiveDefinition.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/IndexedInductiveDefinition.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/IndexedInductiveDefinition.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/IndexedInductiveDefinition.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/IndexedInductiveDefinition.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/IndexedInductiveDefinition.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/IndexedInductiveDefinition.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "subs", "tail" : "(x: Term, y: Term): IndexedInductiveDefinition[H, F, C, Index, IF, IDF, IDFT]", "member" : "provingground.induction.IndexedInductiveDefinition.subs", "link" : "provingground\/induction\/IndexedInductiveDefinition.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.induction.IndexedInductiveDefinition[H,F,C,Index,IF,IDF,IDFT]", "kind" : "abstract def"}, {"label" : "caseFn", "tail" : "(f: ⇒ IDF)(arg: H): Option[C]", "member" : "provingground.induction.IndexedInductiveDefinition.caseFn", "link" : "provingground\/induction\/IndexedInductiveDefinition.html#caseFn(f:=>IDF)(arg:H):Option[C]", "kind" : "abstract def"}, {"label" : "Xs", "tail" : ": IDFT", "member" : "provingground.induction.IndexedInductiveDefinition.Xs", "link" : "provingground\/induction\/IndexedInductiveDefinition.html#Xs:IDFT", "kind" : "abstract val"}, {"label" : "W", "tail" : ": F", "member" : "provingground.induction.IndexedInductiveDefinition.W", "link" : "provingground\/induction\/IndexedInductiveDefinition.html#W:F", "kind" : "abstract val"}, {"label" : "defnData", "tail" : ": Vector[Term]", "member" : "provingground.induction.IndexedInductiveDefinition.defnData", "link" : "provingground\/induction\/IndexedInductiveDefinition.html#defnData:Vector[provingground.HoTT.Term]", "kind" : "abstract val"}, {"label" : "family", "tail" : ": TypFamilyMap[H, F, C, Index, IF, IDF, IDFT]", "member" : "provingground.induction.IndexedInductiveDefinition.family", "link" : "provingground\/induction\/IndexedInductiveDefinition.html#family:provingground.induction.TypFamilyMap[H,F,C,Index,IF,IDF,IDFT]", "kind" : "abstract val"}], "members_object" : [{"label" : "DataCons", "tail" : "", "member" : "provingground.induction.IndexedInductiveDefinition.DataCons", "link" : "provingground\/induction\/IndexedInductiveDefinition$.html#DataCons[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],Index<:shapeless.HList,IF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IF],IDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDF],IDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT],D<:provingground.HoTT.Termwithprovingground.HoTT.Subs[D]]extendsIndexedInductiveDefinition[H,F,C,Index,IF,IDF,IDFT]withProductwithSerializable", "kind" : "case class"}, {"label" : "Empty", "tail" : "", "member" : "provingground.induction.IndexedInductiveDefinition.Empty", "link" : "provingground\/induction\/IndexedInductiveDefinition$.html#Empty[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],Index<:shapeless.HList,IF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IF],IDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDF],IDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT]]extendsIndexedInductiveDefinition[H,F,C,Index,IF,IDF,IDFT]withProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/IndexedInductiveDefinition$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/IndexedInductiveDefinition$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/IndexedInductiveDefinition$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/IndexedInductiveDefinition$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/IndexedInductiveDefinition$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/IndexedInductiveDefinition$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/IndexedInductiveDefinition$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedInductiveDefinition$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedInductiveDefinition$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedInductiveDefinition$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/IndexedInductiveDefinition$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/IndexedInductiveDefinition$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/IndexedInductiveDefinition$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/IndexedInductiveDefinition$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/IndexedInductiveDefinition$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/IndexedInductiveDefinition$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/IndexedInductiveDefinition$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/IndexedInductiveDefinition$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/IndexedInductiveDefinition$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/induction\/IndexedInductiveDefinition.html", "kind" : "class"}, {"name" : "provingground.induction.IndexedIterFuncPtnMap", "shortDescription" : "Indexed version of IterFuncPtnMap", "object" : "provingground\/induction\/IndexedIterFuncPtnMap$.html", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/induction\/IndexedIterFuncPtnMap.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/induction\/IndexedIterFuncPtnMap.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (IndexedIterFuncPtnMap[H, Fb, Index, C, F, TT, DT, IF, IDF, IDFT]) ⇒ Boolean, msg: ⇒ Any): IndexedIterFuncPtnMap[H, Fb, Index, C, F, TT, DT, IF, IDF, IDFT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/IndexedIterFuncPtnMap.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (IndexedIterFuncPtnMap[H, Fb, Index, C, F, TT, DT, IF, IDF, IDFT]) ⇒ Boolean): IndexedIterFuncPtnMap[H, Fb, Index, C, F, TT, DT, IF, IDF, IDFT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/IndexedIterFuncPtnMap.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): IndexedIterFuncPtnMap[H, Fb, Index, C, F, TT, DT, IF, IDF, IDFT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/IndexedIterFuncPtnMap.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): IndexedIterFuncPtnMap[H, Fb, Index, C, F, TT, DT, IF, IDF, IDFT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/IndexedIterFuncPtnMap.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (IndexedIterFuncPtnMap[H, Fb, Index, C, F, TT, DT, IF, IDF, IDFT], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/induction\/IndexedIterFuncPtnMap.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (IndexedIterFuncPtnMap[H, Fb, Index, C, F, TT, DT, IF, IDF, IDFT], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/induction\/IndexedIterFuncPtnMap.html#->[B](y:B):(A,B)", "kind" : "def"}, {"member" : "provingground.induction.IndexedIterFuncPtnMap#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/IndexedIterFuncPtnMap.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/IndexedIterFuncPtnMap.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/IndexedIterFuncPtnMap.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/IndexedIterFuncPtnMap.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/IndexedIterFuncPtnMap.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/IndexedIterFuncPtnMap.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/IndexedIterFuncPtnMap.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedIterFuncPtnMap.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedIterFuncPtnMap.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedIterFuncPtnMap.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/IndexedIterFuncPtnMap.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/IndexedIterFuncPtnMap.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/IndexedIterFuncPtnMap.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/IndexedIterFuncPtnMap.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/IndexedIterFuncPtnMap.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/IndexedIterFuncPtnMap.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/IndexedIterFuncPtnMap.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/IndexedIterFuncPtnMap.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/IndexedIterFuncPtnMap.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "inducedDep", "tail" : "(f: IDF): (F) ⇒ DT", "member" : "provingground.induction.IndexedIterFuncPtnMap.inducedDep", "link" : "provingground\/induction\/IndexedIterFuncPtnMap.html#inducedDep(f:IDF):F=>DT", "kind" : "abstract def"}, {"label" : "induced", "tail" : "(f: IF): (F) ⇒ TT", "member" : "provingground.induction.IndexedIterFuncPtnMap.induced", "link" : "provingground\/induction\/IndexedIterFuncPtnMap.html#induced(f:IF):F=>TT", "kind" : "abstract def"}, {"label" : "subs", "tail" : "(x: Term, y: Term): IndexedIterFuncPtnMap[H, Fb, Index, C, F, TT, DT, IF, IDF, IDFT]", "member" : "provingground.induction.IndexedIterFuncPtnMap.subs", "link" : "provingground\/induction\/IndexedIterFuncPtnMap.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.induction.IndexedIterFuncPtnMap[H,Fb,Index,C,F,TT,DT,IF,IDF,IDFT]", "kind" : "abstract def"}, {"label" : "depTarget", "tail" : "(xs: IDFT): (F) ⇒ Typ[DT]", "member" : "provingground.induction.IndexedIterFuncPtnMap.depTarget", "link" : "provingground\/induction\/IndexedIterFuncPtnMap.html#depTarget(xs:IDFT):F=>provingground.HoTT.Typ[DT]", "kind" : "abstract def"}, {"label" : "target", "tail" : "(x: Typ[C]): Typ[TT]", "member" : "provingground.induction.IndexedIterFuncPtnMap.target", "link" : "provingground\/induction\/IndexedIterFuncPtnMap.html#target(x:provingground.HoTT.Typ[C]):provingground.HoTT.Typ[TT]", "kind" : "abstract def"}, {"label" : "apply", "tail" : "(W: Fb): Typ[F]", "member" : "provingground.induction.IndexedIterFuncPtnMap.apply", "link" : "provingground\/induction\/IndexedIterFuncPtnMap.html#apply(W:Fb):provingground.HoTT.Typ[F]", "kind" : "abstract def"}, {"label" : "family", "tail" : ": TypFamilyMap[H, Fb, C, Index, IF, IDF, IDFT]", "member" : "provingground.induction.IndexedIterFuncPtnMap.family", "link" : "provingground\/induction\/IndexedIterFuncPtnMap.html#family:provingground.induction.TypFamilyMap[H,Fb,C,Index,IF,IDF,IDFT]", "kind" : "abstract val"}, {"label" : "univLevel", "tail" : ": Int", "member" : "provingground.induction.IndexedIterFuncPtnMap.univLevel", "link" : "provingground\/induction\/IndexedIterFuncPtnMap.html#univLevel:Int", "kind" : "abstract val"}], "members_object" : [{"label" : "IndexedDepFuncIterPtnMap", "tail" : "", "member" : "provingground.induction.IndexedIterFuncPtnMap.IndexedDepFuncIterPtnMap", "link" : "provingground\/induction\/IndexedIterFuncPtnMap$.html#IndexedDepFuncIterPtnMap[TT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TT],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V],T<:provingground.HoTT.Termwithprovingground.HoTT.Subs[T],D<:provingground.HoTT.Termwithprovingground.HoTT.Subs[D],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],Fb<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Fb],Index<:shapeless.HList,C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],IF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IF],IDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDF],IDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT]]extendsIndexedIterFuncPtnMap[H,Fb,Index,C,provingground.HoTT.FuncLike[TT,V],provingground.HoTT.FuncLike[TT,T],provingground.HoTT.FuncLike[TT,D],IF,IDF,IDFT]withProductwithSerializable", "kind" : "case class"}, {"label" : "IndexedFuncIterPtnMap", "tail" : "", "member" : "provingground.induction.IndexedIterFuncPtnMap.IndexedFuncIterPtnMap", "link" : "provingground\/induction\/IndexedIterFuncPtnMap$.html#IndexedFuncIterPtnMap[TT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TT],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V],T<:provingground.HoTT.Termwithprovingground.HoTT.Subs[T],D<:provingground.HoTT.Termwithprovingground.HoTT.Subs[D],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],Fb<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Fb],Index<:shapeless.HList,C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],IF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IF],IDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDF],IDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT]]extendsIndexedIterFuncPtnMap[H,Fb,Index,C,provingground.HoTT.Func[TT,V],provingground.HoTT.Func[TT,T],provingground.HoTT.FuncLike[TT,D],IF,IDF,IDFT]withProductwithSerializable", "kind" : "case class"}, {"label" : "IdIterPtnMap", "tail" : "", "member" : "provingground.induction.IndexedIterFuncPtnMap.IdIterPtnMap", "link" : "provingground\/induction\/IndexedIterFuncPtnMap$.html#IdIterPtnMap[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],Fb<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Fb],Index<:shapeless.HList,C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],IF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IF],IDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDF],IDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT]]extendsIndexedIterFuncPtnMap[H,Fb,Index,C,H,C,C,IF,IDF,IDFT]withProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/IndexedIterFuncPtnMap$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/IndexedIterFuncPtnMap$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/IndexedIterFuncPtnMap$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/IndexedIterFuncPtnMap$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/IndexedIterFuncPtnMap$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/IndexedIterFuncPtnMap$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/IndexedIterFuncPtnMap$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedIterFuncPtnMap$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedIterFuncPtnMap$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedIterFuncPtnMap$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/IndexedIterFuncPtnMap$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/IndexedIterFuncPtnMap$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/IndexedIterFuncPtnMap$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/IndexedIterFuncPtnMap$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/IndexedIterFuncPtnMap$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/IndexedIterFuncPtnMap$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/IndexedIterFuncPtnMap$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/IndexedIterFuncPtnMap$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/IndexedIterFuncPtnMap$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/induction\/IndexedIterFuncPtnMap.html", "kind" : "class"}, {"name" : "provingground.induction.IndexedIterFuncPtnMapper", "shortDescription" : "bridge between IndexedIterFuncShape and IndexedIterFuncPtnMap", "object" : "provingground\/induction\/IndexedIterFuncPtnMapper$.html", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (IndexedIterFuncPtnMapper[H, Fb, Index, C, F, TT, DT, IF, IDF, IDFT]) ⇒ Boolean, msg: ⇒ Any): IndexedIterFuncPtnMapper[H, Fb, Index, C, F, TT, DT, IF, IDF, IDFT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (IndexedIterFuncPtnMapper[H, Fb, Index, C, F, TT, DT, IF, IDF, IDFT]) ⇒ Boolean): IndexedIterFuncPtnMapper[H, Fb, Index, C, F, TT, DT, IF, IDF, IDFT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): IndexedIterFuncPtnMapper[H, Fb, Index, C, F, TT, DT, IF, IDF, IDFT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): IndexedIterFuncPtnMapper[H, Fb, Index, C, F, TT, DT, IF, IDF, IDFT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (IndexedIterFuncPtnMapper[H, Fb, Index, C, F, TT, DT, IF, IDF, IDFT], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (IndexedIterFuncPtnMapper[H, Fb, Index, C, F, TT, DT, IF, IDF, IDFT], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper.html#->[B](y:B):(A,B)", "kind" : "def"}, {"member" : "provingground.induction.IndexedIterFuncPtnMapper#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "mapper", "tail" : "(fmlyMapper: TypFamilyMapper[H, Fb, C, Index, IF, IDF, IDFT]): (IndexedIterFuncShape[H, F, Fb, Index]) ⇒ IndexedIterFuncPtnMap[H, Fb, Index, C, F, TT, DT, IF, IDF, IDFT]", "member" : "provingground.induction.IndexedIterFuncPtnMapper.mapper", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper.html#mapper(implicitfmlyMapper:provingground.induction.TypFamilyMapper[H,Fb,C,Index,IF,IDF,IDFT]):provingground.induction.IndexedIterFuncShape[H,F,Fb,Index]=>provingground.induction.IndexedIterFuncPtnMap[H,Fb,Index,C,F,TT,DT,IF,IDF,IDFT]", "kind" : "abstract def"}], "members_object" : [{"label" : "indexedDepFuncIterPtnMapper", "tail" : "(arg0: Subst[Index], hm: IndexedIterFuncPtnMapper[H, Fb, Index, C, V, T, D, IF, IDF, IDFT]): IndexedIterFuncPtnMapper[H, Fb, Index, C, FuncLike[TT, V], FuncLike[TT, T], FuncLike[TT, D], IF, IDF, IDFT]", "member" : "provingground.induction.IndexedIterFuncPtnMapper.indexedDepFuncIterPtnMapper", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper$.html#indexedDepFuncIterPtnMapper[TT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TT],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V],T<:provingground.HoTT.Termwithprovingground.HoTT.Subs[T],D<:provingground.HoTT.Termwithprovingground.HoTT.Subs[D],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],Fb<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Fb],Index<:shapeless.HList,C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],IF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IF],IDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDF],IDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT]](implicitevidence$12:provingground.induction.Subst[Index],implicithm:provingground.induction.IndexedIterFuncPtnMapper[H,Fb,Index,C,V,T,D,IF,IDF,IDFT]):provingground.induction.IndexedIterFuncPtnMapper[H,Fb,Index,C,provingground.HoTT.FuncLike[TT,V],provingground.HoTT.FuncLike[TT,T],provingground.HoTT.FuncLike[TT,D],IF,IDF,IDFT]", "kind" : "implicit def"}, {"label" : "indexedFuncIterPtnMapper", "tail" : "(arg0: Subst[Index], hm: IndexedIterFuncPtnMapper[H, Fb, Index, C, V, T, D, IF, IDF, IDFT]): IndexedIterFuncPtnMapper[H, Fb, Index, C, Func[TT, V], Func[TT, T], FuncLike[TT, D], IF, IDF, IDFT]", "member" : "provingground.induction.IndexedIterFuncPtnMapper.indexedFuncIterPtnMapper", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper$.html#indexedFuncIterPtnMapper[TT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TT],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V],T<:provingground.HoTT.Termwithprovingground.HoTT.Subs[T],D<:provingground.HoTT.Termwithprovingground.HoTT.Subs[D],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],Fb<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Fb],Index<:shapeless.HList,C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],IF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IF],IDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDF],IDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT]](implicitevidence$11:provingground.induction.Subst[Index],implicithm:provingground.induction.IndexedIterFuncPtnMapper[H,Fb,Index,C,V,T,D,IF,IDF,IDFT]):provingground.induction.IndexedIterFuncPtnMapper[H,Fb,Index,C,provingground.HoTT.Func[TT,V],provingground.HoTT.Func[TT,T],provingground.HoTT.FuncLike[TT,D],IF,IDF,IDFT]", "kind" : "implicit def"}, {"label" : "idIterPtnMapper", "tail" : "(arg0: Subst[Index]): IndexedIterFuncPtnMapper[H, Fb, Index, C, H, C, C, IF, IDF, IDFT]", "member" : "provingground.induction.IndexedIterFuncPtnMapper.idIterPtnMapper", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper$.html#idIterPtnMapper[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],Fb<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Fb],Index<:shapeless.HList,C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],IF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IF],IDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDF],IDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT]](implicitevidence$10:provingground.induction.Subst[Index]):provingground.induction.IndexedIterFuncPtnMapper[H,Fb,Index,C,H,C,C,IF,IDF,IDFT]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/induction\/IndexedIterFuncPtnMapper.html", "kind" : "class"}, {"name" : "provingground.induction.IndexedIterFuncShape", "shortDescription" : "indexed version of IterFuncShape", "object" : "provingground\/induction\/IndexedIterFuncShape$.html", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/induction\/IndexedIterFuncShape.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/induction\/IndexedIterFuncShape.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (IndexedIterFuncShape[H, F, Fb, Index]) ⇒ Boolean, msg: ⇒ Any): IndexedIterFuncShape[H, F, Fb, Index]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/IndexedIterFuncShape.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (IndexedIterFuncShape[H, F, Fb, Index]) ⇒ Boolean): IndexedIterFuncShape[H, F, Fb, Index]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/IndexedIterFuncShape.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): IndexedIterFuncShape[H, F, Fb, Index]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/IndexedIterFuncShape.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): IndexedIterFuncShape[H, F, Fb, Index]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/IndexedIterFuncShape.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (IndexedIterFuncShape[H, F, Fb, Index], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/induction\/IndexedIterFuncShape.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (IndexedIterFuncShape[H, F, Fb, Index], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/induction\/IndexedIterFuncShape.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "mapped", "tail" : "(fmlyMapper: TypFamilyMapper[H, Fb, C, Index, IF, IDF, IDFT]): IndexedIterFuncPtnMap[H, Fb, Index, C, F, TT, DT, IF, IDF, IDFT] forSome {type TT <: Term with Subs[TT], type DT <: Term with Subs[DT]}", "member" : "provingground.induction.IndexedIterFuncShape.mapped", "link" : "provingground\/induction\/IndexedIterFuncShape.html#mapped[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],IF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IF],IDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDF],IDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT]](implicitfmlyMapper:provingground.induction.TypFamilyMapper[H,Fb,C,Index,IF,IDF,IDFT]):provingground.induction.IndexedIterFuncPtnMap[H,Fb,Index,C,F,TT,DT,IF,IDF,IDFT]forSome{typeTT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TT];typeDT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[DT]}", "kind" : "def"}, {"member" : "provingground.induction.IndexedIterFuncShape#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/IndexedIterFuncShape.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/IndexedIterFuncShape.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/IndexedIterFuncShape.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/IndexedIterFuncShape.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/IndexedIterFuncShape.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/IndexedIterFuncShape.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/IndexedIterFuncShape.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedIterFuncShape.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedIterFuncShape.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedIterFuncShape.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/IndexedIterFuncShape.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/IndexedIterFuncShape.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/IndexedIterFuncShape.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/IndexedIterFuncShape.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/IndexedIterFuncShape.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/IndexedIterFuncShape.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/IndexedIterFuncShape.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/IndexedIterFuncShape.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/IndexedIterFuncShape.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "mapper", "tail" : "(fmlyMapper: TypFamilyMapper[H, Fb, C, Index, IF, IDF, IDFT]): IndexedIterFuncPtnMapper[H, Fb, Index, C, F, TT, DT, IF, IDF, IDFT] forSome {type TT <: Term with Subs[TT], type DT <: Term with Subs[DT]}", "member" : "provingground.induction.IndexedIterFuncShape.mapper", "link" : "provingground\/induction\/IndexedIterFuncShape.html#mapper[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],IF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IF],IDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDF],IDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT]](implicitfmlyMapper:provingground.induction.TypFamilyMapper[H,Fb,C,Index,IF,IDF,IDFT]):provingground.induction.IndexedIterFuncPtnMapper[H,Fb,Index,C,F,TT,DT,IF,IDF,IDFT]forSome{typeTT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TT];typeDT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[DT]}", "kind" : "abstract def"}, {"label" : "family", "tail" : ": TypFamilyPtn[H, Fb, Index]", "member" : "provingground.induction.IndexedIterFuncShape.family", "link" : "provingground\/induction\/IndexedIterFuncShape.html#family:provingground.induction.TypFamilyPtn[H,Fb,Index]", "kind" : "abstract val"}, {"label" : "subs", "tail" : "(x: Term, y: Term): IndexedIterFuncShape[H, F, Fb, Index]", "member" : "provingground.induction.IndexedIterFuncShape.subs", "link" : "provingground\/induction\/IndexedIterFuncShape.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.induction.IndexedIterFuncShape[H,F,Fb,Index]", "kind" : "abstract def"}, {"label" : "apply", "tail" : "(W: Fb): Typ[F]", "member" : "provingground.induction.IndexedIterFuncShape.apply", "link" : "provingground\/induction\/IndexedIterFuncShape.html#apply(W:Fb):provingground.HoTT.Typ[F]", "kind" : "abstract def"}], "members_object" : [{"label" : "Exst", "tail" : "", "member" : "provingground.induction.IndexedIterFuncShape.Exst", "link" : "provingground\/induction\/IndexedIterFuncShape$.html#Exst", "kind" : "object"}, {"label" : "Exst", "tail" : "", "member" : "provingground.induction.IndexedIterFuncShape.Exst", "link" : "provingground\/induction\/IndexedIterFuncShape$.html#ExstextendsAnyRef", "kind" : "sealed trait"}, {"label" : "DepFuncShape", "tail" : "", "member" : "provingground.induction.IndexedIterFuncShape.DepFuncShape", "link" : "provingground\/induction\/IndexedIterFuncShape$.html#DepFuncShape[TT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TT],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],TF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TF],Fb<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Fb],Index<:shapeless.HList]extendsIndexedIterFuncShape[H,provingground.HoTT.FuncLike[TT,TF],Fb,Index]withProductwithSerializable", "kind" : "case class"}, {"label" : "FuncShape", "tail" : "", "member" : "provingground.induction.IndexedIterFuncShape.FuncShape", "link" : "provingground\/induction\/IndexedIterFuncShape$.html#FuncShape[TT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TT],TF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TF],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],Fb<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Fb],Index<:shapeless.HList]extendsIndexedIterFuncShape[H,provingground.HoTT.Func[TT,TF],Fb,Index]withProductwithSerializable", "kind" : "case class"}, {"label" : "IdIterShape", "tail" : "", "member" : "provingground.induction.IndexedIterFuncShape.IdIterShape", "link" : "provingground\/induction\/IndexedIterFuncShape$.html#IdIterShape[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],Fb<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Fb],Index<:shapeless.HList]extendsIndexedIterFuncShape[H,H,Fb,Index]withProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/IndexedIterFuncShape$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/IndexedIterFuncShape$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/IndexedIterFuncShape$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/IndexedIterFuncShape$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/IndexedIterFuncShape$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/IndexedIterFuncShape$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/IndexedIterFuncShape$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedIterFuncShape$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedIterFuncShape$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedIterFuncShape$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/IndexedIterFuncShape$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/IndexedIterFuncShape$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/IndexedIterFuncShape$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/IndexedIterFuncShape$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/IndexedIterFuncShape$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/IndexedIterFuncShape$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/IndexedIterFuncShape$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/IndexedIterFuncShape$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/IndexedIterFuncShape$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/induction\/IndexedIterFuncShape.html", "kind" : "class"}, {"name" : "provingground.induction.IndexedRecursiveDefinition", "shortDescription" : "indexed version of RecursiveDefinition", "object" : "provingground\/induction\/IndexedRecursiveDefinition$.html", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/induction\/IndexedRecursiveDefinition.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/induction\/IndexedRecursiveDefinition.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (IndexedRecursiveDefinition[H, F, C, Index, IF, IDF, IDFT]) ⇒ Boolean, msg: ⇒ Any): IndexedRecursiveDefinition[H, F, C, Index, IF, IDF, IDFT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/IndexedRecursiveDefinition.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (IndexedRecursiveDefinition[H, F, C, Index, IF, IDF, IDFT]) ⇒ Boolean): IndexedRecursiveDefinition[H, F, C, Index, IF, IDF, IDFT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/IndexedRecursiveDefinition.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): IndexedRecursiveDefinition[H, F, C, Index, IF, IDF, IDFT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/IndexedRecursiveDefinition.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): IndexedRecursiveDefinition[H, F, C, Index, IF, IDF, IDFT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/IndexedRecursiveDefinition.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (IndexedRecursiveDefinition[H, F, C, Index, IF, IDF, IDFT], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/induction\/IndexedRecursiveDefinition.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (IndexedRecursiveDefinition[H, F, C, Index, IF, IDF, IDFT], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/induction\/IndexedRecursiveDefinition.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "iterFunc", "tail" : ": IF", "member" : "provingground.induction.IndexedRecursiveDefinition.iterFunc", "link" : "provingground\/induction\/IndexedRecursiveDefinition.html#iterFunc:IF", "kind" : "lazy val"}, {"label" : "Funcs", "tail" : "", "member" : "provingground.induction.IndexedRecursiveDefinition.Funcs", "link" : "provingground\/induction\/IndexedRecursiveDefinition.html#FuncsextendsHoTT.IndRecFunc[H,C,F]withProductwithSerializable", "kind" : "case class"}, {"member" : "provingground.induction.IndexedRecursiveDefinition#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/IndexedRecursiveDefinition.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/IndexedRecursiveDefinition.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/IndexedRecursiveDefinition.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/IndexedRecursiveDefinition.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/IndexedRecursiveDefinition.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/IndexedRecursiveDefinition.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/IndexedRecursiveDefinition.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedRecursiveDefinition.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedRecursiveDefinition.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedRecursiveDefinition.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/IndexedRecursiveDefinition.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/IndexedRecursiveDefinition.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/IndexedRecursiveDefinition.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/IndexedRecursiveDefinition.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/IndexedRecursiveDefinition.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/IndexedRecursiveDefinition.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/IndexedRecursiveDefinition.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/IndexedRecursiveDefinition.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/IndexedRecursiveDefinition.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "subs", "tail" : "(x: Term, y: Term): IndexedRecursiveDefinition[H, F, C, Index, IF, IDF, IDFT]", "member" : "provingground.induction.IndexedRecursiveDefinition.subs", "link" : "provingground\/induction\/IndexedRecursiveDefinition.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.induction.IndexedRecursiveDefinition[H,F,C,Index,IF,IDF,IDFT]", "kind" : "abstract def"}, {"label" : "caseFn", "tail" : "(f: ⇒ IF)(arg: H): Option[C]", "member" : "provingground.induction.IndexedRecursiveDefinition.caseFn", "link" : "provingground\/induction\/IndexedRecursiveDefinition.html#caseFn(f:=>IF)(arg:H):Option[C]", "kind" : "abstract def"}, {"label" : "defnData", "tail" : ": Vector[Term]", "member" : "provingground.induction.IndexedRecursiveDefinition.defnData", "link" : "provingground\/induction\/IndexedRecursiveDefinition.html#defnData:Vector[provingground.HoTT.Term]", "kind" : "abstract val"}, {"label" : "X", "tail" : ": Typ[C]", "member" : "provingground.induction.IndexedRecursiveDefinition.X", "link" : "provingground\/induction\/IndexedRecursiveDefinition.html#X:provingground.HoTT.Typ[C]", "kind" : "abstract val"}, {"label" : "W", "tail" : ": F", "member" : "provingground.induction.IndexedRecursiveDefinition.W", "link" : "provingground\/induction\/IndexedRecursiveDefinition.html#W:F", "kind" : "abstract val"}, {"label" : "family", "tail" : ": TypFamilyMap[H, F, C, Index, IF, IDF, IDFT]", "member" : "provingground.induction.IndexedRecursiveDefinition.family", "link" : "provingground\/induction\/IndexedRecursiveDefinition.html#family:provingground.induction.TypFamilyMap[H,F,C,Index,IF,IDF,IDFT]", "kind" : "abstract val"}], "members_object" : [{"label" : "DataCons", "tail" : "", "member" : "provingground.induction.IndexedRecursiveDefinition.DataCons", "link" : "provingground\/induction\/IndexedRecursiveDefinition$.html#DataCons[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],Index<:shapeless.HList,IF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IF],IDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDF],IDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT],D<:provingground.HoTT.Termwithprovingground.HoTT.Subs[D]]extendsIndexedRecursiveDefinition[H,F,C,Index,IF,IDF,IDFT]withProductwithSerializable", "kind" : "case class"}, {"label" : "Empty", "tail" : "", "member" : "provingground.induction.IndexedRecursiveDefinition.Empty", "link" : "provingground\/induction\/IndexedRecursiveDefinition$.html#Empty[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],Index<:shapeless.HList,IF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IF],IDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDF],IDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT]]extendsIndexedRecursiveDefinition[H,F,C,Index,IF,IDF,IDFT]withProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/IndexedRecursiveDefinition$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/IndexedRecursiveDefinition$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/IndexedRecursiveDefinition$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/IndexedRecursiveDefinition$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/IndexedRecursiveDefinition$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/IndexedRecursiveDefinition$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/IndexedRecursiveDefinition$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedRecursiveDefinition$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedRecursiveDefinition$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedRecursiveDefinition$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/IndexedRecursiveDefinition$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/IndexedRecursiveDefinition$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/IndexedRecursiveDefinition$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/IndexedRecursiveDefinition$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/IndexedRecursiveDefinition$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/IndexedRecursiveDefinition$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/IndexedRecursiveDefinition$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/IndexedRecursiveDefinition$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/IndexedRecursiveDefinition$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/induction\/IndexedRecursiveDefinition.html", "kind" : "class"}, {"name" : "provingground.induction.IndTyp", "shortDescription" : "", "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/induction\/IndTyp.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/induction\/IndTyp.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (IndTyp[SS, Intros]) ⇒ Boolean, msg: ⇒ Any): IndTyp[SS, Intros]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/IndTyp.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (IndTyp[SS, Intros]) ⇒ Boolean): IndTyp[SS, Intros]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/IndTyp.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): IndTyp[SS, Intros]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/IndTyp.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): IndTyp[SS, Intros]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/IndTyp.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (IndTyp[SS, Intros], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/induction\/IndTyp.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (IndTyp[SS, Intros], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/induction\/IndTyp.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "Elem", "tail" : "", "member" : "provingground.HoTT.Typ.Elem", "link" : "provingground\/HoTT$$Typ.html#Elem", "kind" : "object"}, {"label" : "variable", "tail" : "(name: AnySym): SymbObj[Term]", "member" : "provingground.induction.IndTyp.variable", "link" : "provingground\/induction\/IndTyp.html#variable(name:provingground.HoTT.AnySym):provingground.HoTT.SymbObj[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "subs", "tail" : "(x: Term, y: Term): IndTyp[SS, Intros]", "member" : "provingground.induction.IndTyp.subs", "link" : "provingground\/induction\/IndTyp.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.induction.IndTyp[SS,Intros]", "kind" : "def"}, {"label" : "newobj", "tail" : "(): Nothing", "member" : "provingground.induction.IndTyp.newobj", "link" : "provingground\/induction\/IndTyp.html#newobj:Nothing", "kind" : "def"}, {"label" : "typ", "tail" : ": Universe", "member" : "provingground.induction.IndTyp.typ", "link" : "provingground\/induction\/IndTyp.html#typ:provingground.HoTT.Universe", "kind" : "val"}, {"label" : "Obj", "tail" : "", "member" : "provingground.induction.IndTyp.Obj", "link" : "provingground\/induction\/IndTyp.html#Obj=provingground.HoTT.Term", "kind" : "type"}, {"label" : "baseTyp", "tail" : ": ConstructorSeqTL[SS, Term, Intros]", "member" : "provingground.induction.IndTyp.baseTyp", "link" : "provingground\/induction\/IndTyp.html#baseTyp:provingground.induction.ConstructorSeqTL[SS,provingground.HoTT.Term,Intros]", "kind" : "val"}, {"label" : "struct", "tail" : ": ConstructorSeqTL[SS, Term, Intros]", "member" : "provingground.induction.IndTyp.struct", "link" : "provingground\/induction\/IndTyp.html#struct:provingground.induction.ConstructorSeqTL[SS,provingground.HoTT.Term,Intros]", "kind" : "lazy val"}, {"member" : "provingground.induction.IndTyp#<init>", "error" : "unsupported entity"}, {"label" : "seqDom", "tail" : ": ConstructorSeqDom[SS, Term, Intros]", "member" : "provingground.induction.IndTyp.seqDom", "link" : "provingground\/induction\/IndTyp.html#seqDom:provingground.induction.ConstructorSeqDom[SS,provingground.HoTT.Term,Intros]", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "provingground.induction.IndTyp.name", "link" : "provingground\/induction\/IndTyp.html#name:String", "kind" : "val"}, {"label" : "++", "tail" : "(those: V): SigmaTyp[UU, VV]", "member" : "provingground.HoTT.Typ.++", "link" : "provingground\/induction\/IndTyp.html#++[UU>:provingground.HoTT.Typ[U]<:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[UU],VV<:provingground.HoTT.Termwithprovingground.HoTT.Subs[VV],V<:provingground.HoTT.Typ[VV]withprovingground.HoTT.Subs[V]](those:V):provingground.HoTT.SigmaTyp[UU,VV]", "kind" : "def"}, {"label" : "||", "tail" : "(that: Typ[V]): PlusTyp[UU, V]", "member" : "provingground.HoTT.Typ.||", "link" : "provingground\/induction\/IndTyp.html#||[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](that:provingground.HoTT.Typ[V]):provingground.HoTT.PlusTyp[UU,V]", "kind" : "def"}, {"label" : "&&", "tail" : "(that: Typ[V]): ProdTyp[UU, V]", "member" : "provingground.HoTT.Typ.&&", "link" : "provingground\/induction\/IndTyp.html#&&[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](that:provingground.HoTT.Typ[V]):provingground.HoTT.ProdTyp[UU,V]", "kind" : "def"}, {"label" : "~>:", "tail" : "(variable: V): GenFuncTyp[V, UU]", "member" : "provingground.HoTT.Typ.~>:", "link" : "provingground\/induction\/IndTyp.html#~>:[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](variable:V):provingground.HoTT.GenFuncTyp[V,UU]", "kind" : "def"}, {"label" : "->:", "tail" : "(that: Typ[W]): FuncTyp[W, UU]", "member" : "provingground.HoTT.Typ.->:", "link" : "provingground\/induction\/IndTyp.html#->:[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU]](that:provingground.HoTT.Typ[W]):provingground.HoTT.FuncTyp[W,UU]", "kind" : "def"}, {"label" : "typedVar", "tail" : "(): TypedTerm[Term]", "member" : "provingground.HoTT.Typ.typedVar", "link" : "provingground\/induction\/IndTyp.html#typedVar:provingground.HoTT.TypedTerm[U]", "kind" : "def"}, {"label" : "Var", "tail" : "(): Term with Subs[Term]", "member" : "provingground.HoTT.Typ.Var", "link" : "provingground\/induction\/IndTyp.html#Var:Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "::", "tail" : "(name: String): Term with Subs[Term]", "member" : "provingground.HoTT.Typ.::", "link" : "provingground\/induction\/IndTyp.html#::(name:String):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "typedVar", "tail" : "(name: AnySym): TypedTerm[Term]", "member" : "provingground.HoTT.Typ.typedVar", "link" : "provingground\/induction\/IndTyp.html#typedVar(name:provingground.HoTT.AnySym):provingground.HoTT.TypedTerm[U]", "kind" : "def"}, {"label" : "symbObj", "tail" : "(name: AnySym): Term with Subs[Term]", "member" : "provingground.HoTT.Typ.symbObj", "link" : "provingground\/induction\/IndTyp.html#symbObj(name:provingground.HoTT.AnySym):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "typlevel", "tail" : ": Int", "member" : "provingground.HoTT.Typ.typlevel", "link" : "provingground\/induction\/IndTyp.html#typlevel:Int", "kind" : "lazy val"}, {"label" : "typed", "tail" : ": TypedTerm[Typ[Term]]", "member" : "provingground.HoTT.Typ.typed", "link" : "provingground\/induction\/IndTyp.html#typed:provingground.HoTT.TypedTerm[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "!:", "tail" : "(term: Term): Term", "member" : "provingground.HoTT.Typ.!:", "link" : "provingground\/induction\/IndTyp.html#!:(term:provingground.HoTT.Term):U", "kind" : "def"}, {"label" : "obj", "tail" : "(): Term", "member" : "provingground.HoTT.Typ.obj", "link" : "provingground\/induction\/IndTyp.html#obj:U", "kind" : "def"}, {"label" : "usesVar", "tail" : "(t: Term): Boolean", "member" : "provingground.HoTT.Term.usesVar", "link" : "provingground\/induction\/IndTyp.html#usesVar(t:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "indepOf", "tail" : "(that: Term): Boolean", "member" : "provingground.HoTT.Term.indepOf", "link" : "provingground\/induction\/IndTyp.html#indepOf(that:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "dependsOn", "tail" : "(that: Term): Boolean", "member" : "provingground.HoTT.Term.dependsOn", "link" : "provingground\/induction\/IndTyp.html#dependsOn(that:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "replace", "tail" : "(x: Term, y: Term): Typ[Term] with Subs[Typ[Term]]", "member" : "provingground.HoTT.Subs.replace", "link" : "provingground\/induction\/IndTyp.html#replace(x:provingground.HoTT.Term,y:provingground.HoTT.Term):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/IndTyp.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/IndTyp.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/IndTyp.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/IndTyp.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/IndTyp.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/IndTyp.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/IndTyp.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndTyp.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndTyp.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndTyp.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/IndTyp.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/IndTyp.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/IndTyp.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/IndTyp.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/IndTyp.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/IndTyp.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/induction\/IndTyp.html", "kind" : "case class"}, {"name" : "provingground.induction.InductiveDefinition", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/induction\/InductiveDefinition.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/induction\/InductiveDefinition.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (InductiveDefinition[H, C]) ⇒ Boolean, msg: ⇒ Any): InductiveDefinition[H, C]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/InductiveDefinition.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (InductiveDefinition[H, C]) ⇒ Boolean): InductiveDefinition[H, C]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/InductiveDefinition.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): InductiveDefinition[H, C]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/InductiveDefinition.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): InductiveDefinition[H, C]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/InductiveDefinition.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (InductiveDefinition[H, C], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/induction\/InductiveDefinition.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (InductiveDefinition[H, C], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/induction\/InductiveDefinition.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "act", "tail" : "(arg: H): C", "member" : "provingground.induction.InductiveDefinition.act", "link" : "provingground\/induction\/InductiveDefinition.html#act(arg:H):C", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "provingground.HoTT.InducFuncLike.toString", "link" : "provingground\/induction\/InductiveDefinition.html#toString():String", "kind" : "def"}, {"label" : "apply", "tail" : "(arg: H): C", "member" : "provingground.HoTT.FuncLike.apply", "link" : "provingground\/induction\/InductiveDefinition.html#apply(arg:W):U", "kind" : "def"}, {"label" : "typed", "tail" : ": TypedTerm[FuncLike[H, C]]", "member" : "provingground.HoTT.FuncLike.typed", "link" : "provingground\/induction\/InductiveDefinition.html#typed:provingground.HoTT.TypedTerm[provingground.HoTT.FuncLike[W,U]]", "kind" : "lazy val"}, {"label" : "andThen", "tail" : "(g: (C) ⇒ A): (H) ⇒ A", "member" : "scala.Function1.andThen", "link" : "provingground\/induction\/InductiveDefinition.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) ⇒ H): (A) ⇒ C", "member" : "scala.Function1.compose", "link" : "provingground\/induction\/InductiveDefinition.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "usesVar", "tail" : "(t: Term): Boolean", "member" : "provingground.HoTT.Term.usesVar", "link" : "provingground\/induction\/InductiveDefinition.html#usesVar(t:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "indepOf", "tail" : "(that: Term): Boolean", "member" : "provingground.HoTT.Term.indepOf", "link" : "provingground\/induction\/InductiveDefinition.html#indepOf(that:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "dependsOn", "tail" : "(that: Term): Boolean", "member" : "provingground.HoTT.Term.dependsOn", "link" : "provingground\/induction\/InductiveDefinition.html#dependsOn(that:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "replace", "tail" : "(x: Term, y: Term): FuncLike[H, C] with Subs[FuncLike[H, C]]", "member" : "provingground.HoTT.Subs.replace", "link" : "provingground\/induction\/InductiveDefinition.html#replace(x:provingground.HoTT.Term,y:provingground.HoTT.Term):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/InductiveDefinition.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/InductiveDefinition.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/InductiveDefinition.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/InductiveDefinition.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/InductiveDefinition.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/InductiveDefinition.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/InductiveDefinition.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/InductiveDefinition.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/InductiveDefinition.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/InductiveDefinition.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/InductiveDefinition.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/InductiveDefinition.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/InductiveDefinition.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/InductiveDefinition.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/InductiveDefinition.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/InductiveDefinition.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/InductiveDefinition.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/InductiveDefinition.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "subs", "tail" : "(x: Term, y: Term): InductiveDefinition[H, C]", "member" : "provingground.induction.InductiveDefinition.subs", "link" : "provingground\/induction\/InductiveDefinition.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.induction.InductiveDefinition[H,C]", "kind" : "abstract def"}, {"label" : "caseFn", "tail" : "(f: ⇒ FuncLike[H, C])(arg: H): Option[C]", "member" : "provingground.induction.InductiveDefinition.caseFn", "link" : "provingground\/induction\/InductiveDefinition.html#caseFn(f:=>provingground.HoTT.FuncLike[H,C])(arg:H):Option[C]", "kind" : "abstract def"}, {"label" : "defnData", "tail" : ": Vector[Term]", "member" : "provingground.HoTT.InducFuncLike.defnData", "link" : "provingground\/induction\/InductiveDefinition.html#defnData:Vector[provingground.HoTT.Term]", "kind" : "abstract val"}, {"label" : "depcodom", "tail" : ": (H) ⇒ Typ[C]", "member" : "provingground.HoTT.FuncLike.depcodom", "link" : "provingground\/induction\/InductiveDefinition.html#depcodom:W=>provingground.HoTT.Typ[U]", "kind" : "abstract val"}, {"label" : "dom", "tail" : ": Typ[H]", "member" : "provingground.HoTT.FuncLike.dom", "link" : "provingground\/induction\/InductiveDefinition.html#dom:provingground.HoTT.Typ[W]", "kind" : "abstract val"}, {"label" : "typ", "tail" : ": Typ[FuncLike[H, C]]", "member" : "provingground.HoTT.FuncLike.typ", "link" : "provingground\/induction\/InductiveDefinition.html#typ:provingground.HoTT.Typ[provingground.HoTT.FuncLike[W,U]]", "kind" : "abstract val"}, {"member" : "provingground.HoTT.FuncLike.Obj", "error" : "unsupported entity"}, {"label" : "newobj", "tail" : "(): FuncLike[H, C] with Subs[FuncLike[H, C]]", "member" : "provingground.HoTT.Subs.newobj", "link" : "provingground\/induction\/InductiveDefinition.html#newobj:Uwithprovingground.HoTT.Subs[U]", "kind" : "abstract def"}], "shortDescription" : "inductively defined dependent function, to be built by mixing in cases,defaults to a formal application by itself", "object" : "provingground\/induction\/InductiveDefinition$.html", "members_object" : [{"label" : "DataCons", "tail" : "", "member" : "provingground.induction.InductiveDefinition.DataCons", "link" : "provingground\/induction\/InductiveDefinition$.html#DataCons[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],D<:provingground.HoTT.Termwithprovingground.HoTT.Subs[D]]extendsInductiveDefinition[H,C]withProductwithSerializable", "kind" : "case class"}, {"label" : "Empty", "tail" : "", "member" : "provingground.induction.InductiveDefinition.Empty", "link" : "provingground\/induction\/InductiveDefinition$.html#Empty[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C]]extendsInductiveDefinition[H,C]withProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/InductiveDefinition$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/InductiveDefinition$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/InductiveDefinition$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/InductiveDefinition$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/InductiveDefinition$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/InductiveDefinition$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/InductiveDefinition$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/InductiveDefinition$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/InductiveDefinition$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/InductiveDefinition$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/InductiveDefinition$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/InductiveDefinition$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/InductiveDefinition$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/InductiveDefinition$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/InductiveDefinition$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/InductiveDefinition$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/InductiveDefinition$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/InductiveDefinition$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/InductiveDefinition$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/induction\/InductiveDefinition.html", "kind" : "trait"}, {"name" : "provingground.induction.IterFuncMapper", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/induction\/IterFuncMapper.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/induction\/IterFuncMapper.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (IterFuncMapper[O, C, F, TT, DT]) ⇒ Boolean, msg: ⇒ Any): IterFuncMapper[O, C, F, TT, DT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/IterFuncMapper.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (IterFuncMapper[O, C, F, TT, DT]) ⇒ Boolean): IterFuncMapper[O, C, F, TT, DT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/IterFuncMapper.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): IterFuncMapper[O, C, F, TT, DT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/IterFuncMapper.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): IterFuncMapper[O, C, F, TT, DT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/IterFuncMapper.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (IterFuncMapper[O, C, F, TT, DT], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/induction\/IterFuncMapper.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (IterFuncMapper[O, C, F, TT, DT], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/induction\/IterFuncMapper.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/IterFuncMapper.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/IterFuncMapper.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/IterFuncMapper.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/IterFuncMapper.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/IterFuncMapper.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/IterFuncMapper.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/IterFuncMapper.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IterFuncMapper.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IterFuncMapper.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IterFuncMapper.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/IterFuncMapper.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/IterFuncMapper.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/IterFuncMapper.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/IterFuncMapper.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/IterFuncMapper.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/IterFuncMapper.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/IterFuncMapper.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/IterFuncMapper.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/IterFuncMapper.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "mapper", "tail" : "(): (IterFuncShape[O, F]) ⇒ IterFuncPtnMap[O, C, F, TT, DT]", "member" : "provingground.induction.IterFuncMapper.mapper", "link" : "provingground\/induction\/IterFuncMapper.html#mapper:provingground.induction.IterFuncShape[O,F]=>provingground.induction.IterFuncPtnMap[O,C,F,TT,DT]", "kind" : "abstract def"}], "shortDescription" : "Given the scala type of the codomain, lifts IterFuncShape to IterFuncMapper", "object" : "provingground\/induction\/IterFuncMapper$.html", "members_object" : [{"label" : "depFuncIterMapper", "tail" : "(hm: IterFuncMapper[O, C, HF, HTT, HDT]): IterFuncMapper[O, C, FuncLike[Tail, HF], FuncLike[Tail, HTT], FuncLike[Tail, HDT]]", "member" : "provingground.induction.IterFuncMapper.depFuncIterMapper", "link" : "provingground\/induction\/IterFuncMapper$.html#depFuncIterMapper[Tail<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Tail],O<:provingground.HoTT.Termwithprovingground.HoTT.Subs[O],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],HF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HF],HTT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HTT],HDT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HDT]](implicithm:provingground.induction.IterFuncMapper[O,C,HF,HTT,HDT]):provingground.induction.IterFuncMapper[O,C,provingground.HoTT.FuncLike[Tail,HF],provingground.HoTT.FuncLike[Tail,HTT],provingground.HoTT.FuncLike[Tail,HDT]]", "kind" : "implicit def"}, {"label" : "funcIterMapper", "tail" : "(hm: IterFuncMapper[O, C, HF, HTT, HDT]): IterFuncMapper[O, C, Func[Tail, HF], Func[Tail, HTT], FuncLike[Tail, HDT]]", "member" : "provingground.induction.IterFuncMapper.funcIterMapper", "link" : "provingground\/induction\/IterFuncMapper$.html#funcIterMapper[Tail<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Tail],O<:provingground.HoTT.Termwithprovingground.HoTT.Subs[O],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],HF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HF],HTT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HTT],HDT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HDT]](implicithm:provingground.induction.IterFuncMapper[O,C,HF,HTT,HDT]):provingground.induction.IterFuncMapper[O,C,provingground.HoTT.Func[Tail,HF],provingground.HoTT.Func[Tail,HTT],provingground.HoTT.FuncLike[Tail,HDT]]", "kind" : "implicit def"}, {"label" : "idIterMapper", "tail" : "(): IterFuncMapper[O, C, O, C, C] { def mapper: provingground.induction.IterFuncShape[O,O] => provingground.induction.IterFuncPtnMap.IdIterPtnMap[O,C] }", "member" : "provingground.induction.IterFuncMapper.idIterMapper", "link" : "provingground\/induction\/IterFuncMapper$.html#idIterMapper[O<:provingground.HoTT.Termwithprovingground.HoTT.Subs[O],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C]]:provingground.induction.IterFuncMapper[O,C,O,C,C]{defmapper:provingground.induction.IterFuncShape[O,O]=>provingground.induction.IterFuncPtnMap.IdIterPtnMap[O,C]}", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/IterFuncMapper$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/IterFuncMapper$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/IterFuncMapper$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/IterFuncMapper$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/IterFuncMapper$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/IterFuncMapper$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/IterFuncMapper$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IterFuncMapper$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IterFuncMapper$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IterFuncMapper$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/IterFuncMapper$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/IterFuncMapper$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/IterFuncMapper$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/IterFuncMapper$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/IterFuncMapper$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/IterFuncMapper$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/IterFuncMapper$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/IterFuncMapper$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/IterFuncMapper$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/induction\/IterFuncMapper.html", "kind" : "trait"}, {"name" : "provingground.induction.IterFuncPtnMap", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/induction\/IterFuncPtnMap.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/induction\/IterFuncPtnMap.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (IterFuncPtnMap[O, C, F, TT, DT]) ⇒ Boolean, msg: ⇒ Any): IterFuncPtnMap[O, C, F, TT, DT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/IterFuncPtnMap.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (IterFuncPtnMap[O, C, F, TT, DT]) ⇒ Boolean): IterFuncPtnMap[O, C, F, TT, DT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/IterFuncPtnMap.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): IterFuncPtnMap[O, C, F, TT, DT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/IterFuncPtnMap.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): IterFuncPtnMap[O, C, F, TT, DT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/IterFuncPtnMap.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (IterFuncPtnMap[O, C, F, TT, DT], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/induction\/IterFuncPtnMap.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (IterFuncPtnMap[O, C, F, TT, DT], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/induction\/IterFuncPtnMap.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "Family", "tail" : "", "member" : "provingground.induction.IterFuncPtnMap.Family", "link" : "provingground\/induction\/IterFuncPtnMap.html#Family=F", "kind" : "type"}, {"label" : "Cod", "tail" : "", "member" : "provingground.induction.IterFuncPtnMap.Cod", "link" : "provingground\/induction\/IterFuncPtnMap.html#Cod=C", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/IterFuncPtnMap.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/IterFuncPtnMap.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/IterFuncPtnMap.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/IterFuncPtnMap.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/IterFuncPtnMap.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/IterFuncPtnMap.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/IterFuncPtnMap.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IterFuncPtnMap.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IterFuncPtnMap.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IterFuncPtnMap.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/IterFuncPtnMap.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/IterFuncPtnMap.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/IterFuncPtnMap.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/IterFuncPtnMap.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/IterFuncPtnMap.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/IterFuncPtnMap.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/IterFuncPtnMap.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/IterFuncPtnMap.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/IterFuncPtnMap.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "inducedDep", "tail" : "(f: FuncLike[O, Cod]): (Family) ⇒ DT", "member" : "provingground.induction.IterFuncPtnMap.inducedDep", "link" : "provingground\/induction\/IterFuncPtnMap.html#inducedDep(f:provingground.HoTT.FuncLike[O,IterFuncPtnMap.this.Cod]):IterFuncPtnMap.this.Family=>DT", "kind" : "abstract def"}, {"label" : "induced", "tail" : "(f: Func[O, Cod]): (Family) ⇒ TT", "member" : "provingground.induction.IterFuncPtnMap.induced", "link" : "provingground\/induction\/IterFuncPtnMap.html#induced(f:provingground.HoTT.Func[O,IterFuncPtnMap.this.Cod]):IterFuncPtnMap.this.Family=>TT", "kind" : "abstract def"}, {"label" : "subs", "tail" : "(x: Term, y: Term): IterFuncPtnMap[O, C, F, TT, DT]", "member" : "provingground.induction.IterFuncPtnMap.subs", "link" : "provingground\/induction\/IterFuncPtnMap.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.induction.IterFuncPtnMap[O,C,F,TT,DT]", "kind" : "abstract def"}, {"label" : "depTarget", "tail" : "(xs: Func[O, Typ[Cod]]): (Family) ⇒ Typ[DT]", "member" : "provingground.induction.IterFuncPtnMap.depTarget", "link" : "provingground\/induction\/IterFuncPtnMap.html#depTarget(xs:provingground.HoTT.Func[O,provingground.HoTT.Typ[IterFuncPtnMap.this.Cod]]):IterFuncPtnMap.this.Family=>provingground.HoTT.Typ[DT]", "kind" : "abstract def"}, {"label" : "target", "tail" : "(x: Typ[Cod]): Typ[TT]", "member" : "provingground.induction.IterFuncPtnMap.target", "link" : "provingground\/induction\/IterFuncPtnMap.html#target(x:provingground.HoTT.Typ[IterFuncPtnMap.this.Cod]):provingground.HoTT.Typ[TT]", "kind" : "abstract def"}, {"label" : "apply", "tail" : "(tp: Typ[O]): Typ[Family]", "member" : "provingground.induction.IterFuncPtnMap.apply", "link" : "provingground\/induction\/IterFuncPtnMap.html#apply(tp:provingground.HoTT.Typ[O]):provingground.HoTT.Typ[IterFuncPtnMap.this.Family]", "kind" : "abstract def"}, {"label" : "univLevel", "tail" : ": Int", "member" : "provingground.induction.IterFuncPtnMap.univLevel", "link" : "provingground\/induction\/IterFuncPtnMap.html#univLevel:Int", "kind" : "abstract val"}], "shortDescription" : "a family of the form P: A -> B -> W etc, or dependent versions of this as a function of W,together with the scala type of a codomain; has methods for defining induced functions and dependent functions.", "object" : "provingground\/induction\/IterFuncPtnMap$.html", "members_object" : [{"label" : "DepFuncIterPtnMap", "tail" : "", "member" : "provingground.induction.IterFuncPtnMap.DepFuncIterPtnMap", "link" : "provingground\/induction\/IterFuncPtnMap$.html#DepFuncIterPtnMap[TT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TT],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V],T<:provingground.HoTT.Termwithprovingground.HoTT.Subs[T],D<:provingground.HoTT.Termwithprovingground.HoTT.Subs[D],O<:provingground.HoTT.Termwithprovingground.HoTT.Subs[O],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C]]extendsIterFuncPtnMap[O,C,provingground.HoTT.FuncLike[TT,V],provingground.HoTT.FuncLike[TT,T],provingground.HoTT.FuncLike[TT,D]]withProductwithSerializable", "kind" : "case class"}, {"label" : "FuncIterPtnMap", "tail" : "", "member" : "provingground.induction.IterFuncPtnMap.FuncIterPtnMap", "link" : "provingground\/induction\/IterFuncPtnMap$.html#FuncIterPtnMap[TT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TT],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V],T<:provingground.HoTT.Termwithprovingground.HoTT.Subs[T],D<:provingground.HoTT.Termwithprovingground.HoTT.Subs[D],O<:provingground.HoTT.Termwithprovingground.HoTT.Subs[O],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C]]extendsIterFuncPtnMap[O,C,provingground.HoTT.Func[TT,V],provingground.HoTT.Func[TT,T],provingground.HoTT.FuncLike[TT,D]]withProductwithSerializable", "kind" : "case class"}, {"label" : "IdIterPtnMap", "tail" : "", "member" : "provingground.induction.IterFuncPtnMap.IdIterPtnMap", "link" : "provingground\/induction\/IterFuncPtnMap$.html#IdIterPtnMap[O<:provingground.HoTT.Termwithprovingground.HoTT.Subs[O],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C]]extendsIterFuncPtnMap[O,C,O,C,C]withProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/IterFuncPtnMap$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/IterFuncPtnMap$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/IterFuncPtnMap$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/IterFuncPtnMap$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/IterFuncPtnMap$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/IterFuncPtnMap$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/IterFuncPtnMap$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IterFuncPtnMap$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IterFuncPtnMap$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IterFuncPtnMap$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/IterFuncPtnMap$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/IterFuncPtnMap$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/IterFuncPtnMap$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/IterFuncPtnMap$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/IterFuncPtnMap$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/IterFuncPtnMap$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/IterFuncPtnMap$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/IterFuncPtnMap$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/IterFuncPtnMap$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/induction\/IterFuncPtnMap.html", "kind" : "trait"}, {"name" : "provingground.induction.IterFuncShape", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/induction\/IterFuncShape.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/induction\/IterFuncShape.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (IterFuncShape[O, F]) ⇒ Boolean, msg: ⇒ Any): IterFuncShape[O, F]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/IterFuncShape.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (IterFuncShape[O, F]) ⇒ Boolean): IterFuncShape[O, F]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/IterFuncShape.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): IterFuncShape[O, F]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/IterFuncShape.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): IterFuncShape[O, F]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/IterFuncShape.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (IterFuncShape[O, F], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/induction\/IterFuncShape.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (IterFuncShape[O, F], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/induction\/IterFuncShape.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/IterFuncShape.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/IterFuncShape.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/IterFuncShape.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/IterFuncShape.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/IterFuncShape.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/IterFuncShape.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/IterFuncShape.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IterFuncShape.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IterFuncShape.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IterFuncShape.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/IterFuncShape.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/IterFuncShape.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/IterFuncShape.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/IterFuncShape.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/IterFuncShape.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/IterFuncShape.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/IterFuncShape.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/IterFuncShape.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/IterFuncShape.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "subs", "tail" : "(x: Term, y: Term): IterFuncShape[O, F]", "member" : "provingground.induction.IterFuncShape.subs", "link" : "provingground\/induction\/IterFuncShape.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.induction.IterFuncShape[O,F]", "kind" : "abstract def"}, {"label" : "mapper", "tail" : "(): IterFuncMapper[O, C, F, TT, DT] forSome {type TT <: Term with Subs[TT], type DT <: Term with Subs[DT]}", "member" : "provingground.induction.IterFuncShape.mapper", "link" : "provingground\/induction\/IterFuncShape.html#mapper[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C]]:provingground.induction.IterFuncMapper[O,C,F,TT,DT]forSome{typeTT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TT];typeDT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[DT]}", "kind" : "abstract def"}, {"label" : "apply", "tail" : "(tp: Typ[O]): Typ[F]", "member" : "provingground.induction.IterFuncShape.apply", "link" : "provingground\/induction\/IterFuncShape.html#apply(tp:provingground.HoTT.Typ[O]):provingground.HoTT.Typ[F]", "kind" : "abstract def"}], "shortDescription" : "a family of the form P: A -> B -> W etc, or dependent versions of this as a function of W.", "object" : "provingground\/induction\/IterFuncShape$.html", "members_object" : [{"label" : "fromTyp", "tail" : "(w: Typ[Term], fmly: F): IterFuncShape[Term, F]", "member" : "provingground.induction.IterFuncShape.fromTyp", "link" : "provingground\/induction\/IterFuncShape$.html#fromTyp[F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F]](w:provingground.HoTT.Typ[provingground.HoTT.Term],fmly:F):provingground.induction.IterFuncShape[provingground.HoTT.Term,F]", "kind" : "def"}, {"label" : "getExst", "tail" : "(w: Typ[Term], fmly: Typ[Term]): Exst", "member" : "provingground.induction.IterFuncShape.getExst", "link" : "provingground\/induction\/IterFuncShape$.html#getExst(w:provingground.HoTT.Typ[provingground.HoTT.Term],fmly:provingground.HoTT.Typ[provingground.HoTT.Term]):provingground.induction.IterFuncShape.Exst", "kind" : "def"}, {"label" : "Exst", "tail" : "", "member" : "provingground.induction.IterFuncShape.Exst", "link" : "provingground\/induction\/IterFuncShape$.html#Exst", "kind" : "object"}, {"label" : "Exst", "tail" : "", "member" : "provingground.induction.IterFuncShape.Exst", "link" : "provingground\/induction\/IterFuncShape$.html#ExstextendsAnyRef", "kind" : "trait"}, {"label" : "DepFuncShape", "tail" : "", "member" : "provingground.induction.IterFuncShape.DepFuncShape", "link" : "provingground\/induction\/IterFuncShape$.html#DepFuncShape[TT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TT],O<:provingground.HoTT.Termwithprovingground.HoTT.Subs[O],HF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HF]]extendsIterFuncShape[O,provingground.HoTT.FuncLike[TT,HF]]withProductwithSerializable", "kind" : "case class"}, {"label" : "FuncShape", "tail" : "", "member" : "provingground.induction.IterFuncShape.FuncShape", "link" : "provingground\/induction\/IterFuncShape$.html#FuncShape[TT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TT],O<:provingground.HoTT.Termwithprovingground.HoTT.Subs[O],HF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HF]]extendsIterFuncShape[O,provingground.HoTT.Func[TT,HF]]withProductwithSerializable", "kind" : "case class"}, {"label" : "IdIterShape", "tail" : "", "member" : "provingground.induction.IterFuncShape.IdIterShape", "link" : "provingground\/induction\/IterFuncShape$.html#IdIterShape[O<:provingground.HoTT.Termwithprovingground.HoTT.Subs[O]]extendsIterFuncShape[O,O]withProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/IterFuncShape$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/IterFuncShape$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/IterFuncShape$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/IterFuncShape$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/IterFuncShape$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/IterFuncShape$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/IterFuncShape$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IterFuncShape$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IterFuncShape$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IterFuncShape$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/IterFuncShape$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/IterFuncShape$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/IterFuncShape$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/IterFuncShape$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/IterFuncShape$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/IterFuncShape$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/IterFuncShape$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/IterFuncShape$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/IterFuncShape$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/induction\/IterFuncShape.html", "kind" : "trait"}, {"name" : "provingground.induction.RecursiveDefinition", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/induction\/RecursiveDefinition.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/induction\/RecursiveDefinition.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (RecursiveDefinition[H, C]) ⇒ Boolean, msg: ⇒ Any): RecursiveDefinition[H, C]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/RecursiveDefinition.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (RecursiveDefinition[H, C]) ⇒ Boolean): RecursiveDefinition[H, C]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/RecursiveDefinition.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): RecursiveDefinition[H, C]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/RecursiveDefinition.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): RecursiveDefinition[H, C]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/RecursiveDefinition.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (RecursiveDefinition[H, C], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/induction\/RecursiveDefinition.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (RecursiveDefinition[H, C], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/induction\/RecursiveDefinition.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "act", "tail" : "(arg: H): C", "member" : "provingground.induction.RecursiveDefinition.act", "link" : "provingground\/induction\/RecursiveDefinition.html#act(arg:H):C", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "provingground.HoTT.RecFunc.toString", "link" : "provingground\/induction\/RecursiveDefinition.html#toString():String", "kind" : "def"}, {"label" : "depcodom", "tail" : ": (H) ⇒ Typ[C]", "member" : "provingground.HoTT.Func.depcodom", "link" : "provingground\/induction\/RecursiveDefinition.html#depcodom:W=>provingground.HoTT.Typ[U]", "kind" : "val"}, {"label" : "typed", "tail" : ": TypedTerm[Func[H, C]]", "member" : "provingground.HoTT.Func.typed", "link" : "provingground\/induction\/RecursiveDefinition.html#typed:provingground.HoTT.TypedTerm[provingground.HoTT.Func[W,U]]", "kind" : "lazy val"}, {"label" : "apply", "tail" : "(arg: H): C", "member" : "provingground.HoTT.FuncLike.apply", "link" : "provingground\/induction\/RecursiveDefinition.html#apply(arg:W):U", "kind" : "def"}, {"label" : "andThen", "tail" : "(g: (C) ⇒ A): (H) ⇒ A", "member" : "scala.Function1.andThen", "link" : "provingground\/induction\/RecursiveDefinition.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) ⇒ H): (A) ⇒ C", "member" : "scala.Function1.compose", "link" : "provingground\/induction\/RecursiveDefinition.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "usesVar", "tail" : "(t: Term): Boolean", "member" : "provingground.HoTT.Term.usesVar", "link" : "provingground\/induction\/RecursiveDefinition.html#usesVar(t:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "indepOf", "tail" : "(that: Term): Boolean", "member" : "provingground.HoTT.Term.indepOf", "link" : "provingground\/induction\/RecursiveDefinition.html#indepOf(that:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "dependsOn", "tail" : "(that: Term): Boolean", "member" : "provingground.HoTT.Term.dependsOn", "link" : "provingground\/induction\/RecursiveDefinition.html#dependsOn(that:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "replace", "tail" : "(x: Term, y: Term): Func[H, C] with Subs[Func[H, C]]", "member" : "provingground.HoTT.Subs.replace", "link" : "provingground\/induction\/RecursiveDefinition.html#replace(x:provingground.HoTT.Term,y:provingground.HoTT.Term):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/RecursiveDefinition.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/RecursiveDefinition.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/RecursiveDefinition.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/RecursiveDefinition.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/RecursiveDefinition.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/RecursiveDefinition.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/RecursiveDefinition.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/RecursiveDefinition.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/RecursiveDefinition.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/RecursiveDefinition.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/RecursiveDefinition.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/RecursiveDefinition.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/RecursiveDefinition.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/RecursiveDefinition.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/RecursiveDefinition.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/RecursiveDefinition.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/RecursiveDefinition.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/RecursiveDefinition.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "rebuilt", "tail" : "(): RecursiveDefinition[H, C]", "member" : "provingground.induction.RecursiveDefinition.rebuilt", "link" : "provingground\/induction\/RecursiveDefinition.html#rebuilt:provingground.induction.RecursiveDefinition[H,C]", "kind" : "abstract def"}, {"label" : "subs", "tail" : "(x: Term, y: Term): RecursiveDefinition[H, C]", "member" : "provingground.induction.RecursiveDefinition.subs", "link" : "provingground\/induction\/RecursiveDefinition.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.induction.RecursiveDefinition[H,C]", "kind" : "abstract def"}, {"label" : "caseFn", "tail" : "(f: ⇒ Func[H, C])(arg: H): Option[C]", "member" : "provingground.induction.RecursiveDefinition.caseFn", "link" : "provingground\/induction\/RecursiveDefinition.html#caseFn(f:=>provingground.HoTT.Func[H,C])(arg:H):Option[C]", "kind" : "abstract def"}, {"label" : "defnData", "tail" : ": Vector[Term]", "member" : "provingground.HoTT.RecFunc.defnData", "link" : "provingground\/induction\/RecursiveDefinition.html#defnData:Vector[provingground.HoTT.Term]", "kind" : "abstract val"}, {"label" : "typ", "tail" : ": Typ[Func[H, C]]", "member" : "provingground.HoTT.Func.typ", "link" : "provingground\/induction\/RecursiveDefinition.html#typ:provingground.HoTT.Typ[provingground.HoTT.Func[W,U]]", "kind" : "abstract val"}, {"label" : "codom", "tail" : ": Typ[C]", "member" : "provingground.HoTT.Func.codom", "link" : "provingground\/induction\/RecursiveDefinition.html#codom:provingground.HoTT.Typ[U]", "kind" : "abstract val"}, {"label" : "dom", "tail" : ": Typ[H]", "member" : "provingground.HoTT.Func.dom", "link" : "provingground\/induction\/RecursiveDefinition.html#dom:provingground.HoTT.Typ[W]", "kind" : "abstract val"}, {"member" : "provingground.HoTT.FuncLike.Obj", "error" : "unsupported entity"}, {"label" : "newobj", "tail" : "(): Func[H, C] with Subs[Func[H, C]]", "member" : "provingground.HoTT.Subs.newobj", "link" : "provingground\/induction\/RecursiveDefinition.html#newobj:Uwithprovingground.HoTT.Subs[U]", "kind" : "abstract def"}], "shortDescription" : "recursively defined function, to be built by mixing in cases,defaults to a formal application by itself", "object" : "provingground\/induction\/RecursiveDefinition$.html", "members_object" : [{"label" : "DataCons", "tail" : "", "member" : "provingground.induction.RecursiveDefinition.DataCons", "link" : "provingground\/induction\/RecursiveDefinition$.html#DataCons[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],D<:provingground.HoTT.Termwithprovingground.HoTT.Subs[D]]extendsRecursiveDefinition[H,C]withProductwithSerializable", "kind" : "case class"}, {"label" : "Empty", "tail" : "", "member" : "provingground.induction.RecursiveDefinition.Empty", "link" : "provingground\/induction\/RecursiveDefinition$.html#Empty[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C]]extendsRecursiveDefinition[H,C]withProductwithSerializable", "kind" : "case class"}, {"label" : "rebuild", "tail" : "(t: U): U", "member" : "provingground.induction.RecursiveDefinition.rebuild", "link" : "provingground\/induction\/RecursiveDefinition$.html#rebuild[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]](t:U):U", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/RecursiveDefinition$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/RecursiveDefinition$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/RecursiveDefinition$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/RecursiveDefinition$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/RecursiveDefinition$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/RecursiveDefinition$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/RecursiveDefinition$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/RecursiveDefinition$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/RecursiveDefinition$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/RecursiveDefinition$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/RecursiveDefinition$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/RecursiveDefinition$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/RecursiveDefinition$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/RecursiveDefinition$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/RecursiveDefinition$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/RecursiveDefinition$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/RecursiveDefinition$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/RecursiveDefinition$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/RecursiveDefinition$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/induction\/RecursiveDefinition.html", "kind" : "trait"}, {"name" : "provingground.induction.Subst", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/induction\/Subst.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/induction\/Subst.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Subst[A]) ⇒ Boolean, msg: ⇒ Any): Subst[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/Subst.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Subst[A]) ⇒ Boolean): Subst[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/Subst.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Subst[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/Subst.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Subst[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/Subst.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Subst[A], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/induction\/Subst.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Subst[A], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/induction\/Subst.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/Subst.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/Subst.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/Subst.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/Subst.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/Subst.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/Subst.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/Subst.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/Subst.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/Subst.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/Subst.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/Subst.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/Subst.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/Subst.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/Subst.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/Subst.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/Subst.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/Subst.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/Subst.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/Subst.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "terms", "tail" : "(a: A): Vector[Term]", "member" : "provingground.induction.Subst.terms", "link" : "provingground\/induction\/Subst.html#terms(a:A):Vector[provingground.HoTT.Term]", "kind" : "abstract def"}, {"label" : "subst", "tail" : "(a: A)(x: Term, y: Term): A", "member" : "provingground.induction.Subst.subst", "link" : "provingground\/induction\/Subst.html#subst(a:A)(x:provingground.HoTT.Term,y:provingground.HoTT.Term):A", "kind" : "abstract def"}], "shortDescription" : "allows substitution of a Term by another, chiefly subtypes of Term and HLists of these;making into a vector of Term rides piggyback on this.", "object" : "provingground\/induction\/Subst$.html", "members_object" : [{"label" : "SubstOp", "tail" : "", "member" : "provingground.induction.Subst.SubstOp", "link" : "provingground\/induction\/Subst$.html#SubstOp[A]extendsAnyRef", "kind" : "implicit class"}, {"label" : "hConsSubst", "tail" : "(arg0: Subst[U], arg1: Subst[V]): Subst[::[U, V]]", "member" : "provingground.induction.Subst.hConsSubst", "link" : "provingground\/induction\/Subst$.html#hConsSubst[U,V<:shapeless.HList](implicitevidence$1:provingground.induction.Subst[U],implicitevidence$2:provingground.induction.Subst[V]):provingground.induction.Subst[U::V]", "kind" : "implicit def"}, {"label" : "HNilSubst", "tail" : "", "member" : "provingground.induction.Subst.HNilSubst", "link" : "provingground\/induction\/Subst$.html#HNilSubst", "kind" : "implicit object"}, {"label" : "termSubst", "tail" : "(): Subst[U]", "member" : "provingground.induction.Subst.termSubst", "link" : "provingground\/induction\/Subst$.html#termSubst[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]:provingground.induction.Subst[U]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/Subst$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/Subst$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/Subst$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/Subst$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/Subst$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/Subst$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/Subst$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/Subst$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/Subst$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/Subst$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/Subst$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/Subst$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/Subst$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/Subst$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/Subst$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/Subst$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/Subst$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/Subst$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/Subst$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/induction\/Subst.html", "kind" : "trait"}, {"name" : "provingground.induction.TestS", "shortDescription" : "", "object" : "provingground\/induction\/TestS$.html", "members_object" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/TestS$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/TestS$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/TestS$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/TestS$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/TestS$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/TestS$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/TestS$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TestS$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TestS$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TestS$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/TestS$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/TestS$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/TestS$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/TestS$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/TestS$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/TestS$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/TestS$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/TestS$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/TestS$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.induction.TLImplicits", "shortDescription" : "implicits for constructing inductive types", "object" : "provingground\/induction\/TLImplicits$.html", "members_object" : [{"label" : "IndexedPair", "tail" : "", "member" : "provingground.induction.TLImplicits.IndexedPair", "link" : "provingground\/induction\/TLImplicits$.html#IndexedPair[F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],Index<:shapeless.HList]extendsAnyRef", "kind" : "implicit class"}, {"label" : "IndexedFamily", "tail" : "", "member" : "provingground.induction.TLImplicits.IndexedFamily", "link" : "provingground\/induction\/TLImplicits$.html#IndexedFamily[F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],Index<:shapeless.HList]extendsAnyRef", "kind" : "implicit class"}, {"label" : "IterFuncTypHead", "tail" : "", "member" : "provingground.induction.TLImplicits.IterFuncTypHead", "link" : "provingground\/induction\/TLImplicits$.html#IterFuncTypHead[O<:provingground.HoTT.Termwithprovingground.HoTT.Subs[O]]extendsAnyRef", "kind" : "implicit class"}, {"label" : "TypAsSeqHead", "tail" : "", "member" : "provingground.induction.TLImplicits.TypAsSeqHead", "link" : "provingground\/induction\/TLImplicits$.html#TypAsSeqHead[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H]]extendsAnyRef", "kind" : "implicit class"}, {"label" : "ConstructorHead", "tail" : "", "member" : "provingground.induction.TLImplicits.ConstructorHead", "link" : "provingground\/induction\/TLImplicits$.html#ConstructorHead[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H]]extendsAnyRef", "kind" : "implicit class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/TLImplicits$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/TLImplicits$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/TLImplicits$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/TLImplicits$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/TLImplicits$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/TLImplicits$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/TLImplicits$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TLImplicits$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TLImplicits$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TLImplicits$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/TLImplicits$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/TLImplicits$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/TLImplicits$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/TLImplicits$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/TLImplicits$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/TLImplicits$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/TLImplicits$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/TLImplicits$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/TLImplicits$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.induction.TypFamilyExst", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/induction\/TypFamilyExst.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/induction\/TypFamilyExst.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TypFamilyExst) ⇒ Boolean, msg: ⇒ Any): TypFamilyExst", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/TypFamilyExst.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TypFamilyExst) ⇒ Boolean): TypFamilyExst", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/TypFamilyExst.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): TypFamilyExst", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/TypFamilyExst.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): TypFamilyExst", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/TypFamilyExst.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (TypFamilyExst, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/induction\/TypFamilyExst.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (TypFamilyExst, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/induction\/TypFamilyExst.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "IndexedConstructorSeqExst", "tail" : "", "member" : "provingground.induction.TypFamilyExst.IndexedConstructorSeqExst", "link" : "provingground\/induction\/TypFamilyExst.html#IndexedConstructorSeqExst", "kind" : "object"}, {"label" : "IndexedConstructorSeqExst", "tail" : "", "member" : "provingground.induction.TypFamilyExst.IndexedConstructorSeqExst", "link" : "provingground\/induction\/TypFamilyExst.html#IndexedConstructorSeqExstextendsAnyRef", "kind" : "trait"}, {"label" : "IndexedConstructorShapeExst", "tail" : "", "member" : "provingground.induction.TypFamilyExst.IndexedConstructorShapeExst", "link" : "provingground\/induction\/TypFamilyExst.html#IndexedConstructorShapeExst", "kind" : "object"}, {"label" : "IndexedConstructorShapeExst", "tail" : "", "member" : "provingground.induction.TypFamilyExst.IndexedConstructorShapeExst", "link" : "provingground\/induction\/TypFamilyExst.html#IndexedConstructorShapeExstextendsAnyRef", "kind" : "sealed trait"}, {"label" : "IndexedIterFuncExst", "tail" : "", "member" : "provingground.induction.TypFamilyExst.IndexedIterFuncExst", "link" : "provingground\/induction\/TypFamilyExst.html#IndexedIterFuncExst", "kind" : "object"}, {"label" : "IndexedIterFuncExst", "tail" : "", "member" : "provingground.induction.TypFamilyExst.IndexedIterFuncExst", "link" : "provingground\/induction\/TypFamilyExst.html#IndexedIterFuncExstextendsAnyRef", "kind" : "trait"}, {"label" : "mapsTo", "tail" : "(variable: TT, dom: Typ[TT]): TypFamilyExst { ... \/* 2 definitions in type refinement *\/ }", "member" : "provingground.induction.TypFamilyExst.mapsTo", "link" : "provingground\/induction\/TypFamilyExst.html#mapsTo[TT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TT]](variable:TT,dom:provingground.HoTT.Typ[TT]):provingground.induction.TypFamilyExst{typeFb=provingground.HoTT.Func[TT,TypFamilyExst.this.Fb];typeIndex=TT::TypFamilyExst.this.Index}", "kind" : "def"}, {"label" : "->:", "tail" : "(dom: Typ[TT]): TypFamilyExst { ... \/* 2 definitions in type refinement *\/ }", "member" : "provingground.induction.TypFamilyExst.->:", "link" : "provingground\/induction\/TypFamilyExst.html#->:[TT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TT]](dom:provingground.HoTT.Typ[TT]):provingground.induction.TypFamilyExst{typeFb=provingground.HoTT.Func[TTwithprovingground.HoTT.Subs[TT],TypFamilyExst.this.Fb];typeIndex=TT::TypFamilyExst.this.Index}", "kind" : "def"}, {"label" : "~>:", "tail" : "(variable: TT): TypFamilyExst { ... \/* 2 definitions in type refinement *\/ }", "member" : "provingground.induction.TypFamilyExst.~>:", "link" : "provingground\/induction\/TypFamilyExst.html#~>:[TT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TT]](variable:TT):provingground.induction.TypFamilyExst{typeFb=provingground.HoTT.FuncLike[TT,TypFamilyExst.this.Fb];typeIndex=TT::TypFamilyExst.this.Index}", "kind" : "def"}, {"label" : "lambdaExst", "tail" : "(variable: TT, dom: Typ[TT]): TypFamilyExst { ... \/* 2 definitions in type refinement *\/ }", "member" : "provingground.induction.TypFamilyExst.lambdaExst", "link" : "provingground\/induction\/TypFamilyExst.html#lambdaExst[TT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TT]](variable:TT,dom:provingground.HoTT.Typ[TT]):provingground.induction.TypFamilyExst{typeFb=provingground.HoTT.FuncLike[TT,TypFamilyExst.this.Fb];typeIndex=TT::TypFamilyExst.this.Index}", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/TypFamilyExst.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/TypFamilyExst.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/TypFamilyExst.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/TypFamilyExst.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/TypFamilyExst.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/TypFamilyExst.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/TypFamilyExst.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TypFamilyExst.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TypFamilyExst.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TypFamilyExst.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/TypFamilyExst.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/TypFamilyExst.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/TypFamilyExst.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/TypFamilyExst.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/TypFamilyExst.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/TypFamilyExst.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/TypFamilyExst.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/TypFamilyExst.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/TypFamilyExst.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "subst", "tail" : ": Subst[Index]", "member" : "provingground.induction.TypFamilyExst.subst", "link" : "provingground\/induction\/TypFamilyExst.html#subst:provingground.induction.Subst[TypFamilyExst.this.Index]", "kind" : "implicit abstract val"}, {"label" : "W", "tail" : ": Fb", "member" : "provingground.induction.TypFamilyExst.W", "link" : "provingground\/induction\/TypFamilyExst.html#W:TypFamilyExst.this.Fb", "kind" : "abstract val"}, {"label" : "pattern", "tail" : ": TypFamilyPtn[Term, Fb, Index]", "member" : "provingground.induction.TypFamilyExst.pattern", "link" : "provingground\/induction\/TypFamilyExst.html#pattern:provingground.induction.TypFamilyPtn[provingground.HoTT.Term,TypFamilyExst.this.Fb,TypFamilyExst.this.Index]", "kind" : "abstract val"}, {"member" : "provingground.induction.TypFamilyExst.Index", "error" : "unsupported entity"}, {"member" : "provingground.induction.TypFamilyExst.Fb", "error" : "unsupported entity"}], "shortDescription" : "", "object" : "provingground\/induction\/TypFamilyExst$.html", "members_object" : [{"label" : "getTerms", "tail" : "(): (HList) ⇒ List[Term]", "member" : "provingground.induction.TypFamilyExst.getTerms", "link" : "provingground\/induction\/TypFamilyExst$.html#getTerms:shapeless.HList=>List[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "getIndexedConstructorSeq", "tail" : "(w: Fb, intros: List[Term]): IndexedConstructorSeqExst", "member" : "provingground.induction.TypFamilyExst.getIndexedConstructorSeq", "link" : "provingground\/induction\/TypFamilyExst$.html#getIndexedConstructorSeq[Fb<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Fb]](w:Fb,intros:List[provingground.HoTT.Term]):provingground.induction.TypFamilyExst#IndexedConstructorSeqExst", "kind" : "def"}, {"label" : "getFamily", "tail" : "(w: Fb): TypFamilyExst", "member" : "provingground.induction.TypFamilyExst.getFamily", "link" : "provingground\/induction\/TypFamilyExst$.html#getFamily[Fb<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Fb]](w:Fb):provingground.induction.TypFamilyExst", "kind" : "def"}, {"label" : "apply", "tail" : "(tf: TypFamilyPtn[Term, Fib, In], w: Fib)(arg0: Subst[In]): TypFamilyExst { ... \/* 2 definitions in type refinement *\/ }", "member" : "provingground.induction.TypFamilyExst.apply", "link" : "provingground\/induction\/TypFamilyExst$.html#apply[Fib<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Fib],In<:shapeless.HList](tf:provingground.induction.TypFamilyPtn[provingground.HoTT.Term,Fib,In],w:Fib)(implicitevidence$1:provingground.induction.Subst[In]):provingground.induction.TypFamilyExst{typeFb=Fib;typeIndex=In}", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/TypFamilyExst$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/TypFamilyExst$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/TypFamilyExst$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/TypFamilyExst$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/TypFamilyExst$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/TypFamilyExst$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/TypFamilyExst$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TypFamilyExst$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TypFamilyExst$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TypFamilyExst$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/TypFamilyExst$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/TypFamilyExst$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/TypFamilyExst$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/TypFamilyExst$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/TypFamilyExst$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/TypFamilyExst$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/TypFamilyExst$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/TypFamilyExst$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/TypFamilyExst$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/induction\/TypFamilyExst.html", "kind" : "trait"}, {"name" : "provingground.induction.TypFamilyMap", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/induction\/TypFamilyMap.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/induction\/TypFamilyMap.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TypFamilyMap[H, F, C, Index, IF, IDF, IDFT]) ⇒ Boolean, msg: ⇒ Any): TypFamilyMap[H, F, C, Index, IF, IDF, IDFT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/TypFamilyMap.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TypFamilyMap[H, F, C, Index, IF, IDF, IDFT]) ⇒ Boolean): TypFamilyMap[H, F, C, Index, IF, IDF, IDFT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/TypFamilyMap.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): TypFamilyMap[H, F, C, Index, IF, IDF, IDFT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/TypFamilyMap.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): TypFamilyMap[H, F, C, Index, IF, IDF, IDFT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/TypFamilyMap.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (TypFamilyMap[H, F, C, Index, IF, IDF, IDFT], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/induction\/TypFamilyMap.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (TypFamilyMap[H, F, C, Index, IF, IDF, IDFT], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/induction\/TypFamilyMap.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/TypFamilyMap.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/TypFamilyMap.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/TypFamilyMap.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/TypFamilyMap.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/TypFamilyMap.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/TypFamilyMap.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/TypFamilyMap.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TypFamilyMap.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TypFamilyMap.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TypFamilyMap.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/TypFamilyMap.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/TypFamilyMap.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/TypFamilyMap.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/TypFamilyMap.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/TypFamilyMap.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/TypFamilyMap.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/TypFamilyMap.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/TypFamilyMap.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/TypFamilyMap.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "subs", "tail" : "(x: Term, y: Term): TypFamilyMap[H, F, C, Index, IF, IDF, IDFT]", "member" : "provingground.induction.TypFamilyMap.subs", "link" : "provingground\/induction\/TypFamilyMap.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.induction.TypFamilyMap[H,F,C,Index,IF,IDF,IDFT]", "kind" : "abstract def"}, {"label" : "typRestrict", "tail" : "(xs: IDFT, ind: Index): Func[H, Typ[C]]", "member" : "provingground.induction.TypFamilyMap.typRestrict", "link" : "provingground\/induction\/TypFamilyMap.html#typRestrict(xs:IDFT,ind:Index):provingground.HoTT.Func[H,provingground.HoTT.Typ[C]]", "kind" : "abstract def"}, {"label" : "depRestrict", "tail" : "(f: IDF, ind: Index): FuncLike[H, C]", "member" : "provingground.induction.TypFamilyMap.depRestrict", "link" : "provingground\/induction\/TypFamilyMap.html#depRestrict(f:IDF,ind:Index):provingground.HoTT.FuncLike[H,C]", "kind" : "abstract def"}, {"label" : "restrict", "tail" : "(f: IF, ind: Index): Func[H, C]", "member" : "provingground.induction.TypFamilyMap.restrict", "link" : "provingground\/induction\/TypFamilyMap.html#restrict(f:IF,ind:Index):provingground.HoTT.Func[H,C]", "kind" : "abstract def"}, {"label" : "iterDepFunc", "tail" : "(funcs: (Index) ⇒ FuncLike[H, C]): IDF", "member" : "provingground.induction.TypFamilyMap.iterDepFunc", "link" : "provingground\/induction\/TypFamilyMap.html#iterDepFunc(funcs:Index=>provingground.HoTT.FuncLike[H,C]):IDF", "kind" : "abstract def"}, {"label" : "iterFunc", "tail" : "(funcs: (Index) ⇒ Func[H, C]): IF", "member" : "provingground.induction.TypFamilyMap.iterFunc", "link" : "provingground\/induction\/TypFamilyMap.html#iterFunc(funcs:Index=>provingground.HoTT.Func[H,C]):IF", "kind" : "abstract def"}, {"label" : "iterDepFuncTyp", "tail" : "(w: Typ[H], xs: IDFT): Typ[IDF]", "member" : "provingground.induction.TypFamilyMap.iterDepFuncTyp", "link" : "provingground\/induction\/TypFamilyMap.html#iterDepFuncTyp(w:provingground.HoTT.Typ[H],xs:IDFT):provingground.HoTT.Typ[IDF]", "kind" : "abstract def"}, {"label" : "iterFuncTyp", "tail" : "(w: Typ[H], x: Typ[C]): Typ[IF]", "member" : "provingground.induction.TypFamilyMap.iterFuncTyp", "link" : "provingground\/induction\/TypFamilyMap.html#iterFuncTyp(w:provingground.HoTT.Typ[H],x:provingground.HoTT.Typ[C]):provingground.HoTT.Typ[IF]", "kind" : "abstract def"}, {"label" : "pattern", "tail" : ": TypFamilyPtn[H, F, Index]", "member" : "provingground.induction.TypFamilyMap.pattern", "link" : "provingground\/induction\/TypFamilyMap.html#pattern:provingground.induction.TypFamilyPtn[H,F,Index]", "kind" : "abstract val"}], "shortDescription" : "shape of a type family, together with the type of a codomain;fixing scala types of functions and dependent functions on the type family", "object" : "provingground\/induction\/TypFamilyMap$.html", "members_object" : [{"label" : "DepFuncTypFamilyMap", "tail" : "", "member" : "provingground.induction.TypFamilyMap.DepFuncTypFamilyMap", "link" : "provingground\/induction\/TypFamilyMap$.html#DepFuncTypFamilyMap[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],TF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TF],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],TIndex<:shapeless.HList,TIF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TIF],TIDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TIDF],TIDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TIDFT]]extendsTypFamilyMap[H,provingground.HoTT.FuncLike[U,TF],C,U::TIndex,provingground.HoTT.FuncLike[U,TIF],provingground.HoTT.FuncLike[U,TIDF],provingground.HoTT.FuncLike[U,TIDFT]]withProductwithSerializable", "kind" : "case class"}, {"label" : "FuncTypFamilyMap", "tail" : "", "member" : "provingground.induction.TypFamilyMap.FuncTypFamilyMap", "link" : "provingground\/induction\/TypFamilyMap$.html#FuncTypFamilyMap[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],TF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TF],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],TIndex<:shapeless.HList,TIF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TIF],TIDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TIDF],TIDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TIDFT]]extendsTypFamilyMap[H,provingground.HoTT.Func[U,TF],C,U::TIndex,provingground.HoTT.FuncLike[U,TIF],provingground.HoTT.FuncLike[U,TIDF],provingground.HoTT.FuncLike[U,TIDFT]]withProductwithSerializable", "kind" : "case class"}, {"label" : "IdSubTypFamilyMap", "tail" : "", "member" : "provingground.induction.TypFamilyMap.IdSubTypFamilyMap", "link" : "provingground\/induction\/TypFamilyMap$.html#IdSubTypFamilyMap[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],TC<:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[TC],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C]]extendsTypFamilyMap[H,provingground.HoTT.Typ[H],C,shapeless.HNil,provingground.HoTT.Func[H,C],provingground.HoTT.FuncLike[H,C],provingground.HoTT.Func[H,TC]]withProductwithSerializable", "kind" : "case class"}, {"label" : "IdTypFamilyMap", "tail" : "", "member" : "provingground.induction.TypFamilyMap.IdTypFamilyMap", "link" : "provingground\/induction\/TypFamilyMap$.html#IdTypFamilyMap[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C]]extendsTypFamilyMap[H,provingground.HoTT.Typ[H],C,shapeless.HNil,provingground.HoTT.Func[H,C],provingground.HoTT.FuncLike[H,C],provingground.HoTT.Func[H,provingground.HoTT.Typ[C]]]withProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/TypFamilyMap$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/TypFamilyMap$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/TypFamilyMap$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/TypFamilyMap$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/TypFamilyMap$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/TypFamilyMap$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/TypFamilyMap$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TypFamilyMap$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TypFamilyMap$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TypFamilyMap$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/TypFamilyMap$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/TypFamilyMap$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/TypFamilyMap$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/TypFamilyMap$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/TypFamilyMap$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/TypFamilyMap$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/TypFamilyMap$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/TypFamilyMap$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/TypFamilyMap$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/induction\/TypFamilyMap.html", "kind" : "trait"}, {"name" : "provingground.induction.TypFamilyMapper", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/induction\/TypFamilyMapper.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/induction\/TypFamilyMapper.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TypFamilyMapper[H, F, C, Index, IF, IDF, IDFT]) ⇒ Boolean, msg: ⇒ Any): TypFamilyMapper[H, F, C, Index, IF, IDF, IDFT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/TypFamilyMapper.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TypFamilyMapper[H, F, C, Index, IF, IDF, IDFT]) ⇒ Boolean): TypFamilyMapper[H, F, C, Index, IF, IDF, IDFT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/TypFamilyMapper.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): TypFamilyMapper[H, F, C, Index, IF, IDF, IDFT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/TypFamilyMapper.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): TypFamilyMapper[H, F, C, Index, IF, IDF, IDFT]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/TypFamilyMapper.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (TypFamilyMapper[H, F, C, Index, IF, IDF, IDFT], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/induction\/TypFamilyMapper.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (TypFamilyMapper[H, F, C, Index, IF, IDF, IDFT], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/induction\/TypFamilyMapper.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/TypFamilyMapper.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/TypFamilyMapper.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/TypFamilyMapper.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/TypFamilyMapper.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/TypFamilyMapper.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/TypFamilyMapper.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/TypFamilyMapper.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TypFamilyMapper.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TypFamilyMapper.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TypFamilyMapper.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/TypFamilyMapper.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/TypFamilyMapper.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/TypFamilyMapper.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/TypFamilyMapper.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/TypFamilyMapper.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/TypFamilyMapper.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/TypFamilyMapper.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/TypFamilyMapper.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/TypFamilyMapper.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "mapper", "tail" : ": (TypFamilyPtn[H, F, Index]) ⇒ TypFamilyMap[H, F, C, Index, IF, IDF, IDFT]", "member" : "provingground.induction.TypFamilyMapper.mapper", "link" : "provingground\/induction\/TypFamilyMapper.html#mapper:provingground.induction.TypFamilyPtn[H,F,Index]=>provingground.induction.TypFamilyMap[H,F,C,Index,IF,IDF,IDFT]", "kind" : "abstract val"}], "shortDescription" : "bridge between TypFamilyPtn and TypFamilyMap", "object" : "provingground\/induction\/TypFamilyMapper$.html", "members_object" : [{"label" : "depFuncTypFamilyMapper", "tail" : "(tail: TypFamilyMapper[H, TF, C, TIndex, TIF, TIDF, TIDFT], subst: Subst[TIndex]): TypFamilyMapper[H, FuncLike[U, TF], C, ::[U, TIndex], FuncLike[U, TIF], FuncLike[U, TIDF], FuncLike[U, TIDFT]]", "member" : "provingground.induction.TypFamilyMapper.depFuncTypFamilyMapper", "link" : "provingground\/induction\/TypFamilyMapper$.html#depFuncTypFamilyMapper[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],TF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TF],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],TIndex<:shapeless.HList,TIF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TIF],TIDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TIDF],TIDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TIDFT]](implicittail:provingground.induction.TypFamilyMapper[H,TF,C,TIndex,TIF,TIDF,TIDFT],implicitsubst:provingground.induction.Subst[TIndex]):provingground.induction.TypFamilyMapper[H,provingground.HoTT.FuncLike[U,TF],C,U::TIndex,provingground.HoTT.FuncLike[U,TIF],provingground.HoTT.FuncLike[U,TIDF],provingground.HoTT.FuncLike[U,TIDFT]]", "kind" : "implicit def"}, {"label" : "funcTypFamilyMapper", "tail" : "(tail: TypFamilyMapper[H, TF, C, TIndex, TIF, TIDF, TIDFT], subst: Subst[TIndex]): TypFamilyMapper[H, Func[U, TF], C, ::[U, TIndex], FuncLike[U, TIF], FuncLike[U, TIDF], FuncLike[U, TIDFT]]", "member" : "provingground.induction.TypFamilyMapper.funcTypFamilyMapper", "link" : "provingground\/induction\/TypFamilyMapper$.html#funcTypFamilyMapper[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],TF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TF],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],TIndex<:shapeless.HList,TIF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TIF],TIDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TIDF],TIDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TIDFT]](implicittail:provingground.induction.TypFamilyMapper[H,TF,C,TIndex,TIF,TIDF,TIDFT],implicitsubst:provingground.induction.Subst[TIndex]):provingground.induction.TypFamilyMapper[H,provingground.HoTT.Func[U,TF],C,U::TIndex,provingground.HoTT.FuncLike[U,TIF],provingground.HoTT.FuncLike[U,TIDF],provingground.HoTT.FuncLike[U,TIDFT]]", "kind" : "implicit def"}, {"label" : "idTypFamilyMapper", "tail" : "(): TypFamilyMapper[H, Typ[H], C, HNil, Func[H, C], FuncLike[H, C], Func[H, Typ[C]]] { val mapper: provingground.induction.TypFamilyPtn[H,provingground.HoTT.Typ[H],shapeless.HNil] => provingground.induction.TypFamilyMap.IdTypFamilyMap[H,C] }", "member" : "provingground.induction.TypFamilyMapper.idTypFamilyMapper", "link" : "provingground\/induction\/TypFamilyMapper$.html#idTypFamilyMapper[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C]]:provingground.induction.TypFamilyMapper[H,provingground.HoTT.Typ[H],C,shapeless.HNil,provingground.HoTT.Func[H,C],provingground.HoTT.FuncLike[H,C],provingground.HoTT.Func[H,provingground.HoTT.Typ[C]]]{valmapper:provingground.induction.TypFamilyPtn[H,provingground.HoTT.Typ[H],shapeless.HNil]=>provingground.induction.TypFamilyMap.IdTypFamilyMap[H,C]}", "kind" : "implicit def"}, {"label" : "idSubTypFamilyMapper", "tail" : "(subEv: TypObj[TC, C]): TypFamilyMapper[H, Typ[H], C, HNil, Func[H, C], FuncLike[H, C], Func[H, TC]] { val mapper: provingground.induction.TypFamilyPtn[H,provingground.HoTT.Typ[H],shapeless.HNil] => provingground.induction.TypFamilyMap.IdSubTypFamilyMap[H,TC,C] }", "member" : "provingground.induction.WeakImplicit.idSubTypFamilyMapper", "link" : "provingground\/induction\/TypFamilyMapper$.html#idSubTypFamilyMapper[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],TC<:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[TC],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C]](implicitsubEv:provingground.induction.TypObj[TC,C]):provingground.induction.TypFamilyMapper[H,provingground.HoTT.Typ[H],C,shapeless.HNil,provingground.HoTT.Func[H,C],provingground.HoTT.FuncLike[H,C],provingground.HoTT.Func[H,TC]]{valmapper:provingground.induction.TypFamilyPtn[H,provingground.HoTT.Typ[H],shapeless.HNil]=>provingground.induction.TypFamilyMap.IdSubTypFamilyMap[H,TC,C]}", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/TypFamilyMapper$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/TypFamilyMapper$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/TypFamilyMapper$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/TypFamilyMapper$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/TypFamilyMapper$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/TypFamilyMapper$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/TypFamilyMapper$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TypFamilyMapper$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TypFamilyMapper$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TypFamilyMapper$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/TypFamilyMapper$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/TypFamilyMapper$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/TypFamilyMapper$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/TypFamilyMapper$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/TypFamilyMapper$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/TypFamilyMapper$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/TypFamilyMapper$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/TypFamilyMapper$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/TypFamilyMapper$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/induction\/TypFamilyMapper.html", "kind" : "trait"}, {"name" : "provingground.induction.TypFamilyPtn", "shortDescription" : "the shape of a type family.", "object" : "provingground\/induction\/TypFamilyPtn$.html", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/induction\/TypFamilyPtn.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/induction\/TypFamilyPtn.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TypFamilyPtn[H, F, Index]) ⇒ Boolean, msg: ⇒ Any): TypFamilyPtn[H, F, Index]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/TypFamilyPtn.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TypFamilyPtn[H, F, Index]) ⇒ Boolean): TypFamilyPtn[H, F, Index]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/TypFamilyPtn.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): TypFamilyPtn[H, F, Index]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/TypFamilyPtn.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): TypFamilyPtn[H, F, Index]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/TypFamilyPtn.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (TypFamilyPtn[H, F, Index], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/induction\/TypFamilyPtn.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (TypFamilyPtn[H, F, Index], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/induction\/TypFamilyPtn.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "mapped", "tail" : "(): TypFamilyMap[H, F, C, Index, IF, IDF, IDFT] forSome {type IF <: Term with Subs[IF], type IDF <: Term with Subs[IDF], type IDFT <: Term with Subs[IDFT]}", "member" : "provingground.induction.TypFamilyPtn.mapped", "link" : "provingground\/induction\/TypFamilyPtn.html#mapped[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C]]:provingground.induction.TypFamilyMap[H,F,C,Index,IF,IDF,IDFT]forSome{typeIF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IF];typeIDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDF];typeIDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT]}", "kind" : "def"}, {"label" : "getMapper", "tail" : "(cod: Typ[C])(mpr: TypFamilyMapper[H, F, C, Index, IF, IDF, IDFT]): TypFamilyMapper[H, F, C, Index, IF, IDF, IDFT]", "member" : "provingground.induction.TypFamilyPtn.getMapper", "link" : "provingground\/induction\/TypFamilyPtn.html#getMapper[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],IF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IF],IDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDF],IDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT]](cod:provingground.HoTT.Typ[C])(implicitmpr:provingground.induction.TypFamilyMapper[H,F,C,Index,IF,IDF,IDFT]):provingground.induction.TypFamilyMapper[H,F,C,Index,IF,IDF,IDFT]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/TypFamilyPtn.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/TypFamilyPtn.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/TypFamilyPtn.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/TypFamilyPtn.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/TypFamilyPtn.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/TypFamilyPtn.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/TypFamilyPtn.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TypFamilyPtn.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TypFamilyPtn.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TypFamilyPtn.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/TypFamilyPtn.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/TypFamilyPtn.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/TypFamilyPtn.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/TypFamilyPtn.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/TypFamilyPtn.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/TypFamilyPtn.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/TypFamilyPtn.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/TypFamilyPtn.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/TypFamilyPtn.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "finalCod", "tail" : "(depCod: IDFT): Typ[_]", "member" : "provingground.induction.TypFamilyPtn.finalCod", "link" : "provingground\/induction\/TypFamilyPtn.html#finalCod[IDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT]](depCod:IDFT):provingground.HoTT.Typ[_]", "kind" : "abstract def"}, {"label" : "mapper", "tail" : "(): TypFamilyMapper[H, F, C, Index, IF, IDF, IDFT] forSome {type IF <: Term with Subs[IF], type IDF <: Term with Subs[IDF], type IDFT <: Term with Subs[IDFT]}", "member" : "provingground.induction.TypFamilyPtn.mapper", "link" : "provingground\/induction\/TypFamilyPtn.html#mapper[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C]]:provingground.induction.TypFamilyMapper[H,F,C,Index,IF,IDF,IDFT]forSome{typeIF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IF];typeIDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDF];typeIDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT]}", "kind" : "abstract def"}, {"label" : "subs", "tail" : "(x: Term, y: Term): TypFamilyPtn[H, F, Index]", "member" : "provingground.induction.TypFamilyPtn.subs", "link" : "provingground\/induction\/TypFamilyPtn.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.induction.TypFamilyPtn[H,F,Index]", "kind" : "abstract def"}, {"label" : "typ", "tail" : "(w: F, index: Index): Typ[H]", "member" : "provingground.induction.TypFamilyPtn.typ", "link" : "provingground\/induction\/TypFamilyPtn.html#typ(w:F,index:Index):provingground.HoTT.Typ[H]", "kind" : "abstract def"}, {"label" : "getIndex", "tail" : "(w: F, typ: Typ[H]): Option[Index]", "member" : "provingground.induction.TypFamilyPtn.getIndex", "link" : "provingground\/induction\/TypFamilyPtn.html#getIndex(w:F,typ:provingground.HoTT.Typ[H]):Option[Index]", "kind" : "abstract def"}], "members_object" : [{"label" : "getExst", "tail" : "(w: F): Exst", "member" : "provingground.induction.TypFamilyPtn.getExst", "link" : "provingground\/induction\/TypFamilyPtn$.html#getExst[F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F]](w:F):provingground.induction.TypFamilyPtn.Exst", "kind" : "def"}, {"label" : "Exst", "tail" : "", "member" : "provingground.induction.TypFamilyPtn.Exst", "link" : "provingground\/induction\/TypFamilyPtn$.html#Exst", "kind" : "object"}, {"label" : "Exst", "tail" : "", "member" : "provingground.induction.TypFamilyPtn.Exst", "link" : "provingground\/induction\/TypFamilyPtn$.html#ExstextendsAnyRef", "kind" : "sealed trait"}, {"label" : "DepFuncTypFamily", "tail" : "", "member" : "provingground.induction.TypFamilyPtn.DepFuncTypFamily", "link" : "provingground\/induction\/TypFamilyPtn$.html#DepFuncTypFamily[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],TF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TF],TI<:shapeless.HList]extendsTypFamilyPtn[H,provingground.HoTT.FuncLike[U,TF],U::TI]withProductwithSerializable", "kind" : "case class"}, {"label" : "FuncTypFamily", "tail" : "", "member" : "provingground.induction.TypFamilyPtn.FuncTypFamily", "link" : "provingground\/induction\/TypFamilyPtn$.html#FuncTypFamily[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],TF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TF],TI<:shapeless.HList]extendsTypFamilyPtn[H,provingground.HoTT.Func[U,TF],U::TI]withProductwithSerializable", "kind" : "case class"}, {"label" : "IdTypFamily", "tail" : "", "member" : "provingground.induction.TypFamilyPtn.IdTypFamily", "link" : "provingground\/induction\/TypFamilyPtn$.html#IdTypFamily[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H]]extendsTypFamilyPtn[H,provingground.HoTT.Typ[H],shapeless.HNil]withProductwithSerializable", "kind" : "case class"}, {"label" : "apply", "tail" : "(w: F)(arg0: Subst[Index], g: TypFamilyPtnGetter[F, H, Index]): TypFamilyPtn[H, F, Index]", "member" : "provingground.induction.TypFamilyPtn.apply", "link" : "provingground\/induction\/TypFamilyPtn$.html#apply[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],Index<:shapeless.HList](w:F)(implicitevidence$5:provingground.induction.Subst[Index],implicitg:provingground.induction.TypFamilyPtnGetter[F,H,Index]):provingground.induction.TypFamilyPtn[H,F,Index]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/TypFamilyPtn$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/TypFamilyPtn$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/TypFamilyPtn$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/TypFamilyPtn$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/TypFamilyPtn$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/TypFamilyPtn$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/TypFamilyPtn$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TypFamilyPtn$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TypFamilyPtn$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TypFamilyPtn$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/TypFamilyPtn$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/TypFamilyPtn$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/TypFamilyPtn$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/TypFamilyPtn$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/TypFamilyPtn$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/TypFamilyPtn$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/TypFamilyPtn$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/TypFamilyPtn$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/TypFamilyPtn$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/induction\/TypFamilyPtn.html", "kind" : "class"}, {"name" : "provingground.induction.TypFamilyPtnGetter", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/induction\/TypFamilyPtnGetter.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/induction\/TypFamilyPtnGetter.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TypFamilyPtnGetter[F, H, Index]) ⇒ Boolean, msg: ⇒ Any): TypFamilyPtnGetter[F, H, Index]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/TypFamilyPtnGetter.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TypFamilyPtnGetter[F, H, Index]) ⇒ Boolean): TypFamilyPtnGetter[F, H, Index]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/TypFamilyPtnGetter.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): TypFamilyPtnGetter[F, H, Index]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/TypFamilyPtnGetter.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): TypFamilyPtnGetter[F, H, Index]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/TypFamilyPtnGetter.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (TypFamilyPtnGetter[F, H, Index], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/induction\/TypFamilyPtnGetter.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (TypFamilyPtnGetter[F, H, Index], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/induction\/TypFamilyPtnGetter.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/TypFamilyPtnGetter.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/TypFamilyPtnGetter.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/TypFamilyPtnGetter.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/TypFamilyPtnGetter.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/TypFamilyPtnGetter.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/TypFamilyPtnGetter.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/TypFamilyPtnGetter.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TypFamilyPtnGetter.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TypFamilyPtnGetter.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TypFamilyPtnGetter.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/TypFamilyPtnGetter.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/TypFamilyPtnGetter.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/TypFamilyPtnGetter.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/TypFamilyPtnGetter.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/TypFamilyPtnGetter.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/TypFamilyPtnGetter.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/TypFamilyPtnGetter.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/TypFamilyPtnGetter.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/TypFamilyPtnGetter.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "subst", "tail" : ": Subst[Index]", "member" : "provingground.induction.TypFamilyPtnGetter.subst", "link" : "provingground\/induction\/TypFamilyPtnGetter.html#subst:provingground.induction.Subst[Index]", "kind" : "implicit abstract val"}, {"label" : "get", "tail" : "(w: F): TypFamilyPtn[H, F, Index]", "member" : "provingground.induction.TypFamilyPtnGetter.get", "link" : "provingground\/induction\/TypFamilyPtnGetter.html#get(w:F):provingground.induction.TypFamilyPtn[H,F,Index]", "kind" : "abstract def"}], "shortDescription" : "", "object" : "provingground\/induction\/TypFamilyPtnGetter$.html", "members_object" : [{"label" : "depFuncTypFamilyGetter", "tail" : "(tail: TypFamilyPtnGetter[TF, H, TI]): TypFamilyPtnGetter[FuncLike[U, TF], H, ::[U, TI]]", "member" : "provingground.induction.TypFamilyPtnGetter.depFuncTypFamilyGetter", "link" : "provingground\/induction\/TypFamilyPtnGetter$.html#depFuncTypFamilyGetter[TF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TF],U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],TI<:shapeless.HList](implicittail:provingground.induction.TypFamilyPtnGetter[TF,H,TI]):provingground.induction.TypFamilyPtnGetter[provingground.HoTT.FuncLike[U,TF],H,U::TI]", "kind" : "implicit def"}, {"label" : "funcTypFamilyGetter", "tail" : "(tail: TypFamilyPtnGetter[TF, H, TI]): TypFamilyPtnGetter[Func[U, TF], H, ::[U, TI]]", "member" : "provingground.induction.TypFamilyPtnGetter.funcTypFamilyGetter", "link" : "provingground\/induction\/TypFamilyPtnGetter$.html#funcTypFamilyGetter[TF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TF],U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],TI<:shapeless.HList](implicittail:provingground.induction.TypFamilyPtnGetter[TF,H,TI]):provingground.induction.TypFamilyPtnGetter[provingground.HoTT.Func[U,TF],H,U::TI]", "kind" : "implicit def"}, {"label" : "idGetter", "tail" : "(): TypFamilyPtnGetter[Typ[H], H, HNil]", "member" : "provingground.induction.TypFamilyPtnGetter.idGetter", "link" : "provingground\/induction\/TypFamilyPtnGetter$.html#idGetter[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H]]:provingground.induction.TypFamilyPtnGetter[provingground.HoTT.Typ[H],H,shapeless.HNil]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/TypFamilyPtnGetter$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/TypFamilyPtnGetter$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/TypFamilyPtnGetter$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/TypFamilyPtnGetter$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/TypFamilyPtnGetter$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/TypFamilyPtnGetter$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/TypFamilyPtnGetter$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TypFamilyPtnGetter$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TypFamilyPtnGetter$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TypFamilyPtnGetter$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/TypFamilyPtnGetter$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/TypFamilyPtnGetter$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/TypFamilyPtnGetter$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/TypFamilyPtnGetter$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/TypFamilyPtnGetter$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/TypFamilyPtnGetter$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/TypFamilyPtnGetter$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/TypFamilyPtnGetter$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/TypFamilyPtnGetter$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/induction\/TypFamilyPtnGetter.html", "kind" : "trait"}, {"name" : "provingground.induction.TypObj", "shortDescription" : "aid for implicit calculations:given a scala type that is a subtype of Typ[C], recovers C,eg shows that FuncTyp[A, B] is a subtype of Typ[Func[A, B]]", "object" : "provingground\/induction\/TypObj$.html", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/induction\/TypObj.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/induction\/TypObj.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TypObj[T, C]) ⇒ Boolean, msg: ⇒ Any): TypObj[T, C]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/TypObj.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TypObj[T, C]) ⇒ Boolean): TypObj[T, C]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/TypObj.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): TypObj[T, C]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/TypObj.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): TypObj[T, C]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/TypObj.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (TypObj[T, C], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/induction\/TypObj.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (TypObj[T, C], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/induction\/TypObj.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "me", "tail" : "(t: T): Typ[C]", "member" : "provingground.induction.TypObj.me", "link" : "provingground\/induction\/TypObj.html#me(t:T):provingground.HoTT.Typ[C]", "kind" : "def"}, {"member" : "provingground.induction.TypObj#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/TypObj.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/TypObj.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/TypObj.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/TypObj.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/TypObj.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/TypObj.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/TypObj.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TypObj.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TypObj.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TypObj.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/TypObj.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/TypObj.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/TypObj.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/TypObj.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/TypObj.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/TypObj.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/TypObj.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/TypObj.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/TypObj.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "solve", "tail" : "(fmly: TC)(tpObj: TypObj[TC, C]): Typ[C]", "member" : "provingground.induction.TypObj.solve", "link" : "provingground\/induction\/TypObj$.html#solve[TC<:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[TC],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C]](fmly:TC)(implicittpObj:provingground.induction.TypObj[TC,C]):provingground.HoTT.Typ[C]", "kind" : "def"}, {"label" : "pair", "tail" : "(): TypObj[ProdTyp[U, V], PairTerm[U, V]]", "member" : "provingground.induction.TypObj.pair", "link" : "provingground\/induction\/TypObj$.html#pair[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]]:provingground.induction.TypObj[provingground.HoTT.ProdTyp[U,V],provingground.HoTT.PairTerm[U,V]]", "kind" : "implicit def"}, {"label" : "pi", "tail" : "(): TypObj[PiDefn[U, V], FuncLike[U, V]]", "member" : "provingground.induction.TypObj.pi", "link" : "provingground\/induction\/TypObj$.html#pi[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]]:provingground.induction.TypObj[provingground.HoTT.PiDefn[U,V],provingground.HoTT.FuncLike[U,V]]", "kind" : "implicit def"}, {"label" : "funclike", "tail" : "(): TypObj[GenFuncTyp[U, V], FuncLike[U, V]]", "member" : "provingground.induction.TypObj.funclike", "link" : "provingground\/induction\/TypObj$.html#funclike[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]]:provingground.induction.TypObj[provingground.HoTT.GenFuncTyp[U,V],provingground.HoTT.FuncLike[U,V]]", "kind" : "implicit def"}, {"label" : "func", "tail" : "(): TypObj[FuncTyp[U, V], Func[U, V]]", "member" : "provingground.induction.TypObj.func", "link" : "provingground\/induction\/TypObj$.html#func[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]]:provingground.induction.TypObj[provingground.HoTT.FuncTyp[U,V],provingground.HoTT.Func[U,V]]", "kind" : "implicit def"}, {"label" : "tautology", "tail" : "(): TypObj[Typ[U], U]", "member" : "provingground.induction.TypObj.tautology", "link" : "provingground\/induction\/TypObj$.html#tautology[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]:provingground.induction.TypObj[provingground.HoTT.Typ[U],U]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/TypObj$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/TypObj$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/TypObj$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/TypObj$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/TypObj$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/TypObj$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/TypObj$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TypObj$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TypObj$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TypObj$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/TypObj$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/TypObj$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/TypObj$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/TypObj$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/TypObj$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/TypObj$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/TypObj$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/TypObj$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/TypObj$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/induction\/TypObj.html", "kind" : "class"}, {"name" : "provingground.induction.WeakImplicit", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/induction\/WeakImplicit.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/induction\/WeakImplicit.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (WeakImplicit) ⇒ Boolean, msg: ⇒ Any): WeakImplicit", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/WeakImplicit.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (WeakImplicit) ⇒ Boolean): WeakImplicit", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/WeakImplicit.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): WeakImplicit", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/WeakImplicit.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): WeakImplicit", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/WeakImplicit.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (WeakImplicit, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/induction\/WeakImplicit.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (WeakImplicit, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/induction\/WeakImplicit.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "idSubTypFamilyMapper", "tail" : "(subEv: TypObj[TC, C]): TypFamilyMapper[H, Typ[H], C, HNil, Func[H, C], FuncLike[H, C], Func[H, TC]] { val mapper: provingground.induction.TypFamilyPtn[H,provingground.HoTT.Typ[H],shapeless.HNil] => provingground.induction.TypFamilyMap.IdSubTypFamilyMap[H,TC,C] }", "member" : "provingground.induction.WeakImplicit.idSubTypFamilyMapper", "link" : "provingground\/induction\/WeakImplicit.html#idSubTypFamilyMapper[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],TC<:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[TC],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C]](implicitsubEv:provingground.induction.TypObj[TC,C]):provingground.induction.TypFamilyMapper[H,provingground.HoTT.Typ[H],C,shapeless.HNil,provingground.HoTT.Func[H,C],provingground.HoTT.FuncLike[H,C],provingground.HoTT.Func[H,TC]]{valmapper:provingground.induction.TypFamilyPtn[H,provingground.HoTT.Typ[H],shapeless.HNil]=>provingground.induction.TypFamilyMap.IdSubTypFamilyMap[H,TC,C]}", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/WeakImplicit.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/WeakImplicit.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/WeakImplicit.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/WeakImplicit.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/WeakImplicit.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/WeakImplicit.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/WeakImplicit.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/WeakImplicit.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/WeakImplicit.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/WeakImplicit.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/WeakImplicit.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/WeakImplicit.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/WeakImplicit.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/WeakImplicit.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/WeakImplicit.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/WeakImplicit.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/WeakImplicit.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/WeakImplicit.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/WeakImplicit.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "provingground\/induction\/WeakImplicit.html", "kind" : "trait"}], "provingground" : [{"name" : "provingground.Context", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/Context.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/Context.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Context) ⇒ Boolean, msg: ⇒ Any): Context", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/Context.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Context) ⇒ Boolean): Context", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/Context.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Context", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/Context.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Context", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/Context.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Context, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/Context.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Context, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/Context.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "introduce", "tail" : "(t: U, role: Role): AppendTerm[U]", "member" : "provingground.Context.introduce", "link" : "provingground\/Context.html#introduce[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](t:U,role:provingground.Context.Role):provingground.Context.AppendTerm[U]", "kind" : "def"}, {"label" : "given", "tail" : "(v: Term): AppendConstant[Term]", "member" : "provingground.Context.given", "link" : "provingground\/Context.html#given[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](v:provingground.HoTT.Term):provingground.Context.AppendConstant[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "assert", "tail" : "(tp: Typ[Term]): AppendTerm[Typ[Term]]", "member" : "provingground.Context.assert", "link" : "provingground\/Context.html#assert(tp:provingground.HoTT.Typ[provingground.HoTT.Term]):provingground.Context.AppendTerm[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "assume", "tail" : "(tp: Typ[Term], text: String): AppendConstant[Term with Subs[Term]]", "member" : "provingground.Context.assume", "link" : "provingground\/Context.html#assume(tp:provingground.HoTT.Typ[provingground.HoTT.Term],text:String):provingground.Context.AppendConstant[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "addVariable", "tail" : "(variable: U): AppendConstant[U]", "member" : "provingground.Context.addVariable", "link" : "provingground\/Context.html#addVariable[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](variable:U):provingground.Context.AppendConstant[U]", "kind" : "def"}, {"label" : "addConstant", "tail" : "(const: U): AppendConstant[U]", "member" : "provingground.Context.addConstant", "link" : "provingground\/Context.html#addConstant[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](const:U):provingground.Context.AppendConstant[U]", "kind" : "def"}, {"label" : "let", "tail" : "(name: Term, value: U): AppendDefn[U]", "member" : "provingground.Context.let", "link" : "provingground\/Context.html#let[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](name:provingground.HoTT.Term,value:U):provingground.Context.AppendDefn[U]", "kind" : "def"}, {"label" : "define", "tail" : "(name: Term, value: U): AppendDefn[U]", "member" : "provingground.Context.define", "link" : "provingground\/Context.html#define[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](name:provingground.HoTT.Term,value:U):provingground.Context.AppendDefn[U]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/Context.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/Context.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/Context.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/Context.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/Context.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/Context.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/Context.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/Context.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/Context.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/Context.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/Context.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/Context.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/Context.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/Context.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/Context.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/Context.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/Context.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/Context.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/Context.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "exportTyp", "tail" : "(typ: Typ[Term]): Typ[Term]", "member" : "provingground.Context.exportTyp", "link" : "provingground\/Context.html#exportTyp(typ:provingground.HoTT.Typ[provingground.HoTT.Term]):provingground.HoTT.Typ[provingground.HoTT.Term]", "kind" : "abstract def"}, {"label" : "export", "tail" : "(t: Term): Term", "member" : "provingground.Context.export", "link" : "provingground\/Context.html#export(t:provingground.HoTT.Term):provingground.HoTT.Term", "kind" : "abstract def"}, {"label" : "definitions", "tail" : ": Vector[Defn[Term]]", "member" : "provingground.Context.definitions", "link" : "provingground\/Context.html#definitions:Vector[provingground.Context.Defn[provingground.HoTT.Term]]", "kind" : "abstract val"}, {"label" : "terms", "tail" : ": Vector[Term]", "member" : "provingground.Context.terms", "link" : "provingground\/Context.html#terms:Vector[provingground.HoTT.Term]", "kind" : "abstract val"}, {"label" : "variables", "tail" : ": Vector[Term]", "member" : "provingground.Context.variables", "link" : "provingground\/Context.html#variables:Vector[provingground.HoTT.Term]", "kind" : "abstract val"}, {"label" : "constants", "tail" : ": Vector[Term]", "member" : "provingground.Context.constants", "link" : "provingground\/Context.html#constants:Vector[provingground.HoTT.Term]", "kind" : "abstract val"}], "shortDescription" : "", "object" : "provingground\/Context$.html", "members_object" : [{"label" : "AppendVariable", "tail" : "", "member" : "provingground.Context.AppendVariable", "link" : "provingground\/Context$.html#AppendVariable[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsContextwithProductwithSerializable", "kind" : "case class"}, {"label" : "AppendTerm", "tail" : "", "member" : "provingground.Context.AppendTerm", "link" : "provingground\/Context$.html#AppendTerm[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsContextwithProductwithSerializable", "kind" : "case class"}, {"label" : "Consider", "tail" : "", "member" : "provingground.Context.Consider", "link" : "provingground\/Context$.html#Consider", "kind" : "object"}, {"label" : "Assert", "tail" : "", "member" : "provingground.Context.Assert", "link" : "provingground\/Context$.html#Assert", "kind" : "object"}, {"label" : "Role", "tail" : "", "member" : "provingground.Context.Role", "link" : "provingground\/Context$.html#RoleextendsAnyRef", "kind" : "sealed trait"}, {"label" : "AppendConstant", "tail" : "", "member" : "provingground.Context.AppendConstant", "link" : "provingground\/Context$.html#AppendConstant[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsContextwithProductwithSerializable", "kind" : "case class"}, {"label" : "AppendDefn", "tail" : "", "member" : "provingground.Context.AppendDefn", "link" : "provingground\/Context$.html#AppendDefn[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsContextwithProductwithSerializable", "kind" : "case class"}, {"label" : "Defn", "tail" : "", "member" : "provingground.Context.Defn", "link" : "provingground\/Context$.html#Defn[+U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsProductwithSerializable", "kind" : "case class"}, {"label" : "Empty", "tail" : "", "member" : "provingground.Context.Empty", "link" : "provingground\/Context$.html#Empty", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/Context$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/Context$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/Context$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/Context$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/Context$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/Context$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/Context$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/Context$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/Context$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/Context$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/Context$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/Context$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/Context$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/Context$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/Context$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/Context$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/Context$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/Context$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/Context$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/Context.html", "kind" : "object"}, {"name" : "provingground.FiniteDistribution", "shortDescription" : "", "object" : "provingground\/FiniteDistribution$.html", "members_object" : [{"label" : "invFlatMap", "tail" : "(f: (S) ⇒ FiniteDistribution[T], support: Traversable[S]): FiniteDistribution[T]", "member" : "provingground.FiniteDistribution.invFlatMap", "link" : "provingground\/FiniteDistribution$.html#invFlatMap[S,T](f:S=>provingground.FiniteDistribution[T],support:Traversable[S]):provingground.FiniteDistribution[T]", "kind" : "def"}, {"label" : "linearCombination", "tail" : "(terms: Seq[(Double, FiniteDistribution[T])]): FiniteDistribution[T]", "member" : "provingground.FiniteDistribution.linearCombination", "link" : "provingground\/FiniteDistribution$.html#linearCombination[T](terms:Seq[(Double,provingground.FiniteDistribution[T])]):provingground.FiniteDistribution[T]", "kind" : "def"}, {"label" : "empty", "tail" : "(): FiniteDistribution[T]", "member" : "provingground.FiniteDistribution.empty", "link" : "provingground\/FiniteDistribution$.html#empty[T]:provingground.FiniteDistribution[T]", "kind" : "def"}, {"label" : "unif", "tail" : "(as: A*): FiniteDistribution[A]", "member" : "provingground.FiniteDistribution.unif", "link" : "provingground\/FiniteDistribution$.html#unif[A](as:A*):provingground.FiniteDistribution[A]", "kind" : "def"}, {"label" : "rawUnif", "tail" : "(s: Traversable[A]): FiniteDistribution[A]", "member" : "provingground.FiniteDistribution.rawUnif", "link" : "provingground\/FiniteDistribution$.html#rawUnif[A](s:Traversable[A]):provingground.FiniteDistribution[A]", "kind" : "def"}, {"label" : "uniform", "tail" : "(s: Traversable[A]): FiniteDistribution[A]", "member" : "provingground.FiniteDistribution.uniform", "link" : "provingground\/FiniteDistribution$.html#uniform[A](s:Traversable[A]):provingground.FiniteDistribution[A]", "kind" : "def"}, {"label" : "collect", "tail" : "(fd: FiniteDistribution[Option[T]]): FiniteDistribution[T]", "member" : "provingground.FiniteDistribution.collect", "link" : "provingground\/FiniteDistribution$.html#collect[T](fd:provingground.FiniteDistribution[Option[T]]):provingground.FiniteDistribution[T]", "kind" : "def"}, {"label" : "entropy", "tail" : "(fd: FiniteDistribution[T]): Double", "member" : "provingground.FiniteDistribution.entropy", "link" : "provingground\/FiniteDistribution$.html#entropy[T](fd:provingground.FiniteDistribution[T]):Double", "kind" : "def"}, {"label" : "apply", "tail" : "(pmf: Traversable[Weighted[T]]): FiniteDistribution[T]", "member" : "provingground.FiniteDistribution.apply", "link" : "provingground\/FiniteDistribution$.html#apply[T](pmf:Traversable[provingground.Weighted[T]]):provingground.FiniteDistribution[T]", "kind" : "def"}, {"label" : "random", "tail" : ": Random", "member" : "provingground.FiniteDistribution.random", "link" : "provingground\/FiniteDistribution$.html#random:scala.util.Random", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/FiniteDistribution$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/FiniteDistribution$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/FiniteDistribution$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/FiniteDistribution$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/FiniteDistribution$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/FiniteDistribution$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/FiniteDistribution$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/FiniteDistribution$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/FiniteDistribution$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/FiniteDistribution$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/FiniteDistribution$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/FiniteDistribution$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/FiniteDistribution$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/FiniteDistribution$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/FiniteDistribution$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/FiniteDistribution$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/FiniteDistribution$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/FiniteDistribution$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/FiniteDistribution$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/FiniteDistribution.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (FiniteDistribution[T]) ⇒ Boolean, msg: ⇒ Any): FiniteDistribution[T]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/FiniteDistribution.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (FiniteDistribution[T]) ⇒ Boolean): FiniteDistribution[T]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/FiniteDistribution.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): FiniteDistribution[T]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/FiniteDistribution.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): FiniteDistribution[T]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/FiniteDistribution.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (FiniteDistribution[T], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/FiniteDistribution.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (FiniteDistribution[T], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/FiniteDistribution.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "KLfeedback", "tail" : "(baseweights: (T) ⇒ Double, strictness: Double): FiniteDistribution[T]", "member" : "provingground.FiniteDistribution.KLfeedback", "link" : "provingground\/FiniteDistribution.html#KLfeedback(baseweights:T=>Double,strictness:Double):provingground.FiniteDistribution[T]", "kind" : "def"}, {"label" : "smoothedFeedback", "tail" : "(baseweights: (T) ⇒ Double, damp: Double, strictness: Double): FiniteDistribution[T]", "member" : "provingground.FiniteDistribution.smoothedFeedback", "link" : "provingground\/FiniteDistribution.html#smoothedFeedback(baseweights:T=>Double,damp:Double,strictness:Double):provingground.FiniteDistribution[T]", "kind" : "def"}, {"label" : "rawfeedback", "tail" : "(baseweights: (T) ⇒ Double, damp: Double, strictness: Double): FiniteDistribution[T]", "member" : "provingground.FiniteDistribution.rawfeedback", "link" : "provingground\/FiniteDistribution.html#rawfeedback(baseweights:T=>Double,damp:Double,strictness:Double):provingground.FiniteDistribution[T]", "kind" : "def"}, {"label" : "integral", "tail" : "(f: (T) ⇒ Double): Double", "member" : "provingground.FiniteDistribution.integral", "link" : "provingground\/FiniteDistribution.html#integral(f:T=>Double):Double", "kind" : "def"}, {"label" : "expectation", "tail" : "(ls: VectorSpace[T, Double]): T", "member" : "provingground.FiniteDistribution.expectation", "link" : "provingground\/FiniteDistribution.html#expectation(implicitls:spire.algebra.VectorSpace[T,Double]):T", "kind" : "def"}, {"label" : "split", "tail" : "(groups: Int): Map[Int, FiniteDistribution[T]]", "member" : "provingground.FiniteDistribution.split", "link" : "provingground\/FiniteDistribution.html#split(groups:Int):scala.collection.immutable.Map[Int,provingground.FiniteDistribution[T]]", "kind" : "def"}, {"label" : "entropyVec", "tail" : "(): Vector[Weighted[T]]", "member" : "provingground.FiniteDistribution.entropyVec", "link" : "provingground\/FiniteDistribution.html#entropyVec:scala.collection.immutable.Vector[provingground.Weighted[T]]", "kind" : "def"}, {"label" : "entropyView", "tail" : "(): Vector[Weighted[String]]", "member" : "provingground.FiniteDistribution.entropyView", "link" : "provingground\/FiniteDistribution.html#entropyView:scala.collection.immutable.Vector[provingground.Weighted[String]]", "kind" : "def"}, {"label" : "entropy", "tail" : "(elem: T): Double", "member" : "provingground.FiniteDistribution.entropy", "link" : "provingground\/FiniteDistribution.html#entropy(elem:T):Double", "kind" : "def"}, {"label" : "condMap", "tail" : "(f: (T) ⇒ Option[S]): ProbabilityDistribution[S]", "member" : "provingground.FiniteDistribution.condMap", "link" : "provingground\/FiniteDistribution.html#condMap[S](f:T=>Option[S]):provingground.ProbabilityDistribution[S]", "kind" : "def"}, {"label" : "conditioned", "tail" : "(p: (T) ⇒ Boolean): FiniteDistribution[T]", "member" : "provingground.FiniteDistribution.conditioned", "link" : "provingground\/FiniteDistribution.html#conditioned(p:T=>Boolean):provingground.FiniteDistribution[T]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "provingground.FiniteDistribution.toString", "link" : "provingground\/FiniteDistribution.html#toString():String", "kind" : "def"}, {"label" : "next", "tail" : "(): T", "member" : "provingground.FiniteDistribution.next", "link" : "provingground\/FiniteDistribution.html#next:T", "kind" : "def"}, {"label" : "total", "tail" : "(): Double", "member" : "provingground.FiniteDistribution.total", "link" : "provingground\/FiniteDistribution.html#total:Double", "kind" : "def"}, {"label" : "memo", "tail" : "(): Map[T, Double]", "member" : "provingground.FiniteDistribution.memo", "link" : "provingground\/FiniteDistribution.html#memo:Map[T,Double]", "kind" : "def"}, {"label" : "dot", "tail" : "(that: FiniteDistribution[T]): Double", "member" : "provingground.FiniteDistribution.dot", "link" : "provingground\/FiniteDistribution.html#dot(that:provingground.FiniteDistribution[T]):Double", "kind" : "def"}, {"label" : "innerProduct", "tail" : "(that: FiniteDistribution[T]): Double", "member" : "provingground.FiniteDistribution.innerProduct", "link" : "provingground\/FiniteDistribution.html#innerProduct(that:provingground.FiniteDistribution[T]):Double", "kind" : "def"}, {"label" : "pickle", "tail" : "(): List[(String, Double)]", "member" : "provingground.FiniteDistribution.pickle", "link" : "provingground\/FiniteDistribution.html#pickle:List[(String,Double)]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (T) ⇒ FiniteDistribution[S]): FiniteDistribution[S]", "member" : "provingground.FiniteDistribution.flatMap", "link" : "provingground\/FiniteDistribution.html#flatMap[S](f:T=>provingground.FiniteDistribution[S]):provingground.FiniteDistribution[S]", "kind" : "def"}, {"label" : "invmapOpt", "tail" : "(f: (S) ⇒ Option[T], support: Traversable[S]): FiniteDistribution[S]", "member" : "provingground.FiniteDistribution.invmapOpt", "link" : "provingground\/FiniteDistribution.html#invmapOpt[S](f:S=>Option[T],support:Traversable[S]):provingground.FiniteDistribution[S]", "kind" : "def"}, {"label" : "invmap", "tail" : "(f: (S) ⇒ T, support: Traversable[S]): FiniteDistribution[S]", "member" : "provingground.FiniteDistribution.invmap", "link" : "provingground\/FiniteDistribution.html#invmap[S](f:S=>T,support:Traversable[S]):provingground.FiniteDistribution[S]", "kind" : "def"}, {"label" : "mapOpt", "tail" : "(f: (T) ⇒ Option[S]): FiniteDistribution[S]", "member" : "provingground.FiniteDistribution.mapOpt", "link" : "provingground\/FiniteDistribution.html#mapOpt[S](f:T=>Option[S]):provingground.FiniteDistribution[S]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (T) ⇒ S): FiniteDistribution[S]", "member" : "provingground.FiniteDistribution.map", "link" : "provingground\/FiniteDistribution.html#map[S](f:T=>S):provingground.FiniteDistribution[S]", "kind" : "def"}, {"label" : "+", "tail" : "(elem: T, prob: Double): FiniteDistribution[T]", "member" : "provingground.FiniteDistribution.+", "link" : "provingground\/FiniteDistribution.html#+(elem:T,prob:Double):provingground.FiniteDistribution[T]", "kind" : "def"}, {"label" : "--", "tail" : "(that: FiniteDistribution[T]): FiniteDistribution[T]", "member" : "provingground.FiniteDistribution.--", "link" : "provingground\/FiniteDistribution.html#--(that:provingground.FiniteDistribution[T]):provingground.FiniteDistribution[T]", "kind" : "def"}, {"label" : "++", "tail" : "(that: FiniteDistribution[T]): FiniteDistribution[T]", "member" : "provingground.FiniteDistribution.++", "link" : "provingground\/FiniteDistribution.html#++(that:provingground.FiniteDistribution[T]):provingground.FiniteDistribution[T]", "kind" : "def"}, {"label" : "*", "tail" : "(sc: Double): FiniteDistribution[T]", "member" : "provingground.FiniteDistribution.*", "link" : "provingground\/FiniteDistribution.html#*(sc:Double):provingground.FiniteDistribution[T]", "kind" : "def"}, {"label" : "purge", "tail" : "(epsilon: Double): FiniteDistribution[T]", "member" : "provingground.FiniteDistribution.purge", "link" : "provingground\/FiniteDistribution.html#purge(epsilon:Double):provingground.FiniteDistribution[T]", "kind" : "def"}, {"label" : "filter", "tail" : "(p: (T) ⇒ Boolean): FiniteDistribution[T]", "member" : "provingground.FiniteDistribution.filter", "link" : "provingground\/FiniteDistribution.html#filter(p:T=>Boolean):provingground.FiniteDistribution[T]", "kind" : "def"}, {"label" : "pruneMap", "tail" : "(f: ⇒ (T) ⇒ S, epsilon: Double): FiniteDistribution[S]", "member" : "provingground.FiniteDistribution.pruneMap", "link" : "provingground\/FiniteDistribution.html#pruneMap[S](f:=>T=>S,epsilon:Double):provingground.FiniteDistribution[S]", "kind" : "def"}, {"label" : "prunedPMF", "tail" : "(epsilon: Double): Vector[Weighted[T]]", "member" : "provingground.FiniteDistribution.prunedPMF", "link" : "provingground\/FiniteDistribution.html#prunedPMF(epsilon:Double):scala.collection.immutable.Vector[provingground.Weighted[T]]", "kind" : "def"}, {"label" : "normalized", "tail" : "(t: Double): FiniteDistribution[T]", "member" : "provingground.FiniteDistribution.normalized", "link" : "provingground\/FiniteDistribution.html#normalized(t:Double):provingground.FiniteDistribution[T]", "kind" : "def"}, {"label" : "getsum", "tail" : "(label: T): Double", "member" : "provingground.FiniteDistribution.getsum", "link" : "provingground\/FiniteDistribution.html#getsum(label:T):Double", "kind" : "def"}, {"label" : "support", "tail" : "(): Set[T]", "member" : "provingground.FiniteDistribution.support", "link" : "provingground\/FiniteDistribution.html#support:scala.collection.immutable.Set[T]", "kind" : "def"}, {"label" : "supp", "tail" : "(): Vector[T]", "member" : "provingground.FiniteDistribution.supp", "link" : "provingground\/FiniteDistribution.html#supp:Vector[T]", "kind" : "def"}, {"label" : "sort", "tail" : "(): FiniteDistribution[T]", "member" : "provingground.FiniteDistribution.sort", "link" : "provingground\/FiniteDistribution.html#sort:provingground.FiniteDistribution[T]", "kind" : "def"}, {"label" : "flatten", "tail" : "(): FiniteDistribution[T]", "member" : "provingground.FiniteDistribution.flatten", "link" : "provingground\/FiniteDistribution.html#flatten:provingground.FiniteDistribution[T]", "kind" : "def"}, {"label" : "norm", "tail" : "(): Double", "member" : "provingground.FiniteDistribution.norm", "link" : "provingground\/FiniteDistribution.html#norm:Double", "kind" : "def"}, {"label" : "apply", "tail" : "(label: T): Double", "member" : "provingground.FiniteDistribution.apply", "link" : "provingground\/FiniteDistribution.html#apply(label:T):Double", "kind" : "def"}, {"label" : "postotal", "tail" : "(t: Double): Double", "member" : "provingground.FiniteDistribution.postotal", "link" : "provingground\/FiniteDistribution.html#postotal(t:Double):Double", "kind" : "def"}, {"label" : "posmf", "tail" : "(t: Double): Vector[Weighted[T]]", "member" : "provingground.FiniteDistribution.posmf", "link" : "provingground\/FiniteDistribution.html#posmf(t:Double):scala.collection.immutable.Vector[provingground.Weighted[T]]", "kind" : "def"}, {"member" : "provingground.FiniteDistribution#<init>", "error" : "unsupported entity"}, {"label" : "pmf", "tail" : ": Vector[Weighted[T]]", "member" : "provingground.FiniteDistribution.pmf", "link" : "provingground\/FiniteDistribution.html#pmf:Vector[provingground.Weighted[T]]", "kind" : "val"}, {"label" : "<+?>", "tail" : "(mixin: ⇒ ProbabilityDistribution[Option[T]], weight: Double): MixinOpt[T]", "member" : "provingground.ProbabilityDistribution.<+?>", "link" : "provingground\/FiniteDistribution.html#<+?>(mixin:=>provingground.ProbabilityDistribution[Option[A]],weight:Double):provingground.ProbabilityDistribution.MixinOpt[A]", "kind" : "def"}, {"label" : "<+>", "tail" : "(mixin: ⇒ ProbabilityDistribution[T], weight: Double): Mixin[T]", "member" : "provingground.ProbabilityDistribution.<+>", "link" : "provingground\/FiniteDistribution.html#<+>(mixin:=>provingground.ProbabilityDistribution[A],weight:Double):provingground.ProbabilityDistribution.Mixin[A]", "kind" : "def"}, {"label" : "<++>", "tail" : "(components: ⇒ Vector[Weighted[ProbabilityDistribution[T]]]): Mixture[T]", "member" : "provingground.ProbabilityDistribution.<++>", "link" : "provingground\/FiniteDistribution.html#<++>(components:=>Vector[provingground.Weighted[provingground.ProbabilityDistribution[A]]]):provingground.ProbabilityDistribution.Mixture[A]", "kind" : "def"}, {"label" : "findFut", "tail" : "(p: (T) ⇒ Boolean, maxloops: Long): Future[Option[T]]", "member" : "provingground.ProbabilityDistribution.findFut", "link" : "provingground\/FiniteDistribution.html#findFut(p:A=>Boolean,maxloops:Long):scala.concurrent.Future[Option[A]]", "kind" : "def"}, {"label" : "randomVariable", "tail" : "(): Iterator[T]", "member" : "provingground.ProbabilityDistribution.randomVariable", "link" : "provingground\/FiniteDistribution.html#randomVariable:Iterator[A]", "kind" : "def"}, {"label" : "fibProduct", "tail" : "(quot: (T) ⇒ Q, fibers: (Q) ⇒ ProbabilityDistribution[B]): FiberProduct[T, Q, B]", "member" : "provingground.ProbabilityDistribution.fibProduct", "link" : "provingground\/FiniteDistribution.html#fibProduct[Q,B](quot:A=>Q,fibers:Q=>provingground.ProbabilityDistribution[B]):provingground.ProbabilityDistribution.FiberProduct[A,Q,B]", "kind" : "def"}, {"label" : "product", "tail" : "(that: ProbabilityDistribution[B]): Product[T, B]", "member" : "provingground.ProbabilityDistribution.product", "link" : "provingground\/FiniteDistribution.html#product[B](that:provingground.ProbabilityDistribution[B]):provingground.ProbabilityDistribution.Product[A,B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (T) ⇒ ProbabilityDistribution[B]): ProbabilityDistribution[B]", "member" : "provingground.ProbabilityDistribution.flatMap", "link" : "provingground\/FiniteDistribution.html#flatMap[B](f:A=>provingground.ProbabilityDistribution[B]):provingground.ProbabilityDistribution[B]", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "provingground\/FiniteDistribution.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "provingground\/FiniteDistribution.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/FiniteDistribution.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/FiniteDistribution.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "provingground\/FiniteDistribution.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "provingground\/FiniteDistribution.html#==(x$1:Any):Boolean", "kind" : "final def"}], "case class" : "provingground\/FiniteDistribution.html", "kind" : "object"}, {"name" : "provingground.HoTT", "shortDescription" : "Core of Homotopy Type Theory (HoTT) implementation.", "object" : "provingground\/HoTT$.html", "members_object" : [{"label" : "Deprec", "tail" : "", "member" : "provingground.HoTT.Deprec", "link" : "provingground\/HoTT$.html#Deprec", "kind" : "object"}, {"label" : "CnstFuncLike", "tail" : "", "member" : "provingground.HoTT.CnstFuncLike", "link" : "provingground\/HoTT$.html#CnstFuncLike[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]]extendsHoTT.CnstwithHoTT.FuncLike[U,V]", "kind" : "class"}, {"label" : "CnstFunc", "tail" : "", "member" : "provingground.HoTT.CnstFunc", "link" : "provingground\/HoTT$.html#CnstFunc[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]]extendsHoTT.CnstwithHoTT.Func[U,V]", "kind" : "class"}, {"label" : "Cnst", "tail" : "", "member" : "provingground.HoTT.Cnst", "link" : "provingground\/HoTT$.html#CnstextendsHoTT.Term", "kind" : "class"}, {"label" : "getTypVariables", "tail" : "(n: Int)(t: Term): List[Typ[Term]]", "member" : "provingground.HoTT.getTypVariables", "link" : "provingground\/HoTT$.html#getTypVariables(n:Int)(t:provingground.HoTT.Term):List[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "getVariables", "tail" : "(n: Int)(t: Term): List[Term]", "member" : "provingground.HoTT.getVariables", "link" : "provingground\/HoTT$.html#getVariables(n:Int)(t:provingground.HoTT.Term):List[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "getArg", "tail" : "(func: FuncLike[D, U]): (Term) ⇒ Option[D]", "member" : "provingground.HoTT.getArg", "link" : "provingground\/HoTT$.html#getArg[D<:provingground.HoTT.Termwithprovingground.HoTT.Subs[D],U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](func:provingground.HoTT.FuncLike[D,U]):provingground.HoTT.Term=>Option[D]", "kind" : "def"}, {"label" : "asLambdas", "tail" : "(term: U): Option[U]", "member" : "provingground.HoTT.asLambdas", "link" : "provingground\/HoTT$.html#asLambdas[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](term:U):Option[U]", "kind" : "def"}, {"label" : "funcToLambda", "tail" : "(fn: FuncLike[U, V]): LambdaLike[U, V]", "member" : "provingground.HoTT.funcToLambda", "link" : "provingground\/HoTT$.html#funcToLambda[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](fn:provingground.HoTT.FuncLike[U,V]):provingground.HoTT.LambdaLike[U,V]", "kind" : "def"}, {"label" : "isUniv", "tail" : "(x: Term): Boolean", "member" : "provingground.HoTT.isUniv", "link" : "provingground\/HoTT$.html#isUniv(x:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "isTypFamily", "tail" : "(): (Term) ⇒ Boolean", "member" : "provingground.HoTT.isTypFamily", "link" : "provingground\/HoTT$.html#isTypFamily:provingground.HoTT.Term=>Boolean", "kind" : "def"}, {"label" : "isTyp", "tail" : "(): (Term) ⇒ Boolean", "member" : "provingground.HoTT.isTyp", "link" : "provingground\/HoTT$.html#isTyp:provingground.HoTT.Term=>Boolean", "kind" : "def"}, {"label" : "isFunc", "tail" : "(): (Term) ⇒ Boolean", "member" : "provingground.HoTT.isFunc", "link" : "provingground\/HoTT$.html#isFunc:provingground.HoTT.Term=>Boolean", "kind" : "def"}, {"label" : "isVar", "tail" : "(t: Term): Boolean", "member" : "provingground.HoTT.isVar", "link" : "provingground\/HoTT$.html#isVar(t:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "getTypedVar", "tail" : "(typ: Typ[U]): TypedTerm[U]", "member" : "provingground.HoTT.getTypedVar", "link" : "provingground\/HoTT$.html#getTypedVar[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](typ:provingground.HoTT.Typ[U]):provingground.HoTT.TypedTerm[U]", "kind" : "def"}, {"label" : "getVar", "tail" : "(typ: Typ[U]): U with Subs[U]", "member" : "provingground.HoTT.getVar", "link" : "provingground\/HoTT$.html#getVar[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](typ:provingground.HoTT.Typ[U]):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "NameFactory", "tail" : "", "member" : "provingground.HoTT.NameFactory", "link" : "provingground\/HoTT$.html#NameFactory", "kind" : "object"}, {"label" : "nextName", "tail" : "(name: String): String", "member" : "provingground.HoTT.nextName", "link" : "provingground\/HoTT$.html#nextName(name:String):String", "kind" : "def"}, {"label" : "nextVar", "tail" : "(s: Traversable[Term])(typ: Typ[Term]): Term with Subs[Term]", "member" : "provingground.HoTT.nextVar", "link" : "provingground\/HoTT$.html#nextVar(s:Traversable[provingground.HoTT.Term])(typ:provingground.HoTT.Typ[provingground.HoTT.Term]):provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "usedChars", "tail" : "(s: Traversable[Term]): Traversable[Char]", "member" : "provingground.HoTT.usedChars", "link" : "provingground\/HoTT$.html#usedChars(s:Traversable[provingground.HoTT.Term]):Traversable[Char]", "kind" : "def"}, {"label" : "nextChar", "tail" : "(s: Traversable[Char]): Char", "member" : "provingground.HoTT.nextChar", "link" : "provingground\/HoTT$.html#nextChar(s:Traversable[Char]):Char", "kind" : "def"}, {"label" : "polyLambda", "tail" : "(variables: List[Term], value: Term): Term", "member" : "provingground.HoTT.polyLambda", "link" : "provingground\/HoTT$.html#polyLambda(variables:List[provingground.HoTT.Term],value:provingground.HoTT.Term):provingground.HoTT.Term", "kind" : "def"}, {"label" : "foldnames", "tail" : "(): (Term, List[AnySym]) ⇒ Term", "member" : "provingground.HoTT.foldnames", "link" : "provingground\/HoTT$.html#foldnames:(provingground.HoTT.Term,List[provingground.HoTT.AnySym])=>provingground.HoTT.Term", "kind" : "def"}, {"label" : "Fold", "tail" : "", "member" : "provingground.HoTT.Fold", "link" : "provingground\/HoTT$.html#Fold", "kind" : "object"}, {"label" : "fold", "tail" : "(fn: Term)(args: Term*): Term", "member" : "provingground.HoTT.fold", "link" : "provingground\/HoTT$.html#fold(fn:provingground.HoTT.Term)(args:provingground.HoTT.Term*):provingground.HoTT.Term", "kind" : "def"}, {"label" : "foldterms", "tail" : "(): (Term, List[Term]) ⇒ Term", "member" : "provingground.HoTT.foldterms", "link" : "provingground\/HoTT$.html#foldterms:(provingground.HoTT.Term,List[provingground.HoTT.Term])=>provingground.HoTT.Term", "kind" : "def"}, {"label" : "PlusTyp", "tail" : "", "member" : "provingground.HoTT.PlusTyp", "link" : "provingground\/HoTT$.html#PlusTyp[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]]extendsHoTT.Typ[provingground.HoTT.Term]withHoTT.Subs[provingground.HoTT.PlusTyp[U,V]]withProductwithSerializable", "kind" : "case class"}, {"label" : "PlusTyp", "tail" : "", "member" : "provingground.HoTT.PlusTyp", "link" : "provingground\/HoTT$.html#PlusTyp", "kind" : "object"}, {"label" : "RichTerm", "tail" : "", "member" : "provingground.HoTT.RichTerm", "link" : "provingground\/HoTT$.html#RichTerm[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsAnyRef", "kind" : "implicit class"}, {"label" : "Refl", "tail" : "", "member" : "provingground.HoTT.Refl", "link" : "provingground\/HoTT$.html#Refl[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsHoTT.TermwithHoTT.Subs[provingground.HoTT.Refl[U]]withProductwithSerializable", "kind" : "case class"}, {"label" : "IdentityTyp", "tail" : "", "member" : "provingground.HoTT.IdentityTyp", "link" : "provingground\/HoTT$.html#IdentityTyp", "kind" : "object"}, {"label" : "IdentityTyp", "tail" : "", "member" : "provingground.HoTT.IdentityTyp", "link" : "provingground\/HoTT$.html#IdentityTyp[+U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsHoTT.Typ[provingground.HoTT.Term]withHoTT.Subs[provingground.HoTT.IdentityTyp[U]]withProductwithSerializable", "kind" : "case class"}, {"label" : "DepPair", "tail" : "", "member" : "provingground.HoTT.DepPair", "link" : "provingground\/HoTT$.html#DepPair[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsHoTT.TermwithHoTT.Subs[provingground.HoTT.DepPair[W,U]]withHoTT.AbsPair[W,U]withProductwithSerializable", "kind" : "case class"}, {"label" : "Sgma", "tail" : "", "member" : "provingground.HoTT.Sgma", "link" : "provingground\/HoTT$.html#Sgma", "kind" : "object"}, {"label" : "SigmaTyp", "tail" : "", "member" : "provingground.HoTT.SigmaTyp", "link" : "provingground\/HoTT$.html#SigmaTyp[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsHoTT.Typ[provingground.HoTT.DepPair[W,U]]withProductwithSerializable", "kind" : "case class"}, {"label" : "RightProjSym", "tail" : "", "member" : "provingground.HoTT.RightProjSym", "link" : "provingground\/HoTT$.html#RightProjSymextendsHoTT.AnySymwithProductwithSerializable", "kind" : "case class"}, {"label" : "LeftProjSym", "tail" : "", "member" : "provingground.HoTT.LeftProjSym", "link" : "provingground\/HoTT$.html#LeftProjSymextendsHoTT.AnySymwithProductwithSerializable", "kind" : "case class"}, {"label" : "OptDepFuncDefn", "tail" : "", "member" : "provingground.HoTT.OptDepFuncDefn", "link" : "provingground\/HoTT$.html#OptDepFuncDefn[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W]]extendsHoTT.DepFunc[W,provingground.HoTT.Term]withHoTT.Subs[provingground.HoTT.OptDepFuncDefn[W]]withProductwithSerializable", "kind" : "case class"}, {"label" : "DepFuncDefn", "tail" : "", "member" : "provingground.HoTT.DepFuncDefn", "link" : "provingground\/HoTT$.html#DepFuncDefn[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsHoTT.DepFunc[W,U]", "kind" : "class"}, {"label" : "DepSymbolicFunc", "tail" : "", "member" : "provingground.HoTT.DepSymbolicFunc", "link" : "provingground\/HoTT$.html#DepSymbolicFunc[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsHoTT.FuncLike[W,U]withHoTT.SymbolicwithProductwithSerializable", "kind" : "case class"}, {"label" : "PiSymbolicFunc", "tail" : "", "member" : "provingground.HoTT.PiSymbolicFunc", "link" : "provingground\/HoTT$.html#PiSymbolicFunc[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsHoTT.FuncLike[W,U]withHoTT.SymbolicwithProductwithSerializable", "kind" : "case class"}, {"label" : "DepFunc", "tail" : "", "member" : "provingground.HoTT.DepFunc", "link" : "provingground\/HoTT$.html#DepFunc[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsHoTT.FuncLike[W,U]", "kind" : "trait"}, {"label" : "PiTyp", "tail" : "", "member" : "provingground.HoTT.PiTyp", "link" : "provingground\/HoTT$.html#PiTyp[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsHoTT.GenFuncTyp[W,U]withHoTT.Typ[provingground.HoTT.FuncLike[W,U]]withHoTT.Subs[provingground.HoTT.PiTyp[W,U]]withProductwithSerializable", "kind" : "case class"}, {"label" : "PiDefn", "tail" : "", "member" : "provingground.HoTT.PiDefn", "link" : "provingground\/HoTT$.html#PiDefn[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsHoTT.GenFuncTyp[W,U]withHoTT.Typ[provingground.HoTT.FuncLike[W,U]]withHoTT.Subs[provingground.HoTT.PiDefn[W,U]]withProductwithSerializable", "kind" : "case class"}, {"label" : "PiDefn", "tail" : "", "member" : "provingground.HoTT.PiDefn", "link" : "provingground\/HoTT$.html#PiDefn", "kind" : "object"}, {"label" : "TypFamily", "tail" : "", "member" : "provingground.HoTT.TypFamily", "link" : "provingground\/HoTT$.html#TypFamily[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],+U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]=provingground.HoTT.Func[W,provingground.HoTT.Typ[U]]", "kind" : "type"}, {"label" : "sigma", "tail" : "(variable: U)(value: Typ[V]): Typ[AbsPair[U, V]]", "member" : "provingground.HoTT.sigma", "link" : "provingground\/HoTT$.html#sigma[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](variable:U)(value:provingground.HoTT.Typ[V]):provingground.HoTT.Typ[provingground.HoTT.AbsPair[U,V]]", "kind" : "def"}, {"label" : "composition", "tail" : "(f: Func[V, W], g: Func[U, V]): LambdaFixed[U with Subs[U], W]", "member" : "provingground.HoTT.composition", "link" : "provingground\/HoTT$.html#composition[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V],W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W]](f:provingground.HoTT.Func[V,W],g:provingground.HoTT.Func[U,V]):provingground.HoTT.LambdaFixed[Uwithprovingground.HoTT.Subs[U],W]", "kind" : "def"}, {"label" : "lambdaPair", "tail" : "(variable: U)(value: V): DepPair[U, V]", "member" : "provingground.HoTT.lambdaPair", "link" : "provingground\/HoTT$.html#lambdaPair[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](variable:U)(value:V):provingground.HoTT.DepPair[U,V]", "kind" : "def"}, {"label" : "optlambda", "tail" : "(variable: Term): (Term) ⇒ Term", "member" : "provingground.HoTT.optlambda", "link" : "provingground\/HoTT$.html#optlambda(variable:provingground.HoTT.Term):provingground.HoTT.Term=>provingground.HoTT.Term", "kind" : "def"}, {"label" : "pi", "tail" : "(variable: U)(value: Typ[V]): Typ[FuncLike[U, V]]", "member" : "provingground.HoTT.pi", "link" : "provingground\/HoTT$.html#pi[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](variable:U)(value:provingground.HoTT.Typ[V]):provingground.HoTT.Typ[provingground.HoTT.FuncLike[U,V]]", "kind" : "def"}, {"label" : "id", "tail" : "(typ: Typ[U]): Func[U with Subs[U], U with Subs[U]]", "member" : "provingground.HoTT.id", "link" : "provingground\/HoTT$.html#id[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](typ:provingground.HoTT.Typ[U]):provingground.HoTT.Func[Uwithprovingground.HoTT.Subs[U],Uwithprovingground.HoTT.Subs[U]]", "kind" : "def"}, {"label" : "lmbda", "tail" : "(variable: U)(value: V): Func[U, V]", "member" : "provingground.HoTT.lmbda", "link" : "provingground\/HoTT$.html#lmbda[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](variable:U)(value:V):provingground.HoTT.Func[U,V]", "kind" : "def"}, {"label" : "piClosure", "tail" : "(vars: Vector[Term])(t: Typ[Term]): Typ[Term]", "member" : "provingground.HoTT.piClosure", "link" : "provingground\/HoTT$.html#piClosure(vars:Vector[provingground.HoTT.Term])(t:provingground.HoTT.Typ[provingground.HoTT.Term]):provingground.HoTT.Typ[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "lambdaClosure", "tail" : "(vars: Vector[Term])(t: Term): Term", "member" : "provingground.HoTT.lambdaClosure", "link" : "provingground\/HoTT$.html#lambdaClosure(vars:Vector[provingground.HoTT.Term])(t:provingground.HoTT.Term):provingground.HoTT.Term", "kind" : "def"}, {"label" : "piDefn", "tail" : "(variable: U)(value: Typ[V]): PiDefn[U, V]", "member" : "provingground.HoTT.piDefn", "link" : "provingground\/HoTT$.html#piDefn[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](variable:U)(value:provingground.HoTT.Typ[V]):provingground.HoTT.PiDefn[U,V]", "kind" : "def"}, {"label" : "lmbdaTyped", "tail" : "(variable: TypedTerm[U])(value: TypedTerm[V]): Func[U, V]", "member" : "provingground.HoTT.lmbdaTyped", "link" : "provingground\/HoTT$.html#lmbdaTyped[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](variable:provingground.HoTT.TypedTerm[U])(value:provingground.HoTT.TypedTerm[V]):provingground.HoTT.Func[U,V]", "kind" : "def"}, {"label" : "lambdaTyped", "tail" : "(variable: TypedTerm[U])(value: TypedTerm[V]): FuncLike[U, V]", "member" : "provingground.HoTT.lambdaTyped", "link" : "provingground\/HoTT$.html#lambdaTyped[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](variable:provingground.HoTT.TypedTerm[U])(value:provingground.HoTT.TypedTerm[V]):provingground.HoTT.FuncLike[U,V]", "kind" : "def"}, {"label" : "lambda", "tail" : "(variable: U)(value: V): FuncLike[U, V]", "member" : "provingground.HoTT.lambda", "link" : "provingground\/HoTT$.html#lambda[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](variable:U)(value:V):provingground.HoTT.FuncLike[U,V]", "kind" : "def"}, {"label" : "outerSym", "tail" : "(sym: Symbolic): Symbolic", "member" : "provingground.HoTT.outerSym", "link" : "provingground\/HoTT$.html#outerSym(sym:provingground.HoTT.Symbolic):provingground.HoTT.Symbolic", "kind" : "def"}, {"label" : "InnerSym", "tail" : "", "member" : "provingground.HoTT.InnerSym", "link" : "provingground\/HoTT$.html#InnerSym[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsHoTT.AnySym", "kind" : "class"}, {"label" : "instantiate", "tail" : "(substitutions: (Term) ⇒ Option[Term], target: Typ[Term]): (Term) ⇒ Option[Term]", "member" : "provingground.HoTT.instantiate", "link" : "provingground\/HoTT$.html#instantiate(substitutions:provingground.HoTT.Term=>Option[provingground.HoTT.Term],target:provingground.HoTT.Typ[provingground.HoTT.Term]):provingground.HoTT.Term=>Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "termSymbol", "tail" : "(term: Term): AnySym", "member" : "provingground.HoTT.termSymbol", "link" : "provingground\/HoTT$.html#termSymbol(term:provingground.HoTT.Term):provingground.HoTT.AnySym", "kind" : "def"}, {"label" : "TermSymbol", "tail" : "", "member" : "provingground.HoTT.TermSymbol", "link" : "provingground\/HoTT$.html#TermSymbolextendsHoTT.AnySymwithProductwithSerializable", "kind" : "case class"}, {"label" : "LambdaTypedFixed", "tail" : "", "member" : "provingground.HoTT.LambdaTypedFixed", "link" : "provingground\/HoTT$.html#LambdaTypedFixed[X<:provingground.HoTT.Termwithprovingground.HoTT.Subs[X],Y<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Y]]extendsHoTT.LambdaLike[X,Y]withHoTT.Func[X,Y]withHoTT.Subs[provingground.HoTT.LambdaTypedFixed[X,Y]]withProductwithSerializable", "kind" : "case class"}, {"label" : "LambdaFixed", "tail" : "", "member" : "provingground.HoTT.LambdaFixed", "link" : "provingground\/HoTT$.html#LambdaFixed[X<:provingground.HoTT.Termwithprovingground.HoTT.Subs[X],Y<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Y]]extendsHoTT.LambdaLike[X,Y]withHoTT.Func[X,Y]withHoTT.Subs[provingground.HoTT.LambdaFixed[X,Y]]withProductwithSerializable", "kind" : "case class"}, {"label" : "LambdaTyped", "tail" : "", "member" : "provingground.HoTT.LambdaTyped", "link" : "provingground\/HoTT$.html#LambdaTyped[X<:provingground.HoTT.Termwithprovingground.HoTT.Subs[X],Y<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Y]]extendsHoTT.LambdaLike[X,Y]withProductwithSerializable", "kind" : "case class"}, {"label" : "LambdaTerm", "tail" : "", "member" : "provingground.HoTT.LambdaTerm", "link" : "provingground\/HoTT$.html#LambdaTerm[X<:provingground.HoTT.Termwithprovingground.HoTT.Subs[X],Y<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Y]]extendsHoTT.LambdaLike[X,Y]withProductwithSerializable", "kind" : "case class"}, {"label" : "LambdaLike", "tail" : "", "member" : "provingground.HoTT.LambdaLike", "link" : "provingground\/HoTT$.html#LambdaLike[X<:provingground.HoTT.Termwithprovingground.HoTT.Subs[X],Y<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Y]]extendsHoTT.FuncLike[X,Y]", "kind" : "sealed trait"}, {"label" : "replaceVar", "tail" : "(variable: U)(x: Term, y: Term): U with Subs[U]", "member" : "provingground.HoTT.replaceVar", "link" : "provingground\/HoTT$.html#replaceVar[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](variable:U)(x:provingground.HoTT.Term,y:provingground.HoTT.Term):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "FuncDefn", "tail" : "", "member" : "provingground.HoTT.FuncDefn", "link" : "provingground\/HoTT$.html#FuncDefn[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsHoTT.Func[W,U]", "kind" : "class"}, {"label" : "SymbolicFunc", "tail" : "", "member" : "provingground.HoTT.SymbolicFunc", "link" : "provingground\/HoTT$.html#SymbolicFunc[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsHoTT.Func[W,U]withHoTT.Subs[provingground.HoTT.Func[W,U]]withHoTT.SymbolicwithProductwithSerializable", "kind" : "case class"}, {"label" : "NamedDepFunc", "tail" : "", "member" : "provingground.HoTT.NamedDepFunc", "link" : "provingground\/HoTT$.html#NamedDepFunc[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],+U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsHoTT.FuncLike[W,U]withProductwithSerializable", "kind" : "case class"}, {"label" : "NamedFunc", "tail" : "", "member" : "provingground.HoTT.NamedFunc", "link" : "provingground\/HoTT$.html#NamedFunc[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],+U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsHoTT.Func[W,U]withProductwithSerializable", "kind" : "case class"}, {"label" : "Func", "tail" : "", "member" : "provingground.HoTT.Func", "link" : "provingground\/HoTT$.html#Func[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],+U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsHoTT.FuncLike[W,U]withHoTT.Subs[provingground.HoTT.Func[W,U]]", "kind" : "trait"}, {"label" : "IndRecFunc", "tail" : "", "member" : "provingground.HoTT.IndRecFunc", "link" : "provingground\/HoTT$.html#IndRecFunc[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],+U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F]]extendsHoTT.RecFunc[W,U]", "kind" : "trait"}, {"label" : "RecFunc", "tail" : "", "member" : "provingground.HoTT.RecFunc", "link" : "provingground\/HoTT$.html#RecFunc[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],+U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsHoTT.Func[W,U]", "kind" : "trait"}, {"label" : "FormalAppln", "tail" : "", "member" : "provingground.HoTT.FormalAppln", "link" : "provingground\/HoTT$.html#FormalAppln", "kind" : "object"}, {"label" : "ApplnSym", "tail" : "", "member" : "provingground.HoTT.ApplnSym", "link" : "provingground\/HoTT$.html#ApplnSym[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsHoTT.AnySymwithProductwithSerializable", "kind" : "case class"}, {"label" : "FuncLike", "tail" : "", "member" : "provingground.HoTT.FuncLike", "link" : "provingground\/HoTT$.html#FuncLike[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],+U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsHoTT.TermwithW=>UwithHoTT.Subs[provingground.HoTT.FuncLike[W,U]]", "kind" : "trait"}, {"label" : "IndInducFuncLike", "tail" : "", "member" : "provingground.HoTT.IndInducFuncLike", "link" : "provingground\/HoTT$.html#IndInducFuncLike[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],+U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],IDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT]]extendsHoTT.InducFuncLike[W,U]", "kind" : "trait"}, {"label" : "InducFuncLike", "tail" : "", "member" : "provingground.HoTT.InducFuncLike", "link" : "provingground\/HoTT$.html#InducFuncLike[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],+U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsHoTT.FuncLike[W,U]", "kind" : "trait"}, {"label" : "CodomSym", "tail" : "", "member" : "provingground.HoTT.CodomSym", "link" : "provingground\/HoTT$.html#CodomSymextendsHoTT.AnySymwithProductwithSerializable", "kind" : "case class"}, {"label" : "DomSym", "tail" : "", "member" : "provingground.HoTT.DomSym", "link" : "provingground\/HoTT$.html#DomSymextendsHoTT.AnySymwithProductwithSerializable", "kind" : "case class"}, {"label" : "FuncTyp", "tail" : "", "member" : "provingground.HoTT.FuncTyp", "link" : "provingground\/HoTT$.html#FuncTyp[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsHoTT.GenFuncTyp[W,U]withHoTT.Typ[provingground.HoTT.Func[W,U]]withHoTT.Subs[provingground.HoTT.FuncTyp[W,U]]withProductwithSerializable", "kind" : "case class"}, {"label" : "GenFuncTyp", "tail" : "", "member" : "provingground.HoTT.GenFuncTyp", "link" : "provingground\/HoTT$.html#GenFuncTyp[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsHoTT.Typ[provingground.HoTT.FuncLike[W,U]]withHoTT.Subs[provingground.HoTT.GenFuncTyp[W,U]]", "kind" : "abstract class"}, {"label" : "HashSym", "tail" : "", "member" : "provingground.HoTT.HashSym", "link" : "provingground\/HoTT$.html#HashSym", "kind" : "object"}, {"label" : "mkPair", "tail" : ": (Term, Term) ⇒ AbsPair[Term, Term]", "member" : "provingground.HoTT.mkPair", "link" : "provingground\/HoTT$.html#mkPair:(provingground.HoTT.Term,provingground.HoTT.Term)=>provingground.HoTT.AbsPair[provingground.HoTT.Term,provingground.HoTT.Term]", "kind" : "lazy val"}, {"label" : "pair", "tail" : "(first: Typ[U] with Subs[Typ[U]], second: Typ[V] with Subs[Typ[V]]): ProdTyp[U, V]", "member" : "provingground.HoTT.pair", "link" : "provingground\/HoTT$.html#pair[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](first:provingground.HoTT.Typ[U]withprovingground.HoTT.Subs[provingground.HoTT.Typ[U]],second:provingground.HoTT.Typ[V]withprovingground.HoTT.Subs[provingground.HoTT.Typ[V]]):provingground.HoTT.ProdTyp[U,V]", "kind" : "def"}, {"label" : "pair", "tail" : "(first: U, second: V): PairTerm[U, V]", "member" : "provingground.HoTT.pair", "link" : "provingground\/HoTT$.html#pair[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](first:U,second:V):provingground.HoTT.PairTerm[U,V]", "kind" : "def"}, {"label" : "Tuple", "tail" : "", "member" : "provingground.HoTT.Tuple", "link" : "provingground\/HoTT$.html#Tuple", "kind" : "object"}, {"label" : "AbsPair", "tail" : "", "member" : "provingground.HoTT.AbsPair", "link" : "provingground\/HoTT$.html#AbsPair", "kind" : "object"}, {"label" : "AbsPair", "tail" : "", "member" : "provingground.HoTT.AbsPair", "link" : "provingground\/HoTT$.html#AbsPair[+U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],+V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]]extendsHoTT.TermwithHoTT.Subs[provingground.HoTT.AbsPair[U,V]]", "kind" : "trait"}, {"label" : "PairTerm", "tail" : "", "member" : "provingground.HoTT.PairTerm", "link" : "provingground\/HoTT$.html#PairTerm[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]]extendsHoTT.AbsPair[U,V]withHoTT.Subs[provingground.HoTT.PairTerm[U,V]]withProductwithSerializable", "kind" : "case class"}, {"label" : "ProdTyp", "tail" : "", "member" : "provingground.HoTT.ProdTyp", "link" : "provingground\/HoTT$.html#ProdTyp[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]]extendsHoTT.Typ[provingground.HoTT.PairTerm[U,V]]withHoTT.AbsPair[provingground.HoTT.Typ[U],provingground.HoTT.Typ[V]]withHoTT.Subs[provingground.HoTT.ProdTyp[U,V]]withProductwithSerializable", "kind" : "case class"}, {"label" : "Type", "tail" : ": Universe", "member" : "provingground.HoTT.Type", "link" : "provingground\/HoTT$.html#Type:provingground.HoTT.Universe", "kind" : "val"}, {"label" : "univlevel", "tail" : "(): (Typ[Typ[Term]]) ⇒ Int", "member" : "provingground.HoTT.univlevel", "link" : "provingground\/HoTT$.html#univlevel:provingground.HoTT.Typ[provingground.HoTT.Typ[provingground.HoTT.Term]]=>Int", "kind" : "def"}, {"label" : "Universe", "tail" : "", "member" : "provingground.HoTT.Universe", "link" : "provingground\/HoTT$.html#UniverseextendsHoTT.UnivwithProductwithSerializable", "kind" : "case class"}, {"label" : "BaseUniv", "tail" : "", "member" : "provingground.HoTT.BaseUniv", "link" : "provingground\/HoTT$.html#BaseUnivextendsAnyRef", "kind" : "trait"}, {"label" : "Univ", "tail" : "", "member" : "provingground.HoTT.Univ", "link" : "provingground\/HoTT$.html#Univ=provingground.HoTT.Typ[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "type"}, {"label" : "vacuous", "tail" : "(codom: Typ[U]): Func[Term, U] with Subs[Func[Term, U]]", "member" : "provingground.HoTT.vacuous", "link" : "provingground\/HoTT$.html#vacuous[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](codom:provingground.HoTT.Typ[U]):provingground.HoTT.Func[provingground.HoTT.Term,U]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,U]]", "kind" : "def"}, {"label" : "vacuousSym", "tail" : "", "member" : "provingground.HoTT.vacuousSym", "link" : "provingground\/HoTT$.html#vacuousSym", "kind" : "object"}, {"label" : "One", "tail" : ": Unit.type", "member" : "provingground.HoTT.One", "link" : "provingground\/HoTT$.html#One:provingground.HoTT.Unit.type", "kind" : "val"}, {"label" : "Star", "tail" : "", "member" : "provingground.HoTT.Star", "link" : "provingground\/HoTT$.html#Star", "kind" : "object"}, {"label" : "Unit", "tail" : "", "member" : "provingground.HoTT.Unit", "link" : "provingground\/HoTT$.html#Unit", "kind" : "object"}, {"label" : "Zero", "tail" : "", "member" : "provingground.HoTT.Zero", "link" : "provingground\/HoTT$.html#Zero", "kind" : "object"}, {"label" : "SmallTyp", "tail" : "", "member" : "provingground.HoTT.SmallTyp", "link" : "provingground\/HoTT$.html#SmallTypextendsHoTT.Typ[provingground.HoTT.Term]", "kind" : "trait"}, {"label" : "SymbTyp", "tail" : "", "member" : "provingground.HoTT.SymbTyp", "link" : "provingground\/HoTT$.html#SymbTypextendsHoTT.Typ[provingground.HoTT.Term]withHoTT.SymbolicwithProductwithSerializable", "kind" : "case class"}, {"label" : "symSubs", "tail" : "(symbobj: (AnySym) ⇒ U)(x: Term, y: Term): (AnySym) ⇒ U", "member" : "provingground.HoTT.symSubs", "link" : "provingground\/HoTT$.html#symSubs[U<:provingground.HoTT.Term](symbobj:provingground.HoTT.AnySym=>U)(x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.HoTT.AnySym=>U", "kind" : "def"}, {"label" : "evalSym", "tail" : "(symbobj: (AnySym) ⇒ Term)(x: Term, y: Term): (AnySym) ⇒ Option[Term]", "member" : "provingground.HoTT.evalSym", "link" : "provingground\/HoTT$.html#evalSym(symbobj:provingground.HoTT.AnySym=>provingground.HoTT.Term)(x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.HoTT.AnySym=>Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "SymbObj", "tail" : "", "member" : "provingground.HoTT.SymbObj", "link" : "provingground\/HoTT$.html#SymbObj[+U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsHoTT.TermwithHoTT.SymbolicwithProductwithSerializable", "kind" : "case class"}, {"label" : "hasName", "tail" : "(sym: AnySym): (Term) ⇒ Boolean", "member" : "provingground.HoTT.hasName", "link" : "provingground\/HoTT$.html#hasName(sym:provingground.HoTT.AnySym):provingground.HoTT.Term=>Boolean", "kind" : "def"}, {"label" : "vartyp", "tail" : "(t: U)(arg0: Variable[U]): Typ[U]", "member" : "provingground.HoTT.vartyp", "link" : "provingground\/HoTT$.html#vartyp[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](t:U)(implicitevidence$1:provingground.HoTT.Variable[U]):provingground.HoTT.Typ[U]", "kind" : "def"}, {"label" : "Variable", "tail" : "", "member" : "provingground.HoTT.Variable", "link" : "provingground\/HoTT$.html#Variable", "kind" : "object"}, {"label" : "Variable", "tail" : "", "member" : "provingground.HoTT.Variable", "link" : "provingground\/HoTT$.html#Variable[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsAnyRef", "kind" : "trait"}, {"label" : "Symbolic", "tail" : "", "member" : "provingground.HoTT.Symbolic", "link" : "provingground\/HoTT$.html#SymbolicextendsHoTT.Term", "kind" : "trait"}, {"label" : "UnicodeSyms", "tail" : "", "member" : "provingground.HoTT.UnicodeSyms", "link" : "provingground\/HoTT$.html#UnicodeSyms", "kind" : "object"}, {"label" : "SimpleSyms", "tail" : "", "member" : "provingground.HoTT.SimpleSyms", "link" : "provingground\/HoTT$.html#SimpleSyms", "kind" : "object"}, {"label" : "TermSyms", "tail" : "", "member" : "provingground.HoTT.TermSyms", "link" : "provingground\/HoTT$.html#TermSymsextendsAnyRef", "kind" : "trait"}, {"label" : "Typ", "tail" : "", "member" : "provingground.HoTT.Typ", "link" : "provingground\/HoTT$.html#Typ[+U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsHoTT.TermwithHoTT.Subs[provingground.HoTT.Typ[U]]", "kind" : "trait"}, {"label" : "ConstantTyp", "tail" : "", "member" : "provingground.HoTT.ConstantTyp", "link" : "provingground\/HoTT$.html#ConstantTypextendsHoTT.Typ[provingground.HoTT.Term]", "kind" : "trait"}, {"label" : "ConstantTerm", "tail" : "", "member" : "provingground.HoTT.ConstantTerm", "link" : "provingground\/HoTT$.html#ConstantTermextendsHoTT.Term", "kind" : "trait"}, {"label" : "AtomicTerm", "tail" : "", "member" : "provingground.HoTT.AtomicTerm", "link" : "provingground\/HoTT$.html#AtomicTermextendsHoTT.TermwithHoTT.Subs[provingground.HoTT.AtomicTerm]", "kind" : "trait"}, {"label" : "avoidVars", "tail" : "(t: Term, x: U): U", "member" : "provingground.HoTT.avoidVars", "link" : "provingground\/HoTT$.html#avoidVars[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](t:provingground.HoTT.Term,x:U):U", "kind" : "def"}, {"label" : "Subs", "tail" : "", "member" : "provingground.HoTT.Subs", "link" : "provingground\/HoTT$.html#Subs[+U<:provingground.HoTT.Term]extendsAnyRef", "kind" : "trait"}, {"label" : "Term", "tail" : "", "member" : "provingground.HoTT.Term", "link" : "provingground\/HoTT$.html#TermextendsHoTT.Subs[provingground.HoTT.Term]", "kind" : "trait"}, {"label" : "TypedTerm", "tail" : "", "member" : "provingground.HoTT.TypedTerm", "link" : "provingground\/HoTT$.html#TypedTerm[+U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsProductwithSerializable", "kind" : "case class"}, {"label" : "stringSym", "tail" : "(name: String): Name", "member" : "provingground.HoTT.stringSym", "link" : "provingground\/HoTT$.html#stringSym(name:String):provingground.HoTT.Name", "kind" : "implicit def"}, {"label" : "Name", "tail" : "", "member" : "provingground.HoTT.Name", "link" : "provingground\/HoTT$.html#NameextendsHoTT.AtomicSymwithProductwithSerializable", "kind" : "case class"}, {"label" : "AtomicSym", "tail" : "", "member" : "provingground.HoTT.AtomicSym", "link" : "provingground\/HoTT$.html#AtomicSymextendsHoTT.AnySym", "kind" : "class"}, {"label" : "AnySym", "tail" : "", "member" : "provingground.HoTT.AnySym", "link" : "provingground\/HoTT$.html#AnySymextendsAnyRef", "kind" : "trait"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/HoTT$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/HoTT$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/HoTT$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/HoTT$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/HoTT$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/HoTT$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/HoTT$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/HoTT$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/HoTT$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/HoTT$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/HoTT$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/HoTT$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/HoTT$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/HoTT$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/HoTT$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/HoTT$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/HoTT$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/HoTT$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/HoTT$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.LinearStructure", "shortDescription" : "", "object" : "provingground\/LinearStructure$.html", "members_object" : [{"label" : "FiniteDistVec", "tail" : "(): LinearStructure[FiniteDistribution[T]]", "member" : "provingground.LinearStructure.FiniteDistVec", "link" : "provingground\/LinearStructure$.html#FiniteDistVec[T]:provingground.LinearStructure[provingground.FiniteDistribution[T]]", "kind" : "implicit def"}, {"label" : "FuncLinearStructure", "tail" : "(lsB: LinearStructure[B]): LinearStructure[(A) ⇒ B]", "member" : "provingground.LinearStructure.FuncLinearStructure", "link" : "provingground\/LinearStructure$.html#FuncLinearStructure[A,B](implicitlsB:provingground.LinearStructure[B]):provingground.LinearStructure[A=>B]", "kind" : "implicit def"}, {"label" : "VectorPairs", "tail" : "(lsa: LinearStructure[A], lsb: LinearStructure[B]): LinearStructure[(A, B)]", "member" : "provingground.LinearStructure.VectorPairs", "link" : "provingground\/LinearStructure$.html#VectorPairs[A,B](implicitlsa:provingground.LinearStructure[A],implicitlsb:provingground.LinearStructure[B]):provingground.LinearStructure[(A,B)]", "kind" : "implicit def"}, {"label" : "RealsAsLinearStructure", "tail" : ": LinearStructure[Double]", "member" : "provingground.LinearStructure.RealsAsLinearStructure", "link" : "provingground\/LinearStructure$.html#RealsAsLinearStructure:provingground.LinearStructure[Double]", "kind" : "implicit val"}, {"label" : "VectorOps", "tail" : "", "member" : "provingground.LinearStructure.VectorOps", "link" : "provingground\/LinearStructure$.html#VectorOps[A]extendsAnyRef", "kind" : "implicit class"}, {"label" : "nrec", "tail" : "(base: X, ind: (Int) ⇒ (X) ⇒ X)(ls: LinearStructure[X]): (Int) ⇒ X", "member" : "provingground.LinearStructure.nrec", "link" : "provingground\/LinearStructure$.html#nrec[X](base:X,ind:Int=>(X=>X))(implicitls:provingground.LinearStructure[X]):Int=>X", "kind" : "def"}, {"label" : "vAverage", "tail" : "(xs: Traversable[T])(ls: LinearStructure[T]): T", "member" : "provingground.LinearStructure.vAverage", "link" : "provingground\/LinearStructure$.html#vAverage[T](xs:Traversable[T])(implicitls:provingground.LinearStructure[T]):T", "kind" : "def"}, {"label" : "vBigSum", "tail" : "(xs: Traversable[T])(ls: LinearStructure[T]): T", "member" : "provingground.LinearStructure.vBigSum", "link" : "provingground\/LinearStructure$.html#vBigSum[T](xs:Traversable[T])(implicitls:provingground.LinearStructure[T]):T", "kind" : "def"}, {"label" : "vdiff", "tail" : "(ls: LinearStructure[T]): (T, T) ⇒ T", "member" : "provingground.LinearStructure.vdiff", "link" : "provingground\/LinearStructure$.html#vdiff[T](implicitls:provingground.LinearStructure[T]):(T,T)=>T", "kind" : "def"}, {"label" : "vprod", "tail" : "(ls: LinearStructure[T]): (Double, T) ⇒ T", "member" : "provingground.LinearStructure.vprod", "link" : "provingground\/LinearStructure$.html#vprod[T](implicitls:provingground.LinearStructure[T]):(Double,T)=>T", "kind" : "def"}, {"label" : "vsum", "tail" : "(ls: LinearStructure[T]): (T, T) ⇒ T", "member" : "provingground.LinearStructure.vsum", "link" : "provingground\/LinearStructure$.html#vsum[T](implicitls:provingground.LinearStructure[T]):(T,T)=>T", "kind" : "def"}, {"label" : "vzero", "tail" : "(ls: LinearStructure[T]): T", "member" : "provingground.LinearStructure.vzero", "link" : "provingground\/LinearStructure$.html#vzero[T](implicitls:provingground.LinearStructure[T]):T", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/LinearStructure$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/LinearStructure$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/LinearStructure$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/LinearStructure$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/LinearStructure$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/LinearStructure$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/LinearStructure$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/LinearStructure$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/LinearStructure$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/LinearStructure$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/LinearStructure$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/LinearStructure$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/LinearStructure$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/LinearStructure$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/LinearStructure$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/LinearStructure$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/LinearStructure$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/LinearStructure$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/LinearStructure$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "|*|", "tail" : "(c: Double): LinearStructure[A]", "member" : "provingground.LinearStructure.VectorOps.|*|", "link" : "provingground\/LinearStructure.html#|*|(c:Double):A", "kind" : "def"}, {"label" : "|+|", "tail" : "(b: LinearStructure[A]): LinearStructure[A]", "member" : "provingground.LinearStructure.VectorOps.|+|", "link" : "provingground\/LinearStructure.html#|+|(b:A):A", "kind" : "def"}, {"label" : "vs", "tail" : ": LinearStructure[LinearStructure[A]]", "member" : "provingground.LinearStructure.VectorOps.vs", "link" : "provingground\/LinearStructure.html#vs:provingground.LinearStructure[A]", "kind" : "val"}, {"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/LinearStructure.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/LinearStructure.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (LinearStructure[A]) ⇒ Boolean, msg: ⇒ Any): LinearStructure[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/LinearStructure.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (LinearStructure[A]) ⇒ Boolean): LinearStructure[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/LinearStructure.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): LinearStructure[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/LinearStructure.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): LinearStructure[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/LinearStructure.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (LinearStructure[A], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/LinearStructure.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (LinearStructure[A], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/LinearStructure.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "diff", "tail" : "(frm: A, remove: A): A", "member" : "provingground.LinearStructure.diff", "link" : "provingground\/LinearStructure.html#diff(frm:A,remove:A):A", "kind" : "def"}, {"member" : "provingground.LinearStructure#<init>", "error" : "unsupported entity"}, {"label" : "mult", "tail" : ": (Double, A) ⇒ A", "member" : "provingground.LinearStructure.mult", "link" : "provingground\/LinearStructure.html#mult:(Double,A)=>A", "kind" : "val"}, {"label" : "sum", "tail" : ": (A, A) ⇒ A", "member" : "provingground.LinearStructure.sum", "link" : "provingground\/LinearStructure.html#sum:(A,A)=>A", "kind" : "val"}, {"label" : "zero", "tail" : ": A", "member" : "provingground.LinearStructure.zero", "link" : "provingground\/LinearStructure.html#zero:A", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/LinearStructure.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/LinearStructure.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/LinearStructure.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/LinearStructure.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/LinearStructure.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/LinearStructure.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/LinearStructure.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/LinearStructure.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/LinearStructure.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/LinearStructure.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/LinearStructure.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/LinearStructure.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/LinearStructure.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/LinearStructure.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/LinearStructure.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/LinearStructure.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/LinearStructure.html", "kind" : "case class"}, {"name" : "provingground.MereProposition", "shortDescription" : "", "object" : "provingground\/MereProposition$.html", "members_object" : [{"label" : "mere", "tail" : "(fn: Func[U, V]): Func[Term, Term]", "member" : "provingground.MereProposition.mere", "link" : "provingground\/MereProposition$.html#mere[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](fn:provingground.HoTT.Func[U,V]):provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]", "kind" : "def"}, {"label" : "Factorize", "tail" : "", "member" : "provingground.MereProposition.Factorize", "link" : "provingground\/MereProposition$.html#Factorize[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]]extendsHoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Func[U,V],provingground.HoTT.Func[provingground.HoTT.Term,V]]]withHoTT.Subs[provingground.MereProposition.Factorize[U,V]]withProductwithSerializable", "kind" : "case class"}, {"label" : "Quotient", "tail" : "", "member" : "provingground.MereProposition.Quotient", "link" : "provingground\/MereProposition$.html#Quotient[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsHoTT.Func[U,provingground.HoTT.Term]withProductwithSerializable", "kind" : "case class"}, {"label" : "Truncation", "tail" : "", "member" : "provingground.MereProposition.Truncation", "link" : "provingground\/MereProposition$.html#Truncation[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsHoTT.Typ[provingground.HoTT.Term]withProductwithSerializable", "kind" : "case class"}, {"label" : "isPropn", "tail" : "(typ: Typ[U]): Typ[FuncLike[U with Subs[U], FuncLike[U with Subs[U], Term]]]", "member" : "provingground.MereProposition.isPropn", "link" : "provingground\/MereProposition$.html#isPropn[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](typ:provingground.HoTT.Typ[U]):provingground.HoTT.Typ[provingground.HoTT.FuncLike[Uwithprovingground.HoTT.Subs[U],provingground.HoTT.FuncLike[Uwithprovingground.HoTT.Subs[U],provingground.HoTT.Term]]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/MereProposition$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/MereProposition$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/MereProposition$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/MereProposition$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/MereProposition$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/MereProposition$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/MereProposition$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/MereProposition$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/MereProposition$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/MereProposition$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/MereProposition$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/MereProposition$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/MereProposition$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/MereProposition$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/MereProposition$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/MereProposition$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/MereProposition$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/MereProposition$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/MereProposition$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.PickledWeighted", "shortDescription" : "", "object" : "provingground\/PickledWeighted$.html", "members_object" : [{"label" : "pickle", "tail" : "(wtd: Weighted[T]): PickledWeighted", "member" : "provingground.PickledWeighted.pickle", "link" : "provingground\/PickledWeighted$.html#pickle[T](wtd:provingground.Weighted[T]):provingground.PickledWeighted", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/PickledWeighted$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/PickledWeighted$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/PickledWeighted$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/PickledWeighted$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/PickledWeighted$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/PickledWeighted$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/PickledWeighted$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/PickledWeighted$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/PickledWeighted$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/PickledWeighted$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/PickledWeighted$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/PickledWeighted$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/PickledWeighted$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/PickledWeighted$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/PickledWeighted$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/PickledWeighted$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/PickledWeighted$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/PickledWeighted$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/PickledWeighted$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/PickledWeighted.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/PickledWeighted.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (PickledWeighted) ⇒ Boolean, msg: ⇒ Any): PickledWeighted", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/PickledWeighted.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (PickledWeighted) ⇒ Boolean): PickledWeighted", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/PickledWeighted.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): PickledWeighted", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/PickledWeighted.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): PickledWeighted", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/PickledWeighted.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (PickledWeighted, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/PickledWeighted.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (PickledWeighted, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/PickledWeighted.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "map", "tail" : "(f: (String) ⇒ S): Weighted[S]", "member" : "provingground.PickledWeighted.map", "link" : "provingground\/PickledWeighted.html#map[S](f:String=>S):provingground.Weighted[S]", "kind" : "def"}, {"member" : "provingground.PickledWeighted#<init>", "error" : "unsupported entity"}, {"label" : "weight", "tail" : ": Double", "member" : "provingground.PickledWeighted.weight", "link" : "provingground\/PickledWeighted.html#weight:Double", "kind" : "val"}, {"label" : "elem", "tail" : ": String", "member" : "provingground.PickledWeighted.elem", "link" : "provingground\/PickledWeighted.html#elem:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/PickledWeighted.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/PickledWeighted.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/PickledWeighted.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/PickledWeighted.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/PickledWeighted.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/PickledWeighted.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/PickledWeighted.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/PickledWeighted.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/PickledWeighted.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/PickledWeighted.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/PickledWeighted.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/PickledWeighted.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/PickledWeighted.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/PickledWeighted.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/PickledWeighted.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/PickledWeighted.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/PickledWeighted.html", "kind" : "case class"}, {"name" : "provingground.ProbabilityDistribution", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/ProbabilityDistribution.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/ProbabilityDistribution.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ProbabilityDistribution[A]) ⇒ Boolean, msg: ⇒ Any): ProbabilityDistribution[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/ProbabilityDistribution.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ProbabilityDistribution[A]) ⇒ Boolean): ProbabilityDistribution[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/ProbabilityDistribution.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): ProbabilityDistribution[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/ProbabilityDistribution.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ProbabilityDistribution[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/ProbabilityDistribution.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ProbabilityDistribution[A], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/ProbabilityDistribution.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ProbabilityDistribution[A], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/ProbabilityDistribution.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "condMap", "tail" : "(f: (A) ⇒ Option[B]): ProbabilityDistribution[B]", "member" : "provingground.ProbabilityDistribution.condMap", "link" : "provingground\/ProbabilityDistribution.html#condMap[B](f:A=>Option[B]):provingground.ProbabilityDistribution[B]", "kind" : "def"}, {"label" : "conditioned", "tail" : "(p: (A) ⇒ Boolean): ProbabilityDistribution[A]", "member" : "provingground.ProbabilityDistribution.conditioned", "link" : "provingground\/ProbabilityDistribution.html#conditioned(p:A=>Boolean):provingground.ProbabilityDistribution[A]", "kind" : "def"}, {"label" : "<+?>", "tail" : "(mixin: ⇒ ProbabilityDistribution[Option[A]], weight: Double): MixinOpt[A]", "member" : "provingground.ProbabilityDistribution.<+?>", "link" : "provingground\/ProbabilityDistribution.html#<+?>(mixin:=>provingground.ProbabilityDistribution[Option[A]],weight:Double):provingground.ProbabilityDistribution.MixinOpt[A]", "kind" : "def"}, {"label" : "<+>", "tail" : "(mixin: ⇒ ProbabilityDistribution[A], weight: Double): Mixin[A]", "member" : "provingground.ProbabilityDistribution.<+>", "link" : "provingground\/ProbabilityDistribution.html#<+>(mixin:=>provingground.ProbabilityDistribution[A],weight:Double):provingground.ProbabilityDistribution.Mixin[A]", "kind" : "def"}, {"label" : "<++>", "tail" : "(components: ⇒ Vector[Weighted[ProbabilityDistribution[A]]]): Mixture[A]", "member" : "provingground.ProbabilityDistribution.<++>", "link" : "provingground\/ProbabilityDistribution.html#<++>(components:=>Vector[provingground.Weighted[provingground.ProbabilityDistribution[A]]]):provingground.ProbabilityDistribution.Mixture[A]", "kind" : "def"}, {"label" : "findFut", "tail" : "(p: (A) ⇒ Boolean, maxloops: Long): Future[Option[A]]", "member" : "provingground.ProbabilityDistribution.findFut", "link" : "provingground\/ProbabilityDistribution.html#findFut(p:A=>Boolean,maxloops:Long):scala.concurrent.Future[Option[A]]", "kind" : "def"}, {"label" : "randomVariable", "tail" : "(): Iterator[A]", "member" : "provingground.ProbabilityDistribution.randomVariable", "link" : "provingground\/ProbabilityDistribution.html#randomVariable:Iterator[A]", "kind" : "def"}, {"label" : "fibProduct", "tail" : "(quot: (A) ⇒ Q, fibers: (Q) ⇒ ProbabilityDistribution[B]): FiberProduct[A, Q, B]", "member" : "provingground.ProbabilityDistribution.fibProduct", "link" : "provingground\/ProbabilityDistribution.html#fibProduct[Q,B](quot:A=>Q,fibers:Q=>provingground.ProbabilityDistribution[B]):provingground.ProbabilityDistribution.FiberProduct[A,Q,B]", "kind" : "def"}, {"label" : "product", "tail" : "(that: ProbabilityDistribution[B]): Product[A, B]", "member" : "provingground.ProbabilityDistribution.product", "link" : "provingground\/ProbabilityDistribution.html#product[B](that:provingground.ProbabilityDistribution[B]):provingground.ProbabilityDistribution.Product[A,B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (A) ⇒ ProbabilityDistribution[B]): ProbabilityDistribution[B]", "member" : "provingground.ProbabilityDistribution.flatMap", "link" : "provingground\/ProbabilityDistribution.html#flatMap[B](f:A=>provingground.ProbabilityDistribution[B]):provingground.ProbabilityDistribution[B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (A) ⇒ B): ProbabilityDistribution[B]", "member" : "provingground.ProbabilityDistribution.map", "link" : "provingground\/ProbabilityDistribution.html#map[B](f:A=>B):provingground.ProbabilityDistribution[B]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "provingground\/ProbabilityDistribution.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/ProbabilityDistribution.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/ProbabilityDistribution.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "provingground\/ProbabilityDistribution.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.Any.hashCode", "link" : "provingground\/ProbabilityDistribution.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.equals", "link" : "provingground\/ProbabilityDistribution.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "provingground\/ProbabilityDistribution.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "provingground\/ProbabilityDistribution.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "next", "tail" : "(): A", "member" : "provingground.ProbabilityDistribution.next", "link" : "provingground\/ProbabilityDistribution.html#next:A", "kind" : "abstract def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.Any.getClass", "link" : "provingground\/ProbabilityDistribution.html#getClass():Class[_]", "kind" : "abstract def"}], "shortDescription" : "A probability distribution, from which we can pick values at random (the only abstract method).", "object" : "provingground\/ProbabilityDistribution$.html", "members_object" : [{"label" : "vs", "tail" : "(): VectorSpace[ProbabilityDistribution[T], Double]", "member" : "provingground.ProbabilityDistribution.vs", "link" : "provingground\/ProbabilityDistribution$.html#vs[T]:spire.algebra.VectorSpace[provingground.ProbabilityDistribution[T],Double]", "kind" : "implicit def"}, {"label" : "Flattened", "tail" : "", "member" : "provingground.ProbabilityDistribution.Flattened", "link" : "provingground\/ProbabilityDistribution$.html#Flattened[A]extendsProbabilityDistribution[A]withProductwithSerializable", "kind" : "case class"}, {"label" : "Sum", "tail" : "", "member" : "provingground.ProbabilityDistribution.Sum", "link" : "provingground\/ProbabilityDistribution$.html#Sum[A]extendsProbabilityDistribution[A]withProductwithSerializable", "kind" : "case class"}, {"label" : "Scaled", "tail" : "", "member" : "provingground.ProbabilityDistribution.Scaled", "link" : "provingground\/ProbabilityDistribution$.html#Scaled[A]extendsProbabilityDistribution[A]withProductwithSerializable", "kind" : "case class"}, {"label" : "CondMapped", "tail" : "", "member" : "provingground.ProbabilityDistribution.CondMapped", "link" : "provingground\/ProbabilityDistribution$.html#CondMapped[A,B]extendsProbabilityDistribution[B]withProductwithSerializable", "kind" : "case class"}, {"label" : "Conditioned", "tail" : "", "member" : "provingground.ProbabilityDistribution.Conditioned", "link" : "provingground\/ProbabilityDistribution$.html#Conditioned[A]extendsProbabilityDistribution[A]withProductwithSerializable", "kind" : "case class"}, {"label" : "Product", "tail" : "", "member" : "provingground.ProbabilityDistribution.Product", "link" : "provingground\/ProbabilityDistribution$.html#Product[A,B]extendsProbabilityDistribution[(A,B)]withProductwithSerializable", "kind" : "case class"}, {"label" : "FiberProduct", "tail" : "", "member" : "provingground.ProbabilityDistribution.FiberProduct", "link" : "provingground\/ProbabilityDistribution$.html#FiberProduct[A,Q,B]extendsProbabilityDistribution[(A,B)]withProductwithSerializable", "kind" : "case class"}, {"label" : "FlatMapped", "tail" : "", "member" : "provingground.ProbabilityDistribution.FlatMapped", "link" : "provingground\/ProbabilityDistribution$.html#FlatMapped[A,B]extendsProbabilityDistribution[B]withProductwithSerializable", "kind" : "case class"}, {"label" : "Mapped", "tail" : "", "member" : "provingground.ProbabilityDistribution.Mapped", "link" : "provingground\/ProbabilityDistribution$.html#Mapped[A,B]extendsProbabilityDistribution[B]withProductwithSerializable", "kind" : "case class"}, {"label" : "MixinOpt", "tail" : "", "member" : "provingground.ProbabilityDistribution.MixinOpt", "link" : "provingground\/ProbabilityDistribution$.html#MixinOpt[A]extendsProbabilityDistribution[A]", "kind" : "class"}, {"label" : "Mixin", "tail" : "", "member" : "provingground.ProbabilityDistribution.Mixin", "link" : "provingground\/ProbabilityDistribution$.html#Mixin[A]extendsProbabilityDistribution[A]", "kind" : "class"}, {"label" : "Mixture", "tail" : "", "member" : "provingground.ProbabilityDistribution.Mixture", "link" : "provingground\/ProbabilityDistribution$.html#Mixture[A]extendsProbabilityDistribution[A]", "kind" : "class"}, {"label" : "chooseOpt", "tail" : "(value: Double, pmf: Traversable[Weighted[A]]): Option[A]", "member" : "provingground.ProbabilityDistribution.chooseOpt", "link" : "provingground\/ProbabilityDistribution$.html#chooseOpt[A](value:Double,pmf:Traversable[provingground.Weighted[A]]):Option[A]", "kind" : "def"}, {"label" : "rand", "tail" : ": Random", "member" : "provingground.ProbabilityDistribution.rand", "link" : "provingground\/ProbabilityDistribution$.html#rand:scala.util.Random", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/ProbabilityDistribution$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/ProbabilityDistribution$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/ProbabilityDistribution$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/ProbabilityDistribution$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/ProbabilityDistribution$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/ProbabilityDistribution$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/ProbabilityDistribution$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/ProbabilityDistribution$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/ProbabilityDistribution$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/ProbabilityDistribution$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/ProbabilityDistribution$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/ProbabilityDistribution$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/ProbabilityDistribution$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/ProbabilityDistribution$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/ProbabilityDistribution$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/ProbabilityDistribution$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/ProbabilityDistribution$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/ProbabilityDistribution$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/ProbabilityDistribution$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/ProbabilityDistribution.html", "kind" : "trait"}, {"name" : "provingground.Weighted", "shortDescription" : "", "object" : "provingground\/Weighted$.html", "members_object" : [{"label" : "weights", "tail" : "(tws: (T, Double)*): Seq[Weighted[T]]", "member" : "provingground.Weighted.weights", "link" : "provingground\/Weighted$.html#weights[T](tws:(T,Double)*):Seq[provingground.Weighted[T]]", "kind" : "implicit def"}, {"label" : "combine", "tail" : "(seqs: Seq[Weighted[T]]*): Iterable[Weighted[T]]", "member" : "provingground.Weighted.combine", "link" : "provingground\/Weighted$.html#combine[T](seqs:Seq[provingground.Weighted[T]]*):scala.collection.immutable.Iterable[provingground.Weighted[T]]", "kind" : "def"}, {"label" : "flatten", "tail" : "(seq: Vector[Weighted[T]]): Iterable[Weighted[T]]", "member" : "provingground.Weighted.flatten", "link" : "provingground\/Weighted$.html#flatten[T](seq:Vector[provingground.Weighted[T]]):scala.collection.immutable.Iterable[provingground.Weighted[T]]", "kind" : "def"}, {"label" : "flatten", "tail" : "(seq: Seq[Weighted[T]]): Iterable[Weighted[T]]", "member" : "provingground.Weighted.flatten", "link" : "provingground\/Weighted$.html#flatten[T](seq:Seq[provingground.Weighted[T]]):scala.collection.immutable.Iterable[provingground.Weighted[T]]", "kind" : "def"}, {"label" : "sumWeigths", "tail" : "(seq: Seq[Weighted[T]]): Double", "member" : "provingground.Weighted.sumWeigths", "link" : "provingground\/Weighted$.html#sumWeigths[T](seq:Seq[provingground.Weighted[T]]):Double", "kind" : "def"}, {"label" : "pick", "tail" : "(dist: Traversable[Weighted[T]], t: Double): T", "member" : "provingground.Weighted.pick", "link" : "provingground\/Weighted$.html#pick[T](dist:Traversable[provingground.Weighted[T]],t:Double):T", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/Weighted$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/Weighted$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/Weighted$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/Weighted$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/Weighted$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/Weighted$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/Weighted$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/Weighted$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/Weighted$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/Weighted$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/Weighted$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/Weighted$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/Weighted$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/Weighted$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/Weighted$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/Weighted$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/Weighted$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/Weighted$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/Weighted$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/Weighted.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/Weighted.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Weighted[T]) ⇒ Boolean, msg: ⇒ Any): Weighted[T]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/Weighted.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Weighted[T]) ⇒ Boolean): Weighted[T]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/Weighted.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Weighted[T]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/Weighted.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Weighted[T]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/Weighted.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Weighted[T], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/Weighted.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Weighted[T], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/Weighted.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "map", "tail" : "(f: (T) ⇒ S): Weighted[S]", "member" : "provingground.Weighted.map", "link" : "provingground\/Weighted.html#map[S](f:T=>S):provingground.Weighted[S]", "kind" : "def"}, {"label" : "scale", "tail" : "(s: Double): Weighted[T]", "member" : "provingground.Weighted.scale", "link" : "provingground\/Weighted.html#scale(s:Double):provingground.Weighted[T]", "kind" : "def"}, {"member" : "provingground.Weighted#<init>", "error" : "unsupported entity"}, {"label" : "weight", "tail" : ": Double", "member" : "provingground.Weighted.weight", "link" : "provingground\/Weighted.html#weight:Double", "kind" : "val"}, {"label" : "elem", "tail" : ": T", "member" : "provingground.Weighted.elem", "link" : "provingground\/Weighted.html#elem:T", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/Weighted.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/Weighted.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/Weighted.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/Weighted.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/Weighted.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/Weighted.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/Weighted.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/Weighted.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/Weighted.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/Weighted.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/Weighted.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/Weighted.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/Weighted.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/Weighted.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/Weighted.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/Weighted.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/Weighted.html", "kind" : "case class"}], "provingground.functionfinder" : [{"name" : "provingground.functionfinder.BigOps", "shortDescription" : "", "object" : "provingground\/functionfinder\/BigOps$.html", "members_object" : [{"label" : "BigSum", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Term with Subs[Term], FuncLike[Func[Term, Term] with Subs[Func[Term, Term]], Func[Func[Term, Func[Term, Term]], Term]]]]", "member" : "provingground.functionfinder.BigOps.BigSum", "link" : "provingground\/functionfinder\/BigOps$.html#BigSum:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]],provingground.HoTT.Func[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]],provingground.HoTT.Term]]]]", "kind" : "val"}, {"label" : "en", "tail" : ": Term with Subs[Term]", "member" : "provingground.functionfinder.BigOps.en", "link" : "provingground\/functionfinder\/BigOps$.html#en:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "f", "tail" : ": Func[Term, Term] with Subs[Func[Term, Term]]", "member" : "provingground.functionfinder.BigOps.f", "link" : "provingground\/functionfinder\/BigOps$.html#f:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "A", "tail" : ": Typ[Term] with Subs[Typ[Term]]", "member" : "provingground.functionfinder.BigOps.A", "link" : "provingground\/functionfinder\/BigOps$.html#A:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/functionfinder\/BigOps$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/functionfinder\/BigOps$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/functionfinder\/BigOps$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/functionfinder\/BigOps$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/functionfinder\/BigOps$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/functionfinder\/BigOps$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/functionfinder\/BigOps$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/BigOps$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/BigOps$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/BigOps$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/functionfinder\/BigOps$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/functionfinder\/BigOps$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/functionfinder\/BigOps$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/functionfinder\/BigOps$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/functionfinder\/BigOps$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/functionfinder\/BigOps$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/functionfinder\/BigOps$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/functionfinder\/BigOps$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/functionfinder\/BigOps$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.functionfinder.Bool", "shortDescription" : "", "object" : "provingground\/functionfinder\/Bool$.html", "members_object" : [{"label" : "Elem", "tail" : "", "member" : "provingground.HoTT.Typ.Elem", "link" : "provingground\/HoTT$$Typ.html#Elem", "kind" : "object"}, {"label" : "isTrue", "tail" : ": Func[RepTerm[Boolean], Typ[Term]]", "member" : "provingground.functionfinder.Bool.isTrue", "link" : "provingground\/functionfinder\/Bool$.html#isTrue:provingground.HoTT.Func[provingground.functionfinder.RepTerm[Boolean],provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "ifThenElse", "tail" : "(pos: X, neg: X)(xrep: ScalaRep[U, X]): Func[RepTerm[Boolean], U]", "member" : "provingground.functionfinder.Bool.ifThenElse", "link" : "provingground\/functionfinder\/Bool$.html#ifThenElse[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],X](pos:X,neg:X)(implicitxrep:provingground.functionfinder.ScalaRep[U,X]):provingground.HoTT.Func[provingground.functionfinder.RepTerm[Boolean],U]", "kind" : "def"}, {"label" : "or", "tail" : ": Func[RepTerm[Boolean], Func[RepTerm[Boolean], RepTerm[Boolean]]]", "member" : "provingground.functionfinder.Bool.or", "link" : "provingground\/functionfinder\/Bool$.html#or:provingground.HoTT.Func[provingground.functionfinder.RepTerm[Boolean],provingground.HoTT.Func[provingground.functionfinder.RepTerm[Boolean],provingground.functionfinder.RepTerm[Boolean]]]", "kind" : "val"}, {"label" : "and", "tail" : ": Func[RepTerm[Boolean], Func[RepTerm[Boolean], RepTerm[Boolean]]]", "member" : "provingground.functionfinder.Bool.and", "link" : "provingground\/functionfinder\/Bool$.html#and:provingground.HoTT.Func[provingground.functionfinder.RepTerm[Boolean],provingground.HoTT.Func[provingground.functionfinder.RepTerm[Boolean],provingground.functionfinder.RepTerm[Boolean]]]", "kind" : "val"}, {"label" : "not", "tail" : ": Func[RepTerm[Boolean], RepTerm[Boolean]]", "member" : "provingground.functionfinder.Bool.not", "link" : "provingground\/functionfinder\/Bool$.html#not:provingground.HoTT.Func[provingground.functionfinder.RepTerm[Boolean],provingground.functionfinder.RepTerm[Boolean]]", "kind" : "val"}, {"label" : "rep", "tail" : ": ScalaRep[RepTerm[Boolean], Boolean]", "member" : "provingground.functionfinder.ScalaTyp.rep", "link" : "provingground\/functionfinder\/Bool$.html#rep:provingground.functionfinder.ScalaRep[provingground.functionfinder.RepTerm[A],A]", "kind" : "implicit val"}, {"label" : "subs", "tail" : "(x: Term, y: Term): Typ[RepTerm[Boolean]] with Subs[Typ[RepTerm[Boolean]]]", "member" : "provingground.functionfinder.ScalaTyp.subs", "link" : "provingground\/functionfinder\/Bool$.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.HoTT.Typ[provingground.functionfinder.RepTerm[A]]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.functionfinder.RepTerm[A]]]", "kind" : "def"}, {"label" : "newobj", "tail" : "(): Nothing", "member" : "provingground.functionfinder.ScalaTyp.newobj", "link" : "provingground\/functionfinder\/Bool$.html#newobj:Nothing", "kind" : "def"}, {"label" : "variable", "tail" : "(name: AnySym): RepTerm[Boolean]", "member" : "provingground.functionfinder.ScalaTyp.variable", "link" : "provingground\/functionfinder\/Bool$.html#variable(name:provingground.HoTT.AnySym):provingground.functionfinder.RepTerm[A]", "kind" : "def"}, {"label" : "typ", "tail" : ": ScalaTypUniv[Boolean]", "member" : "provingground.functionfinder.ScalaTyp.typ", "link" : "provingground\/functionfinder\/Bool$.html#typ:provingground.functionfinder.ScalaTypUniv[A]", "kind" : "val"}, {"label" : "Obj", "tail" : "", "member" : "provingground.functionfinder.ScalaTyp.Obj", "link" : "provingground\/functionfinder\/Bool$.html#Obj=provingground.functionfinder.RepTerm[A]", "kind" : "type"}, {"label" : "++", "tail" : "(those: V): SigmaTyp[UU, VV]", "member" : "provingground.HoTT.Typ.++", "link" : "provingground\/functionfinder\/Bool$.html#++[UU>:provingground.HoTT.Typ[U]<:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[UU],VV<:provingground.HoTT.Termwithprovingground.HoTT.Subs[VV],V<:provingground.HoTT.Typ[VV]withprovingground.HoTT.Subs[V]](those:V):provingground.HoTT.SigmaTyp[UU,VV]", "kind" : "def"}, {"label" : "||", "tail" : "(that: Typ[V]): PlusTyp[UU, V]", "member" : "provingground.HoTT.Typ.||", "link" : "provingground\/functionfinder\/Bool$.html#||[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](that:provingground.HoTT.Typ[V]):provingground.HoTT.PlusTyp[UU,V]", "kind" : "def"}, {"label" : "&&", "tail" : "(that: Typ[V]): ProdTyp[UU, V]", "member" : "provingground.HoTT.Typ.&&", "link" : "provingground\/functionfinder\/Bool$.html#&&[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](that:provingground.HoTT.Typ[V]):provingground.HoTT.ProdTyp[UU,V]", "kind" : "def"}, {"label" : "~>:", "tail" : "(variable: V): GenFuncTyp[V, UU]", "member" : "provingground.HoTT.Typ.~>:", "link" : "provingground\/functionfinder\/Bool$.html#~>:[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](variable:V):provingground.HoTT.GenFuncTyp[V,UU]", "kind" : "def"}, {"label" : "->:", "tail" : "(that: Typ[W]): FuncTyp[W, UU]", "member" : "provingground.HoTT.Typ.->:", "link" : "provingground\/functionfinder\/Bool$.html#->:[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU]](that:provingground.HoTT.Typ[W]):provingground.HoTT.FuncTyp[W,UU]", "kind" : "def"}, {"label" : "typedVar", "tail" : "(): TypedTerm[RepTerm[Boolean]]", "member" : "provingground.HoTT.Typ.typedVar", "link" : "provingground\/functionfinder\/Bool$.html#typedVar:provingground.HoTT.TypedTerm[U]", "kind" : "def"}, {"label" : "Var", "tail" : "(): RepTerm[Boolean] with Subs[RepTerm[Boolean]]", "member" : "provingground.HoTT.Typ.Var", "link" : "provingground\/functionfinder\/Bool$.html#Var:Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "::", "tail" : "(name: String): RepTerm[Boolean] with Subs[RepTerm[Boolean]]", "member" : "provingground.HoTT.Typ.::", "link" : "provingground\/functionfinder\/Bool$.html#::(name:String):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "typedVar", "tail" : "(name: AnySym): TypedTerm[RepTerm[Boolean]]", "member" : "provingground.HoTT.Typ.typedVar", "link" : "provingground\/functionfinder\/Bool$.html#typedVar(name:provingground.HoTT.AnySym):provingground.HoTT.TypedTerm[U]", "kind" : "def"}, {"label" : "symbObj", "tail" : "(name: AnySym): RepTerm[Boolean] with Subs[RepTerm[Boolean]]", "member" : "provingground.HoTT.Typ.symbObj", "link" : "provingground\/functionfinder\/Bool$.html#symbObj(name:provingground.HoTT.AnySym):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "typlevel", "tail" : ": Int", "member" : "provingground.HoTT.Typ.typlevel", "link" : "provingground\/functionfinder\/Bool$.html#typlevel:Int", "kind" : "lazy val"}, {"label" : "typed", "tail" : ": TypedTerm[Typ[Term]]", "member" : "provingground.HoTT.Typ.typed", "link" : "provingground\/functionfinder\/Bool$.html#typed:provingground.HoTT.TypedTerm[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "!:", "tail" : "(term: Term): RepTerm[Boolean]", "member" : "provingground.HoTT.Typ.!:", "link" : "provingground\/functionfinder\/Bool$.html#!:(term:provingground.HoTT.Term):U", "kind" : "def"}, {"label" : "obj", "tail" : "(): RepTerm[Boolean]", "member" : "provingground.HoTT.Typ.obj", "link" : "provingground\/functionfinder\/Bool$.html#obj:U", "kind" : "def"}, {"label" : "usesVar", "tail" : "(t: Term): Boolean", "member" : "provingground.HoTT.Term.usesVar", "link" : "provingground\/functionfinder\/Bool$.html#usesVar(t:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "indepOf", "tail" : "(that: Term): Boolean", "member" : "provingground.HoTT.Term.indepOf", "link" : "provingground\/functionfinder\/Bool$.html#indepOf(that:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "dependsOn", "tail" : "(that: Term): Boolean", "member" : "provingground.HoTT.Term.dependsOn", "link" : "provingground\/functionfinder\/Bool$.html#dependsOn(that:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "replace", "tail" : "(x: Term, y: Term): Typ[RepTerm[Boolean]] with Subs[Typ[RepTerm[Boolean]]]", "member" : "provingground.HoTT.Subs.replace", "link" : "provingground\/functionfinder\/Bool$.html#replace(x:provingground.HoTT.Term,y:provingground.HoTT.Term):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/functionfinder\/Bool$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/functionfinder\/Bool$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/functionfinder\/Bool$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/functionfinder\/Bool$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/functionfinder\/Bool$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/functionfinder\/Bool$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/functionfinder\/Bool$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/Bool$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/Bool$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/Bool$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/functionfinder\/Bool$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/functionfinder\/Bool$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/functionfinder\/Bool$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/functionfinder\/Bool$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/functionfinder\/Bool$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/functionfinder\/Bool$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/functionfinder\/Bool$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/functionfinder\/Bool$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/functionfinder\/Bool$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.functionfinder.BoolType", "shortDescription" : "", "object" : "provingground\/functionfinder\/BoolType$.html", "members_object" : [{"label" : "itedep", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Term with Subs[Term], Term]]]", "member" : "provingground.functionfinder.BoolType.itedep", "link" : "provingground\/functionfinder\/BoolType$.html#itedep:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]]]", "kind" : "lazy val"}, {"label" : "iteDepFunc", "tail" : "(u: Typ[Term], v: Typ[Term]): FuncLike[Term with Subs[Term], Term]", "member" : "provingground.functionfinder.BoolType.iteDepFunc", "link" : "provingground\/functionfinder\/BoolType$.html#iteDepFunc(u:provingground.HoTT.Typ[provingground.HoTT.Term],v:provingground.HoTT.Typ[provingground.HoTT.Term]):provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]", "kind" : "def"}, {"label" : "ite", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], Func[Term, Func[Term, Func[Term, Term]]]]", "member" : "provingground.functionfinder.BoolType.ite", "link" : "provingground\/functionfinder\/BoolType$.html#ite:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]]", "kind" : "lazy val"}, {"label" : "iteFunc", "tail" : "(u: Typ[U]): Func[Term, Func[U, Func[U, U]]]", "member" : "provingground.functionfinder.BoolType.iteFunc", "link" : "provingground\/functionfinder\/BoolType$.html#iteFunc[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](u:provingground.HoTT.Typ[U]):provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[U,provingground.HoTT.Func[U,U]]]", "kind" : "def"}, {"label" : "yes", "tail" : "", "member" : "provingground.functionfinder.BoolType.yes", "link" : "provingground\/functionfinder\/BoolType$.html#yes", "kind" : "object"}, {"label" : "isTrueTyp", "tail" : "", "member" : "provingground.functionfinder.BoolType.isTrueTyp", "link" : "provingground\/functionfinder\/BoolType$.html#isTrueTypextendsHoTT.SmallTypwithProductwithSerializable", "kind" : "case class"}, {"label" : "isTrue", "tail" : ": Func[Term, Typ[Term]]", "member" : "provingground.functionfinder.BoolType.isTrue", "link" : "provingground\/functionfinder\/BoolType$.html#isTrue:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "boolFmly", "tail" : ": FuncRep[Term, Boolean, Typ[Term], Typ[Term]]", "member" : "provingground.functionfinder.BoolType.boolFmly", "link" : "provingground\/functionfinder\/BoolType$.html#boolFmly:provingground.functionfinder.ScalaRep.FuncRep[provingground.HoTT.Term,Boolean,provingground.HoTT.Typ[provingground.HoTT.Term],provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "or", "tail" : ": Func[Term, Func[Term, Term]]", "member" : "provingground.functionfinder.BoolType.or", "link" : "provingground\/functionfinder\/BoolType$.html#or:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "and", "tail" : ": Func[Term, Func[Term, Term]]", "member" : "provingground.functionfinder.BoolType.and", "link" : "provingground\/functionfinder\/BoolType$.html#and:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "not", "tail" : ": Func[Term, Term]", "member" : "provingground.functionfinder.BoolType.not", "link" : "provingground\/functionfinder\/BoolType$.html#not:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]", "kind" : "lazy val"}, {"label" : "boolrep", "tail" : ": SimpleRep[Term, Boolean]", "member" : "provingground.functionfinder.BoolType.boolrep", "link" : "provingground\/functionfinder\/BoolType$.html#boolrep:provingground.functionfinder.ScalaRep.SimpleRep[provingground.HoTT.Term,Boolean]", "kind" : "lazy val"}, {"label" : "Bool", "tail" : "", "member" : "provingground.functionfinder.BoolType.Bool", "link" : "provingground\/functionfinder\/BoolType$.html#Bool", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/functionfinder\/BoolType$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/functionfinder\/BoolType$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/functionfinder\/BoolType$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/functionfinder\/BoolType$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/functionfinder\/BoolType$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/functionfinder\/BoolType$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/functionfinder\/BoolType$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/BoolType$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/BoolType$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/BoolType$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/functionfinder\/BoolType$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/functionfinder\/BoolType$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/functionfinder\/BoolType$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/functionfinder\/BoolType$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/functionfinder\/BoolType$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/functionfinder\/BoolType$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/functionfinder\/BoolType$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/functionfinder\/BoolType$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/functionfinder\/BoolType$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.functionfinder.EnumFin", "shortDescription" : "", "object" : "provingground\/functionfinder\/EnumFin$.html", "members_object" : [{"label" : "enumFin", "tail" : ": FuncLike[Term with Subs[Term], Term]", "member" : "provingground.functionfinder.EnumFin.enumFin", "link" : "provingground\/functionfinder\/EnumFin$.html#enumFin:provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]", "kind" : "val"}, {"label" : "enumFinFn", "tail" : "(n: Long): EnumTerm[Term]", "member" : "provingground.functionfinder.EnumFin.enumFinFn", "link" : "provingground\/functionfinder\/EnumFin$.html#enumFinFn(n:Long):provingground.functionfinder.EnumType.EnumTerm[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "enumFinList", "tail" : "(n: Long): List[Term with Subs[Term]]", "member" : "provingground.functionfinder.EnumFin.enumFinList", "link" : "provingground\/functionfinder\/EnumFin$.html#enumFinList(n:Long):List[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/functionfinder\/EnumFin$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/functionfinder\/EnumFin$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/functionfinder\/EnumFin$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/functionfinder\/EnumFin$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/functionfinder\/EnumFin$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/functionfinder\/EnumFin$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/functionfinder\/EnumFin$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/EnumFin$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/EnumFin$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/EnumFin$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/functionfinder\/EnumFin$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/functionfinder\/EnumFin$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/functionfinder\/EnumFin$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/functionfinder\/EnumFin$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/functionfinder\/EnumFin$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/functionfinder\/EnumFin$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/functionfinder\/EnumFin$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/functionfinder\/EnumFin$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/functionfinder\/EnumFin$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.functionfinder.EnumFuncs", "shortDescription" : "", "object" : "provingground\/functionfinder\/EnumFuncs$.html", "members_object" : [{"label" : "enumSec", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Func[Term, Typ[Term]] with Subs[Func[Term, Typ[Term]]], Func[Term, Func[FuncLike[Term with Subs[Term], Term], Term]]]]", "member" : "provingground.functionfinder.EnumFuncs.enumSec", "link" : "provingground\/functionfinder\/EnumFuncs$.html#enumSec:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term],provingground.HoTT.Term]]]]", "kind" : "val"}, {"label" : "EnumSec", "tail" : "(dom: Typ[U], codoms: (U) ⇒ Typ[V])(su: ScalaUniv[U], sv: ScalaUniv[V]): Func[Term, Func[FuncLike[U with Subs[U], Term], Term]]", "member" : "provingground.functionfinder.EnumFuncs.EnumSec", "link" : "provingground\/functionfinder\/EnumFuncs$.html#EnumSec[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](dom:provingground.HoTT.Typ[U],codoms:U=>provingground.HoTT.Typ[V])(implicitsu:provingground.functionfinder.ScalaUniv[U],implicitsv:provingground.functionfinder.ScalaUniv[V]):provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.FuncLike[Uwithprovingground.HoTT.Subs[U],provingground.HoTT.Term],provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "allSec", "tail" : "(domenum: EnumTerm[U])(codomenums: (U) ⇒ EnumTerm[V])(sv: ScalaUniv[V]): EnumTerm[FuncLike[U, V]]", "member" : "provingground.functionfinder.EnumFuncs.allSec", "link" : "provingground\/functionfinder\/EnumFuncs$.html#allSec[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](domenum:provingground.functionfinder.EnumType.EnumTerm[U])(codomenums:U=>provingground.functionfinder.EnumType.EnumTerm[V])(implicitsv:provingground.functionfinder.ScalaUniv[V]):provingground.functionfinder.EnumType.EnumTerm[provingground.HoTT.FuncLike[U,V]]", "kind" : "def"}, {"label" : "enumFn", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Typ[Term] with Subs[Typ[Term]], Func[Term, Func[Term, Term]]]]", "member" : "provingground.functionfinder.EnumFuncs.enumFn", "link" : "provingground\/functionfinder\/EnumFuncs$.html#enumFn:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]]", "kind" : "val"}, {"label" : "EnumFunc", "tail" : "(dom: Typ[U], codom: Typ[V]): Func[Term, Func[Term, Term]]", "member" : "provingground.functionfinder.EnumFuncs.EnumFunc", "link" : "provingground\/functionfinder\/EnumFuncs$.html#EnumFunc[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](dom:provingground.HoTT.Typ[U],codom:provingground.HoTT.Typ[V]):provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "allFunc", "tail" : "(domenum: EnumTerm[U])(codomenum: EnumTerm[V]): EnumTerm[Func[U, V]]", "member" : "provingground.functionfinder.EnumFuncs.allFunc", "link" : "provingground\/functionfinder\/EnumFuncs$.html#allFunc[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](domenum:provingground.functionfinder.EnumType.EnumTerm[U])(codomenum:provingground.functionfinder.EnumType.EnumTerm[V]):provingground.functionfinder.EnumType.EnumTerm[provingground.HoTT.Func[U,V]]", "kind" : "def"}, {"label" : "allPairs", "tail" : "(dom: List[U], cods: (U) ⇒ Option[List[V]]): Option[List[AbsPair[U, V]]]", "member" : "provingground.functionfinder.EnumFuncs.allPairs", "link" : "provingground\/functionfinder\/EnumFuncs$.html#allPairs[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](dom:List[U],cods:U=>Option[List[V]]):Option[List[provingground.HoTT.AbsPair[U,V]]]", "kind" : "def"}, {"label" : "pairs", "tail" : "(first: List[U], second: List[V]): List[PairTerm[U, V]]", "member" : "provingground.functionfinder.EnumFuncs.pairs", "link" : "provingground\/functionfinder\/EnumFuncs$.html#pairs[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](first:List[U],second:List[V]):List[provingground.HoTT.PairTerm[U,V]]", "kind" : "def"}, {"label" : "allSecMapsOpt", "tail" : "(dom: List[U], codoms: (U) ⇒ Option[List[V]]): Option[List[Map[U, V]]]", "member" : "provingground.functionfinder.EnumFuncs.allSecMapsOpt", "link" : "provingground\/functionfinder\/EnumFuncs$.html#allSecMapsOpt[U,V](dom:List[U],codoms:U=>Option[List[V]]):Option[List[Map[U,V]]]", "kind" : "def"}, {"label" : "allSecMaps", "tail" : "(dom: List[U], codoms: (U) ⇒ List[V]): List[Map[U, V]]", "member" : "provingground.functionfinder.EnumFuncs.allSecMaps", "link" : "provingground\/functionfinder\/EnumFuncs$.html#allSecMaps[U,V](dom:List[U],codoms:U=>List[V]):List[Map[U,V]]", "kind" : "def"}, {"label" : "allMaps", "tail" : "(dom: List[U], codom: List[V]): List[Map[U, V]]", "member" : "provingground.functionfinder.EnumFuncs.allMaps", "link" : "provingground\/functionfinder\/EnumFuncs$.html#allMaps[U,V](dom:List[U],codom:List[V]):List[Map[U,V]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/functionfinder\/EnumFuncs$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/functionfinder\/EnumFuncs$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/functionfinder\/EnumFuncs$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/functionfinder\/EnumFuncs$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/functionfinder\/EnumFuncs$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/functionfinder\/EnumFuncs$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/functionfinder\/EnumFuncs$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/EnumFuncs$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/EnumFuncs$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/EnumFuncs$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/functionfinder\/EnumFuncs$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/functionfinder\/EnumFuncs$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/functionfinder\/EnumFuncs$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/functionfinder\/EnumFuncs$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/functionfinder\/EnumFuncs$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/functionfinder\/EnumFuncs$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/functionfinder\/EnumFuncs$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/functionfinder\/EnumFuncs$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/functionfinder\/EnumFuncs$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.functionfinder.EnumType", "shortDescription" : "", "object" : "provingground\/functionfinder\/EnumType$.html", "members_object" : [{"label" : "enumlist", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], Func[Term, Term]]", "member" : "provingground.functionfinder.EnumType.enumlist", "link" : "provingground\/functionfinder\/EnumType$.html#enumlist:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "enumList", "tail" : "(elemTyp: Typ[U]): Func[Term, Term]", "member" : "provingground.functionfinder.EnumType.enumList", "link" : "provingground\/functionfinder\/EnumType$.html#enumList[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](elemTyp:provingground.HoTT.Typ[U]):provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]", "kind" : "def"}, {"label" : "EnumRep", "tail" : "", "member" : "provingground.functionfinder.EnumType.EnumRep", "link" : "provingground\/functionfinder\/EnumType$.html#EnumRep[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsScalaRep[provingground.HoTT.Term,provingground.functionfinder.EnumType.EnumTerm[U]]withProductwithSerializable", "kind" : "case class"}, {"label" : "EnumTerm", "tail" : "", "member" : "provingground.functionfinder.EnumType.EnumTerm", "link" : "provingground\/functionfinder\/EnumType$.html#EnumTerm[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsScalaRep.ConstTerm[List[U]]withProductwithSerializable", "kind" : "case class"}, {"label" : "EnumTyp", "tail" : "", "member" : "provingground.functionfinder.EnumType.EnumTyp", "link" : "provingground\/functionfinder\/EnumType$.html#EnumTyp[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsHoTT.SmallTypwithProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/functionfinder\/EnumType$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/functionfinder\/EnumType$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/functionfinder\/EnumType$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/functionfinder\/EnumType$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/functionfinder\/EnumType$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/functionfinder\/EnumType$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/functionfinder\/EnumType$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/EnumType$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/EnumType$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/EnumType$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/functionfinder\/EnumType$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/functionfinder\/EnumType$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/functionfinder\/EnumType$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/functionfinder\/EnumType$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/functionfinder\/EnumType$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/functionfinder\/EnumType$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/functionfinder\/EnumType$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/functionfinder\/EnumType$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/functionfinder\/EnumType$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.functionfinder.FunctionFeedback", "shortDescription" : "", "object" : "provingground\/functionfinder\/FunctionFeedback$.html", "members_object" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/functionfinder\/FunctionFeedback$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/functionfinder\/FunctionFeedback$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/functionfinder\/FunctionFeedback$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/functionfinder\/FunctionFeedback$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/functionfinder\/FunctionFeedback$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/functionfinder\/FunctionFeedback$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/functionfinder\/FunctionFeedback$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/FunctionFeedback$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/FunctionFeedback$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/FunctionFeedback$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/functionfinder\/FunctionFeedback$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/functionfinder\/FunctionFeedback$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/functionfinder\/FunctionFeedback$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/functionfinder\/FunctionFeedback$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/functionfinder\/FunctionFeedback$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/functionfinder\/FunctionFeedback$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/functionfinder\/FunctionFeedback$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/functionfinder\/FunctionFeedback$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/functionfinder\/FunctionFeedback$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.functionfinder.IndexedVecTyp", "shortDescription" : "", "object" : "provingground\/functionfinder\/IndexedVecTyp$.html", "members_object" : [{"label" : "n", "tail" : ": RepTerm[SafeLong] with Subs[RepTerm[SafeLong]]", "member" : "provingground.functionfinder.IndexedVecTyp.n", "link" : "provingground\/functionfinder\/IndexedVecTyp$.html#n:provingground.functionfinder.RepTerm[spire.math.SafeLong]withprovingground.HoTT.Subs[provingground.functionfinder.RepTerm[spire.math.SafeLong]]", "kind" : "val"}, {"label" : "vecRep", "tail" : "(baserep: ScalaPolyRep[U, X]): ScalaPolyRep[RepTerm[Vector[X]], Vector[X]]", "member" : "provingground.functionfinder.IndexedVecTyp.vecRep", "link" : "provingground\/functionfinder\/IndexedVecTyp$.html#vecRep[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],X](implicitbaserep:provingground.functionfinder.ScalaPolyRep[U,X]):provingground.functionfinder.ScalaPolyRep[provingground.functionfinder.RepTerm[Vector[X]],Vector[X]]", "kind" : "implicit def"}, {"label" : "VecPolyRep", "tail" : "", "member" : "provingground.functionfinder.IndexedVecTyp.VecPolyRep", "link" : "provingground\/functionfinder\/IndexedVecTyp$.html#VecPolyRep[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],X]extendsScalaPolyRep[provingground.functionfinder.RepTerm[Vector[X]],Vector[X]]withProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/functionfinder\/IndexedVecTyp$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/functionfinder\/IndexedVecTyp$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/functionfinder\/IndexedVecTyp$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/functionfinder\/IndexedVecTyp$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/functionfinder\/IndexedVecTyp$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/functionfinder\/IndexedVecTyp$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/functionfinder\/IndexedVecTyp$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/IndexedVecTyp$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/IndexedVecTyp$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/IndexedVecTyp$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/functionfinder\/IndexedVecTyp$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/functionfinder\/IndexedVecTyp$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/functionfinder\/IndexedVecTyp$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/functionfinder\/IndexedVecTyp$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/functionfinder\/IndexedVecTyp$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/functionfinder\/IndexedVecTyp$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/functionfinder\/IndexedVecTyp$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/functionfinder\/IndexedVecTyp$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/functionfinder\/IndexedVecTyp$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "toParArray", "tail" : "(): ParArray[T]", "member" : "scala.collection.parallel.CollectionsHaveToParArray.toParArray", "link" : "provingground\/functionfinder\/IndexedVecTyp.html#toParArray:scala.collection.parallel.mutable.ParArray[T]", "kind" : "def"}, {"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/functionfinder\/IndexedVecTyp.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/functionfinder\/IndexedVecTyp.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (IndexedVecTyp[X, U]) ⇒ Boolean, msg: ⇒ Any): IndexedVecTyp[X, U]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/functionfinder\/IndexedVecTyp.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (IndexedVecTyp[X, U]) ⇒ Boolean): IndexedVecTyp[X, U]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/functionfinder\/IndexedVecTyp.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): IndexedVecTyp[X, U]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/functionfinder\/IndexedVecTyp.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): IndexedVecTyp[X, U]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/functionfinder\/IndexedVecTyp.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (IndexedVecTyp[X, U], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/functionfinder\/IndexedVecTyp.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (IndexedVecTyp[X, U], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/functionfinder\/IndexedVecTyp.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "Elem", "tail" : "", "member" : "provingground.HoTT.Typ.Elem", "link" : "provingground\/HoTT$$Typ.html#Elem", "kind" : "object"}, {"label" : "subs", "tail" : "(x: Term, y: Term): Typ[RepTerm[Vector[X]]] with Subs[Typ[RepTerm[Vector[X]]]]", "member" : "provingground.functionfinder.IndexedVecTyp.subs", "link" : "provingground\/functionfinder\/IndexedVecTyp.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.HoTT.Typ[provingground.functionfinder.RepTerm[Vector[X]]]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.functionfinder.RepTerm[Vector[X]]]]", "kind" : "def"}, {"label" : "newobj", "tail" : "(): Nothing", "member" : "provingground.functionfinder.IndexedVecTyp.newobj", "link" : "provingground\/functionfinder\/IndexedVecTyp.html#newobj:Nothing", "kind" : "def"}, {"label" : "variable", "tail" : "(name: AnySym): RepTerm[Vector[X]]", "member" : "provingground.functionfinder.IndexedVecTyp.variable", "link" : "provingground\/functionfinder\/IndexedVecTyp.html#variable(name:provingground.HoTT.AnySym):provingground.functionfinder.RepTerm[Vector[X]]", "kind" : "def"}, {"label" : "typ", "tail" : ": Universe", "member" : "provingground.functionfinder.IndexedVecTyp.typ", "link" : "provingground\/functionfinder\/IndexedVecTyp.html#typ:provingground.HoTT.Universe", "kind" : "val"}, {"label" : "Obj", "tail" : "", "member" : "provingground.functionfinder.IndexedVecTyp.Obj", "link" : "provingground\/functionfinder\/IndexedVecTyp.html#Obj=provingground.functionfinder.RepTerm[Vector[X]]", "kind" : "type"}, {"member" : "provingground.functionfinder.IndexedVecTyp#<init>", "error" : "unsupported entity"}, {"label" : "dim", "tail" : ": SafeLong", "member" : "provingground.functionfinder.IndexedVecTyp.dim", "link" : "provingground\/functionfinder\/IndexedVecTyp.html#dim:spire.math.SafeLong", "kind" : "val"}, {"label" : "basetyp", "tail" : ": Typ[U]", "member" : "provingground.functionfinder.IndexedVecTyp.basetyp", "link" : "provingground\/functionfinder\/IndexedVecTyp.html#basetyp:provingground.HoTT.Typ[U]", "kind" : "val"}, {"label" : "++", "tail" : "(those: V): SigmaTyp[UU, VV]", "member" : "provingground.HoTT.Typ.++", "link" : "provingground\/functionfinder\/IndexedVecTyp.html#++[UU>:provingground.HoTT.Typ[U]<:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[UU],VV<:provingground.HoTT.Termwithprovingground.HoTT.Subs[VV],V<:provingground.HoTT.Typ[VV]withprovingground.HoTT.Subs[V]](those:V):provingground.HoTT.SigmaTyp[UU,VV]", "kind" : "def"}, {"label" : "||", "tail" : "(that: Typ[V]): PlusTyp[UU, V]", "member" : "provingground.HoTT.Typ.||", "link" : "provingground\/functionfinder\/IndexedVecTyp.html#||[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](that:provingground.HoTT.Typ[V]):provingground.HoTT.PlusTyp[UU,V]", "kind" : "def"}, {"label" : "&&", "tail" : "(that: Typ[V]): ProdTyp[UU, V]", "member" : "provingground.HoTT.Typ.&&", "link" : "provingground\/functionfinder\/IndexedVecTyp.html#&&[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](that:provingground.HoTT.Typ[V]):provingground.HoTT.ProdTyp[UU,V]", "kind" : "def"}, {"label" : "~>:", "tail" : "(variable: V): GenFuncTyp[V, UU]", "member" : "provingground.HoTT.Typ.~>:", "link" : "provingground\/functionfinder\/IndexedVecTyp.html#~>:[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](variable:V):provingground.HoTT.GenFuncTyp[V,UU]", "kind" : "def"}, {"label" : "->:", "tail" : "(that: Typ[W]): FuncTyp[W, UU]", "member" : "provingground.HoTT.Typ.->:", "link" : "provingground\/functionfinder\/IndexedVecTyp.html#->:[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU]](that:provingground.HoTT.Typ[W]):provingground.HoTT.FuncTyp[W,UU]", "kind" : "def"}, {"label" : "typedVar", "tail" : "(): TypedTerm[RepTerm[Vector[X]]]", "member" : "provingground.HoTT.Typ.typedVar", "link" : "provingground\/functionfinder\/IndexedVecTyp.html#typedVar:provingground.HoTT.TypedTerm[U]", "kind" : "def"}, {"label" : "Var", "tail" : "(): RepTerm[Vector[X]] with Subs[RepTerm[Vector[X]]]", "member" : "provingground.HoTT.Typ.Var", "link" : "provingground\/functionfinder\/IndexedVecTyp.html#Var:Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "::", "tail" : "(name: String): RepTerm[Vector[X]] with Subs[RepTerm[Vector[X]]]", "member" : "provingground.HoTT.Typ.::", "link" : "provingground\/functionfinder\/IndexedVecTyp.html#::(name:String):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "typedVar", "tail" : "(name: AnySym): TypedTerm[RepTerm[Vector[X]]]", "member" : "provingground.HoTT.Typ.typedVar", "link" : "provingground\/functionfinder\/IndexedVecTyp.html#typedVar(name:provingground.HoTT.AnySym):provingground.HoTT.TypedTerm[U]", "kind" : "def"}, {"label" : "symbObj", "tail" : "(name: AnySym): RepTerm[Vector[X]] with Subs[RepTerm[Vector[X]]]", "member" : "provingground.HoTT.Typ.symbObj", "link" : "provingground\/functionfinder\/IndexedVecTyp.html#symbObj(name:provingground.HoTT.AnySym):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "typlevel", "tail" : ": Int", "member" : "provingground.HoTT.Typ.typlevel", "link" : "provingground\/functionfinder\/IndexedVecTyp.html#typlevel:Int", "kind" : "lazy val"}, {"label" : "typed", "tail" : ": TypedTerm[Typ[Term]]", "member" : "provingground.HoTT.Typ.typed", "link" : "provingground\/functionfinder\/IndexedVecTyp.html#typed:provingground.HoTT.TypedTerm[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "!:", "tail" : "(term: Term): RepTerm[Vector[X]]", "member" : "provingground.HoTT.Typ.!:", "link" : "provingground\/functionfinder\/IndexedVecTyp.html#!:(term:provingground.HoTT.Term):U", "kind" : "def"}, {"label" : "obj", "tail" : "(): RepTerm[Vector[X]]", "member" : "provingground.HoTT.Typ.obj", "link" : "provingground\/functionfinder\/IndexedVecTyp.html#obj:U", "kind" : "def"}, {"label" : "usesVar", "tail" : "(t: Term): Boolean", "member" : "provingground.HoTT.Term.usesVar", "link" : "provingground\/functionfinder\/IndexedVecTyp.html#usesVar(t:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "indepOf", "tail" : "(that: Term): Boolean", "member" : "provingground.HoTT.Term.indepOf", "link" : "provingground\/functionfinder\/IndexedVecTyp.html#indepOf(that:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "dependsOn", "tail" : "(that: Term): Boolean", "member" : "provingground.HoTT.Term.dependsOn", "link" : "provingground\/functionfinder\/IndexedVecTyp.html#dependsOn(that:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "replace", "tail" : "(x: Term, y: Term): Typ[RepTerm[Vector[X]]] with Subs[Typ[RepTerm[Vector[X]]]]", "member" : "provingground.HoTT.Subs.replace", "link" : "provingground\/functionfinder\/IndexedVecTyp.html#replace(x:provingground.HoTT.Term,y:provingground.HoTT.Term):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/functionfinder\/IndexedVecTyp.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/functionfinder\/IndexedVecTyp.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/functionfinder\/IndexedVecTyp.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/functionfinder\/IndexedVecTyp.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/functionfinder\/IndexedVecTyp.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/functionfinder\/IndexedVecTyp.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/functionfinder\/IndexedVecTyp.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/IndexedVecTyp.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/IndexedVecTyp.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/IndexedVecTyp.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/functionfinder\/IndexedVecTyp.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/functionfinder\/IndexedVecTyp.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/functionfinder\/IndexedVecTyp.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/functionfinder\/IndexedVecTyp.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/functionfinder\/IndexedVecTyp.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/functionfinder\/IndexedVecTyp.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/functionfinder\/IndexedVecTyp.html", "kind" : "case class"}, {"name" : "provingground.functionfinder.InducPairs", "shortDescription" : "Recursion and induction for (dependent) pairs.", "object" : "provingground\/functionfinder\/InducPairs$.html", "members_object" : [{"label" : "InducSigma", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Func[Term, Typ[Term]] with Subs[Func[Term, Typ[Term]]], FuncLike[Func[Term, Func[Term, Typ[Term]]] with Subs[Func[Term, Func[Term, Typ[Term]]]], FuncLike[FuncLike[Term, FuncLike[Term, Term]] with Subs[FuncLike[Term, FuncLike[Term, Term]]], FuncLike[DepPair[Term, Term], Term]]]]]", "member" : "provingground.functionfinder.InducPairs.InducSigma", "link" : "provingground\/functionfinder\/InducPairs$.html#InducSigma:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]],provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]]],provingground.HoTT.FuncLike[provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term]]],provingground.HoTT.FuncLike[provingground.HoTT.DepPair[provingground.HoTT.Term,provingground.HoTT.Term],provingground.HoTT.Term]]]]]", "kind" : "val"}, {"label" : "hDep", "tail" : ": FuncLike[Term, FuncLike[Term, Term]] with Subs[FuncLike[Term, FuncLike[Term, Term]]]", "member" : "provingground.functionfinder.InducPairs.hDep", "link" : "provingground\/functionfinder\/InducPairs$.html#hDep:provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "toCsDep", "tail" : ": GenFuncTyp[Term, FuncLike[Term, Term]]", "member" : "provingground.functionfinder.InducPairs.toCsDep", "link" : "provingground\/functionfinder\/InducPairs$.html#toCsDep:provingground.HoTT.GenFuncTyp[provingground.HoTT.Term,provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "inducPair", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Func[Term, Func[Term, Typ[Term]]] with Subs[Func[Term, Func[Term, Typ[Term]]]], FuncLike[FuncLike[Term, FuncLike[Term, Term]] with Subs[FuncLike[Term, FuncLike[Term, Term]]], FuncLike[PairTerm[Term with Subs[Term], Term with Subs[Term]], Term]]]]]", "member" : "provingground.functionfinder.InducPairs.inducPair", "link" : "provingground\/functionfinder\/InducPairs$.html#inducPair:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]]],provingground.HoTT.FuncLike[provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term]]],provingground.HoTT.FuncLike[provingground.HoTT.PairTerm[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]],provingground.HoTT.Term]]]]]", "kind" : "val"}, {"label" : "h", "tail" : ": FuncLike[Term, FuncLike[Term, Term]] with Subs[FuncLike[Term, FuncLike[Term, Term]]]", "member" : "provingground.functionfinder.InducPairs.h", "link" : "provingground\/functionfinder\/InducPairs$.html#h:provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "toCs", "tail" : ": GenFuncTyp[Term, FuncLike[Term, Term]]", "member" : "provingground.functionfinder.InducPairs.toCs", "link" : "provingground\/functionfinder\/InducPairs$.html#toCs:provingground.HoTT.GenFuncTyp[provingground.HoTT.Term,provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "Cs", "tail" : ": Func[Term, Func[Term, Typ[Term]]] with Subs[Func[Term, Func[Term, Typ[Term]]]]", "member" : "provingground.functionfinder.InducPairs.Cs", "link" : "provingground\/functionfinder\/InducPairs$.html#Cs:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]]]", "kind" : "val"}, {"label" : "recSigma", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[FuncLike[Term with Subs[Term], Func[Term, Term]] with Subs[FuncLike[Term with Subs[Term], Func[Term, Term]]], FuncLike[DepPair[Term, Term], Term]]]]]", "member" : "provingground.functionfinder.InducPairs.recSigma", "link" : "provingground\/functionfinder\/InducPairs$.html#recSigma:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]],provingground.HoTT.FuncLike[provingground.HoTT.DepPair[provingground.HoTT.Term,provingground.HoTT.Term],provingground.HoTT.Term]]]]]", "kind" : "val"}, {"label" : "abDep", "tail" : ": DepPair[Term, Term]", "member" : "provingground.functionfinder.InducPairs.abDep", "link" : "provingground\/functionfinder\/InducPairs$.html#abDep:provingground.HoTT.DepPair[provingground.HoTT.Term,provingground.HoTT.Term]", "kind" : "val"}, {"label" : "g", "tail" : ": FuncLike[Term with Subs[Term], Func[Term, Term]] with Subs[FuncLike[Term with Subs[Term], Func[Term, Term]]]", "member" : "provingground.functionfinder.InducPairs.g", "link" : "provingground\/functionfinder\/InducPairs$.html#g:provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "toC", "tail" : ": GenFuncTyp[Term with Subs[Term], Func[Term, Term]]", "member" : "provingground.functionfinder.InducPairs.toC", "link" : "provingground\/functionfinder\/InducPairs$.html#toC:provingground.HoTT.GenFuncTyp[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "bs", "tail" : ": FuncLike[Term, Term] with Subs[FuncLike[Term, Term]]", "member" : "provingground.functionfinder.InducPairs.bs", "link" : "provingground\/functionfinder\/InducPairs$.html#bs:provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "Btype", "tail" : ": PiDefn[Term, Term]", "member" : "provingground.functionfinder.InducPairs.Btype", "link" : "provingground\/functionfinder\/InducPairs$.html#Btype:provingground.HoTT.PiDefn[provingground.HoTT.Term,provingground.HoTT.Term]", "kind" : "val"}, {"label" : "Bs", "tail" : ": Func[Term, Typ[Term]] with Subs[Func[Term, Typ[Term]]]", "member" : "provingground.functionfinder.InducPairs.Bs", "link" : "provingground\/functionfinder\/InducPairs$.html#Bs:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "recPair", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Func[Term, Func[Term, Term]] with Subs[Func[Term, Func[Term, Term]]], FuncLike[PairTerm[Term with Subs[Term], Term with Subs[Term]], Term]]]]]", "member" : "provingground.functionfinder.InducPairs.recPair", "link" : "provingground\/functionfinder\/InducPairs$.html#recPair:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]],provingground.HoTT.FuncLike[provingground.HoTT.PairTerm[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]],provingground.HoTT.Term]]]]]", "kind" : "val"}, {"label" : "ab", "tail" : ": PairTerm[Term with Subs[Term], Term with Subs[Term]]", "member" : "provingground.functionfinder.InducPairs.ab", "link" : "provingground\/functionfinder\/InducPairs$.html#ab:provingground.HoTT.PairTerm[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "b", "tail" : ": Term with Subs[Term]", "member" : "provingground.functionfinder.InducPairs.b", "link" : "provingground\/functionfinder\/InducPairs$.html#b:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "a", "tail" : ": Term with Subs[Term]", "member" : "provingground.functionfinder.InducPairs.a", "link" : "provingground\/functionfinder\/InducPairs$.html#a:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "f", "tail" : ": Func[Term, Func[Term, Term]] with Subs[Func[Term, Func[Term, Term]]]", "member" : "provingground.functionfinder.InducPairs.f", "link" : "provingground\/functionfinder\/InducPairs$.html#f:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "C", "tail" : ": Typ[Term] with Subs[Typ[Term]]", "member" : "provingground.functionfinder.InducPairs.C", "link" : "provingground\/functionfinder\/InducPairs$.html#C:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "B", "tail" : ": Typ[Term] with Subs[Typ[Term]]", "member" : "provingground.functionfinder.InducPairs.B", "link" : "provingground\/functionfinder\/InducPairs$.html#B:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "A", "tail" : ": Typ[Term] with Subs[Typ[Term]]", "member" : "provingground.functionfinder.InducPairs.A", "link" : "provingground\/functionfinder\/InducPairs$.html#A:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/functionfinder\/InducPairs$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/functionfinder\/InducPairs$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/functionfinder\/InducPairs$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/functionfinder\/InducPairs$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/functionfinder\/InducPairs$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/functionfinder\/InducPairs$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/functionfinder\/InducPairs$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/InducPairs$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/InducPairs$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/InducPairs$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/functionfinder\/InducPairs$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/functionfinder\/InducPairs$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/functionfinder\/InducPairs$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/functionfinder\/InducPairs$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/functionfinder\/InducPairs$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/functionfinder\/InducPairs$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/functionfinder\/InducPairs$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/functionfinder\/InducPairs$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/functionfinder\/InducPairs$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.functionfinder.IntTypes", "shortDescription" : "", "object" : "provingground\/functionfinder\/IntTypes$.html", "members_object" : [{"label" : "kmodn", "tail" : ": Func[Term, FuncLike[Term with Subs[Term], Term]]", "member" : "provingground.functionfinder.IntTypes.kmodn", "link" : "provingground\/functionfinder\/IntTypes$.html#kmodn:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "NFinRep", "tail" : ": FuncRep[Term, Long, FuncLike[Term with Subs[Term], Term], (Long) ⇒ Term]", "member" : "provingground.functionfinder.IntTypes.NFinRep", "link" : "provingground\/functionfinder\/IntTypes$.html#NFinRep:provingground.functionfinder.ScalaRep.FuncRep[provingground.HoTT.Term,Long,provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term],Long=>provingground.HoTT.Term]", "kind" : "val"}, {"label" : "FinRep", "tail" : ": DepFuncRep[Term with Subs[Term], Long, Term, Term]", "member" : "provingground.functionfinder.IntTypes.FinRep", "link" : "provingground\/functionfinder\/IntTypes$.html#FinRep:provingground.functionfinder.ScalaRep.DepFuncRep[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],Long,provingground.HoTT.Term,provingground.HoTT.Term]", "kind" : "val"}, {"label" : "finrep", "tail" : ": RepSection[Long, Term, Term]", "member" : "provingground.functionfinder.IntTypes.finrep", "link" : "provingground\/functionfinder\/IntTypes$.html#finrep:provingground.functionfinder.ScalaRep.RepSection[Long,provingground.HoTT.Term,provingground.HoTT.Term]", "kind" : "val"}, {"label" : "SimpleFinRep", "tail" : ": DepFuncRep[Term, Long, Term, Term]", "member" : "provingground.functionfinder.IntTypes.SimpleFinRep", "link" : "provingground\/functionfinder\/IntTypes$.html#SimpleFinRep:provingground.functionfinder.ScalaRep.DepFuncRep[provingground.HoTT.Term,Long,provingground.HoTT.Term,provingground.HoTT.Term]", "kind" : "val"}, {"label" : "FinFn", "tail" : ": Func[Term, Typ[Term]]", "member" : "provingground.functionfinder.IntTypes.FinFn", "link" : "provingground\/functionfinder\/IntTypes$.html#FinFn:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "Nfmly", "tail" : ": FuncRep[Term, Long, Typ[Term], Typ[Term]]", "member" : "provingground.functionfinder.IntTypes.Nfmly", "link" : "provingground\/functionfinder\/IntTypes$.html#Nfmly:provingground.functionfinder.ScalaRep.FuncRep[provingground.HoTT.Term,Long,provingground.HoTT.Typ[provingground.HoTT.Term],provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "Fin", "tail" : "", "member" : "provingground.functionfinder.IntTypes.Fin", "link" : "provingground\/functionfinder\/IntTypes$.html#FinextendsIntTypes.IntTypwithProductwithSerializable", "kind" : "case class"}, {"label" : "induction", "tail" : "(us: Func[Term, Typ[U]]): Func[U, Func[FuncLike[Term with Subs[Term], Term], FuncLike[Term, U]]]", "member" : "provingground.functionfinder.IntTypes.induction", "link" : "provingground\/functionfinder\/IntTypes$.html#induction[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](us:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[U]]):provingground.HoTT.Func[U,provingground.HoTT.Func[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Term,U]]]", "kind" : "def"}, {"label" : "recursion", "tail" : "(u: Typ[U]): Func[U, Func[Func[Term, Func[U, U]], Func[Term, U]]]", "member" : "provingground.functionfinder.IntTypes.recursion", "link" : "provingground\/functionfinder\/IntTypes$.html#recursion[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](u:provingground.HoTT.Typ[U]):provingground.HoTT.Func[U,provingground.HoTT.Func[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[U,U]],provingground.HoTT.Func[provingground.HoTT.Term,U]]]", "kind" : "def"}, {"label" : "induccurry", "tail" : "(): (U) ⇒ ((Long) ⇒ (U) ⇒ U) ⇒ (Long) ⇒ U", "member" : "provingground.functionfinder.IntTypes.induccurry", "link" : "provingground\/functionfinder\/IntTypes$.html#induccurry[U<:provingground.HoTT.Term]:U=>((Long=>(U=>U))=>(Long=>U))", "kind" : "def"}, {"label" : "inducN", "tail" : ": FuncLike[Func[Term, Typ[Term]] with Subs[Func[Term, Typ[Term]]], Func[Term with Subs[Term], Func[FuncLike[Term with Subs[Term], Func[Term, Term]] with Subs[FuncLike[Term with Subs[Term], Func[Term, Term]]], FuncLike[Term, Term]]]]", "member" : "provingground.functionfinder.IntTypes.inducN", "link" : "provingground\/functionfinder\/IntTypes$.html#inducN:provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]],provingground.HoTT.Func[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]],provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term]]]]", "kind" : "val"}, {"label" : "recN", "tail" : ": LambdaTerm[Typ[Term] with Subs[Typ[Term]], LambdaFixed[Term with Subs[Term], LambdaFixed[Func[Term, Func[Term, Term]] with Subs[Func[Term, Func[Term, Term]]], Func[Term, Term]]]]", "member" : "provingground.functionfinder.IntTypes.recN", "link" : "provingground\/functionfinder\/IntTypes$.html#recN:provingground.HoTT.LambdaTerm[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.LambdaFixed[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.LambdaFixed[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]]", "kind" : "val"}, {"label" : "inducFn", "tail" : "(f0: U, g: (Long) ⇒ (U) ⇒ U, n: Long, thenApply: (U) ⇒ U): U", "member" : "provingground.functionfinder.IntTypes.inducFn", "link" : "provingground\/functionfinder\/IntTypes$.html#inducFn[U<:provingground.HoTT.Term](f0:U,g:Long=>(U=>U),n:Long,thenApply:U=>U):U", "kind" : "def"}, {"label" : "Z", "tail" : "", "member" : "provingground.functionfinder.IntTypes.Z", "link" : "provingground\/functionfinder\/IntTypes$.html#Z", "kind" : "object"}, {"label" : "N", "tail" : "", "member" : "provingground.functionfinder.IntTypes.N", "link" : "provingground\/functionfinder\/IntTypes$.html#N", "kind" : "object"}, {"label" : "IntTyp", "tail" : "", "member" : "provingground.functionfinder.IntTypes.IntTyp", "link" : "provingground\/functionfinder\/IntTypes$.html#IntTypextendsHoTT.SmallTyp", "kind" : "trait"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/functionfinder\/IntTypes$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/functionfinder\/IntTypes$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/functionfinder\/IntTypes$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/functionfinder\/IntTypes$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/functionfinder\/IntTypes$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/functionfinder\/IntTypes$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/functionfinder\/IntTypes$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/IntTypes$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/IntTypes$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/IntTypes$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/functionfinder\/IntTypes$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/functionfinder\/IntTypes$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/functionfinder\/IntTypes$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/functionfinder\/IntTypes$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/functionfinder\/IntTypes$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/functionfinder\/IntTypes$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/functionfinder\/IntTypes$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/functionfinder\/IntTypes$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/functionfinder\/IntTypes$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.functionfinder.IntVector", "shortDescription" : "", "object" : "provingground\/functionfinder\/IntVector$.html", "members_object" : [{"label" : "Vec", "tail" : ": ScalaPolyTerm[FuncLike[RepTerm[Long], Typ[Term]], (Long) ⇒ Typ[Term]]", "member" : "provingground.functionfinder.IntVector.Vec", "link" : "provingground\/functionfinder\/IntVector$.html#Vec:provingground.functionfinder.ScalaPolyRep.ScalaPolyTerm[provingground.HoTT.FuncLike[provingground.functionfinder.RepTerm[Long],provingground.HoTT.Typ[provingground.HoTT.Term]],Long=>provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "IntVecRep", "tail" : "", "member" : "provingground.functionfinder.IntVector.IntVecRep", "link" : "provingground\/functionfinder\/IntVector$.html#IntVecRep", "kind" : "implicit object"}, {"label" : "u", "tail" : ": ScalaRep[Typ[Term], Typ[Term]]", "member" : "provingground.functionfinder.IntVector.u", "link" : "provingground\/functionfinder\/IntVector$.html#u:provingground.functionfinder.ScalaRep[provingground.HoTT.Typ[provingground.HoTT.Term],provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/functionfinder\/IntVector$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/functionfinder\/IntVector$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/functionfinder\/IntVector$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/functionfinder\/IntVector$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/functionfinder\/IntVector$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/functionfinder\/IntVector$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/functionfinder\/IntVector$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/IntVector$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/IntVector$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/IntVector$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/functionfinder\/IntVector$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/functionfinder\/IntVector$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/functionfinder\/IntVector$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/functionfinder\/IntVector$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/functionfinder\/IntVector$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/functionfinder\/IntVector$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/functionfinder\/IntVector$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/functionfinder\/IntVector$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/functionfinder\/IntVector$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "toParArray", "tail" : "(): ParArray[T]", "member" : "scala.collection.parallel.CollectionsHaveToParArray.toParArray", "link" : "provingground\/functionfinder\/IntVector.html#toParArray:scala.collection.parallel.mutable.ParArray[T]", "kind" : "def"}, {"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/functionfinder\/IntVector.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/functionfinder\/IntVector.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (IntVector) ⇒ Boolean, msg: ⇒ Any): IntVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/functionfinder\/IntVector.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (IntVector) ⇒ Boolean): IntVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/functionfinder\/IntVector.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): IntVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/functionfinder\/IntVector.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): IntVector", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/functionfinder\/IntVector.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (IntVector, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/functionfinder\/IntVector.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (IntVector, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/functionfinder\/IntVector.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "Elem", "tail" : "", "member" : "provingground.HoTT.Typ.Elem", "link" : "provingground\/HoTT$$Typ.html#Elem", "kind" : "object"}, {"member" : "provingground.functionfinder.IntVector#<init>", "error" : "unsupported entity"}, {"label" : "dim", "tail" : ": Int", "member" : "provingground.functionfinder.IntVector.dim", "link" : "provingground\/functionfinder\/IntVector.html#dim:Int", "kind" : "val"}, {"label" : "rep", "tail" : ": ScalaRep[RepTerm[Vector[Int]], Vector[Int]]", "member" : "provingground.functionfinder.ScalaTyp.rep", "link" : "provingground\/functionfinder\/IntVector.html#rep:provingground.functionfinder.ScalaRep[provingground.functionfinder.RepTerm[A],A]", "kind" : "implicit val"}, {"label" : "subs", "tail" : "(x: Term, y: Term): Typ[RepTerm[Vector[Int]]] with Subs[Typ[RepTerm[Vector[Int]]]]", "member" : "provingground.functionfinder.ScalaTyp.subs", "link" : "provingground\/functionfinder\/IntVector.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.HoTT.Typ[provingground.functionfinder.RepTerm[A]]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.functionfinder.RepTerm[A]]]", "kind" : "def"}, {"label" : "newobj", "tail" : "(): Nothing", "member" : "provingground.functionfinder.ScalaTyp.newobj", "link" : "provingground\/functionfinder\/IntVector.html#newobj:Nothing", "kind" : "def"}, {"label" : "variable", "tail" : "(name: AnySym): RepTerm[Vector[Int]]", "member" : "provingground.functionfinder.ScalaTyp.variable", "link" : "provingground\/functionfinder\/IntVector.html#variable(name:provingground.HoTT.AnySym):provingground.functionfinder.RepTerm[A]", "kind" : "def"}, {"label" : "typ", "tail" : ": ScalaTypUniv[Vector[Int]]", "member" : "provingground.functionfinder.ScalaTyp.typ", "link" : "provingground\/functionfinder\/IntVector.html#typ:provingground.functionfinder.ScalaTypUniv[A]", "kind" : "val"}, {"label" : "Obj", "tail" : "", "member" : "provingground.functionfinder.ScalaTyp.Obj", "link" : "provingground\/functionfinder\/IntVector.html#Obj=provingground.functionfinder.RepTerm[A]", "kind" : "type"}, {"label" : "++", "tail" : "(those: V): SigmaTyp[UU, VV]", "member" : "provingground.HoTT.Typ.++", "link" : "provingground\/functionfinder\/IntVector.html#++[UU>:provingground.HoTT.Typ[U]<:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[UU],VV<:provingground.HoTT.Termwithprovingground.HoTT.Subs[VV],V<:provingground.HoTT.Typ[VV]withprovingground.HoTT.Subs[V]](those:V):provingground.HoTT.SigmaTyp[UU,VV]", "kind" : "def"}, {"label" : "||", "tail" : "(that: Typ[V]): PlusTyp[UU, V]", "member" : "provingground.HoTT.Typ.||", "link" : "provingground\/functionfinder\/IntVector.html#||[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](that:provingground.HoTT.Typ[V]):provingground.HoTT.PlusTyp[UU,V]", "kind" : "def"}, {"label" : "&&", "tail" : "(that: Typ[V]): ProdTyp[UU, V]", "member" : "provingground.HoTT.Typ.&&", "link" : "provingground\/functionfinder\/IntVector.html#&&[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](that:provingground.HoTT.Typ[V]):provingground.HoTT.ProdTyp[UU,V]", "kind" : "def"}, {"label" : "~>:", "tail" : "(variable: V): GenFuncTyp[V, UU]", "member" : "provingground.HoTT.Typ.~>:", "link" : "provingground\/functionfinder\/IntVector.html#~>:[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](variable:V):provingground.HoTT.GenFuncTyp[V,UU]", "kind" : "def"}, {"label" : "->:", "tail" : "(that: Typ[W]): FuncTyp[W, UU]", "member" : "provingground.HoTT.Typ.->:", "link" : "provingground\/functionfinder\/IntVector.html#->:[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU]](that:provingground.HoTT.Typ[W]):provingground.HoTT.FuncTyp[W,UU]", "kind" : "def"}, {"label" : "typedVar", "tail" : "(): TypedTerm[RepTerm[Vector[Int]]]", "member" : "provingground.HoTT.Typ.typedVar", "link" : "provingground\/functionfinder\/IntVector.html#typedVar:provingground.HoTT.TypedTerm[U]", "kind" : "def"}, {"label" : "Var", "tail" : "(): RepTerm[Vector[Int]] with Subs[RepTerm[Vector[Int]]]", "member" : "provingground.HoTT.Typ.Var", "link" : "provingground\/functionfinder\/IntVector.html#Var:Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "::", "tail" : "(name: String): RepTerm[Vector[Int]] with Subs[RepTerm[Vector[Int]]]", "member" : "provingground.HoTT.Typ.::", "link" : "provingground\/functionfinder\/IntVector.html#::(name:String):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "typedVar", "tail" : "(name: AnySym): TypedTerm[RepTerm[Vector[Int]]]", "member" : "provingground.HoTT.Typ.typedVar", "link" : "provingground\/functionfinder\/IntVector.html#typedVar(name:provingground.HoTT.AnySym):provingground.HoTT.TypedTerm[U]", "kind" : "def"}, {"label" : "symbObj", "tail" : "(name: AnySym): RepTerm[Vector[Int]] with Subs[RepTerm[Vector[Int]]]", "member" : "provingground.HoTT.Typ.symbObj", "link" : "provingground\/functionfinder\/IntVector.html#symbObj(name:provingground.HoTT.AnySym):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "typlevel", "tail" : ": Int", "member" : "provingground.HoTT.Typ.typlevel", "link" : "provingground\/functionfinder\/IntVector.html#typlevel:Int", "kind" : "lazy val"}, {"label" : "typed", "tail" : ": TypedTerm[Typ[Term]]", "member" : "provingground.HoTT.Typ.typed", "link" : "provingground\/functionfinder\/IntVector.html#typed:provingground.HoTT.TypedTerm[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "!:", "tail" : "(term: Term): RepTerm[Vector[Int]]", "member" : "provingground.HoTT.Typ.!:", "link" : "provingground\/functionfinder\/IntVector.html#!:(term:provingground.HoTT.Term):U", "kind" : "def"}, {"label" : "obj", "tail" : "(): RepTerm[Vector[Int]]", "member" : "provingground.HoTT.Typ.obj", "link" : "provingground\/functionfinder\/IntVector.html#obj:U", "kind" : "def"}, {"label" : "usesVar", "tail" : "(t: Term): Boolean", "member" : "provingground.HoTT.Term.usesVar", "link" : "provingground\/functionfinder\/IntVector.html#usesVar(t:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "indepOf", "tail" : "(that: Term): Boolean", "member" : "provingground.HoTT.Term.indepOf", "link" : "provingground\/functionfinder\/IntVector.html#indepOf(that:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "dependsOn", "tail" : "(that: Term): Boolean", "member" : "provingground.HoTT.Term.dependsOn", "link" : "provingground\/functionfinder\/IntVector.html#dependsOn(that:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "replace", "tail" : "(x: Term, y: Term): Typ[RepTerm[Vector[Int]]] with Subs[Typ[RepTerm[Vector[Int]]]]", "member" : "provingground.HoTT.Subs.replace", "link" : "provingground\/functionfinder\/IntVector.html#replace(x:provingground.HoTT.Term,y:provingground.HoTT.Term):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/functionfinder\/IntVector.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/functionfinder\/IntVector.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/functionfinder\/IntVector.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/functionfinder\/IntVector.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/functionfinder\/IntVector.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/functionfinder\/IntVector.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/functionfinder\/IntVector.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/IntVector.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/IntVector.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/IntVector.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/functionfinder\/IntVector.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/functionfinder\/IntVector.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/functionfinder\/IntVector.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/functionfinder\/IntVector.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/functionfinder\/IntVector.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/functionfinder\/IntVector.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/functionfinder\/IntVector.html", "kind" : "case class"}, {"name" : "provingground.functionfinder.ListTyp", "shortDescription" : "", "members_case class" : [{"label" : "toParArray", "tail" : "(): ParArray[T]", "member" : "scala.collection.parallel.CollectionsHaveToParArray.toParArray", "link" : "provingground\/functionfinder\/ListTyp.html#toParArray:scala.collection.parallel.mutable.ParArray[T]", "kind" : "def"}, {"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/functionfinder\/ListTyp.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/functionfinder\/ListTyp.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ListTyp[U, X]) ⇒ Boolean, msg: ⇒ Any): ListTyp[U, X]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/functionfinder\/ListTyp.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ListTyp[U, X]) ⇒ Boolean): ListTyp[U, X]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/functionfinder\/ListTyp.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): ListTyp[U, X]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/functionfinder\/ListTyp.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ListTyp[U, X]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/functionfinder\/ListTyp.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ListTyp[U, X], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/functionfinder\/ListTyp.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ListTyp[U, X], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/functionfinder\/ListTyp.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "Elem", "tail" : "", "member" : "provingground.HoTT.Typ.Elem", "link" : "provingground\/HoTT$$Typ.html#Elem", "kind" : "object"}, {"label" : "cons", "tail" : ": Func[U, Func[RepTerm[List[X]], RepTerm[List[X]]]]", "member" : "provingground.functionfinder.ListTyp.cons", "link" : "provingground\/functionfinder\/ListTyp.html#cons:provingground.HoTT.Func[U,provingground.HoTT.Func[provingground.functionfinder.RepTerm[List[X]],provingground.functionfinder.RepTerm[List[X]]]]", "kind" : "val"}, {"label" : "empty", "tail" : ": RepTerm[List[X]]", "member" : "provingground.functionfinder.ListTyp.empty", "link" : "provingground\/functionfinder\/ListTyp.html#empty:provingground.functionfinder.RepTerm[List[X]]", "kind" : "val"}, {"member" : "provingground.functionfinder.ListTyp#<init>", "error" : "unsupported entity"}, {"label" : "rep", "tail" : ": ScalaRep[RepTerm[List[X]], List[X]]", "member" : "provingground.functionfinder.ScalaTyp.rep", "link" : "provingground\/functionfinder\/ListTyp.html#rep:provingground.functionfinder.ScalaRep[provingground.functionfinder.RepTerm[A],A]", "kind" : "implicit val"}, {"label" : "subs", "tail" : "(x: Term, y: Term): Typ[RepTerm[List[X]]] with Subs[Typ[RepTerm[List[X]]]]", "member" : "provingground.functionfinder.ScalaTyp.subs", "link" : "provingground\/functionfinder\/ListTyp.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.HoTT.Typ[provingground.functionfinder.RepTerm[A]]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.functionfinder.RepTerm[A]]]", "kind" : "def"}, {"label" : "newobj", "tail" : "(): Nothing", "member" : "provingground.functionfinder.ScalaTyp.newobj", "link" : "provingground\/functionfinder\/ListTyp.html#newobj:Nothing", "kind" : "def"}, {"label" : "variable", "tail" : "(name: AnySym): RepTerm[List[X]]", "member" : "provingground.functionfinder.ScalaTyp.variable", "link" : "provingground\/functionfinder\/ListTyp.html#variable(name:provingground.HoTT.AnySym):provingground.functionfinder.RepTerm[A]", "kind" : "def"}, {"label" : "typ", "tail" : ": ScalaTypUniv[List[X]]", "member" : "provingground.functionfinder.ScalaTyp.typ", "link" : "provingground\/functionfinder\/ListTyp.html#typ:provingground.functionfinder.ScalaTypUniv[A]", "kind" : "val"}, {"label" : "Obj", "tail" : "", "member" : "provingground.functionfinder.ScalaTyp.Obj", "link" : "provingground\/functionfinder\/ListTyp.html#Obj=provingground.functionfinder.RepTerm[A]", "kind" : "type"}, {"label" : "++", "tail" : "(those: V): SigmaTyp[UU, VV]", "member" : "provingground.HoTT.Typ.++", "link" : "provingground\/functionfinder\/ListTyp.html#++[UU>:provingground.HoTT.Typ[U]<:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[UU],VV<:provingground.HoTT.Termwithprovingground.HoTT.Subs[VV],V<:provingground.HoTT.Typ[VV]withprovingground.HoTT.Subs[V]](those:V):provingground.HoTT.SigmaTyp[UU,VV]", "kind" : "def"}, {"label" : "||", "tail" : "(that: Typ[V]): PlusTyp[UU, V]", "member" : "provingground.HoTT.Typ.||", "link" : "provingground\/functionfinder\/ListTyp.html#||[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](that:provingground.HoTT.Typ[V]):provingground.HoTT.PlusTyp[UU,V]", "kind" : "def"}, {"label" : "&&", "tail" : "(that: Typ[V]): ProdTyp[UU, V]", "member" : "provingground.HoTT.Typ.&&", "link" : "provingground\/functionfinder\/ListTyp.html#&&[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](that:provingground.HoTT.Typ[V]):provingground.HoTT.ProdTyp[UU,V]", "kind" : "def"}, {"label" : "~>:", "tail" : "(variable: V): GenFuncTyp[V, UU]", "member" : "provingground.HoTT.Typ.~>:", "link" : "provingground\/functionfinder\/ListTyp.html#~>:[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](variable:V):provingground.HoTT.GenFuncTyp[V,UU]", "kind" : "def"}, {"label" : "->:", "tail" : "(that: Typ[W]): FuncTyp[W, UU]", "member" : "provingground.HoTT.Typ.->:", "link" : "provingground\/functionfinder\/ListTyp.html#->:[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU]](that:provingground.HoTT.Typ[W]):provingground.HoTT.FuncTyp[W,UU]", "kind" : "def"}, {"label" : "typedVar", "tail" : "(): TypedTerm[RepTerm[List[X]]]", "member" : "provingground.HoTT.Typ.typedVar", "link" : "provingground\/functionfinder\/ListTyp.html#typedVar:provingground.HoTT.TypedTerm[U]", "kind" : "def"}, {"label" : "Var", "tail" : "(): RepTerm[List[X]] with Subs[RepTerm[List[X]]]", "member" : "provingground.HoTT.Typ.Var", "link" : "provingground\/functionfinder\/ListTyp.html#Var:Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "::", "tail" : "(name: String): RepTerm[List[X]] with Subs[RepTerm[List[X]]]", "member" : "provingground.HoTT.Typ.::", "link" : "provingground\/functionfinder\/ListTyp.html#::(name:String):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "typedVar", "tail" : "(name: AnySym): TypedTerm[RepTerm[List[X]]]", "member" : "provingground.HoTT.Typ.typedVar", "link" : "provingground\/functionfinder\/ListTyp.html#typedVar(name:provingground.HoTT.AnySym):provingground.HoTT.TypedTerm[U]", "kind" : "def"}, {"label" : "symbObj", "tail" : "(name: AnySym): RepTerm[List[X]] with Subs[RepTerm[List[X]]]", "member" : "provingground.HoTT.Typ.symbObj", "link" : "provingground\/functionfinder\/ListTyp.html#symbObj(name:provingground.HoTT.AnySym):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "typlevel", "tail" : ": Int", "member" : "provingground.HoTT.Typ.typlevel", "link" : "provingground\/functionfinder\/ListTyp.html#typlevel:Int", "kind" : "lazy val"}, {"label" : "typed", "tail" : ": TypedTerm[Typ[Term]]", "member" : "provingground.HoTT.Typ.typed", "link" : "provingground\/functionfinder\/ListTyp.html#typed:provingground.HoTT.TypedTerm[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "!:", "tail" : "(term: Term): RepTerm[List[X]]", "member" : "provingground.HoTT.Typ.!:", "link" : "provingground\/functionfinder\/ListTyp.html#!:(term:provingground.HoTT.Term):U", "kind" : "def"}, {"label" : "obj", "tail" : "(): RepTerm[List[X]]", "member" : "provingground.HoTT.Typ.obj", "link" : "provingground\/functionfinder\/ListTyp.html#obj:U", "kind" : "def"}, {"label" : "usesVar", "tail" : "(t: Term): Boolean", "member" : "provingground.HoTT.Term.usesVar", "link" : "provingground\/functionfinder\/ListTyp.html#usesVar(t:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "indepOf", "tail" : "(that: Term): Boolean", "member" : "provingground.HoTT.Term.indepOf", "link" : "provingground\/functionfinder\/ListTyp.html#indepOf(that:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "dependsOn", "tail" : "(that: Term): Boolean", "member" : "provingground.HoTT.Term.dependsOn", "link" : "provingground\/functionfinder\/ListTyp.html#dependsOn(that:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "replace", "tail" : "(x: Term, y: Term): Typ[RepTerm[List[X]]] with Subs[Typ[RepTerm[List[X]]]]", "member" : "provingground.HoTT.Subs.replace", "link" : "provingground\/functionfinder\/ListTyp.html#replace(x:provingground.HoTT.Term,y:provingground.HoTT.Term):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/functionfinder\/ListTyp.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/functionfinder\/ListTyp.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/functionfinder\/ListTyp.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/functionfinder\/ListTyp.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/functionfinder\/ListTyp.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/functionfinder\/ListTyp.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/functionfinder\/ListTyp.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/ListTyp.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/ListTyp.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/ListTyp.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/functionfinder\/ListTyp.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/functionfinder\/ListTyp.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/functionfinder\/ListTyp.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/functionfinder\/ListTyp.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/functionfinder\/ListTyp.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/functionfinder\/ListTyp.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/functionfinder\/ListTyp.html", "kind" : "case class"}, {"name" : "provingground.functionfinder.ListType", "shortDescription" : "", "object" : "provingground\/functionfinder\/ListType$.html", "members_object" : [{"label" : "tail", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], Func[Term, Term]]", "member" : "provingground.functionfinder.ListType.tail", "link" : "provingground\/functionfinder\/ListType$.html#tail:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "headOpt", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], OptDepFuncDefn[Term]]", "member" : "provingground.functionfinder.ListType.headOpt", "link" : "provingground\/functionfinder\/ListType$.html#headOpt:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.OptDepFuncDefn[provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "tailFn", "tail" : "(typ: Typ[U]): Func[Term, Term]", "member" : "provingground.functionfinder.ListType.tailFn", "link" : "provingground\/functionfinder\/ListType$.html#tailFn[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](typ:provingground.HoTT.Typ[U]):provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]", "kind" : "def"}, {"label" : "headOptFn", "tail" : "(typ: Typ[U]): OptDepFuncDefn[Term]", "member" : "provingground.functionfinder.ListType.headOptFn", "link" : "provingground\/functionfinder\/ListType$.html#headOptFn[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](typ:provingground.HoTT.Typ[U]):provingground.HoTT.OptDepFuncDefn[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "foldLeft", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Typ[Term] with Subs[Typ[Term]], Func[Term, Func[Term, Func[Func[Term, Func[Term, Term]], Term]]]]]", "member" : "provingground.functionfinder.ListType.foldLeft", "link" : "provingground\/functionfinder\/ListType$.html#foldLeft:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]],provingground.HoTT.Term]]]]]", "kind" : "lazy val"}, {"label" : "lmap", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Typ[Term] with Subs[Typ[Term]], Func[Func[Term, Term], Func[Term, Term]]]]", "member" : "provingground.functionfinder.ListType.lmap", "link" : "provingground\/functionfinder\/ListType$.html#lmap:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.Func[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]]", "kind" : "lazy val"}, {"label" : "lmapFunc", "tail" : "(u: Typ[U], v: Typ[V]): Func[Func[U, V], Func[Term, Term]]", "member" : "provingground.functionfinder.ListType.lmapFunc", "link" : "provingground\/functionfinder\/ListType$.html#lmapFunc[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](u:provingground.HoTT.Typ[U],v:provingground.HoTT.Typ[V]):provingground.HoTT.Func[provingground.HoTT.Func[U,V],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "foldFunction", "tail" : "(u: Typ[U], v: Typ[V]): Func[Term, Func[V, Func[Func[U, Func[V, V]], V]]]", "member" : "provingground.functionfinder.ListType.foldFunction", "link" : "provingground\/functionfinder\/ListType$.html#foldFunction[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](u:provingground.HoTT.Typ[U],v:provingground.HoTT.Typ[V]):provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[V,provingground.HoTT.Func[provingground.HoTT.Func[U,provingground.HoTT.Func[V,V]],V]]]", "kind" : "def"}, {"label" : "ListRep", "tail" : "", "member" : "provingground.functionfinder.ListType.ListRep", "link" : "provingground\/functionfinder\/ListType$.html#ListRep[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsScalaRep[provingground.HoTT.Term,List[U]]withProductwithSerializable", "kind" : "case class"}, {"label" : "ListTerm", "tail" : "", "member" : "provingground.functionfinder.ListType.ListTerm", "link" : "provingground\/functionfinder\/ListType$.html#ListTerm[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsScalaRep.ConstTerm[List[U]]withProductwithSerializable", "kind" : "case class"}, {"label" : "ListTyp", "tail" : "", "member" : "provingground.functionfinder.ListType.ListTyp", "link" : "provingground\/functionfinder\/ListType$.html#ListTyp[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsHoTT.SmallTypwithProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/functionfinder\/ListType$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/functionfinder\/ListType$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/functionfinder\/ListType$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/functionfinder\/ListType$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/functionfinder\/ListType$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/functionfinder\/ListType$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/functionfinder\/ListType$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/ListType$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/ListType$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/ListType$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/functionfinder\/ListType$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/functionfinder\/ListType$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/functionfinder\/ListType$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/functionfinder\/ListType$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/functionfinder\/ListType$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/functionfinder\/ListType$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/functionfinder\/ListType$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/functionfinder\/ListType$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/functionfinder\/ListType$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.functionfinder.MatrixTypes", "shortDescription" : "", "object" : "provingground\/functionfinder\/MatrixTypes$.html", "members_object" : [{"label" : "ZmatEql", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Func[Term, Func[Term, Term]] with Subs[Func[Term, Func[Term, Term]]], FuncLike[Func[Term, Func[Term, Term]] with Subs[Func[Term, Func[Term, Term]]], FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], Term]]]]]]", "member" : "provingground.functionfinder.MatrixTypes.ZmatEql", "link" : "provingground\/functionfinder\/MatrixTypes$.html#ZmatEql:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]],provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]]]]]]", "kind" : "val"}, {"label" : "ZmatProd", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Term with Subs[Term], FuncLike[Func[Term, Func[Term, Term]] with Subs[Func[Term, Func[Term, Term]]], FuncLike[Func[Term, Func[Term, Term]] with Subs[Func[Term, Func[Term, Term]]], FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], Func[Func[Term, Func[Term, Term]], Term]]]]]]]]]", "member" : "provingground.functionfinder.MatrixTypes.ZmatProd", "link" : "provingground\/functionfinder\/MatrixTypes$.html#ZmatProd:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]],provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]],provingground.HoTT.Term]]]]]]]]]", "kind" : "val"}, {"label" : "w", "tail" : ": Term with Subs[Term]", "member" : "provingground.functionfinder.MatrixTypes.w", "link" : "provingground\/functionfinder\/MatrixTypes$.html#w:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "ZmatSum", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Func[Term, Func[Term, Term]] with Subs[Func[Term, Func[Term, Term]]], FuncLike[Func[Term, Func[Term, Term]] with Subs[Func[Term, Func[Term, Term]]], FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], Term]]]]]]", "member" : "provingground.functionfinder.MatrixTypes.ZmatSum", "link" : "provingground\/functionfinder\/MatrixTypes$.html#ZmatSum:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]],provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]]]]]]", "kind" : "val"}, {"label" : "Matrix", "tail" : "", "member" : "provingground.functionfinder.MatrixTypes.Matrix", "link" : "provingground\/functionfinder\/MatrixTypes$.html#MatrixextendsAnyRef", "kind" : "implicit class"}, {"label" : "y", "tail" : ": Term with Subs[Term]", "member" : "provingground.functionfinder.MatrixTypes.y", "link" : "provingground\/functionfinder\/MatrixTypes$.html#y:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "x", "tail" : ": Term with Subs[Term]", "member" : "provingground.functionfinder.MatrixTypes.x", "link" : "provingground\/functionfinder\/MatrixTypes$.html#x:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "basis", "tail" : ": Term with Subs[Term]", "member" : "provingground.functionfinder.MatrixTypes.basis", "link" : "provingground\/functionfinder\/MatrixTypes$.html#basis:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "C", "tail" : ": Func[Term, Func[Term, Term]] with Subs[Func[Term, Func[Term, Term]]]", "member" : "provingground.functionfinder.MatrixTypes.C", "link" : "provingground\/functionfinder\/MatrixTypes$.html#C:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "B", "tail" : ": Func[Term, Func[Term, Term]] with Subs[Func[Term, Func[Term, Term]]]", "member" : "provingground.functionfinder.MatrixTypes.B", "link" : "provingground\/functionfinder\/MatrixTypes$.html#B:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "A", "tail" : ": Func[Term, Func[Term, Term]] with Subs[Func[Term, Func[Term, Term]]]", "member" : "provingground.functionfinder.MatrixTypes.A", "link" : "provingground\/functionfinder\/MatrixTypes$.html#A:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "Zmat", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Typ[Term] with Subs[Typ[Term]], FuncTyp[Term, Func[Term, Term]]]]", "member" : "provingground.functionfinder.MatrixTypes.Zmat", "link" : "provingground\/functionfinder\/MatrixTypes$.html#Zmat:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncTyp[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]]", "kind" : "val"}, {"label" : "W", "tail" : ": Typ[Term] with Subs[Typ[Term]]", "member" : "provingground.functionfinder.MatrixTypes.W", "link" : "provingground\/functionfinder\/MatrixTypes$.html#W:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "Y", "tail" : ": Typ[Term] with Subs[Typ[Term]]", "member" : "provingground.functionfinder.MatrixTypes.Y", "link" : "provingground\/functionfinder\/MatrixTypes$.html#Y:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "X", "tail" : ": Typ[Term] with Subs[Typ[Term]]", "member" : "provingground.functionfinder.MatrixTypes.X", "link" : "provingground\/functionfinder\/MatrixTypes$.html#X:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/functionfinder\/MatrixTypes$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/functionfinder\/MatrixTypes$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/functionfinder\/MatrixTypes$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/functionfinder\/MatrixTypes$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/functionfinder\/MatrixTypes$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/functionfinder\/MatrixTypes$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/functionfinder\/MatrixTypes$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/MatrixTypes$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/MatrixTypes$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/MatrixTypes$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/functionfinder\/MatrixTypes$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/functionfinder\/MatrixTypes$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/functionfinder\/MatrixTypes$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/functionfinder\/MatrixTypes$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/functionfinder\/MatrixTypes$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/functionfinder\/MatrixTypes$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/functionfinder\/MatrixTypes$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/functionfinder\/MatrixTypes$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/functionfinder\/MatrixTypes$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.functionfinder.NatRing", "shortDescription" : "", "object" : "provingground\/functionfinder\/NatRing$.html", "members_object" : [{"label" : "multTerm", "tail" : "", "member" : "provingground.functionfinder.SymbolicCRing.multTerm", "link" : "provingground\/functionfinder\/SymbolicCRing.html#multTermextendsHoTT.Func[SymbolicCRing.this.LocalTerm,SymbolicCRing.this.LocalTerm]withProductwithSerializable", "kind" : "case class"}, {"label" : "multLiteral", "tail" : "", "member" : "provingground.functionfinder.SymbolicCRing.multLiteral", "link" : "provingground\/functionfinder\/SymbolicCRing.html#multLiteralextendsHoTT.Func[SymbolicCRing.this.LocalTerm,SymbolicCRing.this.LocalTerm]withProductwithSerializable", "kind" : "case class"}, {"label" : "prod", "tail" : "", "member" : "provingground.functionfinder.SymbolicCRing.prod", "link" : "provingground\/functionfinder\/SymbolicCRing.html#prod", "kind" : "object"}, {"label" : "AdditiveMorphism", "tail" : "", "member" : "provingground.functionfinder.SymbolicCRing.AdditiveMorphism", "link" : "provingground\/functionfinder\/SymbolicCRing.html#AdditiveMorphism[U<:SymbolicCRing.this.LocalTermwithprovingground.HoTT.Subs[U]]extendsHoTT.Func[SymbolicCRing.this.LocalTerm,SymbolicCRing.this.LocalTerm]withProductwithSerializable", "kind" : "case class"}, {"label" : "AddTerm", "tail" : "", "member" : "provingground.functionfinder.SymbolicCRing.AddTerm", "link" : "provingground\/functionfinder\/SymbolicCRing.html#AddTermextendsHoTT.Func[SymbolicCRing.this.LocalTerm,SymbolicCRing.this.LocalTerm]withProductwithSerializable", "kind" : "case class"}, {"label" : "AddLiteral", "tail" : "", "member" : "provingground.functionfinder.SymbolicCRing.AddLiteral", "link" : "provingground\/functionfinder\/SymbolicCRing.html#AddLiteralextendsHoTT.Func[SymbolicCRing.this.LocalTerm,SymbolicCRing.this.LocalTerm]withProductwithSerializable", "kind" : "case class"}, {"label" : "LiteralSum", "tail" : "", "member" : "provingground.functionfinder.SymbolicCRing.LiteralSum", "link" : "provingground\/functionfinder\/SymbolicCRing.html#LiteralSum", "kind" : "object"}, {"label" : "sum", "tail" : "", "member" : "provingground.functionfinder.SymbolicCRing.sum", "link" : "provingground\/functionfinder\/SymbolicCRing.html#sum", "kind" : "object"}, {"label" : "Reciprocal", "tail" : "", "member" : "provingground.functionfinder.SymbolicCRing.Reciprocal", "link" : "provingground\/functionfinder\/SymbolicCRing.html#Reciprocal", "kind" : "object"}, {"label" : "PiTerm", "tail" : "", "member" : "provingground.functionfinder.SymbolicCRing.PiTerm", "link" : "provingground\/functionfinder\/SymbolicCRing.html#PiTerm", "kind" : "object"}, {"label" : "PiTerm", "tail" : "", "member" : "provingground.functionfinder.SymbolicCRing.PiTerm", "link" : "provingground\/functionfinder\/SymbolicCRing.html#PiTermextendsSymbolicCRing.this.LocalTermwithFoldedTerm[SymbolicCRing.this.LocalTerm]withProductwithSerializable", "kind" : "case class"}, {"label" : "LitProd", "tail" : "", "member" : "provingground.functionfinder.SymbolicCRing.LitProd", "link" : "provingground\/functionfinder\/SymbolicCRing.html#LitProd", "kind" : "object"}, {"label" : "SigmaTerm", "tail" : "", "member" : "provingground.functionfinder.SymbolicCRing.SigmaTerm", "link" : "provingground\/functionfinder\/SymbolicCRing.html#SigmaTerm", "kind" : "object"}, {"label" : "SigmaTerm", "tail" : "", "member" : "provingground.functionfinder.SymbolicCRing.SigmaTerm", "link" : "provingground\/functionfinder\/SymbolicCRing.html#SigmaTermextendsSymbolicCRing.this.LocalTermwithFoldedTerm[SymbolicCRing.this.LocalTerm]withProductwithSerializable", "kind" : "case class"}, {"label" : "Comb", "tail" : "", "member" : "provingground.functionfinder.SymbolicCRing.Comb", "link" : "provingground\/functionfinder\/SymbolicCRing.html#Comb", "kind" : "object"}, {"label" : "Literal", "tail" : "", "member" : "provingground.functionfinder.SymbolicCRing.Literal", "link" : "provingground\/functionfinder\/SymbolicCRing.html#Literal", "kind" : "object"}, {"label" : "LocalTyp", "tail" : "", "member" : "provingground.functionfinder.SymbolicCRing.LocalTyp", "link" : "provingground\/functionfinder\/SymbolicCRing.html#LocalTyp", "kind" : "object"}, {"label" : "Induc", "tail" : "", "member" : "provingground.functionfinder.NatRing.Induc", "link" : "provingground\/functionfinder\/NatRing$.html#Induc", "kind" : "object"}, {"label" : "Induc", "tail" : "", "member" : "provingground.functionfinder.NatRing.Induc", "link" : "provingground\/functionfinder\/NatRing$.html#Induc[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsHoTT.FuncLike[provingground.functionfinder.NatRing.Nat,U]withProductwithSerializable", "kind" : "case class"}, {"label" : "Rec", "tail" : "", "member" : "provingground.functionfinder.NatRing.Rec", "link" : "provingground\/functionfinder\/NatRing$.html#Rec[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsHoTT.Func[provingground.functionfinder.NatRing.Nat,U]withProductwithSerializable", "kind" : "case class"}, {"label" : "recDefn", "tail" : "(n: SafeLong, formal: U, h: (SafeLong) ⇒ (U) ⇒ U): U", "member" : "provingground.functionfinder.NatRing.recDefn", "link" : "provingground\/functionfinder\/NatRing$.html#recDefn[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](n:spire.math.SafeLong,formal:U,h:spire.math.SafeLong=>(U=>U)):U", "kind" : "def"}, {"label" : "intLiteral", "tail" : "(n: Int): Nat", "member" : "provingground.functionfinder.NatRing.intLiteral", "link" : "provingground\/functionfinder\/NatRing$.html#intLiteral(n:Int):provingground.functionfinder.NatRing.Nat", "kind" : "implicit def"}, {"label" : "Nat", "tail" : "", "member" : "provingground.functionfinder.NatRing.Nat", "link" : "provingground\/functionfinder\/NatRing$.html#Nat=provingground.functionfinder.NatRing.LocalTerm", "kind" : "type"}, {"label" : "NatTyp", "tail" : ": LocalTyp.type", "member" : "provingground.functionfinder.NatRing.NatTyp", "link" : "provingground\/functionfinder\/NatRing$.html#NatTyp:provingground.functionfinder.NatRing.LocalTyp.type", "kind" : "val"}, {"label" : "succ", "tail" : ": Func[RepTerm[SafeLong] with Subs[RepTerm[SafeLong]], LocalTerm]", "member" : "provingground.functionfinder.NatRing.succ", "link" : "provingground\/functionfinder\/NatRing$.html#succ:provingground.HoTT.Func[provingground.functionfinder.RepTerm[spire.math.SafeLong]withprovingground.HoTT.Subs[provingground.functionfinder.RepTerm[spire.math.SafeLong]],provingground.functionfinder.NatRing.LocalTerm]", "kind" : "val"}, {"label" : "x", "tail" : ": RepTerm[SafeLong] with Subs[RepTerm[SafeLong]]", "member" : "provingground.functionfinder.NatRing.x", "link" : "provingground\/functionfinder\/NatRing$.html#x:provingground.functionfinder.RepTerm[spire.math.SafeLong]withprovingground.HoTT.Subs[provingground.functionfinder.RepTerm[spire.math.SafeLong]]", "kind" : "val"}, {"label" : "toString", "tail" : "(): String", "member" : "provingground.functionfinder.NatRing.toString", "link" : "provingground\/functionfinder\/NatRing$.html#toString():String", "kind" : "def"}, {"label" : "cringStructure", "tail" : ": CRing[LocalTerm]", "member" : "provingground.functionfinder.SymbolicCRing.cringStructure", "link" : "provingground\/functionfinder\/NatRing$.html#cringStructure:spire.algebra.CRing[SymbolicCRing.this.LocalTerm]", "kind" : "implicit val"}, {"label" : "power", "tail" : "(x: LocalTerm, n: Int): LocalTerm", "member" : "provingground.functionfinder.SymbolicCRing.power", "link" : "provingground\/functionfinder\/NatRing$.html#power(x:SymbolicCRing.this.LocalTerm,n:Int):SymbolicCRing.this.LocalTerm", "kind" : "def"}, {"label" : "posPower", "tail" : "(x: LocalTerm, n: Int, accum: LocalTerm): LocalTerm", "member" : "provingground.functionfinder.SymbolicCRing.posPower", "link" : "provingground\/functionfinder\/NatRing$.html#posPower(x:SymbolicCRing.this.LocalTerm,n:Int,accum:SymbolicCRing.this.LocalTerm):SymbolicCRing.this.LocalTerm", "kind" : "final def"}, {"label" : "funcSum", "tail" : "(f: (LocalTerm) ⇒ LocalTerm, g: (LocalTerm) ⇒ LocalTerm): Func[RepTerm[SafeLong], LocalTerm]", "member" : "provingground.functionfinder.SymbolicCRing.funcSum", "link" : "provingground\/functionfinder\/NatRing$.html#funcSum(f:SymbolicCRing.this.LocalTerm=>SymbolicCRing.this.LocalTerm,g:SymbolicCRing.this.LocalTerm=>SymbolicCRing.this.LocalTerm):provingground.HoTT.Func[provingground.functionfinder.RepTerm[A],SymbolicCRing.this.LocalTerm]", "kind" : "def"}, {"label" : "reciprocal", "tail" : ": Func[LocalTerm, LocalTerm]", "member" : "provingground.functionfinder.SymbolicCRing.reciprocal", "link" : "provingground\/functionfinder\/NatRing$.html#reciprocal:provingground.HoTT.Func[SymbolicCRing.this.LocalTerm,SymbolicCRing.this.LocalTerm]", "kind" : "lazy val"}, {"label" : "reciprocalOpt", "tail" : ": Option[Func[LocalTerm, LocalTerm]]", "member" : "provingground.functionfinder.SymbolicCRing.reciprocalOpt", "link" : "provingground\/functionfinder\/NatRing$.html#reciprocalOpt:Option[provingground.HoTT.Func[SymbolicCRing.this.LocalTerm,SymbolicCRing.this.LocalTerm]]", "kind" : "val"}, {"label" : "Op", "tail" : "", "member" : "provingground.functionfinder.SymbolicCRing.Op", "link" : "provingground\/functionfinder\/NatRing$.html#Op=provingground.HoTT.Func[SymbolicCRing.this.LocalTerm,provingground.HoTT.Func[SymbolicCRing.this.LocalTerm,SymbolicCRing.this.LocalTerm]]", "kind" : "type"}, {"label" : "LocalTerm", "tail" : "", "member" : "provingground.functionfinder.SymbolicCRing.LocalTerm", "link" : "provingground\/functionfinder\/NatRing$.html#LocalTerm=provingground.functionfinder.RepTerm[A]", "kind" : "type"}, {"label" : "negate", "tail" : "(x: LocalTerm): LocalTerm", "member" : "provingground.functionfinder.SymbolicCRing.negate", "link" : "provingground\/functionfinder\/NatRing$.html#negate(x:SymbolicCRing.this.LocalTerm):SymbolicCRing.this.LocalTerm", "kind" : "def"}, {"label" : "minusone", "tail" : ": LocalTerm with Subs[LocalTerm]", "member" : "provingground.functionfinder.SymbolicCRing.minusone", "link" : "provingground\/functionfinder\/NatRing$.html#minusone:SymbolicCRing.this.LocalTermwithprovingground.HoTT.Subs[SymbolicCRing.this.LocalTerm]", "kind" : "val"}, {"label" : "two", "tail" : ": SafeLong", "member" : "provingground.functionfinder.SymbolicCRing.two", "link" : "provingground\/functionfinder\/NatRing$.html#two:A", "kind" : "val"}, {"label" : "ring", "tail" : ": Ring[SafeLong]", "member" : "provingground.functionfinder.SymbolicCRing.ring", "link" : "provingground\/functionfinder\/NatRing$.html#ring:spire.algebra.Ring[A]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/functionfinder\/NatRing$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/functionfinder\/NatRing$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/functionfinder\/NatRing$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/functionfinder\/NatRing$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/functionfinder\/NatRing$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/functionfinder\/NatRing$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/functionfinder\/NatRing$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/NatRing$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/NatRing$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/NatRing$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/functionfinder\/NatRing$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/functionfinder\/NatRing$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/functionfinder\/NatRing$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/functionfinder\/NatRing$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/functionfinder\/NatRing$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/functionfinder\/NatRing$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/functionfinder\/NatRing$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/functionfinder\/NatRing$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.functionfinder.NatTypLong", "shortDescription" : "", "object" : "provingground\/functionfinder\/NatTypLong$.html", "members_object" : [{"label" : "Elem", "tail" : "", "member" : "provingground.HoTT.Typ.Elem", "link" : "provingground\/HoTT$$Typ.html#Elem", "kind" : "object"}, {"label" : "neg", "tail" : ": Func[RepTerm[Long], RepTerm[Long]]", "member" : "provingground.functionfinder.NatTypLong.neg", "link" : "provingground\/functionfinder\/NatTypLong$.html#neg:provingground.HoTT.Func[provingground.functionfinder.RepTerm[Long],provingground.functionfinder.RepTerm[Long]]", "kind" : "val"}, {"label" : "prod", "tail" : ": Func[RepTerm[Long], Func[RepTerm[Long], RepTerm[Long]]]", "member" : "provingground.functionfinder.NatTypLong.prod", "link" : "provingground\/functionfinder\/NatTypLong$.html#prod:provingground.HoTT.Func[provingground.functionfinder.RepTerm[Long],provingground.HoTT.Func[provingground.functionfinder.RepTerm[Long],provingground.functionfinder.RepTerm[Long]]]", "kind" : "val"}, {"label" : "sum", "tail" : ": Func[RepTerm[Long], Func[RepTerm[Long], RepTerm[Long]]]", "member" : "provingground.functionfinder.NatTypLong.sum", "link" : "provingground\/functionfinder\/NatTypLong$.html#sum:provingground.HoTT.Func[provingground.functionfinder.RepTerm[Long],provingground.HoTT.Func[provingground.functionfinder.RepTerm[Long],provingground.functionfinder.RepTerm[Long]]]", "kind" : "val"}, {"label" : "succ", "tail" : ": Func[RepTerm[Long], RepTerm[Long]]", "member" : "provingground.functionfinder.NatTypLong.succ", "link" : "provingground\/functionfinder\/NatTypLong$.html#succ:provingground.HoTT.Func[provingground.functionfinder.RepTerm[Long],provingground.functionfinder.RepTerm[Long]]", "kind" : "val"}, {"label" : "zero", "tail" : ": RepTerm[Long]", "member" : "provingground.functionfinder.NatTypLong.zero", "link" : "provingground\/functionfinder\/NatTypLong$.html#zero:provingground.functionfinder.RepTerm[Long]", "kind" : "val"}, {"label" : "rep", "tail" : ": ScalaRep[RepTerm[Long], Long]", "member" : "provingground.functionfinder.ScalaTyp.rep", "link" : "provingground\/functionfinder\/NatTypLong$.html#rep:provingground.functionfinder.ScalaRep[provingground.functionfinder.RepTerm[A],A]", "kind" : "implicit val"}, {"label" : "subs", "tail" : "(x: Term, y: Term): Typ[RepTerm[Long]] with Subs[Typ[RepTerm[Long]]]", "member" : "provingground.functionfinder.ScalaTyp.subs", "link" : "provingground\/functionfinder\/NatTypLong$.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.HoTT.Typ[provingground.functionfinder.RepTerm[A]]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.functionfinder.RepTerm[A]]]", "kind" : "def"}, {"label" : "newobj", "tail" : "(): Nothing", "member" : "provingground.functionfinder.ScalaTyp.newobj", "link" : "provingground\/functionfinder\/NatTypLong$.html#newobj:Nothing", "kind" : "def"}, {"label" : "variable", "tail" : "(name: AnySym): RepTerm[Long]", "member" : "provingground.functionfinder.ScalaTyp.variable", "link" : "provingground\/functionfinder\/NatTypLong$.html#variable(name:provingground.HoTT.AnySym):provingground.functionfinder.RepTerm[A]", "kind" : "def"}, {"label" : "typ", "tail" : ": ScalaTypUniv[Long]", "member" : "provingground.functionfinder.ScalaTyp.typ", "link" : "provingground\/functionfinder\/NatTypLong$.html#typ:provingground.functionfinder.ScalaTypUniv[A]", "kind" : "val"}, {"label" : "Obj", "tail" : "", "member" : "provingground.functionfinder.ScalaTyp.Obj", "link" : "provingground\/functionfinder\/NatTypLong$.html#Obj=provingground.functionfinder.RepTerm[A]", "kind" : "type"}, {"label" : "++", "tail" : "(those: V): SigmaTyp[UU, VV]", "member" : "provingground.HoTT.Typ.++", "link" : "provingground\/functionfinder\/NatTypLong$.html#++[UU>:provingground.HoTT.Typ[U]<:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[UU],VV<:provingground.HoTT.Termwithprovingground.HoTT.Subs[VV],V<:provingground.HoTT.Typ[VV]withprovingground.HoTT.Subs[V]](those:V):provingground.HoTT.SigmaTyp[UU,VV]", "kind" : "def"}, {"label" : "||", "tail" : "(that: Typ[V]): PlusTyp[UU, V]", "member" : "provingground.HoTT.Typ.||", "link" : "provingground\/functionfinder\/NatTypLong$.html#||[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](that:provingground.HoTT.Typ[V]):provingground.HoTT.PlusTyp[UU,V]", "kind" : "def"}, {"label" : "&&", "tail" : "(that: Typ[V]): ProdTyp[UU, V]", "member" : "provingground.HoTT.Typ.&&", "link" : "provingground\/functionfinder\/NatTypLong$.html#&&[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](that:provingground.HoTT.Typ[V]):provingground.HoTT.ProdTyp[UU,V]", "kind" : "def"}, {"label" : "~>:", "tail" : "(variable: V): GenFuncTyp[V, UU]", "member" : "provingground.HoTT.Typ.~>:", "link" : "provingground\/functionfinder\/NatTypLong$.html#~>:[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](variable:V):provingground.HoTT.GenFuncTyp[V,UU]", "kind" : "def"}, {"label" : "->:", "tail" : "(that: Typ[W]): FuncTyp[W, UU]", "member" : "provingground.HoTT.Typ.->:", "link" : "provingground\/functionfinder\/NatTypLong$.html#->:[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU]](that:provingground.HoTT.Typ[W]):provingground.HoTT.FuncTyp[W,UU]", "kind" : "def"}, {"label" : "typedVar", "tail" : "(): TypedTerm[RepTerm[Long]]", "member" : "provingground.HoTT.Typ.typedVar", "link" : "provingground\/functionfinder\/NatTypLong$.html#typedVar:provingground.HoTT.TypedTerm[U]", "kind" : "def"}, {"label" : "Var", "tail" : "(): RepTerm[Long] with Subs[RepTerm[Long]]", "member" : "provingground.HoTT.Typ.Var", "link" : "provingground\/functionfinder\/NatTypLong$.html#Var:Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "::", "tail" : "(name: String): RepTerm[Long] with Subs[RepTerm[Long]]", "member" : "provingground.HoTT.Typ.::", "link" : "provingground\/functionfinder\/NatTypLong$.html#::(name:String):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "typedVar", "tail" : "(name: AnySym): TypedTerm[RepTerm[Long]]", "member" : "provingground.HoTT.Typ.typedVar", "link" : "provingground\/functionfinder\/NatTypLong$.html#typedVar(name:provingground.HoTT.AnySym):provingground.HoTT.TypedTerm[U]", "kind" : "def"}, {"label" : "symbObj", "tail" : "(name: AnySym): RepTerm[Long] with Subs[RepTerm[Long]]", "member" : "provingground.HoTT.Typ.symbObj", "link" : "provingground\/functionfinder\/NatTypLong$.html#symbObj(name:provingground.HoTT.AnySym):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "typlevel", "tail" : ": Int", "member" : "provingground.HoTT.Typ.typlevel", "link" : "provingground\/functionfinder\/NatTypLong$.html#typlevel:Int", "kind" : "lazy val"}, {"label" : "typed", "tail" : ": TypedTerm[Typ[Term]]", "member" : "provingground.HoTT.Typ.typed", "link" : "provingground\/functionfinder\/NatTypLong$.html#typed:provingground.HoTT.TypedTerm[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "!:", "tail" : "(term: Term): RepTerm[Long]", "member" : "provingground.HoTT.Typ.!:", "link" : "provingground\/functionfinder\/NatTypLong$.html#!:(term:provingground.HoTT.Term):U", "kind" : "def"}, {"label" : "obj", "tail" : "(): RepTerm[Long]", "member" : "provingground.HoTT.Typ.obj", "link" : "provingground\/functionfinder\/NatTypLong$.html#obj:U", "kind" : "def"}, {"label" : "usesVar", "tail" : "(t: Term): Boolean", "member" : "provingground.HoTT.Term.usesVar", "link" : "provingground\/functionfinder\/NatTypLong$.html#usesVar(t:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "indepOf", "tail" : "(that: Term): Boolean", "member" : "provingground.HoTT.Term.indepOf", "link" : "provingground\/functionfinder\/NatTypLong$.html#indepOf(that:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "dependsOn", "tail" : "(that: Term): Boolean", "member" : "provingground.HoTT.Term.dependsOn", "link" : "provingground\/functionfinder\/NatTypLong$.html#dependsOn(that:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "replace", "tail" : "(x: Term, y: Term): Typ[RepTerm[Long]] with Subs[Typ[RepTerm[Long]]]", "member" : "provingground.HoTT.Subs.replace", "link" : "provingground\/functionfinder\/NatTypLong$.html#replace(x:provingground.HoTT.Term,y:provingground.HoTT.Term):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/functionfinder\/NatTypLong$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/functionfinder\/NatTypLong$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/functionfinder\/NatTypLong$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/functionfinder\/NatTypLong$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/functionfinder\/NatTypLong$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/functionfinder\/NatTypLong$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/functionfinder\/NatTypLong$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/NatTypLong$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/NatTypLong$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/NatTypLong$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/functionfinder\/NatTypLong$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/functionfinder\/NatTypLong$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/functionfinder\/NatTypLong$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/functionfinder\/NatTypLong$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/functionfinder\/NatTypLong$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/functionfinder\/NatTypLong$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/functionfinder\/NatTypLong$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/functionfinder\/NatTypLong$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/functionfinder\/NatTypLong$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.functionfinder.NatVecTyps", "shortDescription" : "", "object" : "provingground\/functionfinder\/NatVecTyps$.html", "members_object" : [{"label" : "cons", "tail" : ": FuncLike[Nat, Func[Nat, Func[RepTerm[Vector[SafeLong]], RepTerm[Vector[SafeLong]]]]]", "member" : "provingground.functionfinder.VecTyps.cons", "link" : "provingground\/functionfinder\/NatVecTyps$.html#cons:provingground.HoTT.FuncLike[provingground.functionfinder.NatRing.Nat,provingground.HoTT.Func[U,provingground.HoTT.Func[provingground.functionfinder.RepTerm[Vector[X]],provingground.functionfinder.RepTerm[Vector[X]]]]]", "kind" : "val"}, {"label" : "consLike", "tail" : ": FuncLike[RepTerm[SafeLong], FuncLike[Nat, FuncLike[RepTerm[Vector[SafeLong]], RepTerm[Vector[SafeLong]]]]]", "member" : "provingground.functionfinder.VecTyps.consLike", "link" : "provingground\/functionfinder\/NatVecTyps$.html#consLike:provingground.HoTT.FuncLike[provingground.functionfinder.RepTerm[spire.math.SafeLong],provingground.HoTT.FuncLike[U,provingground.HoTT.FuncLike[provingground.functionfinder.RepTerm[Vector[X]],provingground.functionfinder.RepTerm[Vector[X]]]]]", "kind" : "val"}, {"label" : "consRep", "tail" : ": ScalaPolyRep[FuncLike[RepTerm[SafeLong], FuncLike[Nat, FuncLike[RepTerm[Vector[SafeLong]], RepTerm[Vector[SafeLong]]]]], (SafeLong) ⇒ (SafeLong) ⇒ (Vector[SafeLong]) ⇒ Vector[SafeLong]]", "member" : "provingground.functionfinder.VecTyps.consRep", "link" : "provingground\/functionfinder\/NatVecTyps$.html#consRep:provingground.functionfinder.ScalaPolyRep[provingground.HoTT.FuncLike[provingground.functionfinder.RepTerm[spire.math.SafeLong],provingground.HoTT.FuncLike[U,provingground.HoTT.FuncLike[provingground.functionfinder.RepTerm[Vector[X]],provingground.functionfinder.RepTerm[Vector[X]]]]],spire.math.SafeLong=>(X=>(Vector[X]=>Vector[X]))]", "kind" : "val"}, {"label" : "consFn", "tail" : ": (SafeLong) ⇒ (SafeLong) ⇒ (Vector[SafeLong]) ⇒ Vector[SafeLong]", "member" : "provingground.functionfinder.VecTyps.consFn", "link" : "provingground\/functionfinder\/NatVecTyps$.html#consFn:spire.math.SafeLong=>(X=>(Vector[X]=>scala.collection.immutable.Vector[X]))", "kind" : "val"}, {"label" : "consTyp", "tail" : ": GenFuncTyp[RepTerm[SafeLong] with Subs[RepTerm[SafeLong]], Func[Nat, Func[RepTerm[Vector[SafeLong]], RepTerm[Vector[SafeLong]]]]]", "member" : "provingground.functionfinder.VecTyps.consTyp", "link" : "provingground\/functionfinder\/NatVecTyps$.html#consTyp:provingground.HoTT.GenFuncTyp[provingground.functionfinder.RepTerm[spire.math.SafeLong]withprovingground.HoTT.Subs[provingground.functionfinder.RepTerm[spire.math.SafeLong]],provingground.HoTT.Func[U,provingground.HoTT.Func[provingground.functionfinder.RepTerm[Vector[X]],provingground.functionfinder.RepTerm[Vector[X]]]]]", "kind" : "val"}, {"label" : "NilVec", "tail" : ": RepTerm[Vector[SafeLong]]", "member" : "provingground.functionfinder.VecTyps.NilVec", "link" : "provingground\/functionfinder\/NatVecTyps$.html#NilVec:provingground.functionfinder.RepTerm[Vector[X]]", "kind" : "val"}, {"label" : "Vec", "tail" : ": Func[RepTerm[SafeLong], Typ[RepTerm[Vector[SafeLong]]]]", "member" : "provingground.functionfinder.VecTyps.Vec", "link" : "provingground\/functionfinder\/NatVecTyps$.html#Vec:provingground.HoTT.Func[provingground.functionfinder.RepTerm[spire.math.SafeLong],provingground.HoTT.Typ[provingground.functionfinder.RepTerm[Vector[X]]]]", "kind" : "val"}, {"label" : "n", "tail" : ": RepTerm[SafeLong] with Subs[RepTerm[SafeLong]]", "member" : "provingground.functionfinder.VecTyps.n", "link" : "provingground\/functionfinder\/NatVecTyps$.html#n:provingground.functionfinder.RepTerm[spire.math.SafeLong]withprovingground.HoTT.Subs[provingground.functionfinder.RepTerm[spire.math.SafeLong]]", "kind" : "val"}, {"label" : "vrep", "tail" : ": ScalaPolyRep[RepTerm[Vector[SafeLong]], Vector[SafeLong]]", "member" : "provingground.functionfinder.VecTyps.vrep", "link" : "provingground\/functionfinder\/NatVecTyps$.html#vrep:provingground.functionfinder.ScalaPolyRep[provingground.functionfinder.RepTerm[Vector[X]],Vector[X]]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/functionfinder\/NatVecTyps$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/functionfinder\/NatVecTyps$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/functionfinder\/NatVecTyps$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/functionfinder\/NatVecTyps$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/functionfinder\/NatVecTyps$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/functionfinder\/NatVecTyps$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/functionfinder\/NatVecTyps$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/NatVecTyps$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/NatVecTyps$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/NatVecTyps$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/functionfinder\/NatVecTyps$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/functionfinder\/NatVecTyps$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/functionfinder\/NatVecTyps$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/functionfinder\/NatVecTyps$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/functionfinder\/NatVecTyps$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/functionfinder\/NatVecTyps$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/functionfinder\/NatVecTyps$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/functionfinder\/NatVecTyps$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/functionfinder\/NatVecTyps$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.functionfinder.Norm", "shortDescription" : "", "object" : "provingground\/functionfinder\/Norm$.html", "members_object" : [{"label" : "supWeight", "tail" : "(fn: FuncLike[Term, Term])(x: Term): Double", "member" : "provingground.functionfinder.Norm.supWeight", "link" : "provingground\/functionfinder\/Norm$.html#supWeight(fn:provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term])(x:provingground.HoTT.Term):Double", "kind" : "def"}, {"label" : "supWeightExp", "tail" : "(fn: FuncLike[Term, Term])(x: Term): Option[Double]", "member" : "provingground.functionfinder.Norm.supWeightExp", "link" : "provingground\/functionfinder\/Norm$.html#supWeightExp(fn:provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term])(x:provingground.HoTT.Term):Option[Double]", "kind" : "def"}, {"label" : "supnorm", "tail" : "(term: Term): Option[Double]", "member" : "provingground.functionfinder.Norm.supnorm", "link" : "provingground\/functionfinder\/Norm$.html#supnorm(term:provingground.HoTT.Term):Option[Double]", "kind" : "def"}, {"label" : "maxopt", "tail" : "(l: List[Option[Double]]): Option[Double]", "member" : "provingground.functionfinder.Norm.maxopt", "link" : "provingground\/functionfinder\/Norm$.html#maxopt(l:List[Option[Double]]):Option[Double]", "kind" : "def"}, {"label" : "foldopt", "tail" : "(op: (U, U) ⇒ U)(l: List[Option[U]]): Option[U]", "member" : "provingground.functionfinder.Norm.foldopt", "link" : "provingground\/functionfinder\/Norm$.html#foldopt[U](op:(U,U)=>U)(l:List[Option[U]]):Option[U]", "kind" : "def"}, {"label" : "optop", "tail" : "(op: (U, U) ⇒ U)(a: Option[U], b: Option[U]): Option[U]", "member" : "provingground.functionfinder.Norm.optop", "link" : "provingground\/functionfinder\/Norm$.html#optop[U,V](op:(U,U)=>U)(a:Option[U],b:Option[U]):Option[U]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/functionfinder\/Norm$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/functionfinder\/Norm$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/functionfinder\/Norm$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/functionfinder\/Norm$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/functionfinder\/Norm$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/functionfinder\/Norm$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/functionfinder\/Norm$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/Norm$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/Norm$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/Norm$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/functionfinder\/Norm$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/functionfinder\/Norm$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/functionfinder\/Norm$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/functionfinder\/Norm$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/functionfinder\/Norm$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/functionfinder\/Norm$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/functionfinder\/Norm$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/functionfinder\/Norm$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/functionfinder\/Norm$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.functionfinder.PlusTypInduc", "shortDescription" : "", "object" : "provingground\/functionfinder\/PlusTypInduc$.html", "members_object" : [{"label" : "induc", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Func[Term, Typ[Term]] with Subs[Func[Term, Typ[Term]]], FuncLike[FuncLike[Term, Term] with Subs[FuncLike[Term, Term]], FuncLike[FuncLike[Term, Term] with Subs[FuncLike[Term, Term]], PlusExtendedDepFunction[Term]]]]]]", "member" : "provingground.functionfinder.PlusTypInduc.induc", "link" : "provingground\/functionfinder\/PlusTypInduc$.html#induc:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]],provingground.HoTT.FuncLike[provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term]],provingground.functionfinder.PlusTypInduc.PlusExtendedDepFunction[provingground.HoTT.Term]]]]]]", "kind" : "val"}, {"label" : "gdep", "tail" : ": FuncLike[Term, Term] with Subs[FuncLike[Term, Term]]", "member" : "provingground.functionfinder.PlusTypInduc.gdep", "link" : "provingground\/functionfinder\/PlusTypInduc$.html#gdep:provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "fdep", "tail" : ": FuncLike[Term, Term] with Subs[FuncLike[Term, Term]]", "member" : "provingground.functionfinder.PlusTypInduc.fdep", "link" : "provingground\/functionfinder\/PlusTypInduc$.html#fdep:provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "C_b", "tail" : ": FuncLike[Term with Subs[Term], Typ[Term]]", "member" : "provingground.functionfinder.PlusTypInduc.C_b", "link" : "provingground\/functionfinder\/PlusTypInduc$.html#C_b:provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "C_a", "tail" : ": FuncLike[Term with Subs[Term], Typ[Term]]", "member" : "provingground.functionfinder.PlusTypInduc.C_a", "link" : "provingground\/functionfinder\/PlusTypInduc$.html#C_a:provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "b", "tail" : ": Term with Subs[Term]", "member" : "provingground.functionfinder.PlusTypInduc.b", "link" : "provingground\/functionfinder\/PlusTypInduc$.html#b:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "a", "tail" : ": Term with Subs[Term]", "member" : "provingground.functionfinder.PlusTypInduc.a", "link" : "provingground\/functionfinder\/PlusTypInduc$.html#a:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "Cs", "tail" : ": Func[Term, Typ[Term]] with Subs[Func[Term, Typ[Term]]]", "member" : "provingground.functionfinder.PlusTypInduc.Cs", "link" : "provingground\/functionfinder\/PlusTypInduc$.html#Cs:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "AplusB", "tail" : ": PlusTyp[Term, Term]", "member" : "provingground.functionfinder.PlusTypInduc.AplusB", "link" : "provingground\/functionfinder\/PlusTypInduc$.html#AplusB:provingground.HoTT.PlusTyp[provingground.HoTT.Term,provingground.HoTT.Term]", "kind" : "val"}, {"label" : "rec", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Func[Term, Term] with Subs[Func[Term, Term]], FuncLike[Func[Term, Term] with Subs[Func[Term, Term]], PlusExtendedFunction[Term]]]]]]", "member" : "provingground.functionfinder.PlusTypInduc.rec", "link" : "provingground\/functionfinder\/PlusTypInduc$.html#rec:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]],provingground.functionfinder.PlusTypInduc.PlusExtendedFunction[provingground.HoTT.Term]]]]]]", "kind" : "val"}, {"label" : "g", "tail" : ": Func[Term, Term] with Subs[Func[Term, Term]]", "member" : "provingground.functionfinder.PlusTypInduc.g", "link" : "provingground\/functionfinder\/PlusTypInduc$.html#g:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "f", "tail" : ": Func[Term, Term] with Subs[Func[Term, Term]]", "member" : "provingground.functionfinder.PlusTypInduc.f", "link" : "provingground\/functionfinder\/PlusTypInduc$.html#f:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "C", "tail" : ": Typ[Term] with Subs[Typ[Term]]", "member" : "provingground.functionfinder.PlusTypInduc.C", "link" : "provingground\/functionfinder\/PlusTypInduc$.html#C:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "B", "tail" : ": Typ[Term] with Subs[Typ[Term]]", "member" : "provingground.functionfinder.PlusTypInduc.B", "link" : "provingground\/functionfinder\/PlusTypInduc$.html#B:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "A", "tail" : ": Typ[Term] with Subs[Typ[Term]]", "member" : "provingground.functionfinder.PlusTypInduc.A", "link" : "provingground\/functionfinder\/PlusTypInduc$.html#A:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "PlusExtendedDepFunction", "tail" : "", "member" : "provingground.functionfinder.PlusTypInduc.PlusExtendedDepFunction", "link" : "provingground\/functionfinder\/PlusTypInduc$.html#PlusExtendedDepFunction[V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]]extendsHoTT.FuncLike[provingground.HoTT.Term,V]withHoTT.Subs[provingground.functionfinder.PlusTypInduc.PlusExtendedDepFunction[V]]withProductwithSerializable", "kind" : "case class"}, {"label" : "PlusExtendedFunction", "tail" : "", "member" : "provingground.functionfinder.PlusTypInduc.PlusExtendedFunction", "link" : "provingground\/functionfinder\/PlusTypInduc$.html#PlusExtendedFunction[V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]]extendsHoTT.Func[provingground.HoTT.Term,V]withHoTT.Subs[provingground.functionfinder.PlusTypInduc.PlusExtendedFunction[V]]withProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/functionfinder\/PlusTypInduc$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/functionfinder\/PlusTypInduc$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/functionfinder\/PlusTypInduc$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/functionfinder\/PlusTypInduc$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/functionfinder\/PlusTypInduc$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/functionfinder\/PlusTypInduc$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/functionfinder\/PlusTypInduc$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/PlusTypInduc$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/PlusTypInduc$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/PlusTypInduc$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/functionfinder\/PlusTypInduc$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/functionfinder\/PlusTypInduc$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/functionfinder\/PlusTypInduc$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/functionfinder\/PlusTypInduc$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/functionfinder\/PlusTypInduc$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/functionfinder\/PlusTypInduc$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/functionfinder\/PlusTypInduc$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/functionfinder\/PlusTypInduc$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/functionfinder\/PlusTypInduc$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.functionfinder.RecEnum", "shortDescription" : "", "object" : "provingground\/functionfinder\/RecEnum$.html", "members_object" : [{"label" : "recEnumList", "tail" : ": (Typ[Term]) ⇒ Option[List[Term]]", "member" : "provingground.functionfinder.RecEnum.recEnumList", "link" : "provingground\/functionfinder\/RecEnum$.html#recEnumList:provingground.HoTT.Typ[provingground.HoTT.Term]=>Option[List[provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/functionfinder\/RecEnum$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/functionfinder\/RecEnum$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/functionfinder\/RecEnum$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/functionfinder\/RecEnum$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/functionfinder\/RecEnum$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/functionfinder\/RecEnum$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/functionfinder\/RecEnum$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/RecEnum$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/RecEnum$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/RecEnum$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/functionfinder\/RecEnum$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/functionfinder\/RecEnum$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/functionfinder\/RecEnum$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/functionfinder\/RecEnum$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/functionfinder\/RecEnum$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/functionfinder\/RecEnum$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/functionfinder\/RecEnum$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/functionfinder\/RecEnum$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/functionfinder\/RecEnum$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.functionfinder.RepTerm", "members_trait" : [{"label" : "refl", "tail" : "(): Refl[RepTerm[A]]", "member" : "provingground.HoTT.RichTerm.refl", "link" : "provingground\/functionfinder\/RepTerm.html#refl:provingground.HoTT.Refl[U]", "kind" : "def"}, {"label" : ":~>", "tail" : "(that: V): FuncLike[RepTerm[A], V]", "member" : "provingground.HoTT.RichTerm.:~>", "link" : "provingground\/functionfinder\/RepTerm.html#:~>[V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](that:V):provingground.HoTT.FuncLike[U,V]", "kind" : "def"}, {"label" : ":->", "tail" : "(that: V): Func[RepTerm[A], V]", "member" : "provingground.HoTT.RichTerm.:->", "link" : "provingground\/functionfinder\/RepTerm.html#:->[V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](that:V):provingground.HoTT.Func[U,V]", "kind" : "def"}, {"label" : "=:=", "tail" : "(rhs: RepTerm[A]): IdentityTyp[RepTerm[A]]", "member" : "provingground.HoTT.RichTerm.=:=", "link" : "provingground\/functionfinder\/RepTerm.html#=:=(rhs:U):provingground.HoTT.IdentityTyp[U]", "kind" : "def"}, {"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/functionfinder\/RepTerm.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/functionfinder\/RepTerm.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (RepTerm[A]) ⇒ Boolean, msg: ⇒ Any): RepTerm[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/functionfinder\/RepTerm.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (RepTerm[A]) ⇒ Boolean): RepTerm[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/functionfinder\/RepTerm.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): RepTerm[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/functionfinder\/RepTerm.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): RepTerm[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/functionfinder\/RepTerm.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (RepTerm[A], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/functionfinder\/RepTerm.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (RepTerm[A], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/functionfinder\/RepTerm.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "usesVar", "tail" : "(t: Term): Boolean", "member" : "provingground.HoTT.Term.usesVar", "link" : "provingground\/functionfinder\/RepTerm.html#usesVar(t:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "indepOf", "tail" : "(that: Term): Boolean", "member" : "provingground.HoTT.Term.indepOf", "link" : "provingground\/functionfinder\/RepTerm.html#indepOf(that:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "dependsOn", "tail" : "(that: Term): Boolean", "member" : "provingground.HoTT.Term.dependsOn", "link" : "provingground\/functionfinder\/RepTerm.html#dependsOn(that:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "typed", "tail" : ": TypedTerm[U] forSome {type U >: RepTerm.this.type <: Term with Subs[U]}", "member" : "provingground.HoTT.Term.typed", "link" : "provingground\/functionfinder\/RepTerm.html#typed:provingground.HoTT.TypedTerm[U]forSome{typeU>:Term.this.type<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]}", "kind" : "lazy val"}, {"label" : "replace", "tail" : "(x: Term, y: Term): RepTerm[A] with Subs[RepTerm[A]]", "member" : "provingground.HoTT.Subs.replace", "link" : "provingground\/functionfinder\/RepTerm.html#replace(x:provingground.HoTT.Term,y:provingground.HoTT.Term):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/functionfinder\/RepTerm.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/functionfinder\/RepTerm.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/functionfinder\/RepTerm.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/functionfinder\/RepTerm.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/functionfinder\/RepTerm.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/functionfinder\/RepTerm.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/functionfinder\/RepTerm.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/RepTerm.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/RepTerm.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/RepTerm.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/functionfinder\/RepTerm.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/functionfinder\/RepTerm.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/functionfinder\/RepTerm.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/functionfinder\/RepTerm.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/functionfinder\/RepTerm.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/functionfinder\/RepTerm.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/functionfinder\/RepTerm.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/functionfinder\/RepTerm.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/functionfinder\/RepTerm.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "typ", "tail" : ": Typ[RepTerm[A]]", "member" : "provingground.functionfinder.RepTerm.typ", "link" : "provingground\/functionfinder\/RepTerm.html#typ:provingground.HoTT.Typ[provingground.functionfinder.RepTerm[A]]", "kind" : "abstract val"}, {"label" : "newobj", "tail" : "(): RepTerm[A] with Subs[RepTerm[A]]", "member" : "provingground.HoTT.Subs.newobj", "link" : "provingground\/functionfinder\/RepTerm.html#newobj:Uwithprovingground.HoTT.Subs[U]", "kind" : "abstract def"}, {"label" : "subs", "tail" : "(x: Term, y: Term): RepTerm[A] with Subs[RepTerm[A]]", "member" : "provingground.HoTT.Subs.subs", "link" : "provingground\/functionfinder\/RepTerm.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):Uwithprovingground.HoTT.Subs[U]", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "provingground\/functionfinder\/RepTerm.html", "kind" : "trait"}, {"name" : "provingground.functionfinder.ScalaPolyRep", "members_trait" : [{"label" : "getTerm", "tail" : "(typ: Typ[Term]): U", "member" : "provingground.functionfinder.ScalaPolyRep.ScalaPolyTerm.getTerm", "link" : "provingground\/functionfinder\/ScalaPolyRep.html#getTerm(typ:provingground.HoTT.Typ[provingground.HoTT.Term]):U", "kind" : "def"}, {"label" : "hott", "tail" : "(typ: Typ[Term]): Option[U]", "member" : "provingground.functionfinder.ScalaPolyRep.ScalaPolyTerm.hott", "link" : "provingground\/functionfinder\/ScalaPolyRep.html#hott(typ:provingground.HoTT.Typ[provingground.HoTT.Term]):Option[U]", "kind" : "def"}, {"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/functionfinder\/ScalaPolyRep.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/functionfinder\/ScalaPolyRep.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ScalaPolyRep[U, W]) ⇒ Boolean, msg: ⇒ Any): ScalaPolyRep[U, W]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/functionfinder\/ScalaPolyRep.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ScalaPolyRep[U, W]) ⇒ Boolean): ScalaPolyRep[U, W]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/functionfinder\/ScalaPolyRep.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): ScalaPolyRep[U, W]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/functionfinder\/ScalaPolyRep.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ScalaPolyRep[U, W]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/functionfinder\/ScalaPolyRep.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ScalaPolyRep[U, W], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/functionfinder\/ScalaPolyRep.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ScalaPolyRep[U, W], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/functionfinder\/ScalaPolyRep.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "||", "tail" : "(that: ScalaPolyRep[U, W]): OrScalaPolyRep[U, W]", "member" : "provingground.functionfinder.ScalaPolyRep.||", "link" : "provingground\/functionfinder\/ScalaPolyRep.html#||(that:provingground.functionfinder.ScalaPolyRep[U,W]):provingground.functionfinder.ScalaPolyRep.OrScalaPolyRep[U,W]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/functionfinder\/ScalaPolyRep.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/functionfinder\/ScalaPolyRep.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/functionfinder\/ScalaPolyRep.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/functionfinder\/ScalaPolyRep.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/functionfinder\/ScalaPolyRep.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/functionfinder\/ScalaPolyRep.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/functionfinder\/ScalaPolyRep.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/ScalaPolyRep.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/ScalaPolyRep.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/ScalaPolyRep.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/functionfinder\/ScalaPolyRep.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/functionfinder\/ScalaPolyRep.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/functionfinder\/ScalaPolyRep.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/functionfinder\/ScalaPolyRep.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/functionfinder\/ScalaPolyRep.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/functionfinder\/ScalaPolyRep.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/functionfinder\/ScalaPolyRep.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/functionfinder\/ScalaPolyRep.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/functionfinder\/ScalaPolyRep.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "subs", "tail" : "(x: Term, y: Term): ScalaPolyRep[U, W]", "member" : "provingground.functionfinder.ScalaPolyRep.subs", "link" : "provingground\/functionfinder\/ScalaPolyRep.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.functionfinder.ScalaPolyRep[U,W]", "kind" : "abstract def"}, {"label" : "unapply", "tail" : "(term: U): Option[W]", "member" : "provingground.functionfinder.ScalaPolyRep.unapply", "link" : "provingground\/functionfinder\/ScalaPolyRep.html#unapply(term:U):Option[W]", "kind" : "abstract def"}, {"label" : "apply", "tail" : "(typ: Typ[Term])(elem: W): Option[U]", "member" : "provingground.functionfinder.ScalaPolyRep.apply", "link" : "provingground\/functionfinder\/ScalaPolyRep.html#apply(typ:provingground.HoTT.Typ[provingground.HoTT.Term])(elem:W):Option[U]", "kind" : "abstract def"}], "shortDescription" : "", "object" : "provingground\/functionfinder\/ScalaPolyRep$.html", "members_object" : [{"label" : "ExtendedDepFunction", "tail" : "", "member" : "provingground.functionfinder.ScalaPolyRep.ExtendedDepFunction", "link" : "provingground\/functionfinder\/ScalaPolyRep$.html#ExtendedDepFunction[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V,X<:provingground.HoTT.Termwithprovingground.HoTT.Subs[X],Y]extendsHoTT.FuncLike[U,X]withProductwithSerializable", "kind" : "case class"}, {"label" : "ExtendedFunction", "tail" : "", "member" : "provingground.functionfinder.ScalaPolyRep.ExtendedFunction", "link" : "provingground\/functionfinder\/ScalaPolyRep$.html#ExtendedFunction[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V,X<:provingground.HoTT.Termwithprovingground.HoTT.Subs[X],Y]extendsHoTT.Func[U,X]withProductwithSerializable", "kind" : "case class"}, {"label" : "funcPolyRep", "tail" : "(domrep: ScalaPolyRep[U, W], codrep: ScalaPolyRep[X, Y]): ScalaPolyRep[Func[U, X], (W) ⇒ Y]", "member" : "provingground.functionfinder.ScalaPolyRep.funcPolyRep", "link" : "provingground\/functionfinder\/ScalaPolyRep$.html#funcPolyRep[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],W,X<:provingground.HoTT.Termwithprovingground.HoTT.Subs[X],Y](implicitdomrep:provingground.functionfinder.ScalaPolyRep[U,W],implicitcodrep:provingground.functionfinder.ScalaPolyRep[X,Y]):provingground.functionfinder.ScalaPolyRep[provingground.HoTT.Func[U,X],W=>Y]", "kind" : "def"}, {"label" : "poly", "tail" : "(rep: ScalaRep[U, W]): ScalaPolyRep[U, W]", "member" : "provingground.functionfinder.ScalaPolyRep.poly", "link" : "provingground\/functionfinder\/ScalaPolyRep$.html#poly[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],W](implicitrep:provingground.functionfinder.ScalaRep[U,W]):provingground.functionfinder.ScalaPolyRep[U,W]", "kind" : "implicit def"}, {"label" : "depFuncPolyRep", "tail" : "(domrep: ScalaPolyRep[U, W], codrep: ScalaPolyRep[X, Y]): ScalaPolyRep[FuncLike[U, X], (W) ⇒ Y]", "member" : "provingground.functionfinder.ScalaPolyRep.depFuncPolyRep", "link" : "provingground\/functionfinder\/ScalaPolyRep$.html#depFuncPolyRep[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],W,X<:provingground.HoTT.Termwithprovingground.HoTT.Subs[X],Y](implicitdomrep:provingground.functionfinder.ScalaPolyRep[U,W],implicitcodrep:provingground.functionfinder.ScalaPolyRep[X,Y]):provingground.functionfinder.ScalaPolyRep[provingground.HoTT.FuncLike[U,X],W=>Y]", "kind" : "implicit def"}, {"label" : "PolyTermScala", "tail" : "", "member" : "provingground.functionfinder.ScalaPolyRep.PolyTermScala", "link" : "provingground\/functionfinder\/ScalaPolyRep$.html#PolyTermScala[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsAnyRef", "kind" : "implicit class"}, {"label" : "ScalaPolyTerm", "tail" : "", "member" : "provingground.functionfinder.ScalaPolyRep.ScalaPolyTerm", "link" : "provingground\/functionfinder\/ScalaPolyRep$.html#ScalaPolyTerm[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],W]extendsAnyRef", "kind" : "implicit class"}, {"label" : "PairPolyRep", "tail" : "", "member" : "provingground.functionfinder.ScalaPolyRep.PairPolyRep", "link" : "provingground\/functionfinder\/ScalaPolyRep$.html#PairPolyRep[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],W,X<:provingground.HoTT.Termwithprovingground.HoTT.Subs[X],Y]extendsScalaPolyRep[provingground.HoTT.AbsPair[U,X],(W,Y)]withProductwithSerializable", "kind" : "case class"}, {"label" : "FuncPolyRep", "tail" : "", "member" : "provingground.functionfinder.ScalaPolyRep.FuncPolyRep", "link" : "provingground\/functionfinder\/ScalaPolyRep$.html#FuncPolyRep[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],W,X<:provingground.HoTT.Termwithprovingground.HoTT.Subs[X],Y]extendsScalaPolyRep[provingground.HoTT.Func[U,X],W=>Y]withProductwithSerializable", "kind" : "case class"}, {"label" : "DepFuncPolyRep", "tail" : "", "member" : "provingground.functionfinder.ScalaPolyRep.DepFuncPolyRep", "link" : "provingground\/functionfinder\/ScalaPolyRep$.html#DepFuncPolyRep[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],W,X<:provingground.HoTT.Termwithprovingground.HoTT.Subs[X],Y]extendsScalaPolyRep[provingground.HoTT.FuncLike[U,X],W=>Y]withProductwithSerializable", "kind" : "case class"}, {"label" : "OrScalaPolyRep", "tail" : "", "member" : "provingground.functionfinder.ScalaPolyRep.OrScalaPolyRep", "link" : "provingground\/functionfinder\/ScalaPolyRep$.html#OrScalaPolyRep[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],W]extendsScalaPolyRep[U,W]withProductwithSerializable", "kind" : "case class"}, {"label" : "ScalaRepWrap", "tail" : "", "member" : "provingground.functionfinder.ScalaPolyRep.ScalaRepWrap", "link" : "provingground\/functionfinder\/ScalaPolyRep$.html#ScalaRepWrap[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],W]extendsScalaPolyRep[U,W]withProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/functionfinder\/ScalaPolyRep$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/functionfinder\/ScalaPolyRep$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/functionfinder\/ScalaPolyRep$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/functionfinder\/ScalaPolyRep$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/functionfinder\/ScalaPolyRep$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/functionfinder\/ScalaPolyRep$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/functionfinder\/ScalaPolyRep$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/ScalaPolyRep$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/ScalaPolyRep$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/ScalaPolyRep$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/functionfinder\/ScalaPolyRep$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/functionfinder\/ScalaPolyRep$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/functionfinder\/ScalaPolyRep$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/functionfinder\/ScalaPolyRep$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/functionfinder\/ScalaPolyRep$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/functionfinder\/ScalaPolyRep$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/functionfinder\/ScalaPolyRep$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/functionfinder\/ScalaPolyRep$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/functionfinder\/ScalaPolyRep$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/functionfinder\/ScalaPolyRep.html", "kind" : "trait"}, {"name" : "provingground.functionfinder.ScalaRep", "members_trait" : [{"label" : "term", "tail" : "(): U", "member" : "provingground.functionfinder.ScalaRep.ScalaTerm.term", "link" : "provingground\/functionfinder\/ScalaRep.html#term:U", "kind" : "def"}, {"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/functionfinder\/ScalaRep.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/functionfinder\/ScalaRep.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ScalaRep[U, V]) ⇒ Boolean, msg: ⇒ Any): ScalaRep[U, V]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/functionfinder\/ScalaRep.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ScalaRep[U, V]) ⇒ Boolean): ScalaRep[U, V]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/functionfinder\/ScalaRep.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): ScalaRep[U, V]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/functionfinder\/ScalaRep.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ScalaRep[U, V]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/functionfinder\/ScalaRep.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ScalaRep[U, V], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/functionfinder\/ScalaRep.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ScalaRep[U, V], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/functionfinder\/ScalaRep.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "++", "tail" : "(codrepfmly: (V) ⇒ ScalaRep[X, Y]): SigmaRep[UU, V, X, Y]", "member" : "provingground.functionfinder.ScalaRep.++", "link" : "provingground\/functionfinder\/ScalaRep.html#++[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],X<:provingground.HoTT.Termwithprovingground.HoTT.Subs[X],Y](codrepfmly:V=>provingground.functionfinder.ScalaRep[X,Y]):provingground.functionfinder.ScalaRep.SigmaRep[UU,V,X,Y]", "kind" : "def"}, {"label" : ":-->", "tail" : "(that: Typ[W]): FuncRep[UU, V, W, W]", "member" : "provingground.functionfinder.ScalaRep.:-->", "link" : "provingground\/functionfinder\/ScalaRep.html#:-->[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU]](that:provingground.HoTT.Typ[W]):provingground.functionfinder.ScalaRep.FuncRep[UU,V,W,W]", "kind" : "def"}, {"label" : "-->:", "tail" : "(that: ScalaRep[W, X]): FuncRep[W, X, UU, V]", "member" : "provingground.functionfinder.ScalaRep.-->:", "link" : "provingground\/functionfinder\/ScalaRep.html#-->:[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],X,UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU]](that:provingground.functionfinder.ScalaRep[W,X]):provingground.functionfinder.ScalaRep.FuncRep[W,X,UU,V]", "kind" : "def"}, {"label" : "tpe", "tail" : "", "member" : "provingground.functionfinder.ScalaRep.tpe", "link" : "provingground\/functionfinder\/ScalaRep.html#tpe=V", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/functionfinder\/ScalaRep.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/functionfinder\/ScalaRep.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/functionfinder\/ScalaRep.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/functionfinder\/ScalaRep.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/functionfinder\/ScalaRep.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/functionfinder\/ScalaRep.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/functionfinder\/ScalaRep.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/ScalaRep.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/ScalaRep.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/ScalaRep.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/functionfinder\/ScalaRep.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/functionfinder\/ScalaRep.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/functionfinder\/ScalaRep.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/functionfinder\/ScalaRep.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/functionfinder\/ScalaRep.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/functionfinder\/ScalaRep.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/functionfinder\/ScalaRep.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/functionfinder\/ScalaRep.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/functionfinder\/ScalaRep.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "subs", "tail" : "(x: Term, y: Term): ScalaRep[U, V]", "member" : "provingground.functionfinder.ScalaRep.subs", "link" : "provingground\/functionfinder\/ScalaRep.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.functionfinder.ScalaRep[U,V]", "kind" : "abstract def"}, {"label" : "unapply", "tail" : "(u: Term): Option[V]", "member" : "provingground.functionfinder.ScalaRep.unapply", "link" : "provingground\/functionfinder\/ScalaRep.html#unapply(u:provingground.HoTT.Term):Option[V]", "kind" : "abstract def"}, {"label" : "apply", "tail" : "(v: V): U", "member" : "provingground.functionfinder.ScalaRep.apply", "link" : "provingground\/functionfinder\/ScalaRep.html#apply(v:V):U", "kind" : "abstract def"}, {"label" : "typ", "tail" : ": Typ[U]", "member" : "provingground.functionfinder.ScalaRep.typ", "link" : "provingground\/functionfinder\/ScalaRep.html#typ:provingground.HoTT.Typ[U]", "kind" : "abstract val"}], "shortDescription" : "Representation by a scala object of a HoTT term", "object" : "provingground\/functionfinder\/ScalaRep$.html", "members_object" : [{"label" : "dsl", "tail" : "", "member" : "provingground.functionfinder.ScalaRep.dsl", "link" : "provingground\/functionfinder\/ScalaRep$.html#dsl", "kind" : "object"}, {"label" : "ExtendedDepFunction", "tail" : "", "member" : "provingground.functionfinder.ScalaRep.ExtendedDepFunction", "link" : "provingground\/functionfinder\/ScalaRep$.html#ExtendedDepFunction[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V,X<:provingground.HoTT.Termwithprovingground.HoTT.Subs[X],Y]extendsHoTT.FuncLike[U,X]withProductwithSerializable", "kind" : "case class"}, {"label" : "RepSection", "tail" : "", "member" : "provingground.functionfinder.ScalaRep.RepSection", "link" : "provingground\/functionfinder\/ScalaRep$.html#RepSection[V,X<:provingground.HoTT.Termwithprovingground.HoTT.Subs[X],Y]extendsAnyRef", "kind" : "implicit class"}, {"label" : "FmlyReps", "tail" : "", "member" : "provingground.functionfinder.ScalaRep.FmlyReps", "link" : "provingground\/functionfinder\/ScalaRep$.html#FmlyReps[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],X<:provingground.HoTT.Termwithprovingground.HoTT.Subs[X]]extendsAnyRef", "kind" : "implicit class"}, {"label" : "SimpleExtendedFunction", "tail" : "", "member" : "provingground.functionfinder.ScalaRep.SimpleExtendedFunction", "link" : "provingground\/functionfinder\/ScalaRep$.html#SimpleExtendedFunction[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V,X<:provingground.HoTT.Termwithprovingground.HoTT.Subs[X]]extendsHoTT.Func[U,X]withHoTT.Subs[provingground.functionfinder.ScalaRep.SimpleExtendedFunction[U,V,X]]withProductwithSerializable", "kind" : "case class"}, {"label" : "ExtendedFunction", "tail" : "", "member" : "provingground.functionfinder.ScalaRep.ExtendedFunction", "link" : "provingground\/functionfinder\/ScalaRep$.html#ExtendedFunction[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V,X<:provingground.HoTT.Termwithprovingground.HoTT.Subs[X],Y]extendsHoTT.Func[U,X]withProductwithSerializable", "kind" : "case class"}, {"label" : "ScalaSym", "tail" : "", "member" : "provingground.functionfinder.ScalaRep.ScalaSym", "link" : "provingground\/functionfinder\/ScalaRep$.html#ScalaSym[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V]extendsAnyRef", "kind" : "class"}, {"label" : "SimpleRep", "tail" : "", "member" : "provingground.functionfinder.ScalaRep.SimpleRep", "link" : "provingground\/functionfinder\/ScalaRep$.html#SimpleRep[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V]extendsScalaRep[U,V]withProductwithSerializable", "kind" : "case class"}, {"label" : "ScalaSymbol", "tail" : "", "member" : "provingground.functionfinder.ScalaRep.ScalaSymbol", "link" : "provingground\/functionfinder\/ScalaRep$.html#ScalaSymbol[X]extendsHoTT.AtomicSymwithProductwithSerializable", "kind" : "case class"}, {"label" : "SimpleConst", "tail" : "", "member" : "provingground.functionfinder.ScalaRep.SimpleConst", "link" : "provingground\/functionfinder\/ScalaRep$.html#SimpleConst[V]extendsScalaRep.ConstTerm[V]withProductwithSerializable", "kind" : "case class"}, {"label" : "extend", "tail" : "(fn: (T) ⇒ U, FuncLike: FuncLike[Term, U], codom: Typ[U]): (Term) ⇒ U", "member" : "provingground.functionfinder.ScalaRep.extend", "link" : "provingground\/functionfinder\/ScalaRep$.html#extend[T,U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](fn:T=>U,FuncLike:provingground.HoTT.FuncLike[provingground.HoTT.Term,U],codom:provingground.HoTT.Typ[U]):provingground.HoTT.Term=>U", "kind" : "def"}, {"label" : "ConstTerm", "tail" : "", "member" : "provingground.functionfinder.ScalaRep.ConstTerm", "link" : "provingground\/functionfinder\/ScalaRep$.html#ConstTerm[T]extendsHoTT.Term", "kind" : "trait"}, {"label" : "incl", "tail" : "(): (ScalaRep[U, V], ScalaRep[U, W]) ⇒ Option[(V) ⇒ W]", "member" : "provingground.functionfinder.ScalaRep.incl", "link" : "provingground\/functionfinder\/ScalaRep$.html#incl[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V,W]:(provingground.functionfinder.ScalaRep[U,V],provingground.functionfinder.ScalaRep[U,W])=>Option[V=>W]", "kind" : "def"}, {"label" : "boolRep", "tail" : ": ScalaRep[Term, Boolean]", "member" : "provingground.functionfinder.ScalaRep.boolRep", "link" : "provingground\/functionfinder\/ScalaRep$.html#boolRep:provingground.functionfinder.ScalaRep[provingground.HoTT.Term,Boolean]", "kind" : "implicit val"}, {"label" : "NatInt", "tail" : "", "member" : "provingground.functionfinder.ScalaRep.NatInt", "link" : "provingground\/functionfinder\/ScalaRep$.html#NatInt", "kind" : "object"}, {"label" : "RepSymbObj", "tail" : "", "member" : "provingground.functionfinder.ScalaRep.RepSymbObj", "link" : "provingground\/functionfinder\/ScalaRep$.html#RepSymbObj[A,+U<:provingground.functionfinder.RepTerm[A]withprovingground.HoTT.Subs[U]]extendsRepTerm[A]withHoTT.SymbolicwithProductwithSerializable", "kind" : "case class"}, {"label" : "funcRep", "tail" : "(domrep: ScalaRep[U, V], codomrep: ScalaRep[X, Y]): ScalaRep[Func[U, X], (V) ⇒ Y]", "member" : "provingground.functionfinder.ScalaRep.funcRep", "link" : "provingground\/functionfinder\/ScalaRep$.html#funcRep[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V,X<:provingground.HoTT.Termwithprovingground.HoTT.Subs[X],Y](implicitdomrep:provingground.functionfinder.ScalaRep[U,V],implicitcodomrep:provingground.functionfinder.ScalaRep[X,Y]):provingground.functionfinder.ScalaRep[provingground.HoTT.Func[U,X],V=>Y]", "kind" : "implicit def"}, {"label" : "TermScala", "tail" : "", "member" : "provingground.functionfinder.ScalaRep.TermScala", "link" : "provingground\/functionfinder\/ScalaRep$.html#TermScala[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsAnyRef", "kind" : "implicit class"}, {"label" : "ScalaTerm", "tail" : "", "member" : "provingground.functionfinder.ScalaRep.ScalaTerm", "link" : "provingground\/functionfinder\/ScalaRep$.html#ScalaTerm[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],W]extendsAnyRef", "kind" : "implicit class"}, {"label" : "idRep", "tail" : "(typ: Typ[U]): ScalaRep[U, U]", "member" : "provingground.functionfinder.ScalaRep.idRep", "link" : "provingground\/functionfinder\/ScalaRep$.html#idRep[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](typ:provingground.HoTT.Typ[U]):provingground.functionfinder.ScalaRep[U,U]", "kind" : "implicit def"}, {"label" : "scalaUnivRep", "tail" : "(): ScalaRep[Typ[RepTerm[A]], Typ[RepTerm[A]]]", "member" : "provingground.functionfinder.ScalaRep.scalaUnivRep", "link" : "provingground\/functionfinder\/ScalaRep$.html#scalaUnivRep[A]:provingground.functionfinder.ScalaRep[provingground.HoTT.Typ[provingground.functionfinder.RepTerm[A]],provingground.HoTT.Typ[provingground.functionfinder.RepTerm[A]]]", "kind" : "implicit def"}, {"label" : "UnivRep", "tail" : ": ScalaRep[Typ[Term], Typ[Term]]", "member" : "provingground.functionfinder.ScalaRep.UnivRep", "link" : "provingground\/functionfinder\/ScalaRep$.html#UnivRep:provingground.functionfinder.ScalaRep[provingground.HoTT.Typ[provingground.HoTT.Term],provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "implicit val"}, {"label" : "DepFuncRep", "tail" : "", "member" : "provingground.functionfinder.ScalaRep.DepFuncRep", "link" : "provingground\/functionfinder\/ScalaRep$.html#DepFuncRep[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V,X<:provingground.HoTT.Termwithprovingground.HoTT.Subs[X],Y]extendsScalaRep[provingground.HoTT.FuncLike[U,X],V=>Y]withProductwithSerializable", "kind" : "case class"}, {"label" : "SigmaRep", "tail" : "", "member" : "provingground.functionfinder.ScalaRep.SigmaRep", "link" : "provingground\/functionfinder\/ScalaRep$.html#SigmaRep[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V,X<:provingground.HoTT.Termwithprovingground.HoTT.Subs[X],Y]extendsScalaRep[provingground.HoTT.Term,(V,Y)]withProductwithSerializable", "kind" : "case class"}, {"label" : "SmpleFuncRep", "tail" : "", "member" : "provingground.functionfinder.ScalaRep.SmpleFuncRep", "link" : "provingground\/functionfinder\/ScalaRep$.html#SmpleFuncRep[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V,X<:provingground.HoTT.Termwithprovingground.HoTT.Subs[X]]extendsScalaRep[provingground.HoTT.FuncLike[U,X],V=>X]withProductwithSerializable", "kind" : "case class"}, {"label" : "SimpleFuncRep", "tail" : "", "member" : "provingground.functionfinder.ScalaRep.SimpleFuncRep", "link" : "provingground\/functionfinder\/ScalaRep$.html#SimpleFuncRep", "kind" : "object"}, {"label" : "FuncRep", "tail" : "", "member" : "provingground.functionfinder.ScalaRep.FuncRep", "link" : "provingground\/functionfinder\/ScalaRep$.html#FuncRep[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V,X<:provingground.HoTT.Termwithprovingground.HoTT.Subs[X],Y]extendsScalaRep[provingground.HoTT.Func[U,X],V=>Y]withProductwithSerializable", "kind" : "case class"}, {"label" : "IdTypRep", "tail" : "", "member" : "provingground.functionfinder.ScalaRep.IdTypRep", "link" : "provingground\/functionfinder\/ScalaRep$.html#IdTypRep[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsScalaRep[provingground.HoTT.Typ[U],provingground.HoTT.Typ[U]]withProductwithSerializable", "kind" : "case class"}, {"label" : "IdRep", "tail" : "", "member" : "provingground.functionfinder.ScalaRep.IdRep", "link" : "provingground\/functionfinder\/ScalaRep$.html#IdRep[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsScalaRep[U,U]withProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/functionfinder\/ScalaRep$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/functionfinder\/ScalaRep$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/functionfinder\/ScalaRep$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/functionfinder\/ScalaRep$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/functionfinder\/ScalaRep$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/functionfinder\/ScalaRep$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/functionfinder\/ScalaRep$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/ScalaRep$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/ScalaRep$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/ScalaRep$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/functionfinder\/ScalaRep$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/functionfinder\/ScalaRep$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/functionfinder\/ScalaRep$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/functionfinder\/ScalaRep$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/functionfinder\/ScalaRep$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/functionfinder\/ScalaRep$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/functionfinder\/ScalaRep$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/functionfinder\/ScalaRep$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/functionfinder\/ScalaRep$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/functionfinder\/ScalaRep.html", "kind" : "trait"}, {"name" : "provingground.functionfinder.ScalaTyp", "shortDescription" : "", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/functionfinder\/ScalaTyp.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/functionfinder\/ScalaTyp.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ScalaTyp[A]) ⇒ Boolean, msg: ⇒ Any): ScalaTyp[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/functionfinder\/ScalaTyp.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ScalaTyp[A]) ⇒ Boolean): ScalaTyp[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/functionfinder\/ScalaTyp.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): ScalaTyp[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/functionfinder\/ScalaTyp.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ScalaTyp[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/functionfinder\/ScalaTyp.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ScalaTyp[A], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/functionfinder\/ScalaTyp.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ScalaTyp[A], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/functionfinder\/ScalaTyp.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "Elem", "tail" : "", "member" : "provingground.HoTT.Typ.Elem", "link" : "provingground\/HoTT$$Typ.html#Elem", "kind" : "object"}, {"label" : "rep", "tail" : ": ScalaRep[RepTerm[A], A]", "member" : "provingground.functionfinder.ScalaTyp.rep", "link" : "provingground\/functionfinder\/ScalaTyp.html#rep:provingground.functionfinder.ScalaRep[provingground.functionfinder.RepTerm[A],A]", "kind" : "implicit val"}, {"label" : "subs", "tail" : "(x: Term, y: Term): Typ[RepTerm[A]] with Subs[Typ[RepTerm[A]]]", "member" : "provingground.functionfinder.ScalaTyp.subs", "link" : "provingground\/functionfinder\/ScalaTyp.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.HoTT.Typ[provingground.functionfinder.RepTerm[A]]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.functionfinder.RepTerm[A]]]", "kind" : "def"}, {"label" : "newobj", "tail" : "(): Nothing", "member" : "provingground.functionfinder.ScalaTyp.newobj", "link" : "provingground\/functionfinder\/ScalaTyp.html#newobj:Nothing", "kind" : "def"}, {"label" : "variable", "tail" : "(name: AnySym): RepTerm[A]", "member" : "provingground.functionfinder.ScalaTyp.variable", "link" : "provingground\/functionfinder\/ScalaTyp.html#variable(name:provingground.HoTT.AnySym):provingground.functionfinder.RepTerm[A]", "kind" : "def"}, {"label" : "typ", "tail" : ": ScalaTypUniv[A]", "member" : "provingground.functionfinder.ScalaTyp.typ", "link" : "provingground\/functionfinder\/ScalaTyp.html#typ:provingground.functionfinder.ScalaTypUniv[A]", "kind" : "val"}, {"label" : "Obj", "tail" : "", "member" : "provingground.functionfinder.ScalaTyp.Obj", "link" : "provingground\/functionfinder\/ScalaTyp.html#Obj=provingground.functionfinder.RepTerm[A]", "kind" : "type"}, {"member" : "provingground.functionfinder.ScalaTyp#<init>", "error" : "unsupported entity"}, {"label" : "++", "tail" : "(those: V): SigmaTyp[UU, VV]", "member" : "provingground.HoTT.Typ.++", "link" : "provingground\/functionfinder\/ScalaTyp.html#++[UU>:provingground.HoTT.Typ[U]<:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[UU],VV<:provingground.HoTT.Termwithprovingground.HoTT.Subs[VV],V<:provingground.HoTT.Typ[VV]withprovingground.HoTT.Subs[V]](those:V):provingground.HoTT.SigmaTyp[UU,VV]", "kind" : "def"}, {"label" : "||", "tail" : "(that: Typ[V]): PlusTyp[UU, V]", "member" : "provingground.HoTT.Typ.||", "link" : "provingground\/functionfinder\/ScalaTyp.html#||[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](that:provingground.HoTT.Typ[V]):provingground.HoTT.PlusTyp[UU,V]", "kind" : "def"}, {"label" : "&&", "tail" : "(that: Typ[V]): ProdTyp[UU, V]", "member" : "provingground.HoTT.Typ.&&", "link" : "provingground\/functionfinder\/ScalaTyp.html#&&[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](that:provingground.HoTT.Typ[V]):provingground.HoTT.ProdTyp[UU,V]", "kind" : "def"}, {"label" : "~>:", "tail" : "(variable: V): GenFuncTyp[V, UU]", "member" : "provingground.HoTT.Typ.~>:", "link" : "provingground\/functionfinder\/ScalaTyp.html#~>:[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](variable:V):provingground.HoTT.GenFuncTyp[V,UU]", "kind" : "def"}, {"label" : "->:", "tail" : "(that: Typ[W]): FuncTyp[W, UU]", "member" : "provingground.HoTT.Typ.->:", "link" : "provingground\/functionfinder\/ScalaTyp.html#->:[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU]](that:provingground.HoTT.Typ[W]):provingground.HoTT.FuncTyp[W,UU]", "kind" : "def"}, {"label" : "typedVar", "tail" : "(): TypedTerm[RepTerm[A]]", "member" : "provingground.HoTT.Typ.typedVar", "link" : "provingground\/functionfinder\/ScalaTyp.html#typedVar:provingground.HoTT.TypedTerm[U]", "kind" : "def"}, {"label" : "Var", "tail" : "(): RepTerm[A] with Subs[RepTerm[A]]", "member" : "provingground.HoTT.Typ.Var", "link" : "provingground\/functionfinder\/ScalaTyp.html#Var:Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "::", "tail" : "(name: String): RepTerm[A] with Subs[RepTerm[A]]", "member" : "provingground.HoTT.Typ.::", "link" : "provingground\/functionfinder\/ScalaTyp.html#::(name:String):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "typedVar", "tail" : "(name: AnySym): TypedTerm[RepTerm[A]]", "member" : "provingground.HoTT.Typ.typedVar", "link" : "provingground\/functionfinder\/ScalaTyp.html#typedVar(name:provingground.HoTT.AnySym):provingground.HoTT.TypedTerm[U]", "kind" : "def"}, {"label" : "symbObj", "tail" : "(name: AnySym): RepTerm[A] with Subs[RepTerm[A]]", "member" : "provingground.HoTT.Typ.symbObj", "link" : "provingground\/functionfinder\/ScalaTyp.html#symbObj(name:provingground.HoTT.AnySym):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "typlevel", "tail" : ": Int", "member" : "provingground.HoTT.Typ.typlevel", "link" : "provingground\/functionfinder\/ScalaTyp.html#typlevel:Int", "kind" : "lazy val"}, {"label" : "typed", "tail" : ": TypedTerm[Typ[Term]]", "member" : "provingground.HoTT.Typ.typed", "link" : "provingground\/functionfinder\/ScalaTyp.html#typed:provingground.HoTT.TypedTerm[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "!:", "tail" : "(term: Term): RepTerm[A]", "member" : "provingground.HoTT.Typ.!:", "link" : "provingground\/functionfinder\/ScalaTyp.html#!:(term:provingground.HoTT.Term):U", "kind" : "def"}, {"label" : "obj", "tail" : "(): RepTerm[A]", "member" : "provingground.HoTT.Typ.obj", "link" : "provingground\/functionfinder\/ScalaTyp.html#obj:U", "kind" : "def"}, {"label" : "usesVar", "tail" : "(t: Term): Boolean", "member" : "provingground.HoTT.Term.usesVar", "link" : "provingground\/functionfinder\/ScalaTyp.html#usesVar(t:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "indepOf", "tail" : "(that: Term): Boolean", "member" : "provingground.HoTT.Term.indepOf", "link" : "provingground\/functionfinder\/ScalaTyp.html#indepOf(that:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "dependsOn", "tail" : "(that: Term): Boolean", "member" : "provingground.HoTT.Term.dependsOn", "link" : "provingground\/functionfinder\/ScalaTyp.html#dependsOn(that:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "replace", "tail" : "(x: Term, y: Term): Typ[RepTerm[A]] with Subs[Typ[RepTerm[A]]]", "member" : "provingground.HoTT.Subs.replace", "link" : "provingground\/functionfinder\/ScalaTyp.html#replace(x:provingground.HoTT.Term,y:provingground.HoTT.Term):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/functionfinder\/ScalaTyp.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/functionfinder\/ScalaTyp.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/functionfinder\/ScalaTyp.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/functionfinder\/ScalaTyp.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/functionfinder\/ScalaTyp.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/functionfinder\/ScalaTyp.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/functionfinder\/ScalaTyp.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/ScalaTyp.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/ScalaTyp.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/ScalaTyp.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/functionfinder\/ScalaTyp.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/functionfinder\/ScalaTyp.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/functionfinder\/ScalaTyp.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/functionfinder\/ScalaTyp.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/functionfinder\/ScalaTyp.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/functionfinder\/ScalaTyp.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/functionfinder\/ScalaTyp.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/functionfinder\/ScalaTyp.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/functionfinder\/ScalaTyp.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/functionfinder\/ScalaTyp.html", "kind" : "class"}, {"name" : "provingground.functionfinder.ScalaTypUniv", "shortDescription" : "", "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/functionfinder\/ScalaTypUniv.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/functionfinder\/ScalaTypUniv.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ScalaTypUniv[A]) ⇒ Boolean, msg: ⇒ Any): ScalaTypUniv[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/functionfinder\/ScalaTypUniv.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ScalaTypUniv[A]) ⇒ Boolean): ScalaTypUniv[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/functionfinder\/ScalaTypUniv.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): ScalaTypUniv[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/functionfinder\/ScalaTypUniv.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ScalaTypUniv[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/functionfinder\/ScalaTypUniv.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ScalaTypUniv[A], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/functionfinder\/ScalaTypUniv.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ScalaTypUniv[A], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/functionfinder\/ScalaTypUniv.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "Elem", "tail" : "", "member" : "provingground.HoTT.Typ.Elem", "link" : "provingground\/HoTT$$Typ.html#Elem", "kind" : "object"}, {"label" : "variable", "tail" : "(name: AnySym): SymbScalaTyp[A]", "member" : "provingground.functionfinder.ScalaTypUniv.variable", "link" : "provingground\/functionfinder\/ScalaTypUniv.html#variable(name:provingground.HoTT.AnySym):provingground.functionfinder.SymbScalaTyp[A]", "kind" : "def"}, {"label" : "newobj", "tail" : "(): Nothing", "member" : "provingground.functionfinder.ScalaTypUniv.newobj", "link" : "provingground\/functionfinder\/ScalaTypUniv.html#newobj:Nothing", "kind" : "def"}, {"label" : "subs", "tail" : "(x: Term, y: Term): ScalaTypUniv[A]", "member" : "provingground.functionfinder.ScalaTypUniv.subs", "link" : "provingground\/functionfinder\/ScalaTypUniv.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.functionfinder.ScalaTypUniv[A]", "kind" : "def"}, {"label" : "Obj", "tail" : "", "member" : "provingground.functionfinder.ScalaTypUniv.Obj", "link" : "provingground\/functionfinder\/ScalaTypUniv.html#Obj=provingground.HoTT.Typ[provingground.functionfinder.RepTerm[A]]", "kind" : "type"}, {"label" : "typ", "tail" : ": HigherUniv[Typ[RepTerm[A]]]", "member" : "provingground.functionfinder.ScalaTypUniv.typ", "link" : "provingground\/functionfinder\/ScalaTypUniv.html#typ:provingground.functionfinder.ScalaUniv.HigherUniv[provingground.HoTT.Typ[provingground.functionfinder.RepTerm[A]]]", "kind" : "lazy val"}, {"member" : "provingground.functionfinder.ScalaTypUniv#<init>", "error" : "unsupported entity"}, {"label" : "equals", "tail" : "(a: Any): Boolean", "member" : "provingground.HoTT.BaseUniv.equals", "link" : "provingground\/functionfinder\/ScalaTypUniv.html#equals(a:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : ": Int", "member" : "provingground.HoTT.BaseUniv.hashCode", "link" : "provingground\/functionfinder\/ScalaTypUniv.html#hashCode:Int", "kind" : "lazy val"}, {"label" : "++", "tail" : "(those: V): SigmaTyp[UU, VV]", "member" : "provingground.HoTT.Typ.++", "link" : "provingground\/functionfinder\/ScalaTypUniv.html#++[UU>:provingground.HoTT.Typ[U]<:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[UU],VV<:provingground.HoTT.Termwithprovingground.HoTT.Subs[VV],V<:provingground.HoTT.Typ[VV]withprovingground.HoTT.Subs[V]](those:V):provingground.HoTT.SigmaTyp[UU,VV]", "kind" : "def"}, {"label" : "||", "tail" : "(that: Typ[V]): PlusTyp[UU, V]", "member" : "provingground.HoTT.Typ.||", "link" : "provingground\/functionfinder\/ScalaTypUniv.html#||[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](that:provingground.HoTT.Typ[V]):provingground.HoTT.PlusTyp[UU,V]", "kind" : "def"}, {"label" : "&&", "tail" : "(that: Typ[V]): ProdTyp[UU, V]", "member" : "provingground.HoTT.Typ.&&", "link" : "provingground\/functionfinder\/ScalaTypUniv.html#&&[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](that:provingground.HoTT.Typ[V]):provingground.HoTT.ProdTyp[UU,V]", "kind" : "def"}, {"label" : "~>:", "tail" : "(variable: V): GenFuncTyp[V, UU]", "member" : "provingground.HoTT.Typ.~>:", "link" : "provingground\/functionfinder\/ScalaTypUniv.html#~>:[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](variable:V):provingground.HoTT.GenFuncTyp[V,UU]", "kind" : "def"}, {"label" : "->:", "tail" : "(that: Typ[W]): FuncTyp[W, UU]", "member" : "provingground.HoTT.Typ.->:", "link" : "provingground\/functionfinder\/ScalaTypUniv.html#->:[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU]](that:provingground.HoTT.Typ[W]):provingground.HoTT.FuncTyp[W,UU]", "kind" : "def"}, {"label" : "typedVar", "tail" : "(): TypedTerm[Typ[RepTerm[A]]]", "member" : "provingground.HoTT.Typ.typedVar", "link" : "provingground\/functionfinder\/ScalaTypUniv.html#typedVar:provingground.HoTT.TypedTerm[U]", "kind" : "def"}, {"label" : "Var", "tail" : "(): Typ[RepTerm[A]] with Subs[Typ[RepTerm[A]]]", "member" : "provingground.HoTT.Typ.Var", "link" : "provingground\/functionfinder\/ScalaTypUniv.html#Var:Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "::", "tail" : "(name: String): Typ[RepTerm[A]] with Subs[Typ[RepTerm[A]]]", "member" : "provingground.HoTT.Typ.::", "link" : "provingground\/functionfinder\/ScalaTypUniv.html#::(name:String):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "typedVar", "tail" : "(name: AnySym): TypedTerm[Typ[RepTerm[A]]]", "member" : "provingground.HoTT.Typ.typedVar", "link" : "provingground\/functionfinder\/ScalaTypUniv.html#typedVar(name:provingground.HoTT.AnySym):provingground.HoTT.TypedTerm[U]", "kind" : "def"}, {"label" : "symbObj", "tail" : "(name: AnySym): Typ[RepTerm[A]] with Subs[Typ[RepTerm[A]]]", "member" : "provingground.HoTT.Typ.symbObj", "link" : "provingground\/functionfinder\/ScalaTypUniv.html#symbObj(name:provingground.HoTT.AnySym):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "typlevel", "tail" : ": Int", "member" : "provingground.HoTT.Typ.typlevel", "link" : "provingground\/functionfinder\/ScalaTypUniv.html#typlevel:Int", "kind" : "lazy val"}, {"label" : "typed", "tail" : ": TypedTerm[Typ[Term]]", "member" : "provingground.HoTT.Typ.typed", "link" : "provingground\/functionfinder\/ScalaTypUniv.html#typed:provingground.HoTT.TypedTerm[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "!:", "tail" : "(term: Term): Typ[RepTerm[A]]", "member" : "provingground.HoTT.Typ.!:", "link" : "provingground\/functionfinder\/ScalaTypUniv.html#!:(term:provingground.HoTT.Term):U", "kind" : "def"}, {"label" : "obj", "tail" : "(): Typ[RepTerm[A]]", "member" : "provingground.HoTT.Typ.obj", "link" : "provingground\/functionfinder\/ScalaTypUniv.html#obj:U", "kind" : "def"}, {"label" : "usesVar", "tail" : "(t: Term): Boolean", "member" : "provingground.HoTT.Term.usesVar", "link" : "provingground\/functionfinder\/ScalaTypUniv.html#usesVar(t:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "indepOf", "tail" : "(that: Term): Boolean", "member" : "provingground.HoTT.Term.indepOf", "link" : "provingground\/functionfinder\/ScalaTypUniv.html#indepOf(that:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "dependsOn", "tail" : "(that: Term): Boolean", "member" : "provingground.HoTT.Term.dependsOn", "link" : "provingground\/functionfinder\/ScalaTypUniv.html#dependsOn(that:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "replace", "tail" : "(x: Term, y: Term): Typ[Typ[RepTerm[A]]] with Subs[Typ[Typ[RepTerm[A]]]]", "member" : "provingground.HoTT.Subs.replace", "link" : "provingground\/functionfinder\/ScalaTypUniv.html#replace(x:provingground.HoTT.Term,y:provingground.HoTT.Term):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/functionfinder\/ScalaTypUniv.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/functionfinder\/ScalaTypUniv.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/functionfinder\/ScalaTypUniv.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/functionfinder\/ScalaTypUniv.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/functionfinder\/ScalaTypUniv.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/functionfinder\/ScalaTypUniv.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/functionfinder\/ScalaTypUniv.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/ScalaTypUniv.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/ScalaTypUniv.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/ScalaTypUniv.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/functionfinder\/ScalaTypUniv.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/functionfinder\/ScalaTypUniv.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/functionfinder\/ScalaTypUniv.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/functionfinder\/ScalaTypUniv.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/functionfinder\/ScalaTypUniv.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/functionfinder\/ScalaTypUniv.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/functionfinder\/ScalaTypUniv.html", "kind" : "case class"}, {"name" : "provingground.functionfinder.ScalaUniv", "shortDescription" : "Wrapper for universe with refined scala type for objects (i.e., types) in it.", "object" : "provingground\/functionfinder\/ScalaUniv$.html", "members_object" : [{"label" : "typFamily", "tail" : "(dom: Typ[W], f: (W) ⇒ Typ[U])(su: ScalaUniv[U]): FuncDefn[W, Typ[U]]", "member" : "provingground.functionfinder.ScalaUniv.typFamily", "link" : "provingground\/functionfinder\/ScalaUniv$.html#typFamily[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](dom:provingground.HoTT.Typ[W],f:W=>provingground.HoTT.Typ[U])(implicitsu:provingground.functionfinder.ScalaUniv[U]):provingground.HoTT.FuncDefn[W,provingground.HoTT.Typ[U]]", "kind" : "def"}, {"label" : "DepFunc", "tail" : "", "member" : "provingground.functionfinder.ScalaUniv.DepFunc", "link" : "provingground\/functionfinder\/ScalaUniv$.html#DepFunc", "kind" : "object"}, {"label" : "RichTypFamily", "tail" : "", "member" : "provingground.functionfinder.ScalaUniv.RichTypFamily", "link" : "provingground\/functionfinder\/ScalaUniv$.html#RichTypFamily[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsAnyRef", "kind" : "implicit class"}, {"label" : "depFunc", "tail" : "(dom: Typ[W], func: (W) ⇒ U)(su: ScalaUniv[U]): FuncLike[W, U]", "member" : "provingground.functionfinder.ScalaUniv.depFunc", "link" : "provingground\/functionfinder\/ScalaUniv$.html#depFunc[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](dom:provingground.HoTT.Typ[W],func:W=>U)(implicitsu:provingground.functionfinder.ScalaUniv[U]):provingground.HoTT.FuncLike[W,U]", "kind" : "def"}, {"label" : "piUniv", "tail" : "(domsc: ScalaUniv[W], codomsc: ScalaUniv[U]): ScalaUniv[FuncLike[W, U]]", "member" : "provingground.functionfinder.ScalaUniv.piUniv", "link" : "provingground\/functionfinder\/ScalaUniv$.html#piUniv[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](implicitdomsc:provingground.functionfinder.ScalaUniv[W],implicitcodomsc:provingground.functionfinder.ScalaUniv[U]):provingground.functionfinder.ScalaUniv[provingground.HoTT.FuncLike[W,U]]", "kind" : "implicit def"}, {"label" : "funcUniv", "tail" : "(domsc: ScalaUniv[W], codomsc: ScalaUniv[U]): ScalaUniv[Func[W, U]]", "member" : "provingground.functionfinder.ScalaUniv.funcUniv", "link" : "provingground\/functionfinder\/ScalaUniv$.html#funcUniv[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](implicitdomsc:provingground.functionfinder.ScalaUniv[W],implicitcodomsc:provingground.functionfinder.ScalaUniv[U]):provingground.functionfinder.ScalaUniv[provingground.HoTT.Func[W,U]]", "kind" : "implicit def"}, {"label" : "newobj", "tail" : "(): Nothing", "member" : "provingground.functionfinder.ScalaUniv.newobj", "link" : "provingground\/functionfinder\/ScalaUniv$.html#newobj:Nothing", "kind" : "def"}, {"label" : "higherUniv", "tail" : "(sc: ScalaUniv[U]): ScalaUniv[Typ[U]]", "member" : "provingground.functionfinder.ScalaUniv.higherUniv", "link" : "provingground\/functionfinder\/ScalaUniv$.html#higherUniv[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](implicitsc:provingground.functionfinder.ScalaUniv[U]):provingground.functionfinder.ScalaUniv[provingground.HoTT.Typ[U]]", "kind" : "implicit def"}, {"label" : "baseUniv", "tail" : ": ScalaUniv[Term]", "member" : "provingground.functionfinder.ScalaUniv.baseUniv", "link" : "provingground\/functionfinder\/ScalaUniv$.html#baseUniv:provingground.functionfinder.ScalaUniv[provingground.HoTT.Term]", "kind" : "implicit val"}, {"label" : "FineUniv", "tail" : "", "member" : "provingground.functionfinder.ScalaUniv.FineUniv", "link" : "provingground\/functionfinder\/ScalaUniv$.html#FineUniv[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsHoTT.Typ[provingground.HoTT.Typ[U]]withHoTT.BaseUnivwithProductwithSerializable", "kind" : "case class"}, {"label" : "FineSymbTyp", "tail" : "", "member" : "provingground.functionfinder.ScalaUniv.FineSymbTyp", "link" : "provingground\/functionfinder\/ScalaUniv$.html#FineSymbTyp[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsHoTT.Typ[U]withHoTT.SymbolicwithProductwithSerializable", "kind" : "case class"}, {"label" : "PiTypUniv", "tail" : "", "member" : "provingground.functionfinder.ScalaUniv.PiTypUniv", "link" : "provingground\/functionfinder\/ScalaUniv$.html#PiTypUniv[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsHoTT.Typ[provingground.HoTT.PiTyp[W,U]]withProductwithSerializable", "kind" : "case class"}, {"label" : "FuncTypUniv", "tail" : "", "member" : "provingground.functionfinder.ScalaUniv.FuncTypUniv", "link" : "provingground\/functionfinder\/ScalaUniv$.html#FuncTypUniv[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsHoTT.Typ[provingground.HoTT.FuncTyp[W,U]]withProductwithSerializable", "kind" : "case class"}, {"label" : "HigherUniv", "tail" : "", "member" : "provingground.functionfinder.ScalaUniv.HigherUniv", "link" : "provingground\/functionfinder\/ScalaUniv$.html#HigherUniv[U<:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[U]]extendsHoTT.Typ[provingground.HoTT.Typ[U]]withProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/functionfinder\/ScalaUniv$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/functionfinder\/ScalaUniv$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/functionfinder\/ScalaUniv$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/functionfinder\/ScalaUniv$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/functionfinder\/ScalaUniv$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/functionfinder\/ScalaUniv$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/functionfinder\/ScalaUniv$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/ScalaUniv$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/ScalaUniv$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/ScalaUniv$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/functionfinder\/ScalaUniv$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/functionfinder\/ScalaUniv$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/functionfinder\/ScalaUniv$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/functionfinder\/ScalaUniv$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/functionfinder\/ScalaUniv$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/functionfinder\/ScalaUniv$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/functionfinder\/ScalaUniv$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/functionfinder\/ScalaUniv$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/functionfinder\/ScalaUniv$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/functionfinder\/ScalaUniv.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/functionfinder\/ScalaUniv.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ScalaUniv[U]) ⇒ Boolean, msg: ⇒ Any): ScalaUniv[U]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/functionfinder\/ScalaUniv.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ScalaUniv[U]) ⇒ Boolean): ScalaUniv[U]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/functionfinder\/ScalaUniv.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): ScalaUniv[U]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/functionfinder\/ScalaUniv.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ScalaUniv[U]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/functionfinder\/ScalaUniv.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ScalaUniv[U], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/functionfinder\/ScalaUniv.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ScalaUniv[U], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/functionfinder\/ScalaUniv.html#->[B](y:B):(A,B)", "kind" : "def"}, {"member" : "provingground.functionfinder.ScalaUniv#<init>", "error" : "unsupported entity"}, {"label" : "univ", "tail" : ": Typ[Typ[U]]", "member" : "provingground.functionfinder.ScalaUniv.univ", "link" : "provingground\/functionfinder\/ScalaUniv.html#univ:provingground.HoTT.Typ[provingground.HoTT.Typ[U]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/functionfinder\/ScalaUniv.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/functionfinder\/ScalaUniv.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/functionfinder\/ScalaUniv.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/functionfinder\/ScalaUniv.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/functionfinder\/ScalaUniv.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/functionfinder\/ScalaUniv.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/functionfinder\/ScalaUniv.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/ScalaUniv.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/ScalaUniv.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/ScalaUniv.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/functionfinder\/ScalaUniv.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/functionfinder\/ScalaUniv.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/functionfinder\/ScalaUniv.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/functionfinder\/ScalaUniv.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/functionfinder\/ScalaUniv.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/functionfinder\/ScalaUniv.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/functionfinder\/ScalaUniv.html", "kind" : "case class"}, {"name" : "provingground.functionfinder.ScalaVec", "shortDescription" : "", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/functionfinder\/ScalaVec.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/functionfinder\/ScalaVec.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ScalaVec[X]) ⇒ Boolean, msg: ⇒ Any): ScalaVec[X]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/functionfinder\/ScalaVec.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ScalaVec[X]) ⇒ Boolean): ScalaVec[X]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/functionfinder\/ScalaVec.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): ScalaVec[X]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/functionfinder\/ScalaVec.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ScalaVec[X]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/functionfinder\/ScalaVec.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ScalaVec[X], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/functionfinder\/ScalaVec.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ScalaVec[X], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/functionfinder\/ScalaVec.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "empty", "tail" : ": RepTerm[Vector[X]]", "member" : "provingground.functionfinder.ScalaVec.empty", "link" : "provingground\/functionfinder\/ScalaVec.html#empty:provingground.functionfinder.RepTerm[Vector[X]]", "kind" : "val"}, {"label" : "succ", "tail" : ": FuncLike[RepTerm[Long], FuncLike[RepTerm[X], FuncLike[RepTerm[Vector[X]], RepTerm[Vector[X]]]]]", "member" : "provingground.functionfinder.ScalaVec.succ", "link" : "provingground\/functionfinder\/ScalaVec.html#succ:provingground.HoTT.FuncLike[provingground.functionfinder.RepTerm[Long],provingground.HoTT.FuncLike[provingground.functionfinder.RepTerm[X],provingground.HoTT.FuncLike[provingground.functionfinder.RepTerm[Vector[X]],provingground.functionfinder.RepTerm[Vector[X]]]]]", "kind" : "val"}, {"label" : "r", "tail" : ": ScalaPolyRep[FuncLike[RepTerm[Long], FuncLike[RepTerm[X], FuncLike[RepTerm[Vector[X]], RepTerm[Vector[X]]]]], (Long) ⇒ (X) ⇒ (Vector[X]) ⇒ Vector[X]]", "member" : "provingground.functionfinder.ScalaVec.r", "link" : "provingground\/functionfinder\/ScalaVec.html#r:provingground.functionfinder.ScalaPolyRep[provingground.HoTT.FuncLike[provingground.functionfinder.RepTerm[Long],provingground.HoTT.FuncLike[provingground.functionfinder.RepTerm[X],provingground.HoTT.FuncLike[provingground.functionfinder.RepTerm[Vector[X]],provingground.functionfinder.RepTerm[Vector[X]]]]],Long=>(X=>(Vector[X]=>Vector[X]))]", "kind" : "implicit val"}, {"label" : "m", "tail" : ": RepTerm[Long]", "member" : "provingground.functionfinder.ScalaVec.m", "link" : "provingground\/functionfinder\/ScalaVec.html#m:provingground.functionfinder.RepTerm[Long]", "kind" : "val"}, {"label" : "size", "tail" : ": Option[FuncLike[RepTerm[Long], FuncLike[RepTerm[Vector[X]], RepTerm[Long]]]]", "member" : "provingground.functionfinder.ScalaVec.size", "link" : "provingground\/functionfinder\/ScalaVec.html#size:Option[provingground.HoTT.FuncLike[provingground.functionfinder.RepTerm[Long],provingground.HoTT.FuncLike[provingground.functionfinder.RepTerm[Vector[X]],provingground.functionfinder.RepTerm[Long]]]]", "kind" : "val"}, {"label" : "Vec", "tail" : ": FuncLike[RepTerm[Long], Typ[Term]]", "member" : "provingground.functionfinder.ScalaVec.Vec", "link" : "provingground\/functionfinder\/ScalaVec.html#Vec:provingground.HoTT.FuncLike[provingground.functionfinder.RepTerm[Long],provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "urep", "tail" : ": ScalaPolyRep[Typ[Term], Typ[Term]]", "member" : "provingground.functionfinder.ScalaVec.urep", "link" : "provingground\/functionfinder\/ScalaVec.html#urep:provingground.functionfinder.ScalaPolyRep[provingground.HoTT.Typ[provingground.HoTT.Term],provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "implicit val"}, {"label" : "nrep", "tail" : ": ScalaPolyRep[RepTerm[Long], Long]", "member" : "provingground.functionfinder.ScalaVec.nrep", "link" : "provingground\/functionfinder\/ScalaVec.html#nrep:provingground.functionfinder.ScalaPolyRep[provingground.functionfinder.RepTerm[Long],Long]", "kind" : "implicit val"}, {"label" : "Rep", "tail" : "", "member" : "provingground.functionfinder.ScalaVec.Rep", "link" : "provingground\/functionfinder\/ScalaVec.html#Rep", "kind" : "implicit object"}, {"label" : "VecTyp", "tail" : "", "member" : "provingground.functionfinder.ScalaVec.VecTyp", "link" : "provingground\/functionfinder\/ScalaVec.html#VecTypextendsScalaTyp[Vector[X]]withProductwithSerializable", "kind" : "case class"}, {"member" : "provingground.functionfinder.ScalaVec#<init>", "error" : "unsupported entity"}, {"label" : "basetyp", "tail" : ": Typ[Term]", "member" : "provingground.functionfinder.ScalaVec.basetyp", "link" : "provingground\/functionfinder\/ScalaVec.html#basetyp:provingground.HoTT.Typ[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/functionfinder\/ScalaVec.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/functionfinder\/ScalaVec.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/functionfinder\/ScalaVec.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/functionfinder\/ScalaVec.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/functionfinder\/ScalaVec.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/functionfinder\/ScalaVec.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/functionfinder\/ScalaVec.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/ScalaVec.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/ScalaVec.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/ScalaVec.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/functionfinder\/ScalaVec.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/functionfinder\/ScalaVec.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/functionfinder\/ScalaVec.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/functionfinder\/ScalaVec.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/functionfinder\/ScalaVec.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/functionfinder\/ScalaVec.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/functionfinder\/ScalaVec.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/functionfinder\/ScalaVec.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/functionfinder\/ScalaVec.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/functionfinder\/ScalaVec.html", "kind" : "class"}, {"name" : "provingground.functionfinder.SigmaPiEnum", "shortDescription" : "", "object" : "provingground\/functionfinder\/SigmaPiEnum$.html", "members_object" : [{"label" : "resPi", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Func[Term, Typ[Term]] with Subs[Func[Term, Typ[Term]]], FuncLike[Term with Subs[Term], Typ[Term]]]]", "member" : "provingground.functionfinder.SigmaPiEnum.resPi", "link" : "provingground\/functionfinder\/SigmaPiEnum$.html#resPi:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Typ[provingground.HoTT.Term]]]]", "kind" : "val"}, {"label" : "resSigma", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Func[Term, Typ[Term]] with Subs[Func[Term, Typ[Term]]], FuncLike[Term with Subs[Term], FuncTyp[Term, DepPair[Term, Term]]]]]", "member" : "provingground.functionfinder.SigmaPiEnum.resSigma", "link" : "provingground\/functionfinder\/SigmaPiEnum$.html#resSigma:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncTyp[provingground.HoTT.Term,provingground.HoTT.DepPair[provingground.HoTT.Term,provingground.HoTT.Term]]]]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/functionfinder\/SigmaPiEnum$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/functionfinder\/SigmaPiEnum$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/functionfinder\/SigmaPiEnum$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/functionfinder\/SigmaPiEnum$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/functionfinder\/SigmaPiEnum$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/functionfinder\/SigmaPiEnum$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/functionfinder\/SigmaPiEnum$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/SigmaPiEnum$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/SigmaPiEnum$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/SigmaPiEnum$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/functionfinder\/SigmaPiEnum$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/functionfinder\/SigmaPiEnum$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/functionfinder\/SigmaPiEnum$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/functionfinder\/SigmaPiEnum$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/functionfinder\/SigmaPiEnum$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/functionfinder\/SigmaPiEnum$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/functionfinder\/SigmaPiEnum$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/functionfinder\/SigmaPiEnum$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/functionfinder\/SigmaPiEnum$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.functionfinder.SymbolicCRing", "shortDescription" : "", "object" : "provingground\/functionfinder\/SymbolicCRing$.html", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/functionfinder\/SymbolicCRing.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/functionfinder\/SymbolicCRing.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SymbolicCRing[A]) ⇒ Boolean, msg: ⇒ Any): SymbolicCRing[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/functionfinder\/SymbolicCRing.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SymbolicCRing[A]) ⇒ Boolean): SymbolicCRing[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/functionfinder\/SymbolicCRing.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): SymbolicCRing[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/functionfinder\/SymbolicCRing.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): SymbolicCRing[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/functionfinder\/SymbolicCRing.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (SymbolicCRing[A], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/functionfinder\/SymbolicCRing.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (SymbolicCRing[A], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/functionfinder\/SymbolicCRing.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "cringStructure", "tail" : ": CRing[LocalTerm]", "member" : "provingground.functionfinder.SymbolicCRing.cringStructure", "link" : "provingground\/functionfinder\/SymbolicCRing.html#cringStructure:spire.algebra.CRing[SymbolicCRing.this.LocalTerm]", "kind" : "implicit val"}, {"label" : "multTerm", "tail" : "", "member" : "provingground.functionfinder.SymbolicCRing.multTerm", "link" : "provingground\/functionfinder\/SymbolicCRing.html#multTermextendsHoTT.Func[SymbolicCRing.this.LocalTerm,SymbolicCRing.this.LocalTerm]withProductwithSerializable", "kind" : "case class"}, {"label" : "multLiteral", "tail" : "", "member" : "provingground.functionfinder.SymbolicCRing.multLiteral", "link" : "provingground\/functionfinder\/SymbolicCRing.html#multLiteralextendsHoTT.Func[SymbolicCRing.this.LocalTerm,SymbolicCRing.this.LocalTerm]withProductwithSerializable", "kind" : "case class"}, {"label" : "prod", "tail" : "", "member" : "provingground.functionfinder.SymbolicCRing.prod", "link" : "provingground\/functionfinder\/SymbolicCRing.html#prod", "kind" : "object"}, {"label" : "power", "tail" : "(x: LocalTerm, n: Int): LocalTerm", "member" : "provingground.functionfinder.SymbolicCRing.power", "link" : "provingground\/functionfinder\/SymbolicCRing.html#power(x:SymbolicCRing.this.LocalTerm,n:Int):SymbolicCRing.this.LocalTerm", "kind" : "def"}, {"label" : "posPower", "tail" : "(x: LocalTerm, n: Int, accum: LocalTerm): LocalTerm", "member" : "provingground.functionfinder.SymbolicCRing.posPower", "link" : "provingground\/functionfinder\/SymbolicCRing.html#posPower(x:SymbolicCRing.this.LocalTerm,n:Int,accum:SymbolicCRing.this.LocalTerm):SymbolicCRing.this.LocalTerm", "kind" : "final def"}, {"label" : "AdditiveMorphism", "tail" : "", "member" : "provingground.functionfinder.SymbolicCRing.AdditiveMorphism", "link" : "provingground\/functionfinder\/SymbolicCRing.html#AdditiveMorphism[U<:SymbolicCRing.this.LocalTermwithprovingground.HoTT.Subs[U]]extendsHoTT.Func[SymbolicCRing.this.LocalTerm,SymbolicCRing.this.LocalTerm]withProductwithSerializable", "kind" : "case class"}, {"label" : "funcSum", "tail" : "(f: (LocalTerm) ⇒ LocalTerm, g: (LocalTerm) ⇒ LocalTerm): Func[RepTerm[A], LocalTerm]", "member" : "provingground.functionfinder.SymbolicCRing.funcSum", "link" : "provingground\/functionfinder\/SymbolicCRing.html#funcSum(f:SymbolicCRing.this.LocalTerm=>SymbolicCRing.this.LocalTerm,g:SymbolicCRing.this.LocalTerm=>SymbolicCRing.this.LocalTerm):provingground.HoTT.Func[provingground.functionfinder.RepTerm[A],SymbolicCRing.this.LocalTerm]", "kind" : "def"}, {"label" : "AddTerm", "tail" : "", "member" : "provingground.functionfinder.SymbolicCRing.AddTerm", "link" : "provingground\/functionfinder\/SymbolicCRing.html#AddTermextendsHoTT.Func[SymbolicCRing.this.LocalTerm,SymbolicCRing.this.LocalTerm]withProductwithSerializable", "kind" : "case class"}, {"label" : "AddLiteral", "tail" : "", "member" : "provingground.functionfinder.SymbolicCRing.AddLiteral", "link" : "provingground\/functionfinder\/SymbolicCRing.html#AddLiteralextendsHoTT.Func[SymbolicCRing.this.LocalTerm,SymbolicCRing.this.LocalTerm]withProductwithSerializable", "kind" : "case class"}, {"label" : "LiteralSum", "tail" : "", "member" : "provingground.functionfinder.SymbolicCRing.LiteralSum", "link" : "provingground\/functionfinder\/SymbolicCRing.html#LiteralSum", "kind" : "object"}, {"label" : "sum", "tail" : "", "member" : "provingground.functionfinder.SymbolicCRing.sum", "link" : "provingground\/functionfinder\/SymbolicCRing.html#sum", "kind" : "object"}, {"label" : "Reciprocal", "tail" : "", "member" : "provingground.functionfinder.SymbolicCRing.Reciprocal", "link" : "provingground\/functionfinder\/SymbolicCRing.html#Reciprocal", "kind" : "object"}, {"label" : "reciprocal", "tail" : ": Func[LocalTerm, LocalTerm]", "member" : "provingground.functionfinder.SymbolicCRing.reciprocal", "link" : "provingground\/functionfinder\/SymbolicCRing.html#reciprocal:provingground.HoTT.Func[SymbolicCRing.this.LocalTerm,SymbolicCRing.this.LocalTerm]", "kind" : "lazy val"}, {"label" : "reciprocalOpt", "tail" : ": Option[Func[LocalTerm, LocalTerm]]", "member" : "provingground.functionfinder.SymbolicCRing.reciprocalOpt", "link" : "provingground\/functionfinder\/SymbolicCRing.html#reciprocalOpt:Option[provingground.HoTT.Func[SymbolicCRing.this.LocalTerm,SymbolicCRing.this.LocalTerm]]", "kind" : "val"}, {"label" : "PiTerm", "tail" : "", "member" : "provingground.functionfinder.SymbolicCRing.PiTerm", "link" : "provingground\/functionfinder\/SymbolicCRing.html#PiTerm", "kind" : "object"}, {"label" : "PiTerm", "tail" : "", "member" : "provingground.functionfinder.SymbolicCRing.PiTerm", "link" : "provingground\/functionfinder\/SymbolicCRing.html#PiTermextendsSymbolicCRing.this.LocalTermwithFoldedTerm[SymbolicCRing.this.LocalTerm]withProductwithSerializable", "kind" : "case class"}, {"label" : "LitProd", "tail" : "", "member" : "provingground.functionfinder.SymbolicCRing.LitProd", "link" : "provingground\/functionfinder\/SymbolicCRing.html#LitProd", "kind" : "object"}, {"label" : "SigmaTerm", "tail" : "", "member" : "provingground.functionfinder.SymbolicCRing.SigmaTerm", "link" : "provingground\/functionfinder\/SymbolicCRing.html#SigmaTerm", "kind" : "object"}, {"label" : "SigmaTerm", "tail" : "", "member" : "provingground.functionfinder.SymbolicCRing.SigmaTerm", "link" : "provingground\/functionfinder\/SymbolicCRing.html#SigmaTermextendsSymbolicCRing.this.LocalTermwithFoldedTerm[SymbolicCRing.this.LocalTerm]withProductwithSerializable", "kind" : "case class"}, {"label" : "Comb", "tail" : "", "member" : "provingground.functionfinder.SymbolicCRing.Comb", "link" : "provingground\/functionfinder\/SymbolicCRing.html#Comb", "kind" : "object"}, {"label" : "Literal", "tail" : "", "member" : "provingground.functionfinder.SymbolicCRing.Literal", "link" : "provingground\/functionfinder\/SymbolicCRing.html#Literal", "kind" : "object"}, {"label" : "LocalTyp", "tail" : "", "member" : "provingground.functionfinder.SymbolicCRing.LocalTyp", "link" : "provingground\/functionfinder\/SymbolicCRing.html#LocalTyp", "kind" : "object"}, {"label" : "Op", "tail" : "", "member" : "provingground.functionfinder.SymbolicCRing.Op", "link" : "provingground\/functionfinder\/SymbolicCRing.html#Op=provingground.HoTT.Func[SymbolicCRing.this.LocalTerm,provingground.HoTT.Func[SymbolicCRing.this.LocalTerm,SymbolicCRing.this.LocalTerm]]", "kind" : "type"}, {"label" : "LocalTerm", "tail" : "", "member" : "provingground.functionfinder.SymbolicCRing.LocalTerm", "link" : "provingground\/functionfinder\/SymbolicCRing.html#LocalTerm=provingground.functionfinder.RepTerm[A]", "kind" : "type"}, {"label" : "negate", "tail" : "(x: LocalTerm): LocalTerm", "member" : "provingground.functionfinder.SymbolicCRing.negate", "link" : "provingground\/functionfinder\/SymbolicCRing.html#negate(x:SymbolicCRing.this.LocalTerm):SymbolicCRing.this.LocalTerm", "kind" : "def"}, {"label" : "minusone", "tail" : ": LocalTerm with Subs[LocalTerm]", "member" : "provingground.functionfinder.SymbolicCRing.minusone", "link" : "provingground\/functionfinder\/SymbolicCRing.html#minusone:SymbolicCRing.this.LocalTermwithprovingground.HoTT.Subs[SymbolicCRing.this.LocalTerm]", "kind" : "val"}, {"label" : "two", "tail" : ": A", "member" : "provingground.functionfinder.SymbolicCRing.two", "link" : "provingground\/functionfinder\/SymbolicCRing.html#two:A", "kind" : "val"}, {"label" : "ring", "tail" : ": Ring[A]", "member" : "provingground.functionfinder.SymbolicCRing.ring", "link" : "provingground\/functionfinder\/SymbolicCRing.html#ring:spire.algebra.Ring[A]", "kind" : "val"}, {"member" : "provingground.functionfinder.SymbolicCRing#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/functionfinder\/SymbolicCRing.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/functionfinder\/SymbolicCRing.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/functionfinder\/SymbolicCRing.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/functionfinder\/SymbolicCRing.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/functionfinder\/SymbolicCRing.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/functionfinder\/SymbolicCRing.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/functionfinder\/SymbolicCRing.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/SymbolicCRing.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/SymbolicCRing.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/SymbolicCRing.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/functionfinder\/SymbolicCRing.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/functionfinder\/SymbolicCRing.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/functionfinder\/SymbolicCRing.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/functionfinder\/SymbolicCRing.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/functionfinder\/SymbolicCRing.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/functionfinder\/SymbolicCRing.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/functionfinder\/SymbolicCRing.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/functionfinder\/SymbolicCRing.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/functionfinder\/SymbolicCRing.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "literal", "tail" : "(term: Term): Option[String]", "member" : "provingground.functionfinder.SymbolicCRing.literal", "link" : "provingground\/functionfinder\/SymbolicCRing$.html#literal(term:provingground.HoTT.Term):Option[String]", "kind" : "def"}, {"label" : "parse", "tail" : "(typ: Typ[Term])(str: String): Option[Term]", "member" : "provingground.functionfinder.SymbolicCRing.parse", "link" : "provingground\/functionfinder\/SymbolicCRing$.html#parse(typ:provingground.HoTT.Typ[provingground.HoTT.Term])(str:String):Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "apply", "tail" : "(term: Term): String", "member" : "provingground.translation.LiteralParser.apply", "link" : "provingground\/functionfinder\/SymbolicCRing$.html#apply(term:provingground.HoTT.Term):String", "kind" : "def"}, {"label" : "unapply", "tail" : "(lit: String, typ: Typ[Term]): Term", "member" : "provingground.translation.LiteralParser.unapply", "link" : "provingground\/functionfinder\/SymbolicCRing$.html#unapply(lit:String,typ:provingground.HoTT.Typ[provingground.HoTT.Term]):provingground.HoTT.Term", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/functionfinder\/SymbolicCRing$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/functionfinder\/SymbolicCRing$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/functionfinder\/SymbolicCRing$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/functionfinder\/SymbolicCRing$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/functionfinder\/SymbolicCRing$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/functionfinder\/SymbolicCRing$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/functionfinder\/SymbolicCRing$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/SymbolicCRing$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/SymbolicCRing$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/SymbolicCRing$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/functionfinder\/SymbolicCRing$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/functionfinder\/SymbolicCRing$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/functionfinder\/SymbolicCRing$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/functionfinder\/SymbolicCRing$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/functionfinder\/SymbolicCRing$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/functionfinder\/SymbolicCRing$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/functionfinder\/SymbolicCRing$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/functionfinder\/SymbolicCRing$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/functionfinder\/SymbolicCRing$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/functionfinder\/SymbolicCRing.html", "kind" : "class"}, {"name" : "provingground.functionfinder.SymbolicField", "shortDescription" : "", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/functionfinder\/SymbolicField.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/functionfinder\/SymbolicField.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SymbolicField[A]) ⇒ Boolean, msg: ⇒ Any): SymbolicField[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/functionfinder\/SymbolicField.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SymbolicField[A]) ⇒ Boolean): SymbolicField[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/functionfinder\/SymbolicField.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): SymbolicField[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/functionfinder\/SymbolicField.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): SymbolicField[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/functionfinder\/SymbolicField.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (SymbolicField[A], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/functionfinder\/SymbolicField.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (SymbolicField[A], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/functionfinder\/SymbolicField.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "multTerm", "tail" : "", "member" : "provingground.functionfinder.SymbolicCRing.multTerm", "link" : "provingground\/functionfinder\/SymbolicCRing.html#multTermextendsHoTT.Func[SymbolicCRing.this.LocalTerm,SymbolicCRing.this.LocalTerm]withProductwithSerializable", "kind" : "case class"}, {"label" : "multLiteral", "tail" : "", "member" : "provingground.functionfinder.SymbolicCRing.multLiteral", "link" : "provingground\/functionfinder\/SymbolicCRing.html#multLiteralextendsHoTT.Func[SymbolicCRing.this.LocalTerm,SymbolicCRing.this.LocalTerm]withProductwithSerializable", "kind" : "case class"}, {"label" : "prod", "tail" : "", "member" : "provingground.functionfinder.SymbolicCRing.prod", "link" : "provingground\/functionfinder\/SymbolicCRing.html#prod", "kind" : "object"}, {"label" : "AdditiveMorphism", "tail" : "", "member" : "provingground.functionfinder.SymbolicCRing.AdditiveMorphism", "link" : "provingground\/functionfinder\/SymbolicCRing.html#AdditiveMorphism[U<:SymbolicCRing.this.LocalTermwithprovingground.HoTT.Subs[U]]extendsHoTT.Func[SymbolicCRing.this.LocalTerm,SymbolicCRing.this.LocalTerm]withProductwithSerializable", "kind" : "case class"}, {"label" : "AddTerm", "tail" : "", "member" : "provingground.functionfinder.SymbolicCRing.AddTerm", "link" : "provingground\/functionfinder\/SymbolicCRing.html#AddTermextendsHoTT.Func[SymbolicCRing.this.LocalTerm,SymbolicCRing.this.LocalTerm]withProductwithSerializable", "kind" : "case class"}, {"label" : "AddLiteral", "tail" : "", "member" : "provingground.functionfinder.SymbolicCRing.AddLiteral", "link" : "provingground\/functionfinder\/SymbolicCRing.html#AddLiteralextendsHoTT.Func[SymbolicCRing.this.LocalTerm,SymbolicCRing.this.LocalTerm]withProductwithSerializable", "kind" : "case class"}, {"label" : "LiteralSum", "tail" : "", "member" : "provingground.functionfinder.SymbolicCRing.LiteralSum", "link" : "provingground\/functionfinder\/SymbolicCRing.html#LiteralSum", "kind" : "object"}, {"label" : "sum", "tail" : "", "member" : "provingground.functionfinder.SymbolicCRing.sum", "link" : "provingground\/functionfinder\/SymbolicCRing.html#sum", "kind" : "object"}, {"label" : "Reciprocal", "tail" : "", "member" : "provingground.functionfinder.SymbolicCRing.Reciprocal", "link" : "provingground\/functionfinder\/SymbolicCRing.html#Reciprocal", "kind" : "object"}, {"label" : "PiTerm", "tail" : "", "member" : "provingground.functionfinder.SymbolicCRing.PiTerm", "link" : "provingground\/functionfinder\/SymbolicCRing.html#PiTerm", "kind" : "object"}, {"label" : "PiTerm", "tail" : "", "member" : "provingground.functionfinder.SymbolicCRing.PiTerm", "link" : "provingground\/functionfinder\/SymbolicCRing.html#PiTermextendsSymbolicCRing.this.LocalTermwithFoldedTerm[SymbolicCRing.this.LocalTerm]withProductwithSerializable", "kind" : "case class"}, {"label" : "LitProd", "tail" : "", "member" : "provingground.functionfinder.SymbolicCRing.LitProd", "link" : "provingground\/functionfinder\/SymbolicCRing.html#LitProd", "kind" : "object"}, {"label" : "SigmaTerm", "tail" : "", "member" : "provingground.functionfinder.SymbolicCRing.SigmaTerm", "link" : "provingground\/functionfinder\/SymbolicCRing.html#SigmaTerm", "kind" : "object"}, {"label" : "SigmaTerm", "tail" : "", "member" : "provingground.functionfinder.SymbolicCRing.SigmaTerm", "link" : "provingground\/functionfinder\/SymbolicCRing.html#SigmaTermextendsSymbolicCRing.this.LocalTermwithFoldedTerm[SymbolicCRing.this.LocalTerm]withProductwithSerializable", "kind" : "case class"}, {"label" : "Comb", "tail" : "", "member" : "provingground.functionfinder.SymbolicCRing.Comb", "link" : "provingground\/functionfinder\/SymbolicCRing.html#Comb", "kind" : "object"}, {"label" : "Literal", "tail" : "", "member" : "provingground.functionfinder.SymbolicCRing.Literal", "link" : "provingground\/functionfinder\/SymbolicCRing.html#Literal", "kind" : "object"}, {"label" : "LocalTyp", "tail" : "", "member" : "provingground.functionfinder.SymbolicCRing.LocalTyp", "link" : "provingground\/functionfinder\/SymbolicCRing.html#LocalTyp", "kind" : "object"}, {"label" : "fieldStructure", "tail" : ": Field[LocalTerm]", "member" : "provingground.functionfinder.SymbolicField.fieldStructure", "link" : "provingground\/functionfinder\/SymbolicField.html#fieldStructure:spire.algebra.Field[SymbolicField.this.LocalTerm]", "kind" : "implicit val"}, {"label" : "power", "tail" : "(x: LocalTerm, n: Int): LocalTerm", "member" : "provingground.functionfinder.SymbolicField.power", "link" : "provingground\/functionfinder\/SymbolicField.html#power(x:SymbolicField.this.LocalTerm,n:Int):SymbolicField.this.LocalTerm", "kind" : "def"}, {"label" : "reciprocal", "tail" : ": Func[LocalTerm, LocalTerm]", "member" : "provingground.functionfinder.SymbolicField.reciprocal", "link" : "provingground\/functionfinder\/SymbolicField.html#reciprocal:provingground.HoTT.Func[SymbolicField.this.LocalTerm,SymbolicField.this.LocalTerm]", "kind" : "lazy val"}, {"label" : "field", "tail" : ": Field[A]", "member" : "provingground.functionfinder.SymbolicField.field", "link" : "provingground\/functionfinder\/SymbolicField.html#field:spire.algebra.Field[A]", "kind" : "val"}, {"member" : "provingground.functionfinder.SymbolicField#<init>", "error" : "unsupported entity"}, {"label" : "cringStructure", "tail" : ": CRing[LocalTerm]", "member" : "provingground.functionfinder.SymbolicCRing.cringStructure", "link" : "provingground\/functionfinder\/SymbolicField.html#cringStructure:spire.algebra.CRing[SymbolicCRing.this.LocalTerm]", "kind" : "implicit val"}, {"label" : "posPower", "tail" : "(x: LocalTerm, n: Int, accum: LocalTerm): LocalTerm", "member" : "provingground.functionfinder.SymbolicCRing.posPower", "link" : "provingground\/functionfinder\/SymbolicField.html#posPower(x:SymbolicCRing.this.LocalTerm,n:Int,accum:SymbolicCRing.this.LocalTerm):SymbolicCRing.this.LocalTerm", "kind" : "final def"}, {"label" : "funcSum", "tail" : "(f: (LocalTerm) ⇒ LocalTerm, g: (LocalTerm) ⇒ LocalTerm): Func[RepTerm[A], LocalTerm]", "member" : "provingground.functionfinder.SymbolicCRing.funcSum", "link" : "provingground\/functionfinder\/SymbolicField.html#funcSum(f:SymbolicCRing.this.LocalTerm=>SymbolicCRing.this.LocalTerm,g:SymbolicCRing.this.LocalTerm=>SymbolicCRing.this.LocalTerm):provingground.HoTT.Func[provingground.functionfinder.RepTerm[A],SymbolicCRing.this.LocalTerm]", "kind" : "def"}, {"label" : "reciprocalOpt", "tail" : ": Option[Func[LocalTerm, LocalTerm]]", "member" : "provingground.functionfinder.SymbolicCRing.reciprocalOpt", "link" : "provingground\/functionfinder\/SymbolicField.html#reciprocalOpt:Option[provingground.HoTT.Func[SymbolicCRing.this.LocalTerm,SymbolicCRing.this.LocalTerm]]", "kind" : "val"}, {"label" : "Op", "tail" : "", "member" : "provingground.functionfinder.SymbolicCRing.Op", "link" : "provingground\/functionfinder\/SymbolicField.html#Op=provingground.HoTT.Func[SymbolicCRing.this.LocalTerm,provingground.HoTT.Func[SymbolicCRing.this.LocalTerm,SymbolicCRing.this.LocalTerm]]", "kind" : "type"}, {"label" : "LocalTerm", "tail" : "", "member" : "provingground.functionfinder.SymbolicCRing.LocalTerm", "link" : "provingground\/functionfinder\/SymbolicField.html#LocalTerm=provingground.functionfinder.RepTerm[A]", "kind" : "type"}, {"label" : "negate", "tail" : "(x: LocalTerm): LocalTerm", "member" : "provingground.functionfinder.SymbolicCRing.negate", "link" : "provingground\/functionfinder\/SymbolicField.html#negate(x:SymbolicCRing.this.LocalTerm):SymbolicCRing.this.LocalTerm", "kind" : "def"}, {"label" : "minusone", "tail" : ": LocalTerm with Subs[LocalTerm]", "member" : "provingground.functionfinder.SymbolicCRing.minusone", "link" : "provingground\/functionfinder\/SymbolicField.html#minusone:SymbolicCRing.this.LocalTermwithprovingground.HoTT.Subs[SymbolicCRing.this.LocalTerm]", "kind" : "val"}, {"label" : "two", "tail" : ": A", "member" : "provingground.functionfinder.SymbolicCRing.two", "link" : "provingground\/functionfinder\/SymbolicField.html#two:A", "kind" : "val"}, {"label" : "ring", "tail" : ": Ring[A]", "member" : "provingground.functionfinder.SymbolicCRing.ring", "link" : "provingground\/functionfinder\/SymbolicField.html#ring:spire.algebra.Ring[A]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/functionfinder\/SymbolicField.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/functionfinder\/SymbolicField.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/functionfinder\/SymbolicField.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/functionfinder\/SymbolicField.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/functionfinder\/SymbolicField.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/functionfinder\/SymbolicField.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/functionfinder\/SymbolicField.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/SymbolicField.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/SymbolicField.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/SymbolicField.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/functionfinder\/SymbolicField.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/functionfinder\/SymbolicField.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/functionfinder\/SymbolicField.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/functionfinder\/SymbolicField.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/functionfinder\/SymbolicField.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/functionfinder\/SymbolicField.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/functionfinder\/SymbolicField.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/functionfinder\/SymbolicField.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/functionfinder\/SymbolicField.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/functionfinder\/SymbolicField.html", "kind" : "class"}, {"name" : "provingground.functionfinder.SymbScalaTyp", "shortDescription" : "", "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/functionfinder\/SymbScalaTyp.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/functionfinder\/SymbScalaTyp.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SymbScalaTyp[A]) ⇒ Boolean, msg: ⇒ Any): SymbScalaTyp[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/functionfinder\/SymbScalaTyp.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SymbScalaTyp[A]) ⇒ Boolean): SymbScalaTyp[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/functionfinder\/SymbScalaTyp.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): SymbScalaTyp[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/functionfinder\/SymbScalaTyp.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): SymbScalaTyp[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/functionfinder\/SymbScalaTyp.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (SymbScalaTyp[A], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/functionfinder\/SymbScalaTyp.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (SymbScalaTyp[A], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/functionfinder\/SymbScalaTyp.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "Elem", "tail" : "", "member" : "provingground.HoTT.Typ.Elem", "link" : "provingground\/HoTT$$Typ.html#Elem", "kind" : "object"}, {"label" : "subs", "tail" : "(x: Term, y: Term): Typ[RepTerm[A]] with Subs[Typ[RepTerm[A]]]", "member" : "provingground.functionfinder.SymbScalaTyp.subs", "link" : "provingground\/functionfinder\/SymbScalaTyp.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.HoTT.Typ[provingground.functionfinder.RepTerm[A]]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.functionfinder.RepTerm[A]]]", "kind" : "def"}, {"member" : "provingground.functionfinder.SymbScalaTyp#<init>", "error" : "unsupported entity"}, {"label" : "name", "tail" : ": AnySym", "member" : "provingground.functionfinder.SymbScalaTyp.name", "link" : "provingground\/functionfinder\/SymbScalaTyp.html#name:provingground.HoTT.AnySym", "kind" : "val"}, {"label" : "toString", "tail" : "(): String", "member" : "provingground.HoTT.Symbolic.toString", "link" : "provingground\/functionfinder\/SymbScalaTyp.html#toString():String", "kind" : "def"}, {"label" : "rep", "tail" : ": ScalaRep[RepTerm[A], A]", "member" : "provingground.functionfinder.ScalaTyp.rep", "link" : "provingground\/functionfinder\/SymbScalaTyp.html#rep:provingground.functionfinder.ScalaRep[provingground.functionfinder.RepTerm[A],A]", "kind" : "implicit val"}, {"label" : "newobj", "tail" : "(): Nothing", "member" : "provingground.functionfinder.ScalaTyp.newobj", "link" : "provingground\/functionfinder\/SymbScalaTyp.html#newobj:Nothing", "kind" : "def"}, {"label" : "variable", "tail" : "(name: AnySym): RepTerm[A]", "member" : "provingground.functionfinder.ScalaTyp.variable", "link" : "provingground\/functionfinder\/SymbScalaTyp.html#variable(name:provingground.HoTT.AnySym):provingground.functionfinder.RepTerm[A]", "kind" : "def"}, {"label" : "typ", "tail" : ": ScalaTypUniv[A]", "member" : "provingground.functionfinder.ScalaTyp.typ", "link" : "provingground\/functionfinder\/SymbScalaTyp.html#typ:provingground.functionfinder.ScalaTypUniv[A]", "kind" : "val"}, {"label" : "Obj", "tail" : "", "member" : "provingground.functionfinder.ScalaTyp.Obj", "link" : "provingground\/functionfinder\/SymbScalaTyp.html#Obj=provingground.functionfinder.RepTerm[A]", "kind" : "type"}, {"label" : "++", "tail" : "(those: V): SigmaTyp[UU, VV]", "member" : "provingground.HoTT.Typ.++", "link" : "provingground\/functionfinder\/SymbScalaTyp.html#++[UU>:provingground.HoTT.Typ[U]<:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[UU],VV<:provingground.HoTT.Termwithprovingground.HoTT.Subs[VV],V<:provingground.HoTT.Typ[VV]withprovingground.HoTT.Subs[V]](those:V):provingground.HoTT.SigmaTyp[UU,VV]", "kind" : "def"}, {"label" : "||", "tail" : "(that: Typ[V]): PlusTyp[UU, V]", "member" : "provingground.HoTT.Typ.||", "link" : "provingground\/functionfinder\/SymbScalaTyp.html#||[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](that:provingground.HoTT.Typ[V]):provingground.HoTT.PlusTyp[UU,V]", "kind" : "def"}, {"label" : "&&", "tail" : "(that: Typ[V]): ProdTyp[UU, V]", "member" : "provingground.HoTT.Typ.&&", "link" : "provingground\/functionfinder\/SymbScalaTyp.html#&&[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](that:provingground.HoTT.Typ[V]):provingground.HoTT.ProdTyp[UU,V]", "kind" : "def"}, {"label" : "~>:", "tail" : "(variable: V): GenFuncTyp[V, UU]", "member" : "provingground.HoTT.Typ.~>:", "link" : "provingground\/functionfinder\/SymbScalaTyp.html#~>:[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](variable:V):provingground.HoTT.GenFuncTyp[V,UU]", "kind" : "def"}, {"label" : "->:", "tail" : "(that: Typ[W]): FuncTyp[W, UU]", "member" : "provingground.HoTT.Typ.->:", "link" : "provingground\/functionfinder\/SymbScalaTyp.html#->:[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU]](that:provingground.HoTT.Typ[W]):provingground.HoTT.FuncTyp[W,UU]", "kind" : "def"}, {"label" : "typedVar", "tail" : "(): TypedTerm[RepTerm[A]]", "member" : "provingground.HoTT.Typ.typedVar", "link" : "provingground\/functionfinder\/SymbScalaTyp.html#typedVar:provingground.HoTT.TypedTerm[U]", "kind" : "def"}, {"label" : "Var", "tail" : "(): RepTerm[A] with Subs[RepTerm[A]]", "member" : "provingground.HoTT.Typ.Var", "link" : "provingground\/functionfinder\/SymbScalaTyp.html#Var:Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "::", "tail" : "(name: String): RepTerm[A] with Subs[RepTerm[A]]", "member" : "provingground.HoTT.Typ.::", "link" : "provingground\/functionfinder\/SymbScalaTyp.html#::(name:String):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "typedVar", "tail" : "(name: AnySym): TypedTerm[RepTerm[A]]", "member" : "provingground.HoTT.Typ.typedVar", "link" : "provingground\/functionfinder\/SymbScalaTyp.html#typedVar(name:provingground.HoTT.AnySym):provingground.HoTT.TypedTerm[U]", "kind" : "def"}, {"label" : "symbObj", "tail" : "(name: AnySym): RepTerm[A] with Subs[RepTerm[A]]", "member" : "provingground.HoTT.Typ.symbObj", "link" : "provingground\/functionfinder\/SymbScalaTyp.html#symbObj(name:provingground.HoTT.AnySym):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "typlevel", "tail" : ": Int", "member" : "provingground.HoTT.Typ.typlevel", "link" : "provingground\/functionfinder\/SymbScalaTyp.html#typlevel:Int", "kind" : "lazy val"}, {"label" : "typed", "tail" : ": TypedTerm[Typ[Term]]", "member" : "provingground.HoTT.Typ.typed", "link" : "provingground\/functionfinder\/SymbScalaTyp.html#typed:provingground.HoTT.TypedTerm[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "!:", "tail" : "(term: Term): RepTerm[A]", "member" : "provingground.HoTT.Typ.!:", "link" : "provingground\/functionfinder\/SymbScalaTyp.html#!:(term:provingground.HoTT.Term):U", "kind" : "def"}, {"label" : "obj", "tail" : "(): RepTerm[A]", "member" : "provingground.HoTT.Typ.obj", "link" : "provingground\/functionfinder\/SymbScalaTyp.html#obj:U", "kind" : "def"}, {"label" : "usesVar", "tail" : "(t: Term): Boolean", "member" : "provingground.HoTT.Term.usesVar", "link" : "provingground\/functionfinder\/SymbScalaTyp.html#usesVar(t:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "indepOf", "tail" : "(that: Term): Boolean", "member" : "provingground.HoTT.Term.indepOf", "link" : "provingground\/functionfinder\/SymbScalaTyp.html#indepOf(that:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "dependsOn", "tail" : "(that: Term): Boolean", "member" : "provingground.HoTT.Term.dependsOn", "link" : "provingground\/functionfinder\/SymbScalaTyp.html#dependsOn(that:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "replace", "tail" : "(x: Term, y: Term): Typ[RepTerm[A]] with Subs[Typ[RepTerm[A]]]", "member" : "provingground.HoTT.Subs.replace", "link" : "provingground\/functionfinder\/SymbScalaTyp.html#replace(x:provingground.HoTT.Term,y:provingground.HoTT.Term):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/functionfinder\/SymbScalaTyp.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/functionfinder\/SymbScalaTyp.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/functionfinder\/SymbScalaTyp.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/functionfinder\/SymbScalaTyp.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/functionfinder\/SymbScalaTyp.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/functionfinder\/SymbScalaTyp.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/functionfinder\/SymbScalaTyp.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/SymbScalaTyp.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/SymbScalaTyp.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/SymbScalaTyp.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/functionfinder\/SymbScalaTyp.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/functionfinder\/SymbScalaTyp.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/functionfinder\/SymbScalaTyp.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/functionfinder\/SymbScalaTyp.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/functionfinder\/SymbScalaTyp.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/functionfinder\/SymbScalaTyp.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/functionfinder\/SymbScalaTyp.html", "kind" : "case class"}, {"name" : "provingground.functionfinder.VecTyp", "shortDescription" : "", "object" : "provingground\/functionfinder\/VecTyp$.html", "members_object" : [{"label" : "nsucc", "tail" : ": Option[FuncLike[RepTerm[Long], FuncLike[RepTerm[Long], FuncLike[RepTerm[Vector[Long]], RepTerm[Vector[Long]]]]]]", "member" : "provingground.functionfinder.VecTyp.nsucc", "link" : "provingground\/functionfinder\/VecTyp$.html#nsucc:Option[provingground.HoTT.FuncLike[provingground.functionfinder.RepTerm[Long],provingground.HoTT.FuncLike[provingground.functionfinder.RepTerm[Long],provingground.HoTT.FuncLike[provingground.functionfinder.RepTerm[Vector[Long]],provingground.functionfinder.RepTerm[Vector[Long]]]]]]", "kind" : "val"}, {"label" : "nsize", "tail" : ": Option[FuncLike[RepTerm[Long], FuncLike[RepTerm[Vector[Long]], RepTerm[Long]]]]", "member" : "provingground.functionfinder.VecTyp.nsize", "link" : "provingground\/functionfinder\/VecTyp$.html#nsize:Option[provingground.HoTT.FuncLike[provingground.functionfinder.RepTerm[Long],provingground.HoTT.FuncLike[provingground.functionfinder.RepTerm[Vector[Long]],provingground.functionfinder.RepTerm[Long]]]]", "kind" : "val"}, {"label" : "Vec", "tail" : ": FuncLike[RepTerm[Long], Typ[Term]]", "member" : "provingground.functionfinder.VecTyp.Vec", "link" : "provingground\/functionfinder\/VecTyp$.html#Vec:provingground.HoTT.FuncLike[provingground.functionfinder.RepTerm[Long],provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "NatVecRep", "tail" : ": ScalaPolyRep[RepTerm[Vector[Long]], Vector[Long]]", "member" : "provingground.functionfinder.VecTyp.NatVecRep", "link" : "provingground\/functionfinder\/VecTyp$.html#NatVecRep:provingground.functionfinder.ScalaPolyRep[provingground.functionfinder.RepTerm[Vector[Long]],Vector[Long]]", "kind" : "implicit val"}, {"label" : "n", "tail" : ": RepTerm[Long] with Subs[RepTerm[Long]]", "member" : "provingground.functionfinder.VecTyp.n", "link" : "provingground\/functionfinder\/VecTyp$.html#n:provingground.functionfinder.RepTerm[Long]withprovingground.HoTT.Subs[provingground.functionfinder.RepTerm[Long]]", "kind" : "val"}, {"label" : "vecRep", "tail" : "(baserep: ScalaPolyRep[U, X]): ScalaPolyRep[RepTerm[Vector[X]], Vector[X]]", "member" : "provingground.functionfinder.VecTyp.vecRep", "link" : "provingground\/functionfinder\/VecTyp$.html#vecRep[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],X](implicitbaserep:provingground.functionfinder.ScalaPolyRep[U,X]):provingground.functionfinder.ScalaPolyRep[provingground.functionfinder.RepTerm[Vector[X]],Vector[X]]", "kind" : "implicit def"}, {"label" : "VecPolyRep", "tail" : "", "member" : "provingground.functionfinder.VecTyp.VecPolyRep", "link" : "provingground\/functionfinder\/VecTyp$.html#VecPolyRep[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],X]extendsScalaPolyRep[provingground.functionfinder.RepTerm[Vector[X]],Vector[X]]withProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/functionfinder\/VecTyp$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/functionfinder\/VecTyp$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/functionfinder\/VecTyp$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/functionfinder\/VecTyp$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/functionfinder\/VecTyp$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/functionfinder\/VecTyp$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/functionfinder\/VecTyp$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/VecTyp$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/VecTyp$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/VecTyp$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/functionfinder\/VecTyp$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/functionfinder\/VecTyp$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/functionfinder\/VecTyp$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/functionfinder\/VecTyp$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/functionfinder\/VecTyp$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/functionfinder\/VecTyp$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/functionfinder\/VecTyp$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/functionfinder\/VecTyp$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/functionfinder\/VecTyp$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "toParArray", "tail" : "(): ParArray[T]", "member" : "scala.collection.parallel.CollectionsHaveToParArray.toParArray", "link" : "provingground\/functionfinder\/VecTyp.html#toParArray:scala.collection.parallel.mutable.ParArray[T]", "kind" : "def"}, {"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/functionfinder\/VecTyp.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/functionfinder\/VecTyp.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (VecTyp[X, U]) ⇒ Boolean, msg: ⇒ Any): VecTyp[X, U]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/functionfinder\/VecTyp.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (VecTyp[X, U]) ⇒ Boolean): VecTyp[X, U]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/functionfinder\/VecTyp.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): VecTyp[X, U]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/functionfinder\/VecTyp.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): VecTyp[X, U]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/functionfinder\/VecTyp.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (VecTyp[X, U], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/functionfinder\/VecTyp.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (VecTyp[X, U], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/functionfinder\/VecTyp.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "Elem", "tail" : "", "member" : "provingground.HoTT.Typ.Elem", "link" : "provingground\/HoTT$$Typ.html#Elem", "kind" : "object"}, {"label" : "subs", "tail" : "(x: Term, y: Term): Typ[RepTerm[Vector[X]]] with Subs[Typ[RepTerm[Vector[X]]]]", "member" : "provingground.functionfinder.VecTyp.subs", "link" : "provingground\/functionfinder\/VecTyp.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.HoTT.Typ[provingground.functionfinder.RepTerm[Vector[X]]]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.functionfinder.RepTerm[Vector[X]]]]", "kind" : "def"}, {"label" : "newobj", "tail" : "(): Nothing", "member" : "provingground.functionfinder.VecTyp.newobj", "link" : "provingground\/functionfinder\/VecTyp.html#newobj:Nothing", "kind" : "def"}, {"label" : "variable", "tail" : "(name: AnySym): RepTerm[Vector[X]]", "member" : "provingground.functionfinder.VecTyp.variable", "link" : "provingground\/functionfinder\/VecTyp.html#variable(name:provingground.HoTT.AnySym):provingground.functionfinder.RepTerm[Vector[X]]", "kind" : "def"}, {"label" : "typ", "tail" : ": Universe", "member" : "provingground.functionfinder.VecTyp.typ", "link" : "provingground\/functionfinder\/VecTyp.html#typ:provingground.HoTT.Universe", "kind" : "val"}, {"label" : "Obj", "tail" : "", "member" : "provingground.functionfinder.VecTyp.Obj", "link" : "provingground\/functionfinder\/VecTyp.html#Obj=provingground.functionfinder.RepTerm[Vector[X]]", "kind" : "type"}, {"label" : "baserep", "tail" : ": ScalaRep[U, X]", "member" : "provingground.functionfinder.VecTyp.baserep", "link" : "provingground\/functionfinder\/VecTyp.html#baserep:provingground.functionfinder.ScalaRep[U,X]", "kind" : "val"}, {"member" : "provingground.functionfinder.VecTyp#<init>", "error" : "unsupported entity"}, {"label" : "dim", "tail" : ": Long", "member" : "provingground.functionfinder.VecTyp.dim", "link" : "provingground\/functionfinder\/VecTyp.html#dim:Long", "kind" : "val"}, {"label" : "basetyp", "tail" : ": Typ[U]", "member" : "provingground.functionfinder.VecTyp.basetyp", "link" : "provingground\/functionfinder\/VecTyp.html#basetyp:provingground.HoTT.Typ[U]", "kind" : "val"}, {"label" : "++", "tail" : "(those: V): SigmaTyp[UU, VV]", "member" : "provingground.HoTT.Typ.++", "link" : "provingground\/functionfinder\/VecTyp.html#++[UU>:provingground.HoTT.Typ[U]<:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[UU],VV<:provingground.HoTT.Termwithprovingground.HoTT.Subs[VV],V<:provingground.HoTT.Typ[VV]withprovingground.HoTT.Subs[V]](those:V):provingground.HoTT.SigmaTyp[UU,VV]", "kind" : "def"}, {"label" : "||", "tail" : "(that: Typ[V]): PlusTyp[UU, V]", "member" : "provingground.HoTT.Typ.||", "link" : "provingground\/functionfinder\/VecTyp.html#||[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](that:provingground.HoTT.Typ[V]):provingground.HoTT.PlusTyp[UU,V]", "kind" : "def"}, {"label" : "&&", "tail" : "(that: Typ[V]): ProdTyp[UU, V]", "member" : "provingground.HoTT.Typ.&&", "link" : "provingground\/functionfinder\/VecTyp.html#&&[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](that:provingground.HoTT.Typ[V]):provingground.HoTT.ProdTyp[UU,V]", "kind" : "def"}, {"label" : "~>:", "tail" : "(variable: V): GenFuncTyp[V, UU]", "member" : "provingground.HoTT.Typ.~>:", "link" : "provingground\/functionfinder\/VecTyp.html#~>:[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](variable:V):provingground.HoTT.GenFuncTyp[V,UU]", "kind" : "def"}, {"label" : "->:", "tail" : "(that: Typ[W]): FuncTyp[W, UU]", "member" : "provingground.HoTT.Typ.->:", "link" : "provingground\/functionfinder\/VecTyp.html#->:[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU]](that:provingground.HoTT.Typ[W]):provingground.HoTT.FuncTyp[W,UU]", "kind" : "def"}, {"label" : "typedVar", "tail" : "(): TypedTerm[RepTerm[Vector[X]]]", "member" : "provingground.HoTT.Typ.typedVar", "link" : "provingground\/functionfinder\/VecTyp.html#typedVar:provingground.HoTT.TypedTerm[U]", "kind" : "def"}, {"label" : "Var", "tail" : "(): RepTerm[Vector[X]] with Subs[RepTerm[Vector[X]]]", "member" : "provingground.HoTT.Typ.Var", "link" : "provingground\/functionfinder\/VecTyp.html#Var:Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "::", "tail" : "(name: String): RepTerm[Vector[X]] with Subs[RepTerm[Vector[X]]]", "member" : "provingground.HoTT.Typ.::", "link" : "provingground\/functionfinder\/VecTyp.html#::(name:String):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "typedVar", "tail" : "(name: AnySym): TypedTerm[RepTerm[Vector[X]]]", "member" : "provingground.HoTT.Typ.typedVar", "link" : "provingground\/functionfinder\/VecTyp.html#typedVar(name:provingground.HoTT.AnySym):provingground.HoTT.TypedTerm[U]", "kind" : "def"}, {"label" : "symbObj", "tail" : "(name: AnySym): RepTerm[Vector[X]] with Subs[RepTerm[Vector[X]]]", "member" : "provingground.HoTT.Typ.symbObj", "link" : "provingground\/functionfinder\/VecTyp.html#symbObj(name:provingground.HoTT.AnySym):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "typlevel", "tail" : ": Int", "member" : "provingground.HoTT.Typ.typlevel", "link" : "provingground\/functionfinder\/VecTyp.html#typlevel:Int", "kind" : "lazy val"}, {"label" : "typed", "tail" : ": TypedTerm[Typ[Term]]", "member" : "provingground.HoTT.Typ.typed", "link" : "provingground\/functionfinder\/VecTyp.html#typed:provingground.HoTT.TypedTerm[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "!:", "tail" : "(term: Term): RepTerm[Vector[X]]", "member" : "provingground.HoTT.Typ.!:", "link" : "provingground\/functionfinder\/VecTyp.html#!:(term:provingground.HoTT.Term):U", "kind" : "def"}, {"label" : "obj", "tail" : "(): RepTerm[Vector[X]]", "member" : "provingground.HoTT.Typ.obj", "link" : "provingground\/functionfinder\/VecTyp.html#obj:U", "kind" : "def"}, {"label" : "usesVar", "tail" : "(t: Term): Boolean", "member" : "provingground.HoTT.Term.usesVar", "link" : "provingground\/functionfinder\/VecTyp.html#usesVar(t:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "indepOf", "tail" : "(that: Term): Boolean", "member" : "provingground.HoTT.Term.indepOf", "link" : "provingground\/functionfinder\/VecTyp.html#indepOf(that:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "dependsOn", "tail" : "(that: Term): Boolean", "member" : "provingground.HoTT.Term.dependsOn", "link" : "provingground\/functionfinder\/VecTyp.html#dependsOn(that:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "replace", "tail" : "(x: Term, y: Term): Typ[RepTerm[Vector[X]]] with Subs[Typ[RepTerm[Vector[X]]]]", "member" : "provingground.HoTT.Subs.replace", "link" : "provingground\/functionfinder\/VecTyp.html#replace(x:provingground.HoTT.Term,y:provingground.HoTT.Term):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/functionfinder\/VecTyp.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/functionfinder\/VecTyp.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/functionfinder\/VecTyp.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/functionfinder\/VecTyp.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/functionfinder\/VecTyp.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/functionfinder\/VecTyp.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/functionfinder\/VecTyp.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/VecTyp.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/VecTyp.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/VecTyp.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/functionfinder\/VecTyp.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/functionfinder\/VecTyp.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/functionfinder\/VecTyp.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/functionfinder\/VecTyp.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/functionfinder\/VecTyp.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/functionfinder\/VecTyp.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/functionfinder\/VecTyp.html", "kind" : "case class"}, {"name" : "provingground.functionfinder.VecTyps", "shortDescription" : "", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/functionfinder\/VecTyps.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/functionfinder\/VecTyps.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (VecTyps[X, U]) ⇒ Boolean, msg: ⇒ Any): VecTyps[X, U]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/functionfinder\/VecTyps.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (VecTyps[X, U]) ⇒ Boolean): VecTyps[X, U]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/functionfinder\/VecTyps.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): VecTyps[X, U]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/functionfinder\/VecTyps.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): VecTyps[X, U]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/functionfinder\/VecTyps.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (VecTyps[X, U], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/functionfinder\/VecTyps.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (VecTyps[X, U], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/functionfinder\/VecTyps.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "cons", "tail" : ": FuncLike[Nat, Func[U, Func[RepTerm[Vector[X]], RepTerm[Vector[X]]]]]", "member" : "provingground.functionfinder.VecTyps.cons", "link" : "provingground\/functionfinder\/VecTyps.html#cons:provingground.HoTT.FuncLike[provingground.functionfinder.NatRing.Nat,provingground.HoTT.Func[U,provingground.HoTT.Func[provingground.functionfinder.RepTerm[Vector[X]],provingground.functionfinder.RepTerm[Vector[X]]]]]", "kind" : "val"}, {"label" : "consLike", "tail" : ": FuncLike[RepTerm[SafeLong], FuncLike[U, FuncLike[RepTerm[Vector[X]], RepTerm[Vector[X]]]]]", "member" : "provingground.functionfinder.VecTyps.consLike", "link" : "provingground\/functionfinder\/VecTyps.html#consLike:provingground.HoTT.FuncLike[provingground.functionfinder.RepTerm[spire.math.SafeLong],provingground.HoTT.FuncLike[U,provingground.HoTT.FuncLike[provingground.functionfinder.RepTerm[Vector[X]],provingground.functionfinder.RepTerm[Vector[X]]]]]", "kind" : "val"}, {"label" : "consRep", "tail" : ": ScalaPolyRep[FuncLike[RepTerm[SafeLong], FuncLike[U, FuncLike[RepTerm[Vector[X]], RepTerm[Vector[X]]]]], (SafeLong) ⇒ (X) ⇒ (Vector[X]) ⇒ Vector[X]]", "member" : "provingground.functionfinder.VecTyps.consRep", "link" : "provingground\/functionfinder\/VecTyps.html#consRep:provingground.functionfinder.ScalaPolyRep[provingground.HoTT.FuncLike[provingground.functionfinder.RepTerm[spire.math.SafeLong],provingground.HoTT.FuncLike[U,provingground.HoTT.FuncLike[provingground.functionfinder.RepTerm[Vector[X]],provingground.functionfinder.RepTerm[Vector[X]]]]],spire.math.SafeLong=>(X=>(Vector[X]=>Vector[X]))]", "kind" : "val"}, {"label" : "consFn", "tail" : ": (SafeLong) ⇒ (X) ⇒ (Vector[X]) ⇒ Vector[X]", "member" : "provingground.functionfinder.VecTyps.consFn", "link" : "provingground\/functionfinder\/VecTyps.html#consFn:spire.math.SafeLong=>(X=>(Vector[X]=>scala.collection.immutable.Vector[X]))", "kind" : "val"}, {"label" : "consTyp", "tail" : ": GenFuncTyp[RepTerm[SafeLong] with Subs[RepTerm[SafeLong]], Func[U, Func[RepTerm[Vector[X]], RepTerm[Vector[X]]]]]", "member" : "provingground.functionfinder.VecTyps.consTyp", "link" : "provingground\/functionfinder\/VecTyps.html#consTyp:provingground.HoTT.GenFuncTyp[provingground.functionfinder.RepTerm[spire.math.SafeLong]withprovingground.HoTT.Subs[provingground.functionfinder.RepTerm[spire.math.SafeLong]],provingground.HoTT.Func[U,provingground.HoTT.Func[provingground.functionfinder.RepTerm[Vector[X]],provingground.functionfinder.RepTerm[Vector[X]]]]]", "kind" : "val"}, {"label" : "NilVec", "tail" : ": RepTerm[Vector[X]]", "member" : "provingground.functionfinder.VecTyps.NilVec", "link" : "provingground\/functionfinder\/VecTyps.html#NilVec:provingground.functionfinder.RepTerm[Vector[X]]", "kind" : "val"}, {"label" : "Vec", "tail" : ": Func[RepTerm[SafeLong], Typ[RepTerm[Vector[X]]]]", "member" : "provingground.functionfinder.VecTyps.Vec", "link" : "provingground\/functionfinder\/VecTyps.html#Vec:provingground.HoTT.Func[provingground.functionfinder.RepTerm[spire.math.SafeLong],provingground.HoTT.Typ[provingground.functionfinder.RepTerm[Vector[X]]]]", "kind" : "val"}, {"label" : "n", "tail" : ": RepTerm[SafeLong] with Subs[RepTerm[SafeLong]]", "member" : "provingground.functionfinder.VecTyps.n", "link" : "provingground\/functionfinder\/VecTyps.html#n:provingground.functionfinder.RepTerm[spire.math.SafeLong]withprovingground.HoTT.Subs[provingground.functionfinder.RepTerm[spire.math.SafeLong]]", "kind" : "val"}, {"label" : "vrep", "tail" : ": ScalaPolyRep[RepTerm[Vector[X]], Vector[X]]", "member" : "provingground.functionfinder.VecTyps.vrep", "link" : "provingground\/functionfinder\/VecTyps.html#vrep:provingground.functionfinder.ScalaPolyRep[provingground.functionfinder.RepTerm[Vector[X]],Vector[X]]", "kind" : "implicit val"}, {"member" : "provingground.functionfinder.VecTyps#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/functionfinder\/VecTyps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/functionfinder\/VecTyps.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/functionfinder\/VecTyps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/functionfinder\/VecTyps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/functionfinder\/VecTyps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/functionfinder\/VecTyps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/functionfinder\/VecTyps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/VecTyps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/VecTyps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/functionfinder\/VecTyps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/functionfinder\/VecTyps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/functionfinder\/VecTyps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/functionfinder\/VecTyps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/functionfinder\/VecTyps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/functionfinder\/VecTyps.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/functionfinder\/VecTyps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/functionfinder\/VecTyps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/functionfinder\/VecTyps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/functionfinder\/VecTyps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/functionfinder\/VecTyps.html", "kind" : "class"}], "provingground.learning" : [{"name" : "provingground.learning.AdjDiffbleFunction", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/learning\/AdjDiffbleFunction.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/learning\/AdjDiffbleFunction.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (AdjDiffbleFunction[A, B]) ⇒ Boolean, msg: ⇒ Any): AdjDiffbleFunction[A, B]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/AdjDiffbleFunction.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (AdjDiffbleFunction[A, B]) ⇒ Boolean): AdjDiffbleFunction[A, B]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/AdjDiffbleFunction.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): AdjDiffbleFunction[A, B]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/AdjDiffbleFunction.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): AdjDiffbleFunction[A, B]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/AdjDiffbleFunction.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (AdjDiffbleFunction[A, B], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/learning\/AdjDiffbleFunction.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (AdjDiffbleFunction[A, B], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/learning\/AdjDiffbleFunction.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "oplus", "tail" : "(that: AdjDiffbleFunction[C, D]): Oplus[A, B, C, D]", "member" : "provingground.learning.AdjDiffbleFunction.oplus", "link" : "provingground\/learning\/AdjDiffbleFunction.html#oplus[C,D](that:provingground.learning.AdjDiffbleFunction[C,D]):provingground.learning.AdjDiffbleFunction.Oplus[A,B,C,D]", "kind" : "def"}, {"label" : "**:", "tail" : "(that: (A) ⇒ B): (A) ⇒ A", "member" : "provingground.learning.AdjDiffbleFunction.**:", "link" : "provingground\/learning\/AdjDiffbleFunction.html#**:(that:A=>B):A=>A", "kind" : "def"}, {"label" : "^:", "tail" : "(that: (B) ⇒ B): (A) ⇒ A", "member" : "provingground.learning.AdjDiffbleFunction.^:", "link" : "provingground\/learning\/AdjDiffbleFunction.html#^:(that:B=>B):A=>A", "kind" : "def"}, {"label" : "andthen", "tail" : "(that: ⇒ AdjDiffbleFunction[B, C]): AdjDiffbleFunction[A, C]", "member" : "provingground.learning.AdjDiffbleFunction.andthen", "link" : "provingground\/learning\/AdjDiffbleFunction.html#andthen[C](that:=>provingground.learning.AdjDiffbleFunction[B,C]):provingground.learning.AdjDiffbleFunction[A,C]", "kind" : "def"}, {"label" : "*:", "tail" : "(that: ⇒ AdjDiffbleFunction[B, C]): AdjDiffbleFunction[A, C]", "member" : "provingground.learning.AdjDiffbleFunction.*:", "link" : "provingground\/learning\/AdjDiffbleFunction.html#*:[C](that:=>provingground.learning.AdjDiffbleFunction[B,C]):provingground.learning.AdjDiffbleFunction[A,C]", "kind" : "def"}, {"label" : "apply", "tail" : "(a: A): B", "member" : "provingground.learning.AdjDiffbleFunction.apply", "link" : "provingground\/learning\/AdjDiffbleFunction.html#apply(a:A):B", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/AdjDiffbleFunction.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/AdjDiffbleFunction.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/AdjDiffbleFunction.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/AdjDiffbleFunction.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/AdjDiffbleFunction.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/AdjDiffbleFunction.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/AdjDiffbleFunction.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/AdjDiffbleFunction.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/AdjDiffbleFunction.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/AdjDiffbleFunction.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/AdjDiffbleFunction.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/AdjDiffbleFunction.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/AdjDiffbleFunction.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/AdjDiffbleFunction.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/AdjDiffbleFunction.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/AdjDiffbleFunction.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/AdjDiffbleFunction.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/AdjDiffbleFunction.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/AdjDiffbleFunction.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "adjDer", "tail" : ": (A) ⇒ (B) ⇒ A", "member" : "provingground.learning.AdjDiffbleFunction.adjDer", "link" : "provingground\/learning\/AdjDiffbleFunction.html#adjDer:A=>(B=>A)", "kind" : "abstract val"}, {"label" : "func", "tail" : ": (A) ⇒ B", "member" : "provingground.learning.AdjDiffbleFunction.func", "link" : "provingground\/learning\/AdjDiffbleFunction.html#func:A=>B", "kind" : "abstract val"}], "shortDescription" : "", "object" : "provingground\/learning\/AdjDiffbleFunction$.html", "members_object" : [{"label" : "FormalExtension", "tail" : "", "member" : "provingground.learning.AdjDiffbleFunction.FormalExtension", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#FormalExtension[A]extendsAdjDiffbleFunction[A,A]", "kind" : "trait"}, {"label" : "vecSpaceDiffFn", "tail" : "(vsA: VectorSpace[A, Double], vsB: VectorSpace[B, Double]): VectorSpace[AdjDiffbleFunction[A, B], Double]", "member" : "provingground.learning.AdjDiffbleFunction.vecSpaceDiffFn", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#vecSpaceDiffFn[A,B](implicitvsA:spire.algebra.VectorSpace[A,Double],implicitvsB:spire.algebra.VectorSpace[B,Double]):spire.algebra.VectorSpace[provingground.learning.AdjDiffbleFunction[A,B],Double]", "kind" : "implicit def"}, {"label" : "diffFnLS", "tail" : "(arg0: LinearStructure[A], arg1: LinearStructure[B]): LinearStructure[AdjDiffbleFunction[A, B]]", "member" : "provingground.learning.AdjDiffbleFunction.diffFnLS", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#diffFnLS[A,B](implicitevidence$22:provingground.LinearStructure[A],implicitevidence$23:provingground.LinearStructure[B]):provingground.LinearStructure[provingground.learning.AdjDiffbleFunction[A,B]]", "kind" : "implicit def"}, {"label" : "Zero", "tail" : "", "member" : "provingground.learning.AdjDiffbleFunction.Zero", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#Zero[A,B]extendsAdjDiffbleFunction[A,B]withProductwithSerializable", "kind" : "case class"}, {"label" : "Sum", "tail" : "", "member" : "provingground.learning.AdjDiffbleFunction.Sum", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#Sum[A,B]extendsAdjDiffbleFunction[A,B]withProductwithSerializable", "kind" : "case class"}, {"label" : "DotProd", "tail" : "", "member" : "provingground.learning.AdjDiffbleFunction.DotProd", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#DotProd[A,B]extendsAdjDiffbleFunction[A,B]withProductwithSerializable", "kind" : "case class"}, {"label" : "Diagonal", "tail" : "", "member" : "provingground.learning.AdjDiffbleFunction.Diagonal", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#Diagonal[A]extendsAdjDiffbleFunction[A,(A,A)]withProductwithSerializable", "kind" : "case class"}, {"label" : "BigSum", "tail" : "", "member" : "provingground.learning.AdjDiffbleFunction.BigSum", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#BigSum[A,B]extendsAdjDiffbleFunction[A,B]withProductwithSerializable", "kind" : "case class"}, {"label" : "mixinIsle", "tail" : "(f: AdjDiffbleFunction[A, A], isle: (AdjDiffbleFunction[A, A]) ⇒ AdjDiffbleFunction[A, A], normalize: AdjDiffbleFunction[A, A])(arg0: LinearStructure[A]): (Int) ⇒ AdjDiffbleFunction[A, A]", "member" : "provingground.learning.AdjDiffbleFunction.mixinIsle", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#mixinIsle[A](f:provingground.learning.AdjDiffbleFunction[A,A],isle:provingground.learning.AdjDiffbleFunction[A,A]=>provingground.learning.AdjDiffbleFunction[A,A],normalize:provingground.learning.AdjDiffbleFunction[A,A])(implicitevidence$12:provingground.LinearStructure[A]):Int=>provingground.learning.AdjDiffbleFunction[A,A]", "kind" : "def"}, {"label" : "iterate", "tail" : "(f: AdjDiffbleFunction[A, A]): (Int) ⇒ AdjDiffbleFunction[A, A]", "member" : "provingground.learning.AdjDiffbleFunction.iterate", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#iterate[A](f:provingground.learning.AdjDiffbleFunction[A,A]):Int=>provingground.learning.AdjDiffbleFunction[A,A]", "kind" : "def"}, {"label" : "iterateDiffble", "tail" : "(fn: AdjDiffbleFunction[X, X], n: Int): AdjDiffbleFunction[X, X]", "member" : "provingground.learning.AdjDiffbleFunction.iterateDiffble", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#iterateDiffble[X](fn:provingground.learning.AdjDiffbleFunction[X,X],n:Int):provingground.learning.AdjDiffbleFunction[X,X]", "kind" : "def"}, {"label" : "consIterateDiffble", "tail" : "(fn: AdjDiffbleFunction[X, X], n: Int): AdjDiffbleFunction[X, X]", "member" : "provingground.learning.AdjDiffbleFunction.consIterateDiffble", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#consIterateDiffble[X](fn:provingground.learning.AdjDiffbleFunction[X,X],n:Int):provingground.learning.AdjDiffbleFunction[X,X]", "kind" : "def"}, {"label" : "IteratedDiffble", "tail" : "", "member" : "provingground.learning.AdjDiffbleFunction.IteratedDiffble", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#IteratedDiffble[X]extendsAdjDiffbleFunction[X,X]withProductwithSerializable", "kind" : "case class"}, {"label" : "recIterateDiffble", "tail" : "(fn: AdjDiffbleFunction[X, X], n: Int, accum: AdjDiffbleFunction[X, X]): AdjDiffbleFunction[X, X]", "member" : "provingground.learning.AdjDiffbleFunction.recIterateDiffble", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#recIterateDiffble[X](fn:provingground.learning.AdjDiffbleFunction[X,X],n:Int,accum:provingground.learning.AdjDiffbleFunction[X,X]):provingground.learning.AdjDiffbleFunction[X,X]", "kind" : "def"}, {"label" : "repsquare", "tail" : "(f: AdjDiffbleFunction[A, A])(arg0: LinearStructure[A]): (Int) ⇒ AdjDiffbleFunction[A, A]", "member" : "provingground.learning.AdjDiffbleFunction.repsquare", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#repsquare[A](f:provingground.learning.AdjDiffbleFunction[A,A])(implicitevidence$11:provingground.LinearStructure[A]):Int=>provingground.learning.AdjDiffbleFunction[A,A]", "kind" : "def"}, {"label" : "ScProd", "tail" : "", "member" : "provingground.learning.AdjDiffbleFunction.ScProd", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#ScProd[V]extendsAdjDiffbleFunction[(Double,V),V]withProductwithSerializable", "kind" : "case class"}, {"label" : "block", "tail" : "(f: AdjDiffbleFunction[A, C], g: AdjDiffbleFunction[B, D])(arg0: LinearStructure[A], arg1: LinearStructure[B], arg2: LinearStructure[C], arg3: LinearStructure[D]): AdjDiffbleFunction[(A, B), (C, D)]", "member" : "provingground.learning.AdjDiffbleFunction.block", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#block[A,B,C,D](f:provingground.learning.AdjDiffbleFunction[A,C],g:provingground.learning.AdjDiffbleFunction[B,D])(implicitevidence$5:provingground.LinearStructure[A],implicitevidence$6:provingground.LinearStructure[B],implicitevidence$7:provingground.LinearStructure[C],implicitevidence$8:provingground.LinearStructure[D]):provingground.learning.AdjDiffbleFunction[(A,B),(C,D)]", "kind" : "def"}, {"label" : "Proj2", "tail" : "", "member" : "provingground.learning.AdjDiffbleFunction.Proj2", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#Proj2[A,B]extendsAdjDiffbleFunction[(A,B),B]withProductwithSerializable", "kind" : "case class"}, {"label" : "Proj1", "tail" : "", "member" : "provingground.learning.AdjDiffbleFunction.Proj1", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#Proj1[A,B]extendsAdjDiffbleFunction[(A,B),A]withProductwithSerializable", "kind" : "case class"}, {"label" : "Incl2", "tail" : "", "member" : "provingground.learning.AdjDiffbleFunction.Incl2", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#Incl2[A,B]extendsAdjDiffbleFunction[B,(A,B)]withProductwithSerializable", "kind" : "case class"}, {"label" : "Incl1", "tail" : "", "member" : "provingground.learning.AdjDiffbleFunction.Incl1", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#Incl1[A,B]extendsAdjDiffbleFunction[A,(A,B)]withProductwithSerializable", "kind" : "case class"}, {"label" : "id", "tail" : "(): AdjDiffbleFunction[A, A]", "member" : "provingground.learning.AdjDiffbleFunction.id", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#id[A]:provingground.learning.AdjDiffbleFunction[A,A]", "kind" : "def"}, {"label" : "Id", "tail" : "", "member" : "provingground.learning.AdjDiffbleFunction.Id", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#Id[A]extendsAdjDiffbleFunction[A,A]withProductwithSerializable", "kind" : "case class"}, {"label" : "SelfAdj", "tail" : "", "member" : "provingground.learning.AdjDiffbleFunction.SelfAdj", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#SelfAdj[A]extendsAdjDiffbleFunction[A,A]withProductwithSerializable", "kind" : "case class"}, {"label" : "Oplus", "tail" : "", "member" : "provingground.learning.AdjDiffbleFunction.Oplus", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#Oplus[A,B,C,D]extendsAdjDiffbleFunction[(A,C),(B,D)]withProductwithSerializable", "kind" : "case class"}, {"label" : "Composition", "tail" : "", "member" : "provingground.learning.AdjDiffbleFunction.Composition", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#Composition[A,B,C]extendsAdjDiffbleFunction[A,C]withProductwithSerializable", "kind" : "case class"}, {"label" : "apply", "tail" : "(f: ⇒ (A) ⇒ B)(grd: ⇒ (A) ⇒ (B) ⇒ A): AdjDiffbleFunction[A, B]", "member" : "provingground.learning.AdjDiffbleFunction.apply", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#apply[A,B](f:=>A=>B)(grd:=>A=>(B=>A)):provingground.learning.AdjDiffbleFunction[A,B]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/AdjDiffbleFunction$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/learning\/AdjDiffbleFunction.html", "kind" : "trait"}, {"name" : "provingground.learning.BasicDeducer", "shortDescription" : "", "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/learning\/BasicDeducer.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/learning\/BasicDeducer.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (BasicDeducer) ⇒ Boolean, msg: ⇒ Any): BasicDeducer", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/BasicDeducer.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (BasicDeducer) ⇒ Boolean): BasicDeducer", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/BasicDeducer.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): BasicDeducer", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/BasicDeducer.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): BasicDeducer", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/BasicDeducer.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (BasicDeducer, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/learning\/BasicDeducer.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (BasicDeducer, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/learning\/BasicDeducer.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "hDerFunc", "tail" : "(sc: Double)(base: FiniteDistribution[Term])(pd: ProbabilityDistribution[Term]): ProbabilityDistribution[Term]", "member" : "provingground.learning.BasicDeducer.hDerFunc", "link" : "provingground\/learning\/BasicDeducer.html#hDerFunc(sc:Double)(base:provingground.FiniteDistribution[provingground.HoTT.Term])(pd:provingground.ProbabilityDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "derFunc", "tail" : "(base: FiniteDistribution[Term])(pd: ProbabilityDistribution[Term]): ProbabilityDistribution[Term]", "member" : "provingground.learning.BasicDeducer.derFunc", "link" : "provingground\/learning\/BasicDeducer.html#derFunc(base:provingground.FiniteDistribution[provingground.HoTT.Term])(pd:provingground.ProbabilityDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "derPiVar", "tail" : "(varweight: Double)(rec: ⇒ (FiniteDistribution[Term]) ⇒ (ProbabilityDistribution[Term]) ⇒ ProbabilityDistribution[Term])(p: ProbabilityDistribution[Term]): (FiniteDistribution[Term]) ⇒ ProbabilityDistribution[Option[Term]]", "member" : "provingground.learning.BasicDeducer.derPiVar", "link" : "provingground\/learning\/BasicDeducer.html#derPiVar(varweight:Double)(rec:=>provingground.FiniteDistribution[provingground.HoTT.Term]=>(provingground.ProbabilityDistribution[provingground.HoTT.Term]=>provingground.ProbabilityDistribution[provingground.HoTT.Term]))(p:provingground.ProbabilityDistribution[provingground.HoTT.Term]):provingground.FiniteDistribution[provingground.HoTT.Term]=>provingground.ProbabilityDistribution[Option[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "derLambdaVar", "tail" : "(varweight: Double)(rec: ⇒ (FiniteDistribution[Term]) ⇒ (ProbabilityDistribution[Term]) ⇒ ProbabilityDistribution[Term])(p: ProbabilityDistribution[Term]): (FiniteDistribution[Term]) ⇒ ProbabilityDistribution[Option[Term]]", "member" : "provingground.learning.BasicDeducer.derLambdaVar", "link" : "provingground\/learning\/BasicDeducer.html#derLambdaVar(varweight:Double)(rec:=>provingground.FiniteDistribution[provingground.HoTT.Term]=>(provingground.ProbabilityDistribution[provingground.HoTT.Term]=>provingground.ProbabilityDistribution[provingground.HoTT.Term]))(p:provingground.ProbabilityDistribution[provingground.HoTT.Term]):provingground.FiniteDistribution[provingground.HoTT.Term]=>provingground.ProbabilityDistribution[Option[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "piDistOpt", "tail" : "(base: FiniteDistribution[Term])(x: Term): Option[FiniteDistribution[Term]]", "member" : "provingground.learning.BasicDeducer.piDistOpt", "link" : "provingground\/learning\/BasicDeducer.html#piDistOpt(base:provingground.FiniteDistribution[provingground.HoTT.Term])(x:provingground.HoTT.Term):Option[provingground.FiniteDistribution[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "lambdaDistOpt", "tail" : "(base: FiniteDistribution[Term])(x: Term): Option[FiniteDistribution[Term with Subs[Term]]]", "member" : "provingground.learning.BasicDeducer.lambdaDistOpt", "link" : "provingground\/learning\/BasicDeducer.html#lambdaDistOpt(base:provingground.FiniteDistribution[provingground.HoTT.Term])(x:provingground.HoTT.Term):Option[provingground.FiniteDistribution[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]]", "kind" : "def"}, {"label" : "derPiVal", "tail" : "(varweight: Double)(rec: ⇒ (FiniteDistribution[Term]) ⇒ (ProbabilityDistribution[Term]) ⇒ ProbabilityDistribution[Term])(p: ProbabilityDistribution[Term]): (FiniteDistribution[Term]) ⇒ ProbabilityDistribution[Option[Term]]", "member" : "provingground.learning.BasicDeducer.derPiVal", "link" : "provingground\/learning\/BasicDeducer.html#derPiVal(varweight:Double)(rec:=>provingground.FiniteDistribution[provingground.HoTT.Term]=>(provingground.ProbabilityDistribution[provingground.HoTT.Term]=>provingground.ProbabilityDistribution[provingground.HoTT.Term]))(p:provingground.ProbabilityDistribution[provingground.HoTT.Term]):provingground.FiniteDistribution[provingground.HoTT.Term]=>provingground.ProbabilityDistribution[Option[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "derLambdaVal", "tail" : "(varweight: Double)(rec: ⇒ (FiniteDistribution[Term]) ⇒ (ProbabilityDistribution[Term]) ⇒ ProbabilityDistribution[Term])(p: ProbabilityDistribution[Term]): (FiniteDistribution[Term]) ⇒ ProbabilityDistribution[Option[Term]]", "member" : "provingground.learning.BasicDeducer.derLambdaVal", "link" : "provingground\/learning\/BasicDeducer.html#derLambdaVal(varweight:Double)(rec:=>provingground.FiniteDistribution[provingground.HoTT.Term]=>(provingground.ProbabilityDistribution[provingground.HoTT.Term]=>provingground.ProbabilityDistribution[provingground.HoTT.Term]))(p:provingground.ProbabilityDistribution[provingground.HoTT.Term]):provingground.FiniteDistribution[provingground.HoTT.Term]=>provingground.ProbabilityDistribution[Option[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "derApplnFunc", "tail" : "(rec: ⇒ (FiniteDistribution[Term]) ⇒ (ProbabilityDistribution[Term]) ⇒ ProbabilityDistribution[Term])(p: ProbabilityDistribution[Term]): (FiniteDistribution[Term]) ⇒ ProbabilityDistribution[Option[Term]]", "member" : "provingground.learning.BasicDeducer.derApplnFunc", "link" : "provingground\/learning\/BasicDeducer.html#derApplnFunc(rec:=>provingground.FiniteDistribution[provingground.HoTT.Term]=>(provingground.ProbabilityDistribution[provingground.HoTT.Term]=>provingground.ProbabilityDistribution[provingground.HoTT.Term]))(p:provingground.ProbabilityDistribution[provingground.HoTT.Term]):provingground.FiniteDistribution[provingground.HoTT.Term]=>provingground.ProbabilityDistribution[Option[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "derApplnArg", "tail" : "(rec: ⇒ (FiniteDistribution[Term]) ⇒ (ProbabilityDistribution[Term]) ⇒ ProbabilityDistribution[Term])(p: ProbabilityDistribution[Term]): (FiniteDistribution[Term]) ⇒ ProbabilityDistribution[Option[Term]]", "member" : "provingground.learning.BasicDeducer.derApplnArg", "link" : "provingground\/learning\/BasicDeducer.html#derApplnArg(rec:=>provingground.FiniteDistribution[provingground.HoTT.Term]=>(provingground.ProbabilityDistribution[provingground.HoTT.Term]=>provingground.ProbabilityDistribution[provingground.HoTT.Term]))(p:provingground.ProbabilityDistribution[provingground.HoTT.Term]):provingground.FiniteDistribution[provingground.HoTT.Term]=>provingground.ProbabilityDistribution[Option[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "hFunc", "tail" : "(sc: Double)(pd: ProbabilityDistribution[Term]): ProbabilityDistribution[Term]", "member" : "provingground.learning.BasicDeducer.hFunc", "link" : "provingground\/learning\/BasicDeducer.html#hFunc(sc:Double)(pd:provingground.ProbabilityDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "hSc", "tail" : "(sc: Double): BasicDeducer", "member" : "provingground.learning.BasicDeducer.hSc", "link" : "provingground\/learning\/BasicDeducer.html#hSc(sc:Double):provingground.learning.BasicDeducer", "kind" : "def"}, {"label" : "func", "tail" : "(pd: ProbabilityDistribution[Term]): ProbabilityDistribution[Term]", "member" : "provingground.learning.BasicDeducer.func", "link" : "provingground\/learning\/BasicDeducer.html#func(pd:provingground.ProbabilityDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"member" : "provingground.learning.BasicDeducer#<init>", "error" : "unsupported entity"}, {"label" : "vars", "tail" : ": Vector[Term]", "member" : "provingground.learning.BasicDeducer.vars", "link" : "provingground\/learning\/BasicDeducer.html#vars:Vector[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "varWeight", "tail" : ": Double", "member" : "provingground.learning.BasicDeducer.varWeight", "link" : "provingground\/learning\/BasicDeducer.html#varWeight:Double", "kind" : "val"}, {"label" : "piWeight", "tail" : ": Double", "member" : "provingground.learning.BasicDeducer.piWeight", "link" : "provingground\/learning\/BasicDeducer.html#piWeight:Double", "kind" : "val"}, {"label" : "lambdaWeight", "tail" : ": Double", "member" : "provingground.learning.BasicDeducer.lambdaWeight", "link" : "provingground\/learning\/BasicDeducer.html#lambdaWeight:Double", "kind" : "val"}, {"label" : "applnWeight", "tail" : ": Double", "member" : "provingground.learning.BasicDeducer.applnWeight", "link" : "provingground\/learning\/BasicDeducer.html#applnWeight:Double", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/BasicDeducer.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/BasicDeducer.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/BasicDeducer.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/BasicDeducer.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/BasicDeducer.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/BasicDeducer.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/BasicDeducer.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/BasicDeducer.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/BasicDeducer.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/BasicDeducer.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/BasicDeducer.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/BasicDeducer.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/BasicDeducer.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/BasicDeducer.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/BasicDeducer.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/BasicDeducer.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/learning\/BasicDeducer.html", "kind" : "case class"}, {"name" : "provingground.learning.Collections", "shortDescription" : "", "object" : "provingground\/learning\/Collections$.html", "members_object" : [{"label" : "transversal", "tail" : "(arg: List[A], equiv: (A, A) ⇒ Boolean, accum: List[A]): List[A]", "member" : "provingground.learning.Collections.transversal", "link" : "provingground\/learning\/Collections$.html#transversal[A](arg:List[A],equiv:(A,A)=>Boolean,accum:List[A]):List[A]", "kind" : "def"}, {"label" : "IterateDyn", "tail" : "(init: A, step: (A) ⇒ A, n: Int): A", "member" : "provingground.learning.Collections.IterateDyn", "link" : "provingground\/learning\/Collections$.html#IterateDyn[A](init:A,step:A=>A,n:Int):A", "kind" : "def"}, {"label" : "MultiSet", "tail" : "", "member" : "provingground.learning.Collections.MultiSet", "link" : "provingground\/learning\/Collections$.html#MultiSet", "kind" : "object"}, {"label" : "MultiSet", "tail" : "", "member" : "provingground.learning.Collections.MultiSet", "link" : "provingground\/learning\/Collections$.html#MultiSet[A]extendsSet[A]withProductwithSerializable", "kind" : "case class"}, {"label" : "update", "tail" : "(init: B, tangent: B, epsilon: Double)(s: Shift[B]): B", "member" : "provingground.learning.Collections.update", "link" : "provingground\/learning\/Collections$.html#update[B](init:B,tangent:B,epsilon:Double)(implicits:provingground.learning.Collections.Shift[B]):B", "kind" : "def"}, {"label" : "shiftFromVS", "tail" : "(ls: LinearStructure[V]): Shift[V]", "member" : "provingground.learning.Collections.shiftFromVS", "link" : "provingground\/learning\/Collections$.html#shiftFromVS[V](implicitls:provingground.LinearStructure[V]):provingground.learning.Collections.Shift[V]", "kind" : "implicit def"}, {"label" : "Shift", "tail" : "", "member" : "provingground.learning.Collections.Shift", "link" : "provingground\/learning\/Collections$.html#Shift[B]extendsAnyRef", "kind" : "implicit class"}, {"label" : "VectorArray", "tail" : "(zero: T, ls: LinearStructure[T]): LinearStructure[ArrayMap[L, T]]", "member" : "provingground.learning.Collections.VectorArray", "link" : "provingground\/learning\/Collections$.html#VectorArray[L,T](implicitzero:T,implicitls:provingground.LinearStructure[T]):provingground.LinearStructure[provingground.learning.Collections.ArrayMap[L,T]]", "kind" : "implicit def"}, {"label" : "ZeroMap", "tail" : "(): ArrayMap[L, T]", "member" : "provingground.learning.Collections.ZeroMap", "link" : "provingground\/learning\/Collections$.html#ZeroMap[L,T]:provingground.learning.Collections.ArrayMap[L,T]", "kind" : "implicit def"}, {"label" : "ArrayMap", "tail" : "", "member" : "provingground.learning.Collections.ArrayMap", "link" : "provingground\/learning\/Collections$.html#ArrayMap[L,T]extendsCollections.LabelledArray[L,T]withProductwithSerializable", "kind" : "case class"}, {"label" : "LabelledVector", "tail" : "", "member" : "provingground.learning.Collections.LabelledVector", "link" : "provingground\/learning\/Collections$.html#LabelledVector[L]extendsAnywithCollections.LabelledArray[L,Double]", "kind" : "trait"}, {"label" : "LabelledArray", "tail" : "", "member" : "provingground.learning.Collections.LabelledArray", "link" : "provingground\/learning\/Collections$.html#LabelledArray[L,T]extendsAny", "kind" : "trait"}, {"label" : "InnerProduct", "tail" : "", "member" : "provingground.learning.Collections.InnerProduct", "link" : "provingground\/learning\/Collections$.html#InnerProduct", "kind" : "object"}, {"label" : "InnerProduct", "tail" : "", "member" : "provingground.learning.Collections.InnerProduct", "link" : "provingground\/learning\/Collections$.html#InnerProduct[V]extendsProductwithSerializable", "kind" : "case class"}, {"label" : "ApproxSeq", "tail" : "", "member" : "provingground.learning.Collections.ApproxSeq", "link" : "provingground\/learning\/Collections$.html#ApproxSeq", "kind" : "object"}, {"label" : "ApproxSeq", "tail" : "", "member" : "provingground.learning.Collections.ApproxSeq", "link" : "provingground\/learning\/Collections$.html#ApproxSeq[T]extendsCollections.InfSeq[T]", "kind" : "trait"}, {"label" : "InfSeq", "tail" : "", "member" : "provingground.learning.Collections.InfSeq", "link" : "provingground\/learning\/Collections$.html#InfSeq", "kind" : "object"}, {"label" : "InfSeq", "tail" : "", "member" : "provingground.learning.Collections.InfSeq", "link" : "provingground\/learning\/Collections$.html#InfSeq[T]extendsAnyRef", "kind" : "trait"}, {"label" : "ZeroPair", "tail" : "(za: A, zb: B): (A, B)", "member" : "provingground.learning.Collections.ZeroPair", "link" : "provingground\/learning\/Collections$.html#ZeroPair[A,B](za:A,zb:B):(A,B)", "kind" : "implicit def"}, {"label" : "ZeroReal", "tail" : ": Double", "member" : "provingground.learning.Collections.ZeroReal", "link" : "provingground\/learning\/Collections$.html#ZeroReal:Double", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/Collections$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/Collections$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/Collections$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/Collections$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/Collections$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/Collections$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/Collections$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/Collections$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/Collections$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/Collections$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/Collections$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/Collections$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/Collections$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/Collections$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/Collections$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/Collections$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/Collections$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/Collections$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/Collections$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.learning.Deducer", "shortDescription" : "Generating terms from given ones using the main HoTT operations, and the adjoint of this generation.", "object" : "provingground\/learning\/Deducer$.html", "members_object" : [{"label" : "flow", "tail" : "(fd: FiniteDistribution[Term], shifts: FiniteDistribution[Term]): FiniteDistribution[Term]", "member" : "provingground.learning.Deducer.flow", "link" : "provingground\/learning\/Deducer$.html#flow(fd:provingground.FiniteDistribution[provingground.HoTT.Term],shifts:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.FiniteDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "HashedUnifInv", "tail" : "", "member" : "provingground.learning.Deducer.HashedUnifInv", "link" : "provingground\/learning\/Deducer$.html#HashedUnifInv[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsprovingground.HoTT.Term=>Set[(U,provingground.HoTT.Term)]", "kind" : "class"}, {"label" : "hashedUnifInv", "tail" : "(term: Term, hashedInvMap: Map[ShapeTree, Vector[(Term, Set[(U, Term)])]]): Set[(U, Term)]", "member" : "provingground.learning.Deducer.hashedUnifInv", "link" : "provingground\/learning\/Deducer$.html#hashedUnifInv[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](term:provingground.HoTT.Term,hashedInvMap:Map[provingground.translation.ShapeTree,Vector[(provingground.HoTT.Term,Set[(U,provingground.HoTT.Term)])]]):scala.collection.immutable.Set[(U,provingground.HoTT.Term)]", "kind" : "def"}, {"label" : "unifInv", "tail" : "(term: Term, invMap: Vector[(Term, Set[(U, Term)])]): Set[(U, Term)]", "member" : "provingground.learning.Deducer.unifInv", "link" : "provingground\/learning\/Deducer$.html#unifInv[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](term:provingground.HoTT.Term,invMap:Vector[(provingground.HoTT.Term,Set[(U,provingground.HoTT.Term)])]):scala.collection.immutable.Set[(U,provingground.HoTT.Term)]", "kind" : "def"}, {"label" : "unpickle", "tail" : "(str: String): TermPopulation", "member" : "provingground.learning.Deducer.unpickle", "link" : "provingground\/learning\/Deducer$.html#unpickle(str:String):provingground.learning.TermPopulation", "kind" : "def"}, {"label" : "feedback", "tail" : "(absTheorems: FiniteDistribution[Typ[Term]], absThmsByProofs: FiniteDistribution[Typ[Term]], proofs: Map[Typ[Term], FiniteDistribution[Term]], vars: Vector[Weighted[Term]], lambdaWeight: Double, piWeight: Double): FiniteDistribution[Term]", "member" : "provingground.learning.Deducer.feedback", "link" : "provingground\/learning\/Deducer$.html#feedback(absTheorems:provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]],absThmsByProofs:provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]],proofs:Map[provingground.HoTT.Typ[provingground.HoTT.Term],provingground.FiniteDistribution[provingground.HoTT.Term]],vars:Vector[provingground.Weighted[provingground.HoTT.Term]],lambdaWeight:Double,piWeight:Double):provingground.FiniteDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "proofEntropies", "tail" : "(fd: FiniteDistribution[Term]): Vector[Weighted[Typ[U] forSome {type U >: x$2.type <: Term with Subs[U], val x$2: Term}]]", "member" : "provingground.learning.Deducer.proofEntropies", "link" : "provingground\/learning\/Deducer$.html#proofEntropies(fd:provingground.FiniteDistribution[provingground.HoTT.Term]):scala.collection.immutable.Vector[provingground.Weighted[provingground.HoTT.Typ[U]forSome{typeU>:x$2.type<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U];valx$2:provingground.HoTT.Term}]]", "kind" : "def"}, {"label" : "piValue", "tail" : "(variable: U): (Term) ⇒ Option[Term]", "member" : "provingground.learning.Deducer.piValue", "link" : "provingground\/learning\/Deducer$.html#piValue[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](variable:U):provingground.HoTT.Term=>Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "lambdaValue", "tail" : "(variable: U): (Term) ⇒ Option[Term]", "member" : "provingground.learning.Deducer.lambdaValue", "link" : "provingground\/learning\/Deducer$.html#lambdaValue[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](variable:U):provingground.HoTT.Term=>Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "pi", "tail" : "(varweight: Double)(rec: ⇒ (ProbabilityDistribution[Term]) ⇒ ProbabilityDistribution[Term])(p: ProbabilityDistribution[Term]): ProbabilityDistribution[Option[Term]]", "member" : "provingground.learning.Deducer.pi", "link" : "provingground\/learning\/Deducer$.html#pi(varweight:Double)(rec:=>provingground.ProbabilityDistribution[provingground.HoTT.Term]=>provingground.ProbabilityDistribution[provingground.HoTT.Term])(p:provingground.ProbabilityDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[Option[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "lambda", "tail" : "(varweight: Double)(rec: ⇒ (ProbabilityDistribution[Term]) ⇒ ProbabilityDistribution[Term])(p: ProbabilityDistribution[Term]): ProbabilityDistribution[Option[Term]]", "member" : "provingground.learning.Deducer.lambda", "link" : "provingground\/learning\/Deducer$.html#lambda(varweight:Double)(rec:=>provingground.ProbabilityDistribution[provingground.HoTT.Term]=>provingground.ProbabilityDistribution[provingground.HoTT.Term])(p:provingground.ProbabilityDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[Option[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "eqSubs", "tail" : "(rec: ⇒ (ProbabilityDistribution[Term]) ⇒ ProbabilityDistribution[Term])(p: ProbabilityDistribution[Term])(save: (Term, IdentityTyp[Term], Term) ⇒ Unit): ProbabilityDistribution[Option[Term with Subs[Term]]]", "member" : "provingground.learning.Deducer.eqSubs", "link" : "provingground\/learning\/Deducer$.html#eqSubs(rec:=>provingground.ProbabilityDistribution[provingground.HoTT.Term]=>provingground.ProbabilityDistribution[provingground.HoTT.Term])(p:provingground.ProbabilityDistribution[provingground.HoTT.Term])(save:(provingground.HoTT.Term,provingground.HoTT.IdentityTyp[provingground.HoTT.Term],provingground.HoTT.Term)=>Unit):provingground.ProbabilityDistribution[Option[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]]", "kind" : "def"}, {"label" : "memAppln", "tail" : "(rec: ⇒ (ProbabilityDistribution[Term]) ⇒ ProbabilityDistribution[Term])(p: ProbabilityDistribution[Term])(save: (Term, Term, Term) ⇒ Unit): ProbabilityDistribution[Option[Term]]", "member" : "provingground.learning.Deducer.memAppln", "link" : "provingground\/learning\/Deducer$.html#memAppln(rec:=>provingground.ProbabilityDistribution[provingground.HoTT.Term]=>provingground.ProbabilityDistribution[provingground.HoTT.Term])(p:provingground.ProbabilityDistribution[provingground.HoTT.Term])(save:(provingground.HoTT.Term,provingground.HoTT.Term,provingground.HoTT.Term)=>Unit):provingground.ProbabilityDistribution[Option[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "appln", "tail" : "(rec: ⇒ (ProbabilityDistribution[Term]) ⇒ ProbabilityDistribution[Term])(p: ProbabilityDistribution[Term]): ProbabilityDistribution[Option[Term]]", "member" : "provingground.learning.Deducer.appln", "link" : "provingground\/learning\/Deducer$.html#appln(rec:=>provingground.ProbabilityDistribution[provingground.HoTT.Term]=>provingground.ProbabilityDistribution[provingground.HoTT.Term])(p:provingground.ProbabilityDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[Option[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "InvMap", "tail" : "", "member" : "provingground.learning.Deducer.InvMap", "link" : "provingground\/learning\/Deducer$.html#InvMap=Vector[(provingground.HoTT.Term,Set[(provingground.HoTT.Term,provingground.HoTT.Term)])]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/Deducer$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/Deducer$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/Deducer$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/Deducer$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/Deducer$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/Deducer$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/Deducer$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/Deducer$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/Deducer$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/Deducer$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/Deducer$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/Deducer$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/Deducer$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/Deducer$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/Deducer$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/Deducer$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/Deducer$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/Deducer$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/Deducer$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/learning\/Deducer.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/learning\/Deducer.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Deducer) ⇒ Boolean, msg: ⇒ Any): Deducer", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/Deducer.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Deducer) ⇒ Boolean): Deducer", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/Deducer.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Deducer", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/Deducer.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Deducer", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/Deducer.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Deducer, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/learning\/Deducer.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Deducer, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/learning\/Deducer.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "getFeedback", "tail" : "(): FiniteDistribution[Term]", "member" : "provingground.learning.Deducer.getFeedback", "link" : "provingground\/learning\/Deducer.html#getFeedback:provingground.FiniteDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "getProofs", "tail" : "(absTyp: Typ[Term]): FiniteDistribution[Term]", "member" : "provingground.learning.Deducer.getProofs", "link" : "provingground\/learning\/Deducer.html#getProofs(absTyp:provingground.HoTT.Typ[provingground.HoTT.Term]):provingground.FiniteDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "getLoops", "tail" : "(): Int", "member" : "provingground.learning.Deducer.getLoops", "link" : "provingground\/learning\/Deducer.html#getLoops:Int", "kind" : "def"}, {"label" : "getElapsedTime", "tail" : "(): Long", "member" : "provingground.learning.Deducer.getElapsedTime", "link" : "provingground\/learning\/Deducer.html#getElapsedTime:Long", "kind" : "def"}, {"label" : "abstractTyps", "tail" : "(typ: Typ[Term]): Typ[Term]", "member" : "provingground.learning.Deducer.abstractTyps", "link" : "provingground\/learning\/Deducer.html#abstractTyps(typ:provingground.HoTT.Typ[provingground.HoTT.Term]):provingground.HoTT.Typ[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "getAbstractTheoremsByProofs", "tail" : "(): FiniteDistribution[Typ[Term]]", "member" : "provingground.learning.Deducer.getAbstractTheoremsByProofs", "link" : "provingground\/learning\/Deducer.html#getAbstractTheoremsByProofs:provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "getAbstractTheorems", "tail" : "(): FiniteDistribution[Typ[Term]]", "member" : "provingground.learning.Deducer.getAbstractTheorems", "link" : "provingground\/learning\/Deducer.html#getAbstractTheorems:provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "backProp", "tail" : "(epsilon: Double, invImage: (Term) ⇒ Set[(Term, Term)])(fd: Prob): (TruncatedDistribution[Term]) ⇒ TruncatedDistribution[Term]", "member" : "provingground.learning.Deducer.backProp", "link" : "provingground\/learning\/Deducer.html#backProp(epsilon:Double,invImage:provingground.HoTT.Term=>Set[(provingground.HoTT.Term,provingground.HoTT.Term)])(fd:Deducer.this.Prob):provingground.learning.TruncatedDistribution[provingground.HoTT.Term]=>provingground.learning.TruncatedDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "piPropValues", "tail" : "(backProp: ⇒ (Prob) ⇒ (TruncatedDistribution[Term]) ⇒ TruncatedDistribution[Term])(fd: Prob)(td: TruncatedDistribution[Term]): TruncatedDistribution[Term]", "member" : "provingground.learning.Deducer.piPropValues", "link" : "provingground\/learning\/Deducer.html#piPropValues(backProp:=>Deducer.this.Prob=>(provingground.learning.TruncatedDistribution[provingground.HoTT.Term]=>provingground.learning.TruncatedDistribution[provingground.HoTT.Term]))(fd:Deducer.this.Prob)(td:provingground.learning.TruncatedDistribution[provingground.HoTT.Term]):provingground.learning.TruncatedDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "piPropValuesTerm", "tail" : "(backProp: ⇒ (Prob) ⇒ (TruncatedDistribution[Term]) ⇒ TruncatedDistribution[Term])(fd: Prob): (Term) ⇒ TruncatedDistribution[Term]", "member" : "provingground.learning.Deducer.piPropValuesTerm", "link" : "provingground\/learning\/Deducer.html#piPropValuesTerm(backProp:=>Deducer.this.Prob=>(provingground.learning.TruncatedDistribution[provingground.HoTT.Term]=>provingground.learning.TruncatedDistribution[provingground.HoTT.Term]))(fd:Deducer.this.Prob):provingground.HoTT.Term=>provingground.learning.TruncatedDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "piPropVar", "tail" : "(backProp: ⇒ (Prob) ⇒ (TruncatedDistribution[Term]) ⇒ TruncatedDistribution[Term])(fd: Prob)(td: TruncatedDistribution[Term]): TruncatedDistribution[Term]", "member" : "provingground.learning.Deducer.piPropVar", "link" : "provingground\/learning\/Deducer.html#piPropVar(backProp:=>Deducer.this.Prob=>(provingground.learning.TruncatedDistribution[provingground.HoTT.Term]=>provingground.learning.TruncatedDistribution[provingground.HoTT.Term]))(fd:Deducer.this.Prob)(td:provingground.learning.TruncatedDistribution[provingground.HoTT.Term]):provingground.learning.TruncatedDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "piPropVarTerm", "tail" : "(backProp: ⇒ (Prob) ⇒ (TruncatedDistribution[Term]) ⇒ TruncatedDistribution[Term])(fd: Prob): (Term) ⇒ TruncatedDistribution[Term]", "member" : "provingground.learning.Deducer.piPropVarTerm", "link" : "provingground\/learning\/Deducer.html#piPropVarTerm(backProp:=>Deducer.this.Prob=>(provingground.learning.TruncatedDistribution[provingground.HoTT.Term]=>provingground.learning.TruncatedDistribution[provingground.HoTT.Term]))(fd:Deducer.this.Prob):provingground.HoTT.Term=>provingground.learning.TruncatedDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "lambdaPropValues", "tail" : "(backProp: ⇒ (Prob) ⇒ (TruncatedDistribution[Term]) ⇒ TruncatedDistribution[Term])(fd: Prob)(td: TruncatedDistribution[Term]): TruncatedDistribution[Term]", "member" : "provingground.learning.Deducer.lambdaPropValues", "link" : "provingground\/learning\/Deducer.html#lambdaPropValues(backProp:=>Deducer.this.Prob=>(provingground.learning.TruncatedDistribution[provingground.HoTT.Term]=>provingground.learning.TruncatedDistribution[provingground.HoTT.Term]))(fd:Deducer.this.Prob)(td:provingground.learning.TruncatedDistribution[provingground.HoTT.Term]):provingground.learning.TruncatedDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "lambdaPropValuesTerm", "tail" : "(backProp: ⇒ (Prob) ⇒ (TruncatedDistribution[Term]) ⇒ TruncatedDistribution[Term])(fd: Prob): (Term) ⇒ TruncatedDistribution[Term]", "member" : "provingground.learning.Deducer.lambdaPropValuesTerm", "link" : "provingground\/learning\/Deducer.html#lambdaPropValuesTerm(backProp:=>Deducer.this.Prob=>(provingground.learning.TruncatedDistribution[provingground.HoTT.Term]=>provingground.learning.TruncatedDistribution[provingground.HoTT.Term]))(fd:Deducer.this.Prob):provingground.HoTT.Term=>provingground.learning.TruncatedDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "lambdaPropVar", "tail" : "(backProp: ⇒ (Prob) ⇒ (TruncatedDistribution[Term]) ⇒ TruncatedDistribution[Term])(fd: Prob)(td: TruncatedDistribution[Term]): TruncatedDistribution[Term]", "member" : "provingground.learning.Deducer.lambdaPropVar", "link" : "provingground\/learning\/Deducer.html#lambdaPropVar(backProp:=>Deducer.this.Prob=>(provingground.learning.TruncatedDistribution[provingground.HoTT.Term]=>provingground.learning.TruncatedDistribution[provingground.HoTT.Term]))(fd:Deducer.this.Prob)(td:provingground.learning.TruncatedDistribution[provingground.HoTT.Term]):provingground.learning.TruncatedDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "lambdaPropVarTerm", "tail" : "(backProp: ⇒ (Prob) ⇒ (TruncatedDistribution[Term]) ⇒ TruncatedDistribution[Term])(fd: Prob): (Term) ⇒ TruncatedDistribution[Term]", "member" : "provingground.learning.Deducer.lambdaPropVarTerm", "link" : "provingground\/learning\/Deducer.html#lambdaPropVarTerm(backProp:=>Deducer.this.Prob=>(provingground.learning.TruncatedDistribution[provingground.HoTT.Term]=>provingground.learning.TruncatedDistribution[provingground.HoTT.Term]))(fd:Deducer.this.Prob):provingground.HoTT.Term=>provingground.learning.TruncatedDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "funcUniProp", "tail" : "(backProp: ⇒ (Prob) ⇒ (TruncatedDistribution[Term]) ⇒ TruncatedDistribution[Term])(fd: Prob, invImage: (Term) ⇒ Set[(Term, Term)])(td: TruncatedDistribution[Term]): TruncatedDistribution[Term]", "member" : "provingground.learning.Deducer.funcUniProp", "link" : "provingground\/learning\/Deducer.html#funcUniProp(backProp:=>Deducer.this.Prob=>(provingground.learning.TruncatedDistribution[provingground.HoTT.Term]=>provingground.learning.TruncatedDistribution[provingground.HoTT.Term]))(fd:Deducer.this.Prob,invImage:provingground.HoTT.Term=>Set[(provingground.HoTT.Term,provingground.HoTT.Term)])(td:provingground.learning.TruncatedDistribution[provingground.HoTT.Term]):provingground.learning.TruncatedDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "funcUniPropTerm", "tail" : "(backProp: ⇒ (Prob) ⇒ (TruncatedDistribution[Term]) ⇒ TruncatedDistribution[Term])(fd: Prob, invImage: (Term) ⇒ Set[(Term, Term)]): (Term) ⇒ TruncatedDistribution[Term]", "member" : "provingground.learning.Deducer.funcUniPropTerm", "link" : "provingground\/learning\/Deducer.html#funcUniPropTerm(backProp:=>Deducer.this.Prob=>(provingground.learning.TruncatedDistribution[provingground.HoTT.Term]=>provingground.learning.TruncatedDistribution[provingground.HoTT.Term]))(fd:Deducer.this.Prob,invImage:provingground.HoTT.Term=>Set[(provingground.HoTT.Term,provingground.HoTT.Term)]):provingground.HoTT.Term=>provingground.learning.TruncatedDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "BufferedRun", "tail" : "", "member" : "provingground.learning.Deducer.BufferedRun", "link" : "provingground\/learning\/Deducer.html#BufferedRunextendsAnyRef", "kind" : "class"}, {"label" : "learnerNextDistribution", "tail" : "(fd: FiniteDistribution[Term], theorems: FiniteDistribution[Typ[Term]], n: Int, memory: Boolean, accum: InvMap, smooth: (FiniteDistribution[Term]) ⇒ FiniteDistribution[Term]): (FiniteDistribution[Term], InvMap)", "member" : "provingground.learning.Deducer.learnerNextDistribution", "link" : "provingground\/learning\/Deducer.html#learnerNextDistribution(fd:provingground.FiniteDistribution[provingground.HoTT.Term],theorems:provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]],n:Int,memory:Boolean,accum:provingground.learning.Deducer.InvMap,smooth:provingground.FiniteDistribution[provingground.HoTT.Term]=>provingground.FiniteDistribution[provingground.HoTT.Term]):(provingground.FiniteDistribution[provingground.HoTT.Term],provingground.learning.Deducer.InvMap)", "kind" : "def"}, {"label" : "nextDistribution", "tail" : "(fd: FiniteDistribution[Term], n: Int, memory: Boolean, accum: InvMap, smooth: (FiniteDistribution[Term]) ⇒ FiniteDistribution[Term]): (FiniteDistribution[Term], InvMap)", "member" : "provingground.learning.Deducer.nextDistribution", "link" : "provingground\/learning\/Deducer.html#nextDistribution(fd:provingground.FiniteDistribution[provingground.HoTT.Term],n:Int,memory:Boolean,accum:provingground.learning.Deducer.InvMap,smooth:provingground.FiniteDistribution[provingground.HoTT.Term]=>provingground.FiniteDistribution[provingground.HoTT.Term]):(provingground.FiniteDistribution[provingground.HoTT.Term],provingground.learning.Deducer.InvMap)", "kind" : "def"}, {"label" : "shiftFD", "tail" : "(popln: TermPopulation, cumApplnInv: InvMap): FiniteDistribution[Term]", "member" : "provingground.learning.Deducer.shiftFD", "link" : "provingground\/learning\/Deducer.html#shiftFD(popln:provingground.learning.TermPopulation,cumApplnInv:provingground.learning.Deducer.InvMap):provingground.FiniteDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "absFD", "tail" : "(fd: FiniteDistribution[Term]): FiniteDistribution[Term]", "member" : "provingground.learning.Deducer.absFD", "link" : "provingground\/learning\/Deducer.html#absFD(fd:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.FiniteDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "getSample", "tail" : "(pd: ProbabilityDistribution[Term], n: Int, accum: InvMap): TermPopulation", "member" : "provingground.learning.Deducer.getSample", "link" : "provingground\/learning\/Deducer.html#getSample(pd:provingground.ProbabilityDistribution[provingground.HoTT.Term],n:Int,accum:provingground.learning.Deducer.InvMap):provingground.learning.TermPopulation", "kind" : "def"}, {"label" : "Sampler", "tail" : "", "member" : "provingground.learning.Deducer.Sampler", "link" : "provingground\/learning\/Deducer.html#SamplerextendsAnyRef", "kind" : "class"}, {"label" : "piFD", "tail" : "(fd: Prob)(variable: Term): Prob", "member" : "provingground.learning.Deducer.piFD", "link" : "provingground\/learning\/Deducer.html#piFD(fd:Deducer.this.Prob)(variable:provingground.HoTT.Term):Deducer.this.Prob", "kind" : "def"}, {"label" : "lambdaProb", "tail" : "(prob: Prob)(variable: Term): Prob", "member" : "provingground.learning.Deducer.lambdaProb", "link" : "provingground\/learning\/Deducer.html#lambdaProb(prob:Deducer.this.Prob)(variable:provingground.HoTT.Term):Deducer.this.Prob", "kind" : "def"}, {"label" : "lambdaFD", "tail" : "(fd: Prob)(variable: Term): (Term) ⇒ Double", "member" : "provingground.learning.Deducer.lambdaFD", "link" : "provingground\/learning\/Deducer.html#lambdaFD(fd:Deducer.this.Prob)(variable:provingground.HoTT.Term):provingground.HoTT.Term=>Double", "kind" : "def"}, {"label" : "shifted", "tail" : "(fd: FiniteDistribution[Term], td: TruncatedDistribution[Term]): FiniteDistribution[Term]", "member" : "provingground.learning.Deducer.shifted", "link" : "provingground\/learning\/Deducer.html#shifted(fd:provingground.FiniteDistribution[provingground.HoTT.Term],td:provingground.learning.TruncatedDistribution[provingground.HoTT.Term]):provingground.FiniteDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "Prob", "tail" : "", "member" : "provingground.learning.Deducer.Prob", "link" : "provingground\/learning\/Deducer.html#Prob=provingground.HoTT.Term=>Double", "kind" : "type"}, {"label" : "absBucket", "tail" : "", "member" : "provingground.learning.Deducer.absBucket", "link" : "provingground\/learning\/Deducer.html#absBucket", "kind" : "object"}, {"label" : "bucket", "tail" : "", "member" : "provingground.learning.Deducer.bucket", "link" : "provingground\/learning\/Deducer.html#bucket", "kind" : "object"}, {"member" : "provingground.learning.Deducer#<init>", "error" : "unsupported entity"}, {"label" : "genMemory", "tail" : ": Double", "member" : "provingground.learning.Deducer.genMemory", "link" : "provingground\/learning\/Deducer.html#genMemory:Double", "kind" : "val"}, {"label" : "abstractionWeight", "tail" : ": Double", "member" : "provingground.learning.Deducer.abstractionWeight", "link" : "provingground\/learning\/Deducer.html#abstractionWeight:Double", "kind" : "val"}, {"label" : "feedbackScale", "tail" : ": Double", "member" : "provingground.learning.Deducer.feedbackScale", "link" : "provingground\/learning\/Deducer.html#feedbackScale:Double", "kind" : "val"}, {"label" : "cutoff", "tail" : ": Double", "member" : "provingground.learning.Deducer.cutoff", "link" : "provingground\/learning\/Deducer.html#cutoff:Double", "kind" : "val"}, {"label" : "propDecay", "tail" : ": Double", "member" : "provingground.learning.Deducer.propDecay", "link" : "provingground\/learning\/Deducer.html#propDecay:Double", "kind" : "val"}, {"label" : "vars", "tail" : ": Vector[Weighted[Term]]", "member" : "provingground.learning.Deducer.vars", "link" : "provingground\/learning\/Deducer.html#vars:Vector[provingground.Weighted[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "varWeight", "tail" : ": Double", "member" : "provingground.learning.Deducer.varWeight", "link" : "provingground\/learning\/Deducer.html#varWeight:Double", "kind" : "val"}, {"label" : "piWeight", "tail" : ": Double", "member" : "provingground.learning.Deducer.piWeight", "link" : "provingground\/learning\/Deducer.html#piWeight:Double", "kind" : "val"}, {"label" : "lambdaWeight", "tail" : ": Double", "member" : "provingground.learning.Deducer.lambdaWeight", "link" : "provingground\/learning\/Deducer.html#lambdaWeight:Double", "kind" : "val"}, {"label" : "applnWeight", "tail" : ": Double", "member" : "provingground.learning.Deducer.applnWeight", "link" : "provingground\/learning\/Deducer.html#applnWeight:Double", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/Deducer.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/Deducer.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/Deducer.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/Deducer.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/Deducer.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/Deducer.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/Deducer.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/Deducer.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/Deducer.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/Deducer.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/Deducer.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/Deducer.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/Deducer.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/Deducer.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/Deducer.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/Deducer.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/learning\/Deducer.html", "kind" : "object"}, {"name" : "provingground.learning.DiffbleFunction", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/learning\/DiffbleFunction.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/learning\/DiffbleFunction.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (DiffbleFunction[A, B]) ⇒ Boolean, msg: ⇒ Any): DiffbleFunction[A, B]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/DiffbleFunction.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (DiffbleFunction[A, B]) ⇒ Boolean): DiffbleFunction[A, B]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/DiffbleFunction.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): DiffbleFunction[A, B]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/DiffbleFunction.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): DiffbleFunction[A, B]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/DiffbleFunction.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (DiffbleFunction[A, B], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/learning\/DiffbleFunction.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (DiffbleFunction[A, B], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/learning\/DiffbleFunction.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "apply", "tail" : "(av: TangVec[A]): TangVec[B]", "member" : "provingground.learning.DiffbleFunction.apply", "link" : "provingground\/learning\/DiffbleFunction.html#apply(av:provingground.learning.TangVec[A]):provingground.learning.TangVec[B]", "kind" : "def"}, {"label" : "total", "tail" : "(a: A, t: A): (B, B)", "member" : "provingground.learning.DiffbleFunction.total", "link" : "provingground\/learning\/DiffbleFunction.html#total(a:A,t:A):(B,B)", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Function1.toString", "link" : "provingground\/learning\/DiffbleFunction.html#toString():String", "kind" : "def"}, {"label" : "andThen", "tail" : "(g: (B) ⇒ A): (A) ⇒ A", "member" : "scala.Function1.andThen", "link" : "provingground\/learning\/DiffbleFunction.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) ⇒ A): (A) ⇒ B", "member" : "scala.Function1.compose", "link" : "provingground\/learning\/DiffbleFunction.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/DiffbleFunction.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/DiffbleFunction.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/DiffbleFunction.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/DiffbleFunction.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/DiffbleFunction.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/DiffbleFunction.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/DiffbleFunction.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/DiffbleFunction.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/DiffbleFunction.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/DiffbleFunction.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/DiffbleFunction.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/DiffbleFunction.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/DiffbleFunction.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/DiffbleFunction.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/DiffbleFunction.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/DiffbleFunction.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/DiffbleFunction.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/DiffbleFunction.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(a: A): B", "member" : "provingground.learning.DiffbleFunction.apply", "link" : "provingground\/learning\/DiffbleFunction.html#apply(a:A):B", "kind" : "abstract def"}, {"label" : "derv", "tail" : "(a: A, t: A): B", "member" : "provingground.learning.DiffbleFunction.derv", "link" : "provingground\/learning\/DiffbleFunction.html#derv(a:A,t:A):B", "kind" : "abstract def"}], "shortDescription" : "", "object" : "provingground\/learning\/DiffbleFunction$.html", "members_object" : [{"label" : "LoopyDiffFunc", "tail" : "", "member" : "provingground.learning.DiffbleFunction.LoopyDiffFunc", "link" : "provingground\/learning\/DiffbleFunction$.html#LoopyDiffFunc[A,B]extendsDiffbleFunction.LoopyFunc[A,B]withDiffbleFunction[A,cats.Eval[B]]", "kind" : "class"}, {"label" : "LoopyFunc", "tail" : "", "member" : "provingground.learning.DiffbleFunction.LoopyFunc", "link" : "provingground\/learning\/DiffbleFunction$.html#LoopyFunc[A,B]extendsA=>cats.Eval[B]", "kind" : "class"}, {"label" : "Quadratic", "tail" : "", "member" : "provingground.learning.DiffbleFunction.Quadratic", "link" : "provingground\/learning\/DiffbleFunction$.html#Quadratic[A,B]extendsProductwithSerializable", "kind" : "case class"}, {"label" : "Linear", "tail" : "", "member" : "provingground.learning.DiffbleFunction.Linear", "link" : "provingground\/learning\/DiffbleFunction$.html#Linear[A,B]extendsDiffbleFunction[A,B]withProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/DiffbleFunction$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/DiffbleFunction$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/DiffbleFunction$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/DiffbleFunction$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/DiffbleFunction$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/DiffbleFunction$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/DiffbleFunction$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/DiffbleFunction$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/DiffbleFunction$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/DiffbleFunction$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/DiffbleFunction$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/DiffbleFunction$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/DiffbleFunction$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/DiffbleFunction$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/DiffbleFunction$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/DiffbleFunction$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/DiffbleFunction$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/DiffbleFunction$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/DiffbleFunction$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/learning\/DiffbleFunction.html", "kind" : "trait"}, {"name" : "provingground.learning.ExstFunc", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/learning\/ExstFunc.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/learning\/ExstFunc.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ExstFunc) ⇒ Boolean, msg: ⇒ Any): ExstFunc", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/ExstFunc.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ExstFunc) ⇒ Boolean): ExstFunc", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/ExstFunc.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): ExstFunc", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/ExstFunc.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ExstFunc", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/ExstFunc.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ExstFunc, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/learning\/ExstFunc.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ExstFunc, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/learning\/ExstFunc.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "apply", "tail" : "(arg: Term): Option[Term]", "member" : "provingground.learning.ExstFunc.apply", "link" : "provingground\/learning\/ExstFunc.html#apply(arg:provingground.HoTT.Term):Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "dom", "tail" : ": Typ[Term]", "member" : "provingground.learning.ExstFunc.dom", "link" : "provingground\/learning\/ExstFunc.html#dom:provingground.HoTT.Typ[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "term", "tail" : ": Term", "member" : "provingground.learning.ExstFunc.term", "link" : "provingground\/learning\/ExstFunc.html#term:provingground.HoTT.Term", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/ExstFunc.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/ExstFunc.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/ExstFunc.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/ExstFunc.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/ExstFunc.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/ExstFunc.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/ExstFunc.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/ExstFunc.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/ExstFunc.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/ExstFunc.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/ExstFunc.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/ExstFunc.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/ExstFunc.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/ExstFunc.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/ExstFunc.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/ExstFunc.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/ExstFunc.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/ExstFunc.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/ExstFunc.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "func", "tail" : ": FuncLike[U, V]", "member" : "provingground.learning.ExstFunc.func", "link" : "provingground\/learning\/ExstFunc.html#func:provingground.HoTT.FuncLike[ExstFunc.this.U,ExstFunc.this.V]", "kind" : "abstract val"}, {"member" : "provingground.learning.ExstFunc.V", "error" : "unsupported entity"}, {"member" : "provingground.learning.ExstFunc.U", "error" : "unsupported entity"}], "shortDescription" : "", "object" : "provingground\/learning\/ExstFunc$.html", "members_object" : [{"label" : "opt", "tail" : "(t: Term): Option[ExstFunc]", "member" : "provingground.learning.ExstFunc.opt", "link" : "provingground\/learning\/ExstFunc$.html#opt(t:provingground.HoTT.Term):Option[provingground.learning.ExstFunc]", "kind" : "def"}, {"label" : "apply", "tail" : "(fn: FuncLike[X, Y]): ExstFunc { ... \/* 2 definitions in type refinement *\/ }", "member" : "provingground.learning.ExstFunc.apply", "link" : "provingground\/learning\/ExstFunc$.html#apply[X<:provingground.HoTT.Termwithprovingground.HoTT.Subs[X],Y<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Y]](fn:provingground.HoTT.FuncLike[X,Y]):provingground.learning.ExstFunc{typeU=X;typeV=Y}", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/ExstFunc$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/ExstFunc$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/ExstFunc$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/ExstFunc$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/ExstFunc$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/ExstFunc$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/ExstFunc$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/ExstFunc$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/ExstFunc$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/ExstFunc$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/ExstFunc$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/ExstFunc$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/ExstFunc$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/ExstFunc$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/ExstFunc$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/ExstFunc$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/ExstFunc$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/ExstFunc$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/ExstFunc$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/learning\/ExstFunc.html", "kind" : "trait"}, {"name" : "provingground.learning.FineDeducer", "shortDescription" : "A refined deducer, i.e., evolution of terms and derivatives of evolution.", "object" : "provingground\/learning\/FineDeducer$.html", "members_object" : [{"label" : "piEv", "tail" : "(varweight: Double)(typEvolve: ⇒ (FiniteDistribution[Term]) ⇒ ProbabilityDistribution[Term], valueEvolve: ⇒ (Term) ⇒ (FiniteDistribution[Term]) ⇒ ProbabilityDistribution[Term])(p: FiniteDistribution[Term]): ProbabilityDistribution[Option[Term]]", "member" : "provingground.learning.FineDeducer.piEv", "link" : "provingground\/learning\/FineDeducer$.html#piEv(varweight:Double)(typEvolve:=>provingground.FiniteDistribution[provingground.HoTT.Term]=>provingground.ProbabilityDistribution[provingground.HoTT.Term],valueEvolve:=>provingground.HoTT.Term=>(provingground.FiniteDistribution[provingground.HoTT.Term]=>provingground.ProbabilityDistribution[provingground.HoTT.Term]))(p:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[Option[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "lambdaEv", "tail" : "(varweight: Double)(typEvolve: ⇒ (FiniteDistribution[Term]) ⇒ ProbabilityDistribution[Term], valueEvolve: ⇒ (Term) ⇒ (FiniteDistribution[Term]) ⇒ ProbabilityDistribution[Term])(p: FiniteDistribution[Term]): ProbabilityDistribution[Option[Term]]", "member" : "provingground.learning.FineDeducer.lambdaEv", "link" : "provingground\/learning\/FineDeducer$.html#lambdaEv(varweight:Double)(typEvolve:=>provingground.FiniteDistribution[provingground.HoTT.Term]=>provingground.ProbabilityDistribution[provingground.HoTT.Term],valueEvolve:=>provingground.HoTT.Term=>(provingground.FiniteDistribution[provingground.HoTT.Term]=>provingground.ProbabilityDistribution[provingground.HoTT.Term]))(p:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[Option[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "simpleApplnEv", "tail" : "(funcEvolve: ⇒ (FiniteDistribution[Term]) ⇒ ProbabilityDistribution[SomeFunc], argEvolve: ⇒ (Typ[Term]) ⇒ (FiniteDistribution[Term]) ⇒ ProbabilityDistribution[Term])(p: FiniteDistribution[Term]): ProbabilityDistribution[v forSome {type v <: Term with Subs[v]}]", "member" : "provingground.learning.FineDeducer.simpleApplnEv", "link" : "provingground\/learning\/FineDeducer$.html#simpleApplnEv(funcEvolve:=>provingground.FiniteDistribution[provingground.HoTT.Term]=>provingground.ProbabilityDistribution[provingground.learning.FineDeducer.SomeFunc],argEvolve:=>provingground.HoTT.Typ[provingground.HoTT.Term]=>(provingground.FiniteDistribution[provingground.HoTT.Term]=>provingground.ProbabilityDistribution[provingground.HoTT.Term]))(p:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[vforSome{typev<:provingground.HoTT.Termwithprovingground.HoTT.Subs[v]}]", "kind" : "def"}, {"label" : "unifApplnEv", "tail" : "(funcEvolve: ⇒ (FiniteDistribution[Term]) ⇒ ProbabilityDistribution[SomeFunc], argEvolve: ⇒ (FiniteDistribution[Term]) ⇒ ProbabilityDistribution[Term])(p: FiniteDistribution[Term]): ProbabilityDistribution[Option[Term]]", "member" : "provingground.learning.FineDeducer.unifApplnEv", "link" : "provingground\/learning\/FineDeducer$.html#unifApplnEv(funcEvolve:=>provingground.FiniteDistribution[provingground.HoTT.Term]=>provingground.ProbabilityDistribution[provingground.learning.FineDeducer.SomeFunc],argEvolve:=>provingground.FiniteDistribution[provingground.HoTT.Term]=>provingground.ProbabilityDistribution[provingground.HoTT.Term])(p:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[Option[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "unif", "tail" : "(vars: Term*)(terms: Term*)(axioms: Typ[Term]*): FiniteDistribution[Term]", "member" : "provingground.learning.FineDeducer.unif", "link" : "provingground\/learning\/FineDeducer$.html#unif(vars:provingground.HoTT.Term*)(terms:provingground.HoTT.Term*)(axioms:provingground.HoTT.Typ[provingground.HoTT.Term]*):provingground.FiniteDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "asTyps", "tail" : "(pd: ProbabilityDistribution[Term]): ProbabilityDistribution[Typ[Term]]", "member" : "provingground.learning.FineDeducer.asTyps", "link" : "provingground\/learning\/FineDeducer$.html#asTyps(pd:provingground.ProbabilityDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "asFuncs", "tail" : "(pd: ProbabilityDistribution[Term]): ProbabilityDistribution[SomeFunc]", "member" : "provingground.learning.FineDeducer.asFuncs", "link" : "provingground\/learning\/FineDeducer$.html#asFuncs(pd:provingground.ProbabilityDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[provingground.learning.FineDeducer.SomeFunc]", "kind" : "def"}, {"label" : "typClosure", "tail" : "(vars: Vector[Term])(fd: FiniteDistribution[Typ[Term]]): FiniteDistribution[Typ[Term]]", "member" : "provingground.learning.FineDeducer.typClosure", "link" : "provingground\/learning\/FineDeducer$.html#typClosure(vars:Vector[provingground.HoTT.Term])(fd:provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]):provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "termClosure", "tail" : "(vars: Vector[Term])(fd: FiniteDistribution[Term]): FiniteDistribution[Term]", "member" : "provingground.learning.FineDeducer.termClosure", "link" : "provingground\/learning\/FineDeducer$.html#termClosure(vars:Vector[provingground.HoTT.Term])(fd:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.FiniteDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "SomeFunc", "tail" : "", "member" : "provingground.learning.FineDeducer.SomeFunc", "link" : "provingground\/learning\/FineDeducer$.html#SomeFunc=provingground.HoTT.FuncLike[u,v]forSome{typeu<:provingground.HoTT.Termwithprovingground.HoTT.Subs[u];typev<:provingground.HoTT.Termwithprovingground.HoTT.Subs[v]}", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/FineDeducer$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/FineDeducer$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/FineDeducer$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/FineDeducer$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/FineDeducer$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/FineDeducer$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/FineDeducer$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/FineDeducer$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/FineDeducer$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/FineDeducer$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/FineDeducer$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/FineDeducer$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/FineDeducer$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/FineDeducer$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/FineDeducer$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/FineDeducer$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/FineDeducer$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/FineDeducer$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/FineDeducer$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/learning\/FineDeducer.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/learning\/FineDeducer.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (FineDeducer) ⇒ Boolean, msg: ⇒ Any): FineDeducer", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/FineDeducer.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (FineDeducer) ⇒ Boolean): FineDeducer", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/FineDeducer.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): FineDeducer", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/FineDeducer.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): FineDeducer", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/FineDeducer.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (FineDeducer, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/learning\/FineDeducer.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (FineDeducer, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/learning\/FineDeducer.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "DevolveTyp", "tail" : "(fd: FiniteDistribution[Term], tang: FiniteDistribution[Term]): ProbabilityDistribution[Term]", "member" : "provingground.learning.FineDeducer.DevolveTyp", "link" : "provingground\/learning\/FineDeducer.html#DevolveTyp(fd:provingground.FiniteDistribution[provingground.HoTT.Term],tang:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "DevolveWithType", "tail" : "(tp: Typ[Term])(fd: FiniteDistribution[Term], tang: FiniteDistribution[Term]): ProbabilityDistribution[Term]", "member" : "provingground.learning.FineDeducer.DevolveWithType", "link" : "provingground\/learning\/FineDeducer.html#DevolveWithType(tp:provingground.HoTT.Typ[provingground.HoTT.Term])(fd:provingground.FiniteDistribution[provingground.HoTT.Term],tang:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "DevolvTypFamilies", "tail" : "(fd: FiniteDistribution[Term], tang: FiniteDistribution[Term]): ProbabilityDistribution[SomeFunc]", "member" : "provingground.learning.FineDeducer.DevolvTypFamilies", "link" : "provingground\/learning\/FineDeducer.html#DevolvTypFamilies(fd:provingground.FiniteDistribution[provingground.HoTT.Term],tang:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[provingground.learning.FineDeducer.SomeFunc]", "kind" : "def"}, {"label" : "DevolvFuncs", "tail" : "(fd: FiniteDistribution[Term], tang: FiniteDistribution[Term]): ProbabilityDistribution[SomeFunc]", "member" : "provingground.learning.FineDeducer.DevolvFuncs", "link" : "provingground\/learning\/FineDeducer.html#DevolvFuncs(fd:provingground.FiniteDistribution[provingground.HoTT.Term],tang:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[provingground.learning.FineDeducer.SomeFunc]", "kind" : "def"}, {"label" : "DpiVal", "tail" : "(fd: FiniteDistribution[Term], tang: FiniteDistribution[Term]): ProbabilityDistribution[Option[Term]]", "member" : "provingground.learning.FineDeducer.DpiVal", "link" : "provingground\/learning\/FineDeducer.html#DpiVal(fd:provingground.FiniteDistribution[provingground.HoTT.Term],tang:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[Option[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "DpiVar", "tail" : "(fd: FiniteDistribution[Term], tang: FiniteDistribution[Term]): ProbabilityDistribution[Option[Term]]", "member" : "provingground.learning.FineDeducer.DpiVar", "link" : "provingground\/learning\/FineDeducer.html#DpiVar(fd:provingground.FiniteDistribution[provingground.HoTT.Term],tang:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[Option[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "DlambdaVal", "tail" : "(fd: FiniteDistribution[Term], tang: FiniteDistribution[Term]): ProbabilityDistribution[Option[Term]]", "member" : "provingground.learning.FineDeducer.DlambdaVal", "link" : "provingground\/learning\/FineDeducer.html#DlambdaVal(fd:provingground.FiniteDistribution[provingground.HoTT.Term],tang:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[Option[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "DlambdaVar", "tail" : "(fd: FiniteDistribution[Term], tang: FiniteDistribution[Term]): ProbabilityDistribution[Option[Term]]", "member" : "provingground.learning.FineDeducer.DlambdaVar", "link" : "provingground\/learning\/FineDeducer.html#DlambdaVar(fd:provingground.FiniteDistribution[provingground.HoTT.Term],tang:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[Option[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "DsimpleApplnArg", "tail" : "(fd: FiniteDistribution[Term], tang: FiniteDistribution[Term]): ProbabilityDistribution[Term]", "member" : "provingground.learning.FineDeducer.DsimpleApplnArg", "link" : "provingground\/learning\/FineDeducer.html#DsimpleApplnArg(fd:provingground.FiniteDistribution[provingground.HoTT.Term],tang:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "DsimpleApplnTypArg", "tail" : "(fd: FiniteDistribution[Term], tang: FiniteDistribution[Term]): ProbabilityDistribution[Term]", "member" : "provingground.learning.FineDeducer.DsimpleApplnTypArg", "link" : "provingground\/learning\/FineDeducer.html#DsimpleApplnTypArg(fd:provingground.FiniteDistribution[provingground.HoTT.Term],tang:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "DsimpleApplnTypFamilies", "tail" : "(fd: FiniteDistribution[Term], tang: FiniteDistribution[Term]): ProbabilityDistribution[Term]", "member" : "provingground.learning.FineDeducer.DsimpleApplnTypFamilies", "link" : "provingground\/learning\/FineDeducer.html#DsimpleApplnTypFamilies(fd:provingground.FiniteDistribution[provingground.HoTT.Term],tang:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "DunifApplnTypArg", "tail" : "(fd: FiniteDistribution[Term], tang: FiniteDistribution[Term]): ProbabilityDistribution[Option[Term]]", "member" : "provingground.learning.FineDeducer.DunifApplnTypArg", "link" : "provingground\/learning\/FineDeducer.html#DunifApplnTypArg(fd:provingground.FiniteDistribution[provingground.HoTT.Term],tang:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[Option[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "DunifApplnTypFamilies", "tail" : "(fd: FiniteDistribution[Term], tang: FiniteDistribution[Term]): ProbabilityDistribution[Option[Term]]", "member" : "provingground.learning.FineDeducer.DunifApplnTypFamilies", "link" : "provingground\/learning\/FineDeducer.html#DunifApplnTypFamilies(fd:provingground.FiniteDistribution[provingground.HoTT.Term],tang:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[Option[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "DsimpleApplnFunc", "tail" : "(fd: FiniteDistribution[Term], tang: FiniteDistribution[Term]): ProbabilityDistribution[Term]", "member" : "provingground.learning.FineDeducer.DsimpleApplnFunc", "link" : "provingground\/learning\/FineDeducer.html#DsimpleApplnFunc(fd:provingground.FiniteDistribution[provingground.HoTT.Term],tang:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "DunifApplnArg", "tail" : "(fd: FiniteDistribution[Term], tang: FiniteDistribution[Term]): ProbabilityDistribution[Option[Term]]", "member" : "provingground.learning.FineDeducer.DunifApplnArg", "link" : "provingground\/learning\/FineDeducer.html#DunifApplnArg(fd:provingground.FiniteDistribution[provingground.HoTT.Term],tang:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[Option[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "DunifApplnFunc", "tail" : "(fd: FiniteDistribution[Term], tang: FiniteDistribution[Term]): ProbabilityDistribution[Option[Term]]", "member" : "provingground.learning.FineDeducer.DunifApplnFunc", "link" : "provingground\/learning\/FineDeducer.html#DunifApplnFunc(fd:provingground.FiniteDistribution[provingground.HoTT.Term],tang:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[Option[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "Devolve", "tail" : "(fd: FiniteDistribution[Term], tang: FiniteDistribution[Term]): ProbabilityDistribution[Term]", "member" : "provingground.learning.FineDeducer.Devolve", "link" : "provingground\/learning\/FineDeducer.html#Devolve(fd:provingground.FiniteDistribution[provingground.HoTT.Term],tang:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "evolveTyp", "tail" : "(fd: FiniteDistribution[Term]): ProbabilityDistribution[Term]", "member" : "provingground.learning.FineDeducer.evolveTyp", "link" : "provingground\/learning\/FineDeducer.html#evolveTyp(fd:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "evolveWithTyp", "tail" : "(tp: Typ[Term])(fd: FiniteDistribution[Term]): ProbabilityDistribution[Term]", "member" : "provingground.learning.FineDeducer.evolveWithTyp", "link" : "provingground\/learning\/FineDeducer.html#evolveWithTyp(tp:provingground.HoTT.Typ[provingground.HoTT.Term])(fd:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "evolvTypFamilies", "tail" : "(fd: FiniteDistribution[Term]): ProbabilityDistribution[SomeFunc]", "member" : "provingground.learning.FineDeducer.evolvTypFamilies", "link" : "provingground\/learning\/FineDeducer.html#evolvTypFamilies(fd:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[provingground.learning.FineDeducer.SomeFunc]", "kind" : "def"}, {"label" : "evolvFuncs", "tail" : "(fd: FiniteDistribution[Term]): ProbabilityDistribution[SomeFunc]", "member" : "provingground.learning.FineDeducer.evolvFuncs", "link" : "provingground\/learning\/FineDeducer.html#evolvFuncs(fd:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[provingground.learning.FineDeducer.SomeFunc]", "kind" : "def"}, {"label" : "evolve", "tail" : "(fd: FiniteDistribution[Term]): ProbabilityDistribution[Term]", "member" : "provingground.learning.FineDeducer.evolve", "link" : "provingground\/learning\/FineDeducer.html#evolve(fd:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "varScaled", "tail" : ": FineDeducer", "member" : "provingground.learning.FineDeducer.varScaled", "link" : "provingground\/learning\/FineDeducer.html#varScaled:provingground.learning.FineDeducer", "kind" : "lazy val"}, {"member" : "provingground.learning.FineDeducer#<init>", "error" : "unsupported entity"}, {"label" : "unifyWeight", "tail" : ": Double", "member" : "provingground.learning.FineDeducer.unifyWeight", "link" : "provingground\/learning\/FineDeducer.html#unifyWeight:Double", "kind" : "val"}, {"label" : "varWeight", "tail" : ": Double", "member" : "provingground.learning.FineDeducer.varWeight", "link" : "provingground\/learning\/FineDeducer.html#varWeight:Double", "kind" : "val"}, {"label" : "piWeight", "tail" : ": Double", "member" : "provingground.learning.FineDeducer.piWeight", "link" : "provingground\/learning\/FineDeducer.html#piWeight:Double", "kind" : "val"}, {"label" : "lambdaWeight", "tail" : ": Double", "member" : "provingground.learning.FineDeducer.lambdaWeight", "link" : "provingground\/learning\/FineDeducer.html#lambdaWeight:Double", "kind" : "val"}, {"label" : "applnWeight", "tail" : ": Double", "member" : "provingground.learning.FineDeducer.applnWeight", "link" : "provingground\/learning\/FineDeducer.html#applnWeight:Double", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/FineDeducer.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/FineDeducer.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/FineDeducer.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/FineDeducer.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/FineDeducer.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/FineDeducer.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/FineDeducer.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/FineDeducer.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/FineDeducer.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/FineDeducer.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/FineDeducer.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/FineDeducer.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/FineDeducer.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/FineDeducer.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/FineDeducer.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/FineDeducer.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/learning\/FineDeducer.html", "kind" : "object"}, {"name" : "provingground.learning.FineDeducerStep", "shortDescription" : "", "object" : "provingground\/learning\/FineDeducerStep$.html", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/learning\/FineDeducerStep.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/learning\/FineDeducerStep.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (FineDeducerStep[X]) ⇒ Boolean, msg: ⇒ Any): FineDeducerStep[X]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/FineDeducerStep.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (FineDeducerStep[X]) ⇒ Boolean): FineDeducerStep[X]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/FineDeducerStep.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): FineDeducerStep[X]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/FineDeducerStep.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): FineDeducerStep[X]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/FineDeducerStep.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (FineDeducerStep[X], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/learning\/FineDeducerStep.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (FineDeducerStep[X], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/learning\/FineDeducerStep.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "next", "tail" : "(): X[FineDeducerStep[X]]", "member" : "provingground.learning.FineDeducerStep.next", "link" : "provingground\/learning\/FineDeducerStep.html#next:X[provingground.learning.FineDeducerStep[X]]", "kind" : "def"}, {"label" : "succ", "tail" : ": X[FineDeducerStep[X]]", "member" : "provingground.learning.FineDeducerStep.succ", "link" : "provingground\/learning\/FineDeducerStep.html#succ:X[provingground.learning.FineDeducerStep[X]]", "kind" : "lazy val"}, {"label" : "newp", "tail" : "(np: FiniteDistribution[Term]): FineDeducerStep[X]", "member" : "provingground.learning.FineDeducerStep.newp", "link" : "provingground\/learning\/FineDeducerStep.html#newp(np:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.learning.FineDeducerStep[X]", "kind" : "def"}, {"label" : "succFD", "tail" : ": X[FiniteDistribution[Term]]", "member" : "provingground.learning.FineDeducerStep.succFD", "link" : "provingground\/learning\/FineDeducerStep.html#succFD:X[provingground.FiniteDistribution[provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "feedBacks", "tail" : ": X[Vector[(FiniteDistribution[Term], Double)]]", "member" : "provingground.learning.FineDeducerStep.feedBacks", "link" : "provingground\/learning\/FineDeducerStep.html#feedBacks:X[Vector[(provingground.FiniteDistribution[provingground.HoTT.Term],Double)]]", "kind" : "lazy val"}, {"label" : "derivativeFDs", "tail" : ": X[Vector[(FiniteDistribution[Term], (FiniteDistribution[Term], FiniteDistribution[Typ[Term]]))]]", "member" : "provingground.learning.FineDeducerStep.derivativeFDs", "link" : "provingground\/learning\/FineDeducerStep.html#derivativeFDs:X[Vector[(provingground.FiniteDistribution[provingground.HoTT.Term],(provingground.FiniteDistribution[provingground.HoTT.Term],provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]))]]", "kind" : "lazy val"}, {"label" : "derFDX", "tail" : "(vec: Vector[(FiniteDistribution[Term], Int)]): X[Vector[(FiniteDistribution[Term], (FiniteDistribution[Term], FiniteDistribution[Typ[Term]]))]]", "member" : "provingground.learning.FineDeducerStep.derFDX", "link" : "provingground\/learning\/FineDeducerStep.html#derFDX(vec:Vector[(provingground.FiniteDistribution[provingground.HoTT.Term],Int)]):X[Vector[(provingground.FiniteDistribution[provingground.HoTT.Term],(provingground.FiniteDistribution[provingground.HoTT.Term],provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]))]]", "kind" : "def"}, {"label" : "tangSamples", "tail" : ": X[Vector[(FiniteDistribution[Term], Int)]]", "member" : "provingground.learning.FineDeducerStep.tangSamples", "link" : "provingground\/learning\/FineDeducerStep.html#tangSamples:X[Vector[(provingground.FiniteDistribution[provingground.HoTT.Term],Int)]]", "kind" : "lazy val"}, {"label" : "derivativeTypsFD", "tail" : "(tang: FiniteDistribution[Term], n: Int): X[FiniteDistribution[Typ[Term]]]", "member" : "provingground.learning.FineDeducerStep.derivativeTypsFD", "link" : "provingground\/learning\/FineDeducerStep.html#derivativeTypsFD(tang:provingground.FiniteDistribution[provingground.HoTT.Term],n:Int):X[provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]]", "kind" : "def"}, {"label" : "derivativeFD", "tail" : "(tang: FiniteDistribution[Term], n: Int): X[FiniteDistribution[Term]]", "member" : "provingground.learning.FineDeducerStep.derivativeFD", "link" : "provingground\/learning\/FineDeducerStep.html#derivativeFD(tang:provingground.FiniteDistribution[provingground.HoTT.Term],n:Int):X[provingground.FiniteDistribution[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "derivativePD", "tail" : "(tang: FiniteDistribution[Term]): ProbabilityDistribution[Term]", "member" : "provingground.learning.FineDeducerStep.derivativePD", "link" : "provingground\/learning\/FineDeducerStep.html#derivativePD(tang:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "thmFeedback", "tail" : ": X[TheoremFeedback]", "member" : "provingground.learning.FineDeducerStep.thmFeedback", "link" : "provingground\/learning\/FineDeducerStep.html#thmFeedback:X[provingground.learning.TheoremFeedback]", "kind" : "lazy val"}, {"label" : "nextTypFD", "tail" : ": X[FiniteDistribution[Typ[Term]]]", "member" : "provingground.learning.FineDeducerStep.nextTypFD", "link" : "provingground\/learning\/FineDeducerStep.html#nextTypFD:X[provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]]", "kind" : "lazy val"}, {"label" : "nextFD", "tail" : ": X[FiniteDistribution[Term]]", "member" : "provingground.learning.FineDeducerStep.nextFD", "link" : "provingground\/learning\/FineDeducerStep.html#nextFD:X[provingground.FiniteDistribution[provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "init", "tail" : ": ProbabilityDistribution[Term]", "member" : "provingground.learning.FineDeducerStep.init", "link" : "provingground\/learning\/FineDeducerStep.html#init:provingground.ProbabilityDistribution[provingground.HoTT.Term]", "kind" : "lazy val"}, {"member" : "provingground.learning.FineDeducerStep#<init>", "error" : "unsupported entity"}, {"label" : "samp", "tail" : ": TangSamples[X]", "member" : "provingground.learning.FineDeducerStep.samp", "link" : "provingground\/learning\/FineDeducerStep.html#samp:provingground.learning.TangSamples[X]", "kind" : "implicit val"}, {"label" : "param", "tail" : ": Param", "member" : "provingground.learning.FineDeducerStep.param", "link" : "provingground\/learning\/FineDeducerStep.html#param:provingground.learning.FineDeducerStep.Param", "kind" : "val"}, {"label" : "p", "tail" : ": FiniteDistribution[Term]", "member" : "provingground.learning.FineDeducerStep.p", "link" : "provingground\/learning\/FineDeducerStep.html#p:provingground.FiniteDistribution[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/FineDeducerStep.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/FineDeducerStep.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/FineDeducerStep.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/FineDeducerStep.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/FineDeducerStep.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/FineDeducerStep.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/FineDeducerStep.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/FineDeducerStep.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/FineDeducerStep.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/FineDeducerStep.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/FineDeducerStep.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/FineDeducerStep.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/FineDeducerStep.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/FineDeducerStep.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/FineDeducerStep.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/FineDeducerStep.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/FineDeducerStep.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/FineDeducerStep.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/FineDeducerStep.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "observable", "tail" : "(p: FiniteDistribution[Term], fd: FineDeducer, param: Param)(ms: MonixSamples): Observable[FiniteDistribution[Term]]", "member" : "provingground.learning.FineDeducerStep.observable", "link" : "provingground\/learning\/FineDeducerStep$.html#observable(p:provingground.FiniteDistribution[provingground.HoTT.Term],fd:provingground.learning.FineDeducer,param:provingground.learning.FineDeducerStep.Param)(implicitms:provingground.learning.MonixSamples):monix.reactive.Observable[provingground.FiniteDistribution[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "obserEv", "tail" : "(p: FiniteDistribution[Term], fd: FineDeducer, param: Param)(ms: MonixSamples): Observable[FineDeducerStep[Task]]", "member" : "provingground.learning.FineDeducerStep.obserEv", "link" : "provingground\/learning\/FineDeducerStep$.html#obserEv(p:provingground.FiniteDistribution[provingground.HoTT.Term],fd:provingground.learning.FineDeducer,param:provingground.learning.FineDeducerStep.Param)(implicitms:provingground.learning.MonixSamples):monix.reactive.Observable[provingground.learning.FineDeducerStep[monix.eval.Task]]", "kind" : "def"}, {"label" : "Param", "tail" : "", "member" : "provingground.learning.FineDeducerStep.Param", "link" : "provingground\/learning\/FineDeducerStep$.html#ParamextendsProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/FineDeducerStep$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/FineDeducerStep$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/FineDeducerStep$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/FineDeducerStep$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/FineDeducerStep$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/FineDeducerStep$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/FineDeducerStep$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/FineDeducerStep$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/FineDeducerStep$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/FineDeducerStep$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/FineDeducerStep$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/FineDeducerStep$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/FineDeducerStep$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/FineDeducerStep$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/FineDeducerStep$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/FineDeducerStep$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/FineDeducerStep$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/FineDeducerStep$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/FineDeducerStep$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/learning\/FineDeducerStep.html", "kind" : "object"}, {"name" : "provingground.learning.FiniteDistributionLearner", "shortDescription" : "A combinator for learning systems with state finite distributions on vertices.", "object" : "provingground\/learning\/FiniteDistributionLearner$.html", "members_object" : [{"label" : "sampleV", "tail" : "(N: Double): AdjDiffbleFunction[(FiniteDistribution[M], FiniteDistribution[V]), (FiniteDistribution[M], FiniteDistribution[V])]", "member" : "provingground.learning.FiniteDistributionLearner.sampleV", "link" : "provingground\/learning\/FiniteDistributionLearner$.html#sampleV[M,V](N:Double):provingground.learning.AdjDiffbleFunction[(provingground.FiniteDistribution[M],provingground.FiniteDistribution[V]),(provingground.FiniteDistribution[M],provingground.FiniteDistribution[V])]", "kind" : "def"}, {"label" : "projectV", "tail" : "(): AdjDiffbleFunction[(FiniteDistribution[M], X), X]", "member" : "provingground.learning.FiniteDistributionLearner.projectV", "link" : "provingground\/learning\/FiniteDistributionLearner$.html#projectV[M,X]:provingground.learning.AdjDiffbleFunction[(provingground.FiniteDistribution[M],X),X]", "kind" : "def"}, {"label" : "ProjectV", "tail" : "", "member" : "provingground.learning.FiniteDistributionLearner.ProjectV", "link" : "provingground\/learning\/FiniteDistributionLearner$.html#ProjectV[M,X]extendsAdjDiffbleFunction[(provingground.FiniteDistribution[M],X),X]withProductwithSerializable", "kind" : "case class"}, {"label" : "extendM", "tail" : "(fn: AdjDiffbleFunction[(FiniteDistribution[M], X), X]): AdjDiffbleFunction[(FiniteDistribution[M], X), (FiniteDistribution[M], X)]", "member" : "provingground.learning.FiniteDistributionLearner.extendM", "link" : "provingground\/learning\/FiniteDistributionLearner$.html#extendM[M,X](fn:provingground.learning.AdjDiffbleFunction[(provingground.FiniteDistribution[M],X),X]):provingground.learning.AdjDiffbleFunction[(provingground.FiniteDistribution[M],X),(provingground.FiniteDistribution[M],X)]", "kind" : "def"}, {"label" : "ExtendM", "tail" : "", "member" : "provingground.learning.FiniteDistributionLearner.ExtendM", "link" : "provingground\/learning\/FiniteDistributionLearner$.html#ExtendM[M,X]extendsAdjDiffbleFunction[(provingground.FiniteDistribution[M],X),(provingground.FiniteDistribution[M],X)]withProductwithSerializable", "kind" : "case class"}, {"label" : "weightedDyn", "tail" : "(arg0: LinearStructure[X], arg1: InnerProduct[X]): (M, AdjDiffbleFunction[X, X]) ⇒ AdjDiffbleFunction[(FiniteDistribution[M], X), X]", "member" : "provingground.learning.FiniteDistributionLearner.weightedDyn", "link" : "provingground\/learning\/FiniteDistributionLearner$.html#weightedDyn[M,X](implicitevidence$1:provingground.LinearStructure[X],implicitevidence$2:provingground.learning.Collections.InnerProduct[X]):(M,provingground.learning.AdjDiffbleFunction[X,X])=>provingground.learning.AdjDiffbleFunction[(provingground.FiniteDistribution[M],X),X]", "kind" : "def"}, {"label" : "NewVertex", "tail" : "", "member" : "provingground.learning.FiniteDistributionLearner.NewVertex", "link" : "provingground\/learning\/FiniteDistributionLearner$.html#NewVertex[V]extendsAdjDiffbleFunction[(Double,provingground.FiniteDistribution[V]),provingground.FiniteDistribution[V]]withProductwithSerializable", "kind" : "case class"}, {"label" : "CombinationFn", "tail" : "", "member" : "provingground.learning.FiniteDistributionLearner.CombinationFn", "link" : "provingground\/learning\/FiniteDistributionLearner$.html#CombinationFn[V]extendsAdjDiffbleFunction[provingground.FiniteDistribution[V],provingground.FiniteDistribution[V]]withProductwithSerializable", "kind" : "case class"}, {"label" : "MoveFn", "tail" : "", "member" : "provingground.learning.FiniteDistributionLearner.MoveFn", "link" : "provingground\/learning\/FiniteDistributionLearner$.html#MoveFn[V,W]extendsAdjDiffbleFunction[provingground.FiniteDistribution[V],provingground.FiniteDistribution[W]]withProductwithSerializable", "kind" : "case class"}, {"label" : "purgeFD", "tail" : "(size: Int)(fd: FiniteDistribution[V]): FiniteDistribution[V]", "member" : "provingground.learning.FiniteDistributionLearner.purgeFD", "link" : "provingground\/learning\/FiniteDistributionLearner$.html#purgeFD[V](size:Int)(fd:provingground.FiniteDistribution[V]):provingground.FiniteDistribution[V]", "kind" : "def"}, {"label" : "NormalizeFD", "tail" : "", "member" : "provingground.learning.FiniteDistributionLearner.NormalizeFD", "link" : "provingground\/learning\/FiniteDistributionLearner$.html#NormalizeFD[V]extendsAdjDiffbleFunction[provingground.FiniteDistribution[V],provingground.FiniteDistribution[V]]withProductwithSerializable", "kind" : "case class"}, {"label" : "sample", "tail" : "(N: Double): AdjDiffbleFunction[FiniteDistribution[X], FiniteDistribution[X]]", "member" : "provingground.learning.FiniteDistributionLearner.sample", "link" : "provingground\/learning\/FiniteDistributionLearner$.html#sample[X](N:Double):provingground.learning.AdjDiffbleFunction[provingground.FiniteDistribution[X],provingground.FiniteDistribution[X]]", "kind" : "def"}, {"label" : "Sample", "tail" : "", "member" : "provingground.learning.FiniteDistributionLearner.Sample", "link" : "provingground\/learning\/FiniteDistributionLearner$.html#Sample[X]extendsAdjDiffbleFunction.FormalExtension[provingground.FiniteDistribution[X]]withProductwithSerializable", "kind" : "case class"}, {"label" : "PtwiseProd", "tail" : "", "member" : "provingground.learning.FiniteDistributionLearner.PtwiseProd", "link" : "provingground\/learning\/FiniteDistributionLearner$.html#PtwiseProd[V]extendsAdjDiffbleFunction[provingground.FiniteDistribution[V],provingground.FiniteDistribution[V]]withProductwithSerializable", "kind" : "case class"}, {"label" : "Evaluate", "tail" : "", "member" : "provingground.learning.FiniteDistributionLearner.Evaluate", "link" : "provingground\/learning\/FiniteDistributionLearner$.html#Evaluate[V]extendsAdjDiffbleFunction[provingground.FiniteDistribution[V],Double]withProductwithSerializable", "kind" : "case class"}, {"label" : "Atom", "tail" : "", "member" : "provingground.learning.FiniteDistributionLearner.Atom", "link" : "provingground\/learning\/FiniteDistributionLearner$.html#Atom[V]extendsAdjDiffbleFunction[Double,provingground.FiniteDistribution[V]]withProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/FiniteDistributionLearner$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/FiniteDistributionLearner$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/FiniteDistributionLearner$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/FiniteDistributionLearner$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/FiniteDistributionLearner$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/FiniteDistributionLearner$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/FiniteDistributionLearner$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/FiniteDistributionLearner$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/FiniteDistributionLearner$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/FiniteDistributionLearner$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/FiniteDistributionLearner$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/FiniteDistributionLearner$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/FiniteDistributionLearner$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/FiniteDistributionLearner$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/FiniteDistributionLearner$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/FiniteDistributionLearner$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/FiniteDistributionLearner$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/FiniteDistributionLearner$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/FiniteDistributionLearner$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.learning.HoTTgen", "shortDescription" : "", "object" : "provingground\/learning\/HoTTgen$.html", "members_object" : [{"label" : "dynTypFlow", "tail" : "(dyn: AdjDiffbleFunction[FiniteDistribution[Term], FiniteDistribution[Term]]): (FiniteDistribution[Term]) ⇒ FiniteDistribution[Term]", "member" : "provingground.learning.HoTTgen.dynTypFlow", "link" : "provingground\/learning\/HoTTgen$.html#dynTypFlow(dyn:provingground.learning.AdjDiffbleFunction[provingground.FiniteDistribution[provingground.HoTT.Term],provingground.FiniteDistribution[provingground.HoTT.Term]]):provingground.FiniteDistribution[provingground.HoTT.Term]=>provingground.FiniteDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "typFlow", "tail" : ": (FiniteDistribution[Term]) ⇒ FiniteDistribution[Term]", "member" : "provingground.learning.HoTTgen.typFlow", "link" : "provingground\/learning\/HoTTgen$.html#typFlow:provingground.FiniteDistribution[provingground.HoTT.Term]=>provingground.FiniteDistribution[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "getTyps", "tail" : "(d: FiniteDistribution[Term]): FiniteDistribution[Typ[Term]]", "member" : "provingground.learning.HoTTgen.getTyps", "link" : "provingground\/learning\/HoTTgen$.html#getTyps(d:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "mapTyp", "tail" : ": MoveFn[Term, Typ[Term]]", "member" : "provingground.learning.HoTTgen.mapTyp", "link" : "provingground\/learning\/HoTTgen$.html#mapTyp:provingground.learning.FiniteDistributionLearner.MoveFn[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "hottDyn", "tail" : ": (Int) ⇒ AdjDiffbleFunction[(FiniteDistribution[Move], FiniteDistribution[Term]), (FiniteDistribution[Move], FiniteDistribution[Term])]", "member" : "provingground.learning.HoTTgen.hottDyn", "link" : "provingground\/learning\/HoTTgen$.html#hottDyn:Int=>provingground.learning.AdjDiffbleFunction[(provingground.FiniteDistribution[provingground.learning.HoTTgen.Move],provingground.FiniteDistribution[provingground.HoTT.Term]),(provingground.FiniteDistribution[provingground.learning.HoTTgen.Move],provingground.FiniteDistribution[provingground.HoTT.Term])]", "kind" : "val"}, {"label" : "lambdaSum", "tail" : "(l: M)(f: AdjDiffbleFunction[(FiniteDistribution[M], FiniteDistribution[Term]), (FiniteDistribution[M], FiniteDistribution[Term])]): BigSum[(FiniteDistribution[M], FiniteDistribution[Term with Subs[Term]]), (FiniteDistribution[M], FiniteDistribution[Term])]", "member" : "provingground.learning.HoTTgen.lambdaSum", "link" : "provingground\/learning\/HoTTgen$.html#lambdaSum[M](l:M)(f:provingground.learning.AdjDiffbleFunction[(provingground.FiniteDistribution[M],provingground.FiniteDistribution[provingground.HoTT.Term]),(provingground.FiniteDistribution[M],provingground.FiniteDistribution[provingground.HoTT.Term])]):provingground.learning.AdjDiffbleFunction.BigSum[(provingground.FiniteDistribution[M],provingground.FiniteDistribution[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]),(provingground.FiniteDistribution[M],provingground.FiniteDistribution[provingground.HoTT.Term])]", "kind" : "def"}, {"label" : "lambdaFn", "tail" : "(l: M, f: AdjDiffbleFunction[(FiniteDistribution[M], FiniteDistribution[Term]), (FiniteDistribution[M], FiniteDistribution[Term])])(typ: Typ[Term]): AdjDiffbleFunction[(FiniteDistribution[M], FiniteDistribution[Term with Subs[Term]]), (FiniteDistribution[M], FiniteDistribution[Term])]", "member" : "provingground.learning.HoTTgen.lambdaFn", "link" : "provingground\/learning\/HoTTgen$.html#lambdaFn[M](l:M,f:provingground.learning.AdjDiffbleFunction[(provingground.FiniteDistribution[M],provingground.FiniteDistribution[provingground.HoTT.Term]),(provingground.FiniteDistribution[M],provingground.FiniteDistribution[provingground.HoTT.Term])])(typ:provingground.HoTT.Typ[provingground.HoTT.Term]):provingground.learning.AdjDiffbleFunction[(provingground.FiniteDistribution[M],provingground.FiniteDistribution[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]),(provingground.FiniteDistribution[M],provingground.FiniteDistribution[provingground.HoTT.Term])]", "kind" : "def"}, {"label" : "wtdMoveSum", "tail" : ": AdjDiffbleFunction[(FiniteDistribution[Move], FiniteDistribution[Term]), (FiniteDistribution[Move], FiniteDistribution[Term])]", "member" : "provingground.learning.HoTTgen.wtdMoveSum", "link" : "provingground\/learning\/HoTTgen$.html#wtdMoveSum:provingground.learning.AdjDiffbleFunction[(provingground.FiniteDistribution[provingground.learning.HoTTgen.Move],provingground.FiniteDistribution[provingground.HoTT.Term]),(provingground.FiniteDistribution[provingground.learning.HoTTgen.Move],provingground.FiniteDistribution[provingground.HoTT.Term])]", "kind" : "val"}, {"label" : "wtdMoveList", "tail" : ": List[AdjDiffbleFunction[(FiniteDistribution[Move], FiniteDistribution[Term]), (FiniteDistribution[Move], FiniteDistribution[Term])]]", "member" : "provingground.learning.HoTTgen.wtdMoveList", "link" : "provingground\/learning\/HoTTgen$.html#wtdMoveList:List[provingground.learning.AdjDiffbleFunction[(provingground.FiniteDistribution[provingground.learning.HoTTgen.Move],provingground.FiniteDistribution[provingground.HoTT.Term]),(provingground.FiniteDistribution[provingground.learning.HoTTgen.Move],provingground.FiniteDistribution[provingground.HoTT.Term])]]", "kind" : "val"}, {"label" : "wtdDyn", "tail" : ": (Move, AdjDiffbleFunction[FiniteDistribution[Term], FiniteDistribution[Term]]) ⇒ AdjDiffbleFunction[(FiniteDistribution[Move], FiniteDistribution[Term]), FiniteDistribution[Term]]", "member" : "provingground.learning.HoTTgen.wtdDyn", "link" : "provingground\/learning\/HoTTgen$.html#wtdDyn:(provingground.learning.HoTTgen.Move,provingground.learning.AdjDiffbleFunction[provingground.FiniteDistribution[provingground.HoTT.Term],provingground.FiniteDistribution[provingground.HoTT.Term]])=>provingground.learning.AdjDiffbleFunction[(provingground.FiniteDistribution[provingground.learning.HoTTgen.Move],provingground.FiniteDistribution[provingground.HoTT.Term]),provingground.FiniteDistribution[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "Move", "tail" : "", "member" : "provingground.learning.HoTTgen.Move", "link" : "provingground\/learning\/HoTTgen$.html#MoveextendsAnyRef", "kind" : "sealed trait"}, {"label" : "Move", "tail" : "", "member" : "provingground.learning.HoTTgen.Move", "link" : "provingground\/learning\/HoTTgen$.html#Move", "kind" : "object"}, {"label" : "moves", "tail" : ": List[(Move, AdjDiffbleFunction[FiniteDistribution[Term], FiniteDistribution[Term]])]", "member" : "provingground.learning.HoTTgen.moves", "link" : "provingground\/learning\/HoTTgen$.html#moves:List[(provingground.learning.HoTTgen.Move,provingground.learning.AdjDiffbleFunction[provingground.FiniteDistribution[provingground.HoTT.Term],provingground.FiniteDistribution[provingground.HoTT.Term]])]", "kind" : "lazy val"}, {"label" : "jcons", "tail" : ": (Term) ⇒ Option[Term]", "member" : "provingground.learning.HoTTgen.jcons", "link" : "provingground\/learning\/HoTTgen$.html#jcons:provingground.HoTT.Term=>Option[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "icons", "tail" : ": (Term) ⇒ Option[Term]", "member" : "provingground.learning.HoTTgen.icons", "link" : "provingground\/learning\/HoTTgen$.html#icons:provingground.HoTT.Term=>Option[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "paircons", "tail" : ": (Term) ⇒ Option[Term]", "member" : "provingground.learning.HoTTgen.paircons", "link" : "provingground\/learning\/HoTTgen$.html#paircons:provingground.HoTT.Term=>Option[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "PairTerm", "tail" : ": (Term, Term) ⇒ Option[Term]", "member" : "provingground.learning.HoTTgen.PairTerm", "link" : "provingground\/learning\/HoTTgen$.html#PairTerm:(provingground.HoTT.Term,provingground.HoTT.Term)=>Option[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "pairtyp", "tail" : ": (Term, Term) ⇒ Option[Term]", "member" : "provingground.learning.HoTTgen.pairtyp", "link" : "provingground\/learning\/HoTTgen$.html#pairtyp:(provingground.HoTT.Term,provingground.HoTT.Term)=>Option[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "sigmatyp", "tail" : ": (Term) ⇒ Option[Term]", "member" : "provingground.learning.HoTTgen.sigmatyp", "link" : "provingground\/learning\/HoTTgen$.html#sigmatyp:provingground.HoTT.Term=>Option[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "pityp", "tail" : ": (Term) ⇒ Option[Term]", "member" : "provingground.learning.HoTTgen.pityp", "link" : "provingground\/learning\/HoTTgen$.html#pityp:provingground.HoTT.Term=>Option[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "functyp", "tail" : ": (Term, Term) ⇒ Option[Term]", "member" : "provingground.learning.HoTTgen.functyp", "link" : "provingground\/learning\/HoTTgen$.html#functyp:(provingground.HoTT.Term,provingground.HoTT.Term)=>Option[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "funcappl", "tail" : ": (Term, Term) ⇒ Option[Term]", "member" : "provingground.learning.HoTTgen.funcappl", "link" : "provingground\/learning\/HoTTgen$.html#funcappl:(provingground.HoTT.Term,provingground.HoTT.Term)=>Option[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "inDomain", "tail" : "(): (Term) ⇒ (Term) ⇒ Boolean", "member" : "provingground.learning.HoTTgen.inDomain", "link" : "provingground\/learning\/HoTTgen$.html#inDomain:provingground.HoTT.Term=>(provingground.HoTT.Term=>Boolean)", "kind" : "def"}, {"label" : "isTyp", "tail" : "(t: Term): Boolean", "member" : "provingground.learning.HoTTgen.isTyp", "link" : "provingground\/learning\/HoTTgen$.html#isTyp(t:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "isFunc", "tail" : "(t: Term): Boolean", "member" : "provingground.learning.HoTTgen.isFunc", "link" : "provingground\/learning\/HoTTgen$.html#isFunc(t:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/HoTTgen$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/HoTTgen$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/HoTTgen$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/HoTTgen$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/HoTTgen$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/HoTTgen$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/HoTTgen$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/HoTTgen$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/HoTTgen$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/HoTTgen$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/HoTTgen$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/HoTTgen$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/HoTTgen$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/HoTTgen$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/HoTTgen$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/HoTTgen$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/HoTTgen$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/HoTTgen$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/HoTTgen$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.learning.MonixSamples", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/learning\/MonixSamples.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/learning\/MonixSamples.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MonixSamples) ⇒ Boolean, msg: ⇒ Any): MonixSamples", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/MonixSamples.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MonixSamples) ⇒ Boolean): MonixSamples", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/MonixSamples.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): MonixSamples", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/MonixSamples.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): MonixSamples", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/MonixSamples.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (MonixSamples, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/learning\/MonixSamples.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (MonixSamples, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/learning\/MonixSamples.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "sequence", "tail" : "(v: Vector[Task[A]]): Task[Vector[A]]", "member" : "provingground.learning.MonixSamples.sequence", "link" : "provingground\/learning\/MonixSamples.html#sequence[A](v:Vector[monix.eval.Task[A]]):monix.eval.Task[Vector[A]]", "kind" : "def"}, {"label" : "monad", "tail" : ": Monad[Task]", "member" : "provingground.learning.MonixSamples.monad", "link" : "provingground\/learning\/MonixSamples.html#monad:cats.Monad[monix.eval.Task]", "kind" : "implicit val"}, {"label" : "tangSizes", "tail" : "(n: Int)(base: FiniteDistribution[A]): Task[Vector[(FiniteDistribution[A], Int)]]", "member" : "provingground.learning.Samples.tangSizes", "link" : "provingground\/learning\/MonixSamples.html#tangSizes[A](n:Int)(base:provingground.FiniteDistribution[A]):X[Vector[(provingground.FiniteDistribution[A],Int)]]", "kind" : "def"}, {"label" : "batchSampFD", "tail" : "(pd: ProbabilityDistribution[A], batches: Int, n: Int): Task[FiniteDistribution[A]]", "member" : "provingground.learning.TangSamples.batchSampFD", "link" : "provingground\/learning\/MonixSamples.html#batchSampFD[A](pd:provingground.ProbabilityDistribution[A],batches:Int,n:Int):X[provingground.FiniteDistribution[A]]", "kind" : "def"}, {"label" : "sampFD", "tail" : "(pd: ProbabilityDistribution[A], n: Int): Task[FiniteDistribution[A]]", "member" : "provingground.learning.TangSamples.sampFD", "link" : "provingground\/learning\/MonixSamples.html#sampFD[A](pd:provingground.ProbabilityDistribution[A],n:Int):X[provingground.FiniteDistribution[A]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/MonixSamples.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/MonixSamples.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/MonixSamples.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/MonixSamples.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/MonixSamples.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/MonixSamples.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/MonixSamples.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/MonixSamples.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/MonixSamples.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/MonixSamples.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/MonixSamples.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/MonixSamples.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/MonixSamples.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/MonixSamples.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/MonixSamples.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/MonixSamples.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/MonixSamples.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/MonixSamples.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/MonixSamples.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "sample", "tail" : "(pd: ProbabilityDistribution[A], n: Int): Task[Map[A, Int]]", "member" : "provingground.learning.TangSamples.sample", "link" : "provingground\/learning\/MonixSamples.html#sample[A](pd:provingground.ProbabilityDistribution[A],n:Int):X[Map[A,Int]]", "kind" : "abstract def"}], "shortDescription" : "", "object" : "provingground\/learning\/MonixSamples$.html", "members_object" : [{"label" : "monad", "tail" : ": Monad[Task]", "member" : "provingground.learning.MonixSamples.monad", "link" : "provingground\/learning\/MonixSamples$.html#monad:cats.Monad[monix.eval.Task]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/MonixSamples$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/MonixSamples$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/MonixSamples$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/MonixSamples$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/MonixSamples$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/MonixSamples$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/MonixSamples$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/MonixSamples$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/MonixSamples$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/MonixSamples$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/MonixSamples$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/MonixSamples$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/MonixSamples$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/MonixSamples$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/MonixSamples$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/MonixSamples$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/MonixSamples$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/MonixSamples$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/MonixSamples$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/learning\/MonixSamples.html", "kind" : "trait"}, {"name" : "provingground.learning.PickledTermPopulation", "shortDescription" : "", "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/learning\/PickledTermPopulation.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/learning\/PickledTermPopulation.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (PickledTermPopulation) ⇒ Boolean, msg: ⇒ Any): PickledTermPopulation", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/PickledTermPopulation.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (PickledTermPopulation) ⇒ Boolean): PickledTermPopulation", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/PickledTermPopulation.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): PickledTermPopulation", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/PickledTermPopulation.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): PickledTermPopulation", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/PickledTermPopulation.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (PickledTermPopulation, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/learning\/PickledTermPopulation.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (PickledTermPopulation, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/learning\/PickledTermPopulation.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "unpickle", "tail" : "(): TermPopulation", "member" : "provingground.learning.PickledTermPopulation.unpickle", "link" : "provingground\/learning\/PickledTermPopulation.html#unpickle:provingground.learning.TermPopulation", "kind" : "def"}, {"member" : "provingground.learning.PickledTermPopulation#<init>", "error" : "unsupported entity"}, {"label" : "piWeight", "tail" : ": Double", "member" : "provingground.learning.PickledTermPopulation.piWeight", "link" : "provingground\/learning\/PickledTermPopulation.html#piWeight:Double", "kind" : "val"}, {"label" : "lambdaWeight", "tail" : ": Double", "member" : "provingground.learning.PickledTermPopulation.lambdaWeight", "link" : "provingground\/learning\/PickledTermPopulation.html#lambdaWeight:Double", "kind" : "val"}, {"label" : "vars", "tail" : ": Vector[PickledWeighted]", "member" : "provingground.learning.PickledTermPopulation.vars", "link" : "provingground\/learning\/PickledTermPopulation.html#vars:Vector[provingground.PickledWeighted]", "kind" : "val"}, {"label" : "thmsByProofs", "tail" : ": Vector[PickledWeighted]", "member" : "provingground.learning.PickledTermPopulation.thmsByProofs", "link" : "provingground\/learning\/PickledTermPopulation.html#thmsByProofs:Vector[provingground.PickledWeighted]", "kind" : "val"}, {"label" : "types", "tail" : ": Vector[PickledWeighted]", "member" : "provingground.learning.PickledTermPopulation.types", "link" : "provingground\/learning\/PickledTermPopulation.html#types:Vector[provingground.PickledWeighted]", "kind" : "val"}, {"label" : "termsByType", "tail" : ": Map[String, Vector[PickledWeighted]]", "member" : "provingground.learning.PickledTermPopulation.termsByType", "link" : "provingground\/learning\/PickledTermPopulation.html#termsByType:Map[String,Vector[provingground.PickledWeighted]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/PickledTermPopulation.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/PickledTermPopulation.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/PickledTermPopulation.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/PickledTermPopulation.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/PickledTermPopulation.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/PickledTermPopulation.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/PickledTermPopulation.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/PickledTermPopulation.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/PickledTermPopulation.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/PickledTermPopulation.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/PickledTermPopulation.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/PickledTermPopulation.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/PickledTermPopulation.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/PickledTermPopulation.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/PickledTermPopulation.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/PickledTermPopulation.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/learning\/PickledTermPopulation.html", "kind" : "case class"}, {"name" : "provingground.learning.Samples", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/learning\/Samples.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/learning\/Samples.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Samples[X]) ⇒ Boolean, msg: ⇒ Any): Samples[X]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/Samples.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Samples[X]) ⇒ Boolean): Samples[X]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/Samples.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Samples[X]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/Samples.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Samples[X]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/Samples.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Samples[X], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/learning\/Samples.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Samples[X], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/learning\/Samples.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "tangSizes", "tail" : "(n: Int)(base: FiniteDistribution[A]): X[Vector[(FiniteDistribution[A], Int)]]", "member" : "provingground.learning.Samples.tangSizes", "link" : "provingground\/learning\/Samples.html#tangSizes[A](n:Int)(base:provingground.FiniteDistribution[A]):X[Vector[(provingground.FiniteDistribution[A],Int)]]", "kind" : "def"}, {"label" : "batchSampFD", "tail" : "(pd: ProbabilityDistribution[A], batches: Int, n: Int): X[FiniteDistribution[A]]", "member" : "provingground.learning.TangSamples.batchSampFD", "link" : "provingground\/learning\/Samples.html#batchSampFD[A](pd:provingground.ProbabilityDistribution[A],batches:Int,n:Int):X[provingground.FiniteDistribution[A]]", "kind" : "def"}, {"label" : "sampFD", "tail" : "(pd: ProbabilityDistribution[A], n: Int): X[FiniteDistribution[A]]", "member" : "provingground.learning.TangSamples.sampFD", "link" : "provingground\/learning\/Samples.html#sampFD[A](pd:provingground.ProbabilityDistribution[A],n:Int):X[provingground.FiniteDistribution[A]]", "kind" : "def"}, {"label" : "sequence", "tail" : "(v: Vector[X[A]]): X[Vector[A]]", "member" : "provingground.learning.TangSamples.sequence", "link" : "provingground\/learning\/Samples.html#sequence[A](v:Vector[X[A]]):X[Vector[A]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/Samples.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/Samples.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/Samples.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/Samples.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/Samples.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/Samples.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/Samples.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/Samples.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/Samples.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/Samples.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/Samples.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/Samples.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/Samples.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/Samples.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/Samples.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/Samples.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/Samples.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/Samples.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/Samples.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "sample", "tail" : "(pd: ProbabilityDistribution[A], n: Int): X[Map[A, Int]]", "member" : "provingground.learning.TangSamples.sample", "link" : "provingground\/learning\/Samples.html#sample[A](pd:provingground.ProbabilityDistribution[A],n:Int):X[Map[A,Int]]", "kind" : "abstract def"}, {"label" : "monad", "tail" : ": Monad[X]", "member" : "provingground.learning.TangSamples.monad", "link" : "provingground\/learning\/Samples.html#monad:cats.Monad[X]", "kind" : "implicit abstract val"}], "shortDescription" : "", "object" : "provingground\/learning\/Samples$.html", "members_object" : [{"label" : "batchSample", "tail" : "(pd: ProbabilityDistribution[A], batches: Int, n: Int)(s: TangSamples[X]): X[FiniteDistribution[A]]", "member" : "provingground.learning.Samples.batchSample", "link" : "provingground\/learning\/Samples$.html#batchSample[A,X[_]](pd:provingground.ProbabilityDistribution[A],batches:Int,n:Int)(implicits:provingground.learning.TangSamples[X]):X[provingground.FiniteDistribution[A]]", "kind" : "def"}, {"label" : "sampleFD", "tail" : "(p: ProbabilityDistribution[A], n: Int)(s: TangSamples[X]): X[FiniteDistribution[A]]", "member" : "provingground.learning.Samples.sampleFD", "link" : "provingground\/learning\/Samples$.html#sampleFD[A,X[_]](p:provingground.ProbabilityDistribution[A],n:Int)(implicits:provingground.learning.TangSamples[X]):X[provingground.FiniteDistribution[A]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/Samples$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/Samples$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/Samples$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/Samples$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/Samples$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/Samples$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/Samples$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/Samples$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/Samples$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/Samples$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/Samples$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/Samples$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/Samples$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/Samples$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/Samples$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/Samples$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/Samples$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/Samples$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/Samples$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/learning\/Samples.html", "kind" : "object"}, {"name" : "provingground.learning.SnapShot", "shortDescription" : "", "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/learning\/SnapShot.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/learning\/SnapShot.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SnapShot[X, P]) ⇒ Boolean, msg: ⇒ Any): SnapShot[X, P]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/SnapShot.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SnapShot[X, P]) ⇒ Boolean): SnapShot[X, P]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/SnapShot.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): SnapShot[X, P]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/SnapShot.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): SnapShot[X, P]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/SnapShot.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (SnapShot[X, P], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/learning\/SnapShot.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (SnapShot[X, P], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/learning\/SnapShot.html#->[B](y:B):(A,B)", "kind" : "def"}, {"member" : "provingground.learning.SnapShot#<init>", "error" : "unsupported entity"}, {"label" : "param", "tail" : ": P", "member" : "provingground.learning.SnapShot.param", "link" : "provingground\/learning\/SnapShot.html#param:P", "kind" : "val"}, {"label" : "loops", "tail" : ": Int", "member" : "provingground.learning.SnapShot.loops", "link" : "provingground\/learning\/SnapShot.html#loops:Int", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "provingground.learning.SnapShot.name", "link" : "provingground\/learning\/SnapShot.html#name:String", "kind" : "val"}, {"label" : "state", "tail" : ": X", "member" : "provingground.learning.SnapShot.state", "link" : "provingground\/learning\/SnapShot.html#state:X", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/SnapShot.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/SnapShot.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/SnapShot.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/SnapShot.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/SnapShot.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/SnapShot.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/SnapShot.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/SnapShot.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/SnapShot.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/SnapShot.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/SnapShot.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/SnapShot.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/SnapShot.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/SnapShot.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/SnapShot.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/SnapShot.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/learning\/SnapShot.html", "kind" : "case class"}, {"name" : "provingground.learning.StochasticLang", "shortDescription" : "", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/learning\/StochasticLang.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/learning\/StochasticLang.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (StochasticLang[E]) ⇒ Boolean, msg: ⇒ Any): StochasticLang[E]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/StochasticLang.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (StochasticLang[E]) ⇒ Boolean): StochasticLang[E]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/StochasticLang.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): StochasticLang[E]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/StochasticLang.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): StochasticLang[E]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/StochasticLang.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (StochasticLang[E], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/learning\/StochasticLang.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (StochasticLang[E], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/learning\/StochasticLang.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "appln", "tail" : "(func: TruncatedDistribution[E], arg: TruncatedDistribution[E]): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.StochasticLang.appln", "link" : "provingground\/learning\/StochasticLang.html#appln(func:provingground.learning.TruncatedDistribution[E],arg:provingground.learning.TruncatedDistribution[E]):Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"member" : "provingground.learning.StochasticLang#<init>", "error" : "unsupported entity"}, {"label" : "numeral", "tail" : "(n: Int): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.numeral", "link" : "provingground\/learning\/StochasticLang.html#numeral(n:Int):Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "orCases", "tail" : "(first: TruncatedDistribution[E], second: TruncatedDistribution[E]): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.orCases", "link" : "provingground\/learning\/StochasticLang.html#orCases(first:provingground.learning.TruncatedDistribution[E],second:provingground.learning.TruncatedDistribution[E]):Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "ff", "tail" : "(): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.ff", "link" : "provingground\/learning\/StochasticLang.html#ff:Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "qed", "tail" : "(): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.qed", "link" : "provingground\/learning\/StochasticLang.html#qed:Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "tt", "tail" : "(): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.tt", "link" : "provingground\/learning\/StochasticLang.html#tt:Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "incl2", "tail" : "(typ: TruncatedDistribution[E]): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.incl2", "link" : "provingground\/learning\/StochasticLang.html#incl2(typ:provingground.learning.TruncatedDistribution[E]):Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "incl1", "tail" : "(typ: TruncatedDistribution[E]): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.incl1", "link" : "provingground\/learning\/StochasticLang.html#incl1(typ:provingground.learning.TruncatedDistribution[E]):Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "or", "tail" : "(first: TruncatedDistribution[E], second: TruncatedDistribution[E]): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.or", "link" : "provingground\/learning\/StochasticLang.html#or(first:provingground.learning.TruncatedDistribution[E],second:provingground.learning.TruncatedDistribution[E]):Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "proj2", "tail" : "(xy: TruncatedDistribution[E]): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.proj2", "link" : "provingground\/learning\/StochasticLang.html#proj2(xy:provingground.learning.TruncatedDistribution[E]):Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "proj1", "tail" : "(xy: TruncatedDistribution[E]): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.proj1", "link" : "provingground\/learning\/StochasticLang.html#proj1(xy:provingground.learning.TruncatedDistribution[E]):Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "pair", "tail" : "(x: TruncatedDistribution[E], y: TruncatedDistribution[E]): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.pair", "link" : "provingground\/learning\/StochasticLang.html#pair(x:provingground.learning.TruncatedDistribution[E],y:provingground.learning.TruncatedDistribution[E]):Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "sigma", "tail" : "(variable: TruncatedDistribution[E], typ: TruncatedDistribution[E]): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.sigma", "link" : "provingground\/learning\/StochasticLang.html#sigma(variable:provingground.learning.TruncatedDistribution[E],typ:provingground.learning.TruncatedDistribution[E]):Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "equality", "tail" : "(lhs: TruncatedDistribution[E], rhs: TruncatedDistribution[E]): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.equality", "link" : "provingground\/learning\/StochasticLang.html#equality(lhs:provingground.learning.TruncatedDistribution[E],rhs:provingground.learning.TruncatedDistribution[E]):Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "pi", "tail" : "(variable: TruncatedDistribution[E], typ: TruncatedDistribution[E]): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.pi", "link" : "provingground\/learning\/StochasticLang.html#pi(variable:provingground.learning.TruncatedDistribution[E],typ:provingground.learning.TruncatedDistribution[E]):Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "lambda", "tail" : "(variable: TruncatedDistribution[E], value: TruncatedDistribution[E]): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.lambda", "link" : "provingground\/learning\/StochasticLang.html#lambda(variable:provingground.learning.TruncatedDistribution[E],value:provingground.learning.TruncatedDistribution[E]):Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "metaVar", "tail" : "(typ: TruncatedDistribution[E]): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.metaVar", "link" : "provingground\/learning\/StochasticLang.html#metaVar(typ:provingground.learning.TruncatedDistribution[E]):Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "anonVar", "tail" : "(typ: TruncatedDistribution[E]): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.anonVar", "link" : "provingground\/learning\/StochasticLang.html#anonVar(typ:provingground.learning.TruncatedDistribution[E]):Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "typVariable", "tail" : "(name: S, level: Int): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.typVariable", "link" : "provingground\/learning\/StochasticLang.html#typVariable[S](name:S,level:Int):Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "variable", "tail" : "(name: S, typ: TruncatedDistribution[E]): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.variable", "link" : "provingground\/learning\/StochasticLang.html#variable[S](name:S,typ:provingground.learning.TruncatedDistribution[E]):Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "l", "tail" : ": ExprLang[E]", "member" : "provingground.learning.TruncatedDistributionLang.l", "link" : "provingground\/learning\/StochasticLang.html#l:provingground.translation.ExprLang[E]", "kind" : "val"}, {"label" : "applyAll", "tail" : "(funcOpt: Option[TruncatedDistribution[E]], args: Vector[TruncatedDistribution[E]]): Option[TruncatedDistribution[E]]", "member" : "provingground.translation.ExprLang.applyAll", "link" : "provingground\/learning\/StochasticLang.html#applyAll(funcOpt:Option[E],args:Vector[E]):Option[E]", "kind" : "def"}, {"label" : "i2", "tail" : "(typ: TruncatedDistribution[E], value: TruncatedDistribution[E]): Option[TruncatedDistribution[E]]", "member" : "provingground.translation.ExprLang.i2", "link" : "provingground\/learning\/StochasticLang.html#i2(typ:E,value:E):Option[E]", "kind" : "def"}, {"label" : "i1", "tail" : "(typ: TruncatedDistribution[E], value: TruncatedDistribution[E]): Option[TruncatedDistribution[E]]", "member" : "provingground.translation.ExprLang.i1", "link" : "provingground\/learning\/StochasticLang.html#i1(typ:E,value:E):Option[E]", "kind" : "def"}, {"label" : "funcTyp", "tail" : "(dom: TruncatedDistribution[E], codom: TruncatedDistribution[E]): Option[TruncatedDistribution[E]]", "member" : "provingground.translation.ExprLang.funcTyp", "link" : "provingground\/learning\/StochasticLang.html#funcTyp(dom:E,codom:E):Option[E]", "kind" : "def"}, {"label" : "pairTyp", "tail" : "(first: TruncatedDistribution[E], second: TruncatedDistribution[E]): Option[TruncatedDistribution[E]]", "member" : "provingground.translation.ExprLang.pairTyp", "link" : "provingground\/learning\/StochasticLang.html#pairTyp(first:E,second:E):Option[E]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/StochasticLang.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/StochasticLang.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/StochasticLang.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/StochasticLang.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/StochasticLang.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/StochasticLang.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/StochasticLang.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/StochasticLang.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/StochasticLang.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/StochasticLang.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/StochasticLang.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/StochasticLang.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/StochasticLang.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/StochasticLang.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/StochasticLang.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/StochasticLang.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/StochasticLang.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/StochasticLang.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/StochasticLang.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/learning\/StochasticLang.html", "kind" : "class"}, {"name" : "provingground.learning.TangSamples", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/learning\/TangSamples.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/learning\/TangSamples.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TangSamples[X]) ⇒ Boolean, msg: ⇒ Any): TangSamples[X]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/TangSamples.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TangSamples[X]) ⇒ Boolean): TangSamples[X]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/TangSamples.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): TangSamples[X]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/TangSamples.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): TangSamples[X]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/TangSamples.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (TangSamples[X], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/learning\/TangSamples.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (TangSamples[X], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/learning\/TangSamples.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "batchSampFD", "tail" : "(pd: ProbabilityDistribution[A], batches: Int, n: Int): X[FiniteDistribution[A]]", "member" : "provingground.learning.TangSamples.batchSampFD", "link" : "provingground\/learning\/TangSamples.html#batchSampFD[A](pd:provingground.ProbabilityDistribution[A],batches:Int,n:Int):X[provingground.FiniteDistribution[A]]", "kind" : "def"}, {"label" : "sampFD", "tail" : "(pd: ProbabilityDistribution[A], n: Int): X[FiniteDistribution[A]]", "member" : "provingground.learning.TangSamples.sampFD", "link" : "provingground\/learning\/TangSamples.html#sampFD[A](pd:provingground.ProbabilityDistribution[A],n:Int):X[provingground.FiniteDistribution[A]]", "kind" : "def"}, {"label" : "sequence", "tail" : "(v: Vector[X[A]]): X[Vector[A]]", "member" : "provingground.learning.TangSamples.sequence", "link" : "provingground\/learning\/TangSamples.html#sequence[A](v:Vector[X[A]]):X[Vector[A]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/TangSamples.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/TangSamples.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/TangSamples.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/TangSamples.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/TangSamples.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/TangSamples.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/TangSamples.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TangSamples.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TangSamples.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TangSamples.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/TangSamples.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/TangSamples.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/TangSamples.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/TangSamples.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/TangSamples.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/TangSamples.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/TangSamples.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/TangSamples.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/TangSamples.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "tangSizes", "tail" : "(n: Int)(base: FiniteDistribution[A]): X[Vector[(FiniteDistribution[A], Int)]]", "member" : "provingground.learning.TangSamples.tangSizes", "link" : "provingground\/learning\/TangSamples.html#tangSizes[A](n:Int)(base:provingground.FiniteDistribution[A]):X[Vector[(provingground.FiniteDistribution[A],Int)]]", "kind" : "abstract def"}, {"label" : "sample", "tail" : "(pd: ProbabilityDistribution[A], n: Int): X[Map[A, Int]]", "member" : "provingground.learning.TangSamples.sample", "link" : "provingground\/learning\/TangSamples.html#sample[A](pd:provingground.ProbabilityDistribution[A],n:Int):X[Map[A,Int]]", "kind" : "abstract def"}, {"label" : "monad", "tail" : ": Monad[X]", "member" : "provingground.learning.TangSamples.monad", "link" : "provingground\/learning\/TangSamples.html#monad:cats.Monad[X]", "kind" : "implicit abstract val"}], "shortDescription" : "", "trait" : "provingground\/learning\/TangSamples.html", "kind" : "trait"}, {"name" : "provingground.learning.TangVec", "shortDescription" : "", "object" : "provingground\/learning\/TangVec$.html", "members_object" : [{"label" : "OnPoints", "tail" : "", "member" : "provingground.learning.TangVec.OnPoints", "link" : "provingground\/learning\/TangVec$.html#OnPoints[A,B]extendsAnyRef", "kind" : "implicit class"}, {"label" : "vs", "tail" : "(bvs: VectorSpace[T, Double]): VectorSpace[TangVec[T], Double]", "member" : "provingground.learning.TangVec.vs", "link" : "provingground\/learning\/TangVec$.html#vs[T](implicitbvs:spire.algebra.VectorSpace[T,Double]):spire.algebra.VectorSpace[provingground.learning.TangVec[T],Double]", "kind" : "implicit def"}, {"label" : "tProd", "tail" : "(pair: (TangVec[A], TangVec[B])): TangVec[(A, B)]", "member" : "provingground.learning.TangVec.tProd", "link" : "provingground\/learning\/TangVec$.html#tProd[A,B](pair:(provingground.learning.TangVec[A],provingground.learning.TangVec[B])):provingground.learning.TangVec[(A,B)]", "kind" : "def"}, {"label" : "tangProd", "tail" : "(av: TangVec[A], bw: TangVec[B]): TangVec[(A, B)]", "member" : "provingground.learning.TangVec.tangProd", "link" : "provingground\/learning\/TangVec$.html#tangProd[A,B](av:provingground.learning.TangVec[A],bw:provingground.learning.TangVec[B]):provingground.learning.TangVec[(A,B)]", "kind" : "def"}, {"label" : "liftBilinear", "tail" : "(bilinear: (A, B) ⇒ C)(vs: VectorSpace[C, Double]): (TangVec[(A, B)]) ⇒ TangVec[C]", "member" : "provingground.learning.TangVec.liftBilinear", "link" : "provingground\/learning\/TangVec$.html#liftBilinear[A,B,C](bilinear:(A,B)=>C)(implicitvs:spire.algebra.VectorSpace[C,Double]):provingground.learning.TangVec[(A,B)]=>provingground.learning.TangVec[C]", "kind" : "def"}, {"label" : "liftLinear", "tail" : "(func: (A) ⇒ B): (TangVec[A]) ⇒ TangVec[B]", "member" : "provingground.learning.TangVec.liftLinear", "link" : "provingground\/learning\/TangVec$.html#liftLinear[A,B](func:A=>B):provingground.learning.TangVec[A]=>provingground.learning.TangVec[B]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/TangVec$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/TangVec$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/TangVec$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/TangVec$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/TangVec$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/TangVec$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/TangVec$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TangVec$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TangVec$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TangVec$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/TangVec$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/TangVec$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/TangVec$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/TangVec$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/TangVec$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/TangVec$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/TangVec$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/TangVec$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/TangVec$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/learning\/TangVec.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/learning\/TangVec.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TangVec[A]) ⇒ Boolean, msg: ⇒ Any): TangVec[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/TangVec.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TangVec[A]) ⇒ Boolean): TangVec[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/TangVec.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): TangVec[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/TangVec.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): TangVec[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/TangVec.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (TangVec[A], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/learning\/TangVec.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (TangVec[A], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/learning\/TangVec.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "&&", "tail" : "(that: TangVec[B]): TangVec[(A, B)]", "member" : "provingground.learning.TangVec.&&", "link" : "provingground\/learning\/TangVec.html#&&[B](that:provingground.learning.TangVec[B]):provingground.learning.TangVec[(A,B)]", "kind" : "def"}, {"member" : "provingground.learning.TangVec#<init>", "error" : "unsupported entity"}, {"label" : "vec", "tail" : ": A", "member" : "provingground.learning.TangVec.vec", "link" : "provingground\/learning\/TangVec.html#vec:A", "kind" : "val"}, {"label" : "point", "tail" : ": A", "member" : "provingground.learning.TangVec.point", "link" : "provingground\/learning\/TangVec.html#point:A", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/TangVec.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/TangVec.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/TangVec.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/TangVec.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/TangVec.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/TangVec.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/TangVec.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TangVec.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TangVec.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TangVec.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/TangVec.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/TangVec.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/TangVec.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/TangVec.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/TangVec.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/TangVec.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/learning\/TangVec.html", "kind" : "case class"}, {"name" : "provingground.learning.TermBucket", "shortDescription" : "", "object" : "provingground\/learning\/TermBucket$.html", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/learning\/TermBucket.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/learning\/TermBucket.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TermBucket) ⇒ Boolean, msg: ⇒ Any): TermBucket", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/TermBucket.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TermBucket) ⇒ Boolean): TermBucket", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/TermBucket.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): TermBucket", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/TermBucket.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): TermBucket", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/TermBucket.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (TermBucket, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/learning\/TermBucket.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (TermBucket, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/learning\/TermBucket.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "getTheorems", "tail" : "(): FiniteDistribution[Typ[Term]]", "member" : "provingground.learning.TermBucket.getTheorems", "link" : "provingground\/learning\/TermBucket.html#getTheorems:provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "getTypDist", "tail" : "(): FiniteDistribution[Typ[Term]]", "member" : "provingground.learning.TermBucket.getTypDist", "link" : "provingground\/learning\/TermBucket.html#getTypDist:provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "getThmsByProofs", "tail" : "(): FiniteDistribution[Typ[Term]]", "member" : "provingground.learning.TermBucket.getThmsByProofs", "link" : "provingground\/learning\/TermBucket.html#getThmsByProofs:provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "getTermDistMap", "tail" : "(): Map[Typ[Term], FiniteDistribution[Term]]", "member" : "provingground.learning.TermBucket.getTermDistMap", "link" : "provingground\/learning\/TermBucket.html#getTermDistMap:scala.collection.immutable.Map[provingground.HoTT.Typ[provingground.HoTT.Term],provingground.FiniteDistribution[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "append", "tail" : "(t: Term): Unit", "member" : "provingground.learning.TermBucket.append", "link" : "provingground\/learning\/TermBucket.html#append(t:provingground.HoTT.Term):Unit", "kind" : "def"}, {"label" : "clearAll", "tail" : "(): Unit", "member" : "provingground.learning.TermBucket.clearAll", "link" : "provingground\/learning\/TermBucket.html#clearAll():Unit", "kind" : "def"}, {"label" : "clear", "tail" : "(): Unit", "member" : "provingground.learning.TermBucket.clear", "link" : "provingground\/learning\/TermBucket.html#clear():Unit", "kind" : "def"}, {"label" : "types", "tail" : ": Map[Typ[Term], Long]", "member" : "provingground.learning.TermBucket.types", "link" : "provingground\/learning\/TermBucket.html#types:scala.collection.mutable.Map[provingground.HoTT.Typ[provingground.HoTT.Term],Long]", "kind" : "val"}, {"label" : "termTypes", "tail" : ": Map[Typ[Term], Long]", "member" : "provingground.learning.TermBucket.termTypes", "link" : "provingground\/learning\/TermBucket.html#termTypes:scala.collection.mutable.Map[provingground.HoTT.Typ[provingground.HoTT.Term],Long]", "kind" : "val"}, {"label" : "terms", "tail" : ": Map[Typ[Term], Vector[Term]]", "member" : "provingground.learning.TermBucket.terms", "link" : "provingground\/learning\/TermBucket.html#terms:scala.collection.mutable.Map[provingground.HoTT.Typ[provingground.HoTT.Term],Vector[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "elapsedTime", "tail" : "(): Long", "member" : "provingground.learning.TermBucket.elapsedTime", "link" : "provingground\/learning\/TermBucket.html#elapsedTime:Long", "kind" : "def"}, {"label" : "startTime", "tail" : ": Long", "member" : "provingground.learning.TermBucket.startTime", "link" : "provingground\/learning\/TermBucket.html#startTime:Long", "kind" : "var"}, {"label" : "loops", "tail" : ": Int", "member" : "provingground.learning.TermBucket.loops", "link" : "provingground\/learning\/TermBucket.html#loops:Int", "kind" : "var"}, {"label" : "tot", "tail" : ": Long", "member" : "provingground.learning.TermBucket.tot", "link" : "provingground\/learning\/TermBucket.html#tot:Long", "kind" : "var"}, {"member" : "provingground.learning.TermBucket#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/TermBucket.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/TermBucket.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/TermBucket.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/TermBucket.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/TermBucket.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/TermBucket.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/TermBucket.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TermBucket.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TermBucket.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TermBucket.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/TermBucket.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/TermBucket.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/TermBucket.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/TermBucket.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/TermBucket.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/TermBucket.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/TermBucket.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/TermBucket.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/TermBucket.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "piDist", "tail" : "(vars: Vector[Weighted[Term]], scale: Double)(fd: FiniteDistribution[Typ[Term]]): FiniteDistribution[Typ[Term]]", "member" : "provingground.learning.TermBucket.piDist", "link" : "provingground\/learning\/TermBucket$.html#piDist(vars:Vector[provingground.Weighted[provingground.HoTT.Term]],scale:Double)(fd:provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]):provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "mkPi", "tail" : "(vars: Vector[Weighted[Term]], scale: Double)(yp: Weighted[Typ[Term]]): Weighted[Typ[Term]]", "member" : "provingground.learning.TermBucket.mkPi", "link" : "provingground\/learning\/TermBucket$.html#mkPi(vars:Vector[provingground.Weighted[provingground.HoTT.Term]],scale:Double)(yp:provingground.Weighted[provingground.HoTT.Typ[provingground.HoTT.Term]]):provingground.Weighted[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "toPi", "tail" : "(x: Term, scale: Double): (Weighted[Typ[Term]]) ⇒ Weighted[Typ[Term]]", "member" : "provingground.learning.TermBucket.toPi", "link" : "provingground\/learning\/TermBucket$.html#toPi(x:provingground.HoTT.Term,scale:Double):provingground.Weighted[provingground.HoTT.Typ[provingground.HoTT.Term]]=>provingground.Weighted[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "lambdaDist", "tail" : "(vars: Vector[Weighted[Term]], scale: Double)(fd: FiniteDistribution[Term]): FiniteDistribution[Term]", "member" : "provingground.learning.TermBucket.lambdaDist", "link" : "provingground\/learning\/TermBucket$.html#lambdaDist(vars:Vector[provingground.Weighted[provingground.HoTT.Term]],scale:Double)(fd:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.FiniteDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "mkLambda", "tail" : "(vars: Vector[Weighted[Term]], scale: Double)(yp: Weighted[Term]): Weighted[Term]", "member" : "provingground.learning.TermBucket.mkLambda", "link" : "provingground\/learning\/TermBucket$.html#mkLambda(vars:Vector[provingground.Weighted[provingground.HoTT.Term]],scale:Double)(yp:provingground.Weighted[provingground.HoTT.Term]):provingground.Weighted[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "toLambda", "tail" : "(x: Term, scale: Double): (Weighted[Term]) ⇒ Weighted[Term]", "member" : "provingground.learning.TermBucket.toLambda", "link" : "provingground\/learning\/TermBucket$.html#toLambda(x:provingground.HoTT.Term,scale:Double):provingground.Weighted[provingground.HoTT.Term]=>provingground.Weighted[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "fd", "tail" : "(m: Map[Typ[Term], Long], tot: Long): FiniteDistribution[Typ[Term]]", "member" : "provingground.learning.TermBucket.fd", "link" : "provingground\/learning\/TermBucket$.html#fd(m:scala.collection.mutable.Map[provingground.HoTT.Typ[provingground.HoTT.Term],Long],tot:Long):provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "fdMap", "tail" : "(m: Map[A, Vector[Term]], tot: Long): Map[A, FiniteDistribution[Term]]", "member" : "provingground.learning.TermBucket.fdMap", "link" : "provingground\/learning\/TermBucket$.html#fdMap[A](m:scala.collection.mutable.Map[A,Vector[provingground.HoTT.Term]],tot:Long):scala.collection.immutable.Map[A,provingground.FiniteDistribution[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/TermBucket$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/TermBucket$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/TermBucket$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/TermBucket$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/TermBucket$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/TermBucket$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/TermBucket$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TermBucket$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TermBucket$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TermBucket$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/TermBucket$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/TermBucket$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/TermBucket$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/TermBucket$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/TermBucket$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/TermBucket$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/TermBucket$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/TermBucket$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/TermBucket$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/learning\/TermBucket.html", "kind" : "class"}, {"name" : "provingground.learning.TermEvolution", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/learning\/TermEvolution.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/learning\/TermEvolution.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TermEvolution) ⇒ Boolean, msg: ⇒ Any): TermEvolution", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/TermEvolution.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TermEvolution) ⇒ Boolean): TermEvolution", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/TermEvolution.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): TermEvolution", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/TermEvolution.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): TermEvolution", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/TermEvolution.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (TermEvolution, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/learning\/TermEvolution.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (TermEvolution, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/learning\/TermEvolution.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "tangEvolveTyps", "tail" : "(base: FiniteDistribution[Term])(vec: FiniteDistribution[Term]): ProbabilityDistribution[Typ[Term]]", "member" : "provingground.learning.TermEvolution.tangEvolveTyps", "link" : "provingground\/learning\/TermEvolution.html#tangEvolveTyps(base:provingground.FiniteDistribution[provingground.HoTT.Term])(vec:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "tangEvolve", "tail" : "(base: FiniteDistribution[Term])(vec: FiniteDistribution[Term]): ProbabilityDistribution[Term]", "member" : "provingground.learning.TermEvolution.tangEvolve", "link" : "provingground\/learning\/TermEvolution.html#tangEvolve(base:provingground.FiniteDistribution[provingground.HoTT.Term])(vec:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "baseEvolveTyps", "tail" : "(fd: FiniteDistribution[Term]): ProbabilityDistribution[Typ[Term]]", "member" : "provingground.learning.TermEvolution.baseEvolveTyps", "link" : "provingground\/learning\/TermEvolution.html#baseEvolveTyps(fd:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "baseEvolve", "tail" : "(fd: FiniteDistribution[Term]): ProbabilityDistribution[Term]", "member" : "provingground.learning.TermEvolution.baseEvolve", "link" : "provingground\/learning\/TermEvolution.html#baseEvolve(fd:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/TermEvolution.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/TermEvolution.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/TermEvolution.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/TermEvolution.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/TermEvolution.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/TermEvolution.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/TermEvolution.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TermEvolution.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TermEvolution.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TermEvolution.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/TermEvolution.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/TermEvolution.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/TermEvolution.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/TermEvolution.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/TermEvolution.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/TermEvolution.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/TermEvolution.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/TermEvolution.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/TermEvolution.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "evolveTyps", "tail" : ": (TangVec[FiniteDistribution[Term]]) ⇒ TangVec[ProbabilityDistribution[Typ[Term]]]", "member" : "provingground.learning.TermEvolution.evolveTyps", "link" : "provingground\/learning\/TermEvolution.html#evolveTyps:provingground.learning.TangVec[provingground.FiniteDistribution[provingground.HoTT.Term]]=>provingground.learning.TangVec[provingground.ProbabilityDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]]", "kind" : "abstract val"}, {"label" : "evolve", "tail" : ": (TangVec[FiniteDistribution[Term]]) ⇒ TangVec[ProbabilityDistribution[Term]]", "member" : "provingground.learning.TermEvolution.evolve", "link" : "provingground\/learning\/TermEvolution.html#evolve:provingground.learning.TangVec[provingground.FiniteDistribution[provingground.HoTT.Term]]=>provingground.learning.TangVec[provingground.ProbabilityDistribution[provingground.HoTT.Term]]", "kind" : "abstract val"}], "shortDescription" : "", "trait" : "provingground\/learning\/TermEvolution.html", "kind" : "trait"}, {"name" : "provingground.learning.TermEvolutionStep", "shortDescription" : "", "object" : "provingground\/learning\/TermEvolutionStep$.html", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/learning\/TermEvolutionStep.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/learning\/TermEvolutionStep.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TermEvolutionStep[X]) ⇒ Boolean, msg: ⇒ Any): TermEvolutionStep[X]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/TermEvolutionStep.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TermEvolutionStep[X]) ⇒ Boolean): TermEvolutionStep[X]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/TermEvolutionStep.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): TermEvolutionStep[X]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/TermEvolutionStep.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): TermEvolutionStep[X]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/TermEvolutionStep.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (TermEvolutionStep[X], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/learning\/TermEvolutionStep.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (TermEvolutionStep[X], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/learning\/TermEvolutionStep.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "next", "tail" : "(): X[TermEvolutionStep[X]]", "member" : "provingground.learning.TermEvolutionStep.next", "link" : "provingground\/learning\/TermEvolutionStep.html#next:X[provingground.learning.TermEvolutionStep[X]]", "kind" : "def"}, {"label" : "succ", "tail" : ": X[TermEvolutionStep[X]]", "member" : "provingground.learning.TermEvolutionStep.succ", "link" : "provingground\/learning\/TermEvolutionStep.html#succ:X[provingground.learning.TermEvolutionStep[X]]", "kind" : "lazy val"}, {"label" : "newp", "tail" : "(np: FiniteDistribution[Term]): TermEvolutionStep[X]", "member" : "provingground.learning.TermEvolutionStep.newp", "link" : "provingground\/learning\/TermEvolutionStep.html#newp(np:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.learning.TermEvolutionStep[X]", "kind" : "def"}, {"label" : "succFD", "tail" : ": X[FiniteDistribution[Term]]", "member" : "provingground.learning.TermEvolutionStep.succFD", "link" : "provingground\/learning\/TermEvolutionStep.html#succFD:X[provingground.FiniteDistribution[provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "feedBacks", "tail" : ": X[Vector[(FiniteDistribution[Term], Double)]]", "member" : "provingground.learning.TermEvolutionStep.feedBacks", "link" : "provingground\/learning\/TermEvolutionStep.html#feedBacks:X[Vector[(provingground.FiniteDistribution[provingground.HoTT.Term],Double)]]", "kind" : "lazy val"}, {"label" : "derivativeFDs", "tail" : ": X[Vector[(FiniteDistribution[Term], (FiniteDistribution[Term], FiniteDistribution[Typ[Term]]))]]", "member" : "provingground.learning.TermEvolutionStep.derivativeFDs", "link" : "provingground\/learning\/TermEvolutionStep.html#derivativeFDs:X[Vector[(provingground.FiniteDistribution[provingground.HoTT.Term],(provingground.FiniteDistribution[provingground.HoTT.Term],provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]))]]", "kind" : "lazy val"}, {"label" : "derFDX", "tail" : "(vec: Vector[(FiniteDistribution[Term], Int)]): X[Vector[(FiniteDistribution[Term], (FiniteDistribution[Term], FiniteDistribution[Typ[Term]]))]]", "member" : "provingground.learning.TermEvolutionStep.derFDX", "link" : "provingground\/learning\/TermEvolutionStep.html#derFDX(vec:Vector[(provingground.FiniteDistribution[provingground.HoTT.Term],Int)]):X[Vector[(provingground.FiniteDistribution[provingground.HoTT.Term],(provingground.FiniteDistribution[provingground.HoTT.Term],provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]))]]", "kind" : "def"}, {"label" : "tangSamples", "tail" : ": X[Vector[(FiniteDistribution[Term], Int)]]", "member" : "provingground.learning.TermEvolutionStep.tangSamples", "link" : "provingground\/learning\/TermEvolutionStep.html#tangSamples:X[Vector[(provingground.FiniteDistribution[provingground.HoTT.Term],Int)]]", "kind" : "lazy val"}, {"label" : "derivativeTypsFD", "tail" : "(tang: FiniteDistribution[Term], n: Int): X[FiniteDistribution[Typ[Term]]]", "member" : "provingground.learning.TermEvolutionStep.derivativeTypsFD", "link" : "provingground\/learning\/TermEvolutionStep.html#derivativeTypsFD(tang:provingground.FiniteDistribution[provingground.HoTT.Term],n:Int):X[provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]]", "kind" : "def"}, {"label" : "derivativeFD", "tail" : "(tang: FiniteDistribution[Term], n: Int): X[FiniteDistribution[Term]]", "member" : "provingground.learning.TermEvolutionStep.derivativeFD", "link" : "provingground\/learning\/TermEvolutionStep.html#derivativeFD(tang:provingground.FiniteDistribution[provingground.HoTT.Term],n:Int):X[provingground.FiniteDistribution[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "derivativePD", "tail" : "(tang: FiniteDistribution[Term]): ProbabilityDistribution[Term]", "member" : "provingground.learning.TermEvolutionStep.derivativePD", "link" : "provingground\/learning\/TermEvolutionStep.html#derivativePD(tang:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "thmFeedback", "tail" : ": X[TheoremFeedback]", "member" : "provingground.learning.TermEvolutionStep.thmFeedback", "link" : "provingground\/learning\/TermEvolutionStep.html#thmFeedback:X[provingground.learning.TheoremFeedback]", "kind" : "lazy val"}, {"label" : "nextTypFD", "tail" : ": X[FiniteDistribution[Typ[Term]]]", "member" : "provingground.learning.TermEvolutionStep.nextTypFD", "link" : "provingground\/learning\/TermEvolutionStep.html#nextTypFD:X[provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]]", "kind" : "lazy val"}, {"label" : "nextFD", "tail" : ": X[FiniteDistribution[Term]]", "member" : "provingground.learning.TermEvolutionStep.nextFD", "link" : "provingground\/learning\/TermEvolutionStep.html#nextFD:X[provingground.FiniteDistribution[provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "init", "tail" : ": ProbabilityDistribution[Term]", "member" : "provingground.learning.TermEvolutionStep.init", "link" : "provingground\/learning\/TermEvolutionStep.html#init:provingground.ProbabilityDistribution[provingground.HoTT.Term]", "kind" : "lazy val"}, {"member" : "provingground.learning.TermEvolutionStep#<init>", "error" : "unsupported entity"}, {"label" : "samp", "tail" : ": TangSamples[X]", "member" : "provingground.learning.TermEvolutionStep.samp", "link" : "provingground\/learning\/TermEvolutionStep.html#samp:provingground.learning.TangSamples[X]", "kind" : "implicit val"}, {"label" : "param", "tail" : ": Param", "member" : "provingground.learning.TermEvolutionStep.param", "link" : "provingground\/learning\/TermEvolutionStep.html#param:provingground.learning.TermEvolutionStep.Param", "kind" : "val"}, {"label" : "p", "tail" : ": FiniteDistribution[Term]", "member" : "provingground.learning.TermEvolutionStep.p", "link" : "provingground\/learning\/TermEvolutionStep.html#p:provingground.FiniteDistribution[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/TermEvolutionStep.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/TermEvolutionStep.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/TermEvolutionStep.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/TermEvolutionStep.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/TermEvolutionStep.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/TermEvolutionStep.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/TermEvolutionStep.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TermEvolutionStep.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TermEvolutionStep.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TermEvolutionStep.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/TermEvolutionStep.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/TermEvolutionStep.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/TermEvolutionStep.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/TermEvolutionStep.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/TermEvolutionStep.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/TermEvolutionStep.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/TermEvolutionStep.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/TermEvolutionStep.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/TermEvolutionStep.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "observable", "tail" : "(p: FiniteDistribution[Term], param: Param)(ms: MonixSamples): Observable[FiniteDistribution[Term]]", "member" : "provingground.learning.TermEvolutionStep.observable", "link" : "provingground\/learning\/TermEvolutionStep$.html#observable(p:provingground.FiniteDistribution[provingground.HoTT.Term],param:provingground.learning.TermEvolutionStep.Param)(implicitms:provingground.learning.MonixSamples):monix.reactive.Observable[provingground.FiniteDistribution[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "obserEv", "tail" : "(p: FiniteDistribution[Term], param: Param)(ms: MonixSamples): Observable[TermEvolutionStep[Task]]", "member" : "provingground.learning.TermEvolutionStep.obserEv", "link" : "provingground\/learning\/TermEvolutionStep$.html#obserEv(p:provingground.FiniteDistribution[provingground.HoTT.Term],param:provingground.learning.TermEvolutionStep.Param)(implicitms:provingground.learning.MonixSamples):monix.reactive.Observable[provingground.learning.TermEvolutionStep[monix.eval.Task]]", "kind" : "def"}, {"label" : "Param", "tail" : "", "member" : "provingground.learning.TermEvolutionStep.Param", "link" : "provingground\/learning\/TermEvolutionStep$.html#ParamextendsProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/TermEvolutionStep$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/TermEvolutionStep$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/TermEvolutionStep$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/TermEvolutionStep$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/TermEvolutionStep$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/TermEvolutionStep$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/TermEvolutionStep$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TermEvolutionStep$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TermEvolutionStep$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TermEvolutionStep$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/TermEvolutionStep$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/TermEvolutionStep$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/TermEvolutionStep$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/TermEvolutionStep$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/TermEvolutionStep$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/TermEvolutionStep$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/TermEvolutionStep$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/TermEvolutionStep$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/TermEvolutionStep$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/learning\/TermEvolutionStep.html", "kind" : "object"}, {"name" : "provingground.learning.TermEvolver", "shortDescription" : "", "object" : "provingground\/learning\/TermEvolver$.html", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/learning\/TermEvolver.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/learning\/TermEvolver.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TermEvolver) ⇒ Boolean, msg: ⇒ Any): TermEvolver", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/TermEvolver.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TermEvolver) ⇒ Boolean): TermEvolver", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/TermEvolver.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): TermEvolver", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/TermEvolver.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): TermEvolver", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/TermEvolver.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (TermEvolver, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/learning\/TermEvolver.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (TermEvolver, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/learning\/TermEvolver.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "piMix", "tail" : "(fd: TangVec[FiniteDistribution[Term]]): TangVec[ProbabilityDistribution[Typ[Term]]]", "member" : "provingground.learning.TermEvolver.piMix", "link" : "provingground\/learning\/TermEvolver.html#piMix(fd:provingground.learning.TangVec[provingground.FiniteDistribution[provingground.HoTT.Term]]):provingground.learning.TangVec[provingground.ProbabilityDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]]", "kind" : "def"}, {"label" : "lambdaForTyp", "tail" : "(typ: Typ[Term])(fd: TangVec[FiniteDistribution[Term]]): TangVec[ProbabilityDistribution[Term]]", "member" : "provingground.learning.TermEvolver.lambdaForTyp", "link" : "provingground\/learning\/TermEvolver.html#lambdaForTyp(typ:provingground.HoTT.Typ[provingground.HoTT.Term])(fd:provingground.learning.TangVec[provingground.FiniteDistribution[provingground.HoTT.Term]]):provingground.learning.TangVec[provingground.ProbabilityDistribution[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "lambdaMix", "tail" : "(fd: TangVec[FiniteDistribution[Term]]): TangVec[ProbabilityDistribution[Term]]", "member" : "provingground.learning.TermEvolver.lambdaMix", "link" : "provingground\/learning\/TermEvolver.html#lambdaMix(fd:provingground.learning.TangVec[provingground.FiniteDistribution[provingground.HoTT.Term]]):provingground.learning.TangVec[provingground.ProbabilityDistribution[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "piMixTyp", "tail" : "(typ: Typ[Term], wt: Double, base: ⇒ (TangVec[FiniteDistribution[Term]]) ⇒ TangVec[ProbabilityDistribution[Typ[Term]]]): (TangVec[FiniteDistribution[Term]]) ⇒ TangVec[ProbabilityDistribution[Typ[Term]]]", "member" : "provingground.learning.TermEvolver.piMixTyp", "link" : "provingground\/learning\/TermEvolver.html#piMixTyp(typ:provingground.HoTT.Typ[provingground.HoTT.Term],wt:Double,base:=>provingground.learning.TangVec[provingground.FiniteDistribution[provingground.HoTT.Term]]=>provingground.learning.TangVec[provingground.ProbabilityDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]]):provingground.learning.TangVec[provingground.FiniteDistribution[provingground.HoTT.Term]]=>provingground.learning.TangVec[provingground.ProbabilityDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]]", "kind" : "def"}, {"label" : "lambdaMixTyp", "tail" : "(typ: Typ[Term], wt: Double, base: ⇒ (TangVec[FiniteDistribution[Term]]) ⇒ TangVec[ProbabilityDistribution[Term]]): (TangVec[FiniteDistribution[Term]]) ⇒ TangVec[ProbabilityDistribution[Term]]", "member" : "provingground.learning.TermEvolver.lambdaMixTyp", "link" : "provingground\/learning\/TermEvolver.html#lambdaMixTyp(typ:provingground.HoTT.Typ[provingground.HoTT.Term],wt:Double,base:=>provingground.learning.TangVec[provingground.FiniteDistribution[provingground.HoTT.Term]]=>provingground.learning.TangVec[provingground.ProbabilityDistribution[provingground.HoTT.Term]]):provingground.learning.TangVec[provingground.FiniteDistribution[provingground.HoTT.Term]]=>provingground.learning.TangVec[provingground.ProbabilityDistribution[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "piMixVar", "tail" : "(x: Term, wt: Double, base: ⇒ (TangVec[FiniteDistribution[Term]]) ⇒ TangVec[ProbabilityDistribution[Typ[Term]]]): (TangVec[FiniteDistribution[Term]]) ⇒ TangVec[ProbabilityDistribution[Typ[Term]]]", "member" : "provingground.learning.TermEvolver.piMixVar", "link" : "provingground\/learning\/TermEvolver.html#piMixVar(x:provingground.HoTT.Term,wt:Double,base:=>provingground.learning.TangVec[provingground.FiniteDistribution[provingground.HoTT.Term]]=>provingground.learning.TangVec[provingground.ProbabilityDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]]):provingground.learning.TangVec[provingground.FiniteDistribution[provingground.HoTT.Term]]=>provingground.learning.TangVec[provingground.ProbabilityDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]]", "kind" : "def"}, {"label" : "lambdaMixVar", "tail" : "(x: Term, wt: Double, base: ⇒ (TangVec[FiniteDistribution[Term]]) ⇒ TangVec[ProbabilityDistribution[Term]]): (TangVec[FiniteDistribution[Term]]) ⇒ TangVec[ProbabilityDistribution[Term]]", "member" : "provingground.learning.TermEvolver.lambdaMixVar", "link" : "provingground\/learning\/TermEvolver.html#lambdaMixVar(x:provingground.HoTT.Term,wt:Double,base:=>provingground.learning.TangVec[provingground.FiniteDistribution[provingground.HoTT.Term]]=>provingground.learning.TangVec[provingground.ProbabilityDistribution[provingground.HoTT.Term]]):provingground.learning.TangVec[provingground.FiniteDistribution[provingground.HoTT.Term]]=>provingground.learning.TangVec[provingground.ProbabilityDistribution[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "Tappln", "tail" : ": (TangVec[(ProbabilityDistribution[ExstFunc], (Typ[Term]) ⇒ ProbabilityDistribution[Term])]) ⇒ TangVec[ProbabilityDistribution[Option[Term]]]", "member" : "provingground.learning.TermEvolver.Tappln", "link" : "provingground\/learning\/TermEvolver.html#Tappln:provingground.learning.TangVec[(provingground.ProbabilityDistribution[provingground.learning.ExstFunc],provingground.HoTT.Typ[provingground.HoTT.Term]=>provingground.ProbabilityDistribution[provingground.HoTT.Term])]=>provingground.learning.TangVec[provingground.ProbabilityDistribution[Option[provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "simpleAppln", "tail" : "(funcs: ProbabilityDistribution[ExstFunc], args: (Typ[Term]) ⇒ ProbabilityDistribution[Term]): ProbabilityDistribution[Option[Term]]", "member" : "provingground.learning.TermEvolver.simpleAppln", "link" : "provingground\/learning\/TermEvolver.html#simpleAppln(funcs:provingground.ProbabilityDistribution[provingground.learning.ExstFunc],args:provingground.HoTT.Typ[provingground.HoTT.Term]=>provingground.ProbabilityDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[Option[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "TunifAppln", "tail" : ": (TangVec[(ProbabilityDistribution[ExstFunc], ProbabilityDistribution[Term])]) ⇒ TangVec[ProbabilityDistribution[Option[Term]]]", "member" : "provingground.learning.TermEvolver.TunifAppln", "link" : "provingground\/learning\/TermEvolver.html#TunifAppln:provingground.learning.TangVec[(provingground.ProbabilityDistribution[provingground.learning.ExstFunc],provingground.ProbabilityDistribution[provingground.HoTT.Term])]=>provingground.learning.TangVec[provingground.ProbabilityDistribution[Option[provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "unifAppln", "tail" : "(x: ProbabilityDistribution[ExstFunc], y: ProbabilityDistribution[Term]): ProbabilityDistribution[Option[Term]]", "member" : "provingground.learning.TermEvolver.unifAppln", "link" : "provingground\/learning\/TermEvolver.html#unifAppln(x:provingground.ProbabilityDistribution[provingground.learning.ExstFunc],y:provingground.ProbabilityDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[Option[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "evolveAtTyp", "tail" : "(typ: Typ[Term]): (TangVec[FiniteDistribution[Term]]) ⇒ TangVec[ProbabilityDistribution[Term]]", "member" : "provingground.learning.TermEvolver.evolveAtTyp", "link" : "provingground\/learning\/TermEvolver.html#evolveAtTyp(typ:provingground.HoTT.Typ[provingground.HoTT.Term]):provingground.learning.TangVec[provingground.FiniteDistribution[provingground.HoTT.Term]]=>provingground.learning.TangVec[provingground.ProbabilityDistribution[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "evolveTyps", "tail" : ": (TangVec[FiniteDistribution[Term]]) ⇒ TangVec[ProbabilityDistribution[Typ[Term]]]", "member" : "provingground.learning.TermEvolver.evolveTyps", "link" : "provingground\/learning\/TermEvolver.html#evolveTyps:provingground.learning.TangVec[provingground.FiniteDistribution[provingground.HoTT.Term]]=>provingground.learning.TangVec[provingground.ProbabilityDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "evolveWithTyp", "tail" : ": (TangVec[FiniteDistribution[Term]]) ⇒ TangVec[(Typ[Term]) ⇒ ProbabilityDistribution[Term]]", "member" : "provingground.learning.TermEvolver.evolveWithTyp", "link" : "provingground\/learning\/TermEvolver.html#evolveWithTyp:provingground.learning.TangVec[provingground.FiniteDistribution[provingground.HoTT.Term]]=>provingground.learning.TangVec[provingground.HoTT.Typ[provingground.HoTT.Term]=>provingground.ProbabilityDistribution[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "evolveTypFamilies", "tail" : ": (TangVec[FiniteDistribution[Term]]) ⇒ TangVec[ProbabilityDistribution[ExstFunc]]", "member" : "provingground.learning.TermEvolver.evolveTypFamilies", "link" : "provingground\/learning\/TermEvolver.html#evolveTypFamilies:provingground.learning.TangVec[provingground.FiniteDistribution[provingground.HoTT.Term]]=>provingground.learning.TangVec[provingground.ProbabilityDistribution[provingground.learning.ExstFunc]]", "kind" : "val"}, {"label" : "evolveFuncs", "tail" : ": (TangVec[FiniteDistribution[Term]]) ⇒ TangVec[ProbabilityDistribution[ExstFunc]]", "member" : "provingground.learning.TermEvolver.evolveFuncs", "link" : "provingground\/learning\/TermEvolver.html#evolveFuncs:provingground.learning.TangVec[provingground.FiniteDistribution[provingground.HoTT.Term]]=>provingground.learning.TangVec[provingground.ProbabilityDistribution[provingground.learning.ExstFunc]]", "kind" : "val"}, {"label" : "evolve", "tail" : ": (TangVec[FiniteDistribution[Term]]) ⇒ TangVec[ProbabilityDistribution[Term]]", "member" : "provingground.learning.TermEvolver.evolve", "link" : "provingground\/learning\/TermEvolver.html#evolve:provingground.learning.TangVec[provingground.FiniteDistribution[provingground.HoTT.Term]]=>provingground.learning.TangVec[provingground.ProbabilityDistribution[provingground.HoTT.Term]]", "kind" : "val"}, {"member" : "provingground.learning.TermEvolver#<init>", "error" : "unsupported entity"}, {"label" : "tangEvolveTyps", "tail" : "(base: FiniteDistribution[Term])(vec: FiniteDistribution[Term]): ProbabilityDistribution[Typ[Term]]", "member" : "provingground.learning.TermEvolution.tangEvolveTyps", "link" : "provingground\/learning\/TermEvolver.html#tangEvolveTyps(base:provingground.FiniteDistribution[provingground.HoTT.Term])(vec:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "tangEvolve", "tail" : "(base: FiniteDistribution[Term])(vec: FiniteDistribution[Term]): ProbabilityDistribution[Term]", "member" : "provingground.learning.TermEvolution.tangEvolve", "link" : "provingground\/learning\/TermEvolver.html#tangEvolve(base:provingground.FiniteDistribution[provingground.HoTT.Term])(vec:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "baseEvolveTyps", "tail" : "(fd: FiniteDistribution[Term]): ProbabilityDistribution[Typ[Term]]", "member" : "provingground.learning.TermEvolution.baseEvolveTyps", "link" : "provingground\/learning\/TermEvolver.html#baseEvolveTyps(fd:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "baseEvolve", "tail" : "(fd: FiniteDistribution[Term]): ProbabilityDistribution[Term]", "member" : "provingground.learning.TermEvolution.baseEvolve", "link" : "provingground\/learning\/TermEvolver.html#baseEvolve(fd:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/TermEvolver.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/TermEvolver.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/TermEvolver.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/TermEvolver.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/TermEvolver.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/TermEvolver.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/TermEvolver.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TermEvolver.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TermEvolver.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TermEvolver.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/TermEvolver.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/TermEvolver.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/TermEvolver.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/TermEvolver.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/TermEvolver.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/TermEvolver.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/TermEvolver.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/TermEvolver.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/TermEvolver.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "topTheorems", "tail" : "(fd: FiniteDistribution[Term], n: Int): Vector[Weighted[Typ[Term]]]", "member" : "provingground.learning.TermEvolver.topTheorems", "link" : "provingground\/learning\/TermEvolver$.html#topTheorems(fd:provingground.FiniteDistribution[provingground.HoTT.Term],n:Int):scala.collection.immutable.Vector[provingground.Weighted[provingground.HoTT.Typ[provingground.HoTT.Term]]]", "kind" : "def"}, {"label" : "theorems", "tail" : "(fd: FiniteDistribution[Term]): FiniteDistribution[Typ[Term]]", "member" : "provingground.learning.TermEvolver.theorems", "link" : "provingground\/learning\/TermEvolver$.html#theorems(fd:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "justTerm", "tail" : "(x: U): Term", "member" : "provingground.learning.TermEvolver.justTerm", "link" : "provingground\/learning\/TermEvolver$.html#justTerm[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](x:U):provingground.HoTT.Term", "kind" : "def"}, {"label" : "typOpt", "tail" : "(x: Term): Option[Typ[Term]]", "member" : "provingground.learning.TermEvolver.typOpt", "link" : "provingground\/learning\/TermEvolver$.html#typOpt(x:provingground.HoTT.Term):Option[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "toFD", "tail" : "(sample: Map[A, Int]): FiniteDistribution[A]", "member" : "provingground.learning.TermEvolver.toFD", "link" : "provingground\/learning\/TermEvolver$.html#toFD[A](sample:Map[A,Int]):provingground.FiniteDistribution[A]", "kind" : "def"}, {"label" : "total", "tail" : "(x: Vector[(A, Int)]): Int", "member" : "provingground.learning.TermEvolver.total", "link" : "provingground\/learning\/TermEvolver$.html#total[A](x:Vector[(A,Int)]):Int", "kind" : "def"}, {"label" : "TPOps", "tail" : "", "member" : "provingground.learning.TermEvolver.TPOps", "link" : "provingground\/learning\/TermEvolver$.html#TPOps[A]extendsAnyRef", "kind" : "implicit class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/TermEvolver$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/TermEvolver$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/TermEvolver$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/TermEvolver$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/TermEvolver$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/TermEvolver$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/TermEvolver$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TermEvolver$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TermEvolver$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TermEvolver$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/TermEvolver$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/TermEvolver$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/TermEvolver$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/TermEvolver$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/TermEvolver$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/TermEvolver$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/TermEvolver$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/TermEvolver$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/TermEvolver$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/learning\/TermEvolver.html", "kind" : "object"}, {"name" : "provingground.learning.TermPopulation", "shortDescription" : "", "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/learning\/TermPopulation.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/learning\/TermPopulation.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TermPopulation) ⇒ Boolean, msg: ⇒ Any): TermPopulation", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/TermPopulation.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TermPopulation) ⇒ Boolean): TermPopulation", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/TermPopulation.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): TermPopulation", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/TermPopulation.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): TermPopulation", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/TermPopulation.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (TermPopulation, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/learning\/TermPopulation.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (TermPopulation, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/learning\/TermPopulation.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "pickle", "tail" : "(): String", "member" : "provingground.learning.TermPopulation.pickle", "link" : "provingground\/learning\/TermPopulation.html#pickle:String", "kind" : "def"}, {"label" : "pickledPopulation", "tail" : "(): PickledTermPopulation", "member" : "provingground.learning.TermPopulation.pickledPopulation", "link" : "provingground\/learning\/TermPopulation.html#pickledPopulation:provingground.learning.PickledTermPopulation", "kind" : "def"}, {"label" : "learnerFeedback", "tail" : "(absTheorems: FiniteDistribution[Typ[Term]]): FiniteDistribution[Term]", "member" : "provingground.learning.TermPopulation.learnerFeedback", "link" : "provingground\/learning\/TermPopulation.html#learnerFeedback(absTheorems:provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]):provingground.FiniteDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "feedback", "tail" : ": FiniteDistribution[Term]", "member" : "provingground.learning.TermPopulation.feedback", "link" : "provingground\/learning\/TermPopulation.html#feedback:provingground.FiniteDistribution[provingground.HoTT.Term]", "kind" : "lazy val"}, {"label" : "abstractTheoremsByProofs", "tail" : ": FiniteDistribution[Typ[Term]]", "member" : "provingground.learning.TermPopulation.abstractTheoremsByProofs", "link" : "provingground\/learning\/TermPopulation.html#abstractTheoremsByProofs:provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "abstractTheorems", "tail" : ": FiniteDistribution[Typ[Term]]", "member" : "provingground.learning.TermPopulation.abstractTheorems", "link" : "provingground\/learning\/TermPopulation.html#abstractTheorems:provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "terms", "tail" : ": FiniteDistribution[Term]", "member" : "provingground.learning.TermPopulation.terms", "link" : "provingground\/learning\/TermPopulation.html#terms:provingground.FiniteDistribution[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "normalized", "tail" : "(): TermPopulation", "member" : "provingground.learning.TermPopulation.normalized", "link" : "provingground\/learning\/TermPopulation.html#normalized:provingground.learning.TermPopulation", "kind" : "def"}, {"label" : "*", "tail" : "(scale: Double): TermPopulation", "member" : "provingground.learning.TermPopulation.*", "link" : "provingground\/learning\/TermPopulation.html#*(scale:Double):provingground.learning.TermPopulation", "kind" : "def"}, {"label" : "+++", "tail" : "(that: FiniteDistribution[Term]): TermPopulation", "member" : "provingground.learning.TermPopulation.+++", "link" : "provingground\/learning\/TermPopulation.html#+++(that:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.learning.TermPopulation", "kind" : "def"}, {"label" : "fromFD", "tail" : "(fd: FiniteDistribution[Term]): TermPopulation", "member" : "provingground.learning.TermPopulation.fromFD", "link" : "provingground\/learning\/TermPopulation.html#fromFD(fd:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.learning.TermPopulation", "kind" : "def"}, {"label" : "++", "tail" : "(that: TermPopulation): TermPopulation", "member" : "provingground.learning.TermPopulation.++", "link" : "provingground\/learning\/TermPopulation.html#++(that:provingground.learning.TermPopulation):provingground.learning.TermPopulation", "kind" : "def"}, {"label" : "applnInv", "tail" : ": (Term) ⇒ Set[(Term, Term)]", "member" : "provingground.learning.TermPopulation.applnInv", "link" : "provingground\/learning\/TermPopulation.html#applnInv:provingground.HoTT.Term=>scala.collection.immutable.Set[(provingground.HoTT.Term,provingground.HoTT.Term)]", "kind" : "val"}, {"label" : "theorems", "tail" : ": FiniteDistribution[Typ[Term]]", "member" : "provingground.learning.TermPopulation.theorems", "link" : "provingground\/learning\/TermPopulation.html#theorems:provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"member" : "provingground.learning.TermPopulation#<init>", "error" : "unsupported entity"}, {"label" : "applnInvMap", "tail" : ": InvMap", "member" : "provingground.learning.TermPopulation.applnInvMap", "link" : "provingground\/learning\/TermPopulation.html#applnInvMap:provingground.learning.Deducer.InvMap", "kind" : "val"}, {"label" : "piWeight", "tail" : ": Double", "member" : "provingground.learning.TermPopulation.piWeight", "link" : "provingground\/learning\/TermPopulation.html#piWeight:Double", "kind" : "val"}, {"label" : "lambdaWeight", "tail" : ": Double", "member" : "provingground.learning.TermPopulation.lambdaWeight", "link" : "provingground\/learning\/TermPopulation.html#lambdaWeight:Double", "kind" : "val"}, {"label" : "vars", "tail" : ": Vector[Weighted[Term]]", "member" : "provingground.learning.TermPopulation.vars", "link" : "provingground\/learning\/TermPopulation.html#vars:Vector[provingground.Weighted[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "thmsByProofs", "tail" : ": FiniteDistribution[Typ[Term]]", "member" : "provingground.learning.TermPopulation.thmsByProofs", "link" : "provingground\/learning\/TermPopulation.html#thmsByProofs:provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "types", "tail" : ": FiniteDistribution[Typ[Term]]", "member" : "provingground.learning.TermPopulation.types", "link" : "provingground\/learning\/TermPopulation.html#types:provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "termsByType", "tail" : ": Map[Typ[Term], FiniteDistribution[Term]]", "member" : "provingground.learning.TermPopulation.termsByType", "link" : "provingground\/learning\/TermPopulation.html#termsByType:Map[provingground.HoTT.Typ[provingground.HoTT.Term],provingground.FiniteDistribution[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/TermPopulation.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/TermPopulation.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/TermPopulation.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/TermPopulation.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/TermPopulation.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/TermPopulation.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/TermPopulation.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TermPopulation.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TermPopulation.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TermPopulation.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/TermPopulation.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/TermPopulation.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/TermPopulation.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/TermPopulation.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/TermPopulation.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/TermPopulation.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/learning\/TermPopulation.html", "kind" : "case class"}, {"name" : "provingground.learning.TheoremFeedback", "shortDescription" : "", "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/learning\/TheoremFeedback.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/learning\/TheoremFeedback.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TheoremFeedback) ⇒ Boolean, msg: ⇒ Any): TheoremFeedback", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/TheoremFeedback.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TheoremFeedback) ⇒ Boolean): TheoremFeedback", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/TheoremFeedback.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): TheoremFeedback", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/TheoremFeedback.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): TheoremFeedback", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/TheoremFeedback.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (TheoremFeedback, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/learning\/TheoremFeedback.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (TheoremFeedback, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/learning\/TheoremFeedback.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "feedbackTermDist", "tail" : "(fd: FiniteDistribution[Term], typfd: FiniteDistribution[Typ[Term]]): Double", "member" : "provingground.learning.TheoremFeedback.feedbackTermDist", "link" : "provingground\/learning\/TheoremFeedback.html#feedbackTermDist(fd:provingground.FiniteDistribution[provingground.HoTT.Term],typfd:provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]):Double", "kind" : "def"}, {"label" : "thmFeedbackFunction", "tail" : "(x: Term): Double", "member" : "provingground.learning.TheoremFeedback.thmFeedbackFunction", "link" : "provingground\/learning\/TheoremFeedback.html#thmFeedbackFunction(x:provingground.HoTT.Term):Double", "kind" : "def"}, {"label" : "feedbackTypDist", "tail" : "(fd: FiniteDistribution[Typ[Term]]): Double", "member" : "provingground.learning.TheoremFeedback.feedbackTypDist", "link" : "provingground\/learning\/TheoremFeedback.html#feedbackTypDist(fd:provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]):Double", "kind" : "def"}, {"label" : "feedbackFunction", "tail" : "(x: Typ[Term]): Double", "member" : "provingground.learning.TheoremFeedback.feedbackFunction", "link" : "provingground\/learning\/TheoremFeedback.html#feedbackFunction(x:provingground.HoTT.Typ[provingground.HoTT.Term]):Double", "kind" : "def"}, {"label" : "feedbackMap", "tail" : ": Map[Typ[Term], Double]", "member" : "provingground.learning.TheoremFeedback.feedbackMap", "link" : "provingground\/learning\/TheoremFeedback.html#feedbackMap:scala.collection.immutable.Map[provingground.HoTT.Typ[provingground.HoTT.Term],Double]", "kind" : "lazy val"}, {"label" : "feedbackVec", "tail" : ": Vector[(Typ[Term], Double)]", "member" : "provingground.learning.TheoremFeedback.feedbackVec", "link" : "provingground\/learning\/TheoremFeedback.html#feedbackVec:scala.collection.immutable.Vector[(provingground.HoTT.Typ[provingground.HoTT.Term],Double)]", "kind" : "lazy val"}, {"label" : "entropyPairs", "tail" : ": Vector[(Typ[Term], (Double, Double))]", "member" : "provingground.learning.TheoremFeedback.entropyPairs", "link" : "provingground\/learning\/TheoremFeedback.html#entropyPairs:scala.collection.immutable.Vector[(provingground.HoTT.Typ[provingground.HoTT.Term],(Double,Double))]", "kind" : "lazy val"}, {"label" : "byStatement", "tail" : ": FiniteDistribution[Typ[Term]]", "member" : "provingground.learning.TheoremFeedback.byStatement", "link" : "provingground\/learning\/TheoremFeedback.html#byStatement:provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "thmSet", "tail" : ": Set[Typ[Term]]", "member" : "provingground.learning.TheoremFeedback.thmSet", "link" : "provingground\/learning\/TheoremFeedback.html#thmSet:scala.collection.immutable.Set[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "thmShift", "tail" : ": Double", "member" : "provingground.learning.TheoremFeedback.thmShift", "link" : "provingground\/learning\/TheoremFeedback.html#thmShift:Double", "kind" : "lazy val"}, {"label" : "thmTotal", "tail" : ": Double", "member" : "provingground.learning.TheoremFeedback.thmTotal", "link" : "provingground\/learning\/TheoremFeedback.html#thmTotal:Double", "kind" : "lazy val"}, {"label" : "byStatementUnscaled", "tail" : ": FiniteDistribution[Typ[Term]]", "member" : "provingground.learning.TheoremFeedback.byStatementUnscaled", "link" : "provingground\/learning\/TheoremFeedback.html#byStatementUnscaled:provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "byProof", "tail" : ": FiniteDistribution[Typ[Term]]", "member" : "provingground.learning.TheoremFeedback.byProof", "link" : "provingground\/learning\/TheoremFeedback.html#byProof:provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "pfd", "tail" : ": FiniteDistribution[Typ[Term]]", "member" : "provingground.learning.TheoremFeedback.pfd", "link" : "provingground\/learning\/TheoremFeedback.html#pfd:provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "lfd", "tail" : ": FiniteDistribution[Term]", "member" : "provingground.learning.TheoremFeedback.lfd", "link" : "provingground\/learning\/TheoremFeedback.html#lfd:provingground.FiniteDistribution[provingground.HoTT.Term]", "kind" : "lazy val"}, {"member" : "provingground.learning.TheoremFeedback#<init>", "error" : "unsupported entity"}, {"label" : "thmTarget", "tail" : ": Double", "member" : "provingground.learning.TheoremFeedback.thmTarget", "link" : "provingground\/learning\/TheoremFeedback.html#thmTarget:Double", "kind" : "val"}, {"label" : "thmScale", "tail" : ": Double", "member" : "provingground.learning.TheoremFeedback.thmScale", "link" : "provingground\/learning\/TheoremFeedback.html#thmScale:Double", "kind" : "val"}, {"label" : "scale", "tail" : ": Double", "member" : "provingground.learning.TheoremFeedback.scale", "link" : "provingground\/learning\/TheoremFeedback.html#scale:Double", "kind" : "val"}, {"label" : "vars", "tail" : ": Vector[Term]", "member" : "provingground.learning.TheoremFeedback.vars", "link" : "provingground\/learning\/TheoremFeedback.html#vars:Vector[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "tfd", "tail" : ": FiniteDistribution[Typ[Term]]", "member" : "provingground.learning.TheoremFeedback.tfd", "link" : "provingground\/learning\/TheoremFeedback.html#tfd:provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "fd", "tail" : ": FiniteDistribution[Term]", "member" : "provingground.learning.TheoremFeedback.fd", "link" : "provingground\/learning\/TheoremFeedback.html#fd:provingground.FiniteDistribution[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/TheoremFeedback.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/TheoremFeedback.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/TheoremFeedback.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/TheoremFeedback.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/TheoremFeedback.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/TheoremFeedback.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/TheoremFeedback.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TheoremFeedback.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TheoremFeedback.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TheoremFeedback.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/TheoremFeedback.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/TheoremFeedback.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/TheoremFeedback.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/TheoremFeedback.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/TheoremFeedback.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/TheoremFeedback.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/learning\/TheoremFeedback.html", "kind" : "case class"}, {"name" : "provingground.learning.ThmEntropies", "shortDescription" : "", "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/learning\/ThmEntropies.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/learning\/ThmEntropies.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ThmEntropies) ⇒ Boolean, msg: ⇒ Any): ThmEntropies", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/ThmEntropies.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ThmEntropies) ⇒ Boolean): ThmEntropies", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/ThmEntropies.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): ThmEntropies", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/ThmEntropies.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ThmEntropies", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/ThmEntropies.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ThmEntropies, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/learning\/ThmEntropies.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ThmEntropies, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/learning\/ThmEntropies.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "feedbackTermDist", "tail" : "(fd: FiniteDistribution[Term]): Double", "member" : "provingground.learning.ThmEntropies.feedbackTermDist", "link" : "provingground\/learning\/ThmEntropies.html#feedbackTermDist(fd:provingground.FiniteDistribution[provingground.HoTT.Term]):Double", "kind" : "def"}, {"label" : "thmFeedbackFunction", "tail" : "(x: Term): Double", "member" : "provingground.learning.ThmEntropies.thmFeedbackFunction", "link" : "provingground\/learning\/ThmEntropies.html#thmFeedbackFunction(x:provingground.HoTT.Term):Double", "kind" : "def"}, {"label" : "feedbackTypDist", "tail" : "(fd: FiniteDistribution[Typ[Term]]): Double", "member" : "provingground.learning.ThmEntropies.feedbackTypDist", "link" : "provingground\/learning\/ThmEntropies.html#feedbackTypDist(fd:provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]):Double", "kind" : "def"}, {"label" : "feedbackFunction", "tail" : "(x: Typ[Term]): Double", "member" : "provingground.learning.ThmEntropies.feedbackFunction", "link" : "provingground\/learning\/ThmEntropies.html#feedbackFunction(x:provingground.HoTT.Typ[provingground.HoTT.Term]):Double", "kind" : "def"}, {"label" : "feedbackMap", "tail" : ": Map[Typ[Term], Double]", "member" : "provingground.learning.ThmEntropies.feedbackMap", "link" : "provingground\/learning\/ThmEntropies.html#feedbackMap:scala.collection.immutable.Map[provingground.HoTT.Typ[provingground.HoTT.Term],Double]", "kind" : "lazy val"}, {"label" : "feedbackVec", "tail" : ": Vector[(Typ[Term], Double)]", "member" : "provingground.learning.ThmEntropies.feedbackVec", "link" : "provingground\/learning\/ThmEntropies.html#feedbackVec:scala.collection.immutable.Vector[(provingground.HoTT.Typ[provingground.HoTT.Term],Double)]", "kind" : "lazy val"}, {"label" : "entropyPairs", "tail" : ": Vector[(Typ[Term], (Double, Double))]", "member" : "provingground.learning.ThmEntropies.entropyPairs", "link" : "provingground\/learning\/ThmEntropies.html#entropyPairs:scala.collection.immutable.Vector[(provingground.HoTT.Typ[provingground.HoTT.Term],(Double,Double))]", "kind" : "lazy val"}, {"label" : "byStatement", "tail" : ": FiniteDistribution[Typ[Term]]", "member" : "provingground.learning.ThmEntropies.byStatement", "link" : "provingground\/learning\/ThmEntropies.html#byStatement:provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "thmSet", "tail" : ": Set[Typ[Term]]", "member" : "provingground.learning.ThmEntropies.thmSet", "link" : "provingground\/learning\/ThmEntropies.html#thmSet:scala.collection.immutable.Set[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "thmShift", "tail" : ": Double", "member" : "provingground.learning.ThmEntropies.thmShift", "link" : "provingground\/learning\/ThmEntropies.html#thmShift:Double", "kind" : "lazy val"}, {"label" : "thmTotal", "tail" : ": Double", "member" : "provingground.learning.ThmEntropies.thmTotal", "link" : "provingground\/learning\/ThmEntropies.html#thmTotal:Double", "kind" : "lazy val"}, {"label" : "byStatementUnscaled", "tail" : ": FiniteDistribution[Typ[Term]]", "member" : "provingground.learning.ThmEntropies.byStatementUnscaled", "link" : "provingground\/learning\/ThmEntropies.html#byStatementUnscaled:provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "byProof", "tail" : ": FiniteDistribution[Typ[Term]]", "member" : "provingground.learning.ThmEntropies.byProof", "link" : "provingground\/learning\/ThmEntropies.html#byProof:provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "pfd", "tail" : ": FiniteDistribution[Typ[Term]]", "member" : "provingground.learning.ThmEntropies.pfd", "link" : "provingground\/learning\/ThmEntropies.html#pfd:provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "tfd", "tail" : ": FiniteDistribution[Typ[Term]]", "member" : "provingground.learning.ThmEntropies.tfd", "link" : "provingground\/learning\/ThmEntropies.html#tfd:provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "lfd", "tail" : ": FiniteDistribution[Term]", "member" : "provingground.learning.ThmEntropies.lfd", "link" : "provingground\/learning\/ThmEntropies.html#lfd:provingground.FiniteDistribution[provingground.HoTT.Term]", "kind" : "lazy val"}, {"label" : "vars", "tail" : ": Vector[Weighted[Term]]", "member" : "provingground.learning.ThmEntropies.vars", "link" : "provingground\/learning\/ThmEntropies.html#vars:scala.collection.immutable.Vector[provingground.Weighted[provingground.HoTT.Term]]", "kind" : "val"}, {"member" : "provingground.learning.ThmEntropies#<init>", "error" : "unsupported entity"}, {"label" : "thmTarget", "tail" : ": Double", "member" : "provingground.learning.ThmEntropies.thmTarget", "link" : "provingground\/learning\/ThmEntropies.html#thmTarget:Double", "kind" : "val"}, {"label" : "thmScale", "tail" : ": Double", "member" : "provingground.learning.ThmEntropies.thmScale", "link" : "provingground\/learning\/ThmEntropies.html#thmScale:Double", "kind" : "val"}, {"label" : "scale", "tail" : ": Double", "member" : "provingground.learning.ThmEntropies.scale", "link" : "provingground\/learning\/ThmEntropies.html#scale:Double", "kind" : "val"}, {"label" : "varNames", "tail" : ": Vector[Term]", "member" : "provingground.learning.ThmEntropies.varNames", "link" : "provingground\/learning\/ThmEntropies.html#varNames:Vector[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "fd", "tail" : ": FiniteDistribution[Term]", "member" : "provingground.learning.ThmEntropies.fd", "link" : "provingground\/learning\/ThmEntropies.html#fd:provingground.FiniteDistribution[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/ThmEntropies.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/ThmEntropies.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/ThmEntropies.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/ThmEntropies.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/ThmEntropies.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/ThmEntropies.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/ThmEntropies.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/ThmEntropies.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/ThmEntropies.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/ThmEntropies.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/ThmEntropies.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/ThmEntropies.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/ThmEntropies.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/ThmEntropies.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/ThmEntropies.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/ThmEntropies.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/learning\/ThmEntropies.html", "kind" : "case class"}, {"name" : "provingground.learning.TruncatedDistribution", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/learning\/TruncatedDistribution.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/learning\/TruncatedDistribution.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TruncatedDistribution[A]) ⇒ Boolean, msg: ⇒ Any): TruncatedDistribution[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/TruncatedDistribution.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TruncatedDistribution[A]) ⇒ Boolean): TruncatedDistribution[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/TruncatedDistribution.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): TruncatedDistribution[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/TruncatedDistribution.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): TruncatedDistribution[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/TruncatedDistribution.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (TruncatedDistribution[A], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/learning\/TruncatedDistribution.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (TruncatedDistribution[A], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/learning\/TruncatedDistribution.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "getOpt", "tail" : "(): Option[TruncatedDistribution[A]]", "member" : "provingground.learning.TruncatedDistribution.getOpt", "link" : "provingground\/learning\/TruncatedDistribution.html#getOpt:Option[provingground.learning.TruncatedDistribution[A]]", "kind" : "def"}, {"label" : "filter", "tail" : "(f: (A) ⇒ Boolean): Filter[A]", "member" : "provingground.learning.TruncatedDistribution.filter", "link" : "provingground\/learning\/TruncatedDistribution.html#filter(f:A=>Boolean):provingground.learning.TruncatedDistribution.Filter[A]", "kind" : "def"}, {"label" : "mapOpt", "tail" : "(f: (A) ⇒ Option[B]): TruncatedDistribution[B]", "member" : "provingground.learning.TruncatedDistribution.mapOpt", "link" : "provingground\/learning\/TruncatedDistribution.html#mapOpt[B](f:A=>Option[B]):provingground.learning.TruncatedDistribution[B]", "kind" : "def"}, {"label" : "mapFD", "tail" : "(f: (FiniteDistribution[A]) ⇒ FiniteDistribution[B]): TruncatedDistribution[B]", "member" : "provingground.learning.TruncatedDistribution.mapFD", "link" : "provingground\/learning\/TruncatedDistribution.html#mapFD[B](f:provingground.FiniteDistribution[A]=>provingground.FiniteDistribution[B]):provingground.learning.TruncatedDistribution[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: ⇒ (A) ⇒ TruncatedDistribution[B]): TruncatedDistribution[B]", "member" : "provingground.learning.TruncatedDistribution.flatMap", "link" : "provingground\/learning\/TruncatedDistribution.html#flatMap[B](f:=>A=>provingground.learning.TruncatedDistribution[B]):provingground.learning.TruncatedDistribution[B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (A) ⇒ B): TruncatedDistribution[B]", "member" : "provingground.learning.TruncatedDistribution.map", "link" : "provingground\/learning\/TruncatedDistribution.html#map[B](f:A=>B):provingground.learning.TruncatedDistribution[B]", "kind" : "def"}, {"label" : "<++>", "tail" : "(that: ⇒ List[Weighted[TruncatedDistribution[A]]]): TruncatedDistribution[A]", "member" : "provingground.learning.TruncatedDistribution.<++>", "link" : "provingground\/learning\/TruncatedDistribution.html#<++>(that:=>List[provingground.Weighted[provingground.learning.TruncatedDistribution[A]]]):provingground.learning.TruncatedDistribution[A]", "kind" : "def"}, {"label" : "|+|", "tail" : "(that: ⇒ FiniteDistribution[A]): Sum[A]", "member" : "provingground.learning.TruncatedDistribution.|+|", "link" : "provingground\/learning\/TruncatedDistribution.html#|+|(that:=>provingground.FiniteDistribution[A]):provingground.learning.TruncatedDistribution.Sum[A]", "kind" : "def"}, {"label" : "<+>", "tail" : "(that: ⇒ TruncatedDistribution[A]): Sum[A]", "member" : "provingground.learning.TruncatedDistribution.<+>", "link" : "provingground\/learning\/TruncatedDistribution.html#<+>(that:=>provingground.learning.TruncatedDistribution[A]):provingground.learning.TruncatedDistribution.Sum[A]", "kind" : "def"}, {"label" : "<*>:", "tail" : "(scale: Double): TruncatedDistribution[A]", "member" : "provingground.learning.TruncatedDistribution.<*>:", "link" : "provingground\/learning\/TruncatedDistribution.html#<*>:(scale:Double):provingground.learning.TruncatedDistribution[A]", "kind" : "def"}, {"label" : "<*>", "tail" : "(scale: Double): TruncatedDistribution[A]", "member" : "provingground.learning.TruncatedDistribution.<*>", "link" : "provingground\/learning\/TruncatedDistribution.html#<*>(scale:Double):provingground.learning.TruncatedDistribution[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/TruncatedDistribution.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/TruncatedDistribution.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/TruncatedDistribution.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/TruncatedDistribution.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/TruncatedDistribution.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/TruncatedDistribution.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/TruncatedDistribution.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TruncatedDistribution.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TruncatedDistribution.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TruncatedDistribution.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/TruncatedDistribution.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/TruncatedDistribution.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/TruncatedDistribution.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/TruncatedDistribution.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/TruncatedDistribution.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/TruncatedDistribution.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/TruncatedDistribution.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/TruncatedDistribution.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/TruncatedDistribution.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "getFD", "tail" : "(cutoff: Double): Option[FiniteDistribution[A]]", "member" : "provingground.learning.TruncatedDistribution.getFD", "link" : "provingground\/learning\/TruncatedDistribution.html#getFD(cutoff:Double):Option[provingground.FiniteDistribution[A]]", "kind" : "abstract def"}], "shortDescription" : "", "object" : "provingground\/learning\/TruncatedDistribution$.html", "members_object" : [{"label" : "sum", "tail" : "(first: ⇒ TruncatedDistribution[A], second: ⇒ TruncatedDistribution[A]): Sum[A]", "member" : "provingground.learning.TruncatedDistribution.sum", "link" : "provingground\/learning\/TruncatedDistribution$.html#sum[A](first:=>provingground.learning.TruncatedDistribution[A],second:=>provingground.learning.TruncatedDistribution[A]):provingground.learning.TruncatedDistribution.Sum[A]", "kind" : "def"}, {"label" : "liftOpFlatten", "tail" : "(op: (A, B) ⇒ Option[C]): (TruncatedDistribution[A], TruncatedDistribution[B]) ⇒ TruncatedDistribution[C]", "member" : "provingground.learning.TruncatedDistribution.liftOpFlatten", "link" : "provingground\/learning\/TruncatedDistribution$.html#liftOpFlatten[A,B,C](op:(A,B)=>Option[C]):(provingground.learning.TruncatedDistribution[A],provingground.learning.TruncatedDistribution[B])=>provingground.learning.TruncatedDistribution[C]", "kind" : "def"}, {"label" : "liftOpOpt", "tail" : "(op: (A, B) ⇒ Option[C]): (TruncatedDistribution[A], TruncatedDistribution[B]) ⇒ TruncatedDistribution[Option[C]]", "member" : "provingground.learning.TruncatedDistribution.liftOpOpt", "link" : "provingground\/learning\/TruncatedDistribution$.html#liftOpOpt[A,B,C](op:(A,B)=>Option[C]):(provingground.learning.TruncatedDistribution[A],provingground.learning.TruncatedDistribution[B])=>provingground.learning.TruncatedDistribution[Option[C]]", "kind" : "def"}, {"label" : "mapOp", "tail" : "(xd: TruncatedDistribution[A], yd: TruncatedDistribution[B])(op: (A, B) ⇒ C): TruncatedDistribution[C]", "member" : "provingground.learning.TruncatedDistribution.mapOp", "link" : "provingground\/learning\/TruncatedDistribution$.html#mapOp[A,B,C](xd:provingground.learning.TruncatedDistribution[A],yd:provingground.learning.TruncatedDistribution[B])(op:(A,B)=>C):provingground.learning.TruncatedDistribution[C]", "kind" : "def"}, {"label" : "mapOpt", "tail" : "(base: TruncatedDistribution[A])(f: (A) ⇒ Option[B]): TruncatedDistribution[B]", "member" : "provingground.learning.TruncatedDistribution.mapOpt", "link" : "provingground\/learning\/TruncatedDistribution$.html#mapOpt[A,B](base:provingground.learning.TruncatedDistribution[A])(f:A=>Option[B]):provingground.learning.TruncatedDistribution[B]", "kind" : "def"}, {"label" : "map", "tail" : "(base: TruncatedDistribution[A])(f: (A) ⇒ B): TruncatedDistribution[B]", "member" : "provingground.learning.TruncatedDistribution.map", "link" : "provingground\/learning\/TruncatedDistribution$.html#map[A,B](base:provingground.learning.TruncatedDistribution[A])(f:A=>B):provingground.learning.TruncatedDistribution[B]", "kind" : "def"}, {"label" : "optF", "tail" : "(fo: TruncatedDistribution[Option[A]]): Option[TruncatedDistribution[A]]", "member" : "provingground.learning.TruncatedDistribution.optF", "link" : "provingground\/learning\/TruncatedDistribution$.html#optF[A](fo:provingground.learning.TruncatedDistribution[Option[A]]):Option[provingground.learning.TruncatedDistribution[A]]", "kind" : "def"}, {"label" : "flatten", "tail" : "(base: TruncatedDistribution[TruncatedDistribution[A]]): Flatten[A]", "member" : "provingground.learning.TruncatedDistribution.flatten", "link" : "provingground\/learning\/TruncatedDistribution$.html#flatten[A](base:provingground.learning.TruncatedDistribution[provingground.learning.TruncatedDistribution[A]]):provingground.learning.TruncatedDistribution.Flatten[A]", "kind" : "def"}, {"label" : "FromFDs", "tail" : "", "member" : "provingground.learning.TruncatedDistribution.FromFDs", "link" : "provingground\/learning\/TruncatedDistribution$.html#FromFDs[A]extendsTruncatedDistribution[A]withProductwithSerializable", "kind" : "case class"}, {"label" : "Coeffs", "tail" : "", "member" : "provingground.learning.TruncatedDistribution.Coeffs", "link" : "provingground\/learning\/TruncatedDistribution$.html#Coeffs[A]extendsTruncatedDistribution[A]withProductwithSerializable", "kind" : "case class"}, {"label" : "bigSum", "tail" : "(tds: ⇒ Vector[TruncatedDistribution[A]]): BigSum[A]", "member" : "provingground.learning.TruncatedDistribution.bigSum", "link" : "provingground\/learning\/TruncatedDistribution$.html#bigSum[A](tds:=>Vector[provingground.learning.TruncatedDistribution[A]]):provingground.learning.TruncatedDistribution.BigSum[A]", "kind" : "def"}, {"label" : "BigSum", "tail" : "", "member" : "provingground.learning.TruncatedDistribution.BigSum", "link" : "provingground\/learning\/TruncatedDistribution$.html#BigSum[A]extendsTruncatedDistribution[A]", "kind" : "class"}, {"label" : "Flatten", "tail" : "", "member" : "provingground.learning.TruncatedDistribution.Flatten", "link" : "provingground\/learning\/TruncatedDistribution$.html#Flatten[A]extendsTruncatedDistribution[A]", "kind" : "class"}, {"label" : "FlattenOpt", "tail" : "", "member" : "provingground.learning.TruncatedDistribution.FlattenOpt", "link" : "provingground\/learning\/TruncatedDistribution$.html#FlattenOpt[A]extendsTruncatedDistribution[A]", "kind" : "class"}, {"label" : "MapFD", "tail" : "", "member" : "provingground.learning.TruncatedDistribution.MapFD", "link" : "provingground\/learning\/TruncatedDistribution$.html#MapFD[A,B]extendsTruncatedDistribution[B]", "kind" : "class"}, {"label" : "FlatMap", "tail" : "", "member" : "provingground.learning.TruncatedDistribution.FlatMap", "link" : "provingground\/learning\/TruncatedDistribution$.html#FlatMap[A,B]extendsTruncatedDistribution[B]", "kind" : "class"}, {"label" : "Filter", "tail" : "", "member" : "provingground.learning.TruncatedDistribution.Filter", "link" : "provingground\/learning\/TruncatedDistribution$.html#Filter[A]extendsTruncatedDistribution[A]", "kind" : "class"}, {"label" : "MapOpt", "tail" : "", "member" : "provingground.learning.TruncatedDistribution.MapOpt", "link" : "provingground\/learning\/TruncatedDistribution$.html#MapOpt[A,B]extendsTruncatedDistribution[B]", "kind" : "class"}, {"label" : "Map", "tail" : "", "member" : "provingground.learning.TruncatedDistribution.Map", "link" : "provingground\/learning\/TruncatedDistribution$.html#Map[A,B]extendsTruncatedDistribution[B]", "kind" : "class"}, {"label" : "Sum", "tail" : "", "member" : "provingground.learning.TruncatedDistribution.Sum", "link" : "provingground\/learning\/TruncatedDistribution$.html#Sum[A]extendsTruncatedDistribution[A]", "kind" : "class"}, {"label" : "Scaled", "tail" : "", "member" : "provingground.learning.TruncatedDistribution.Scaled", "link" : "provingground\/learning\/TruncatedDistribution$.html#Scaled[A]extendsTruncatedDistribution[A]", "kind" : "class"}, {"label" : "PosFD", "tail" : "", "member" : "provingground.learning.TruncatedDistribution.PosFD", "link" : "provingground\/learning\/TruncatedDistribution$.html#PosFD[A]extendsTruncatedDistribution[A]withProductwithSerializable", "kind" : "case class"}, {"label" : "FD", "tail" : "", "member" : "provingground.learning.TruncatedDistribution.FD", "link" : "provingground\/learning\/TruncatedDistribution$.html#FD[A]extendsTruncatedDistribution[A]withProductwithSerializable", "kind" : "case class"}, {"label" : "td", "tail" : "(fd: FiniteDistribution[A]): FD[A]", "member" : "provingground.learning.TruncatedDistribution.td", "link" : "provingground\/learning\/TruncatedDistribution$.html#td[A](fd:provingground.FiniteDistribution[A]):provingground.learning.TruncatedDistribution.FD[A]", "kind" : "implicit def"}, {"label" : "apply", "tail" : "(ws: Seq[Weighted[A]]): FD[A]", "member" : "provingground.learning.TruncatedDistribution.apply", "link" : "provingground\/learning\/TruncatedDistribution$.html#apply[A](ws:Seq[provingground.Weighted[A]]):provingground.learning.TruncatedDistribution.FD[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(fd: FiniteDistribution[A]): FD[A]", "member" : "provingground.learning.TruncatedDistribution.apply", "link" : "provingground\/learning\/TruncatedDistribution$.html#apply[A](fd:provingground.FiniteDistribution[A]):provingground.learning.TruncatedDistribution.FD[A]", "kind" : "def"}, {"label" : "atom", "tail" : "(a: A): OptAtom[A]", "member" : "provingground.learning.TruncatedDistribution.atom", "link" : "provingground\/learning\/TruncatedDistribution$.html#atom[A](a:A):provingground.learning.TruncatedDistribution.OptAtom[A]", "kind" : "def"}, {"label" : "OptAtom", "tail" : "", "member" : "provingground.learning.TruncatedDistribution.OptAtom", "link" : "provingground\/learning\/TruncatedDistribution$.html#OptAtom[A]extendsTruncatedDistribution[A]withProductwithSerializable", "kind" : "case class"}, {"label" : "prunePosFD", "tail" : "(fd: ⇒ FiniteDistribution[A], cutoff: Double): Option[FiniteDistribution[A]]", "member" : "provingground.learning.TruncatedDistribution.prunePosFD", "link" : "provingground\/learning\/TruncatedDistribution$.html#prunePosFD[A](fd:=>provingground.FiniteDistribution[A],cutoff:Double):Option[provingground.FiniteDistribution[A]]", "kind" : "def"}, {"label" : "pruneFD", "tail" : "(fd: ⇒ FiniteDistribution[A], cutoff: Double): Option[FiniteDistribution[A]]", "member" : "provingground.learning.TruncatedDistribution.pruneFD", "link" : "provingground\/learning\/TruncatedDistribution$.html#pruneFD[A](fd:=>provingground.FiniteDistribution[A],cutoff:Double):Option[provingground.FiniteDistribution[A]]", "kind" : "def"}, {"label" : "Empty", "tail" : "", "member" : "provingground.learning.TruncatedDistribution.Empty", "link" : "provingground\/learning\/TruncatedDistribution$.html#Empty[A]extendsTruncatedDistribution[A]withProductwithSerializable", "kind" : "case class"}, {"label" : "composeContravariant", "tail" : "(arg0: Contravariant[G]): Contravariant[[α]TruncatedDistribution[G[α]]]", "member" : "cats.Functor.composeContravariant", "link" : "provingground\/learning\/TruncatedDistribution$.html#composeContravariant[G[_]](implicitevidence$3:cats.functor.Contravariant[G]):cats.functor.Contravariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "composeFilter", "tail" : "(arg0: FunctorFilter[G]): FunctorFilter[[α]TruncatedDistribution[G[α]]]", "member" : "cats.Functor.composeFilter", "link" : "provingground\/learning\/TruncatedDistribution$.html#composeFilter[G[_]](implicitevidence$2:cats.FunctorFilter[G]):cats.FunctorFilter[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Functor[G]): Functor[[α]TruncatedDistribution[G[α]]]", "member" : "cats.Functor.compose", "link" : "provingground\/learning\/TruncatedDistribution$.html#compose[G[_]](implicitevidence$1:cats.Functor[G]):cats.Functor[[α]F[G[α]]]", "kind" : "def"}, {"label" : "tupleRight", "tail" : "(fa: TruncatedDistribution[A], b: B): TruncatedDistribution[(A, B)]", "member" : "cats.Functor.tupleRight", "link" : "provingground\/learning\/TruncatedDistribution$.html#tupleRight[A,B](fa:F[A],b:B):F[(A,B)]", "kind" : "def"}, {"label" : "tupleLeft", "tail" : "(fa: TruncatedDistribution[A], b: B): TruncatedDistribution[(B, A)]", "member" : "cats.Functor.tupleLeft", "link" : "provingground\/learning\/TruncatedDistribution$.html#tupleLeft[A,B](fa:F[A],b:B):F[(B,A)]", "kind" : "def"}, {"label" : "as", "tail" : "(fa: TruncatedDistribution[A], b: B): TruncatedDistribution[B]", "member" : "cats.Functor.as", "link" : "provingground\/learning\/TruncatedDistribution$.html#as[A,B](fa:F[A],b:B):F[B]", "kind" : "def"}, {"label" : "fproduct", "tail" : "(fa: TruncatedDistribution[A])(f: (A) ⇒ B): TruncatedDistribution[(A, B)]", "member" : "cats.Functor.fproduct", "link" : "provingground\/learning\/TruncatedDistribution$.html#fproduct[A,B](fa:F[A])(f:A=>B):F[(A,B)]", "kind" : "def"}, {"label" : "void", "tail" : "(fa: TruncatedDistribution[A]): TruncatedDistribution[Unit]", "member" : "cats.Functor.void", "link" : "provingground\/learning\/TruncatedDistribution$.html#void[A](fa:F[A]):F[Unit]", "kind" : "def"}, {"label" : "lift", "tail" : "(f: (A) ⇒ B): (TruncatedDistribution[A]) ⇒ TruncatedDistribution[B]", "member" : "cats.Functor.lift", "link" : "provingground\/learning\/TruncatedDistribution$.html#lift[A,B](f:A=>B):F[A]=>F[B]", "kind" : "def"}, {"label" : "widen", "tail" : "(fa: TruncatedDistribution[A]): TruncatedDistribution[B]", "member" : "cats.Functor.widen", "link" : "provingground\/learning\/TruncatedDistribution$.html#widen[A,B>:A](fa:F[A]):F[B]", "kind" : "def"}, {"label" : "imap", "tail" : "(fa: TruncatedDistribution[A])(f: (A) ⇒ B)(fi: (B) ⇒ A): TruncatedDistribution[B]", "member" : "cats.Functor.imap", "link" : "provingground\/learning\/TruncatedDistribution$.html#imap[A,B](fa:F[A])(f:A=>B)(fi:B=>A):F[B]", "kind" : "def"}, {"label" : "composeFunctor", "tail" : "(arg0: Functor[G]): Invariant[[α]TruncatedDistribution[G[α]]]", "member" : "cats.functor.Invariant.composeFunctor", "link" : "provingground\/learning\/TruncatedDistribution$.html#composeFunctor[G[_<:<?>]](implicitevidence$2:cats.Functor[G]):cats.functor.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Invariant[G]): Invariant[[α]TruncatedDistribution[G[α]]]", "member" : "cats.functor.Invariant.compose", "link" : "provingground\/learning\/TruncatedDistribution$.html#compose[G[_]](implicitevidence$1:cats.functor.Invariant[G]):cats.functor.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/TruncatedDistribution$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/TruncatedDistribution$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/TruncatedDistribution$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/TruncatedDistribution$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/TruncatedDistribution$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/TruncatedDistribution$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/TruncatedDistribution$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TruncatedDistribution$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TruncatedDistribution$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TruncatedDistribution$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/TruncatedDistribution$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/TruncatedDistribution$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/TruncatedDistribution$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/TruncatedDistribution$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/TruncatedDistribution$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/TruncatedDistribution$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/TruncatedDistribution$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/TruncatedDistribution$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/TruncatedDistribution$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/learning\/TruncatedDistribution.html", "kind" : "trait"}, {"name" : "provingground.learning.TruncatedDistributionDomain", "shortDescription" : "", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/learning\/TruncatedDistributionDomain.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/learning\/TruncatedDistributionDomain.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TruncatedDistributionDomain[E]) ⇒ Boolean, msg: ⇒ Any): TruncatedDistributionDomain[E]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/TruncatedDistributionDomain.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TruncatedDistributionDomain[E]) ⇒ Boolean): TruncatedDistributionDomain[E]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/TruncatedDistributionDomain.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): TruncatedDistributionDomain[E]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/TruncatedDistributionDomain.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): TruncatedDistributionDomain[E]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/TruncatedDistributionDomain.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (TruncatedDistributionDomain[E], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/learning\/TruncatedDistributionDomain.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (TruncatedDistributionDomain[E], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/learning\/TruncatedDistributionDomain.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "domain", "tail" : "(): (TruncatedDistribution[E]) ⇒ Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionDomain.domain", "link" : "provingground\/learning\/TruncatedDistributionDomain.html#domain:provingground.learning.TruncatedDistribution[E]=>Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "l", "tail" : ": Domain[E]", "member" : "provingground.learning.TruncatedDistributionDomain.l", "link" : "provingground\/learning\/TruncatedDistributionDomain.html#l:provingground.translation.Domain[E]", "kind" : "val"}, {"member" : "provingground.learning.TruncatedDistributionDomain#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/TruncatedDistributionDomain.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/TruncatedDistributionDomain.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/TruncatedDistributionDomain.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/TruncatedDistributionDomain.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/TruncatedDistributionDomain.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/TruncatedDistributionDomain.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/TruncatedDistributionDomain.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TruncatedDistributionDomain.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TruncatedDistributionDomain.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TruncatedDistributionDomain.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/TruncatedDistributionDomain.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/TruncatedDistributionDomain.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/TruncatedDistributionDomain.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/TruncatedDistributionDomain.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/TruncatedDistributionDomain.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/TruncatedDistributionDomain.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/TruncatedDistributionDomain.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/TruncatedDistributionDomain.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/TruncatedDistributionDomain.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/learning\/TruncatedDistributionDomain.html", "kind" : "class"}, {"name" : "provingground.learning.TruncatedDistributionExprPatterns", "shortDescription" : "", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/learning\/TruncatedDistributionExprPatterns.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/learning\/TruncatedDistributionExprPatterns.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TruncatedDistributionExprPatterns[E]) ⇒ Boolean, msg: ⇒ Any): TruncatedDistributionExprPatterns[E]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/TruncatedDistributionExprPatterns.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TruncatedDistributionExprPatterns[E]) ⇒ Boolean): TruncatedDistributionExprPatterns[E]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/TruncatedDistributionExprPatterns.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): TruncatedDistributionExprPatterns[E]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/TruncatedDistributionExprPatterns.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): TruncatedDistributionExprPatterns[E]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/TruncatedDistributionExprPatterns.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (TruncatedDistributionExprPatterns[E], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/learning\/TruncatedDistributionExprPatterns.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (TruncatedDistributionExprPatterns[E], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/learning\/TruncatedDistributionExprPatterns.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "isPi", "tail" : "(): (TruncatedDistribution[E]) ⇒ Option[(TruncatedDistribution[E], TruncatedDistribution[E])]", "member" : "provingground.learning.TruncatedDistributionExprPatterns.isPi", "link" : "provingground\/learning\/TruncatedDistributionExprPatterns.html#isPi:provingground.learning.TruncatedDistribution[E]=>Option[(provingground.learning.TruncatedDistribution[E],provingground.learning.TruncatedDistribution[E])]", "kind" : "def"}, {"label" : "isSigma", "tail" : "(): (TruncatedDistribution[E]) ⇒ Option[(TruncatedDistribution[E], TruncatedDistribution[E])]", "member" : "provingground.learning.TruncatedDistributionExprPatterns.isSigma", "link" : "provingground\/learning\/TruncatedDistributionExprPatterns.html#isSigma:provingground.learning.TruncatedDistribution[E]=>Option[(provingground.learning.TruncatedDistribution[E],provingground.learning.TruncatedDistribution[E])]", "kind" : "def"}, {"label" : "isPair", "tail" : "(): (TruncatedDistribution[E]) ⇒ Option[(TruncatedDistribution[E], TruncatedDistribution[E])]", "member" : "provingground.learning.TruncatedDistributionExprPatterns.isPair", "link" : "provingground\/learning\/TruncatedDistributionExprPatterns.html#isPair:provingground.learning.TruncatedDistribution[E]=>Option[(provingground.learning.TruncatedDistribution[E],provingground.learning.TruncatedDistribution[E])]", "kind" : "def"}, {"label" : "l", "tail" : ": ExprPatterns[E]", "member" : "provingground.learning.TruncatedDistributionExprPatterns.l", "link" : "provingground\/learning\/TruncatedDistributionExprPatterns.html#l:provingground.translation.ExprPatterns[E]", "kind" : "val"}, {"member" : "provingground.learning.TruncatedDistributionExprPatterns#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/TruncatedDistributionExprPatterns.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/TruncatedDistributionExprPatterns.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/TruncatedDistributionExprPatterns.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/TruncatedDistributionExprPatterns.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/TruncatedDistributionExprPatterns.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/TruncatedDistributionExprPatterns.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/TruncatedDistributionExprPatterns.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TruncatedDistributionExprPatterns.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TruncatedDistributionExprPatterns.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TruncatedDistributionExprPatterns.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/TruncatedDistributionExprPatterns.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/TruncatedDistributionExprPatterns.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/TruncatedDistributionExprPatterns.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/TruncatedDistributionExprPatterns.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/TruncatedDistributionExprPatterns.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/TruncatedDistributionExprPatterns.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/TruncatedDistributionExprPatterns.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/TruncatedDistributionExprPatterns.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/TruncatedDistributionExprPatterns.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/learning\/TruncatedDistributionExprPatterns.html", "kind" : "class"}, {"name" : "provingground.learning.TruncatedDistributionLang", "shortDescription" : "", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/learning\/TruncatedDistributionLang.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/learning\/TruncatedDistributionLang.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TruncatedDistributionLang[E]) ⇒ Boolean, msg: ⇒ Any): TruncatedDistributionLang[E]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/TruncatedDistributionLang.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TruncatedDistributionLang[E]) ⇒ Boolean): TruncatedDistributionLang[E]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/TruncatedDistributionLang.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): TruncatedDistributionLang[E]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/TruncatedDistributionLang.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): TruncatedDistributionLang[E]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/TruncatedDistributionLang.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (TruncatedDistributionLang[E], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/learning\/TruncatedDistributionLang.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (TruncatedDistributionLang[E], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/learning\/TruncatedDistributionLang.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "numeral", "tail" : "(n: Int): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.numeral", "link" : "provingground\/learning\/TruncatedDistributionLang.html#numeral(n:Int):Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "orCases", "tail" : "(first: TruncatedDistribution[E], second: TruncatedDistribution[E]): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.orCases", "link" : "provingground\/learning\/TruncatedDistributionLang.html#orCases(first:provingground.learning.TruncatedDistribution[E],second:provingground.learning.TruncatedDistribution[E]):Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "ff", "tail" : "(): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.ff", "link" : "provingground\/learning\/TruncatedDistributionLang.html#ff:Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "qed", "tail" : "(): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.qed", "link" : "provingground\/learning\/TruncatedDistributionLang.html#qed:Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "tt", "tail" : "(): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.tt", "link" : "provingground\/learning\/TruncatedDistributionLang.html#tt:Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "incl2", "tail" : "(typ: TruncatedDistribution[E]): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.incl2", "link" : "provingground\/learning\/TruncatedDistributionLang.html#incl2(typ:provingground.learning.TruncatedDistribution[E]):Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "incl1", "tail" : "(typ: TruncatedDistribution[E]): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.incl1", "link" : "provingground\/learning\/TruncatedDistributionLang.html#incl1(typ:provingground.learning.TruncatedDistribution[E]):Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "or", "tail" : "(first: TruncatedDistribution[E], second: TruncatedDistribution[E]): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.or", "link" : "provingground\/learning\/TruncatedDistributionLang.html#or(first:provingground.learning.TruncatedDistribution[E],second:provingground.learning.TruncatedDistribution[E]):Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "proj2", "tail" : "(xy: TruncatedDistribution[E]): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.proj2", "link" : "provingground\/learning\/TruncatedDistributionLang.html#proj2(xy:provingground.learning.TruncatedDistribution[E]):Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "proj1", "tail" : "(xy: TruncatedDistribution[E]): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.proj1", "link" : "provingground\/learning\/TruncatedDistributionLang.html#proj1(xy:provingground.learning.TruncatedDistribution[E]):Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "pair", "tail" : "(x: TruncatedDistribution[E], y: TruncatedDistribution[E]): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.pair", "link" : "provingground\/learning\/TruncatedDistributionLang.html#pair(x:provingground.learning.TruncatedDistribution[E],y:provingground.learning.TruncatedDistribution[E]):Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "sigma", "tail" : "(variable: TruncatedDistribution[E], typ: TruncatedDistribution[E]): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.sigma", "link" : "provingground\/learning\/TruncatedDistributionLang.html#sigma(variable:provingground.learning.TruncatedDistribution[E],typ:provingground.learning.TruncatedDistribution[E]):Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "equality", "tail" : "(lhs: TruncatedDistribution[E], rhs: TruncatedDistribution[E]): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.equality", "link" : "provingground\/learning\/TruncatedDistributionLang.html#equality(lhs:provingground.learning.TruncatedDistribution[E],rhs:provingground.learning.TruncatedDistribution[E]):Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "appln", "tail" : "(func: TruncatedDistribution[E], arg: TruncatedDistribution[E]): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.appln", "link" : "provingground\/learning\/TruncatedDistributionLang.html#appln(func:provingground.learning.TruncatedDistribution[E],arg:provingground.learning.TruncatedDistribution[E]):Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "pi", "tail" : "(variable: TruncatedDistribution[E], typ: TruncatedDistribution[E]): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.pi", "link" : "provingground\/learning\/TruncatedDistributionLang.html#pi(variable:provingground.learning.TruncatedDistribution[E],typ:provingground.learning.TruncatedDistribution[E]):Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "lambda", "tail" : "(variable: TruncatedDistribution[E], value: TruncatedDistribution[E]): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.lambda", "link" : "provingground\/learning\/TruncatedDistributionLang.html#lambda(variable:provingground.learning.TruncatedDistribution[E],value:provingground.learning.TruncatedDistribution[E]):Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "metaVar", "tail" : "(typ: TruncatedDistribution[E]): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.metaVar", "link" : "provingground\/learning\/TruncatedDistributionLang.html#metaVar(typ:provingground.learning.TruncatedDistribution[E]):Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "anonVar", "tail" : "(typ: TruncatedDistribution[E]): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.anonVar", "link" : "provingground\/learning\/TruncatedDistributionLang.html#anonVar(typ:provingground.learning.TruncatedDistribution[E]):Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "typVariable", "tail" : "(name: S, level: Int): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.typVariable", "link" : "provingground\/learning\/TruncatedDistributionLang.html#typVariable[S](name:S,level:Int):Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "variable", "tail" : "(name: S, typ: TruncatedDistribution[E]): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.variable", "link" : "provingground\/learning\/TruncatedDistributionLang.html#variable[S](name:S,typ:provingground.learning.TruncatedDistribution[E]):Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "l", "tail" : ": ExprLang[E]", "member" : "provingground.learning.TruncatedDistributionLang.l", "link" : "provingground\/learning\/TruncatedDistributionLang.html#l:provingground.translation.ExprLang[E]", "kind" : "val"}, {"member" : "provingground.learning.TruncatedDistributionLang#<init>", "error" : "unsupported entity"}, {"label" : "applyAll", "tail" : "(funcOpt: Option[TruncatedDistribution[E]], args: Vector[TruncatedDistribution[E]]): Option[TruncatedDistribution[E]]", "member" : "provingground.translation.ExprLang.applyAll", "link" : "provingground\/learning\/TruncatedDistributionLang.html#applyAll(funcOpt:Option[E],args:Vector[E]):Option[E]", "kind" : "def"}, {"label" : "i2", "tail" : "(typ: TruncatedDistribution[E], value: TruncatedDistribution[E]): Option[TruncatedDistribution[E]]", "member" : "provingground.translation.ExprLang.i2", "link" : "provingground\/learning\/TruncatedDistributionLang.html#i2(typ:E,value:E):Option[E]", "kind" : "def"}, {"label" : "i1", "tail" : "(typ: TruncatedDistribution[E], value: TruncatedDistribution[E]): Option[TruncatedDistribution[E]]", "member" : "provingground.translation.ExprLang.i1", "link" : "provingground\/learning\/TruncatedDistributionLang.html#i1(typ:E,value:E):Option[E]", "kind" : "def"}, {"label" : "funcTyp", "tail" : "(dom: TruncatedDistribution[E], codom: TruncatedDistribution[E]): Option[TruncatedDistribution[E]]", "member" : "provingground.translation.ExprLang.funcTyp", "link" : "provingground\/learning\/TruncatedDistributionLang.html#funcTyp(dom:E,codom:E):Option[E]", "kind" : "def"}, {"label" : "pairTyp", "tail" : "(first: TruncatedDistribution[E], second: TruncatedDistribution[E]): Option[TruncatedDistribution[E]]", "member" : "provingground.translation.ExprLang.pairTyp", "link" : "provingground\/learning\/TruncatedDistributionLang.html#pairTyp(first:E,second:E):Option[E]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/TruncatedDistributionLang.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/TruncatedDistributionLang.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/TruncatedDistributionLang.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/TruncatedDistributionLang.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/TruncatedDistributionLang.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/TruncatedDistributionLang.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/TruncatedDistributionLang.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TruncatedDistributionLang.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TruncatedDistributionLang.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TruncatedDistributionLang.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/TruncatedDistributionLang.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/TruncatedDistributionLang.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/TruncatedDistributionLang.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/TruncatedDistributionLang.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/TruncatedDistributionLang.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/TruncatedDistributionLang.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/TruncatedDistributionLang.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/TruncatedDistributionLang.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/TruncatedDistributionLang.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/learning\/TruncatedDistributionLang.html", "kind" : "class"}, {"name" : "provingground.learning.TruncDistVal", "shortDescription" : "", "object" : "provingground\/learning\/TruncDistVal$.html", "members_object" : [{"label" : "bigSum", "tail" : "(tds: ⇒ Vector[TruncDistVal[A]]): TruncDistVal[A]", "member" : "provingground.learning.TruncDistVal.bigSum", "link" : "provingground\/learning\/TruncDistVal$.html#bigSum[A](tds:=>Vector[provingground.learning.TruncDistVal[A]]):provingground.learning.TruncDistVal[A]", "kind" : "def"}, {"label" : "atom", "tail" : "(a: A): TruncDistVal[A]", "member" : "provingground.learning.TruncDistVal.atom", "link" : "provingground\/learning\/TruncDistVal$.html#atom[A](a:A):provingground.learning.TruncDistVal[A]", "kind" : "def"}, {"label" : "Empty", "tail" : "(): TruncDistVal[A]", "member" : "provingground.learning.TruncDistVal.Empty", "link" : "provingground\/learning\/TruncDistVal$.html#Empty[A]:provingground.learning.TruncDistVal[A]", "kind" : "def"}, {"label" : "FD", "tail" : "(fd: FiniteDistribution[A]): TruncDistVal[A]", "member" : "provingground.learning.TruncDistVal.FD", "link" : "provingground\/learning\/TruncDistVal$.html#FD[A](fd:provingground.FiniteDistribution[A]):provingground.learning.TruncDistVal[A]", "kind" : "def"}, {"label" : "sum", "tail" : "(first: ⇒ TruncDistVal[A], second: ⇒ TruncDistVal[A]): TruncDistVal[A]", "member" : "provingground.learning.TruncDistVal.sum", "link" : "provingground\/learning\/TruncDistVal$.html#sum[A](first:=>provingground.learning.TruncDistVal[A],second:=>provingground.learning.TruncDistVal[A]):provingground.learning.TruncDistVal[A]", "kind" : "def"}, {"label" : "scaled", "tail" : "(td: TruncDistVal[A], scale: Double): TruncDistVal[A]", "member" : "provingground.learning.TruncDistVal.scaled", "link" : "provingground\/learning\/TruncDistVal$.html#scaled[A](td:provingground.learning.TruncDistVal[A],scale:Double):provingground.learning.TruncDistVal[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/TruncDistVal$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/TruncDistVal$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/TruncDistVal$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/TruncDistVal$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/TruncDistVal$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/TruncDistVal$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/TruncDistVal$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TruncDistVal$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TruncDistVal$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TruncDistVal$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/TruncDistVal$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/TruncDistVal$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/TruncDistVal$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/TruncDistVal$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/TruncDistVal$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/TruncDistVal$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/TruncDistVal$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/TruncDistVal$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/TruncDistVal$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/learning\/TruncDistVal.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/learning\/TruncDistVal.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TruncDistVal[A]) ⇒ Boolean, msg: ⇒ Any): TruncDistVal[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/TruncDistVal.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TruncDistVal[A]) ⇒ Boolean): TruncDistVal[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/TruncDistVal.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): TruncDistVal[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/TruncDistVal.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): TruncDistVal[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/TruncDistVal.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (TruncDistVal[A], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/learning\/TruncDistVal.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (TruncDistVal[A], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/learning\/TruncDistVal.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (A) ⇒ TruncDistVal[B]): TruncDistVal[B]", "member" : "provingground.learning.TruncDistVal.flatMap", "link" : "provingground\/learning\/TruncDistVal.html#flatMap[B](f:A=>provingground.learning.TruncDistVal[B]):provingground.learning.TruncDistVal[B]", "kind" : "def"}, {"label" : "filter", "tail" : "(p: (A) ⇒ Boolean): TruncDistVal[A]", "member" : "provingground.learning.TruncDistVal.filter", "link" : "provingground\/learning\/TruncDistVal.html#filter(p:A=>Boolean):provingground.learning.TruncDistVal[A]", "kind" : "def"}, {"label" : "<+>", "tail" : "(that: ⇒ TruncDistVal[A]): TruncDistVal[A]", "member" : "provingground.learning.TruncDistVal.<+>", "link" : "provingground\/learning\/TruncDistVal.html#<+>(that:=>provingground.learning.TruncDistVal[A]):provingground.learning.TruncDistVal[A]", "kind" : "def"}, {"label" : "<*>", "tail" : "(scale: Double): TruncDistVal[A]", "member" : "provingground.learning.TruncDistVal.<*>", "link" : "provingground\/learning\/TruncDistVal.html#<*>(scale:Double):provingground.learning.TruncDistVal[A]", "kind" : "def"}, {"member" : "provingground.learning.TruncDistVal#<init>", "error" : "unsupported entity"}, {"label" : "getFD", "tail" : ": (Double) ⇒ Option[FiniteDistribution[A]]", "member" : "provingground.learning.TruncDistVal.getFD", "link" : "provingground\/learning\/TruncDistVal.html#getFD:Double=>Option[provingground.FiniteDistribution[A]]", "kind" : "val"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "provingground\/learning\/TruncDistVal.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "provingground\/learning\/TruncDistVal.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/TruncDistVal.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/TruncDistVal.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "provingground\/learning\/TruncDistVal.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "provingground\/learning\/TruncDistVal.html#==(x$1:Any):Boolean", "kind" : "final def"}], "case class" : "provingground\/learning\/TruncDistVal.html", "kind" : "case class"}, {"name" : "provingground.learning.Unify", "shortDescription" : "", "object" : "provingground\/learning\/Unify$.html", "members_object" : [{"label" : "purgedInvVector", "tail" : "(invVector: Vector[(Term, Set[(Term, Term)])], accum: Vector[(Term, Set[(Term, Term)])], freeVars: (Term) ⇒ Boolean): Vector[(Term, Set[(Term, Term)])]", "member" : "provingground.learning.Unify.purgedInvVector", "link" : "provingground\/learning\/Unify$.html#purgedInvVector(invVector:Vector[(provingground.HoTT.Term,Set[(provingground.HoTT.Term,provingground.HoTT.Term)])],accum:Vector[(provingground.HoTT.Term,Set[(provingground.HoTT.Term,provingground.HoTT.Term)])],freeVars:provingground.HoTT.Term=>Boolean):Vector[(provingground.HoTT.Term,Set[(provingground.HoTT.Term,provingground.HoTT.Term)])]", "kind" : "def"}, {"label" : "purgedPairs", "tail" : "(fxs: Set[(Term, Term)]): Set[(Term, Term)]", "member" : "provingground.learning.Unify.purgedPairs", "link" : "provingground\/learning\/Unify$.html#purgedPairs(fxs:Set[(provingground.HoTT.Term,provingground.HoTT.Term)]):scala.collection.immutable.Set[(provingground.HoTT.Term,provingground.HoTT.Term)]", "kind" : "def"}, {"label" : "purgedPairsList", "tail" : "(fxs: List[(Term, Term)], accum: List[(Term, Term)]): List[(Term, Term)]", "member" : "provingground.learning.Unify.purgedPairsList", "link" : "provingground\/learning\/Unify$.html#purgedPairsList(fxs:List[(provingground.HoTT.Term,provingground.HoTT.Term)],accum:List[(provingground.HoTT.Term,provingground.HoTT.Term)]):List[(provingground.HoTT.Term,provingground.HoTT.Term)]", "kind" : "def"}, {"label" : "purgeVector", "tail" : "(r2: Term, inv2: Set[(Term, Term)], invVector: Vector[(Term, Set[(Term, Term)])], freeVars: (Term) ⇒ Boolean): (Term, Set[(Term, Term)])", "member" : "provingground.learning.Unify.purgeVector", "link" : "provingground\/learning\/Unify$.html#purgeVector(r2:provingground.HoTT.Term,inv2:Set[(provingground.HoTT.Term,provingground.HoTT.Term)],invVector:Vector[(provingground.HoTT.Term,Set[(provingground.HoTT.Term,provingground.HoTT.Term)])],freeVars:provingground.HoTT.Term=>Boolean):(provingground.HoTT.Term,Set[(provingground.HoTT.Term,provingground.HoTT.Term)])", "kind" : "def"}, {"label" : "purgeInv", "tail" : "(r1: Term, inv1: Set[(Term, Term)], r2: Term, inv2: Set[(Term, Term)], freeVars: (Term) ⇒ Boolean): Set[(Term, Term)]", "member" : "provingground.learning.Unify.purgeInv", "link" : "provingground\/learning\/Unify$.html#purgeInv(r1:provingground.HoTT.Term,inv1:Set[(provingground.HoTT.Term,provingground.HoTT.Term)],r2:provingground.HoTT.Term,inv2:Set[(provingground.HoTT.Term,provingground.HoTT.Term)],freeVars:provingground.HoTT.Term=>Boolean):scala.collection.immutable.Set[(provingground.HoTT.Term,provingground.HoTT.Term)]", "kind" : "def"}, {"label" : "appln", "tail" : "(func: Term, arg: Term, freeVars: Vector[Term]): Option[Term]", "member" : "provingground.learning.Unify.appln", "link" : "provingground\/learning\/Unify$.html#appln(func:provingground.HoTT.Term,arg:provingground.HoTT.Term,freeVars:Vector[provingground.HoTT.Term]):Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "unifApply", "tail" : "(func: Term, arg: Term, freeVars: Vector[Term]): Option[Term]", "member" : "provingground.learning.Unify.unifApply", "link" : "provingground\/learning\/Unify$.html#unifApply(func:provingground.HoTT.Term,arg:provingground.HoTT.Term,freeVars:Vector[provingground.HoTT.Term]):Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "subsApply", "tail" : "(func: Term, arg: Term, unifMap: Map[Term, Term], freeVars: Vector[Term]): Option[Term]", "member" : "provingground.learning.Unify.subsApply", "link" : "provingground\/learning\/Unify$.html#subsApply(func:provingground.HoTT.Term,arg:provingground.HoTT.Term,unifMap:Map[provingground.HoTT.Term,provingground.HoTT.Term],freeVars:Vector[provingground.HoTT.Term]):Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "unify", "tail" : "(lhs: Term, rhs: Term, freevars: (Term) ⇒ Boolean): Option[Map[Term, Term]]", "member" : "provingground.learning.Unify.unify", "link" : "provingground\/learning\/Unify$.html#unify(lhs:provingground.HoTT.Term,rhs:provingground.HoTT.Term,freevars:provingground.HoTT.Term=>Boolean):Option[Map[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "unifyAll", "tail" : "(freeVars: (Term) ⇒ Boolean)(xys: (Term, Term)*): Option[Map[Term, Term]]", "member" : "provingground.learning.Unify.unifyAll", "link" : "provingground\/learning\/Unify$.html#unifyAll(freeVars:provingground.HoTT.Term=>Boolean)(xys:(provingground.HoTT.Term,provingground.HoTT.Term)*):Option[Map[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "unifyVector", "tail" : "(xys: Vector[(Term, Term)], freeVars: (Term) ⇒ Boolean): Option[Map[Term, Term]]", "member" : "provingground.learning.Unify.unifyVector", "link" : "provingground\/learning\/Unify$.html#unifyVector(xys:Vector[(provingground.HoTT.Term,provingground.HoTT.Term)],freeVars:provingground.HoTT.Term=>Boolean):Option[Map[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "mergeAll", "tail" : "(xs: Option[Map[U, V]]*): Option[Map[U, V]]", "member" : "provingground.learning.Unify.mergeAll", "link" : "provingground\/learning\/Unify$.html#mergeAll[U,V](xs:Option[Map[U,V]]*):Option[Map[U,V]]", "kind" : "def"}, {"label" : "mergeOptMaps", "tail" : "(x: Option[Map[U, V]], y: Option[Map[U, V]]): Option[Map[U, V]]", "member" : "provingground.learning.Unify.mergeOptMaps", "link" : "provingground\/learning\/Unify$.html#mergeOptMaps[U,V](x:Option[Map[U,V]],y:Option[Map[U,V]]):Option[Map[U,V]]", "kind" : "def"}, {"label" : "mergeMaps", "tail" : "(x: Map[U, V], y: Map[U, V]): Option[Map[U, V]]", "member" : "provingground.learning.Unify.mergeMaps", "link" : "provingground\/learning\/Unify$.html#mergeMaps[U,V](x:Map[U,V],y:Map[U,V]):Option[Map[U,V]]", "kind" : "def"}, {"label" : "dependsOn", "tail" : "(term: Term): (Vector[Term]) ⇒ Boolean", "member" : "provingground.learning.Unify.dependsOn", "link" : "provingground\/learning\/Unify$.html#dependsOn(term:provingground.HoTT.Term):Vector[provingground.HoTT.Term]=>Boolean", "kind" : "def"}, {"label" : "multisub", "tail" : "(x: U, m: Map[Term, Term]): U", "member" : "provingground.learning.Unify.multisub", "link" : "provingground\/learning\/Unify$.html#multisub[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](x:U,m:Map[provingground.HoTT.Term,provingground.HoTT.Term]):U", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/Unify$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/Unify$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/Unify$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/Unify$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/Unify$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/Unify$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/Unify$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/Unify$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/Unify$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/Unify$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/Unify$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/Unify$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/Unify$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/Unify$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/Unify$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/Unify$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/Unify$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/Unify$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/Unify$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.learning.VectorRepresentations", "shortDescription" : "", "object" : "provingground\/learning\/VectorRepresentations$.html", "members_object" : [{"label" : "VecRepVec", "tail" : "(): LinearStructure[Representation[T]]", "member" : "provingground.learning.VectorRepresentations.VecRepVec", "link" : "provingground\/learning\/VectorRepresentations$.html#VecRepVec[T]:provingground.LinearStructure[provingground.learning.VectorRepresentations.Representation[T]]", "kind" : "implicit def"}, {"label" : "Representation", "tail" : "", "member" : "provingground.learning.VectorRepresentations.Representation", "link" : "provingground\/learning\/VectorRepresentations$.html#Representation", "kind" : "object"}, {"label" : "Representation", "tail" : "", "member" : "provingground.learning.VectorRepresentations.Representation", "link" : "provingground\/learning\/VectorRepresentations$.html#Representation[T]extendsAnyValwithProductwithSerializable", "kind" : "final case class"}, {"label" : "rand", "tail" : ": Random", "member" : "provingground.learning.VectorRepresentations.rand", "link" : "provingground\/learning\/VectorRepresentations$.html#rand:scala.util.Random", "kind" : "lazy val"}, {"label" : "randomVec", "tail" : "(length: Int, damp: Double): Vector[Double]", "member" : "provingground.learning.VectorRepresentations.randomVec", "link" : "provingground\/learning\/VectorRepresentations$.html#randomVec(length:Int,damp:Double):scala.collection.immutable.Vector[Double]", "kind" : "def"}, {"label" : "WeightVect", "tail" : "", "member" : "provingground.learning.VectorRepresentations.WeightVect", "link" : "provingground\/learning\/VectorRepresentations$.html#WeightVect", "kind" : "object"}, {"label" : "WeightVect", "tail" : "", "member" : "provingground.learning.VectorRepresentations.WeightVect", "link" : "provingground\/learning\/VectorRepresentations$.html#WeightVect[T]extendsProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/VectorRepresentations$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/VectorRepresentations$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/VectorRepresentations$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/VectorRepresentations$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/VectorRepresentations$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/VectorRepresentations$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/VectorRepresentations$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/VectorRepresentations$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/VectorRepresentations$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/VectorRepresentations$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/VectorRepresentations$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/VectorRepresentations$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/VectorRepresentations$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/VectorRepresentations$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/VectorRepresentations$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/VectorRepresentations$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/VectorRepresentations$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/VectorRepresentations$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/VectorRepresentations$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.learning.WeightedTermBucket", "shortDescription" : "", "object" : "provingground\/learning\/WeightedTermBucket$.html", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/learning\/WeightedTermBucket.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/learning\/WeightedTermBucket.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (WeightedTermBucket) ⇒ Boolean, msg: ⇒ Any): WeightedTermBucket", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/WeightedTermBucket.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (WeightedTermBucket) ⇒ Boolean): WeightedTermBucket", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/WeightedTermBucket.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): WeightedTermBucket", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/WeightedTermBucket.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): WeightedTermBucket", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/learning\/WeightedTermBucket.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (WeightedTermBucket, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/learning\/WeightedTermBucket.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (WeightedTermBucket, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/learning\/WeightedTermBucket.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "typDist", "tail" : "(): FiniteDistribution[Typ[Term]]", "member" : "provingground.learning.WeightedTermBucket.typDist", "link" : "provingground\/learning\/WeightedTermBucket.html#typDist:provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "termTypDist", "tail" : "(): FiniteDistribution[Typ[Term]]", "member" : "provingground.learning.WeightedTermBucket.termTypDist", "link" : "provingground\/learning\/WeightedTermBucket.html#termTypDist:provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "termDistMap", "tail" : "(): Map[Typ[Term], FiniteDistribution[Term]]", "member" : "provingground.learning.WeightedTermBucket.termDistMap", "link" : "provingground\/learning\/WeightedTermBucket.html#termDistMap:scala.collection.immutable.Map[provingground.HoTT.Typ[provingground.HoTT.Term],provingground.FiniteDistribution[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "append", "tail" : "(t: Weighted[Term]): Unit", "member" : "provingground.learning.WeightedTermBucket.append", "link" : "provingground\/learning\/WeightedTermBucket.html#append(t:provingground.Weighted[provingground.HoTT.Term]):Unit", "kind" : "def"}, {"label" : "types", "tail" : ": Map[Typ[Term], Double]", "member" : "provingground.learning.WeightedTermBucket.types", "link" : "provingground\/learning\/WeightedTermBucket.html#types:scala.collection.mutable.Map[provingground.HoTT.Typ[provingground.HoTT.Term],Double]", "kind" : "val"}, {"label" : "termTypes", "tail" : ": Map[Typ[Term], Double]", "member" : "provingground.learning.WeightedTermBucket.termTypes", "link" : "provingground\/learning\/WeightedTermBucket.html#termTypes:scala.collection.mutable.Map[provingground.HoTT.Typ[provingground.HoTT.Term],Double]", "kind" : "val"}, {"label" : "terms", "tail" : ": Map[Typ[Term], Vector[Weighted[Term]]]", "member" : "provingground.learning.WeightedTermBucket.terms", "link" : "provingground\/learning\/WeightedTermBucket.html#terms:scala.collection.mutable.Map[provingground.HoTT.Typ[provingground.HoTT.Term],Vector[provingground.Weighted[provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "tot", "tail" : ": Double", "member" : "provingground.learning.WeightedTermBucket.tot", "link" : "provingground\/learning\/WeightedTermBucket.html#tot:Double", "kind" : "var"}, {"member" : "provingground.learning.WeightedTermBucket#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/WeightedTermBucket.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/WeightedTermBucket.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/WeightedTermBucket.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/WeightedTermBucket.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/WeightedTermBucket.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/WeightedTermBucket.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/WeightedTermBucket.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/WeightedTermBucket.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/WeightedTermBucket.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/WeightedTermBucket.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/WeightedTermBucket.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/WeightedTermBucket.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/WeightedTermBucket.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/WeightedTermBucket.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/WeightedTermBucket.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/WeightedTermBucket.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/WeightedTermBucket.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/WeightedTermBucket.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/WeightedTermBucket.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "fdMap", "tail" : "(m: Map[A, Vector[Weighted[Term]]], tot: Double): Map[A, FiniteDistribution[Term]]", "member" : "provingground.learning.WeightedTermBucket.fdMap", "link" : "provingground\/learning\/WeightedTermBucket$.html#fdMap[A](m:scala.collection.mutable.Map[A,Vector[provingground.Weighted[provingground.HoTT.Term]]],tot:Double):scala.collection.immutable.Map[A,provingground.FiniteDistribution[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "fd", "tail" : "(m: Map[Typ[Term], Double], tot: Double): FiniteDistribution[Typ[Term]]", "member" : "provingground.learning.WeightedTermBucket.fd", "link" : "provingground\/learning\/WeightedTermBucket$.html#fd(m:scala.collection.mutable.Map[provingground.HoTT.Typ[provingground.HoTT.Term],Double],tot:Double):provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/WeightedTermBucket$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/WeightedTermBucket$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/WeightedTermBucket$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/WeightedTermBucket$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/WeightedTermBucket$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/WeightedTermBucket$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/WeightedTermBucket$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/WeightedTermBucket$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/WeightedTermBucket$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/WeightedTermBucket$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/WeightedTermBucket$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/WeightedTermBucket$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/WeightedTermBucket$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/WeightedTermBucket$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/WeightedTermBucket$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/WeightedTermBucket$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/WeightedTermBucket$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/WeightedTermBucket$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/WeightedTermBucket$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/learning\/WeightedTermBucket.html", "kind" : "class"}], "provingground.andrewscurtis" : [{"name" : "provingground.andrewscurtis.ACElem", "shortDescription" : "An element in the Andrews-Curtis evolution,namely:* actor name,* number of loops,* rank* associated presentation* weight in distribution", "object" : "provingground\/andrewscurtis\/ACElem$.html", "members_object" : [{"label" : "fromSnap", "tail" : ": (Snap) ⇒ Vector[ACElem]", "member" : "provingground.andrewscurtis.ACElem.fromSnap", "link" : "provingground\/andrewscurtis\/ACElem$.html#fromSnap:provingground.andrewscurtis.ACElem.Snap=>scala.collection.immutable.Vector[provingground.andrewscurtis.ACElem]", "kind" : "val"}, {"label" : "toPresentation", "tail" : "(rank: Int, fdV: FiniteDistribution[Moves]): FiniteDistribution[Presentation]", "member" : "provingground.andrewscurtis.ACElem.toPresentation", "link" : "provingground\/andrewscurtis\/ACElem$.html#toPresentation(rank:Int,fdV:provingground.FiniteDistribution[provingground.andrewscurtis.Moves]):provingground.FiniteDistribution[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "Snap", "tail" : "", "member" : "provingground.andrewscurtis.ACElem.Snap", "link" : "provingground\/andrewscurtis\/ACElem$.html#Snap=provingground.learning.SnapShot[(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves]),provingground.andrewscurtis.Param]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/ACElem$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/ACElem$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/ACElem$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/ACElem$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/ACElem$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/ACElem$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/ACElem$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACElem$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACElem$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACElem$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/ACElem$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/ACElem$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/andrewscurtis\/ACElem$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/ACElem$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/ACElem$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/ACElem$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/ACElem$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/ACElem$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/ACElem$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/andrewscurtis\/ACElem.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/andrewscurtis\/ACElem.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ACElem) ⇒ Boolean, msg: ⇒ Any): ACElem", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/ACElem.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ACElem) ⇒ Boolean): ACElem", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/ACElem.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): ACElem", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/ACElem.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ACElem", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/ACElem.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ACElem, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/andrewscurtis\/ACElem.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ACElem, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/andrewscurtis\/ACElem.html#->[B](y:B):(A,B)", "kind" : "def"}, {"member" : "provingground.andrewscurtis.ACElem#<init>", "error" : "unsupported entity"}, {"label" : "loops", "tail" : ": Int", "member" : "provingground.andrewscurtis.ACElem.loops", "link" : "provingground\/andrewscurtis\/ACElem.html#loops:Int", "kind" : "val"}, {"label" : "weight", "tail" : ": Double", "member" : "provingground.andrewscurtis.ACElem.weight", "link" : "provingground\/andrewscurtis\/ACElem.html#weight:Double", "kind" : "val"}, {"label" : "pres", "tail" : ": Presentation", "member" : "provingground.andrewscurtis.ACElem.pres", "link" : "provingground\/andrewscurtis\/ACElem.html#pres:provingground.andrewscurtis.FreeGroups.Presentation", "kind" : "val"}, {"label" : "rank", "tail" : ": Int", "member" : "provingground.andrewscurtis.ACElem.rank", "link" : "provingground\/andrewscurtis\/ACElem.html#rank:Int", "kind" : "val"}, {"label" : "moves", "tail" : ": Moves", "member" : "provingground.andrewscurtis.ACElem.moves", "link" : "provingground\/andrewscurtis\/ACElem.html#moves:provingground.andrewscurtis.Moves", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "provingground.andrewscurtis.ACElem.name", "link" : "provingground\/andrewscurtis\/ACElem.html#name:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/ACElem.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/ACElem.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/ACElem.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/ACElem.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/ACElem.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/ACElem.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/ACElem.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACElem.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACElem.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACElem.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/ACElem.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/ACElem.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/ACElem.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/ACElem.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/ACElem.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/ACElem.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/andrewscurtis\/ACElem.html", "kind" : "case class"}, {"name" : "provingground.andrewscurtis.ACPortableResults", "shortDescription" : "", "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/andrewscurtis\/ACPortableResults.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/andrewscurtis\/ACPortableResults.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ACPortableResults) ⇒ Boolean, msg: ⇒ Any): ACPortableResults", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/ACPortableResults.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ACPortableResults) ⇒ Boolean): ACPortableResults", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/ACPortableResults.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): ACPortableResults", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/ACPortableResults.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ACPortableResults", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/ACPortableResults.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ACPortableResults, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/andrewscurtis\/ACPortableResults.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ACPortableResults, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/andrewscurtis\/ACPortableResults.html#->[B](y:B):(A,B)", "kind" : "def"}, {"member" : "provingground.andrewscurtis.ACPortableResults#<init>", "error" : "unsupported entity"}, {"label" : "paths", "tail" : ": Map[String, Stream[(FiniteDistribution[AtomicMove], FiniteDistribution[Moves])]]", "member" : "provingground.andrewscurtis.ACPortableResults.paths", "link" : "provingground\/andrewscurtis\/ACPortableResults.html#paths:Map[String,Stream[(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves])]]", "kind" : "val"}, {"label" : "states", "tail" : ": Map[String, (FiniteDistribution[AtomicMove], FiniteDistribution[Moves])]", "member" : "provingground.andrewscurtis.ACresults.states", "link" : "provingground\/andrewscurtis\/ACPortableResults.html#states:Map[String,(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves])]", "kind" : "lazy val"}, {"label" : "sizes", "tail" : "(): Map[String, Int]", "member" : "provingground.andrewscurtis.ACresults.sizes", "link" : "provingground\/andrewscurtis\/ACPortableResults.html#sizes:scala.collection.immutable.Map[String,Int]", "kind" : "def"}, {"label" : "probVec", "tail" : "(name: String, rank: Int)(p: Presentation): Stream[Double]", "member" : "provingground.andrewscurtis.ACresults.probVec", "link" : "provingground\/andrewscurtis\/ACPortableResults.html#probVec(name:String,rank:Int)(p:provingground.andrewscurtis.FreeGroups.Presentation):scala.collection.immutable.Stream[Double]", "kind" : "def"}, {"label" : "thmSupp", "tail" : "(name: String, rank: Int): Vector[Presentation]", "member" : "provingground.andrewscurtis.ACresults.thmSupp", "link" : "provingground\/andrewscurtis\/ACPortableResults.html#thmSupp(name:String,rank:Int):Vector[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "thmVec", "tail" : "(name: String, rank: Int): Stream[FiniteDistribution[Presentation]]", "member" : "provingground.andrewscurtis.ACresults.thmVec", "link" : "provingground\/andrewscurtis\/ACPortableResults.html#thmVec(name:String,rank:Int):scala.collection.immutable.Stream[provingground.FiniteDistribution[provingground.andrewscurtis.FreeGroups.Presentation]]", "kind" : "def"}, {"label" : "names", "tail" : "(): List[String]", "member" : "provingground.andrewscurtis.ACresults.names", "link" : "provingground\/andrewscurtis\/ACPortableResults.html#names:List[String]", "kind" : "def"}, {"label" : "thms", "tail" : "(rank: Int): FiniteDistribution[Presentation]", "member" : "provingground.andrewscurtis.ACStates.thms", "link" : "provingground\/andrewscurtis\/ACPortableResults.html#thms(rank:Int):provingground.FiniteDistribution[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "moveWeights", "tail" : "(): FiniteDistribution[AtomicMove]", "member" : "provingground.andrewscurtis.ACStates.moveWeights", "link" : "provingground\/andrewscurtis\/ACPortableResults.html#moveWeights:provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove]", "kind" : "def"}, {"label" : "proofs", "tail" : "(): FiniteDistribution[Moves]", "member" : "provingground.andrewscurtis.ACStates.proofs", "link" : "provingground\/andrewscurtis\/ACPortableResults.html#proofs:provingground.FiniteDistribution[provingground.andrewscurtis.Moves]", "kind" : "def"}, {"label" : "blended", "tail" : "(): (FiniteDistribution[AtomicMove], FiniteDistribution[Moves])", "member" : "provingground.andrewscurtis.ACStates.blended", "link" : "provingground\/andrewscurtis\/ACPortableResults.html#blended:(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves])", "kind" : "def"}, {"label" : "combined", "tail" : "(): (FiniteDistribution[AtomicMove], FiniteDistribution[Moves])", "member" : "provingground.andrewscurtis.ACStates.combined", "link" : "provingground\/andrewscurtis\/ACPortableResults.html#combined:(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves])", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/ACPortableResults.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/ACPortableResults.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/ACPortableResults.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/ACPortableResults.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/ACPortableResults.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/ACPortableResults.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/ACPortableResults.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACPortableResults.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACPortableResults.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACPortableResults.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/ACPortableResults.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/ACPortableResults.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/ACPortableResults.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/ACPortableResults.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/ACPortableResults.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/ACPortableResults.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/andrewscurtis\/ACPortableResults.html", "kind" : "case class"}, {"name" : "provingground.andrewscurtis.ACresults", "shortDescription" : "", "object" : "provingground\/andrewscurtis\/ACresults$.html", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/andrewscurtis\/ACresults.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/andrewscurtis\/ACresults.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ACresults) ⇒ Boolean, msg: ⇒ Any): ACresults", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/ACresults.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ACresults) ⇒ Boolean): ACresults", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/ACresults.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): ACresults", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/ACresults.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ACresults", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/ACresults.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ACresults, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/andrewscurtis\/ACresults.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ACresults, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/andrewscurtis\/ACresults.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "states", "tail" : ": Map[String, (FiniteDistribution[AtomicMove], FiniteDistribution[Moves])]", "member" : "provingground.andrewscurtis.ACresults.states", "link" : "provingground\/andrewscurtis\/ACresults.html#states:Map[String,(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves])]", "kind" : "lazy val"}, {"label" : "sizes", "tail" : "(): Map[String, Int]", "member" : "provingground.andrewscurtis.ACresults.sizes", "link" : "provingground\/andrewscurtis\/ACresults.html#sizes:scala.collection.immutable.Map[String,Int]", "kind" : "def"}, {"label" : "probVec", "tail" : "(name: String, rank: Int)(p: Presentation): Stream[Double]", "member" : "provingground.andrewscurtis.ACresults.probVec", "link" : "provingground\/andrewscurtis\/ACresults.html#probVec(name:String,rank:Int)(p:provingground.andrewscurtis.FreeGroups.Presentation):scala.collection.immutable.Stream[Double]", "kind" : "def"}, {"label" : "thmSupp", "tail" : "(name: String, rank: Int): Vector[Presentation]", "member" : "provingground.andrewscurtis.ACresults.thmSupp", "link" : "provingground\/andrewscurtis\/ACresults.html#thmSupp(name:String,rank:Int):Vector[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "thmVec", "tail" : "(name: String, rank: Int): Stream[FiniteDistribution[Presentation]]", "member" : "provingground.andrewscurtis.ACresults.thmVec", "link" : "provingground\/andrewscurtis\/ACresults.html#thmVec(name:String,rank:Int):scala.collection.immutable.Stream[provingground.FiniteDistribution[provingground.andrewscurtis.FreeGroups.Presentation]]", "kind" : "def"}, {"label" : "names", "tail" : "(): List[String]", "member" : "provingground.andrewscurtis.ACresults.names", "link" : "provingground\/andrewscurtis\/ACresults.html#names:List[String]", "kind" : "def"}, {"member" : "provingground.andrewscurtis.ACresults#<init>", "error" : "unsupported entity"}, {"label" : "thms", "tail" : "(rank: Int): FiniteDistribution[Presentation]", "member" : "provingground.andrewscurtis.ACStates.thms", "link" : "provingground\/andrewscurtis\/ACresults.html#thms(rank:Int):provingground.FiniteDistribution[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "moveWeights", "tail" : "(): FiniteDistribution[AtomicMove]", "member" : "provingground.andrewscurtis.ACStates.moveWeights", "link" : "provingground\/andrewscurtis\/ACresults.html#moveWeights:provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove]", "kind" : "def"}, {"label" : "proofs", "tail" : "(): FiniteDistribution[Moves]", "member" : "provingground.andrewscurtis.ACStates.proofs", "link" : "provingground\/andrewscurtis\/ACresults.html#proofs:provingground.FiniteDistribution[provingground.andrewscurtis.Moves]", "kind" : "def"}, {"label" : "blended", "tail" : "(): (FiniteDistribution[AtomicMove], FiniteDistribution[Moves])", "member" : "provingground.andrewscurtis.ACStates.blended", "link" : "provingground\/andrewscurtis\/ACresults.html#blended:(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves])", "kind" : "def"}, {"label" : "combined", "tail" : "(): (FiniteDistribution[AtomicMove], FiniteDistribution[Moves])", "member" : "provingground.andrewscurtis.ACStates.combined", "link" : "provingground\/andrewscurtis\/ACresults.html#combined:(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves])", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/ACresults.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/ACresults.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/ACresults.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/ACresults.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/ACresults.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/ACresults.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/ACresults.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACresults.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACresults.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACresults.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/ACresults.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/ACresults.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/andrewscurtis\/ACresults.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/ACresults.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/ACresults.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/ACresults.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/ACresults.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/ACresults.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/ACresults.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/ACresults$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/ACresults$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/ACresults$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/ACresults$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/ACresults$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/ACresults$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/ACresults$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACresults$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACresults$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACresults$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/ACresults$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/ACresults$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/andrewscurtis\/ACresults$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/ACresults$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/ACresults$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/ACresults$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/ACresults$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/ACresults$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/ACresults$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/andrewscurtis\/ACresults.html", "kind" : "class"}, {"name" : "provingground.andrewscurtis.ACStates", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/andrewscurtis\/ACStates.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/andrewscurtis\/ACStates.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ACStates) ⇒ Boolean, msg: ⇒ Any): ACStates", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/ACStates.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ACStates) ⇒ Boolean): ACStates", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/ACStates.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): ACStates", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/ACStates.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ACStates", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/ACStates.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ACStates, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/andrewscurtis\/ACStates.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ACStates, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/andrewscurtis\/ACStates.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "thms", "tail" : "(rank: Int): FiniteDistribution[Presentation]", "member" : "provingground.andrewscurtis.ACStates.thms", "link" : "provingground\/andrewscurtis\/ACStates.html#thms(rank:Int):provingground.FiniteDistribution[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "moveWeights", "tail" : "(): FiniteDistribution[AtomicMove]", "member" : "provingground.andrewscurtis.ACStates.moveWeights", "link" : "provingground\/andrewscurtis\/ACStates.html#moveWeights:provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove]", "kind" : "def"}, {"label" : "proofs", "tail" : "(): FiniteDistribution[Moves]", "member" : "provingground.andrewscurtis.ACStates.proofs", "link" : "provingground\/andrewscurtis\/ACStates.html#proofs:provingground.FiniteDistribution[provingground.andrewscurtis.Moves]", "kind" : "def"}, {"label" : "blended", "tail" : "(): (FiniteDistribution[AtomicMove], FiniteDistribution[Moves])", "member" : "provingground.andrewscurtis.ACStates.blended", "link" : "provingground\/andrewscurtis\/ACStates.html#blended:(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves])", "kind" : "def"}, {"label" : "combined", "tail" : "(): (FiniteDistribution[AtomicMove], FiniteDistribution[Moves])", "member" : "provingground.andrewscurtis.ACStates.combined", "link" : "provingground\/andrewscurtis\/ACStates.html#combined:(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves])", "kind" : "def"}, {"label" : "names", "tail" : "(): List[String]", "member" : "provingground.andrewscurtis.ACStates.names", "link" : "provingground\/andrewscurtis\/ACStates.html#names:List[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/ACStates.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/ACStates.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/ACStates.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/ACStates.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/ACStates.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/ACStates.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/ACStates.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACStates.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACStates.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACStates.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/ACStates.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/ACStates.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/andrewscurtis\/ACStates.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/ACStates.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/ACStates.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/ACStates.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/ACStates.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/ACStates.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/ACStates.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "states", "tail" : ": Map[String, (FiniteDistribution[AtomicMove], FiniteDistribution[Moves])]", "member" : "provingground.andrewscurtis.ACStates.states", "link" : "provingground\/andrewscurtis\/ACStates.html#states:Map[String,(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves])]", "kind" : "abstract val"}], "shortDescription" : "", "trait" : "provingground\/andrewscurtis\/ACStates.html", "kind" : "trait"}, {"name" : "provingground.andrewscurtis.ACThm", "shortDescription" : "An presentation (theorem) in the Andrews-Curtis evolution,namely:* actor name,* number of loops,* presentation* weight in distribution on presentations", "object" : "provingground\/andrewscurtis\/ACThm$.html", "members_object" : [{"label" : "weightVector", "tail" : "(thms: Vector[ACThm], loops: Int): (Presentation) ⇒ Vector[Double]", "member" : "provingground.andrewscurtis.ACThm.weightVector", "link" : "provingground\/andrewscurtis\/ACThm$.html#weightVector(thms:Vector[provingground.andrewscurtis.ACThm],loops:Int):provingground.andrewscurtis.FreeGroups.Presentation=>scala.collection.immutable.Vector[Double]", "kind" : "def"}, {"label" : "weight", "tail" : "(thms: Vector[ACThm], pres: Presentation, step: Int): Double", "member" : "provingground.andrewscurtis.ACThm.weight", "link" : "provingground\/andrewscurtis\/ACThm$.html#weight(thms:Vector[provingground.andrewscurtis.ACThm],pres:provingground.andrewscurtis.FreeGroups.Presentation,step:Int):Double", "kind" : "def"}, {"label" : "fromSnap", "tail" : ": (Snap) ⇒ Vector[ACThm]", "member" : "provingground.andrewscurtis.ACThm.fromSnap", "link" : "provingground\/andrewscurtis\/ACThm$.html#fromSnap:provingground.andrewscurtis.ACElem.Snap=>scala.collection.immutable.Vector[provingground.andrewscurtis.ACThm]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/ACThm$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/ACThm$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/ACThm$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/ACThm$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/ACThm$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/ACThm$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/ACThm$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACThm$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACThm$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACThm$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/ACThm$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/ACThm$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/andrewscurtis\/ACThm$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/ACThm$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/ACThm$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/ACThm$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/ACThm$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/ACThm$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/ACThm$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/andrewscurtis\/ACThm.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/andrewscurtis\/ACThm.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ACThm) ⇒ Boolean, msg: ⇒ Any): ACThm", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/ACThm.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ACThm) ⇒ Boolean): ACThm", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/ACThm.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): ACThm", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/ACThm.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ACThm", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/ACThm.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ACThm, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/andrewscurtis\/ACThm.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ACThm, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/andrewscurtis\/ACThm.html#->[B](y:B):(A,B)", "kind" : "def"}, {"member" : "provingground.andrewscurtis.ACThm#<init>", "error" : "unsupported entity"}, {"label" : "loops", "tail" : ": Int", "member" : "provingground.andrewscurtis.ACThm.loops", "link" : "provingground\/andrewscurtis\/ACThm.html#loops:Int", "kind" : "val"}, {"label" : "weight", "tail" : ": Double", "member" : "provingground.andrewscurtis.ACThm.weight", "link" : "provingground\/andrewscurtis\/ACThm.html#weight:Double", "kind" : "val"}, {"label" : "pres", "tail" : ": Presentation", "member" : "provingground.andrewscurtis.ACThm.pres", "link" : "provingground\/andrewscurtis\/ACThm.html#pres:provingground.andrewscurtis.FreeGroups.Presentation", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "provingground.andrewscurtis.ACThm.name", "link" : "provingground\/andrewscurtis\/ACThm.html#name:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/ACThm.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/ACThm.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/ACThm.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/ACThm.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/ACThm.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/ACThm.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/ACThm.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACThm.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACThm.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACThm.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/ACThm.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/ACThm.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/ACThm.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/ACThm.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/ACThm.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/ACThm.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/andrewscurtis\/ACThm.html", "kind" : "case class"}, {"name" : "provingground.andrewscurtis.AtomicMove", "members_trait" : [{"label" : "idLast", "tail" : "(): Moves", "member" : "provingground.andrewscurtis.Moves.toMoves.idLast", "link" : "provingground\/andrewscurtis\/AtomicMove.html#idLast:provingground.andrewscurtis.Moves", "kind" : "def"}, {"label" : "actOnTriv", "tail" : "(rank: Int): Option[Presentation]", "member" : "provingground.andrewscurtis.Moves.toMoves.actOnTriv", "link" : "provingground\/andrewscurtis\/AtomicMove.html#actOnTriv(rank:Int):Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "provingground.andrewscurtis.Moves.toMoves.length", "link" : "provingground\/andrewscurtis\/AtomicMove.html#length:Int", "kind" : "def"}, {"label" : "reduce", "tail" : "(): (Presentation) ⇒ Option[Presentation]", "member" : "provingground.andrewscurtis.Moves.toMoves.reduce", "link" : "provingground\/andrewscurtis\/AtomicMove.html#reduce:provingground.andrewscurtis.FreeGroups.Presentation=>Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "moves", "tail" : ": List[AtomicMove]", "member" : "provingground.andrewscurtis.Moves.toMoves.moves", "link" : "provingground\/andrewscurtis\/AtomicMove.html#moves:List[provingground.andrewscurtis.AtomicMove]", "kind" : "val"}, {"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/andrewscurtis\/AtomicMove.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/andrewscurtis\/AtomicMove.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (AtomicMove) ⇒ Boolean, msg: ⇒ Any): AtomicMove", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/AtomicMove.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (AtomicMove) ⇒ Boolean): AtomicMove", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/AtomicMove.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): AtomicMove", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/AtomicMove.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): AtomicMove", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/AtomicMove.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (AtomicMove, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/andrewscurtis\/AtomicMove.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (AtomicMove, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/andrewscurtis\/AtomicMove.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "provingground.andrewscurtis.AtomicMove.toString", "link" : "provingground\/andrewscurtis\/AtomicMove.html#toString():String", "kind" : "def"}, {"label" : "toLatex", "tail" : "(): String", "member" : "provingground.andrewscurtis.AtomicMove.toLatex", "link" : "provingground\/andrewscurtis\/AtomicMove.html#toLatex:String", "kind" : "def"}, {"label" : "toPlainString", "tail" : "(): String", "member" : "provingground.andrewscurtis.AtomicMove.toPlainString", "link" : "provingground\/andrewscurtis\/AtomicMove.html#toPlainString:String", "kind" : "def"}, {"label" : "toFunc", "tail" : "(): (Presentation) ⇒ Option[Presentation]", "member" : "provingground.andrewscurtis.AtomicMove.toFunc", "link" : "provingground\/andrewscurtis\/AtomicMove.html#toFunc:provingground.andrewscurtis.FreeGroups.Presentation=>Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "compose", "tail" : "(mf: AtomicMove): Moves", "member" : "provingground.andrewscurtis.AtomicMove.compose", "link" : "provingground\/andrewscurtis\/AtomicMove.html#compose(mf:provingground.andrewscurtis.AtomicMove):provingground.andrewscurtis.Moves", "kind" : "def"}, {"label" : "actOnPres", "tail" : "(fdPres: FiniteDistribution[Presentation]): FiniteDistribution[Presentation]", "member" : "provingground.andrewscurtis.AtomicMove.actOnPres", "link" : "provingground\/andrewscurtis\/AtomicMove.html#actOnPres(fdPres:provingground.FiniteDistribution[provingground.andrewscurtis.FreeGroups.Presentation]):provingground.FiniteDistribution[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "movesDF", "tail" : "(): AdjDiffbleFunction[FiniteDistribution[Moves], FiniteDistribution[Moves]]", "member" : "provingground.andrewscurtis.AtomicMove.movesDF", "link" : "provingground\/andrewscurtis\/AtomicMove.html#movesDF:provingground.learning.AdjDiffbleFunction[provingground.FiniteDistribution[provingground.andrewscurtis.Moves],provingground.FiniteDistribution[provingground.andrewscurtis.Moves]]", "kind" : "def"}, {"label" : "actOnMoves", "tail" : "(moves: Moves): Option[Moves]", "member" : "provingground.andrewscurtis.AtomicMove.actOnMoves", "link" : "provingground\/andrewscurtis\/AtomicMove.html#actOnMoves(moves:provingground.andrewscurtis.Moves):Option[provingground.andrewscurtis.Moves]", "kind" : "def"}, {"label" : "apply", "tail" : "(fdVertices: FiniteDistribution[Moves]): FiniteDistribution[Moves]", "member" : "provingground.andrewscurtis.AtomicMove.apply", "link" : "provingground\/andrewscurtis\/AtomicMove.html#apply(fdVertices:provingground.FiniteDistribution[provingground.andrewscurtis.Moves]):provingground.FiniteDistribution[provingground.andrewscurtis.Moves]", "kind" : "def"}, {"label" : "apply", "tail" : "(moves: Moves): Option[Moves]", "member" : "provingground.andrewscurtis.AtomicMove.apply", "link" : "provingground\/andrewscurtis\/AtomicMove.html#apply(moves:provingground.andrewscurtis.Moves):Option[provingground.andrewscurtis.Moves]", "kind" : "def"}, {"label" : "apply", "tail" : "(opPres: Option[Presentation]): Option[Presentation]", "member" : "provingground.andrewscurtis.AtomicMove.apply", "link" : "provingground\/andrewscurtis\/AtomicMove.html#apply(opPres:Option[provingground.andrewscurtis.FreeGroups.Presentation]):Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "andThen", "tail" : "(g: (Option[Moves]) ⇒ A): (Moves) ⇒ A", "member" : "scala.Function1.andThen", "link" : "provingground\/andrewscurtis\/AtomicMove.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) ⇒ Moves): (A) ⇒ Option[Moves]", "member" : "scala.Function1.compose", "link" : "provingground\/andrewscurtis\/AtomicMove.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/AtomicMove.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/AtomicMove.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/AtomicMove.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/AtomicMove.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/AtomicMove.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/AtomicMove.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/AtomicMove.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/AtomicMove.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/AtomicMove.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/AtomicMove.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/AtomicMove.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/AtomicMove.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/AtomicMove.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/AtomicMove.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/AtomicMove.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/AtomicMove.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/AtomicMove.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/AtomicMove.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(pres: Presentation): Option[Presentation]", "member" : "provingground.andrewscurtis.AtomicMove.apply", "link" : "provingground\/andrewscurtis\/AtomicMove.html#apply(pres:provingground.andrewscurtis.FreeGroups.Presentation):Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "abstract def"}], "shortDescription" : "", "object" : "provingground\/andrewscurtis\/AtomicMove$.html", "members_object" : [{"label" : "fromString", "tail" : "(w: String): Option[AtomicMove]", "member" : "provingground.andrewscurtis.AtomicMove.fromString", "link" : "provingground\/andrewscurtis\/AtomicMove$.html#fromString(w:String):Option[provingground.andrewscurtis.AtomicMove]", "kind" : "def"}, {"label" : "apply", "tail" : "(w: String): AtomicMove", "member" : "provingground.andrewscurtis.AtomicMove.apply", "link" : "provingground\/andrewscurtis\/AtomicMove$.html#apply(w:String):provingground.andrewscurtis.AtomicMove", "kind" : "def"}, {"label" : "actOnMoves", "tail" : "(mf: AtomicMove): (Moves) ⇒ Option[Moves]", "member" : "provingground.andrewscurtis.AtomicMove.actOnMoves", "link" : "provingground\/andrewscurtis\/AtomicMove$.html#actOnMoves(mf:provingground.andrewscurtis.AtomicMove):provingground.andrewscurtis.Moves=>Option[provingground.andrewscurtis.Moves]", "kind" : "def"}, {"label" : "actOnFDVertices", "tail" : "(mf: AtomicMove, fdVertices: FiniteDistribution[Moves]): FiniteDistribution[Moves]", "member" : "provingground.andrewscurtis.AtomicMove.actOnFDVertices", "link" : "provingground\/andrewscurtis\/AtomicMove$.html#actOnFDVertices(mf:provingground.andrewscurtis.AtomicMove,fdVertices:provingground.FiniteDistribution[provingground.andrewscurtis.Moves]):provingground.FiniteDistribution[provingground.andrewscurtis.Moves]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/AtomicMove$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/AtomicMove$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/AtomicMove$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/AtomicMove$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/AtomicMove$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/AtomicMove$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/AtomicMove$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/AtomicMove$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/AtomicMove$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/AtomicMove$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/AtomicMove$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/AtomicMove$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/andrewscurtis\/AtomicMove$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/AtomicMove$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/AtomicMove$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/AtomicMove$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/AtomicMove$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/AtomicMove$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/AtomicMove$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/andrewscurtis\/AtomicMove.html", "kind" : "object"}, {"name" : "provingground.andrewscurtis.Conj", "shortDescription" : "", "members_case class" : [{"label" : "idLast", "tail" : "(): Moves", "member" : "provingground.andrewscurtis.Moves.toMoves.idLast", "link" : "provingground\/andrewscurtis\/Conj.html#idLast:provingground.andrewscurtis.Moves", "kind" : "def"}, {"label" : "actOnTriv", "tail" : "(rank: Int): Option[Presentation]", "member" : "provingground.andrewscurtis.Moves.toMoves.actOnTriv", "link" : "provingground\/andrewscurtis\/Conj.html#actOnTriv(rank:Int):Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "provingground.andrewscurtis.Moves.toMoves.length", "link" : "provingground\/andrewscurtis\/Conj.html#length:Int", "kind" : "def"}, {"label" : "reduce", "tail" : "(): (Presentation) ⇒ Option[Presentation]", "member" : "provingground.andrewscurtis.Moves.toMoves.reduce", "link" : "provingground\/andrewscurtis\/Conj.html#reduce:provingground.andrewscurtis.FreeGroups.Presentation=>Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "moves", "tail" : ": List[AtomicMove]", "member" : "provingground.andrewscurtis.Moves.toMoves.moves", "link" : "provingground\/andrewscurtis\/Conj.html#moves:List[provingground.andrewscurtis.AtomicMove]", "kind" : "val"}, {"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/andrewscurtis\/Conj.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/andrewscurtis\/Conj.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Conj) ⇒ Boolean, msg: ⇒ Any): Conj", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/Conj.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Conj) ⇒ Boolean): Conj", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/Conj.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Conj", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/Conj.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Conj", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/Conj.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Conj, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/andrewscurtis\/Conj.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Conj, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/andrewscurtis\/Conj.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "apply", "tail" : "(pres: Presentation): Option[Presentation]", "member" : "provingground.andrewscurtis.Conj.apply", "link" : "provingground\/andrewscurtis\/Conj.html#apply(pres:provingground.andrewscurtis.FreeGroups.Presentation):Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"member" : "provingground.andrewscurtis.Conj#<init>", "error" : "unsupported entity"}, {"label" : "l", "tail" : ": Int", "member" : "provingground.andrewscurtis.Conj.l", "link" : "provingground\/andrewscurtis\/Conj.html#l:Int", "kind" : "val"}, {"label" : "k", "tail" : ": Int", "member" : "provingground.andrewscurtis.Conj.k", "link" : "provingground\/andrewscurtis\/Conj.html#k:Int", "kind" : "val"}, {"label" : "toString", "tail" : "(): String", "member" : "provingground.andrewscurtis.AtomicMove.toString", "link" : "provingground\/andrewscurtis\/Conj.html#toString():String", "kind" : "def"}, {"label" : "toLatex", "tail" : "(): String", "member" : "provingground.andrewscurtis.AtomicMove.toLatex", "link" : "provingground\/andrewscurtis\/Conj.html#toLatex:String", "kind" : "def"}, {"label" : "toPlainString", "tail" : "(): String", "member" : "provingground.andrewscurtis.AtomicMove.toPlainString", "link" : "provingground\/andrewscurtis\/Conj.html#toPlainString:String", "kind" : "def"}, {"label" : "toFunc", "tail" : "(): (Presentation) ⇒ Option[Presentation]", "member" : "provingground.andrewscurtis.AtomicMove.toFunc", "link" : "provingground\/andrewscurtis\/Conj.html#toFunc:provingground.andrewscurtis.FreeGroups.Presentation=>Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "compose", "tail" : "(mf: AtomicMove): Moves", "member" : "provingground.andrewscurtis.AtomicMove.compose", "link" : "provingground\/andrewscurtis\/Conj.html#compose(mf:provingground.andrewscurtis.AtomicMove):provingground.andrewscurtis.Moves", "kind" : "def"}, {"label" : "actOnPres", "tail" : "(fdPres: FiniteDistribution[Presentation]): FiniteDistribution[Presentation]", "member" : "provingground.andrewscurtis.AtomicMove.actOnPres", "link" : "provingground\/andrewscurtis\/Conj.html#actOnPres(fdPres:provingground.FiniteDistribution[provingground.andrewscurtis.FreeGroups.Presentation]):provingground.FiniteDistribution[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "movesDF", "tail" : "(): AdjDiffbleFunction[FiniteDistribution[Moves], FiniteDistribution[Moves]]", "member" : "provingground.andrewscurtis.AtomicMove.movesDF", "link" : "provingground\/andrewscurtis\/Conj.html#movesDF:provingground.learning.AdjDiffbleFunction[provingground.FiniteDistribution[provingground.andrewscurtis.Moves],provingground.FiniteDistribution[provingground.andrewscurtis.Moves]]", "kind" : "def"}, {"label" : "actOnMoves", "tail" : "(moves: Moves): Option[Moves]", "member" : "provingground.andrewscurtis.AtomicMove.actOnMoves", "link" : "provingground\/andrewscurtis\/Conj.html#actOnMoves(moves:provingground.andrewscurtis.Moves):Option[provingground.andrewscurtis.Moves]", "kind" : "def"}, {"label" : "apply", "tail" : "(fdVertices: FiniteDistribution[Moves]): FiniteDistribution[Moves]", "member" : "provingground.andrewscurtis.AtomicMove.apply", "link" : "provingground\/andrewscurtis\/Conj.html#apply(fdVertices:provingground.FiniteDistribution[provingground.andrewscurtis.Moves]):provingground.FiniteDistribution[provingground.andrewscurtis.Moves]", "kind" : "def"}, {"label" : "apply", "tail" : "(moves: Moves): Option[Moves]", "member" : "provingground.andrewscurtis.AtomicMove.apply", "link" : "provingground\/andrewscurtis\/Conj.html#apply(moves:provingground.andrewscurtis.Moves):Option[provingground.andrewscurtis.Moves]", "kind" : "def"}, {"label" : "apply", "tail" : "(opPres: Option[Presentation]): Option[Presentation]", "member" : "provingground.andrewscurtis.AtomicMove.apply", "link" : "provingground\/andrewscurtis\/Conj.html#apply(opPres:Option[provingground.andrewscurtis.FreeGroups.Presentation]):Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "andThen", "tail" : "(g: (Option[Moves]) ⇒ A): (Moves) ⇒ A", "member" : "scala.Function1.andThen", "link" : "provingground\/andrewscurtis\/Conj.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) ⇒ Moves): (A) ⇒ Option[Moves]", "member" : "scala.Function1.compose", "link" : "provingground\/andrewscurtis\/Conj.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/Conj.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/Conj.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/Conj.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/Conj.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/Conj.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/Conj.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/Conj.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/Conj.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/Conj.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/Conj.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/Conj.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/Conj.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/Conj.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/Conj.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/Conj.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/Conj.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/andrewscurtis\/Conj.html", "kind" : "case class"}, {"name" : "provingground.andrewscurtis.DiffStructure", "shortDescription" : "", "object" : "provingground\/andrewscurtis\/DiffStructure$.html", "members_object" : [{"label" : "genDynamics", "tail" : "(conjFunc: ((FiniteDistribution[M], FiniteDistribution[V])) ⇒ (FiniteDistribution[M], FiniteDistribution[V]))(orig: (FiniteDistribution[M], FiniteDistribution[V])): (FiniteDistribution[M], FiniteDistribution[V])", "member" : "provingground.andrewscurtis.DiffStructure.genDynamics", "link" : "provingground\/andrewscurtis\/DiffStructure$.html#genDynamics(conjFunc:((provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.M],provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.V]))=>(provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.M],provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.V]))(orig:(provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.M],provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.V])):(provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.M],provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.V])", "kind" : "def"}, {"label" : "conjugateByFeedback", "tail" : "(presCntn: Double, wrdCntn: Double, scale: Double)(rank: Int, iterations: Int)(lst: List[M]): ((FiniteDistribution[M], FiniteDistribution[V])) ⇒ (FiniteDistribution[M], FiniteDistribution[V])", "member" : "provingground.andrewscurtis.DiffStructure.conjugateByFeedback", "link" : "provingground\/andrewscurtis\/DiffStructure$.html#conjugateByFeedback(presCntn:Double,wrdCntn:Double,scale:Double)(rank:Int,iterations:Int)(lst:List[provingground.andrewscurtis.DiffStructure.M]):((provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.M],provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.V]))=>(provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.M],provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.V])", "kind" : "def"}, {"label" : "getFeedback", "tail" : "(presCntn: Double, wrdCntn: Double, scale: Double)(dist: FiniteDistribution[P]): FiniteDistribution[P]", "member" : "provingground.andrewscurtis.DiffStructure.getFeedback", "link" : "provingground\/andrewscurtis\/DiffStructure$.html#getFeedback(presCntn:Double,wrdCntn:Double,scale:Double)(dist:provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.P]):provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.P]", "kind" : "def"}, {"label" : "genProjectionMap", "tail" : "(rank: Int, iterations: Int)(lst: List[M]): AdjDiffbleFunction[(FiniteDistribution[M], FiniteDistribution[V]), FiniteDistribution[Presentation]]", "member" : "provingground.andrewscurtis.DiffStructure.genProjectionMap", "link" : "provingground\/andrewscurtis\/DiffStructure$.html#genProjectionMap(rank:Int,iterations:Int)(lst:List[provingground.andrewscurtis.DiffStructure.M]):provingground.learning.AdjDiffbleFunction[(provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.M],provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.V]),provingground.FiniteDistribution[provingground.andrewscurtis.FreeGroups.Presentation]]", "kind" : "def"}, {"label" : "genPresentationMoveFn", "tail" : "(rank: Int): MoveFn[V, Presentation]", "member" : "provingground.andrewscurtis.DiffStructure.genPresentationMoveFn", "link" : "provingground\/andrewscurtis\/DiffStructure$.html#genPresentationMoveFn(rank:Int):provingground.learning.FiniteDistributionLearner.MoveFn[provingground.andrewscurtis.DiffStructure.V,provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "iterateDiff", "tail" : "(lst: List[M], iterations: Int): AdjDiffbleFunction[(FiniteDistribution[M], FiniteDistribution[V]), (FiniteDistribution[M], FiniteDistribution[V])]", "member" : "provingground.andrewscurtis.DiffStructure.iterateDiff", "link" : "provingground\/andrewscurtis\/DiffStructure$.html#iterateDiff(lst:List[provingground.andrewscurtis.DiffStructure.M],iterations:Int):provingground.learning.AdjDiffbleFunction[(provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.M],provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.V]),(provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.M],provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.V])]", "kind" : "def"}, {"label" : "genExtendM", "tail" : "(lst: List[M]): AdjDiffbleFunction[(FiniteDistribution[M], FiniteDistribution[V]), (FiniteDistribution[M], FiniteDistribution[V])]", "member" : "provingground.andrewscurtis.DiffStructure.genExtendM", "link" : "provingground\/andrewscurtis\/DiffStructure$.html#genExtendM(lst:List[provingground.andrewscurtis.DiffStructure.M]):provingground.learning.AdjDiffbleFunction[(provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.M],provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.V]),(provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.M],provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.V])]", "kind" : "def"}, {"label" : "addCollection", "tail" : "(lst: List[M]): AdjDiffbleFunction[(FiniteDistribution[M], FiniteDistribution[V]), FiniteDistribution[V]]", "member" : "provingground.andrewscurtis.DiffStructure.addCollection", "link" : "provingground\/andrewscurtis\/DiffStructure$.html#addCollection(lst:List[provingground.andrewscurtis.DiffStructure.M]):provingground.learning.AdjDiffbleFunction[(provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.M],provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.V]),provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.V]]", "kind" : "def"}, {"label" : "genCollection", "tail" : "(lst: List[M]): List[AdjDiffbleFunction[(FiniteDistribution[M], FiniteDistribution[V]), FiniteDistribution[V]]]", "member" : "provingground.andrewscurtis.DiffStructure.genCollection", "link" : "provingground\/andrewscurtis\/DiffStructure$.html#genCollection(lst:List[provingground.andrewscurtis.DiffStructure.M]):List[provingground.learning.AdjDiffbleFunction[(provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.M],provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.V]),provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.V]]]", "kind" : "def"}, {"label" : "genWtDyn", "tail" : "(mf: M): AdjDiffbleFunction[(FiniteDistribution[M], FiniteDistribution[V]), FiniteDistribution[V]]", "member" : "provingground.andrewscurtis.DiffStructure.genWtDyn", "link" : "provingground\/andrewscurtis\/DiffStructure$.html#genWtDyn(mf:provingground.andrewscurtis.DiffStructure.M):provingground.learning.AdjDiffbleFunction[(provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.M],provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.V]),provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.V]]", "kind" : "def"}, {"label" : "genMoveFn", "tail" : "(mf: M): AdjDiffbleFunction[FiniteDistribution[Moves], FiniteDistribution[Moves]]", "member" : "provingground.andrewscurtis.DiffStructure.genMoveFn", "link" : "provingground\/andrewscurtis\/DiffStructure$.html#genMoveFn(mf:provingground.andrewscurtis.DiffStructure.M):provingground.learning.AdjDiffbleFunction[provingground.FiniteDistribution[provingground.andrewscurtis.Moves],provingground.FiniteDistribution[provingground.andrewscurtis.Moves]]", "kind" : "def"}, {"label" : "P", "tail" : "", "member" : "provingground.andrewscurtis.DiffStructure.P", "link" : "provingground\/andrewscurtis\/DiffStructure$.html#P=provingground.andrewscurtis.FreeGroups.Presentation", "kind" : "type"}, {"label" : "V", "tail" : "", "member" : "provingground.andrewscurtis.DiffStructure.V", "link" : "provingground\/andrewscurtis\/DiffStructure$.html#V=provingground.andrewscurtis.Moves", "kind" : "type"}, {"label" : "M", "tail" : "", "member" : "provingground.andrewscurtis.DiffStructure.M", "link" : "provingground\/andrewscurtis\/DiffStructure$.html#M=provingground.andrewscurtis.AtomicMove", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/DiffStructure$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/DiffStructure$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/DiffStructure$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/DiffStructure$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/DiffStructure$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/DiffStructure$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/DiffStructure$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/DiffStructure$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/DiffStructure$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/DiffStructure$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/DiffStructure$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/DiffStructure$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/andrewscurtis\/DiffStructure$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/DiffStructure$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/DiffStructure$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/DiffStructure$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/DiffStructure$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/DiffStructure$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/DiffStructure$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.andrewscurtis.FreeGroups", "shortDescription" : "", "object" : "provingground\/andrewscurtis\/FreeGroups$.html", "members_object" : [{"label" : "readPres", "tail" : "(): ReadString[Presentation]", "member" : "provingground.andrewscurtis.FreeGroups.readPres", "link" : "provingground\/andrewscurtis\/FreeGroups$.html#readPres:provingground.translation.StringParse.ReadString[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "implicit def"}, {"label" : "readWord", "tail" : "(): ReadString[Word]", "member" : "provingground.andrewscurtis.FreeGroups.readWord", "link" : "provingground\/andrewscurtis\/FreeGroups$.html#readWord:provingground.translation.StringParse.ReadString[provingground.andrewscurtis.FreeGroups.Word]", "kind" : "implicit def"}, {"label" : "writePres", "tail" : "(): WriteString[Presentation]", "member" : "provingground.andrewscurtis.FreeGroups.writePres", "link" : "provingground\/andrewscurtis\/FreeGroups$.html#writePres:provingground.translation.StringParse.WriteString[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "implicit def"}, {"label" : "writeWord", "tail" : "(): WriteString[Word]", "member" : "provingground.andrewscurtis.FreeGroups.writeWord", "link" : "provingground\/andrewscurtis\/FreeGroups$.html#writeWord:provingground.translation.StringParse.WriteString[provingground.andrewscurtis.FreeGroups.Word]", "kind" : "implicit def"}, {"label" : "nullpres", "tail" : ": Presentation", "member" : "provingground.andrewscurtis.FreeGroups.nullpres", "link" : "provingground\/andrewscurtis\/FreeGroups$.html#nullpres:provingground.andrewscurtis.FreeGroups.Presentation", "kind" : "val"}, {"label" : "presentationWeight", "tail" : "(pres: Presentation, presCntn: Double, wrdCntn: Double): Double", "member" : "provingground.andrewscurtis.FreeGroups.presentationWeight", "link" : "provingground\/andrewscurtis\/FreeGroups$.html#presentationWeight(pres:provingground.andrewscurtis.FreeGroups.Presentation,presCntn:Double,wrdCntn:Double):Double", "kind" : "def"}, {"label" : "Presentation", "tail" : "", "member" : "provingground.andrewscurtis.FreeGroups.Presentation", "link" : "provingground\/andrewscurtis\/FreeGroups$.html#Presentation", "kind" : "object"}, {"label" : "Presentation", "tail" : "", "member" : "provingground.andrewscurtis.FreeGroups.Presentation", "link" : "provingground\/andrewscurtis\/FreeGroups$.html#PresentationextendsProductwithSerializable", "kind" : "case class"}, {"label" : "wordWeight", "tail" : "(w: Word, wrdCntn: Double, rank: Double): Double", "member" : "provingground.andrewscurtis.FreeGroups.wordWeight", "link" : "provingground\/andrewscurtis\/FreeGroups$.html#wordWeight(w:provingground.andrewscurtis.FreeGroups.Word,wrdCntn:Double,rank:Double):Double", "kind" : "def"}, {"label" : "Word", "tail" : "", "member" : "provingground.andrewscurtis.FreeGroups.Word", "link" : "provingground\/andrewscurtis\/FreeGroups$.html#WordextendsAnyValwithProductwithSerializable", "kind" : "final case class"}, {"label" : "Word", "tail" : "", "member" : "provingground.andrewscurtis.FreeGroups.Word", "link" : "provingground\/andrewscurtis\/FreeGroups$.html#Word", "kind" : "object"}, {"label" : "letterUnic", "tail" : "(n: Int): String", "member" : "provingground.andrewscurtis.FreeGroups.letterUnic", "link" : "provingground\/andrewscurtis\/FreeGroups$.html#letterUnic(n:Int):String", "kind" : "def"}, {"label" : "letterString", "tail" : "(n: Int): String", "member" : "provingground.andrewscurtis.FreeGroups.letterString", "link" : "provingground\/andrewscurtis\/FreeGroups$.html#letterString(n:Int):String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/FreeGroups$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/FreeGroups$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/FreeGroups$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/FreeGroups$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/FreeGroups$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/FreeGroups$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/FreeGroups$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/FreeGroups$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/FreeGroups$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/FreeGroups$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/FreeGroups$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/FreeGroups$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/andrewscurtis\/FreeGroups$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/FreeGroups$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/FreeGroups$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/FreeGroups$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/FreeGroups$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/FreeGroups$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/FreeGroups$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.andrewscurtis.Id", "shortDescription" : "", "object" : "provingground\/andrewscurtis\/Id$.html", "members_object" : [{"label" : "movesDF", "tail" : "(): AdjDiffbleFunction[FiniteDistribution[Moves], FiniteDistribution[Moves]]", "member" : "provingground.andrewscurtis.Id.movesDF", "link" : "provingground\/andrewscurtis\/Id$.html#movesDF:provingground.learning.AdjDiffbleFunction[provingground.FiniteDistribution[provingground.andrewscurtis.Moves],provingground.FiniteDistribution[provingground.andrewscurtis.Moves]]", "kind" : "def"}, {"label" : "apply", "tail" : "(pres: Presentation): Some[Presentation]", "member" : "provingground.andrewscurtis.Id.apply", "link" : "provingground\/andrewscurtis\/Id$.html#apply(pres:provingground.andrewscurtis.FreeGroups.Presentation):Some[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "provingground.andrewscurtis.AtomicMove.toString", "link" : "provingground\/andrewscurtis\/Id$.html#toString():String", "kind" : "def"}, {"label" : "toLatex", "tail" : "(): String", "member" : "provingground.andrewscurtis.AtomicMove.toLatex", "link" : "provingground\/andrewscurtis\/Id$.html#toLatex:String", "kind" : "def"}, {"label" : "toPlainString", "tail" : "(): String", "member" : "provingground.andrewscurtis.AtomicMove.toPlainString", "link" : "provingground\/andrewscurtis\/Id$.html#toPlainString:String", "kind" : "def"}, {"label" : "toFunc", "tail" : "(): (Presentation) ⇒ Option[Presentation]", "member" : "provingground.andrewscurtis.AtomicMove.toFunc", "link" : "provingground\/andrewscurtis\/Id$.html#toFunc:provingground.andrewscurtis.FreeGroups.Presentation=>Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "compose", "tail" : "(mf: AtomicMove): Moves", "member" : "provingground.andrewscurtis.AtomicMove.compose", "link" : "provingground\/andrewscurtis\/Id$.html#compose(mf:provingground.andrewscurtis.AtomicMove):provingground.andrewscurtis.Moves", "kind" : "def"}, {"label" : "actOnPres", "tail" : "(fdPres: FiniteDistribution[Presentation]): FiniteDistribution[Presentation]", "member" : "provingground.andrewscurtis.AtomicMove.actOnPres", "link" : "provingground\/andrewscurtis\/Id$.html#actOnPres(fdPres:provingground.FiniteDistribution[provingground.andrewscurtis.FreeGroups.Presentation]):provingground.FiniteDistribution[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "actOnMoves", "tail" : "(moves: Moves): Option[Moves]", "member" : "provingground.andrewscurtis.AtomicMove.actOnMoves", "link" : "provingground\/andrewscurtis\/Id$.html#actOnMoves(moves:provingground.andrewscurtis.Moves):Option[provingground.andrewscurtis.Moves]", "kind" : "def"}, {"label" : "apply", "tail" : "(fdVertices: FiniteDistribution[Moves]): FiniteDistribution[Moves]", "member" : "provingground.andrewscurtis.AtomicMove.apply", "link" : "provingground\/andrewscurtis\/Id$.html#apply(fdVertices:provingground.FiniteDistribution[provingground.andrewscurtis.Moves]):provingground.FiniteDistribution[provingground.andrewscurtis.Moves]", "kind" : "def"}, {"label" : "apply", "tail" : "(moves: Moves): Option[Moves]", "member" : "provingground.andrewscurtis.AtomicMove.apply", "link" : "provingground\/andrewscurtis\/Id$.html#apply(moves:provingground.andrewscurtis.Moves):Option[provingground.andrewscurtis.Moves]", "kind" : "def"}, {"label" : "apply", "tail" : "(opPres: Option[Presentation]): Option[Presentation]", "member" : "provingground.andrewscurtis.AtomicMove.apply", "link" : "provingground\/andrewscurtis\/Id$.html#apply(opPres:Option[provingground.andrewscurtis.FreeGroups.Presentation]):Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "andThen", "tail" : "(g: (Option[Moves]) ⇒ A): (Moves) ⇒ A", "member" : "scala.Function1.andThen", "link" : "provingground\/andrewscurtis\/Id$.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) ⇒ Moves): (A) ⇒ Option[Moves]", "member" : "scala.Function1.compose", "link" : "provingground\/andrewscurtis\/Id$.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/Id$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/Id$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/Id$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/Id$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/Id$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/Id$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/Id$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/Id$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/Id$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/Id$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/Id$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/Id$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/Id$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/Id$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/Id$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/Id$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/Id$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.andrewscurtis.Inv", "shortDescription" : "", "members_case class" : [{"label" : "idLast", "tail" : "(): Moves", "member" : "provingground.andrewscurtis.Moves.toMoves.idLast", "link" : "provingground\/andrewscurtis\/Inv.html#idLast:provingground.andrewscurtis.Moves", "kind" : "def"}, {"label" : "actOnTriv", "tail" : "(rank: Int): Option[Presentation]", "member" : "provingground.andrewscurtis.Moves.toMoves.actOnTriv", "link" : "provingground\/andrewscurtis\/Inv.html#actOnTriv(rank:Int):Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "provingground.andrewscurtis.Moves.toMoves.length", "link" : "provingground\/andrewscurtis\/Inv.html#length:Int", "kind" : "def"}, {"label" : "reduce", "tail" : "(): (Presentation) ⇒ Option[Presentation]", "member" : "provingground.andrewscurtis.Moves.toMoves.reduce", "link" : "provingground\/andrewscurtis\/Inv.html#reduce:provingground.andrewscurtis.FreeGroups.Presentation=>Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "moves", "tail" : ": List[AtomicMove]", "member" : "provingground.andrewscurtis.Moves.toMoves.moves", "link" : "provingground\/andrewscurtis\/Inv.html#moves:List[provingground.andrewscurtis.AtomicMove]", "kind" : "val"}, {"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/andrewscurtis\/Inv.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/andrewscurtis\/Inv.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Inv) ⇒ Boolean, msg: ⇒ Any): Inv", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/Inv.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Inv) ⇒ Boolean): Inv", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/Inv.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Inv", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/Inv.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Inv", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/Inv.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Inv, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/andrewscurtis\/Inv.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Inv, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/andrewscurtis\/Inv.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "apply", "tail" : "(pres: Presentation): Option[Presentation]", "member" : "provingground.andrewscurtis.Inv.apply", "link" : "provingground\/andrewscurtis\/Inv.html#apply(pres:provingground.andrewscurtis.FreeGroups.Presentation):Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"member" : "provingground.andrewscurtis.Inv#<init>", "error" : "unsupported entity"}, {"label" : "k", "tail" : ": Int", "member" : "provingground.andrewscurtis.Inv.k", "link" : "provingground\/andrewscurtis\/Inv.html#k:Int", "kind" : "val"}, {"label" : "toString", "tail" : "(): String", "member" : "provingground.andrewscurtis.AtomicMove.toString", "link" : "provingground\/andrewscurtis\/Inv.html#toString():String", "kind" : "def"}, {"label" : "toLatex", "tail" : "(): String", "member" : "provingground.andrewscurtis.AtomicMove.toLatex", "link" : "provingground\/andrewscurtis\/Inv.html#toLatex:String", "kind" : "def"}, {"label" : "toPlainString", "tail" : "(): String", "member" : "provingground.andrewscurtis.AtomicMove.toPlainString", "link" : "provingground\/andrewscurtis\/Inv.html#toPlainString:String", "kind" : "def"}, {"label" : "toFunc", "tail" : "(): (Presentation) ⇒ Option[Presentation]", "member" : "provingground.andrewscurtis.AtomicMove.toFunc", "link" : "provingground\/andrewscurtis\/Inv.html#toFunc:provingground.andrewscurtis.FreeGroups.Presentation=>Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "compose", "tail" : "(mf: AtomicMove): Moves", "member" : "provingground.andrewscurtis.AtomicMove.compose", "link" : "provingground\/andrewscurtis\/Inv.html#compose(mf:provingground.andrewscurtis.AtomicMove):provingground.andrewscurtis.Moves", "kind" : "def"}, {"label" : "actOnPres", "tail" : "(fdPres: FiniteDistribution[Presentation]): FiniteDistribution[Presentation]", "member" : "provingground.andrewscurtis.AtomicMove.actOnPres", "link" : "provingground\/andrewscurtis\/Inv.html#actOnPres(fdPres:provingground.FiniteDistribution[provingground.andrewscurtis.FreeGroups.Presentation]):provingground.FiniteDistribution[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "movesDF", "tail" : "(): AdjDiffbleFunction[FiniteDistribution[Moves], FiniteDistribution[Moves]]", "member" : "provingground.andrewscurtis.AtomicMove.movesDF", "link" : "provingground\/andrewscurtis\/Inv.html#movesDF:provingground.learning.AdjDiffbleFunction[provingground.FiniteDistribution[provingground.andrewscurtis.Moves],provingground.FiniteDistribution[provingground.andrewscurtis.Moves]]", "kind" : "def"}, {"label" : "actOnMoves", "tail" : "(moves: Moves): Option[Moves]", "member" : "provingground.andrewscurtis.AtomicMove.actOnMoves", "link" : "provingground\/andrewscurtis\/Inv.html#actOnMoves(moves:provingground.andrewscurtis.Moves):Option[provingground.andrewscurtis.Moves]", "kind" : "def"}, {"label" : "apply", "tail" : "(fdVertices: FiniteDistribution[Moves]): FiniteDistribution[Moves]", "member" : "provingground.andrewscurtis.AtomicMove.apply", "link" : "provingground\/andrewscurtis\/Inv.html#apply(fdVertices:provingground.FiniteDistribution[provingground.andrewscurtis.Moves]):provingground.FiniteDistribution[provingground.andrewscurtis.Moves]", "kind" : "def"}, {"label" : "apply", "tail" : "(moves: Moves): Option[Moves]", "member" : "provingground.andrewscurtis.AtomicMove.apply", "link" : "provingground\/andrewscurtis\/Inv.html#apply(moves:provingground.andrewscurtis.Moves):Option[provingground.andrewscurtis.Moves]", "kind" : "def"}, {"label" : "apply", "tail" : "(opPres: Option[Presentation]): Option[Presentation]", "member" : "provingground.andrewscurtis.AtomicMove.apply", "link" : "provingground\/andrewscurtis\/Inv.html#apply(opPres:Option[provingground.andrewscurtis.FreeGroups.Presentation]):Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "andThen", "tail" : "(g: (Option[Moves]) ⇒ A): (Moves) ⇒ A", "member" : "scala.Function1.andThen", "link" : "provingground\/andrewscurtis\/Inv.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) ⇒ Moves): (A) ⇒ Option[Moves]", "member" : "scala.Function1.compose", "link" : "provingground\/andrewscurtis\/Inv.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/Inv.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/Inv.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/Inv.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/Inv.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/Inv.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/Inv.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/Inv.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/Inv.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/Inv.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/Inv.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/Inv.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/Inv.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/Inv.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/Inv.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/Inv.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/Inv.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/andrewscurtis\/Inv.html", "kind" : "case class"}, {"name" : "provingground.andrewscurtis.LftMult", "shortDescription" : "", "members_case class" : [{"label" : "idLast", "tail" : "(): Moves", "member" : "provingground.andrewscurtis.Moves.toMoves.idLast", "link" : "provingground\/andrewscurtis\/LftMult.html#idLast:provingground.andrewscurtis.Moves", "kind" : "def"}, {"label" : "actOnTriv", "tail" : "(rank: Int): Option[Presentation]", "member" : "provingground.andrewscurtis.Moves.toMoves.actOnTriv", "link" : "provingground\/andrewscurtis\/LftMult.html#actOnTriv(rank:Int):Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "provingground.andrewscurtis.Moves.toMoves.length", "link" : "provingground\/andrewscurtis\/LftMult.html#length:Int", "kind" : "def"}, {"label" : "reduce", "tail" : "(): (Presentation) ⇒ Option[Presentation]", "member" : "provingground.andrewscurtis.Moves.toMoves.reduce", "link" : "provingground\/andrewscurtis\/LftMult.html#reduce:provingground.andrewscurtis.FreeGroups.Presentation=>Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "moves", "tail" : ": List[AtomicMove]", "member" : "provingground.andrewscurtis.Moves.toMoves.moves", "link" : "provingground\/andrewscurtis\/LftMult.html#moves:List[provingground.andrewscurtis.AtomicMove]", "kind" : "val"}, {"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/andrewscurtis\/LftMult.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/andrewscurtis\/LftMult.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (LftMult) ⇒ Boolean, msg: ⇒ Any): LftMult", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/LftMult.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (LftMult) ⇒ Boolean): LftMult", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/LftMult.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): LftMult", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/LftMult.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): LftMult", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/LftMult.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (LftMult, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/andrewscurtis\/LftMult.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (LftMult, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/andrewscurtis\/LftMult.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "apply", "tail" : "(pres: Presentation): Option[Presentation]", "member" : "provingground.andrewscurtis.LftMult.apply", "link" : "provingground\/andrewscurtis\/LftMult.html#apply(pres:provingground.andrewscurtis.FreeGroups.Presentation):Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"member" : "provingground.andrewscurtis.LftMult#<init>", "error" : "unsupported entity"}, {"label" : "l", "tail" : ": Int", "member" : "provingground.andrewscurtis.LftMult.l", "link" : "provingground\/andrewscurtis\/LftMult.html#l:Int", "kind" : "val"}, {"label" : "k", "tail" : ": Int", "member" : "provingground.andrewscurtis.LftMult.k", "link" : "provingground\/andrewscurtis\/LftMult.html#k:Int", "kind" : "val"}, {"label" : "toString", "tail" : "(): String", "member" : "provingground.andrewscurtis.AtomicMove.toString", "link" : "provingground\/andrewscurtis\/LftMult.html#toString():String", "kind" : "def"}, {"label" : "toLatex", "tail" : "(): String", "member" : "provingground.andrewscurtis.AtomicMove.toLatex", "link" : "provingground\/andrewscurtis\/LftMult.html#toLatex:String", "kind" : "def"}, {"label" : "toPlainString", "tail" : "(): String", "member" : "provingground.andrewscurtis.AtomicMove.toPlainString", "link" : "provingground\/andrewscurtis\/LftMult.html#toPlainString:String", "kind" : "def"}, {"label" : "toFunc", "tail" : "(): (Presentation) ⇒ Option[Presentation]", "member" : "provingground.andrewscurtis.AtomicMove.toFunc", "link" : "provingground\/andrewscurtis\/LftMult.html#toFunc:provingground.andrewscurtis.FreeGroups.Presentation=>Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "compose", "tail" : "(mf: AtomicMove): Moves", "member" : "provingground.andrewscurtis.AtomicMove.compose", "link" : "provingground\/andrewscurtis\/LftMult.html#compose(mf:provingground.andrewscurtis.AtomicMove):provingground.andrewscurtis.Moves", "kind" : "def"}, {"label" : "actOnPres", "tail" : "(fdPres: FiniteDistribution[Presentation]): FiniteDistribution[Presentation]", "member" : "provingground.andrewscurtis.AtomicMove.actOnPres", "link" : "provingground\/andrewscurtis\/LftMult.html#actOnPres(fdPres:provingground.FiniteDistribution[provingground.andrewscurtis.FreeGroups.Presentation]):provingground.FiniteDistribution[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "movesDF", "tail" : "(): AdjDiffbleFunction[FiniteDistribution[Moves], FiniteDistribution[Moves]]", "member" : "provingground.andrewscurtis.AtomicMove.movesDF", "link" : "provingground\/andrewscurtis\/LftMult.html#movesDF:provingground.learning.AdjDiffbleFunction[provingground.FiniteDistribution[provingground.andrewscurtis.Moves],provingground.FiniteDistribution[provingground.andrewscurtis.Moves]]", "kind" : "def"}, {"label" : "actOnMoves", "tail" : "(moves: Moves): Option[Moves]", "member" : "provingground.andrewscurtis.AtomicMove.actOnMoves", "link" : "provingground\/andrewscurtis\/LftMult.html#actOnMoves(moves:provingground.andrewscurtis.Moves):Option[provingground.andrewscurtis.Moves]", "kind" : "def"}, {"label" : "apply", "tail" : "(fdVertices: FiniteDistribution[Moves]): FiniteDistribution[Moves]", "member" : "provingground.andrewscurtis.AtomicMove.apply", "link" : "provingground\/andrewscurtis\/LftMult.html#apply(fdVertices:provingground.FiniteDistribution[provingground.andrewscurtis.Moves]):provingground.FiniteDistribution[provingground.andrewscurtis.Moves]", "kind" : "def"}, {"label" : "apply", "tail" : "(moves: Moves): Option[Moves]", "member" : "provingground.andrewscurtis.AtomicMove.apply", "link" : "provingground\/andrewscurtis\/LftMult.html#apply(moves:provingground.andrewscurtis.Moves):Option[provingground.andrewscurtis.Moves]", "kind" : "def"}, {"label" : "apply", "tail" : "(opPres: Option[Presentation]): Option[Presentation]", "member" : "provingground.andrewscurtis.AtomicMove.apply", "link" : "provingground\/andrewscurtis\/LftMult.html#apply(opPres:Option[provingground.andrewscurtis.FreeGroups.Presentation]):Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "andThen", "tail" : "(g: (Option[Moves]) ⇒ A): (Moves) ⇒ A", "member" : "scala.Function1.andThen", "link" : "provingground\/andrewscurtis\/LftMult.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) ⇒ Moves): (A) ⇒ Option[Moves]", "member" : "scala.Function1.compose", "link" : "provingground\/andrewscurtis\/LftMult.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/LftMult.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/LftMult.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/LftMult.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/LftMult.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/LftMult.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/LftMult.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/LftMult.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/LftMult.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/LftMult.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/LftMult.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/LftMult.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/LftMult.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/LftMult.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/LftMult.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/LftMult.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/LftMult.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/andrewscurtis\/LftMult.html", "kind" : "case class"}, {"name" : "provingground.andrewscurtis.LftMultInv", "shortDescription" : "", "members_case class" : [{"label" : "idLast", "tail" : "(): Moves", "member" : "provingground.andrewscurtis.Moves.toMoves.idLast", "link" : "provingground\/andrewscurtis\/LftMultInv.html#idLast:provingground.andrewscurtis.Moves", "kind" : "def"}, {"label" : "actOnTriv", "tail" : "(rank: Int): Option[Presentation]", "member" : "provingground.andrewscurtis.Moves.toMoves.actOnTriv", "link" : "provingground\/andrewscurtis\/LftMultInv.html#actOnTriv(rank:Int):Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "provingground.andrewscurtis.Moves.toMoves.length", "link" : "provingground\/andrewscurtis\/LftMultInv.html#length:Int", "kind" : "def"}, {"label" : "reduce", "tail" : "(): (Presentation) ⇒ Option[Presentation]", "member" : "provingground.andrewscurtis.Moves.toMoves.reduce", "link" : "provingground\/andrewscurtis\/LftMultInv.html#reduce:provingground.andrewscurtis.FreeGroups.Presentation=>Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "moves", "tail" : ": List[AtomicMove]", "member" : "provingground.andrewscurtis.Moves.toMoves.moves", "link" : "provingground\/andrewscurtis\/LftMultInv.html#moves:List[provingground.andrewscurtis.AtomicMove]", "kind" : "val"}, {"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/andrewscurtis\/LftMultInv.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/andrewscurtis\/LftMultInv.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (LftMultInv) ⇒ Boolean, msg: ⇒ Any): LftMultInv", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/LftMultInv.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (LftMultInv) ⇒ Boolean): LftMultInv", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/LftMultInv.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): LftMultInv", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/LftMultInv.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): LftMultInv", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/LftMultInv.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (LftMultInv, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/andrewscurtis\/LftMultInv.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (LftMultInv, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/andrewscurtis\/LftMultInv.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "apply", "tail" : "(pres: Presentation): Option[Presentation]", "member" : "provingground.andrewscurtis.LftMultInv.apply", "link" : "provingground\/andrewscurtis\/LftMultInv.html#apply(pres:provingground.andrewscurtis.FreeGroups.Presentation):Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"member" : "provingground.andrewscurtis.LftMultInv#<init>", "error" : "unsupported entity"}, {"label" : "l", "tail" : ": Int", "member" : "provingground.andrewscurtis.LftMultInv.l", "link" : "provingground\/andrewscurtis\/LftMultInv.html#l:Int", "kind" : "val"}, {"label" : "k", "tail" : ": Int", "member" : "provingground.andrewscurtis.LftMultInv.k", "link" : "provingground\/andrewscurtis\/LftMultInv.html#k:Int", "kind" : "val"}, {"label" : "toString", "tail" : "(): String", "member" : "provingground.andrewscurtis.AtomicMove.toString", "link" : "provingground\/andrewscurtis\/LftMultInv.html#toString():String", "kind" : "def"}, {"label" : "toLatex", "tail" : "(): String", "member" : "provingground.andrewscurtis.AtomicMove.toLatex", "link" : "provingground\/andrewscurtis\/LftMultInv.html#toLatex:String", "kind" : "def"}, {"label" : "toPlainString", "tail" : "(): String", "member" : "provingground.andrewscurtis.AtomicMove.toPlainString", "link" : "provingground\/andrewscurtis\/LftMultInv.html#toPlainString:String", "kind" : "def"}, {"label" : "toFunc", "tail" : "(): (Presentation) ⇒ Option[Presentation]", "member" : "provingground.andrewscurtis.AtomicMove.toFunc", "link" : "provingground\/andrewscurtis\/LftMultInv.html#toFunc:provingground.andrewscurtis.FreeGroups.Presentation=>Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "compose", "tail" : "(mf: AtomicMove): Moves", "member" : "provingground.andrewscurtis.AtomicMove.compose", "link" : "provingground\/andrewscurtis\/LftMultInv.html#compose(mf:provingground.andrewscurtis.AtomicMove):provingground.andrewscurtis.Moves", "kind" : "def"}, {"label" : "actOnPres", "tail" : "(fdPres: FiniteDistribution[Presentation]): FiniteDistribution[Presentation]", "member" : "provingground.andrewscurtis.AtomicMove.actOnPres", "link" : "provingground\/andrewscurtis\/LftMultInv.html#actOnPres(fdPres:provingground.FiniteDistribution[provingground.andrewscurtis.FreeGroups.Presentation]):provingground.FiniteDistribution[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "movesDF", "tail" : "(): AdjDiffbleFunction[FiniteDistribution[Moves], FiniteDistribution[Moves]]", "member" : "provingground.andrewscurtis.AtomicMove.movesDF", "link" : "provingground\/andrewscurtis\/LftMultInv.html#movesDF:provingground.learning.AdjDiffbleFunction[provingground.FiniteDistribution[provingground.andrewscurtis.Moves],provingground.FiniteDistribution[provingground.andrewscurtis.Moves]]", "kind" : "def"}, {"label" : "actOnMoves", "tail" : "(moves: Moves): Option[Moves]", "member" : "provingground.andrewscurtis.AtomicMove.actOnMoves", "link" : "provingground\/andrewscurtis\/LftMultInv.html#actOnMoves(moves:provingground.andrewscurtis.Moves):Option[provingground.andrewscurtis.Moves]", "kind" : "def"}, {"label" : "apply", "tail" : "(fdVertices: FiniteDistribution[Moves]): FiniteDistribution[Moves]", "member" : "provingground.andrewscurtis.AtomicMove.apply", "link" : "provingground\/andrewscurtis\/LftMultInv.html#apply(fdVertices:provingground.FiniteDistribution[provingground.andrewscurtis.Moves]):provingground.FiniteDistribution[provingground.andrewscurtis.Moves]", "kind" : "def"}, {"label" : "apply", "tail" : "(moves: Moves): Option[Moves]", "member" : "provingground.andrewscurtis.AtomicMove.apply", "link" : "provingground\/andrewscurtis\/LftMultInv.html#apply(moves:provingground.andrewscurtis.Moves):Option[provingground.andrewscurtis.Moves]", "kind" : "def"}, {"label" : "apply", "tail" : "(opPres: Option[Presentation]): Option[Presentation]", "member" : "provingground.andrewscurtis.AtomicMove.apply", "link" : "provingground\/andrewscurtis\/LftMultInv.html#apply(opPres:Option[provingground.andrewscurtis.FreeGroups.Presentation]):Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "andThen", "tail" : "(g: (Option[Moves]) ⇒ A): (Moves) ⇒ A", "member" : "scala.Function1.andThen", "link" : "provingground\/andrewscurtis\/LftMultInv.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) ⇒ Moves): (A) ⇒ Option[Moves]", "member" : "scala.Function1.compose", "link" : "provingground\/andrewscurtis\/LftMultInv.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/LftMultInv.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/LftMultInv.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/LftMultInv.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/LftMultInv.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/LftMultInv.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/LftMultInv.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/LftMultInv.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/LftMultInv.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/LftMultInv.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/LftMultInv.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/LftMultInv.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/LftMultInv.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/LftMultInv.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/LftMultInv.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/LftMultInv.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/LftMultInv.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/andrewscurtis\/LftMultInv.html", "kind" : "case class"}, {"name" : "provingground.andrewscurtis.MoveGenerator", "shortDescription" : "", "object" : "provingground\/andrewscurtis\/MoveGenerator$.html", "members_object" : [{"label" : "extendedMoves", "tail" : "(rank: Int): FiniteDistribution[AtomicMove]", "member" : "provingground.andrewscurtis.MoveGenerator.extendedMoves", "link" : "provingground\/andrewscurtis\/MoveGenerator$.html#extendedMoves(rank:Int):provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove]", "kind" : "def"}, {"label" : "learnerMoves", "tail" : "(rank: Int): FiniteDistribution[AtomicMove]", "member" : "provingground.andrewscurtis.MoveGenerator.learnerMoves", "link" : "provingground\/andrewscurtis\/MoveGenerator$.html#learnerMoves(rank:Int):provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove]", "kind" : "def"}, {"label" : "extendedMovesList", "tail" : "(rank: Int): List[AtomicMove]", "member" : "provingground.andrewscurtis.MoveGenerator.extendedMovesList", "link" : "provingground\/andrewscurtis\/MoveGenerator$.html#extendedMovesList(rank:Int):List[provingground.andrewscurtis.AtomicMove]", "kind" : "def"}, {"label" : "unifMoves", "tail" : "(rank: Int): FiniteDistribution[AtomicMove]", "member" : "provingground.andrewscurtis.MoveGenerator.unifMoves", "link" : "provingground\/andrewscurtis\/MoveGenerator$.html#unifMoves(rank:Int):provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove]", "kind" : "def"}, {"label" : "allMoves", "tail" : "(rank: Int): List[AtomicMove]", "member" : "provingground.andrewscurtis.MoveGenerator.allMoves", "link" : "provingground\/andrewscurtis\/MoveGenerator$.html#allMoves(rank:Int):List[provingground.andrewscurtis.AtomicMove]", "kind" : "def"}, {"label" : "eVec", "tail" : ": FiniteDistribution[Moves]", "member" : "provingground.andrewscurtis.MoveGenerator.eVec", "link" : "provingground\/andrewscurtis\/MoveGenerator$.html#eVec:provingground.FiniteDistribution[provingground.andrewscurtis.Moves]", "kind" : "lazy val"}, {"label" : "E", "tail" : ": Weighted[Moves]", "member" : "provingground.andrewscurtis.MoveGenerator.E", "link" : "provingground\/andrewscurtis\/MoveGenerator$.html#E:provingground.Weighted[provingground.andrewscurtis.Moves]", "kind" : "val"}, {"label" : "genAllMoves", "tail" : "(rank: Int, sz: Int): List[AtomicMove]", "member" : "provingground.andrewscurtis.MoveGenerator.genAllMoves", "link" : "provingground\/andrewscurtis\/MoveGenerator$.html#genAllMoves(rank:Int,sz:Int):List[provingground.andrewscurtis.AtomicMove]", "kind" : "def"}, {"label" : "genTranspose", "tail" : "(rank: Int): List[AtomicMove]", "member" : "provingground.andrewscurtis.MoveGenerator.genTranspose", "link" : "provingground\/andrewscurtis\/MoveGenerator$.html#genTranspose(rank:Int):List[provingground.andrewscurtis.AtomicMove]", "kind" : "def"}, {"label" : "genRtInvMult", "tail" : "(rank: Int): List[AtomicMove]", "member" : "provingground.andrewscurtis.MoveGenerator.genRtInvMult", "link" : "provingground\/andrewscurtis\/MoveGenerator$.html#genRtInvMult(rank:Int):List[provingground.andrewscurtis.AtomicMove]", "kind" : "def"}, {"label" : "genLftInvMult", "tail" : "(rank: Int): List[AtomicMove]", "member" : "provingground.andrewscurtis.MoveGenerator.genLftInvMult", "link" : "provingground\/andrewscurtis\/MoveGenerator$.html#genLftInvMult(rank:Int):List[provingground.andrewscurtis.AtomicMove]", "kind" : "def"}, {"label" : "genConj", "tail" : "(rank: Int, sz: Int): List[AtomicMove]", "member" : "provingground.andrewscurtis.MoveGenerator.genConj", "link" : "provingground\/andrewscurtis\/MoveGenerator$.html#genConj(rank:Int,sz:Int):List[provingground.andrewscurtis.AtomicMove]", "kind" : "def"}, {"label" : "genRtMult", "tail" : "(sz: Int): List[AtomicMove]", "member" : "provingground.andrewscurtis.MoveGenerator.genRtMult", "link" : "provingground\/andrewscurtis\/MoveGenerator$.html#genRtMult(sz:Int):List[provingground.andrewscurtis.AtomicMove]", "kind" : "def"}, {"label" : "genLftMult", "tail" : "(sz: Int): List[AtomicMove]", "member" : "provingground.andrewscurtis.MoveGenerator.genLftMult", "link" : "provingground\/andrewscurtis\/MoveGenerator$.html#genLftMult(sz:Int):List[provingground.andrewscurtis.AtomicMove]", "kind" : "def"}, {"label" : "genAllInv", "tail" : "(sz: Int): List[AtomicMove]", "member" : "provingground.andrewscurtis.MoveGenerator.genAllInv", "link" : "provingground\/andrewscurtis\/MoveGenerator$.html#genAllInv(sz:Int):List[provingground.andrewscurtis.AtomicMove]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/MoveGenerator$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/MoveGenerator$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/MoveGenerator$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/MoveGenerator$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/MoveGenerator$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/MoveGenerator$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/MoveGenerator$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/MoveGenerator$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/MoveGenerator$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/MoveGenerator$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/MoveGenerator$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/MoveGenerator$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/andrewscurtis\/MoveGenerator$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/MoveGenerator$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/MoveGenerator$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/MoveGenerator$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/MoveGenerator$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/MoveGenerator$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/MoveGenerator$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.andrewscurtis.Moves", "shortDescription" : "", "object" : "provingground\/andrewscurtis\/Moves$.html", "members_object" : [{"label" : "actOnTriv", "tail" : "(rank: Int)(mvs: Moves): Option[Presentation]", "member" : "provingground.andrewscurtis.Moves.actOnTriv", "link" : "provingground\/andrewscurtis\/Moves$.html#actOnTriv(rank:Int)(mvs:provingground.andrewscurtis.Moves):Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "liftResult", "tail" : "(f: (A) ⇒ A): (A) ⇒ Option[A]", "member" : "provingground.andrewscurtis.Moves.liftResult", "link" : "provingground\/andrewscurtis\/Moves$.html#liftResult[A](f:A=>A):A=>Option[A]", "kind" : "def"}, {"label" : "liftOption", "tail" : "(f: (A) ⇒ Option[A]): (Option[A]) ⇒ Option[A]", "member" : "provingground.andrewscurtis.Moves.liftOption", "link" : "provingground\/andrewscurtis\/Moves$.html#liftOption[A](f:A=>Option[A]):Option[A]=>Option[A]", "kind" : "def"}, {"label" : "toMoves", "tail" : "(move: AtomicMove): Moves", "member" : "provingground.andrewscurtis.Moves.toMoves", "link" : "provingground\/andrewscurtis\/Moves$.html#toMoves(move:provingground.andrewscurtis.AtomicMove):provingground.andrewscurtis.Moves", "kind" : "implicit def"}, {"label" : "fromString", "tail" : "(ws: Seq[String]): Option[Moves]", "member" : "provingground.andrewscurtis.Moves.fromString", "link" : "provingground\/andrewscurtis\/Moves$.html#fromString(ws:Seq[String]):Option[provingground.andrewscurtis.Moves]", "kind" : "def"}, {"label" : "apply", "tail" : "(ws: String*): Moves", "member" : "provingground.andrewscurtis.Moves.apply", "link" : "provingground\/andrewscurtis\/Moves$.html#apply(ws:String*):provingground.andrewscurtis.Moves", "kind" : "def"}, {"label" : "empty", "tail" : "(): Moves", "member" : "provingground.andrewscurtis.Moves.empty", "link" : "provingground\/andrewscurtis\/Moves$.html#empty:provingground.andrewscurtis.Moves", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/Moves$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/Moves$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/Moves$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/Moves$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/Moves$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/Moves$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/Moves$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/Moves$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/Moves$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/Moves$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/Moves$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/Moves$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/andrewscurtis\/Moves$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/Moves$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/Moves$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/Moves$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/Moves$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/Moves$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/Moves$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/andrewscurtis\/Moves.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/andrewscurtis\/Moves.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Moves) ⇒ Boolean, msg: ⇒ Any): Moves", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/Moves.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Moves) ⇒ Boolean): Moves", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/Moves.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Moves", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/Moves.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Moves", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/Moves.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Moves, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/andrewscurtis\/Moves.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Moves, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/andrewscurtis\/Moves.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "idLast", "tail" : "(): Moves", "member" : "provingground.andrewscurtis.Moves.idLast", "link" : "provingground\/andrewscurtis\/Moves.html#idLast:provingground.andrewscurtis.Moves", "kind" : "def"}, {"label" : "actOnTriv", "tail" : "(rank: Int): Option[Presentation]", "member" : "provingground.andrewscurtis.Moves.actOnTriv", "link" : "provingground\/andrewscurtis\/Moves.html#actOnTriv(rank:Int):Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "compose", "tail" : "(that: Moves): Moves", "member" : "provingground.andrewscurtis.Moves.compose", "link" : "provingground\/andrewscurtis\/Moves.html#compose(that:provingground.andrewscurtis.Moves):provingground.andrewscurtis.Moves", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "provingground.andrewscurtis.Moves.length", "link" : "provingground\/andrewscurtis\/Moves.html#length:Int", "kind" : "def"}, {"label" : "apply", "tail" : "(that: AtomicMove): Moves", "member" : "provingground.andrewscurtis.Moves.apply", "link" : "provingground\/andrewscurtis\/Moves.html#apply(that:provingground.andrewscurtis.AtomicMove):provingground.andrewscurtis.Moves", "kind" : "def"}, {"label" : "apply", "tail" : "(that: (Presentation) ⇒ Option[Presentation]): (Presentation) ⇒ Option[Presentation]", "member" : "provingground.andrewscurtis.Moves.apply", "link" : "provingground\/andrewscurtis\/Moves.html#apply(that:provingground.andrewscurtis.FreeGroups.Presentation=>Option[provingground.andrewscurtis.FreeGroups.Presentation]):provingground.andrewscurtis.FreeGroups.Presentation=>Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "apply", "tail" : "(that: Moves): Moves", "member" : "provingground.andrewscurtis.Moves.apply", "link" : "provingground\/andrewscurtis\/Moves.html#apply(that:provingground.andrewscurtis.Moves):provingground.andrewscurtis.Moves", "kind" : "def"}, {"label" : "apply", "tail" : "(pres: Presentation): Option[Presentation]", "member" : "provingground.andrewscurtis.Moves.apply", "link" : "provingground\/andrewscurtis\/Moves.html#apply(pres:provingground.andrewscurtis.FreeGroups.Presentation):Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "reduce", "tail" : "(): (Presentation) ⇒ Option[Presentation]", "member" : "provingground.andrewscurtis.Moves.reduce", "link" : "provingground\/andrewscurtis\/Moves.html#reduce:provingground.andrewscurtis.FreeGroups.Presentation=>Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"member" : "provingground.andrewscurtis.Moves#<init>", "error" : "unsupported entity"}, {"label" : "moves", "tail" : ": List[AtomicMove]", "member" : "provingground.andrewscurtis.Moves.moves", "link" : "provingground\/andrewscurtis\/Moves.html#moves:List[provingground.andrewscurtis.AtomicMove]", "kind" : "val"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "provingground\/andrewscurtis\/Moves.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "provingground\/andrewscurtis\/Moves.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/Moves.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/Moves.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "provingground\/andrewscurtis\/Moves.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "provingground\/andrewscurtis\/Moves.html#==(x$1:Any):Boolean", "kind" : "final def"}], "case class" : "provingground\/andrewscurtis\/Moves.html", "kind" : "case class"}, {"name" : "provingground.andrewscurtis.Param", "shortDescription" : "", "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/andrewscurtis\/Param.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/andrewscurtis\/Param.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Param) ⇒ Boolean, msg: ⇒ Any): Param", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/Param.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Param) ⇒ Boolean): Param", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/Param.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Param", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/Param.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Param", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/Param.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Param, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/andrewscurtis\/Param.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Param, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/andrewscurtis\/Param.html#->[B](y:B):(A,B)", "kind" : "def"}, {"member" : "provingground.andrewscurtis.Param#<init>", "error" : "unsupported entity"}, {"label" : "wrdCntn", "tail" : ": Double", "member" : "provingground.andrewscurtis.Param.wrdCntn", "link" : "provingground\/andrewscurtis\/Param.html#wrdCntn:Double", "kind" : "val"}, {"label" : "size", "tail" : ": Int", "member" : "provingground.andrewscurtis.Param.size", "link" : "provingground\/andrewscurtis\/Param.html#size:Int", "kind" : "val"}, {"label" : "rank", "tail" : ": Int", "member" : "provingground.andrewscurtis.Param.rank", "link" : "provingground\/andrewscurtis\/Param.html#rank:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/Param.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/Param.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/Param.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/Param.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/Param.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/Param.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/Param.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/Param.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/Param.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/Param.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/Param.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/Param.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/Param.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/Param.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/Param.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/Param.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/andrewscurtis\/Param.html", "kind" : "case class"}, {"name" : "provingground.andrewscurtis.RtMult", "shortDescription" : "", "members_case class" : [{"label" : "idLast", "tail" : "(): Moves", "member" : "provingground.andrewscurtis.Moves.toMoves.idLast", "link" : "provingground\/andrewscurtis\/RtMult.html#idLast:provingground.andrewscurtis.Moves", "kind" : "def"}, {"label" : "actOnTriv", "tail" : "(rank: Int): Option[Presentation]", "member" : "provingground.andrewscurtis.Moves.toMoves.actOnTriv", "link" : "provingground\/andrewscurtis\/RtMult.html#actOnTriv(rank:Int):Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "provingground.andrewscurtis.Moves.toMoves.length", "link" : "provingground\/andrewscurtis\/RtMult.html#length:Int", "kind" : "def"}, {"label" : "reduce", "tail" : "(): (Presentation) ⇒ Option[Presentation]", "member" : "provingground.andrewscurtis.Moves.toMoves.reduce", "link" : "provingground\/andrewscurtis\/RtMult.html#reduce:provingground.andrewscurtis.FreeGroups.Presentation=>Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "moves", "tail" : ": List[AtomicMove]", "member" : "provingground.andrewscurtis.Moves.toMoves.moves", "link" : "provingground\/andrewscurtis\/RtMult.html#moves:List[provingground.andrewscurtis.AtomicMove]", "kind" : "val"}, {"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/andrewscurtis\/RtMult.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/andrewscurtis\/RtMult.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (RtMult) ⇒ Boolean, msg: ⇒ Any): RtMult", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/RtMult.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (RtMult) ⇒ Boolean): RtMult", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/RtMult.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): RtMult", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/RtMult.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): RtMult", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/RtMult.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (RtMult, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/andrewscurtis\/RtMult.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (RtMult, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/andrewscurtis\/RtMult.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "apply", "tail" : "(pres: Presentation): Option[Presentation]", "member" : "provingground.andrewscurtis.RtMult.apply", "link" : "provingground\/andrewscurtis\/RtMult.html#apply(pres:provingground.andrewscurtis.FreeGroups.Presentation):Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"member" : "provingground.andrewscurtis.RtMult#<init>", "error" : "unsupported entity"}, {"label" : "l", "tail" : ": Int", "member" : "provingground.andrewscurtis.RtMult.l", "link" : "provingground\/andrewscurtis\/RtMult.html#l:Int", "kind" : "val"}, {"label" : "k", "tail" : ": Int", "member" : "provingground.andrewscurtis.RtMult.k", "link" : "provingground\/andrewscurtis\/RtMult.html#k:Int", "kind" : "val"}, {"label" : "toString", "tail" : "(): String", "member" : "provingground.andrewscurtis.AtomicMove.toString", "link" : "provingground\/andrewscurtis\/RtMult.html#toString():String", "kind" : "def"}, {"label" : "toLatex", "tail" : "(): String", "member" : "provingground.andrewscurtis.AtomicMove.toLatex", "link" : "provingground\/andrewscurtis\/RtMult.html#toLatex:String", "kind" : "def"}, {"label" : "toPlainString", "tail" : "(): String", "member" : "provingground.andrewscurtis.AtomicMove.toPlainString", "link" : "provingground\/andrewscurtis\/RtMult.html#toPlainString:String", "kind" : "def"}, {"label" : "toFunc", "tail" : "(): (Presentation) ⇒ Option[Presentation]", "member" : "provingground.andrewscurtis.AtomicMove.toFunc", "link" : "provingground\/andrewscurtis\/RtMult.html#toFunc:provingground.andrewscurtis.FreeGroups.Presentation=>Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "compose", "tail" : "(mf: AtomicMove): Moves", "member" : "provingground.andrewscurtis.AtomicMove.compose", "link" : "provingground\/andrewscurtis\/RtMult.html#compose(mf:provingground.andrewscurtis.AtomicMove):provingground.andrewscurtis.Moves", "kind" : "def"}, {"label" : "actOnPres", "tail" : "(fdPres: FiniteDistribution[Presentation]): FiniteDistribution[Presentation]", "member" : "provingground.andrewscurtis.AtomicMove.actOnPres", "link" : "provingground\/andrewscurtis\/RtMult.html#actOnPres(fdPres:provingground.FiniteDistribution[provingground.andrewscurtis.FreeGroups.Presentation]):provingground.FiniteDistribution[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "movesDF", "tail" : "(): AdjDiffbleFunction[FiniteDistribution[Moves], FiniteDistribution[Moves]]", "member" : "provingground.andrewscurtis.AtomicMove.movesDF", "link" : "provingground\/andrewscurtis\/RtMult.html#movesDF:provingground.learning.AdjDiffbleFunction[provingground.FiniteDistribution[provingground.andrewscurtis.Moves],provingground.FiniteDistribution[provingground.andrewscurtis.Moves]]", "kind" : "def"}, {"label" : "actOnMoves", "tail" : "(moves: Moves): Option[Moves]", "member" : "provingground.andrewscurtis.AtomicMove.actOnMoves", "link" : "provingground\/andrewscurtis\/RtMult.html#actOnMoves(moves:provingground.andrewscurtis.Moves):Option[provingground.andrewscurtis.Moves]", "kind" : "def"}, {"label" : "apply", "tail" : "(fdVertices: FiniteDistribution[Moves]): FiniteDistribution[Moves]", "member" : "provingground.andrewscurtis.AtomicMove.apply", "link" : "provingground\/andrewscurtis\/RtMult.html#apply(fdVertices:provingground.FiniteDistribution[provingground.andrewscurtis.Moves]):provingground.FiniteDistribution[provingground.andrewscurtis.Moves]", "kind" : "def"}, {"label" : "apply", "tail" : "(moves: Moves): Option[Moves]", "member" : "provingground.andrewscurtis.AtomicMove.apply", "link" : "provingground\/andrewscurtis\/RtMult.html#apply(moves:provingground.andrewscurtis.Moves):Option[provingground.andrewscurtis.Moves]", "kind" : "def"}, {"label" : "apply", "tail" : "(opPres: Option[Presentation]): Option[Presentation]", "member" : "provingground.andrewscurtis.AtomicMove.apply", "link" : "provingground\/andrewscurtis\/RtMult.html#apply(opPres:Option[provingground.andrewscurtis.FreeGroups.Presentation]):Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "andThen", "tail" : "(g: (Option[Moves]) ⇒ A): (Moves) ⇒ A", "member" : "scala.Function1.andThen", "link" : "provingground\/andrewscurtis\/RtMult.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) ⇒ Moves): (A) ⇒ Option[Moves]", "member" : "scala.Function1.compose", "link" : "provingground\/andrewscurtis\/RtMult.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/RtMult.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/RtMult.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/RtMult.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/RtMult.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/RtMult.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/RtMult.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/RtMult.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/RtMult.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/RtMult.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/RtMult.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/RtMult.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/RtMult.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/RtMult.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/RtMult.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/RtMult.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/RtMult.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/andrewscurtis\/RtMult.html", "kind" : "case class"}, {"name" : "provingground.andrewscurtis.RtMultInv", "shortDescription" : "", "members_case class" : [{"label" : "idLast", "tail" : "(): Moves", "member" : "provingground.andrewscurtis.Moves.toMoves.idLast", "link" : "provingground\/andrewscurtis\/RtMultInv.html#idLast:provingground.andrewscurtis.Moves", "kind" : "def"}, {"label" : "actOnTriv", "tail" : "(rank: Int): Option[Presentation]", "member" : "provingground.andrewscurtis.Moves.toMoves.actOnTriv", "link" : "provingground\/andrewscurtis\/RtMultInv.html#actOnTriv(rank:Int):Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "provingground.andrewscurtis.Moves.toMoves.length", "link" : "provingground\/andrewscurtis\/RtMultInv.html#length:Int", "kind" : "def"}, {"label" : "reduce", "tail" : "(): (Presentation) ⇒ Option[Presentation]", "member" : "provingground.andrewscurtis.Moves.toMoves.reduce", "link" : "provingground\/andrewscurtis\/RtMultInv.html#reduce:provingground.andrewscurtis.FreeGroups.Presentation=>Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "moves", "tail" : ": List[AtomicMove]", "member" : "provingground.andrewscurtis.Moves.toMoves.moves", "link" : "provingground\/andrewscurtis\/RtMultInv.html#moves:List[provingground.andrewscurtis.AtomicMove]", "kind" : "val"}, {"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/andrewscurtis\/RtMultInv.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/andrewscurtis\/RtMultInv.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (RtMultInv) ⇒ Boolean, msg: ⇒ Any): RtMultInv", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/RtMultInv.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (RtMultInv) ⇒ Boolean): RtMultInv", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/RtMultInv.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): RtMultInv", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/RtMultInv.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): RtMultInv", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/RtMultInv.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (RtMultInv, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/andrewscurtis\/RtMultInv.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (RtMultInv, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/andrewscurtis\/RtMultInv.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "apply", "tail" : "(pres: Presentation): Option[Presentation]", "member" : "provingground.andrewscurtis.RtMultInv.apply", "link" : "provingground\/andrewscurtis\/RtMultInv.html#apply(pres:provingground.andrewscurtis.FreeGroups.Presentation):Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"member" : "provingground.andrewscurtis.RtMultInv#<init>", "error" : "unsupported entity"}, {"label" : "l", "tail" : ": Int", "member" : "provingground.andrewscurtis.RtMultInv.l", "link" : "provingground\/andrewscurtis\/RtMultInv.html#l:Int", "kind" : "val"}, {"label" : "k", "tail" : ": Int", "member" : "provingground.andrewscurtis.RtMultInv.k", "link" : "provingground\/andrewscurtis\/RtMultInv.html#k:Int", "kind" : "val"}, {"label" : "toString", "tail" : "(): String", "member" : "provingground.andrewscurtis.AtomicMove.toString", "link" : "provingground\/andrewscurtis\/RtMultInv.html#toString():String", "kind" : "def"}, {"label" : "toLatex", "tail" : "(): String", "member" : "provingground.andrewscurtis.AtomicMove.toLatex", "link" : "provingground\/andrewscurtis\/RtMultInv.html#toLatex:String", "kind" : "def"}, {"label" : "toPlainString", "tail" : "(): String", "member" : "provingground.andrewscurtis.AtomicMove.toPlainString", "link" : "provingground\/andrewscurtis\/RtMultInv.html#toPlainString:String", "kind" : "def"}, {"label" : "toFunc", "tail" : "(): (Presentation) ⇒ Option[Presentation]", "member" : "provingground.andrewscurtis.AtomicMove.toFunc", "link" : "provingground\/andrewscurtis\/RtMultInv.html#toFunc:provingground.andrewscurtis.FreeGroups.Presentation=>Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "compose", "tail" : "(mf: AtomicMove): Moves", "member" : "provingground.andrewscurtis.AtomicMove.compose", "link" : "provingground\/andrewscurtis\/RtMultInv.html#compose(mf:provingground.andrewscurtis.AtomicMove):provingground.andrewscurtis.Moves", "kind" : "def"}, {"label" : "actOnPres", "tail" : "(fdPres: FiniteDistribution[Presentation]): FiniteDistribution[Presentation]", "member" : "provingground.andrewscurtis.AtomicMove.actOnPres", "link" : "provingground\/andrewscurtis\/RtMultInv.html#actOnPres(fdPres:provingground.FiniteDistribution[provingground.andrewscurtis.FreeGroups.Presentation]):provingground.FiniteDistribution[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "movesDF", "tail" : "(): AdjDiffbleFunction[FiniteDistribution[Moves], FiniteDistribution[Moves]]", "member" : "provingground.andrewscurtis.AtomicMove.movesDF", "link" : "provingground\/andrewscurtis\/RtMultInv.html#movesDF:provingground.learning.AdjDiffbleFunction[provingground.FiniteDistribution[provingground.andrewscurtis.Moves],provingground.FiniteDistribution[provingground.andrewscurtis.Moves]]", "kind" : "def"}, {"label" : "actOnMoves", "tail" : "(moves: Moves): Option[Moves]", "member" : "provingground.andrewscurtis.AtomicMove.actOnMoves", "link" : "provingground\/andrewscurtis\/RtMultInv.html#actOnMoves(moves:provingground.andrewscurtis.Moves):Option[provingground.andrewscurtis.Moves]", "kind" : "def"}, {"label" : "apply", "tail" : "(fdVertices: FiniteDistribution[Moves]): FiniteDistribution[Moves]", "member" : "provingground.andrewscurtis.AtomicMove.apply", "link" : "provingground\/andrewscurtis\/RtMultInv.html#apply(fdVertices:provingground.FiniteDistribution[provingground.andrewscurtis.Moves]):provingground.FiniteDistribution[provingground.andrewscurtis.Moves]", "kind" : "def"}, {"label" : "apply", "tail" : "(moves: Moves): Option[Moves]", "member" : "provingground.andrewscurtis.AtomicMove.apply", "link" : "provingground\/andrewscurtis\/RtMultInv.html#apply(moves:provingground.andrewscurtis.Moves):Option[provingground.andrewscurtis.Moves]", "kind" : "def"}, {"label" : "apply", "tail" : "(opPres: Option[Presentation]): Option[Presentation]", "member" : "provingground.andrewscurtis.AtomicMove.apply", "link" : "provingground\/andrewscurtis\/RtMultInv.html#apply(opPres:Option[provingground.andrewscurtis.FreeGroups.Presentation]):Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "andThen", "tail" : "(g: (Option[Moves]) ⇒ A): (Moves) ⇒ A", "member" : "scala.Function1.andThen", "link" : "provingground\/andrewscurtis\/RtMultInv.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) ⇒ Moves): (A) ⇒ Option[Moves]", "member" : "scala.Function1.compose", "link" : "provingground\/andrewscurtis\/RtMultInv.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/RtMultInv.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/RtMultInv.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/RtMultInv.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/RtMultInv.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/RtMultInv.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/RtMultInv.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/RtMultInv.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/RtMultInv.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/RtMultInv.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/RtMultInv.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/RtMultInv.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/RtMultInv.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/RtMultInv.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/RtMultInv.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/RtMultInv.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/RtMultInv.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/andrewscurtis\/RtMultInv.html", "kind" : "case class"}, {"name" : "provingground.andrewscurtis.SimpleAcEvolution", "shortDescription" : "", "object" : "provingground\/andrewscurtis\/SimpleAcEvolution$.html", "members_object" : [{"label" : "PickledPath", "tail" : "", "member" : "provingground.andrewscurtis.SimpleAcEvolution.PickledPath", "link" : "provingground\/andrewscurtis\/SimpleAcEvolution$.html#PickledPathextendsProductwithSerializable", "kind" : "case class"}, {"label" : "Path", "tail" : "", "member" : "provingground.andrewscurtis.SimpleAcEvolution.Path", "link" : "provingground\/andrewscurtis\/SimpleAcEvolution$.html#Path", "kind" : "object"}, {"label" : "Path", "tail" : "", "member" : "provingground.andrewscurtis.SimpleAcEvolution.Path", "link" : "provingground\/andrewscurtis\/SimpleAcEvolution$.html#PathextendsProductwithSerializable", "kind" : "case class"}, {"label" : "PickledState", "tail" : "", "member" : "provingground.andrewscurtis.SimpleAcEvolution.PickledState", "link" : "provingground\/andrewscurtis\/SimpleAcEvolution$.html#PickledStateextendsProductwithSerializable", "kind" : "case class"}, {"label" : "State", "tail" : "", "member" : "provingground.andrewscurtis.SimpleAcEvolution.State", "link" : "provingground\/andrewscurtis\/SimpleAcEvolution$.html#StateextendsProductwithSerializable", "kind" : "case class"}, {"label" : "toPresentation", "tail" : "(rank: Int, fdV: FiniteDistribution[Moves]): FiniteDistribution[Presentation]", "member" : "provingground.andrewscurtis.SimpleAcEvolution.toPresentation", "link" : "provingground\/andrewscurtis\/SimpleAcEvolution$.html#toPresentation(rank:Int,fdV:provingground.FiniteDistribution[provingground.andrewscurtis.Moves]):provingground.FiniteDistribution[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/SimpleAcEvolution$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/SimpleAcEvolution$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/SimpleAcEvolution$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/SimpleAcEvolution$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/SimpleAcEvolution$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/SimpleAcEvolution$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/SimpleAcEvolution$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/SimpleAcEvolution$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/SimpleAcEvolution$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/SimpleAcEvolution$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/SimpleAcEvolution$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/SimpleAcEvolution$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/andrewscurtis\/SimpleAcEvolution$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/SimpleAcEvolution$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/SimpleAcEvolution$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/SimpleAcEvolution$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/SimpleAcEvolution$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/SimpleAcEvolution$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/SimpleAcEvolution$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.andrewscurtis.Transpose", "shortDescription" : "", "members_case class" : [{"label" : "idLast", "tail" : "(): Moves", "member" : "provingground.andrewscurtis.Moves.toMoves.idLast", "link" : "provingground\/andrewscurtis\/Transpose.html#idLast:provingground.andrewscurtis.Moves", "kind" : "def"}, {"label" : "actOnTriv", "tail" : "(rank: Int): Option[Presentation]", "member" : "provingground.andrewscurtis.Moves.toMoves.actOnTriv", "link" : "provingground\/andrewscurtis\/Transpose.html#actOnTriv(rank:Int):Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "provingground.andrewscurtis.Moves.toMoves.length", "link" : "provingground\/andrewscurtis\/Transpose.html#length:Int", "kind" : "def"}, {"label" : "reduce", "tail" : "(): (Presentation) ⇒ Option[Presentation]", "member" : "provingground.andrewscurtis.Moves.toMoves.reduce", "link" : "provingground\/andrewscurtis\/Transpose.html#reduce:provingground.andrewscurtis.FreeGroups.Presentation=>Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "moves", "tail" : ": List[AtomicMove]", "member" : "provingground.andrewscurtis.Moves.toMoves.moves", "link" : "provingground\/andrewscurtis\/Transpose.html#moves:List[provingground.andrewscurtis.AtomicMove]", "kind" : "val"}, {"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/andrewscurtis\/Transpose.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/andrewscurtis\/Transpose.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Transpose) ⇒ Boolean, msg: ⇒ Any): Transpose", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/Transpose.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Transpose) ⇒ Boolean): Transpose", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/Transpose.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Transpose", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/Transpose.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Transpose", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/Transpose.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Transpose, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/andrewscurtis\/Transpose.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Transpose, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/andrewscurtis\/Transpose.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "apply", "tail" : "(pres: Presentation): Option[Presentation]", "member" : "provingground.andrewscurtis.Transpose.apply", "link" : "provingground\/andrewscurtis\/Transpose.html#apply(pres:provingground.andrewscurtis.FreeGroups.Presentation):Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"member" : "provingground.andrewscurtis.Transpose#<init>", "error" : "unsupported entity"}, {"label" : "l", "tail" : ": Int", "member" : "provingground.andrewscurtis.Transpose.l", "link" : "provingground\/andrewscurtis\/Transpose.html#l:Int", "kind" : "val"}, {"label" : "k", "tail" : ": Int", "member" : "provingground.andrewscurtis.Transpose.k", "link" : "provingground\/andrewscurtis\/Transpose.html#k:Int", "kind" : "val"}, {"label" : "toString", "tail" : "(): String", "member" : "provingground.andrewscurtis.AtomicMove.toString", "link" : "provingground\/andrewscurtis\/Transpose.html#toString():String", "kind" : "def"}, {"label" : "toLatex", "tail" : "(): String", "member" : "provingground.andrewscurtis.AtomicMove.toLatex", "link" : "provingground\/andrewscurtis\/Transpose.html#toLatex:String", "kind" : "def"}, {"label" : "toPlainString", "tail" : "(): String", "member" : "provingground.andrewscurtis.AtomicMove.toPlainString", "link" : "provingground\/andrewscurtis\/Transpose.html#toPlainString:String", "kind" : "def"}, {"label" : "toFunc", "tail" : "(): (Presentation) ⇒ Option[Presentation]", "member" : "provingground.andrewscurtis.AtomicMove.toFunc", "link" : "provingground\/andrewscurtis\/Transpose.html#toFunc:provingground.andrewscurtis.FreeGroups.Presentation=>Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "compose", "tail" : "(mf: AtomicMove): Moves", "member" : "provingground.andrewscurtis.AtomicMove.compose", "link" : "provingground\/andrewscurtis\/Transpose.html#compose(mf:provingground.andrewscurtis.AtomicMove):provingground.andrewscurtis.Moves", "kind" : "def"}, {"label" : "actOnPres", "tail" : "(fdPres: FiniteDistribution[Presentation]): FiniteDistribution[Presentation]", "member" : "provingground.andrewscurtis.AtomicMove.actOnPres", "link" : "provingground\/andrewscurtis\/Transpose.html#actOnPres(fdPres:provingground.FiniteDistribution[provingground.andrewscurtis.FreeGroups.Presentation]):provingground.FiniteDistribution[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "movesDF", "tail" : "(): AdjDiffbleFunction[FiniteDistribution[Moves], FiniteDistribution[Moves]]", "member" : "provingground.andrewscurtis.AtomicMove.movesDF", "link" : "provingground\/andrewscurtis\/Transpose.html#movesDF:provingground.learning.AdjDiffbleFunction[provingground.FiniteDistribution[provingground.andrewscurtis.Moves],provingground.FiniteDistribution[provingground.andrewscurtis.Moves]]", "kind" : "def"}, {"label" : "actOnMoves", "tail" : "(moves: Moves): Option[Moves]", "member" : "provingground.andrewscurtis.AtomicMove.actOnMoves", "link" : "provingground\/andrewscurtis\/Transpose.html#actOnMoves(moves:provingground.andrewscurtis.Moves):Option[provingground.andrewscurtis.Moves]", "kind" : "def"}, {"label" : "apply", "tail" : "(fdVertices: FiniteDistribution[Moves]): FiniteDistribution[Moves]", "member" : "provingground.andrewscurtis.AtomicMove.apply", "link" : "provingground\/andrewscurtis\/Transpose.html#apply(fdVertices:provingground.FiniteDistribution[provingground.andrewscurtis.Moves]):provingground.FiniteDistribution[provingground.andrewscurtis.Moves]", "kind" : "def"}, {"label" : "apply", "tail" : "(moves: Moves): Option[Moves]", "member" : "provingground.andrewscurtis.AtomicMove.apply", "link" : "provingground\/andrewscurtis\/Transpose.html#apply(moves:provingground.andrewscurtis.Moves):Option[provingground.andrewscurtis.Moves]", "kind" : "def"}, {"label" : "apply", "tail" : "(opPres: Option[Presentation]): Option[Presentation]", "member" : "provingground.andrewscurtis.AtomicMove.apply", "link" : "provingground\/andrewscurtis\/Transpose.html#apply(opPres:Option[provingground.andrewscurtis.FreeGroups.Presentation]):Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "andThen", "tail" : "(g: (Option[Moves]) ⇒ A): (Moves) ⇒ A", "member" : "scala.Function1.andThen", "link" : "provingground\/andrewscurtis\/Transpose.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) ⇒ Moves): (A) ⇒ Option[Moves]", "member" : "scala.Function1.compose", "link" : "provingground\/andrewscurtis\/Transpose.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/Transpose.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/Transpose.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/Transpose.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/Transpose.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/Transpose.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/Transpose.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/Transpose.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/Transpose.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/Transpose.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/Transpose.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/Transpose.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/Transpose.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/Transpose.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/Transpose.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/Transpose.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/Transpose.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/andrewscurtis\/Transpose.html", "kind" : "case class"}], "provingground.interface" : [{"name" : "provingground.interface.Header", "shortDescription" : "", "object" : "provingground\/interface\/Header$.html", "members_object" : [{"label" : "evolve", "tail" : ": String", "member" : "provingground.interface.Header.evolve", "link" : "provingground\/interface\/Header$.html#evolve:String", "kind" : "val"}, {"label" : "fdMVP", "tail" : ": String", "member" : "provingground.interface.Header.fdMVP", "link" : "provingground\/interface\/Header$.html#fdMVP:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/interface\/Header$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/interface\/Header$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/interface\/Header$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/interface\/Header$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/interface\/Header$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/interface\/Header$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/interface\/Header$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/Header$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/Header$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/Header$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/interface\/Header$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/interface\/Header$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/interface\/Header$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/interface\/Header$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/interface\/Header$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/interface\/Header$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/interface\/Header$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/interface\/Header$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/interface\/Header$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.interface.JsFunc", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/interface\/JsFunc.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/interface\/JsFunc.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (JsFunc[F]) ⇒ Boolean, msg: ⇒ Any): JsFunc[F]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/interface\/JsFunc.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (JsFunc[F]) ⇒ Boolean): JsFunc[F]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/interface\/JsFunc.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): JsFunc[F]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/interface\/JsFunc.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): JsFunc[F]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/interface\/JsFunc.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (JsFunc[F], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/interface\/JsFunc.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (JsFunc[F], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/interface\/JsFunc.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/interface\/JsFunc.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/interface\/JsFunc.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/interface\/JsFunc.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/interface\/JsFunc.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/interface\/JsFunc.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/interface\/JsFunc.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/interface\/JsFunc.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/JsFunc.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/JsFunc.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/JsFunc.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/interface\/JsFunc.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/interface\/JsFunc.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/interface\/JsFunc.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/interface\/JsFunc.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/interface\/JsFunc.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/interface\/JsFunc.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/interface\/JsFunc.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/interface\/JsFunc.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/interface\/JsFunc.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "decode", "tail" : "(js: Value): F[Value]", "member" : "provingground.interface.JsFunc.decode", "link" : "provingground\/interface\/JsFunc.html#decode(js:upickle.Js.Value):F[upickle.Js.Value]", "kind" : "abstract def"}, {"label" : "encode", "tail" : "(t: F[Value]): Value", "member" : "provingground.interface.JsFunc.encode", "link" : "provingground\/interface\/JsFunc.html#encode(t:F[upickle.Js.Value]):upickle.Js.Value", "kind" : "abstract def"}], "shortDescription" : "", "object" : "provingground\/interface\/JsFunc$.html", "members_object" : [{"label" : "jsToBuild", "tail" : "(name: String, header: String)(build: (F[I]) ⇒ I)(arg0: Traverse[F], jsF: JsFunc[F]): Translator[Value, I]", "member" : "provingground.interface.JsFunc.jsToBuild", "link" : "provingground\/interface\/JsFunc$.html#jsToBuild[I,F[_]](name:String,header:String)(build:F[I]=>I)(implicitevidence$2:cats.Traverse[F],implicitjsF:provingground.interface.JsFunc[F]):provingground.translation.Translator[upickle.Js.Value,I]", "kind" : "def"}, {"label" : "jsToOpt", "tail" : "(name: String, header: String)(build: (F[I]) ⇒ Option[I])(arg0: Traverse[F], jsF: JsFunc[F]): Translator[Value, I]", "member" : "provingground.interface.JsFunc.jsToOpt", "link" : "provingground\/interface\/JsFunc$.html#jsToOpt[I,F[_]](name:String,header:String)(build:F[I]=>Option[I])(implicitevidence$1:cats.Traverse[F],implicitjsF:provingground.interface.JsFunc[F]):provingground.translation.Translator[upickle.Js.Value,I]", "kind" : "def"}, {"label" : "toJs", "tail" : "(pat: Pattern[I, F])(name: String, header: String)(jsF: JsFunc[F]): Translator[I, Value]", "member" : "provingground.interface.JsFunc.toJs", "link" : "provingground\/interface\/JsFunc$.html#toJs[I,F[_]](pat:provingground.translation.Translator.Pattern[I,F])(name:String,header:String)(implicitjsF:provingground.interface.JsFunc[F]):provingground.translation.Translator[I,upickle.Js.Value]", "kind" : "def"}, {"label" : "pairJS", "tail" : "(xJs: JsFunc[X], yJs: JsFunc[Y]): JsFunc[[A](X[A], Y[A])]", "member" : "provingground.interface.JsFunc.pairJS", "link" : "provingground\/interface\/JsFunc$.html#pairJS[X[_],Y[_]](implicitxJs:provingground.interface.JsFunc[X],implicityJs:provingground.interface.JsFunc[Y]):provingground.interface.JsFunc[[A](X[A],Y[A])]", "kind" : "implicit def"}, {"label" : "vecJs", "tail" : ": JsFunc[Vector]", "member" : "provingground.interface.JsFunc.vecJs", "link" : "provingground\/interface\/JsFunc$.html#vecJs:provingground.interface.JsFunc[Vector]", "kind" : "implicit val"}, {"label" : "unitJs", "tail" : ": JsFunc[Un]", "member" : "provingground.interface.JsFunc.unitJs", "link" : "provingground\/interface\/JsFunc$.html#unitJs:provingground.interface.JsFunc[provingground.translation.Functors.Un]", "kind" : "implicit val"}, {"label" : "strJs", "tail" : ": JsFunc[S]", "member" : "provingground.interface.JsFunc.strJs", "link" : "provingground\/interface\/JsFunc$.html#strJs:provingground.interface.JsFunc[provingground.translation.Functors.S]", "kind" : "implicit val"}, {"label" : "intJs", "tail" : ": JsFunc[N]", "member" : "provingground.interface.JsFunc.intJs", "link" : "provingground\/interface\/JsFunc$.html#intJs:provingground.interface.JsFunc[provingground.translation.Functors.N]", "kind" : "implicit val"}, {"label" : "idJS", "tail" : ": JsFunc[Id]", "member" : "provingground.interface.JsFunc.idJS", "link" : "provingground\/interface\/JsFunc$.html#idJS:provingground.interface.JsFunc[cats.Id]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/interface\/JsFunc$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/interface\/JsFunc$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/interface\/JsFunc$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/interface\/JsFunc$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/interface\/JsFunc$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/interface\/JsFunc$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/interface\/JsFunc$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/JsFunc$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/JsFunc$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/JsFunc$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/interface\/JsFunc$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/interface\/JsFunc$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/interface\/JsFunc$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/interface\/JsFunc$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/interface\/JsFunc$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/interface\/JsFunc$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/interface\/JsFunc$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/interface\/JsFunc$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/interface\/JsFunc$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/interface\/JsFunc.html", "kind" : "trait"}, {"name" : "provingground.interface.LeanExportElem", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/interface\/LeanExportElem.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/interface\/LeanExportElem.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (LeanExportElem) ⇒ Boolean, msg: ⇒ Any): LeanExportElem", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/interface\/LeanExportElem.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (LeanExportElem) ⇒ Boolean): LeanExportElem", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/interface\/LeanExportElem.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): LeanExportElem", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/interface\/LeanExportElem.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): LeanExportElem", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/interface\/LeanExportElem.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (LeanExportElem, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/interface\/LeanExportElem.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (LeanExportElem, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/interface\/LeanExportElem.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/interface\/LeanExportElem.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/interface\/LeanExportElem.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/interface\/LeanExportElem.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/interface\/LeanExportElem.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/interface\/LeanExportElem.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/interface\/LeanExportElem.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/interface\/LeanExportElem.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/LeanExportElem.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/LeanExportElem.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/LeanExportElem.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/interface\/LeanExportElem.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/interface\/LeanExportElem.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/interface\/LeanExportElem.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/interface\/LeanExportElem.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/interface\/LeanExportElem.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/interface\/LeanExportElem.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/interface\/LeanExportElem.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/interface\/LeanExportElem.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/interface\/LeanExportElem.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "object" : "provingground\/interface\/LeanExportElem$.html", "members_object" : [{"label" : "InducDefn", "tail" : "", "member" : "provingground.interface.LeanExportElem.InducDefn", "link" : "provingground\/interface\/LeanExportElem$.html#InducDefnextendsProductwithSerializable", "kind" : "case class"}, {"label" : "Intro", "tail" : "", "member" : "provingground.interface.LeanExportElem.Intro", "link" : "provingground\/interface\/LeanExportElem$.html#IntroextendsLeanExportElemwithProductwithSerializable", "kind" : "case class"}, {"label" : "Ind", "tail" : "", "member" : "provingground.interface.LeanExportElem.Ind", "link" : "provingground\/interface\/LeanExportElem$.html#Ind", "kind" : "object"}, {"label" : "Ind", "tail" : "", "member" : "provingground.interface.LeanExportElem.Ind", "link" : "provingground\/interface\/LeanExportElem$.html#IndextendsLeanExportElemwithProductwithSerializable", "kind" : "case class"}, {"label" : "Axiom", "tail" : "", "member" : "provingground.interface.LeanExportElem.Axiom", "link" : "provingground\/interface\/LeanExportElem$.html#Axiom", "kind" : "object"}, {"label" : "Axiom", "tail" : "", "member" : "provingground.interface.LeanExportElem.Axiom", "link" : "provingground\/interface\/LeanExportElem$.html#AxiomextendsLeanExportElemwithProductwithSerializable", "kind" : "case class"}, {"label" : "Definition", "tail" : "", "member" : "provingground.interface.LeanExportElem.Definition", "link" : "provingground\/interface\/LeanExportElem$.html#Definition", "kind" : "object"}, {"label" : "Definition", "tail" : "", "member" : "provingground.interface.LeanExportElem.Definition", "link" : "provingground\/interface\/LeanExportElem$.html#DefinitionextendsLeanExportElemwithProductwithSerializable", "kind" : "case class"}, {"label" : "GlobalUniv", "tail" : "", "member" : "provingground.interface.LeanExportElem.GlobalUniv", "link" : "provingground\/interface\/LeanExportElem$.html#GlobalUnivextendsLeanExportElemwithProductwithSerializable", "kind" : "case class"}, {"label" : "Import", "tail" : "", "member" : "provingground.interface.LeanExportElem.Import", "link" : "provingground\/interface\/LeanExportElem$.html#Import", "kind" : "object"}, {"label" : "Import", "tail" : "", "member" : "provingground.interface.LeanExportElem.Import", "link" : "provingground\/interface\/LeanExportElem$.html#ImportextendsLeanExportElem", "kind" : "sealed trait"}, {"label" : "Expr", "tail" : "", "member" : "provingground.interface.LeanExportElem.Expr", "link" : "provingground\/interface\/LeanExportElem$.html#Expr", "kind" : "object"}, {"label" : "Expr", "tail" : "", "member" : "provingground.interface.LeanExportElem.Expr", "link" : "provingground\/interface\/LeanExportElem$.html#ExprextendsLeanExportElem", "kind" : "sealed trait"}, {"label" : "Info", "tail" : "", "member" : "provingground.interface.LeanExportElem.Info", "link" : "provingground\/interface\/LeanExportElem$.html#Info", "kind" : "object"}, {"label" : "Info", "tail" : "", "member" : "provingground.interface.LeanExportElem.Info", "link" : "provingground\/interface\/LeanExportElem$.html#InfoextendsAnyRef", "kind" : "sealed trait"}, {"label" : "Univ", "tail" : "", "member" : "provingground.interface.LeanExportElem.Univ", "link" : "provingground\/interface\/LeanExportElem$.html#Univ", "kind" : "object"}, {"label" : "Univ", "tail" : "", "member" : "provingground.interface.LeanExportElem.Univ", "link" : "provingground\/interface\/LeanExportElem$.html#UnivextendsLeanExportElem", "kind" : "sealed trait"}, {"label" : "Name", "tail" : "", "member" : "provingground.interface.LeanExportElem.Name", "link" : "provingground\/interface\/LeanExportElem$.html#Name", "kind" : "object"}, {"label" : "Name", "tail" : "", "member" : "provingground.interface.LeanExportElem.Name", "link" : "provingground\/interface\/LeanExportElem$.html#NameextendsLeanExportElem", "kind" : "sealed trait"}, {"label" : "DataBase", "tail" : "", "member" : "provingground.interface.LeanExportElem.DataBase", "link" : "provingground\/interface\/LeanExportElem$.html#DataBaseextendsAnyRef", "kind" : "class"}, {"label" : "DataBase", "tail" : "", "member" : "provingground.interface.LeanExportElem.DataBase", "link" : "provingground\/interface\/LeanExportElem$.html#DataBase", "kind" : "object"}, {"label" : "Data", "tail" : "", "member" : "provingground.interface.LeanExportElem.Data", "link" : "provingground\/interface\/LeanExportElem$.html#Data", "kind" : "object"}, {"label" : "Data", "tail" : "", "member" : "provingground.interface.LeanExportElem.Data", "link" : "provingground\/interface\/LeanExportElem$.html#DataextendsProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/interface\/LeanExportElem$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/interface\/LeanExportElem$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/interface\/LeanExportElem$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/interface\/LeanExportElem$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/interface\/LeanExportElem$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/interface\/LeanExportElem$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/interface\/LeanExportElem$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/LeanExportElem$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/LeanExportElem$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/LeanExportElem$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/interface\/LeanExportElem$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/interface\/LeanExportElem$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/interface\/LeanExportElem$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/interface\/LeanExportElem$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/interface\/LeanExportElem$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/interface\/LeanExportElem$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/interface\/LeanExportElem$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/interface\/LeanExportElem$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/interface\/LeanExportElem$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/interface\/LeanExportElem.html", "kind" : "trait"}, {"name" : "provingground.interface.LeanToTerm", "shortDescription" : "", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/interface\/LeanToTerm.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/interface\/LeanToTerm.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (LeanToTerm) ⇒ Boolean, msg: ⇒ Any): LeanToTerm", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/interface\/LeanToTerm.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (LeanToTerm) ⇒ Boolean): LeanToTerm", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/interface\/LeanToTerm.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): LeanToTerm", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/interface\/LeanToTerm.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): LeanToTerm", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/interface\/LeanToTerm.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (LeanToTerm, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/interface\/LeanToTerm.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (LeanToTerm, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/interface\/LeanToTerm.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "inductiveTypes", "tail" : "(induc: InducDefn): Option[Term]", "member" : "provingground.interface.LeanToTerm.inductiveTypes", "link" : "provingground\/interface\/LeanToTerm.html#inductiveTypes(induc:provingground.interface.LeanExportElem.InducDefn):Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "defnToEquality", "tail" : "(dfn: Definition): Option[IdentityTyp[Term]]", "member" : "provingground.interface.LeanToTerm.defnToEquality", "link" : "provingground\/interface\/LeanToTerm.html#defnToEquality(dfn:provingground.interface.LeanExportElem.Definition):Option[provingground.HoTT.IdentityTyp[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "exprToTerm", "tail" : "(expr: Expr, variables: Vector[Term]): Option[Term]", "member" : "provingground.interface.LeanToTerm.exprToTerm", "link" : "provingground\/interface\/LeanToTerm.html#exprToTerm(expr:provingground.interface.LeanExportElem.Expr,variables:Vector[provingground.HoTT.Term]):Option[provingground.HoTT.Term]", "kind" : "def"}, {"member" : "provingground.interface.LeanToTerm#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/interface\/LeanToTerm.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/interface\/LeanToTerm.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/interface\/LeanToTerm.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/interface\/LeanToTerm.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/interface\/LeanToTerm.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/interface\/LeanToTerm.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/interface\/LeanToTerm.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/LeanToTerm.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/LeanToTerm.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/LeanToTerm.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/interface\/LeanToTerm.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/interface\/LeanToTerm.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/interface\/LeanToTerm.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/interface\/LeanToTerm.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/interface\/LeanToTerm.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/interface\/LeanToTerm.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/interface\/LeanToTerm.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/interface\/LeanToTerm.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/interface\/LeanToTerm.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/interface\/LeanToTerm.html", "kind" : "class"}, {"name" : "provingground.interface.SvgPlot", "shortDescription" : "", "object" : "provingground\/interface\/SvgPlot$.html", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/interface\/SvgPlot.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/interface\/SvgPlot.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SvgPlot) ⇒ Boolean, msg: ⇒ Any): SvgPlot", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/interface\/SvgPlot.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SvgPlot) ⇒ Boolean): SvgPlot", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/interface\/SvgPlot.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): SvgPlot", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/interface\/SvgPlot.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): SvgPlot", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/interface\/SvgPlot.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (SvgPlot, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/interface\/SvgPlot.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (SvgPlot, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/interface\/SvgPlot.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "scatter", "tail" : "(points: List[Point], radius: Double): Seq[Node]", "member" : "provingground.interface.SvgPlot.scatter", "link" : "provingground\/interface\/SvgPlot.html#scatter(points:List[provingground.interface.SvgPlot.Point],radius:Double):Seq[scala.xml.Node]", "kind" : "def"}, {"label" : "draw", "tail" : "(c: Circle): Elem", "member" : "provingground.interface.SvgPlot.draw", "link" : "provingground\/interface\/SvgPlot.html#draw(c:provingground.interface.SvgPlot.Circle):scala.xml.Elem", "kind" : "def"}, {"label" : "draw", "tail" : "(l: Line): Elem", "member" : "provingground.interface.SvgPlot.draw", "link" : "provingground\/interface\/SvgPlot.html#draw(l:provingground.interface.SvgPlot.Line):scala.xml.Elem", "kind" : "def"}, {"label" : "plotAll", "tail" : "(nodes: Node*): Elem", "member" : "provingground.interface.SvgPlot.plotAll", "link" : "provingground\/interface\/SvgPlot.html#plotAll(nodes:scala.xml.Node*):scala.xml.Elem", "kind" : "def"}, {"label" : "plot", "tail" : "(nodes: Seq[Node]): Elem", "member" : "provingground.interface.SvgPlot.plot", "link" : "provingground\/interface\/SvgPlot.html#plot(nodes:Seq[scala.xml.Node]):scala.xml.Elem", "kind" : "def"}, {"label" : "axes", "tail" : ": List[Elem]", "member" : "provingground.interface.SvgPlot.axes", "link" : "provingground\/interface\/SvgPlot.html#axes:List[scala.xml.Elem]", "kind" : "val"}, {"label" : "circle", "tail" : "(x1: Double, y1: Double, r: Double, colour: String): Elem", "member" : "provingground.interface.SvgPlot.circle", "link" : "provingground\/interface\/SvgPlot.html#circle(x1:Double,y1:Double,r:Double,colour:String):scala.xml.Elem", "kind" : "def"}, {"label" : "graph", "tail" : "(points: Seq[(Double, Double)], colour: String): Seq[Elem]", "member" : "provingground.interface.SvgPlot.graph", "link" : "provingground\/interface\/SvgPlot.html#graph(points:Seq[(Double,Double)],colour:String):Seq[scala.xml.Elem]", "kind" : "def"}, {"label" : "polyline", "tail" : "(pts: (Double, Double)*): Elem", "member" : "provingground.interface.SvgPlot.polyline", "link" : "provingground\/interface\/SvgPlot.html#polyline(pts:(Double,Double)*):scala.xml.Elem", "kind" : "def"}, {"label" : "line", "tail" : "(x1: Double, y1: Double, x2: Double, y2: Double, colour: String): Elem", "member" : "provingground.interface.SvgPlot.line", "link" : "provingground\/interface\/SvgPlot.html#line(x1:Double,y1:Double,x2:Double,y2:Double,colour:String):scala.xml.Elem", "kind" : "def"}, {"label" : "yval", "tail" : "(y: Double): Int", "member" : "provingground.interface.SvgPlot.yval", "link" : "provingground\/interface\/SvgPlot.html#yval(y:Double):Int", "kind" : "def"}, {"label" : "xval", "tail" : "(x: Double): Int", "member" : "provingground.interface.SvgPlot.xval", "link" : "provingground\/interface\/SvgPlot.html#xval(x:Double):Int", "kind" : "def"}, {"label" : "ymax", "tail" : ": Double", "member" : "provingground.interface.SvgPlot.ymax", "link" : "provingground\/interface\/SvgPlot.html#ymax:Double", "kind" : "val"}, {"label" : "xmax", "tail" : ": Double", "member" : "provingground.interface.SvgPlot.xmax", "link" : "provingground\/interface\/SvgPlot.html#xmax:Double", "kind" : "val"}, {"member" : "provingground.interface.SvgPlot#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/interface\/SvgPlot.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/interface\/SvgPlot.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/interface\/SvgPlot.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/interface\/SvgPlot.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/interface\/SvgPlot.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/interface\/SvgPlot.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/interface\/SvgPlot.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/SvgPlot.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/SvgPlot.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/SvgPlot.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/interface\/SvgPlot.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/interface\/SvgPlot.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/interface\/SvgPlot.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/interface\/SvgPlot.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/interface\/SvgPlot.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/interface\/SvgPlot.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/interface\/SvgPlot.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/interface\/SvgPlot.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/interface\/SvgPlot.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "pairPoint", "tail" : "(ab: (Double, Double)): Point", "member" : "provingground.interface.SvgPlot.pairPoint", "link" : "provingground\/interface\/SvgPlot$.html#pairPoint(ab:(Double,Double)):provingground.interface.SvgPlot.Point", "kind" : "implicit def"}, {"label" : "Line", "tail" : "", "member" : "provingground.interface.SvgPlot.Line", "link" : "provingground\/interface\/SvgPlot$.html#LineextendsProductwithSerializable", "kind" : "case class"}, {"label" : "Circle", "tail" : "", "member" : "provingground.interface.SvgPlot.Circle", "link" : "provingground\/interface\/SvgPlot$.html#CircleextendsProductwithSerializable", "kind" : "case class"}, {"label" : "Point", "tail" : "", "member" : "provingground.interface.SvgPlot.Point", "link" : "provingground\/interface\/SvgPlot$.html#PointextendsProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/interface\/SvgPlot$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/interface\/SvgPlot$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/interface\/SvgPlot$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/interface\/SvgPlot$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/interface\/SvgPlot$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/interface\/SvgPlot$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/interface\/SvgPlot$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/SvgPlot$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/SvgPlot$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/SvgPlot$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/interface\/SvgPlot$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/interface\/SvgPlot$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/interface\/SvgPlot$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/interface\/SvgPlot$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/interface\/SvgPlot$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/interface\/SvgPlot$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/interface\/SvgPlot$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/interface\/SvgPlot$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/interface\/SvgPlot$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/interface\/SvgPlot.html", "kind" : "class"}, {"name" : "provingground.interface.TermJson", "shortDescription" : "", "object" : "provingground\/interface\/TermJson$.html", "members_object" : [{"label" : "jsonToTermBase", "tail" : ": OrElse[Value, Term]", "member" : "provingground.interface.TermJson.jsonToTermBase", "link" : "provingground\/interface\/TermJson$.html#jsonToTermBase:provingground.translation.Translator.OrElse[upickle.Js.Value,provingground.HoTT.Term]", "kind" : "val"}, {"label" : "termToJson", "tail" : ": OrElse[Term, Value]", "member" : "provingground.interface.TermJson.termToJson", "link" : "provingground\/interface\/TermJson$.html#termToJson:provingground.translation.Translator.OrElse[provingground.HoTT.Term,upickle.Js.Value]", "kind" : "val"}, {"label" : "travNamed", "tail" : ": Traverse[Named]", "member" : "provingground.interface.TermJson.travNamed", "link" : "provingground\/interface\/TermJson$.html#travNamed:cats.Traverse[provingground.translation.Functors.Named]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/interface\/TermJson$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/interface\/TermJson$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/interface\/TermJson$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/interface\/TermJson$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/interface\/TermJson$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/interface\/TermJson$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/interface\/TermJson$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/TermJson$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/TermJson$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/TermJson$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/interface\/TermJson$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/interface\/TermJson$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/interface\/TermJson$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/interface\/TermJson$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/interface\/TermJson$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/interface\/TermJson$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/interface\/TermJson$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/interface\/TermJson$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/interface\/TermJson$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "monix" : [], "provingground.induction.coarse" : [{"name" : "provingground.induction.coarse.BaseConstructorTypes", "shortDescription" : "", "object" : "provingground\/induction\/coarse\/BaseConstructorTypes$.html", "members_object" : [{"label" : "NatCons", "tail" : ": List[ConstructorDefn[_ >: Func[Term, Term] <: Term, Term, Term]]", "member" : "provingground.induction.coarse.BaseConstructorTypes.NatCons", "link" : "provingground\/induction\/coarse\/BaseConstructorTypes$.html#NatCons:List[provingground.induction.coarse.ConstructorDefn[_>:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]<:provingground.HoTT.Term,provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "one", "tail" : ": Term", "member" : "provingground.induction.coarse.BaseConstructorTypes.one", "link" : "provingground\/induction\/coarse\/BaseConstructorTypes$.html#one:provingground.HoTT.Term", "kind" : "val"}, {"label" : "succ", "tail" : ": Term", "member" : "provingground.induction.coarse.BaseConstructorTypes.succ", "link" : "provingground\/induction\/coarse\/BaseConstructorTypes$.html#succ:provingground.HoTT.Term", "kind" : "val"}, {"label" : "zero", "tail" : ": Term", "member" : "provingground.induction.coarse.BaseConstructorTypes.zero", "link" : "provingground\/induction\/coarse\/BaseConstructorTypes$.html#zero:provingground.HoTT.Term", "kind" : "val"}, {"label" : "succC", "tail" : ": ConstructorDefn[Func[Term, Term], Term, Term]", "member" : "provingground.induction.coarse.BaseConstructorTypes.succC", "link" : "provingground\/induction\/coarse\/BaseConstructorTypes$.html#succC:provingground.induction.coarse.ConstructorDefn[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term],provingground.HoTT.Term,provingground.HoTT.Term]", "kind" : "val"}, {"label" : "zeroC", "tail" : ": ConstructorDefn[ConstructorPattern.IdW.ConstructorType, Term, Term]", "member" : "provingground.induction.coarse.BaseConstructorTypes.zeroC", "link" : "provingground\/induction\/coarse\/BaseConstructorTypes$.html#zeroC:provingground.induction.coarse.ConstructorDefn[provingground.induction.coarse.BaseConstructorTypes.W.ConstructorType,provingground.HoTT.Term,provingground.HoTT.Term]", "kind" : "val"}, {"label" : "BoolCons", "tail" : ": List[ConstructorDefn[Term, Term, Term]]", "member" : "provingground.induction.coarse.BaseConstructorTypes.BoolCons", "link" : "provingground\/induction\/coarse\/BaseConstructorTypes$.html#BoolCons:List[provingground.induction.coarse.ConstructorDefn[provingground.HoTT.Term,provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "ff", "tail" : ": Term", "member" : "provingground.induction.coarse.BaseConstructorTypes.ff", "link" : "provingground\/induction\/coarse\/BaseConstructorTypes$.html#ff:provingground.HoTT.Term", "kind" : "val"}, {"label" : "tt", "tail" : ": Term", "member" : "provingground.induction.coarse.BaseConstructorTypes.tt", "link" : "provingground\/induction\/coarse\/BaseConstructorTypes$.html#tt:provingground.HoTT.Term", "kind" : "val"}, {"label" : "ffC", "tail" : ": ConstructorDefn[ConstructorPattern.IdW.ConstructorType, Term, Term]", "member" : "provingground.induction.coarse.BaseConstructorTypes.ffC", "link" : "provingground\/induction\/coarse\/BaseConstructorTypes$.html#ffC:provingground.induction.coarse.ConstructorDefn[provingground.induction.coarse.BaseConstructorTypes.W.ConstructorType,provingground.HoTT.Term,provingground.HoTT.Term]", "kind" : "val"}, {"label" : "ttC", "tail" : ": ConstructorDefn[ConstructorPattern.IdW.ConstructorType, Term, Term]", "member" : "provingground.induction.coarse.BaseConstructorTypes.ttC", "link" : "provingground\/induction\/coarse\/BaseConstructorTypes$.html#ttC:provingground.induction.coarse.ConstructorDefn[provingground.induction.coarse.BaseConstructorTypes.W.ConstructorType,provingground.HoTT.Term,provingground.HoTT.Term]", "kind" : "val"}, {"label" : "W", "tail" : ": IdW[Term]", "member" : "provingground.induction.coarse.BaseConstructorTypes.W", "link" : "provingground\/induction\/coarse\/BaseConstructorTypes$.html#W:provingground.induction.coarse.ConstructorPattern.IdW[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "SmallNat", "tail" : "", "member" : "provingground.induction.coarse.BaseConstructorTypes.SmallNat", "link" : "provingground\/induction\/coarse\/BaseConstructorTypes$.html#SmallNat", "kind" : "object"}, {"label" : "SmallBool", "tail" : "", "member" : "provingground.induction.coarse.BaseConstructorTypes.SmallBool", "link" : "provingground\/induction\/coarse\/BaseConstructorTypes$.html#SmallBool", "kind" : "object"}, {"label" : "WAsPtn", "tail" : "(w: IdW[H]): IdFmlyPtn[H, Term]", "member" : "provingground.induction.coarse.BaseConstructorTypes.WAsPtn", "link" : "provingground\/induction\/coarse\/BaseConstructorTypes$.html#WAsPtn[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H]](w:provingground.induction.coarse.ConstructorPattern.IdW[H]):provingground.induction.coarse.FmlyPtn.IdFmlyPtn[H,provingground.HoTT.Term]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/coarse\/BaseConstructorTypes$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/coarse\/BaseConstructorTypes$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/coarse\/BaseConstructorTypes$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/coarse\/BaseConstructorTypes$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/coarse\/BaseConstructorTypes$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/coarse\/BaseConstructorTypes$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/coarse\/BaseConstructorTypes$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/BaseConstructorTypes$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/BaseConstructorTypes$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/BaseConstructorTypes$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/coarse\/BaseConstructorTypes$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/coarse\/BaseConstructorTypes$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/coarse\/BaseConstructorTypes$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/coarse\/BaseConstructorTypes$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/coarse\/BaseConstructorTypes$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/coarse\/BaseConstructorTypes$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/coarse\/BaseConstructorTypes$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/coarse\/BaseConstructorTypes$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/coarse\/BaseConstructorTypes$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.induction.coarse.Constructor", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/induction\/coarse\/Constructor.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/induction\/coarse\/Constructor.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Constructor[Cod, H]) ⇒ Boolean, msg: ⇒ Any): Constructor[Cod, H]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/coarse\/Constructor.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Constructor[Cod, H]) ⇒ Boolean): Constructor[Cod, H]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/coarse\/Constructor.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Constructor[Cod, H]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/coarse\/Constructor.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Constructor[Cod, H]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/coarse\/Constructor.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Constructor[Cod, H], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/induction\/coarse\/Constructor.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Constructor[Cod, H], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/induction\/coarse\/Constructor.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/coarse\/Constructor.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/coarse\/Constructor.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/coarse\/Constructor.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/coarse\/Constructor.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/coarse\/Constructor.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/coarse\/Constructor.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/coarse\/Constructor.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/Constructor.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/Constructor.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/Constructor.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/coarse\/Constructor.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/coarse\/Constructor.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/coarse\/Constructor.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/coarse\/Constructor.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/coarse\/Constructor.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/coarse\/Constructor.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/coarse\/Constructor.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/coarse\/Constructor.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/coarse\/Constructor.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "subs", "tail" : "(x: Term, y: Term): Constructor[Cod, H]", "member" : "provingground.induction.coarse.Constructor.subs", "link" : "provingground\/induction\/coarse\/Constructor.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.induction.coarse.Constructor[Cod,H]", "kind" : "abstract def"}, {"label" : "withCod", "tail" : "(): Constructor[CC, H]", "member" : "provingground.induction.coarse.Constructor.withCod", "link" : "provingground\/induction\/coarse\/Constructor.html#withCod[CC<:provingground.HoTT.Termwithprovingground.HoTT.Subs[CC]]:provingground.induction.coarse.Constructor[CC,H]", "kind" : "abstract def"}, {"label" : "W", "tail" : ": Typ[H]", "member" : "provingground.induction.coarse.Constructor.W", "link" : "provingground\/induction\/coarse\/Constructor.html#W:provingground.HoTT.Typ[H]", "kind" : "abstract val"}, {"label" : "cons", "tail" : ": ConstructorPattern.ConstructorType", "member" : "provingground.induction.coarse.Constructor.cons", "link" : "provingground\/induction\/coarse\/Constructor.html#cons:Constructor.this.pattern.ConstructorType", "kind" : "abstract val"}, {"label" : "pattern", "tail" : ": ConstructorPattern[Cod, ConstructorType, H]", "member" : "provingground.induction.coarse.Constructor.pattern", "link" : "provingground\/induction\/coarse\/Constructor.html#pattern:provingground.induction.coarse.ConstructorPattern[Cod,Constructor.this.ConstructorType,H]", "kind" : "abstract val"}, {"member" : "provingground.induction.coarse.Constructor.ConstructorType", "error" : "unsupported entity"}], "shortDescription" : "Constructor for an inductive type, with given scala type and poly-pattern of this type.", "object" : "provingground\/induction\/coarse\/Constructor$.html", "members_object" : [{"label" : "fromFormal", "tail" : "(consType: Term, w: Typ[Term]): (Typ[Term]) ⇒ Constructor[Term, Term]", "member" : "provingground.induction.coarse.Constructor.fromFormal", "link" : "provingground\/induction\/coarse\/Constructor$.html#fromFormal(consType:provingground.HoTT.Term,w:provingground.HoTT.Typ[provingground.HoTT.Term]):provingground.HoTT.Typ[provingground.HoTT.Term]=>provingground.induction.coarse.Constructor[provingground.HoTT.Term,provingground.HoTT.Term]", "kind" : "def"}, {"label" : "fromName", "tail" : "(pattern: ConstructorPattern[C, U, H], name: String): (Typ[H]) ⇒ ConstructorDefn[U, C, H]", "member" : "provingground.induction.coarse.Constructor.fromName", "link" : "provingground\/induction\/coarse\/Constructor$.html#fromName[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H]](pattern:provingground.induction.coarse.ConstructorPattern[C,U,H],name:String):provingground.HoTT.Typ[H]=>provingground.induction.coarse.ConstructorDefn[U,C,H]", "kind" : "def"}, {"label" : "InducSym", "tail" : "", "member" : "provingground.induction.coarse.Constructor.InducSym", "link" : "provingground\/induction\/coarse\/Constructor$.html#InducSym[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H]]extendsHoTT.AnySymwithProductwithSerializable", "kind" : "case class"}, {"label" : "RecSym", "tail" : "", "member" : "provingground.induction.coarse.Constructor.RecSym", "link" : "provingground\/induction\/coarse\/Constructor$.html#RecSym[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H]]extendsHoTT.AnySymwithProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/coarse\/Constructor$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/coarse\/Constructor$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/coarse\/Constructor$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/coarse\/Constructor$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/coarse\/Constructor$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/coarse\/Constructor$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/coarse\/Constructor$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/Constructor$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/Constructor$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/Constructor$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/coarse\/Constructor$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/coarse\/Constructor$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/coarse\/Constructor$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/coarse\/Constructor$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/coarse\/Constructor$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/coarse\/Constructor$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/coarse\/Constructor$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/coarse\/Constructor$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/coarse\/Constructor$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/induction\/coarse\/Constructor.html", "kind" : "trait"}, {"name" : "provingground.induction.coarse.ConstructorDefn", "shortDescription" : "a constructor given by its parameters.", "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/induction\/coarse\/ConstructorDefn.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/induction\/coarse\/ConstructorDefn.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ConstructorDefn[U, C, H]) ⇒ Boolean, msg: ⇒ Any): ConstructorDefn[U, C, H]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/coarse\/ConstructorDefn.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ConstructorDefn[U, C, H]) ⇒ Boolean): ConstructorDefn[U, C, H]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/coarse\/ConstructorDefn.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): ConstructorDefn[U, C, H]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/coarse\/ConstructorDefn.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ConstructorDefn[U, C, H]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/coarse\/ConstructorDefn.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ConstructorDefn[U, C, H], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/induction\/coarse\/ConstructorDefn.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ConstructorDefn[U, C, H], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/induction\/coarse\/ConstructorDefn.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "withCod", "tail" : "(): ConstructorDefn[U, CC, H]", "member" : "provingground.induction.coarse.ConstructorDefn.withCod", "link" : "provingground\/induction\/coarse\/ConstructorDefn.html#withCod[CC<:provingground.HoTT.Termwithprovingground.HoTT.Subs[CC]]:provingground.induction.coarse.ConstructorDefn[U,CC,H]", "kind" : "def"}, {"label" : "subs", "tail" : "(x: Term, y: Term): ConstructorDefn[U with Subs[U], C, H]", "member" : "provingground.induction.coarse.ConstructorDefn.subs", "link" : "provingground\/induction\/coarse\/ConstructorDefn.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.induction.coarse.ConstructorDefn[Uwithprovingground.HoTT.Subs[U],C,H]", "kind" : "def"}, {"label" : "ConstructorType", "tail" : "", "member" : "provingground.induction.coarse.ConstructorDefn.ConstructorType", "link" : "provingground\/induction\/coarse\/ConstructorDefn.html#ConstructorType=U", "kind" : "type"}, {"member" : "provingground.induction.coarse.ConstructorDefn#<init>", "error" : "unsupported entity"}, {"label" : "W", "tail" : ": Typ[H]", "member" : "provingground.induction.coarse.ConstructorDefn.W", "link" : "provingground\/induction\/coarse\/ConstructorDefn.html#W:provingground.HoTT.Typ[H]", "kind" : "val"}, {"label" : "cons", "tail" : ": U", "member" : "provingground.induction.coarse.ConstructorDefn.cons", "link" : "provingground\/induction\/coarse\/ConstructorDefn.html#cons:U", "kind" : "val"}, {"label" : "pattern", "tail" : ": ConstructorPattern[C, U, H]", "member" : "provingground.induction.coarse.ConstructorDefn.pattern", "link" : "provingground\/induction\/coarse\/ConstructorDefn.html#pattern:provingground.induction.coarse.ConstructorPattern[C,U,H]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/coarse\/ConstructorDefn.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/coarse\/ConstructorDefn.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/coarse\/ConstructorDefn.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/coarse\/ConstructorDefn.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/coarse\/ConstructorDefn.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/coarse\/ConstructorDefn.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/coarse\/ConstructorDefn.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/ConstructorDefn.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/ConstructorDefn.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/ConstructorDefn.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/coarse\/ConstructorDefn.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/coarse\/ConstructorDefn.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/coarse\/ConstructorDefn.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/coarse\/ConstructorDefn.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/coarse\/ConstructorDefn.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/coarse\/ConstructorDefn.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/induction\/coarse\/ConstructorDefn.html", "kind" : "case class"}, {"name" : "provingground.induction.coarse.ConstructorPattern", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ConstructorPattern[Cod, CnstrctrType, H]) ⇒ Boolean, msg: ⇒ Any): ConstructorPattern[Cod, CnstrctrType, H]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ConstructorPattern[Cod, CnstrctrType, H]) ⇒ Boolean): ConstructorPattern[Cod, CnstrctrType, H]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): ConstructorPattern[Cod, CnstrctrType, H]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ConstructorPattern[Cod, CnstrctrType, H]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ConstructorPattern[Cod, CnstrctrType, H], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ConstructorPattern[Cod, CnstrctrType, H], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "cons", "tail" : "(tp: ⇒ Typ[H]): Constructor.ConstructorType", "member" : "provingground.induction.coarse.ConstructorPattern.cons", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#cons(tp:=>provingground.HoTT.Typ[H]):provingground.induction.coarse.Constructor[Cod,H]#ConstructorType", "kind" : "def"}, {"label" : "newconstructor", "tail" : "(tp: Typ[H]): Constructor[Cod, H]", "member" : "provingground.induction.coarse.ConstructorPattern.newconstructor", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#newconstructor(tp:provingground.HoTT.Typ[H]):provingground.induction.coarse.Constructor[Cod,H]", "kind" : "def"}, {"label" : "cons", "tail" : "(tp: ⇒ Typ[H], name: AnySym): CnstrctrType", "member" : "provingground.induction.coarse.ConstructorPattern.cons", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#cons(tp:=>provingground.HoTT.Typ[H],name:provingground.HoTT.AnySym):CnstrctrType", "kind" : "def"}, {"label" : "constructor", "tail" : "(tp: ⇒ Typ[H], name: AnySym): ConstructorDefn[ConstructorType, Cod, H]", "member" : "provingground.induction.coarse.ConstructorPattern.constructor", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#constructor(tp:=>provingground.HoTT.Typ[H],name:provingground.HoTT.AnySym):provingground.induction.coarse.ConstructorDefn[ConstructorPattern.this.ConstructorType,Cod,H]", "kind" : "def"}, {"label" : "~>:", "tail" : "(tailVar: T): CnstDepFuncPtn[T, (<refinement>.this)#RecDataType, (<refinement>.this)#InducDataType, Cod, CnstrctrType, H]", "member" : "provingground.induction.coarse.ConstructorPattern.~>:", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#~>:[T<:provingground.HoTT.Termwithprovingground.HoTT.Subs[T]](tailVar:T):provingground.induction.coarse.ConstructorPattern.CnstDepFuncPtn[T,this.RecDataType,this.InducDataType,Cod,CnstrctrType,H]", "kind" : "def"}, {"label" : "->:", "tail" : "(tail: Typ[T]): CnstFncPtn[T, Cod, CnstrctrType, H]", "member" : "provingground.induction.coarse.ConstructorPattern.->:", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#->:[T<:provingground.HoTT.Termwithprovingground.HoTT.Subs[T]](tail:provingground.HoTT.Typ[T]):provingground.induction.coarse.ConstructorPattern.CnstFncPtn[T,Cod,CnstrctrType,H]", "kind" : "def"}, {"label" : "-->:", "tail" : "(that: IdW[_]): FuncPtn[Cod, H, CnstrctrType, H]", "member" : "provingground.induction.coarse.ConstructorPattern.-->:", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#-->:(that:provingground.induction.coarse.ConstructorPattern.IdW[_]):provingground.induction.coarse.ConstructorPattern.FuncPtn[Cod,H,CnstrctrType,H]", "kind" : "def"}, {"label" : "-->:", "tail" : "(that: IterFuncPtn[H, Cod, F]): FuncPtn[Cod, F, CnstrctrType, H]", "member" : "provingground.induction.coarse.ConstructorPattern.-->:", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#-->:[F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F]](that:provingground.induction.coarse.IterFuncPattern.IterFuncPtn[H,Cod,F]):provingground.induction.coarse.ConstructorPattern.FuncPtn[Cod,F,CnstrctrType,H]", "kind" : "def"}, {"label" : "ConstructorType", "tail" : "", "member" : "provingground.induction.coarse.ConstructorPattern.ConstructorType", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#ConstructorType=CnstrctrType", "kind" : "type"}, {"label" : "DomainType", "tail" : "", "member" : "provingground.induction.coarse.ConstructorPattern.DomainType", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#DomainType=H", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "univLevel", "tail" : ": Int", "member" : "provingground.induction.coarse.ConstructorPattern.univLevel", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#univLevel:Int", "kind" : "abstract val"}, {"label" : "inducDefCase", "tail" : "(cons: ConstructorType, data: InducDataType, f: ⇒ FuncLike[H, Cod]): (H) ⇒ Option[Cod]", "member" : "provingground.induction.coarse.ConstructorPattern.inducDefCase", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#inducDefCase(cons:ConstructorPattern.this.ConstructorType,data:ConstructorPattern.this.InducDataType,f:=>provingground.HoTT.FuncLike[H,Cod]):H=>Option[Cod]", "kind" : "abstract def"}, {"label" : "recDefCase", "tail" : "(cons: ConstructorType, data: RecDataType, f: ⇒ Func[H, Cod]): (H) ⇒ Option[Cod]", "member" : "provingground.induction.coarse.ConstructorPattern.recDefCase", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#recDefCase(cons:ConstructorPattern.this.ConstructorType,data:ConstructorPattern.this.RecDataType,f:=>provingground.HoTT.Func[H,Cod]):H=>Option[Cod]", "kind" : "abstract def"}, {"label" : "inducDataTyp", "tail" : "(w: Typ[H], xs: Func[H, Typ[Cod]])(cons: ConstructorType): Typ[InducDataType]", "member" : "provingground.induction.coarse.ConstructorPattern.inducDataTyp", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#inducDataTyp(w:provingground.HoTT.Typ[H],xs:provingground.HoTT.Func[H,provingground.HoTT.Typ[Cod]])(cons:ConstructorPattern.this.ConstructorType):provingground.HoTT.Typ[ConstructorPattern.this.InducDataType]", "kind" : "abstract def"}, {"label" : "recDataTyp", "tail" : "(w: Typ[H], x: Typ[Cod]): Typ[RecDataType]", "member" : "provingground.induction.coarse.ConstructorPattern.recDataTyp", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#recDataTyp(w:provingground.HoTT.Typ[H],x:provingground.HoTT.Typ[Cod]):provingground.HoTT.Typ[ConstructorPattern.this.RecDataType]", "kind" : "abstract def"}, {"member" : "provingground.induction.coarse.ConstructorPattern.InducDataType", "error" : "unsupported entity"}, {"member" : "provingground.induction.coarse.ConstructorPattern.RecDataType", "error" : "unsupported entity"}, {"label" : "apply", "tail" : "(tp: Typ[H]): Typ[ConstructorType]", "member" : "provingground.induction.coarse.ConstructorPattern.apply", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#apply(tp:provingground.HoTT.Typ[H]):provingground.HoTT.Typ[ConstructorPattern.this.ConstructorType]", "kind" : "abstract def"}, {"label" : "subs", "tail" : "(x: Term, y: Term): ConstructorPattern[Cod, CnstrctrType, H]", "member" : "provingground.induction.coarse.ConstructorPattern.subs", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.induction.coarse.ConstructorPattern[Cod,CnstrctrType,H]", "kind" : "abstract def"}, {"label" : "withCod", "tail" : "(w: Typ[H]): ConstructorPattern[CC, ConstructorType, H]", "member" : "provingground.induction.coarse.ConstructorPattern.withCod", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#withCod[CC<:provingground.HoTT.Termwithprovingground.HoTT.Subs[CC]](w:provingground.HoTT.Typ[H]):provingground.induction.coarse.ConstructorPattern[CC,ConstructorPattern.this.ConstructorType,H]", "kind" : "abstract def"}], "shortDescription" : "A composite pattern for inductive types.", "object" : "provingground\/induction\/coarse\/ConstructorPattern$.html", "members_object" : [{"label" : "DepFuncPtn", "tail" : "", "member" : "provingground.induction.coarse.ConstructorPattern.DepFuncPtn", "link" : "provingground\/induction\/coarse\/ConstructorPattern$.html#DepFuncPtn[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V],VV<:provingground.HoTT.Termwithprovingground.HoTT.Subs[VV],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H]]extendsConstructorPattern.RecursiveConstructorPattern[C,F,U,provingground.HoTT.FuncLike[F,U],H]withProductwithSerializable", "kind" : "case class"}, {"label" : "CnstDepFuncPtn", "tail" : "", "member" : "provingground.induction.coarse.ConstructorPattern.CnstDepFuncPtn", "link" : "provingground\/induction\/coarse\/ConstructorPattern$.html#CnstDepFuncPtn[T<:provingground.HoTT.Termwithprovingground.HoTT.Subs[T],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V],VV<:provingground.HoTT.Termwithprovingground.HoTT.Subs[VV],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],HC<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HC],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H]]extendsConstructorPattern.RecursiveConstructorPattern[C,T,HC,provingground.HoTT.FuncLike[T,HC],H]withProductwithSerializable", "kind" : "case class"}, {"label" : "CnstFncPtn", "tail" : "", "member" : "provingground.induction.coarse.ConstructorPattern.CnstFncPtn", "link" : "provingground\/induction\/coarse\/ConstructorPattern$.html#CnstFncPtn[T<:provingground.HoTT.Termwithprovingground.HoTT.Subs[T],Cod<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Cod],HC<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HC],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H]]extendsConstructorPattern.RecursiveConstructorPattern[Cod,T,HC,provingground.HoTT.Func[T,HC],H]withProductwithSerializable", "kind" : "case class"}, {"label" : "FuncPtn", "tail" : "", "member" : "provingground.induction.coarse.ConstructorPattern.FuncPtn", "link" : "provingground\/induction\/coarse\/ConstructorPattern$.html#FuncPtn[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],HC<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HC],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H]]extendsConstructorPattern.RecursiveConstructorPattern[C,F,HC,provingground.HoTT.Func[F,HC],H]withProductwithSerializable", "kind" : "case class"}, {"label" : "RecursiveConstructorPattern", "tail" : "", "member" : "provingground.induction.coarse.ConstructorPattern.RecursiveConstructorPattern", "link" : "provingground\/induction\/coarse\/ConstructorPattern$.html#RecursiveConstructorPattern[Cod<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Cod],ArgT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[ArgT],HeadT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HeadT],CT<:provingground.HoTT.FuncLike[ArgT,HeadT]withprovingground.HoTT.Subs[CT],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H]]extendsConstructorPattern[Cod,CT,H]", "kind" : "sealed trait"}, {"label" : "IdTarg", "tail" : "", "member" : "provingground.induction.coarse.ConstructorPattern.IdTarg", "link" : "provingground\/induction\/coarse\/ConstructorPattern$.html#IdTarg[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H]]extendsConstructorPattern[C,H,H]withProductwithSerializable", "kind" : "case class"}, {"label" : "IdW", "tail" : "", "member" : "provingground.induction.coarse.ConstructorPattern.IdW", "link" : "provingground\/induction\/coarse\/ConstructorPattern$.html#IdW[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H]]extendsConstructorPattern[provingground.HoTT.Term,H,H]withProductwithSerializable", "kind" : "case class"}, {"label" : "get", "tail" : "(constype: Cnstr, w: Typ[H]): ConstructorPattern[Term, Cnstr, H]", "member" : "provingground.induction.coarse.ConstructorPattern.get", "link" : "provingground\/induction\/coarse\/ConstructorPattern$.html#get[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],Cnstr<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Cnstr]](constype:Cnstr,w:provingground.HoTT.Typ[H]):provingground.induction.coarse.ConstructorPattern[provingground.HoTT.Term,Cnstr,H]", "kind" : "def"}, {"label" : "Head", "tail" : ": IdW[Term]", "member" : "provingground.induction.coarse.ConstructorPattern.Head", "link" : "provingground\/induction\/coarse\/ConstructorPattern$.html#Head:provingground.induction.coarse.ConstructorPattern.IdW[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/coarse\/ConstructorPattern$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/coarse\/ConstructorPattern$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/coarse\/ConstructorPattern$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/coarse\/ConstructorPattern$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/coarse\/ConstructorPattern$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/coarse\/ConstructorPattern$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/coarse\/ConstructorPattern$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/ConstructorPattern$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/ConstructorPattern$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/ConstructorPattern$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/coarse\/ConstructorPattern$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/coarse\/ConstructorPattern$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/coarse\/ConstructorPattern$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/coarse\/ConstructorPattern$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/coarse\/ConstructorPattern$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/coarse\/ConstructorPattern$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/coarse\/ConstructorPattern$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/coarse\/ConstructorPattern$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/coarse\/ConstructorPattern$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/induction\/coarse\/ConstructorPattern.html", "kind" : "trait"}, {"name" : "provingground.induction.coarse.ConstructorSeq", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/induction\/coarse\/ConstructorSeq.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/induction\/coarse\/ConstructorSeq.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ConstructorSeq[C, H]) ⇒ Boolean, msg: ⇒ Any): ConstructorSeq[C, H]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/coarse\/ConstructorSeq.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ConstructorSeq[C, H]) ⇒ Boolean): ConstructorSeq[C, H]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/coarse\/ConstructorSeq.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): ConstructorSeq[C, H]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/coarse\/ConstructorSeq.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ConstructorSeq[C, H]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/coarse\/ConstructorSeq.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ConstructorSeq[C, H], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/induction\/coarse\/ConstructorSeq.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ConstructorSeq[C, H], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/induction\/coarse\/ConstructorSeq.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "|:", "tail" : "(head: Constructor[C, H]): Cons[C, H]", "member" : "provingground.induction.coarse.ConstructorSeq.|:", "link" : "provingground\/induction\/coarse\/ConstructorSeq.html#|:(head:provingground.induction.coarse.Constructor[C,H]):provingground.induction.coarse.ConstructorSeq.Cons[C,H]", "kind" : "def"}, {"label" : "induc", "tail" : "(fibre: Func[H, Typ[C]]): InducType", "member" : "provingground.induction.coarse.ConstructorSeq.induc", "link" : "provingground\/induction\/coarse\/ConstructorSeq.html#induc(fibre:provingground.HoTT.Func[H,provingground.HoTT.Typ[C]]):ConstructorSeq.this.InducType", "kind" : "def"}, {"label" : "rec", "tail" : "(X: Typ[C]): RecType", "member" : "provingground.induction.coarse.ConstructorSeq.rec", "link" : "provingground\/induction\/coarse\/ConstructorSeq.html#rec(X:provingground.HoTT.Typ[C]):ConstructorSeq.this.RecType", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/coarse\/ConstructorSeq.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/coarse\/ConstructorSeq.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/coarse\/ConstructorSeq.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/coarse\/ConstructorSeq.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/coarse\/ConstructorSeq.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/coarse\/ConstructorSeq.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/coarse\/ConstructorSeq.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/ConstructorSeq.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/ConstructorSeq.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/ConstructorSeq.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/coarse\/ConstructorSeq.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/coarse\/ConstructorSeq.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/coarse\/ConstructorSeq.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/coarse\/ConstructorSeq.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/coarse\/ConstructorSeq.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/coarse\/ConstructorSeq.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/coarse\/ConstructorSeq.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/coarse\/ConstructorSeq.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/coarse\/ConstructorSeq.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "intros", "tail" : ": List[Term]", "member" : "provingground.induction.coarse.ConstructorSeq.intros", "link" : "provingground\/induction\/coarse\/ConstructorSeq.html#intros:List[provingground.HoTT.Term]", "kind" : "abstract val"}, {"label" : "inducDataLambda", "tail" : "(fibre: Func[H, Typ[C]]): (FuncLike[H, C]) ⇒ InducType", "member" : "provingground.induction.coarse.ConstructorSeq.inducDataLambda", "link" : "provingground\/induction\/coarse\/ConstructorSeq.html#inducDataLambda(fibre:provingground.HoTT.Func[H,provingground.HoTT.Typ[C]]):provingground.HoTT.FuncLike[H,C]=>ConstructorSeq.this.InducType", "kind" : "abstract def"}, {"member" : "provingground.induction.coarse.ConstructorSeq.InducType", "error" : "unsupported entity"}, {"label" : "inducDefn", "tail" : "(fibre: Func[H, Typ[C]]): InductiveDefinition[H, C]", "member" : "provingground.induction.coarse.ConstructorSeq.inducDefn", "link" : "provingground\/induction\/coarse\/ConstructorSeq.html#inducDefn(fibre:provingground.HoTT.Func[H,provingground.HoTT.Typ[C]]):provingground.induction.InductiveDefinition[H,C]", "kind" : "abstract def"}, {"label" : "recDataLambda", "tail" : "(X: Typ[C]): (Func[H, C]) ⇒ RecType", "member" : "provingground.induction.coarse.ConstructorSeq.recDataLambda", "link" : "provingground\/induction\/coarse\/ConstructorSeq.html#recDataLambda(X:provingground.HoTT.Typ[C]):provingground.HoTT.Func[H,C]=>ConstructorSeq.this.RecType", "kind" : "abstract def"}, {"member" : "provingground.induction.coarse.ConstructorSeq.RecType", "error" : "unsupported entity"}, {"label" : "W", "tail" : ": Typ[H]", "member" : "provingground.induction.coarse.ConstructorSeq.W", "link" : "provingground\/induction\/coarse\/ConstructorSeq.html#W:provingground.HoTT.Typ[H]", "kind" : "abstract val"}, {"label" : "recDefn", "tail" : "(X: Typ[C]): RecursiveDefinition[H, C]", "member" : "provingground.induction.coarse.ConstructorSeq.recDefn", "link" : "provingground\/induction\/coarse\/ConstructorSeq.html#recDefn(X:provingground.HoTT.Typ[C]):provingground.induction.RecursiveDefinition[H,C]", "kind" : "abstract def"}], "shortDescription" : "", "object" : "provingground\/induction\/coarse\/ConstructorSeq$.html", "members_object" : [{"label" : "inducFn", "tail" : "(cs: List[Constructor[C, H]], W: Typ[H], Xs: Func[H, Typ[C]]): InducType", "member" : "provingground.induction.coarse.ConstructorSeq.inducFn", "link" : "provingground\/induction\/coarse\/ConstructorSeq$.html#inducFn[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H]](cs:List[provingground.induction.coarse.Constructor[C,H]],W:provingground.HoTT.Typ[H],Xs:provingground.HoTT.Func[H,provingground.HoTT.Typ[C]]):provingground.induction.coarse.ConstructorSeq[C,H]#InducType", "kind" : "def"}, {"label" : "recFn", "tail" : "(cs: List[Constructor[C, H]], W: Typ[H], X: Typ[C]): RecType", "member" : "provingground.induction.coarse.ConstructorSeq.recFn", "link" : "provingground\/induction\/coarse\/ConstructorSeq$.html#recFn[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H]](cs:List[provingground.induction.coarse.Constructor[C,H]],W:provingground.HoTT.Typ[H],X:provingground.HoTT.Typ[C]):provingground.induction.coarse.ConstructorSeq[C,H]#RecType", "kind" : "def"}, {"label" : "fold", "tail" : "(W: Typ[H]): (List[Constructor[C, H]]) ⇒ ConstructorSeq[C, H]", "member" : "provingground.induction.coarse.ConstructorSeq.fold", "link" : "provingground\/induction\/coarse\/ConstructorSeq$.html#fold[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H]](W:provingground.HoTT.Typ[H]):List[provingground.induction.coarse.Constructor[C,H]]=>provingground.induction.coarse.ConstructorSeq[C,H]", "kind" : "def"}, {"label" : "Cons", "tail" : "", "member" : "provingground.induction.coarse.ConstructorSeq.Cons", "link" : "provingground\/induction\/coarse\/ConstructorSeq$.html#Cons[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H]]extendsConstructorSeq[C,H]withProductwithSerializable", "kind" : "case class"}, {"label" : "Empty", "tail" : "", "member" : "provingground.induction.coarse.ConstructorSeq.Empty", "link" : "provingground\/induction\/coarse\/ConstructorSeq$.html#Empty[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H]]extendsConstructorSeq[C,H]withProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/coarse\/ConstructorSeq$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/coarse\/ConstructorSeq$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/coarse\/ConstructorSeq$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/coarse\/ConstructorSeq$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/coarse\/ConstructorSeq$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/coarse\/ConstructorSeq$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/coarse\/ConstructorSeq$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/ConstructorSeq$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/ConstructorSeq$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/ConstructorSeq$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/coarse\/ConstructorSeq$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/coarse\/ConstructorSeq$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/coarse\/ConstructorSeq$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/coarse\/ConstructorSeq$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/coarse\/ConstructorSeq$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/coarse\/ConstructorSeq$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/coarse\/ConstructorSeq$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/coarse\/ConstructorSeq$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/coarse\/ConstructorSeq$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/induction\/coarse\/ConstructorSeq.html", "kind" : "trait"}, {"name" : "provingground.induction.coarse.ConstructorTyp", "shortDescription" : "Constructor pattern with type, for convenient building.", "object" : "provingground\/induction\/coarse\/ConstructorTyp$.html", "members_object" : [{"label" : "head", "tail" : "(typ: Typ[H]): ConstructorTyp[C, H, H]", "member" : "provingground.induction.coarse.ConstructorTyp.head", "link" : "provingground\/induction\/coarse\/ConstructorTyp$.html#head[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C]](typ:provingground.HoTT.Typ[H]):provingground.induction.coarse.ConstructorTyp[C,H,H]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/coarse\/ConstructorTyp$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/coarse\/ConstructorTyp$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/coarse\/ConstructorTyp$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/coarse\/ConstructorTyp$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/coarse\/ConstructorTyp$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/coarse\/ConstructorTyp$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/coarse\/ConstructorTyp$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/ConstructorTyp$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/ConstructorTyp$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/ConstructorTyp$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/coarse\/ConstructorTyp$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/coarse\/ConstructorTyp$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/coarse\/ConstructorTyp$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/coarse\/ConstructorTyp$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/coarse\/ConstructorTyp$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/coarse\/ConstructorTyp$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/coarse\/ConstructorTyp$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/coarse\/ConstructorTyp$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/coarse\/ConstructorTyp$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/induction\/coarse\/ConstructorTyp.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/induction\/coarse\/ConstructorTyp.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ConstructorTyp[C, F, H]) ⇒ Boolean, msg: ⇒ Any): ConstructorTyp[C, F, H]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/coarse\/ConstructorTyp.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ConstructorTyp[C, F, H]) ⇒ Boolean): ConstructorTyp[C, F, H]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/coarse\/ConstructorTyp.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): ConstructorTyp[C, F, H]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/coarse\/ConstructorTyp.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ConstructorTyp[C, F, H]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/coarse\/ConstructorTyp.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ConstructorTyp[C, F, H], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/induction\/coarse\/ConstructorTyp.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ConstructorTyp[C, F, H], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/induction\/coarse\/ConstructorTyp.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "~>>:", "tail" : "(thatVar: H): ConstructorTyp[C, FuncLike[H, F], H]", "member" : "provingground.induction.coarse.ConstructorTyp.~>>:", "link" : "provingground\/induction\/coarse\/ConstructorTyp.html#~>>:[T<:provingground.HoTT.Termwithprovingground.HoTT.Subs[T]](thatVar:H):provingground.induction.coarse.ConstructorTyp[C,provingground.HoTT.FuncLike[H,F],H]", "kind" : "def"}, {"label" : "->>:", "tail" : "(that: Typ[T]): ConstructorTyp[C, Func[T, F], H]", "member" : "provingground.induction.coarse.ConstructorTyp.->>:", "link" : "provingground\/induction\/coarse\/ConstructorTyp.html#->>:[T<:provingground.HoTT.Termwithprovingground.HoTT.Subs[T]](that:provingground.HoTT.Typ[T]):provingground.induction.coarse.ConstructorTyp[C,provingground.HoTT.Func[T,F],H]", "kind" : "def"}, {"label" : "-->>:", "tail" : "(that: IterFuncTyp[H, C, FF]): ConstructorTyp[C, Func[FF, F], H]", "member" : "provingground.induction.coarse.ConstructorTyp.-->>:", "link" : "provingground\/induction\/coarse\/ConstructorTyp.html#-->>:[FF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[FF]](that:provingground.induction.coarse.IterFuncPattern.IterFuncTyp[H,C,FF]):provingground.induction.coarse.ConstructorTyp[C,provingground.HoTT.Func[FF,F],H]", "kind" : "def"}, {"label" : "-->>:", "tail" : "(that: Typ[H]): ConstructorTyp[C, Func[H, F], H]", "member" : "provingground.induction.coarse.ConstructorTyp.-->>:", "link" : "provingground\/induction\/coarse\/ConstructorTyp.html#-->>:(that:provingground.HoTT.Typ[H]):provingground.induction.coarse.ConstructorTyp[C,provingground.HoTT.Func[H,F],H]", "kind" : "def"}, {"label" : ">::", "tail" : "(cons: F): ConstructorDefn[F, C, H]", "member" : "provingground.induction.coarse.ConstructorTyp.>::", "link" : "provingground\/induction\/coarse\/ConstructorTyp.html#>::(cons:F):provingground.induction.coarse.ConstructorDefn[F,C,H]", "kind" : "def"}, {"label" : ":::", "tail" : "(name: AnySym): Constructor[C, H]", "member" : "provingground.induction.coarse.ConstructorTyp.:::", "link" : "provingground\/induction\/coarse\/ConstructorTyp.html#:::(name:provingground.HoTT.AnySym):provingground.induction.coarse.Constructor[C,H]", "kind" : "def"}, {"member" : "provingground.induction.coarse.ConstructorTyp#<init>", "error" : "unsupported entity"}, {"label" : "typ", "tail" : ": Typ[H]", "member" : "provingground.induction.coarse.ConstructorTyp.typ", "link" : "provingground\/induction\/coarse\/ConstructorTyp.html#typ:provingground.HoTT.Typ[H]", "kind" : "val"}, {"label" : "pattern", "tail" : ": ConstructorPattern[C, F, H]", "member" : "provingground.induction.coarse.ConstructorTyp.pattern", "link" : "provingground\/induction\/coarse\/ConstructorTyp.html#pattern:provingground.induction.coarse.ConstructorPattern[C,F,H]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/coarse\/ConstructorTyp.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/coarse\/ConstructorTyp.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/coarse\/ConstructorTyp.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/coarse\/ConstructorTyp.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/coarse\/ConstructorTyp.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/coarse\/ConstructorTyp.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/coarse\/ConstructorTyp.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/ConstructorTyp.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/ConstructorTyp.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/ConstructorTyp.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/coarse\/ConstructorTyp.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/coarse\/ConstructorTyp.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/coarse\/ConstructorTyp.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/coarse\/ConstructorTyp.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/coarse\/ConstructorTyp.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/coarse\/ConstructorTyp.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/induction\/coarse\/ConstructorTyp.html", "kind" : "case class"}, {"name" : "provingground.induction.coarse.Curry", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/induction\/coarse\/Curry.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/induction\/coarse\/Curry.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Curry[Iter, Total, Cod]) ⇒ Boolean, msg: ⇒ Any): Curry[Iter, Total, Cod]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/coarse\/Curry.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Curry[Iter, Total, Cod]) ⇒ Boolean): Curry[Iter, Total, Cod]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/coarse\/Curry.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Curry[Iter, Total, Cod]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/coarse\/Curry.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Curry[Iter, Total, Cod]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/coarse\/Curry.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Curry[Iter, Total, Cod], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/induction\/coarse\/Curry.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Curry[Iter, Total, Cod], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/induction\/coarse\/Curry.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/coarse\/Curry.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/coarse\/Curry.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/coarse\/Curry.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/coarse\/Curry.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/coarse\/Curry.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/coarse\/Curry.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/coarse\/Curry.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/Curry.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/Curry.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/Curry.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/coarse\/Curry.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/coarse\/Curry.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/coarse\/Curry.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/coarse\/Curry.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/coarse\/Curry.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/coarse\/Curry.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/coarse\/Curry.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/coarse\/Curry.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/coarse\/Curry.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "unCurry", "tail" : "(cfn: Iter): Func[Total, Cod]", "member" : "provingground.induction.coarse.Curry.unCurry", "link" : "provingground\/induction\/coarse\/Curry.html#unCurry(cfn:Iter):provingground.HoTT.Func[Total,Cod]", "kind" : "abstract def"}, {"label" : "curry", "tail" : "(fn: Func[Total, Cod]): Iter", "member" : "provingground.induction.coarse.Curry.curry", "link" : "provingground\/induction\/coarse\/Curry.html#curry(fn:provingground.HoTT.Func[Total,Cod]):Iter", "kind" : "abstract def"}], "shortDescription" : "", "object" : "provingground\/induction\/coarse\/Curry$.html", "members_object" : [{"label" : "funcCurry", "tail" : "(base: Curry[Iter, Total, Cod]): Curry[Func[Dom, Iter], PairTerm[Dom, Total], Cod]", "member" : "provingground.induction.coarse.Curry.funcCurry", "link" : "provingground\/induction\/coarse\/Curry$.html#funcCurry[Dom<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Dom],Iter<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Iter],Total<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Total],Cod<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Cod]](implicitbase:provingground.induction.coarse.Curry[Iter,Total,Cod]):provingground.induction.coarse.Curry[provingground.HoTT.Func[Dom,Iter],provingground.HoTT.PairTerm[Dom,Total],Cod]", "kind" : "implicit def"}, {"label" : "idCurry", "tail" : "(): Curry[Func[D, C], D, C]", "member" : "provingground.induction.coarse.Curry.idCurry", "link" : "provingground\/induction\/coarse\/Curry$.html#idCurry[D<:provingground.HoTT.Termwithprovingground.HoTT.Subs[D],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C]]:provingground.induction.coarse.Curry[provingground.HoTT.Func[D,C],D,C]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/coarse\/Curry$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/coarse\/Curry$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/coarse\/Curry$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/coarse\/Curry$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/coarse\/Curry$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/coarse\/Curry$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/coarse\/Curry$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/Curry$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/Curry$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/Curry$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/coarse\/Curry$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/coarse\/Curry$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/coarse\/Curry$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/coarse\/Curry$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/coarse\/Curry$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/coarse\/Curry$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/coarse\/Curry$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/coarse\/Curry$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/coarse\/Curry$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/induction\/coarse\/Curry.html", "kind" : "trait"}, {"name" : "provingground.induction.coarse.FmlyPtn", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (FmlyPtn[O, C, F]) ⇒ Boolean, msg: ⇒ Any): FmlyPtn[O, C, F]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (FmlyPtn[O, C, F]) ⇒ Boolean): FmlyPtn[O, C, F]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): FmlyPtn[O, C, F]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): FmlyPtn[O, C, F]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (FmlyPtn[O, C, F], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (FmlyPtn[O, C, F], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "~>:", "tail" : "(tailVar: TT): FmlyPtn[O, C, FuncLike[TT, F]]", "member" : "provingground.induction.coarse.FmlyPtn.~>:", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#~>:[TT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TT]](tailVar:TT):provingground.induction.coarse.FmlyPtn[O,C,provingground.HoTT.FuncLike[TT,F]]", "kind" : "def"}, {"label" : "->:", "tail" : "(tail: Typ[TT]): FmlyPtn[O, C, Func[TT, F]]", "member" : "provingground.induction.coarse.FmlyPtn.->:", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#->:[TT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TT]](tail:provingground.HoTT.Typ[TT]):provingground.induction.coarse.FmlyPtn[O,C,provingground.HoTT.Func[TT,F]]", "kind" : "def"}, {"label" : "me", "tail" : ": FmlyPtn[O, C, F] { ... \/* 5 definitions in type refinement *\/ }", "member" : "provingground.induction.coarse.FmlyPtn.me", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#me:provingground.induction.coarse.FmlyPtn[O,C,F]{typeIterFunc=FmlyPtn.this.IterFunc;typeIterTypFunc=FmlyPtn.this.IterTypFunc;typeIterDepFunc=FmlyPtn.this.IterDepFunc;typeArgType=FmlyPtn.this.ArgType;typeTotal=FmlyPtn.this.Total}", "kind" : "val"}, {"label" : "FamilyType", "tail" : "", "member" : "provingground.induction.coarse.FmlyPtn.FamilyType", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#FamilyType=F", "kind" : "type"}, {"label" : "Cod", "tail" : "", "member" : "provingground.induction.coarse.FmlyPtn.Cod", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#Cod=C", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/coarse\/FmlyPtn.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "subs", "tail" : "(x: Term, y: Term): FmlyPtn[O, C, F]", "member" : "provingground.induction.coarse.FmlyPtn.subs", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.induction.coarse.FmlyPtn[O,C,F]", "kind" : "abstract def"}, {"label" : "withCod", "tail" : "(w: Typ[O]): FmlyPtn[O, CC, F]", "member" : "provingground.induction.coarse.FmlyPtn.withCod", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#withCod[CC<:provingground.HoTT.Termwithprovingground.HoTT.Subs[CC]](w:provingground.HoTT.Typ[O]):provingground.induction.coarse.FmlyPtn[O,CC,F]", "kind" : "abstract def"}, {"label" : "incl", "tail" : "(term: O, arg: ArgType, w: FamilyType): Total", "member" : "provingground.induction.coarse.FmlyPtn.incl", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#incl(term:O,arg:FmlyPtn.this.ArgType,w:FmlyPtn.this.FamilyType):FmlyPtn.this.Total", "kind" : "abstract def"}, {"label" : "argOpt", "tail" : "(l: List[Term]): Option[ArgType]", "member" : "provingground.induction.coarse.FmlyPtn.argOpt", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#argOpt(l:List[provingground.HoTT.Term]):Option[FmlyPtn.this.ArgType]", "kind" : "abstract def"}, {"member" : "provingground.induction.coarse.FmlyPtn.ArgType", "error" : "unsupported entity"}, {"label" : "contractType", "tail" : "(w: FamilyType)(arg: ArgType): Typ[O]", "member" : "provingground.induction.coarse.FmlyPtn.contractType", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#contractType(w:FmlyPtn.this.FamilyType)(arg:FmlyPtn.this.ArgType):provingground.HoTT.Typ[O]", "kind" : "abstract def"}, {"label" : "depUncurry", "tail" : "(g: IterDepFunc): FuncLike[Total, Cod]", "member" : "provingground.induction.coarse.FmlyPtn.depUncurry", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#depUncurry(g:FmlyPtn.this.IterDepFunc):provingground.HoTT.FuncLike[FmlyPtn.this.Total,FmlyPtn.this.Cod]", "kind" : "abstract def"}, {"label" : "depTotalDomain", "tail" : "(g: IterDepFunc): Typ[Total]", "member" : "provingground.induction.coarse.FmlyPtn.depTotalDomain", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#depTotalDomain(g:FmlyPtn.this.IterDepFunc):provingground.HoTT.Typ[FmlyPtn.this.Total]", "kind" : "abstract def"}, {"label" : "depCurry", "tail" : "(f: FuncLike[Total, Cod]): IterDepFunc", "member" : "provingground.induction.coarse.FmlyPtn.depCurry", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#depCurry(f:provingground.HoTT.FuncLike[FmlyPtn.this.Total,FmlyPtn.this.Cod]):FmlyPtn.this.IterDepFunc", "kind" : "abstract def"}, {"label" : "uncurryTyp", "tail" : "(g: IterTypFunc): Func[Total, Typ[Cod]]", "member" : "provingground.induction.coarse.FmlyPtn.uncurryTyp", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#uncurryTyp(g:FmlyPtn.this.IterTypFunc):provingground.HoTT.Func[FmlyPtn.this.Total,provingground.HoTT.Typ[FmlyPtn.this.Cod]]", "kind" : "abstract def"}, {"label" : "uncurry", "tail" : "(g: IterFunc): Func[Total, Cod]", "member" : "provingground.induction.coarse.FmlyPtn.uncurry", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#uncurry(g:FmlyPtn.this.IterFunc):provingground.HoTT.Func[FmlyPtn.this.Total,FmlyPtn.this.Cod]", "kind" : "abstract def"}, {"label" : "totalTypDomain", "tail" : "(g: IterTypFunc): Typ[Total]", "member" : "provingground.induction.coarse.FmlyPtn.totalTypDomain", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#totalTypDomain(g:FmlyPtn.this.IterTypFunc):provingground.HoTT.Typ[FmlyPtn.this.Total]", "kind" : "abstract def"}, {"label" : "totalDomain", "tail" : "(g: IterFunc): Typ[Total]", "member" : "provingground.induction.coarse.FmlyPtn.totalDomain", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#totalDomain(g:FmlyPtn.this.IterFunc):provingground.HoTT.Typ[FmlyPtn.this.Total]", "kind" : "abstract def"}, {"label" : "curryTyp", "tail" : "(w: Func[Total, Typ[Cod]]): IterTypFunc", "member" : "provingground.induction.coarse.FmlyPtn.curryTyp", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#curryTyp(w:provingground.HoTT.Func[FmlyPtn.this.Total,provingground.HoTT.Typ[FmlyPtn.this.Cod]]):FmlyPtn.this.IterTypFunc", "kind" : "abstract def"}, {"label" : "curry", "tail" : "(f: Func[Total, Cod]): IterFunc", "member" : "provingground.induction.coarse.FmlyPtn.curry", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#curry(f:provingground.HoTT.Func[FmlyPtn.this.Total,FmlyPtn.this.Cod]):FmlyPtn.this.IterFunc", "kind" : "abstract def"}, {"label" : "depFill", "tail" : "(g: IterDepFunc)(arg: ArgType): FuncLike[O, C]", "member" : "provingground.induction.coarse.FmlyPtn.depFill", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#depFill(g:FmlyPtn.this.IterDepFunc)(arg:FmlyPtn.this.ArgType):provingground.HoTT.FuncLike[O,C]", "kind" : "abstract def"}, {"label" : "fill", "tail" : "(g: IterFunc)(arg: ArgType): Func[O, C]", "member" : "provingground.induction.coarse.FmlyPtn.fill", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#fill(g:FmlyPtn.this.IterFunc)(arg:FmlyPtn.this.ArgType):provingground.HoTT.Func[O,C]", "kind" : "abstract def"}, {"label" : "domTotal", "tail" : "(w: FamilyType): Typ[Total]", "member" : "provingground.induction.coarse.FmlyPtn.domTotal", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#domTotal(w:FmlyPtn.this.FamilyType):provingground.HoTT.Typ[FmlyPtn.this.Total]", "kind" : "abstract def"}, {"label" : "iterDepFuncTyp", "tail" : "(w: FamilyType, xs: IterTypFunc): Typ[IterDepFunc]", "member" : "provingground.induction.coarse.FmlyPtn.iterDepFuncTyp", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#iterDepFuncTyp(w:FmlyPtn.this.FamilyType,xs:FmlyPtn.this.IterTypFunc):provingground.HoTT.Typ[FmlyPtn.this.IterDepFunc]", "kind" : "abstract def"}, {"label" : "iterFuncTyp", "tail" : "(w: FamilyType, x: Typ[Cod]): Typ[IterFunc]", "member" : "provingground.induction.coarse.FmlyPtn.iterFuncTyp", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#iterFuncTyp(w:FmlyPtn.this.FamilyType,x:provingground.HoTT.Typ[FmlyPtn.this.Cod]):provingground.HoTT.Typ[FmlyPtn.this.IterFunc]", "kind" : "abstract def"}, {"member" : "provingground.induction.coarse.FmlyPtn.IterDepFunc", "error" : "unsupported entity"}, {"member" : "provingground.induction.coarse.FmlyPtn.IterTypFunc", "error" : "unsupported entity"}, {"member" : "provingground.induction.coarse.FmlyPtn.IterFunc", "error" : "unsupported entity"}, {"label" : "value", "tail" : "(x: Total): O", "member" : "provingground.induction.coarse.FmlyPtn.value", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#value(x:FmlyPtn.this.Total):O", "kind" : "abstract def"}, {"member" : "provingground.induction.coarse.FmlyPtn.Total", "error" : "unsupported entity"}, {"label" : "univLevel", "tail" : ": Int", "member" : "provingground.induction.coarse.FmlyPtn.univLevel", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#univLevel:Int", "kind" : "abstract val"}], "shortDescription" : "A pattern for families, e.g.", "object" : "provingground\/induction\/coarse\/FmlyPtn$.html", "members_object" : [{"label" : "DepFuncFmlyPtn", "tail" : "", "member" : "provingground.induction.coarse.FmlyPtn.DepFuncFmlyPtn", "link" : "provingground\/induction\/coarse\/FmlyPtn$.html#DepFuncFmlyPtn[TT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TT],FV<:provingground.HoTT.Termwithprovingground.HoTT.Subs[FV],I<:provingground.HoTT.Termwithprovingground.HoTT.Subs[I],IT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IT],DI<:provingground.HoTT.Termwithprovingground.HoTT.Subs[DI],S<:provingground.HoTT.Termwithprovingground.HoTT.Subs[S],O<:provingground.HoTT.Termwithprovingground.HoTT.Subs[O],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],HTot<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HTot]]extendsFmlyPtn.RecFmlyPtn[TT,FV,provingground.HoTT.FuncLike[TT,FV],S,O,C]withProductwithSerializable", "kind" : "case class"}, {"label" : "FuncFmlyPtn", "tail" : "", "member" : "provingground.induction.coarse.FmlyPtn.FuncFmlyPtn", "link" : "provingground\/induction\/coarse\/FmlyPtn$.html#FuncFmlyPtn[TT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TT],FV<:provingground.HoTT.Termwithprovingground.HoTT.Subs[FV],I<:provingground.HoTT.Termwithprovingground.HoTT.Subs[I],IT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IT],DI<:provingground.HoTT.Termwithprovingground.HoTT.Subs[DI],S<:provingground.HoTT.Termwithprovingground.HoTT.Subs[S],O<:provingground.HoTT.Termwithprovingground.HoTT.Subs[O],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],HTot<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HTot]]extendsFmlyPtn[O,C,provingground.HoTT.Func[TT,FV]]withProductwithSerializable", "kind" : "case class"}, {"label" : "RecFmlyPtn", "tail" : "", "member" : "provingground.induction.coarse.FmlyPtn.RecFmlyPtn", "link" : "provingground\/induction\/coarse\/FmlyPtn$.html#RecFmlyPtn[TT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TT],FV<:provingground.HoTT.Termwithprovingground.HoTT.Subs[FV],F<:provingground.HoTT.FuncLike[TT,FV]withprovingground.HoTT.Subs[F],S<:provingground.HoTT.Termwithprovingground.HoTT.Subs[S],O<:provingground.HoTT.Termwithprovingground.HoTT.Subs[O],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C]]extendsFmlyPtn[O,C,F]", "kind" : "trait"}, {"label" : "IdFmlyPtn", "tail" : "", "member" : "provingground.induction.coarse.FmlyPtn.IdFmlyPtn", "link" : "provingground\/induction\/coarse\/FmlyPtn$.html#IdFmlyPtn[O<:provingground.HoTT.Termwithprovingground.HoTT.Subs[O],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C]]extendsFmlyPtn[O,C,provingground.HoTT.Typ[O]]withProductwithSerializable", "kind" : "case class"}, {"label" : "get", "tail" : "(typ: Typ[O], fmlyTyp: Typ[F]): FmlyPtn[O, Term, F]", "member" : "provingground.induction.coarse.FmlyPtn.get", "link" : "provingground\/induction\/coarse\/FmlyPtn$.html#get[O<:provingground.HoTT.Termwithprovingground.HoTT.Subs[O],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F]](typ:provingground.HoTT.Typ[O],fmlyTyp:provingground.HoTT.Typ[F]):provingground.induction.coarse.FmlyPtn[O,provingground.HoTT.Term,F]", "kind" : "def"}, {"label" : "getOpt", "tail" : "(typ: Typ[O], fmlyTyp: Typ[F]): Option[FmlyPtn[O, Term, F]]", "member" : "provingground.induction.coarse.FmlyPtn.getOpt", "link" : "provingground\/induction\/coarse\/FmlyPtn$.html#getOpt[O<:provingground.HoTT.Termwithprovingground.HoTT.Subs[O],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F]](typ:provingground.HoTT.Typ[O],fmlyTyp:provingground.HoTT.Typ[F]):Option[provingground.induction.coarse.FmlyPtn[O,provingground.HoTT.Term,F]]", "kind" : "def"}, {"label" : "fmly", "tail" : "(ptn: FmlyPtn[Term, C, F])(name: AnySym): F", "member" : "provingground.induction.coarse.FmlyPtn.fmly", "link" : "provingground\/induction\/coarse\/FmlyPtn$.html#fmly[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F]](ptn:provingground.induction.coarse.FmlyPtn[provingground.HoTT.Term,C,F])(name:provingground.HoTT.AnySym):F", "kind" : "def"}, {"label" : "fmlyTyp", "tail" : "(ptn: FmlyPtn[Term, C, F]): Typ[F]", "member" : "provingground.induction.coarse.FmlyPtn.fmlyTyp", "link" : "provingground\/induction\/coarse\/FmlyPtn$.html#fmlyTyp[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F]](ptn:provingground.induction.coarse.FmlyPtn[provingground.HoTT.Term,C,F]):provingground.HoTT.Typ[F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/coarse\/FmlyPtn$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/coarse\/FmlyPtn$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/coarse\/FmlyPtn$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/coarse\/FmlyPtn$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/coarse\/FmlyPtn$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/coarse\/FmlyPtn$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/coarse\/FmlyPtn$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/FmlyPtn$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/FmlyPtn$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/FmlyPtn$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/coarse\/FmlyPtn$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/coarse\/FmlyPtn$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/coarse\/FmlyPtn$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/coarse\/FmlyPtn$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/coarse\/FmlyPtn$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/coarse\/FmlyPtn$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/coarse\/FmlyPtn$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/coarse\/FmlyPtn$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/coarse\/FmlyPtn$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/induction\/coarse\/FmlyPtn.html", "kind" : "trait"}, {"name" : "provingground.induction.coarse.Implicits", "shortDescription" : "", "object" : "provingground\/induction\/coarse\/Implicits$.html", "members_object" : [{"label" : "UnifAppln", "tail" : "", "member" : "provingground.induction.coarse.Implicits.UnifAppln", "link" : "provingground\/induction\/coarse\/Implicits$.html#UnifApplnextendsAnyRef", "kind" : "implicit class"}, {"label" : "IndTypFmly", "tail" : "", "member" : "provingground.induction.coarse.Implicits.IndTypFmly", "link" : "provingground\/induction\/coarse\/Implicits$.html#IndTypFmly[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F]]extendsAnyRef", "kind" : "implicit class"}, {"label" : "IterFuncTypHead", "tail" : "", "member" : "provingground.induction.coarse.Implicits.IterFuncTypHead", "link" : "provingground\/induction\/coarse\/Implicits$.html#IterFuncTypHead[O<:provingground.HoTT.Termwithprovingground.HoTT.Subs[O]]extendsAnyRef", "kind" : "implicit class"}, {"label" : "TypAsSeqHead", "tail" : "", "member" : "provingground.induction.coarse.Implicits.TypAsSeqHead", "link" : "provingground\/induction\/coarse\/Implicits$.html#TypAsSeqHead[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H]]extendsAnyRef", "kind" : "implicit class"}, {"label" : "SymbFmly", "tail" : "", "member" : "provingground.induction.coarse.Implicits.SymbFmly", "link" : "provingground\/induction\/coarse\/Implicits$.html#SymbFmly[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F]]extendsAnyRef", "kind" : "implicit class"}, {"label" : "ConstructorHead", "tail" : "", "member" : "provingground.induction.coarse.Implicits.ConstructorHead", "link" : "provingground\/induction\/coarse\/Implicits$.html#ConstructorHead[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H]]extendsAnyRef", "kind" : "implicit class"}, {"label" : "Types", "tail" : ": IdFmlyPtn[Term, Term]", "member" : "provingground.induction.coarse.Implicits.Types", "link" : "provingground\/induction\/coarse\/Implicits$.html#Types:provingground.induction.coarse.FmlyPtn.IdFmlyPtn[provingground.HoTT.Term,provingground.HoTT.Term]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/coarse\/Implicits$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/coarse\/Implicits$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/coarse\/Implicits$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/coarse\/Implicits$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/coarse\/Implicits$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/coarse\/Implicits$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/coarse\/Implicits$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/Implicits$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/Implicits$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/Implicits$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/coarse\/Implicits$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/coarse\/Implicits$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/coarse\/Implicits$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/coarse\/Implicits$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/coarse\/Implicits$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/coarse\/Implicits$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/coarse\/Implicits$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/coarse\/Implicits$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/coarse\/Implicits$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.induction.coarse.IndexedConstructorPatterns", "shortDescription" : "", "object" : "provingground\/induction\/coarse\/IndexedConstructorPatterns$.html", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (IndexedConstructorPatterns[C, H, F]) ⇒ Boolean, msg: ⇒ Any): IndexedConstructorPatterns[C, H, F]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (IndexedConstructorPatterns[C, H, F]) ⇒ Boolean): IndexedConstructorPatterns[C, H, F]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): IndexedConstructorPatterns[C, H, F]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): IndexedConstructorPatterns[C, H, F]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (IndexedConstructorPatterns[C, H, F], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (IndexedConstructorPatterns[C, H, F], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "iConstructorSeq", "tail" : "", "member" : "provingground.induction.coarse.IndexedConstructorPatterns.iConstructorSeq", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#iConstructorSeq", "kind" : "object"}, {"label" : "Family", "tail" : "", "member" : "provingground.induction.coarse.IndexedConstructorPatterns.Family", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#FamilyextendsProductwithSerializable", "kind" : "case class"}, {"label" : "iConstructorSeq", "tail" : "", "member" : "provingground.induction.coarse.IndexedConstructorPatterns.iConstructorSeq", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#iConstructorSeqextendsAnyRef", "kind" : "sealed trait"}, {"label" : "PartialiConstructorSeq", "tail" : "", "member" : "provingground.induction.coarse.IndexedConstructorPatterns.PartialiConstructorSeq", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#PartialiConstructorSeq[FF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[FF]]extendsProductwithSerializable", "kind" : "case class"}, {"label" : "iConstructorDefn", "tail" : "", "member" : "provingground.induction.coarse.IndexedConstructorPatterns.iConstructorDefn", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#iConstructorDefn[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsIndexedConstructorPatterns.this.iConstructorwithProductwithSerializable", "kind" : "case class"}, {"label" : "iConstructor", "tail" : "", "member" : "provingground.induction.coarse.IndexedConstructorPatterns.iConstructor", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#iConstructor", "kind" : "object"}, {"label" : "iConstructor", "tail" : "", "member" : "provingground.induction.coarse.IndexedConstructorPatterns.iConstructor", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#iConstructorextendsAnyRef", "kind" : "trait"}, {"label" : "CnstDepFuncPtn", "tail" : "", "member" : "provingground.induction.coarse.IndexedConstructorPatterns.CnstDepFuncPtn", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#CnstDepFuncPtn[TT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TT],U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V],VV<:provingground.HoTT.Termwithprovingground.HoTT.Subs[VV],W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W]]extendsIndexedConstructorPatterns.this.RecursiveiConstructorPattern[TT,U,provingground.HoTT.FuncLike[TT,U]]withProductwithSerializable", "kind" : "case class"}, {"label" : "DepFuncPtn", "tail" : "", "member" : "provingground.induction.coarse.IndexedConstructorPatterns.DepFuncPtn", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#DepFuncPtn[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V],VV<:provingground.HoTT.Termwithprovingground.HoTT.Subs[VV],W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],TF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TF]]extendsIndexedConstructorPatterns.this.RecursiveiConstructorPattern[TF,U,provingground.HoTT.FuncLike[TF,U]]withProductwithSerializable", "kind" : "case class"}, {"label" : "CnstFncPtn", "tail" : "", "member" : "provingground.induction.coarse.IndexedConstructorPatterns.CnstFncPtn", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#CnstFncPtn[TT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TT],HC<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HC]]extendsIndexedConstructorPatterns.this.RecursiveiConstructorPattern[TT,HC,provingground.HoTT.Func[TT,HC]]withProductwithSerializable", "kind" : "case class"}, {"label" : "FuncPtn", "tail" : "", "member" : "provingground.induction.coarse.IndexedConstructorPatterns.FuncPtn", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#FuncPtn[TF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TF],HC<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HC]]extendsIndexedConstructorPatterns.this.RecursiveiConstructorPattern[TF,HC,provingground.HoTT.Func[TF,HC]]withProductwithSerializable", "kind" : "case class"}, {"label" : "RecursiveiConstructorPattern", "tail" : "", "member" : "provingground.induction.coarse.IndexedConstructorPatterns.RecursiveiConstructorPattern", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#RecursiveiConstructorPattern[ArgT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[ArgT],HeadT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HeadT],CT<:provingground.HoTT.FuncLike[ArgT,HeadT]withprovingground.HoTT.Subs[CT]]extendsIndexedConstructorPatterns.this.iConstructorPattern[CT]", "kind" : "sealed trait"}, {"label" : "iW", "tail" : "", "member" : "provingground.induction.coarse.IndexedConstructorPatterns.iW", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#iWextendsIndexedConstructorPatterns.this.iConstructorPattern[H]withProductwithSerializable", "kind" : "case class"}, {"label" : "iConstructorTyp", "tail" : "", "member" : "provingground.induction.coarse.IndexedConstructorPatterns.iConstructorTyp", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#iConstructorTyp", "kind" : "object"}, {"label" : "iConstructorTyp", "tail" : "", "member" : "provingground.induction.coarse.IndexedConstructorPatterns.iConstructorTyp", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#iConstructorTyp[Cnstr<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Cnstr]]extendsProductwithSerializable", "kind" : "case class"}, {"label" : "iConstructorPattern", "tail" : "", "member" : "provingground.induction.coarse.IndexedConstructorPatterns.iConstructorPattern", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#iConstructorPattern[Cnstr<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Cnstr]]extendsAnyRef", "kind" : "sealed trait"}, {"label" : "Cod", "tail" : "", "member" : "provingground.induction.coarse.IndexedConstructorPatterns.Cod", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#Cod=C", "kind" : "type"}, {"label" : "DI", "tail" : "", "member" : "provingground.induction.coarse.IndexedConstructorPatterns.DI", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#DI=IndexedConstructorPatterns.this.typFmlyPtn.IterDepFunc", "kind" : "type"}, {"label" : "IT", "tail" : "", "member" : "provingground.induction.coarse.IndexedConstructorPatterns.IT", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#IT=IndexedConstructorPatterns.this.typFmlyPtn.IterTypFunc", "kind" : "type"}, {"label" : "I", "tail" : "", "member" : "provingground.induction.coarse.IndexedConstructorPatterns.I", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#I=IndexedConstructorPatterns.this.typFmlyPtn.IterFunc", "kind" : "type"}, {"label" : "Ind", "tail" : "", "member" : "provingground.induction.coarse.IndexedConstructorPatterns.Ind", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#Ind=IndexedConstructorPatterns.this.typFmlyPtn.ArgType", "kind" : "type"}, {"label" : "getTotalArg", "tail" : "(typ: Typ[Term], fmly: F): ArgType", "member" : "provingground.induction.coarse.IndexedConstructorPatterns.getTotalArg", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#getTotalArg(typ:provingground.HoTT.Typ[provingground.HoTT.Term],fmly:F):IndexedConstructorPatterns.this.typFmlyPtn.ArgType", "kind" : "def"}, {"label" : "totalArg", "tail" : "(typ: Term, fmly: F, accum: Term): Term", "member" : "provingground.induction.coarse.IndexedConstructorPatterns.totalArg", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#totalArg(typ:provingground.HoTT.Term,fmly:F,accum:provingground.HoTT.Term):provingground.HoTT.Term", "kind" : "def"}, {"member" : "provingground.induction.coarse.IndexedConstructorPatterns#<init>", "error" : "unsupported entity"}, {"label" : "typFmlyPtn", "tail" : ": FmlyPtn[H, C, F]", "member" : "provingground.induction.coarse.IndexedConstructorPatterns.typFmlyPtn", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#typFmlyPtn:provingground.induction.coarse.FmlyPtn[H,C,F]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "emptySeq", "tail" : "(typFmlyPtn: FmlyPtn[H, C, F], fmly: F): iConstructorSeq", "member" : "provingground.induction.coarse.IndexedConstructorPatterns.emptySeq", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns$.html#emptySeq[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F]](typFmlyPtn:provingground.induction.coarse.FmlyPtn[H,C,F],fmly:F):provingground.induction.coarse.IndexedConstructorPatterns[C,H,F]#iConstructorSeq", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html", "kind" : "class"}, {"name" : "provingground.induction.coarse.InductiveTyp", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (InductiveTyp[C, H]) ⇒ Boolean, msg: ⇒ Any): InductiveTyp[C, H]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (InductiveTyp[C, H]) ⇒ Boolean): InductiveTyp[C, H]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): InductiveTyp[C, H]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): InductiveTyp[C, H]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (InductiveTyp[C, H], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (InductiveTyp[C, H], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "Elem", "tail" : "", "member" : "provingground.HoTT.Typ.Elem", "link" : "provingground\/HoTT$$Typ.html#Elem", "kind" : "object"}, {"label" : "constructorFns", "tail" : ": List[Term]", "member" : "provingground.induction.coarse.InductiveTyp.constructorFns", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#constructorFns:List[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "ptns", "tail" : ": List[ConstructorPattern[C, ptns.$anonfun.x$1.type.ConstructorType, H] forSome {val x$1: Constructor[C, H]}]", "member" : "provingground.induction.coarse.InductiveTyp.ptns", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#ptns:List[provingground.induction.coarse.ConstructorPattern[C,x$1.ConstructorType,H]forSome{valx$1:provingground.induction.coarse.Constructor[C,H]}]", "kind" : "val"}, {"label" : "induc", "tail" : "(Xs: Func[H, Typ[C]]): InducType", "member" : "provingground.induction.coarse.InductiveTyp.induc", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#induc(Xs:provingground.HoTT.Func[H,provingground.HoTT.Typ[C]]):provingground.induction.coarse.ConstructorSeq[C,H]#InducType", "kind" : "def"}, {"label" : "rec", "tail" : "(X: Typ[C]): RecType", "member" : "provingground.induction.coarse.InductiveTyp.rec", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#rec(X:provingground.HoTT.Typ[C]):provingground.induction.coarse.ConstructorSeq[C,H]#RecType", "kind" : "def"}, {"label" : "++", "tail" : "(those: V): SigmaTyp[UU, VV]", "member" : "provingground.HoTT.Typ.++", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#++[UU>:provingground.HoTT.Typ[U]<:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[UU],VV<:provingground.HoTT.Termwithprovingground.HoTT.Subs[VV],V<:provingground.HoTT.Typ[VV]withprovingground.HoTT.Subs[V]](those:V):provingground.HoTT.SigmaTyp[UU,VV]", "kind" : "def"}, {"label" : "||", "tail" : "(that: Typ[V]): PlusTyp[UU, V]", "member" : "provingground.HoTT.Typ.||", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#||[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](that:provingground.HoTT.Typ[V]):provingground.HoTT.PlusTyp[UU,V]", "kind" : "def"}, {"label" : "&&", "tail" : "(that: Typ[V]): ProdTyp[UU, V]", "member" : "provingground.HoTT.Typ.&&", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#&&[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](that:provingground.HoTT.Typ[V]):provingground.HoTT.ProdTyp[UU,V]", "kind" : "def"}, {"label" : "~>:", "tail" : "(variable: V): GenFuncTyp[V, UU]", "member" : "provingground.HoTT.Typ.~>:", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#~>:[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](variable:V):provingground.HoTT.GenFuncTyp[V,UU]", "kind" : "def"}, {"label" : "->:", "tail" : "(that: Typ[W]): FuncTyp[W, UU]", "member" : "provingground.HoTT.Typ.->:", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#->:[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU]](that:provingground.HoTT.Typ[W]):provingground.HoTT.FuncTyp[W,UU]", "kind" : "def"}, {"label" : "typedVar", "tail" : "(): TypedTerm[H]", "member" : "provingground.HoTT.Typ.typedVar", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#typedVar:provingground.HoTT.TypedTerm[U]", "kind" : "def"}, {"label" : "Var", "tail" : "(): H with Subs[H]", "member" : "provingground.HoTT.Typ.Var", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#Var:Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "::", "tail" : "(name: String): H with Subs[H]", "member" : "provingground.HoTT.Typ.::", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#::(name:String):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "typedVar", "tail" : "(name: AnySym): TypedTerm[H]", "member" : "provingground.HoTT.Typ.typedVar", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#typedVar(name:provingground.HoTT.AnySym):provingground.HoTT.TypedTerm[U]", "kind" : "def"}, {"label" : "symbObj", "tail" : "(name: AnySym): H with Subs[H]", "member" : "provingground.HoTT.Typ.symbObj", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#symbObj(name:provingground.HoTT.AnySym):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "typlevel", "tail" : ": Int", "member" : "provingground.HoTT.Typ.typlevel", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#typlevel:Int", "kind" : "lazy val"}, {"label" : "typed", "tail" : ": TypedTerm[Typ[Term]]", "member" : "provingground.HoTT.Typ.typed", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#typed:provingground.HoTT.TypedTerm[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "!:", "tail" : "(term: Term): H", "member" : "provingground.HoTT.Typ.!:", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#!:(term:provingground.HoTT.Term):U", "kind" : "def"}, {"label" : "obj", "tail" : "(): H", "member" : "provingground.HoTT.Typ.obj", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#obj:U", "kind" : "def"}, {"label" : "usesVar", "tail" : "(t: Term): Boolean", "member" : "provingground.HoTT.Term.usesVar", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#usesVar(t:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "indepOf", "tail" : "(that: Term): Boolean", "member" : "provingground.HoTT.Term.indepOf", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#indepOf(that:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "dependsOn", "tail" : "(that: Term): Boolean", "member" : "provingground.HoTT.Term.dependsOn", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#dependsOn(that:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "replace", "tail" : "(x: Term, y: Term): Typ[H] with Subs[Typ[H]]", "member" : "provingground.HoTT.Subs.replace", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#replace(x:provingground.HoTT.Term,y:provingground.HoTT.Term):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/coarse\/InductiveTyp.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "constructors", "tail" : ": List[Constructor[C, H]]", "member" : "provingground.induction.coarse.InductiveTyp.constructors", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#constructors:List[provingground.induction.coarse.Constructor[C,H]]", "kind" : "abstract val"}, {"label" : "variable", "tail" : "(name: AnySym): Obj with Subs[Obj]", "member" : "provingground.HoTT.Typ.variable", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#variable(name:provingground.HoTT.AnySym):Typ.this.Objwithprovingground.HoTT.Subs[Typ.this.Obj]", "kind" : "abstract def"}, {"label" : "typ", "tail" : ": Univ", "member" : "provingground.HoTT.Typ.typ", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#typ:provingground.HoTT.Univ", "kind" : "abstract val"}, {"member" : "provingground.HoTT.Typ.Obj", "error" : "unsupported entity"}, {"label" : "newobj", "tail" : "(): Typ[H] with Subs[Typ[H]]", "member" : "provingground.HoTT.Subs.newobj", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#newobj:Uwithprovingground.HoTT.Subs[U]", "kind" : "abstract def"}, {"label" : "subs", "tail" : "(x: Term, y: Term): Typ[H] with Subs[Typ[H]]", "member" : "provingground.HoTT.Subs.subs", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):Uwithprovingground.HoTT.Subs[U]", "kind" : "abstract def"}], "shortDescription" : "", "object" : "provingground\/induction\/coarse\/InductiveTyp$.html", "members_object" : [{"label" : "fromFormal", "tail" : "(formalCons: List[Term], formalTyp: Typ[Term]): InductiveTypDefinition[Term]", "member" : "provingground.induction.coarse.InductiveTyp.fromFormal", "link" : "provingground\/induction\/coarse\/InductiveTyp$.html#fromFormal(formalCons:List[provingground.HoTT.Term],formalTyp:provingground.HoTT.Typ[provingground.HoTT.Term]):provingground.induction.coarse.InductiveTypDefinition[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/coarse\/InductiveTyp$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/coarse\/InductiveTyp$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/coarse\/InductiveTyp$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/coarse\/InductiveTyp$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/coarse\/InductiveTyp$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/coarse\/InductiveTyp$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/coarse\/InductiveTyp$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/InductiveTyp$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/InductiveTyp$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/InductiveTyp$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/coarse\/InductiveTyp$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/coarse\/InductiveTyp$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/coarse\/InductiveTyp$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/coarse\/InductiveTyp$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/coarse\/InductiveTyp$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/coarse\/InductiveTyp$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/coarse\/InductiveTyp$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/coarse\/InductiveTyp$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/coarse\/InductiveTyp$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/induction\/coarse\/InductiveTyp.html", "kind" : "trait"}, {"name" : "provingground.induction.coarse.InductiveTypDefinition", "shortDescription" : "", "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (InductiveTypDefinition[C]) ⇒ Boolean, msg: ⇒ Any): InductiveTypDefinition[C]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (InductiveTypDefinition[C]) ⇒ Boolean): InductiveTypDefinition[C]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): InductiveTypDefinition[C]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): InductiveTypDefinition[C]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (InductiveTypDefinition[C], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (InductiveTypDefinition[C], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "Elem", "tail" : "", "member" : "provingground.HoTT.Typ.Elem", "link" : "provingground\/HoTT$$Typ.html#Elem", "kind" : "object"}, {"label" : "inducFn", "tail" : "(Xs: Func[Term, Typ[CC]]): InducType", "member" : "provingground.induction.coarse.InductiveTypDefinition.inducFn", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#inducFn[CC<:provingground.HoTT.Termwithprovingground.HoTT.Subs[CC]](Xs:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[CC]]):provingground.induction.coarse.ConstructorSeq[CC,provingground.HoTT.Term]#InducType", "kind" : "def"}, {"label" : "recFn", "tail" : "(X: Typ[CC]): RecType", "member" : "provingground.induction.coarse.InductiveTypDefinition.recFn", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#recFn[CC<:provingground.HoTT.Termwithprovingground.HoTT.Subs[CC]](X:provingground.HoTT.Typ[CC]):provingground.induction.coarse.ConstructorSeq[CC,provingground.HoTT.Term]#RecType", "kind" : "def"}, {"label" : "withCod", "tail" : "(): InductiveTypDefinition[CC]", "member" : "provingground.induction.coarse.InductiveTypDefinition.withCod", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#withCod[CC<:provingground.HoTT.Termwithprovingground.HoTT.Subs[CC]]:provingground.induction.coarse.InductiveTypDefinition[CC]", "kind" : "def"}, {"label" : "variable", "tail" : "(name: AnySym): SymbObj[Term]", "member" : "provingground.induction.coarse.InductiveTypDefinition.variable", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#variable(name:provingground.HoTT.AnySym):provingground.HoTT.SymbObj[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "Obj", "tail" : "", "member" : "provingground.induction.coarse.InductiveTypDefinition.Obj", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#Obj=provingground.HoTT.Term", "kind" : "type"}, {"label" : "newobj", "tail" : "(): Nothing", "member" : "provingground.induction.coarse.InductiveTypDefinition.newobj", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#newobj:Nothing", "kind" : "def"}, {"label" : "subs", "tail" : "(x: Term, y: Term): InductiveTypDefinition[C]", "member" : "provingground.induction.coarse.InductiveTypDefinition.subs", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.induction.coarse.InductiveTypDefinition[C]", "kind" : "def"}, {"label" : "constructors", "tail" : ": List[Constructor[C, Term]]", "member" : "provingground.induction.coarse.InductiveTypDefinition.constructors", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#constructors:List[provingground.induction.coarse.Constructor[C,provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "typ", "tail" : ": Universe", "member" : "provingground.induction.coarse.InductiveTypDefinition.typ", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#typ:provingground.HoTT.Universe", "kind" : "val"}, {"member" : "provingground.induction.coarse.InductiveTypDefinition#<init>", "error" : "unsupported entity"}, {"label" : "constructorDefs", "tail" : ": List[(Typ[Term]) ⇒ Constructor[C, Term]]", "member" : "provingground.induction.coarse.InductiveTypDefinition.constructorDefs", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#constructorDefs:List[provingground.HoTT.Typ[provingground.HoTT.Term]=>provingground.induction.coarse.Constructor[C,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "constructorFns", "tail" : ": List[Term]", "member" : "provingground.induction.coarse.InductiveTyp.constructorFns", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#constructorFns:List[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "ptns", "tail" : ": List[ConstructorPattern[C, InductiveTyp.ptns.$anonfun.x$1.type.ConstructorType, Term] forSome {val x$1: Constructor[C, Term]}]", "member" : "provingground.induction.coarse.InductiveTyp.ptns", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#ptns:List[provingground.induction.coarse.ConstructorPattern[C,x$1.ConstructorType,H]forSome{valx$1:provingground.induction.coarse.Constructor[C,H]}]", "kind" : "val"}, {"label" : "induc", "tail" : "(Xs: Func[Term, Typ[C]]): InducType", "member" : "provingground.induction.coarse.InductiveTyp.induc", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#induc(Xs:provingground.HoTT.Func[H,provingground.HoTT.Typ[C]]):provingground.induction.coarse.ConstructorSeq[C,H]#InducType", "kind" : "def"}, {"label" : "rec", "tail" : "(X: Typ[C]): RecType", "member" : "provingground.induction.coarse.InductiveTyp.rec", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#rec(X:provingground.HoTT.Typ[C]):provingground.induction.coarse.ConstructorSeq[C,H]#RecType", "kind" : "def"}, {"label" : "++", "tail" : "(those: V): SigmaTyp[UU, VV]", "member" : "provingground.HoTT.Typ.++", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#++[UU>:provingground.HoTT.Typ[U]<:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[UU],VV<:provingground.HoTT.Termwithprovingground.HoTT.Subs[VV],V<:provingground.HoTT.Typ[VV]withprovingground.HoTT.Subs[V]](those:V):provingground.HoTT.SigmaTyp[UU,VV]", "kind" : "def"}, {"label" : "||", "tail" : "(that: Typ[V]): PlusTyp[UU, V]", "member" : "provingground.HoTT.Typ.||", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#||[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](that:provingground.HoTT.Typ[V]):provingground.HoTT.PlusTyp[UU,V]", "kind" : "def"}, {"label" : "&&", "tail" : "(that: Typ[V]): ProdTyp[UU, V]", "member" : "provingground.HoTT.Typ.&&", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#&&[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](that:provingground.HoTT.Typ[V]):provingground.HoTT.ProdTyp[UU,V]", "kind" : "def"}, {"label" : "~>:", "tail" : "(variable: V): GenFuncTyp[V, UU]", "member" : "provingground.HoTT.Typ.~>:", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#~>:[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](variable:V):provingground.HoTT.GenFuncTyp[V,UU]", "kind" : "def"}, {"label" : "->:", "tail" : "(that: Typ[W]): FuncTyp[W, UU]", "member" : "provingground.HoTT.Typ.->:", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#->:[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU]](that:provingground.HoTT.Typ[W]):provingground.HoTT.FuncTyp[W,UU]", "kind" : "def"}, {"label" : "typedVar", "tail" : "(): TypedTerm[Term]", "member" : "provingground.HoTT.Typ.typedVar", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#typedVar:provingground.HoTT.TypedTerm[U]", "kind" : "def"}, {"label" : "Var", "tail" : "(): Term with Subs[Term]", "member" : "provingground.HoTT.Typ.Var", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#Var:Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "::", "tail" : "(name: String): Term with Subs[Term]", "member" : "provingground.HoTT.Typ.::", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#::(name:String):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "typedVar", "tail" : "(name: AnySym): TypedTerm[Term]", "member" : "provingground.HoTT.Typ.typedVar", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#typedVar(name:provingground.HoTT.AnySym):provingground.HoTT.TypedTerm[U]", "kind" : "def"}, {"label" : "symbObj", "tail" : "(name: AnySym): Term with Subs[Term]", "member" : "provingground.HoTT.Typ.symbObj", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#symbObj(name:provingground.HoTT.AnySym):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "typlevel", "tail" : ": Int", "member" : "provingground.HoTT.Typ.typlevel", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#typlevel:Int", "kind" : "lazy val"}, {"label" : "typed", "tail" : ": TypedTerm[Typ[Term]]", "member" : "provingground.HoTT.Typ.typed", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#typed:provingground.HoTT.TypedTerm[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "!:", "tail" : "(term: Term): Term", "member" : "provingground.HoTT.Typ.!:", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#!:(term:provingground.HoTT.Term):U", "kind" : "def"}, {"label" : "obj", "tail" : "(): Term", "member" : "provingground.HoTT.Typ.obj", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#obj:U", "kind" : "def"}, {"label" : "usesVar", "tail" : "(t: Term): Boolean", "member" : "provingground.HoTT.Term.usesVar", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#usesVar(t:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "indepOf", "tail" : "(that: Term): Boolean", "member" : "provingground.HoTT.Term.indepOf", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#indepOf(that:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "dependsOn", "tail" : "(that: Term): Boolean", "member" : "provingground.HoTT.Term.dependsOn", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#dependsOn(that:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "replace", "tail" : "(x: Term, y: Term): Typ[Term] with Subs[Typ[Term]]", "member" : "provingground.HoTT.Subs.replace", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#replace(x:provingground.HoTT.Term,y:provingground.HoTT.Term):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/induction\/coarse\/InductiveTypDefinition.html", "kind" : "case class"}, {"name" : "provingground.induction.coarse.IterFuncPattern", "shortDescription" : "", "object" : "provingground\/induction\/coarse\/IterFuncPattern$.html", "members_object" : [{"label" : "DepFuncIterPtn", "tail" : "", "member" : "provingground.induction.coarse.IterFuncPattern.DepFuncIterPtn", "link" : "provingground\/induction\/coarse\/IterFuncPattern$.html#DepFuncIterPtn[TT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TT],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V],T<:provingground.HoTT.Termwithprovingground.HoTT.Subs[T],D<:provingground.HoTT.Termwithprovingground.HoTT.Subs[D],O<:provingground.HoTT.Termwithprovingground.HoTT.Subs[O],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C]]extendsIterFuncPattern.RecIterPtn[TT,V,T,D,O,C]withProductwithSerializable", "kind" : "case class"}, {"label" : "FuncIterPtn", "tail" : "", "member" : "provingground.induction.coarse.IterFuncPattern.FuncIterPtn", "link" : "provingground\/induction\/coarse\/IterFuncPattern$.html#FuncIterPtn[TT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TT],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V],T<:provingground.HoTT.Termwithprovingground.HoTT.Subs[T],D<:provingground.HoTT.Termwithprovingground.HoTT.Subs[D],O<:provingground.HoTT.Termwithprovingground.HoTT.Subs[O],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C]]extendsIterFuncPattern.IterFuncPtn[O,C,provingground.HoTT.Func[TT,V]]withProductwithSerializable", "kind" : "case class"}, {"label" : "RecIterPtn", "tail" : "", "member" : "provingground.induction.coarse.IterFuncPattern.RecIterPtn", "link" : "provingground\/induction\/coarse\/IterFuncPattern$.html#RecIterPtn[TT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TT],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V],T<:provingground.HoTT.Termwithprovingground.HoTT.Subs[T],D<:provingground.HoTT.Termwithprovingground.HoTT.Subs[D],O<:provingground.HoTT.Termwithprovingground.HoTT.Subs[O],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C]]extendsIterFuncPattern.IterFuncPtn[O,C,provingground.HoTT.FuncLike[TT,V]]", "kind" : "trait"}, {"label" : "IdIterPtn", "tail" : "", "member" : "provingground.induction.coarse.IterFuncPattern.IdIterPtn", "link" : "provingground\/induction\/coarse\/IterFuncPattern$.html#IdIterPtn[O<:provingground.HoTT.Termwithprovingground.HoTT.Subs[O],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C]]extendsIterFuncPattern.IterFuncPtn[O,C,O]withProductwithSerializable", "kind" : "case class"}, {"label" : "IterFuncTyp", "tail" : "", "member" : "provingground.induction.coarse.IterFuncPattern.IterFuncTyp", "link" : "provingground\/induction\/coarse\/IterFuncPattern$.html#IterFuncTyp[O<:provingground.HoTT.Termwithprovingground.HoTT.Subs[O],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F]]extendsProductwithSerializable", "kind" : "case class"}, {"label" : "IterFuncPtn", "tail" : "", "member" : "provingground.induction.coarse.IterFuncPattern.IterFuncPtn", "link" : "provingground\/induction\/coarse\/IterFuncPattern$.html#IterFuncPtn", "kind" : "object"}, {"label" : "IterFuncPtn", "tail" : "", "member" : "provingground.induction.coarse.IterFuncPattern.IterFuncPtn", "link" : "provingground\/induction\/coarse\/IterFuncPattern$.html#IterFuncPtn[O<:provingground.HoTT.Termwithprovingground.HoTT.Subs[O],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F]]extendsAnyRef", "kind" : "sealed trait"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/coarse\/IterFuncPattern$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/coarse\/IterFuncPattern$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/coarse\/IterFuncPattern$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/coarse\/IterFuncPattern$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/coarse\/IterFuncPattern$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/coarse\/IterFuncPattern$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/coarse\/IterFuncPattern$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/IterFuncPattern$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/IterFuncPattern$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/IterFuncPattern$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/coarse\/IterFuncPattern$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/coarse\/IterFuncPattern$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/coarse\/IterFuncPattern$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/coarse\/IterFuncPattern$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/coarse\/IterFuncPattern$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/coarse\/IterFuncPattern$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/coarse\/IterFuncPattern$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/coarse\/IterFuncPattern$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/coarse\/IterFuncPattern$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "provingground.translation" : [{"name" : "provingground.translation.CompositeFunctors", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/translation\/CompositeFunctors.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/translation\/CompositeFunctors.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (CompositeFunctors) ⇒ Boolean, msg: ⇒ Any): CompositeFunctors", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/CompositeFunctors.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (CompositeFunctors) ⇒ Boolean): CompositeFunctors", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/CompositeFunctors.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): CompositeFunctors", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/CompositeFunctors.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): CompositeFunctors", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/CompositeFunctors.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (CompositeFunctors, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/translation\/CompositeFunctors.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (CompositeFunctors, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/translation\/CompositeFunctors.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "traverseCompose", "tail" : "(arg0: Traverse[X], arg1: Traverse[Y]): Traverse[[A]X[Y[A]]]", "member" : "provingground.translation.CompositeFunctors.traverseCompose", "link" : "provingground\/translation\/CompositeFunctors.html#traverseCompose[X[_],Y[_]](implicitevidence$2:cats.Traverse[X],implicitevidence$3:cats.Traverse[Y]):cats.Traverse[[A]X[Y[A]]]", "kind" : "implicit def"}, {"label" : "traverseHCons", "tail" : "(tx: Lazy[Traverse[X]], YT: Traverse[Y]): Traverse[[A]::[X[A], Y[A]]]", "member" : "provingground.translation.CompositeFunctors.traverseHCons", "link" : "provingground\/translation\/CompositeFunctors.html#traverseHCons[X[_],Y[_]<:shapeless.HList](implicittx:shapeless.Lazy[cats.Traverse[X]],implicitYT:cats.Traverse[Y]):cats.Traverse[[A]X[A]::Y[A]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/CompositeFunctors.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/CompositeFunctors.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/CompositeFunctors.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/CompositeFunctors.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/CompositeFunctors.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/CompositeFunctors.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/CompositeFunctors.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/CompositeFunctors.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/CompositeFunctors.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/CompositeFunctors.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/CompositeFunctors.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/CompositeFunctors.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/CompositeFunctors.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/CompositeFunctors.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/CompositeFunctors.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/CompositeFunctors.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/CompositeFunctors.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/CompositeFunctors.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/CompositeFunctors.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "provingground\/translation\/CompositeFunctors.html", "kind" : "trait"}, {"name" : "provingground.translation.ConeRestriction", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/translation\/ConeRestriction.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/translation\/ConeRestriction.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ConeRestriction[X, Y, G]) ⇒ Boolean, msg: ⇒ Any): ConeRestriction[X, Y, G]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/ConeRestriction.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ConeRestriction[X, Y, G]) ⇒ Boolean): ConeRestriction[X, Y, G]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/ConeRestriction.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): ConeRestriction[X, Y, G]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/ConeRestriction.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ConeRestriction[X, Y, G]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/ConeRestriction.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ConeRestriction[X, Y, G], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/translation\/ConeRestriction.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ConeRestriction[X, Y, G], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/translation\/ConeRestriction.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/ConeRestriction.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/ConeRestriction.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/ConeRestriction.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/ConeRestriction.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/ConeRestriction.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/ConeRestriction.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/ConeRestriction.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/ConeRestriction.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/ConeRestriction.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/ConeRestriction.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/ConeRestriction.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/ConeRestriction.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/ConeRestriction.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/ConeRestriction.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/ConeRestriction.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/ConeRestriction.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/ConeRestriction.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/ConeRestriction.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/ConeRestriction.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "restrict", "tail" : "(): (G[Y[I]]) ⇒ G[X[I]]", "member" : "provingground.translation.ConeRestriction.restrict", "link" : "provingground\/translation\/ConeRestriction.html#restrict[I]:G[Y[I]]=>G[X[I]]", "kind" : "abstract def"}], "shortDescription" : "restriction of cone on functors", "trait" : "provingground\/translation\/ConeRestriction.html", "kind" : "trait"}, {"name" : "provingground.translation.ContextTranslator", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/translation\/ContextTranslator.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/translation\/ContextTranslator.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ContextTranslator[I, O, X, Ctx]) ⇒ Boolean, msg: ⇒ Any): ContextTranslator[I, O, X, Ctx]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/ContextTranslator.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ContextTranslator[I, O, X, Ctx]) ⇒ Boolean): ContextTranslator[I, O, X, Ctx]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/ContextTranslator.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): ContextTranslator[I, O, X, Ctx]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/ContextTranslator.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ContextTranslator[I, O, X, Ctx]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/ContextTranslator.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ContextTranslator[I, O, X, Ctx], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/translation\/ContextTranslator.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ContextTranslator[I, O, X, Ctx], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/translation\/ContextTranslator.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "addJunction1", "tail" : "(split: PartialFunction[X[I], Y[I]], build: PartialFunction[Y[O], X[O]])(arg0: Traverse[Z], incl: Inclusion[Y, [A]Z[X[A]]], rest: OptRestriction[Y, [A]Z[X[A]]]): OrElse[I, O, X, Ctx]", "member" : "provingground.translation.ContextTranslator.addJunction1", "link" : "provingground\/translation\/ContextTranslator.html#addJunction1[Y[_],Z[_]](split:PartialFunction[X[I],Y[I]],build:PartialFunction[Y[O],X[O]])(implicitevidence$17:cats.Traverse[Z],implicitincl:provingground.translation.Inclusion[Y,[A]Z[X[A]]],implicitrest:provingground.translation.OptRestriction[Y,[A]Z[X[A]]]):provingground.translation.ContextTranslator.OrElse[I,O,X,Ctx]", "kind" : "def"}, {"label" : "addJunction", "tail" : "(split: (Ctx[I, O]) ⇒ (X[I]) ⇒ Option[Y[I]], build: (Ctx[I, O]) ⇒ (Y[O]) ⇒ Option[X[O]])(arg0: Traverse[Z], incl: Inclusion[Y, [A]Z[X[A]]], rest: OptRestriction[Y, [A]Z[X[A]]]): OrElse[I, O, X, Ctx]", "member" : "provingground.translation.ContextTranslator.addJunction", "link" : "provingground\/translation\/ContextTranslator.html#addJunction[Y[_],Z[_]](split:Ctx[I,O]=>(X[I]=>Option[Y[I]]),build:Ctx[I,O]=>(Y[O]=>Option[X[O]]))(implicitevidence$16:cats.Traverse[Z],implicitincl:provingground.translation.Inclusion[Y,[A]Z[X[A]]],implicitrest:provingground.translation.OptRestriction[Y,[A]Z[X[A]]]):provingground.translation.ContextTranslator.OrElse[I,O,X,Ctx]", "kind" : "def"}, {"label" : "||", "tail" : "(that: ContextTranslator[I, O, X, Ctx]): OrElse[I, O, X, Ctx]", "member" : "provingground.translation.ContextTranslator.||", "link" : "provingground\/translation\/ContextTranslator.html#||(that:provingground.translation.ContextTranslator[I,O,X,Ctx]):provingground.translation.ContextTranslator.OrElse[I,O,X,Ctx]", "kind" : "def"}, {"label" : "apply", "tail" : "(ctx: Ctx[I, O]): (X[I]) ⇒ Option[X[O]]", "member" : "provingground.translation.ContextTranslator.apply", "link" : "provingground\/translation\/ContextTranslator.html#apply(ctx:Ctx[I,O]):X[I]=>Option[X[O]]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Function1.toString", "link" : "provingground\/translation\/ContextTranslator.html#toString():String", "kind" : "def"}, {"label" : "andThen", "tail" : "(g: ((X[I]) ⇒ Option[X[O]]) ⇒ A): (Ctx[I, O]) ⇒ A", "member" : "scala.Function1.andThen", "link" : "provingground\/translation\/ContextTranslator.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) ⇒ Ctx[I, O]): (A) ⇒ (X[I]) ⇒ Option[X[O]]", "member" : "scala.Function1.compose", "link" : "provingground\/translation\/ContextTranslator.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/ContextTranslator.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/ContextTranslator.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/ContextTranslator.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/ContextTranslator.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/ContextTranslator.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/ContextTranslator.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/ContextTranslator.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/ContextTranslator.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/ContextTranslator.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/ContextTranslator.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/ContextTranslator.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/ContextTranslator.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/ContextTranslator.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/ContextTranslator.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/ContextTranslator.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/ContextTranslator.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/ContextTranslator.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/ContextTranslator.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "recTranslate", "tail" : "(leafMap: ⇒ (Ctx[I, O]) ⇒ (X[I]) ⇒ Option[X[O]]): (Ctx[I, O]) ⇒ (X[I]) ⇒ Option[X[O]]", "member" : "provingground.translation.ContextTranslator.recTranslate", "link" : "provingground\/translation\/ContextTranslator.html#recTranslate(leafMap:=>Ctx[I,O]=>(X[I]=>Option[X[O]])):Ctx[I,O]=>(X[I]=>Option[X[O]])", "kind" : "abstract def"}], "shortDescription" : "context dependent version of Translation!", "object" : "provingground\/translation\/ContextTranslator$.html", "members_object" : [{"label" : "Junction", "tail" : "", "member" : "provingground.translation.ContextTranslator.Junction", "link" : "provingground\/translation\/ContextTranslator$.html#Junction[I,O,X[_],Ctx[_,_],Y[_],Z[_]]extendsContextTranslator[I,O,X,Ctx]withProductwithSerializable", "kind" : "case class"}, {"label" : "OrElse", "tail" : "", "member" : "provingground.translation.ContextTranslator.OrElse", "link" : "provingground\/translation\/ContextTranslator$.html#OrElse[I,O,X[_],Ctx[_,_]]extendsContextTranslator[I,O,X,Ctx]withProductwithSerializable", "kind" : "case class"}, {"label" : "Empty", "tail" : "", "member" : "provingground.translation.ContextTranslator.Empty", "link" : "provingground\/translation\/ContextTranslator$.html#Empty[I,O,X[_],Ctx[_,_]]extendsContextTranslator[I,O,X,Ctx]withProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/ContextTranslator$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/ContextTranslator$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/ContextTranslator$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/ContextTranslator$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/ContextTranslator$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/ContextTranslator$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/ContextTranslator$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/ContextTranslator$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/ContextTranslator$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/ContextTranslator$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/ContextTranslator$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/ContextTranslator$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/ContextTranslator$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/ContextTranslator$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/ContextTranslator$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/ContextTranslator$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/ContextTranslator$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/ContextTranslator$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/ContextTranslator$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/translation\/ContextTranslator.html", "kind" : "trait"}, {"name" : "provingground.translation.Domain", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/translation\/Domain.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/translation\/Domain.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Domain[E]) ⇒ Boolean, msg: ⇒ Any): Domain[E]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/Domain.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Domain[E]) ⇒ Boolean): Domain[E]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/Domain.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Domain[E]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/Domain.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Domain[E]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/Domain.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Domain[E], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/translation\/Domain.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Domain[E], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/translation\/Domain.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/Domain.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/Domain.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/Domain.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/Domain.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/Domain.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/Domain.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/Domain.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Domain.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Domain.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Domain.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/Domain.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/Domain.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/Domain.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/Domain.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/Domain.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/Domain.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/Domain.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/Domain.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/Domain.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "domain", "tail" : "(): (E) ⇒ Option[E]", "member" : "provingground.translation.Domain.domain", "link" : "provingground\/translation\/Domain.html#domain:E=>Option[E]", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "provingground\/translation\/Domain.html", "kind" : "trait"}, {"name" : "provingground.translation.Equiv", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/translation\/Equiv.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/translation\/Equiv.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Equiv[X, Y]) ⇒ Boolean, msg: ⇒ Any): Equiv[X, Y]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/Equiv.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Equiv[X, Y]) ⇒ Boolean): Equiv[X, Y]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/Equiv.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Equiv[X, Y]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/Equiv.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Equiv[X, Y]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/Equiv.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Equiv[X, Y], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/translation\/Equiv.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Equiv[X, Y], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/translation\/Equiv.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/Equiv.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/Equiv.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/Equiv.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/Equiv.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/Equiv.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/Equiv.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/Equiv.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Equiv.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Equiv.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Equiv.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/Equiv.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/Equiv.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/Equiv.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/Equiv.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/Equiv.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/Equiv.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/Equiv.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/Equiv.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/Equiv.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "inv", "tail" : "(): (Y[A]) ⇒ X[A]", "member" : "provingground.translation.Equiv.inv", "link" : "provingground\/translation\/Equiv.html#inv[A]:Y[A]=>X[A]", "kind" : "abstract def"}, {"label" : "map", "tail" : "(): (X[A]) ⇒ Y[A]", "member" : "provingground.translation.Equiv.map", "link" : "provingground\/translation\/Equiv.html#map[A]:X[A]=>Y[A]", "kind" : "abstract def"}], "shortDescription" : "", "object" : "provingground\/translation\/Equiv$.html", "members_object" : [{"label" : "idEquiv", "tail" : "(): Equiv[X, X]", "member" : "provingground.translation.Equiv.idEquiv", "link" : "provingground\/translation\/Equiv$.html#idEquiv[X[_]]:provingground.translation.Equiv[X,X]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/Equiv$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/Equiv$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/Equiv$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/Equiv$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/Equiv$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/Equiv$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/Equiv$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Equiv$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Equiv$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Equiv$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/Equiv$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/Equiv$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/Equiv$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/Equiv$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/Equiv$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/Equiv$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/Equiv$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/Equiv$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/Equiv$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/translation\/Equiv.html", "kind" : "trait"}, {"name" : "provingground.translation.ExprApplnOps", "shortDescription" : "", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/translation\/ExprApplnOps.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/translation\/ExprApplnOps.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ExprApplnOps[E]) ⇒ Boolean, msg: ⇒ Any): ExprApplnOps[E]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/ExprApplnOps.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ExprApplnOps[E]) ⇒ Boolean): ExprApplnOps[E]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/ExprApplnOps.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): ExprApplnOps[E]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/ExprApplnOps.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ExprApplnOps[E]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/ExprApplnOps.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ExprApplnOps[E], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/translation\/ExprApplnOps.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ExprApplnOps[E], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/translation\/ExprApplnOps.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "shiftArg", "tail" : "(f: E, x: E): Option[E]", "member" : "provingground.translation.ExprApplnOps.shiftArg", "link" : "provingground\/translation\/ExprApplnOps.html#shiftArg(f:E,x:E):Option[E]", "kind" : "def"}, {"label" : "convert", "tail" : "(cs: TruncatedDistribution[(E) ⇒ Option[E]])(f: E, x: E): Option[TruncatedDistribution[E]]", "member" : "provingground.translation.ExprApplnOps.convert", "link" : "provingground\/translation\/ExprApplnOps.html#convert(cs:provingground.learning.TruncatedDistribution[E=>Option[E]])(f:E,x:E):Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "flip", "tail" : "(f: E, x: E): Option[E]", "member" : "provingground.translation.ExprApplnOps.flip", "link" : "provingground\/translation\/ExprApplnOps.html#flip(f:E,x:E):Option[E]", "kind" : "def"}, {"label" : "base", "tail" : "(f: E, x: E): Option[E]", "member" : "provingground.translation.ExprApplnOps.base", "link" : "provingground\/translation\/ExprApplnOps.html#base(f:E,x:E):Option[E]", "kind" : "def"}, {"member" : "provingground.translation.ExprApplnOps#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/ExprApplnOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/ExprApplnOps.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/ExprApplnOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/ExprApplnOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/ExprApplnOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/ExprApplnOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/ExprApplnOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/ExprApplnOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/ExprApplnOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/ExprApplnOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/ExprApplnOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/ExprApplnOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/ExprApplnOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/ExprApplnOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/ExprApplnOps.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/ExprApplnOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/ExprApplnOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/ExprApplnOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/ExprApplnOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/translation\/ExprApplnOps.html", "kind" : "class"}, {"name" : "provingground.translation.ExprLang", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/translation\/ExprLang.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/translation\/ExprLang.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ExprLang[E]) ⇒ Boolean, msg: ⇒ Any): ExprLang[E]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/ExprLang.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ExprLang[E]) ⇒ Boolean): ExprLang[E]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/ExprLang.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): ExprLang[E]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/ExprLang.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ExprLang[E]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/ExprLang.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ExprLang[E], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/translation\/ExprLang.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ExprLang[E], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/translation\/ExprLang.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "applyAll", "tail" : "(funcOpt: Option[E], args: Vector[E]): Option[E]", "member" : "provingground.translation.ExprLang.applyAll", "link" : "provingground\/translation\/ExprLang.html#applyAll(funcOpt:Option[E],args:Vector[E]):Option[E]", "kind" : "def"}, {"label" : "i2", "tail" : "(typ: E, value: E): Option[E]", "member" : "provingground.translation.ExprLang.i2", "link" : "provingground\/translation\/ExprLang.html#i2(typ:E,value:E):Option[E]", "kind" : "def"}, {"label" : "i1", "tail" : "(typ: E, value: E): Option[E]", "member" : "provingground.translation.ExprLang.i1", "link" : "provingground\/translation\/ExprLang.html#i1(typ:E,value:E):Option[E]", "kind" : "def"}, {"label" : "funcTyp", "tail" : "(dom: E, codom: E): Option[E]", "member" : "provingground.translation.ExprLang.funcTyp", "link" : "provingground\/translation\/ExprLang.html#funcTyp(dom:E,codom:E):Option[E]", "kind" : "def"}, {"label" : "pairTyp", "tail" : "(first: E, second: E): Option[E]", "member" : "provingground.translation.ExprLang.pairTyp", "link" : "provingground\/translation\/ExprLang.html#pairTyp(first:E,second:E):Option[E]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/ExprLang.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/ExprLang.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/ExprLang.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/ExprLang.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/ExprLang.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/ExprLang.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/ExprLang.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/ExprLang.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/ExprLang.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/ExprLang.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/ExprLang.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/ExprLang.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/ExprLang.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/ExprLang.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/ExprLang.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/ExprLang.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/ExprLang.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/ExprLang.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/ExprLang.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "numeral", "tail" : "(n: Int): Option[E]", "member" : "provingground.translation.ExprLang.numeral", "link" : "provingground\/translation\/ExprLang.html#numeral(n:Int):Option[E]", "kind" : "abstract def"}, {"label" : "orCases", "tail" : "(first: E, second: E): Option[E]", "member" : "provingground.translation.ExprLang.orCases", "link" : "provingground\/translation\/ExprLang.html#orCases(first:E,second:E):Option[E]", "kind" : "abstract def"}, {"label" : "ff", "tail" : "(): Option[E]", "member" : "provingground.translation.ExprLang.ff", "link" : "provingground\/translation\/ExprLang.html#ff:Option[E]", "kind" : "abstract def"}, {"label" : "qed", "tail" : "(): Option[E]", "member" : "provingground.translation.ExprLang.qed", "link" : "provingground\/translation\/ExprLang.html#qed:Option[E]", "kind" : "abstract def"}, {"label" : "tt", "tail" : "(): Option[E]", "member" : "provingground.translation.ExprLang.tt", "link" : "provingground\/translation\/ExprLang.html#tt:Option[E]", "kind" : "abstract def"}, {"label" : "incl2", "tail" : "(typ: E): Option[E]", "member" : "provingground.translation.ExprLang.incl2", "link" : "provingground\/translation\/ExprLang.html#incl2(typ:E):Option[E]", "kind" : "abstract def"}, {"label" : "incl1", "tail" : "(typ: E): Option[E]", "member" : "provingground.translation.ExprLang.incl1", "link" : "provingground\/translation\/ExprLang.html#incl1(typ:E):Option[E]", "kind" : "abstract def"}, {"label" : "or", "tail" : "(first: E, second: E): Option[E]", "member" : "provingground.translation.ExprLang.or", "link" : "provingground\/translation\/ExprLang.html#or(first:E,second:E):Option[E]", "kind" : "abstract def"}, {"label" : "proj2", "tail" : "(xy: E): Option[E]", "member" : "provingground.translation.ExprLang.proj2", "link" : "provingground\/translation\/ExprLang.html#proj2(xy:E):Option[E]", "kind" : "abstract def"}, {"label" : "proj1", "tail" : "(xy: E): Option[E]", "member" : "provingground.translation.ExprLang.proj1", "link" : "provingground\/translation\/ExprLang.html#proj1(xy:E):Option[E]", "kind" : "abstract def"}, {"label" : "pair", "tail" : "(x: E, y: E): Option[E]", "member" : "provingground.translation.ExprLang.pair", "link" : "provingground\/translation\/ExprLang.html#pair(x:E,y:E):Option[E]", "kind" : "abstract def"}, {"label" : "sigma", "tail" : "(variable: E, typFamily: E): Option[E]", "member" : "provingground.translation.ExprLang.sigma", "link" : "provingground\/translation\/ExprLang.html#sigma(variable:E,typFamily:E):Option[E]", "kind" : "abstract def"}, {"label" : "equality", "tail" : "(lhs: E, rhs: E): Option[E]", "member" : "provingground.translation.ExprLang.equality", "link" : "provingground\/translation\/ExprLang.html#equality(lhs:E,rhs:E):Option[E]", "kind" : "abstract def"}, {"label" : "appln", "tail" : "(func: E, arg: E): Option[E]", "member" : "provingground.translation.ExprLang.appln", "link" : "provingground\/translation\/ExprLang.html#appln(func:E,arg:E):Option[E]", "kind" : "abstract def"}, {"label" : "pi", "tail" : "(variable: E, typ: E): Option[E]", "member" : "provingground.translation.ExprLang.pi", "link" : "provingground\/translation\/ExprLang.html#pi(variable:E,typ:E):Option[E]", "kind" : "abstract def"}, {"label" : "lambda", "tail" : "(variable: E, value: E): Option[E]", "member" : "provingground.translation.ExprLang.lambda", "link" : "provingground\/translation\/ExprLang.html#lambda(variable:E,value:E):Option[E]", "kind" : "abstract def"}, {"label" : "metaVar", "tail" : "(typ: E): Option[E]", "member" : "provingground.translation.ExprLang.metaVar", "link" : "provingground\/translation\/ExprLang.html#metaVar(typ:E):Option[E]", "kind" : "abstract def"}, {"label" : "anonVar", "tail" : "(typ: E): Option[E]", "member" : "provingground.translation.ExprLang.anonVar", "link" : "provingground\/translation\/ExprLang.html#anonVar(typ:E):Option[E]", "kind" : "abstract def"}, {"label" : "typVariable", "tail" : "(name: S, level: Int): Option[E]", "member" : "provingground.translation.ExprLang.typVariable", "link" : "provingground\/translation\/ExprLang.html#typVariable[S](name:S,level:Int):Option[E]", "kind" : "abstract def"}, {"label" : "variable", "tail" : "(name: S, typ: E): Option[E]", "member" : "provingground.translation.ExprLang.variable", "link" : "provingground\/translation\/ExprLang.html#variable[S](name:S,typ:E):Option[E]", "kind" : "abstract def"}], "shortDescription" : "Abstraction (as a type class) of a language for mathematical expressions, i.e., of", "object" : "provingground\/translation\/ExprLang$.html", "members_object" : [{"label" : "applnQ", "tail" : "(func: E, arg: E)(arg0: ExprLang[E]): Option[E]", "member" : "provingground.translation.ExprLang.applnQ", "link" : "provingground\/translation\/ExprLang$.html#applnQ[E](func:E,arg:E)(implicitevidence$24:provingground.translation.ExprLang[E]):Option[E]", "kind" : "def"}, {"label" : "qed", "tail" : "(arg0: ExprLang[E]): Option[E]", "member" : "provingground.translation.ExprLang.qed", "link" : "provingground\/translation\/ExprLang$.html#qed[E](implicitevidence$23:provingground.translation.ExprLang[E]):Option[E]", "kind" : "def"}, {"label" : "ff", "tail" : "(arg0: ExprLang[E]): Option[E]", "member" : "provingground.translation.ExprLang.ff", "link" : "provingground\/translation\/ExprLang$.html#ff[E](implicitevidence$22:provingground.translation.ExprLang[E]):Option[E]", "kind" : "def"}, {"label" : "tt", "tail" : "(arg0: ExprLang[E]): Option[E]", "member" : "provingground.translation.ExprLang.tt", "link" : "provingground\/translation\/ExprLang$.html#tt[E](implicitevidence$21:provingground.translation.ExprLang[E]):Option[E]", "kind" : "def"}, {"label" : "variable", "tail" : "(arg0: ExprLang[E]): ((String, E)) ⇒ Option[E]", "member" : "provingground.translation.ExprLang.variable", "link" : "provingground\/translation\/ExprLang$.html#variable[E](implicitevidence$20:provingground.translation.ExprLang[E]):((String,E))=>Option[E]", "kind" : "def"}, {"label" : "numeral", "tail" : "(arg0: ExprLang[E]): (Int) ⇒ Option[E]", "member" : "provingground.translation.ExprLang.numeral", "link" : "provingground\/translation\/ExprLang$.html#numeral[E](implicitevidence$19:provingground.translation.ExprLang[E]):Int=>Option[E]", "kind" : "def"}, {"label" : "metaVar", "tail" : "(arg0: ExprLang[E]): (E) ⇒ Option[E]", "member" : "provingground.translation.ExprLang.metaVar", "link" : "provingground\/translation\/ExprLang$.html#metaVar[E](implicitevidence$18:provingground.translation.ExprLang[E]):E=>Option[E]", "kind" : "def"}, {"label" : "anonVar", "tail" : "(arg0: ExprLang[E]): (E) ⇒ Option[E]", "member" : "provingground.translation.ExprLang.anonVar", "link" : "provingground\/translation\/ExprLang$.html#anonVar[E](implicitevidence$17:provingground.translation.ExprLang[E]):E=>Option[E]", "kind" : "def"}, {"label" : "proj2", "tail" : "(arg0: ExprLang[E]): (E) ⇒ Option[E]", "member" : "provingground.translation.ExprLang.proj2", "link" : "provingground\/translation\/ExprLang$.html#proj2[E](implicitevidence$16:provingground.translation.ExprLang[E]):E=>Option[E]", "kind" : "def"}, {"label" : "proj1", "tail" : "(arg0: ExprLang[E]): (E) ⇒ Option[E]", "member" : "provingground.translation.ExprLang.proj1", "link" : "provingground\/translation\/ExprLang$.html#proj1[E](implicitevidence$15:provingground.translation.ExprLang[E]):E=>Option[E]", "kind" : "def"}, {"label" : "incl2", "tail" : "(arg0: ExprLang[E]): (E) ⇒ Option[E]", "member" : "provingground.translation.ExprLang.incl2", "link" : "provingground\/translation\/ExprLang$.html#incl2[E](implicitevidence$14:provingground.translation.ExprLang[E]):E=>Option[E]", "kind" : "def"}, {"label" : "incl1", "tail" : "(arg0: ExprLang[E]): (E) ⇒ Option[E]", "member" : "provingground.translation.ExprLang.incl1", "link" : "provingground\/translation\/ExprLang$.html#incl1[E](implicitevidence$13:provingground.translation.ExprLang[E]):E=>Option[E]", "kind" : "def"}, {"label" : "i2", "tail" : "(arg0: ExprLang[E]): ((E, E)) ⇒ Option[E]", "member" : "provingground.translation.ExprLang.i2", "link" : "provingground\/translation\/ExprLang$.html#i2[E](implicitevidence$12:provingground.translation.ExprLang[E]):((E,E))=>Option[E]", "kind" : "def"}, {"label" : "i1", "tail" : "(arg0: ExprLang[E]): ((E, E)) ⇒ Option[E]", "member" : "provingground.translation.ExprLang.i1", "link" : "provingground\/translation\/ExprLang$.html#i1[E](implicitevidence$11:provingground.translation.ExprLang[E]):((E,E))=>Option[E]", "kind" : "def"}, {"label" : "orCases", "tail" : "(arg0: ExprLang[E]): ((E, E)) ⇒ Option[E]", "member" : "provingground.translation.ExprLang.orCases", "link" : "provingground\/translation\/ExprLang$.html#orCases[E](implicitevidence$10:provingground.translation.ExprLang[E]):((E,E))=>Option[E]", "kind" : "def"}, {"label" : "or", "tail" : "(arg0: ExprLang[E]): ((E, E)) ⇒ Option[E]", "member" : "provingground.translation.ExprLang.or", "link" : "provingground\/translation\/ExprLang$.html#or[E](implicitevidence$9:provingground.translation.ExprLang[E]):((E,E))=>Option[E]", "kind" : "def"}, {"label" : "sigma", "tail" : "(arg0: ExprLang[E]): ((E, E)) ⇒ Option[E]", "member" : "provingground.translation.ExprLang.sigma", "link" : "provingground\/translation\/ExprLang$.html#sigma[E](implicitevidence$8:provingground.translation.ExprLang[E]):((E,E))=>Option[E]", "kind" : "def"}, {"label" : "func", "tail" : "(arg0: ExprLang[E]): ((E, E)) ⇒ Option[E]", "member" : "provingground.translation.ExprLang.func", "link" : "provingground\/translation\/ExprLang$.html#func[E](implicitevidence$7:provingground.translation.ExprLang[E]):((E,E))=>Option[E]", "kind" : "def"}, {"label" : "pi", "tail" : "(arg0: ExprLang[E]): ((E, E)) ⇒ Option[E]", "member" : "provingground.translation.ExprLang.pi", "link" : "provingground\/translation\/ExprLang$.html#pi[E](implicitevidence$6:provingground.translation.ExprLang[E]):((E,E))=>Option[E]", "kind" : "def"}, {"label" : "equality", "tail" : "(arg0: ExprLang[E]): ((E, E)) ⇒ Option[E]", "member" : "provingground.translation.ExprLang.equality", "link" : "provingground\/translation\/ExprLang$.html#equality[E](implicitevidence$5:provingground.translation.ExprLang[E]):((E,E))=>Option[E]", "kind" : "def"}, {"label" : "pairTyp", "tail" : "(arg0: ExprLang[E]): ((E, E)) ⇒ Option[E]", "member" : "provingground.translation.ExprLang.pairTyp", "link" : "provingground\/translation\/ExprLang$.html#pairTyp[E](implicitevidence$4:provingground.translation.ExprLang[E]):((E,E))=>Option[E]", "kind" : "def"}, {"label" : "pair", "tail" : "(arg0: ExprLang[E]): ((E, E)) ⇒ Option[E]", "member" : "provingground.translation.ExprLang.pair", "link" : "provingground\/translation\/ExprLang$.html#pair[E](implicitevidence$3:provingground.translation.ExprLang[E]):((E,E))=>Option[E]", "kind" : "def"}, {"label" : "lambda", "tail" : "(arg0: ExprLang[E]): ((E, E)) ⇒ Option[E]", "member" : "provingground.translation.ExprLang.lambda", "link" : "provingground\/translation\/ExprLang$.html#lambda[E](implicitevidence$2:provingground.translation.ExprLang[E]):((E,E))=>Option[E]", "kind" : "def"}, {"label" : "appln", "tail" : "(arg0: ExprLang[E]): ((E, E)) ⇒ Option[E]", "member" : "provingground.translation.ExprLang.appln", "link" : "provingground\/translation\/ExprLang$.html#appln[E](implicitevidence$1:provingground.translation.ExprLang[E]):((E,E))=>Option[E]", "kind" : "def"}, {"label" : "All", "tail" : "", "member" : "provingground.translation.ExprLang.All", "link" : "provingground\/translation\/ExprLang$.html#All[E]extendsProductwithSerializable", "kind" : "case class"}, {"label" : "Exists", "tail" : "", "member" : "provingground.translation.ExprLang.Exists", "link" : "provingground\/translation\/ExprLang$.html#Exists[E]extendsProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/ExprLang$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/ExprLang$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/ExprLang$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/ExprLang$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/ExprLang$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/ExprLang$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/ExprLang$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/ExprLang$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/ExprLang$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/ExprLang$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/ExprLang$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/ExprLang$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/ExprLang$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/ExprLang$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/ExprLang$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/ExprLang$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/ExprLang$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/ExprLang$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/ExprLang$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/translation\/ExprLang.html", "kind" : "trait"}, {"name" : "provingground.translation.ExprPatterns", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/translation\/ExprPatterns.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/translation\/ExprPatterns.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ExprPatterns[E]) ⇒ Boolean, msg: ⇒ Any): ExprPatterns[E]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/ExprPatterns.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ExprPatterns[E]) ⇒ Boolean): ExprPatterns[E]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/ExprPatterns.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): ExprPatterns[E]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/ExprPatterns.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ExprPatterns[E]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/ExprPatterns.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ExprPatterns[E], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/translation\/ExprPatterns.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ExprPatterns[E], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/translation\/ExprPatterns.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/ExprPatterns.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/ExprPatterns.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/ExprPatterns.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/ExprPatterns.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/ExprPatterns.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/ExprPatterns.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/ExprPatterns.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/ExprPatterns.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/ExprPatterns.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/ExprPatterns.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/ExprPatterns.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/ExprPatterns.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/ExprPatterns.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/ExprPatterns.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/ExprPatterns.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/ExprPatterns.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/ExprPatterns.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/ExprPatterns.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/ExprPatterns.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "isPi", "tail" : "(): (E) ⇒ Option[(E, E)]", "member" : "provingground.translation.ExprPatterns.isPi", "link" : "provingground\/translation\/ExprPatterns.html#isPi:E=>Option[(E,E)]", "kind" : "abstract def"}, {"label" : "isSigma", "tail" : "(): (E) ⇒ Option[(E, E)]", "member" : "provingground.translation.ExprPatterns.isSigma", "link" : "provingground\/translation\/ExprPatterns.html#isSigma:E=>Option[(E,E)]", "kind" : "abstract def"}, {"label" : "isPair", "tail" : "(): (E) ⇒ Option[(E, E)]", "member" : "provingground.translation.ExprPatterns.isPair", "link" : "provingground\/translation\/ExprPatterns.html#isPair:E=>Option[(E,E)]", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "provingground\/translation\/ExprPatterns.html", "kind" : "trait"}, {"name" : "provingground.translation.FansiFormat", "shortDescription" : "", "object" : "provingground\/translation\/FansiFormat$.html", "members_object" : [{"label" : "univ", "tail" : "(n: Int): Str", "member" : "provingground.translation.FansiFormat.univ", "link" : "provingground\/translation\/FansiFormat$.html#univ(n:Int):fansi.Str", "kind" : "def"}, {"label" : "symbolic", "tail" : "(name: AnySym, typ: Typ[Term]): Str", "member" : "provingground.translation.FansiFormat.symbolic", "link" : "provingground\/translation\/FansiFormat$.html#symbolic(name:provingground.HoTT.AnySym,typ:provingground.HoTT.Typ[provingground.HoTT.Term]):fansi.Str", "kind" : "def"}, {"label" : "symbtyp", "tail" : "(typ: SymbTyp): Str", "member" : "provingground.translation.FansiFormat.symbtyp", "link" : "provingground\/translation\/FansiFormat$.html#symbtyp(typ:provingground.HoTT.SymbTyp):fansi.Str", "kind" : "def"}, {"label" : "symbobj", "tail" : "(term: SymbObj[Term]): Str", "member" : "provingground.translation.FansiFormat.symbobj", "link" : "provingground\/translation\/FansiFormat$.html#symbobj(term:provingground.HoTT.SymbObj[provingground.HoTT.Term]):fansi.Str", "kind" : "def"}, {"label" : "pair", "tail" : "(first: Str, second: Str): Str", "member" : "provingground.translation.FansiFormat.pair", "link" : "provingground\/translation\/FansiFormat$.html#pair(first:fansi.Str,second:fansi.Str):fansi.Str", "kind" : "def"}, {"label" : "plus", "tail" : "(first: Str, scnd: Str): Str", "member" : "provingground.translation.FansiFormat.plus", "link" : "provingground\/translation\/FansiFormat$.html#plus(first:fansi.Str,scnd:fansi.Str):fansi.Str", "kind" : "def"}, {"label" : "sigma", "tail" : "(fibre: Str): Str", "member" : "provingground.translation.FansiFormat.sigma", "link" : "provingground\/translation\/FansiFormat$.html#sigma(fibre:fansi.Str):fansi.Str", "kind" : "def"}, {"label" : "pi", "tail" : "(fibre: Str): Str", "member" : "provingground.translation.FansiFormat.pi", "link" : "provingground\/translation\/FansiFormat$.html#pi(fibre:fansi.Str):fansi.Str", "kind" : "def"}, {"label" : "equality", "tail" : "(dom: Str, lhs: Str, rhs: Str): Str", "member" : "provingground.translation.FansiFormat.equality", "link" : "provingground\/translation\/FansiFormat$.html#equality(dom:fansi.Str,lhs:fansi.Str,rhs:fansi.Str):fansi.Str", "kind" : "def"}, {"label" : "lambda", "tail" : "(variable: Str, typ: Str, value: Str): Str", "member" : "provingground.translation.FansiFormat.lambda", "link" : "provingground\/translation\/FansiFormat$.html#lambda(variable:fansi.Str,typ:fansi.Str,value:fansi.Str):fansi.Str", "kind" : "def"}, {"label" : "arrow", "tail" : "(dom: Str, codom: Str): Str", "member" : "provingground.translation.FansiFormat.arrow", "link" : "provingground\/translation\/FansiFormat$.html#arrow(dom:fansi.Str,codom:fansi.Str):fansi.Str", "kind" : "def"}, {"label" : "appln", "tail" : "(func: Str, arg: Str): Str", "member" : "provingground.translation.FansiFormat.appln", "link" : "provingground\/translation\/FansiFormat$.html#appln(func:fansi.Str,arg:fansi.Str):fansi.Str", "kind" : "def"}, {"label" : "fromString", "tail" : "(str: String)(typ: Typ[Term]): Str", "member" : "provingground.translation.FansiFormat.fromString", "link" : "provingground\/translation\/FansiFormat$.html#fromString(str:String)(implicittyp:provingground.HoTT.Typ[provingground.HoTT.Term]):fansi.Str", "kind" : "def"}, {"label" : "specialTerms", "tail" : ": PartialFunction[Term, Str]", "member" : "provingground.translation.FansiFormat.specialTerms", "link" : "provingground\/translation\/FansiFormat$.html#specialTerms:PartialFunction[provingground.HoTT.Term,fansi.Str]", "kind" : "val"}, {"label" : "syms", "tail" : ": UnicodeSyms.type", "member" : "provingground.translation.FansiFormat.syms", "link" : "provingground\/translation\/FansiFormat$.html#syms:provingground.HoTT.UnicodeSyms.type", "kind" : "val"}, {"label" : "apply", "tail" : "(term: Term): Str", "member" : "provingground.translation.TermRec.apply", "link" : "provingground\/translation\/FansiFormat$.html#apply(term:provingground.HoTT.Term):U", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/FansiFormat$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/FansiFormat$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/FansiFormat$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/FansiFormat$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/FansiFormat$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/FansiFormat$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/FansiFormat$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/FansiFormat$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/FansiFormat$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/FansiFormat$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/FansiFormat$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/FansiFormat$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/FansiFormat$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/FansiFormat$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/FansiFormat$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/FansiFormat$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/FansiFormat$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/FansiFormat$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/FansiFormat$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.translation.FansiShow", "members_trait" : [{"label" : "fansi", "tail" : "(): String", "member" : "provingground.translation.FansiShow.View.fansi", "link" : "provingground\/translation\/FansiShow.html#fansi:String", "kind" : "def"}, {"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/translation\/FansiShow.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/translation\/FansiShow.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (FansiShow[U]) ⇒ Boolean, msg: ⇒ Any): FansiShow[U]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/FansiShow.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (FansiShow[U]) ⇒ Boolean): FansiShow[U]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/FansiShow.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): FansiShow[U]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/FansiShow.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): FansiShow[U]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/FansiShow.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (FansiShow[U], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/translation\/FansiShow.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (FansiShow[U], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/translation\/FansiShow.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/FansiShow.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/FansiShow.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/FansiShow.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/FansiShow.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/FansiShow.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/FansiShow.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/FansiShow.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/FansiShow.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/FansiShow.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/FansiShow.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/FansiShow.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/FansiShow.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/FansiShow.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/FansiShow.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/FansiShow.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/FansiShow.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/FansiShow.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/FansiShow.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/FansiShow.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "show", "tail" : "(x: U): String", "member" : "provingground.translation.FansiShow.show", "link" : "provingground\/translation\/FansiShow.html#show(x:U):String", "kind" : "abstract def"}], "shortDescription" : "", "object" : "provingground\/translation\/FansiShow$.html", "members_object" : [{"label" : "fd", "tail" : "(arg0: FansiShow[U]): FansiShow[FiniteDistribution[U]]", "member" : "provingground.translation.FansiShow.fd", "link" : "provingground\/translation\/FansiShow$.html#fd[U](implicitevidence$18:provingground.translation.FansiShow[U]):provingground.translation.FansiShow[provingground.FiniteDistribution[U]]", "kind" : "implicit def"}, {"label" : "weighted", "tail" : "(arg0: FansiShow[U]): FansiShow[Weighted[U]]", "member" : "provingground.translation.FansiShow.weighted", "link" : "provingground\/translation\/FansiShow$.html#weighted[U](implicitevidence$17:provingground.translation.FansiShow[U]):provingground.translation.FansiShow[provingground.Weighted[U]]", "kind" : "implicit def"}, {"label" : "mapp", "tail" : "(arg0: FansiShow[U], arg1: FansiShow[V]): FansiShow[Map[U, V]]", "member" : "provingground.translation.FansiShow.mapp", "link" : "provingground\/translation\/FansiShow$.html#mapp[U,V](implicitevidence$15:provingground.translation.FansiShow[U],implicitevidence$16:provingground.translation.FansiShow[V]):provingground.translation.FansiShow[Map[U,V]]", "kind" : "implicit def"}, {"label" : "num", "tail" : "(arg0: Numeric[U]): FansiShow[U]", "member" : "provingground.translation.FansiShow.num", "link" : "provingground\/translation\/FansiShow$.html#num[U](implicitevidence$14:Numeric[U]):provingground.translation.FansiShow[U]", "kind" : "implicit def"}, {"label" : "string", "tail" : "(): FansiShow[String]", "member" : "provingground.translation.FansiShow.string", "link" : "provingground\/translation\/FansiShow$.html#string:provingground.translation.FansiShow[String]", "kind" : "implicit def"}, {"label" : "tuple4", "tail" : "(arg0: FansiShow[U1], arg1: FansiShow[U2], arg2: FansiShow[U3], arg3: FansiShow[U4]): FansiShow[(U1, U2, U3, U4)]", "member" : "provingground.translation.FansiShow.tuple4", "link" : "provingground\/translation\/FansiShow$.html#tuple4[U1,U2,U3,U4](implicitevidence$10:provingground.translation.FansiShow[U1],implicitevidence$11:provingground.translation.FansiShow[U2],implicitevidence$12:provingground.translation.FansiShow[U3],implicitevidence$13:provingground.translation.FansiShow[U4]):provingground.translation.FansiShow[(U1,U2,U3,U4)]", "kind" : "implicit def"}, {"label" : "tuple3", "tail" : "(arg0: FansiShow[U1], arg1: FansiShow[U2], arg2: FansiShow[U3]): FansiShow[(U1, U2, U3)]", "member" : "provingground.translation.FansiShow.tuple3", "link" : "provingground\/translation\/FansiShow$.html#tuple3[U1,U2,U3](implicitevidence$7:provingground.translation.FansiShow[U1],implicitevidence$8:provingground.translation.FansiShow[U2],implicitevidence$9:provingground.translation.FansiShow[U3]):provingground.translation.FansiShow[(U1,U2,U3)]", "kind" : "implicit def"}, {"label" : "tuple2", "tail" : "(arg0: FansiShow[U1], arg1: FansiShow[U2]): FansiShow[(U1, U2)]", "member" : "provingground.translation.FansiShow.tuple2", "link" : "provingground\/translation\/FansiShow$.html#tuple2[U1,U2](implicitevidence$5:provingground.translation.FansiShow[U1],implicitevidence$6:provingground.translation.FansiShow[U2]):provingground.translation.FansiShow[(U1,U2)]", "kind" : "implicit def"}, {"label" : "set", "tail" : "(arg0: FansiShow[U]): FansiShow[Set[U]]", "member" : "provingground.translation.FansiShow.set", "link" : "provingground\/translation\/FansiShow$.html#set[U](implicitevidence$4:provingground.translation.FansiShow[U]):provingground.translation.FansiShow[Set[U]]", "kind" : "implicit def"}, {"label" : "vec", "tail" : "(arg0: FansiShow[U]): FansiShow[Vector[U]]", "member" : "provingground.translation.FansiShow.vec", "link" : "provingground\/translation\/FansiShow$.html#vec[U](implicitevidence$3:provingground.translation.FansiShow[U]):provingground.translation.FansiShow[Vector[U]]", "kind" : "implicit def"}, {"label" : "list", "tail" : "(arg0: FansiShow[U]): FansiShow[List[U]]", "member" : "provingground.translation.FansiShow.list", "link" : "provingground\/translation\/FansiShow$.html#list[U](implicitevidence$2:provingground.translation.FansiShow[U]):provingground.translation.FansiShow[List[U]]", "kind" : "implicit def"}, {"label" : "simplePrint", "tail" : ": PPrinter", "member" : "provingground.translation.FansiShow.simplePrint", "link" : "provingground\/translation\/FansiShow$.html#simplePrint:pprint.PPrinter", "kind" : "val"}, {"label" : "simpleHandler", "tail" : ": PartialFunction[Any, Tree]", "member" : "provingground.translation.FansiShow.simpleHandler", "link" : "provingground\/translation\/FansiShow$.html#simpleHandler:PartialFunction[Any,pprint.Tree]", "kind" : "val"}, {"label" : "fansiPrint", "tail" : ": PPrinter", "member" : "provingground.translation.FansiShow.fansiPrint", "link" : "provingground\/translation\/FansiShow$.html#fansiPrint:pprint.PPrinter", "kind" : "val"}, {"label" : "fansiHandler", "tail" : ": PartialFunction[Any, Tree]", "member" : "provingground.translation.FansiShow.fansiHandler", "link" : "provingground\/translation\/FansiShow$.html#fansiHandler:PartialFunction[Any,pprint.Tree]", "kind" : "val"}, {"label" : "term", "tail" : "(): FansiShow[U]", "member" : "provingground.translation.FansiShow.term", "link" : "provingground\/translation\/FansiShow$.html#term[U<:provingground.HoTT.Term]:provingground.translation.FansiShow[U]", "kind" : "implicit def"}, {"label" : "View", "tail" : "", "member" : "provingground.translation.FansiShow.View", "link" : "provingground\/translation\/FansiShow$.html#View[U]extendsAnyRef", "kind" : "implicit class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/FansiShow$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/FansiShow$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/FansiShow$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/FansiShow$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/FansiShow$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/FansiShow$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/FansiShow$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/FansiShow$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/FansiShow$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/FansiShow$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/FansiShow$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/FansiShow$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/FansiShow$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/FansiShow$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/FansiShow$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/FansiShow$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/FansiShow$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/FansiShow$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/FansiShow$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/translation\/FansiShow.html", "kind" : "trait"}, {"name" : "provingground.translation.FansiTranslate", "shortDescription" : "", "object" : "provingground\/translation\/FansiTranslate$.html", "members_object" : [{"label" : "fansiTrans", "tail" : ": OrElse[Term, Str]", "member" : "provingground.translation.FansiTranslate.fansiTrans", "link" : "provingground\/translation\/FansiTranslate$.html#fansiTrans:provingground.translation.Translator.OrElse[provingground.HoTT.Term,fansi.Str]", "kind" : "val"}, {"label" : "apply", "tail" : "(x: Term): String", "member" : "provingground.translation.FansiTranslate.apply", "link" : "provingground\/translation\/FansiTranslate$.html#apply(x:provingground.HoTT.Term):String", "kind" : "def"}, {"label" : "syms", "tail" : ": UnicodeSyms.type", "member" : "provingground.translation.FansiTranslate.syms", "link" : "provingground\/translation\/FansiTranslate$.html#syms:provingground.HoTT.UnicodeSyms.type", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/FansiTranslate$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/FansiTranslate$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/FansiTranslate$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/FansiTranslate$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/FansiTranslate$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/FansiTranslate$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/FansiTranslate$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/FansiTranslate$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/FansiTranslate$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/FansiTranslate$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/FansiTranslate$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/FansiTranslate$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/FansiTranslate$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/FansiTranslate$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/FansiTranslate$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/FansiTranslate$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/FansiTranslate$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/FansiTranslate$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/FansiTranslate$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.translation.FoldedTerm", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/translation\/FoldedTerm.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/translation\/FoldedTerm.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (FoldedTerm[U]) ⇒ Boolean, msg: ⇒ Any): FoldedTerm[U]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/FoldedTerm.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (FoldedTerm[U]) ⇒ Boolean): FoldedTerm[U]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/FoldedTerm.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): FoldedTerm[U]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/FoldedTerm.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): FoldedTerm[U]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/FoldedTerm.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (FoldedTerm[U], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/translation\/FoldedTerm.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (FoldedTerm[U], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/translation\/FoldedTerm.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "usesVar", "tail" : "(t: Term): Boolean", "member" : "provingground.HoTT.Term.usesVar", "link" : "provingground\/translation\/FoldedTerm.html#usesVar(t:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "indepOf", "tail" : "(that: Term): Boolean", "member" : "provingground.HoTT.Term.indepOf", "link" : "provingground\/translation\/FoldedTerm.html#indepOf(that:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "dependsOn", "tail" : "(that: Term): Boolean", "member" : "provingground.HoTT.Term.dependsOn", "link" : "provingground\/translation\/FoldedTerm.html#dependsOn(that:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "typed", "tail" : ": TypedTerm[U] forSome {type U >: FoldedTerm.this.type <: Term with Subs[U]}", "member" : "provingground.HoTT.Term.typed", "link" : "provingground\/translation\/FoldedTerm.html#typed:provingground.HoTT.TypedTerm[U]forSome{typeU>:Term.this.type<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]}", "kind" : "lazy val"}, {"label" : "replace", "tail" : "(x: Term, y: Term): Term with Subs[Term]", "member" : "provingground.HoTT.Subs.replace", "link" : "provingground\/translation\/FoldedTerm.html#replace(x:provingground.HoTT.Term,y:provingground.HoTT.Term):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/FoldedTerm.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/FoldedTerm.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/FoldedTerm.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/FoldedTerm.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/FoldedTerm.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/FoldedTerm.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/FoldedTerm.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/FoldedTerm.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/FoldedTerm.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/FoldedTerm.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/FoldedTerm.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/FoldedTerm.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/FoldedTerm.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/FoldedTerm.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/FoldedTerm.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/FoldedTerm.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/FoldedTerm.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/FoldedTerm.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/FoldedTerm.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "elems", "tail" : ": Traversable[U]", "member" : "provingground.translation.FoldedTerm.elems", "link" : "provingground\/translation\/FoldedTerm.html#elems:Traversable[U]", "kind" : "abstract val"}, {"label" : "op", "tail" : ": Func[U, Func[U, U]]", "member" : "provingground.translation.FoldedTerm.op", "link" : "provingground\/translation\/FoldedTerm.html#op:provingground.HoTT.Func[U,provingground.HoTT.Func[U,U]]", "kind" : "abstract val"}, {"label" : "typ", "tail" : ": Typ[U] forSome {type U >: FoldedTerm.this.type <: Term with Subs[U]}", "member" : "provingground.HoTT.Term.typ", "link" : "provingground\/translation\/FoldedTerm.html#typ:provingground.HoTT.Typ[U]forSome{typeU>:Term.this.type<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]}", "kind" : "abstract val"}, {"label" : "newobj", "tail" : "(): Term with Subs[Term]", "member" : "provingground.HoTT.Subs.newobj", "link" : "provingground\/translation\/FoldedTerm.html#newobj:Uwithprovingground.HoTT.Subs[U]", "kind" : "abstract def"}, {"label" : "subs", "tail" : "(x: Term, y: Term): Term with Subs[Term]", "member" : "provingground.HoTT.Subs.subs", "link" : "provingground\/translation\/FoldedTerm.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):Uwithprovingground.HoTT.Subs[U]", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "provingground\/translation\/FoldedTerm.html", "kind" : "trait"}, {"name" : "provingground.translation.FormulaParser", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/translation\/FormulaParser.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/translation\/FormulaParser.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (FormulaParser[E]) ⇒ Boolean, msg: ⇒ Any): FormulaParser[E]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/FormulaParser.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (FormulaParser[E]) ⇒ Boolean): FormulaParser[E]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/FormulaParser.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): FormulaParser[E]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/FormulaParser.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): FormulaParser[E]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/FormulaParser.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (FormulaParser[E], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/translation\/FormulaParser.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (FormulaParser[E], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/translation\/FormulaParser.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/FormulaParser.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/FormulaParser.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/FormulaParser.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/FormulaParser.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/FormulaParser.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/FormulaParser.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/FormulaParser.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/FormulaParser.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/FormulaParser.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/FormulaParser.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/FormulaParser.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/FormulaParser.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/FormulaParser.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/FormulaParser.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/FormulaParser.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/FormulaParser.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/FormulaParser.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/FormulaParser.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/FormulaParser.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "formula", "tail" : "(fmla: String): Option[E]", "member" : "provingground.translation.FormulaParser.formula", "link" : "provingground\/translation\/FormulaParser.html#formula(fmla:String):Option[E]", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "provingground\/translation\/FormulaParser.html", "kind" : "trait"}, {"name" : "provingground.translation.FreeExpr", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/translation\/FreeExpr.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/translation\/FreeExpr.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (FreeExpr) ⇒ Boolean, msg: ⇒ Any): FreeExpr", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/FreeExpr.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (FreeExpr) ⇒ Boolean): FreeExpr", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/FreeExpr.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): FreeExpr", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/FreeExpr.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): FreeExpr", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/FreeExpr.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (FreeExpr, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/translation\/FreeExpr.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (FreeExpr, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/translation\/FreeExpr.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/FreeExpr.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/FreeExpr.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/FreeExpr.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/FreeExpr.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/FreeExpr.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/FreeExpr.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/FreeExpr.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/FreeExpr.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/FreeExpr.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/FreeExpr.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/FreeExpr.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/FreeExpr.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/FreeExpr.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/FreeExpr.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/FreeExpr.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/FreeExpr.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/FreeExpr.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/FreeExpr.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/FreeExpr.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "as", "tail" : "(l: ExprLang[E]): Option[E]", "member" : "provingground.translation.FreeExpr.as", "link" : "provingground\/translation\/FreeExpr.html#as[E](implicitl:provingground.translation.ExprLang[E]):Option[E]", "kind" : "abstract def"}], "shortDescription" : "", "object" : "provingground\/translation\/FreeExpr$.html", "members_object" : [{"label" : "readTyp", "tail" : "(s: String): Typ[Term]", "member" : "provingground.translation.FreeExpr.readTyp", "link" : "provingground\/translation\/FreeExpr$.html#readTyp(s:String):provingground.HoTT.Typ[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "readDist", "tail" : "(s: String, names: Vector[(Term, String)]): FiniteDistribution[Term]", "member" : "provingground.translation.FreeExpr.readDist", "link" : "provingground\/translation\/FreeExpr$.html#readDist(s:String,names:Vector[(provingground.HoTT.Term,String)]):provingground.FiniteDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "writeDist", "tail" : "(fd: FiniteDistribution[Term], names: Vector[(Term, String)]): String", "member" : "provingground.translation.FreeExpr.writeDist", "link" : "provingground\/translation\/FreeExpr$.html#writeDist(fd:provingground.FiniteDistribution[provingground.HoTT.Term],names:Vector[(provingground.HoTT.Term,String)]):String", "kind" : "def"}, {"label" : "readTerm", "tail" : "(s: String): Term", "member" : "provingground.translation.FreeExpr.readTerm", "link" : "provingground\/translation\/FreeExpr$.html#readTerm(s:String):provingground.HoTT.Term", "kind" : "def"}, {"label" : "writeTerm", "tail" : "(t: Term): String", "member" : "provingground.translation.FreeExpr.writeTerm", "link" : "provingground\/translation\/FreeExpr$.html#writeTerm(t:provingground.HoTT.Term):String", "kind" : "def"}, {"label" : "writeExpr", "tail" : "(fr: FreeExpr): String", "member" : "provingground.translation.FreeExpr.writeExpr", "link" : "provingground\/translation\/FreeExpr$.html#writeExpr(fr:provingground.translation.FreeExpr):String", "kind" : "def"}, {"label" : "fromTerm", "tail" : "(t: Term): Option[FreeExpr]", "member" : "provingground.translation.FreeExpr.fromTerm", "link" : "provingground\/translation\/FreeExpr$.html#fromTerm(t:provingground.HoTT.Term):Option[provingground.translation.FreeExpr]", "kind" : "def"}, {"label" : "FromTerm", "tail" : "", "member" : "provingground.translation.FreeExpr.FromTerm", "link" : "provingground\/translation\/FreeExpr$.html#FromTerm", "kind" : "object"}, {"label" : "FreeLang", "tail" : "", "member" : "provingground.translation.FreeExpr.FreeLang", "link" : "provingground\/translation\/FreeExpr$.html#FreeLang", "kind" : "implicit object"}, {"label" : "Univ", "tail" : "", "member" : "provingground.translation.FreeExpr.Univ", "link" : "provingground\/translation\/FreeExpr$.html#Univ", "kind" : "object"}, {"label" : "Special", "tail" : "", "member" : "provingground.translation.FreeExpr.Special", "link" : "provingground\/translation\/FreeExpr$.html#Special", "kind" : "object"}, {"label" : "Special", "tail" : "", "member" : "provingground.translation.FreeExpr.Special", "link" : "provingground\/translation\/FreeExpr$.html#SpecialextendsFreeExprwithProductwithSerializable", "kind" : "case class"}, {"label" : "Numeral", "tail" : "", "member" : "provingground.translation.FreeExpr.Numeral", "link" : "provingground\/translation\/FreeExpr$.html#NumeralextendsFreeExprwithProductwithSerializable", "kind" : "case class"}, {"label" : "QED", "tail" : "", "member" : "provingground.translation.FreeExpr.QED", "link" : "provingground\/translation\/FreeExpr$.html#QED", "kind" : "object"}, {"label" : "FF", "tail" : "", "member" : "provingground.translation.FreeExpr.FF", "link" : "provingground\/translation\/FreeExpr$.html#FF", "kind" : "object"}, {"label" : "TT", "tail" : "", "member" : "provingground.translation.FreeExpr.TT", "link" : "provingground\/translation\/FreeExpr$.html#TT", "kind" : "object"}, {"label" : "Or", "tail" : "", "member" : "provingground.translation.FreeExpr.Or", "link" : "provingground\/translation\/FreeExpr$.html#OrextendsFreeExprwithProductwithSerializable", "kind" : "case class"}, {"label" : "OrCases", "tail" : "", "member" : "provingground.translation.FreeExpr.OrCases", "link" : "provingground\/translation\/FreeExpr$.html#OrCasesextendsFreeExprwithProductwithSerializable", "kind" : "case class"}, {"label" : "FreePair", "tail" : "", "member" : "provingground.translation.FreeExpr.FreePair", "link" : "provingground\/translation\/FreeExpr$.html#FreePairextendsFreeExprwithProductwithSerializable", "kind" : "case class"}, {"label" : "FreeSigma", "tail" : "", "member" : "provingground.translation.FreeExpr.FreeSigma", "link" : "provingground\/translation\/FreeExpr$.html#FreeSigmaextendsFreeExprwithProductwithSerializable", "kind" : "case class"}, {"label" : "FreeEquality", "tail" : "", "member" : "provingground.translation.FreeExpr.FreeEquality", "link" : "provingground\/translation\/FreeExpr$.html#FreeEqualityextendsFreeExprwithProductwithSerializable", "kind" : "case class"}, {"label" : "FreeAppln", "tail" : "", "member" : "provingground.translation.FreeExpr.FreeAppln", "link" : "provingground\/translation\/FreeExpr$.html#FreeApplnextendsFreeExprwithProductwithSerializable", "kind" : "case class"}, {"label" : "FreePi", "tail" : "", "member" : "provingground.translation.FreeExpr.FreePi", "link" : "provingground\/translation\/FreeExpr$.html#FreePiextendsFreeExprwithProductwithSerializable", "kind" : "case class"}, {"label" : "FreeLambda", "tail" : "", "member" : "provingground.translation.FreeExpr.FreeLambda", "link" : "provingground\/translation\/FreeExpr$.html#FreeLambdaextendsFreeExprwithProductwithSerializable", "kind" : "case class"}, {"label" : "FreeProj2", "tail" : "", "member" : "provingground.translation.FreeExpr.FreeProj2", "link" : "provingground\/translation\/FreeExpr$.html#FreeProj2extendsFreeExprwithProductwithSerializable", "kind" : "case class"}, {"label" : "FreeProj1", "tail" : "", "member" : "provingground.translation.FreeExpr.FreeProj1", "link" : "provingground\/translation\/FreeExpr$.html#FreeProj1extendsFreeExprwithProductwithSerializable", "kind" : "case class"}, {"label" : "FreeIncl2", "tail" : "", "member" : "provingground.translation.FreeExpr.FreeIncl2", "link" : "provingground\/translation\/FreeExpr$.html#FreeIncl2extendsFreeExprwithProductwithSerializable", "kind" : "case class"}, {"label" : "FreeIncl1", "tail" : "", "member" : "provingground.translation.FreeExpr.FreeIncl1", "link" : "provingground\/translation\/FreeExpr$.html#FreeIncl1extendsFreeExprwithProductwithSerializable", "kind" : "case class"}, {"label" : "MetaVar", "tail" : "", "member" : "provingground.translation.FreeExpr.MetaVar", "link" : "provingground\/translation\/FreeExpr$.html#MetaVarextendsFreeExprwithProductwithSerializable", "kind" : "case class"}, {"label" : "AnonVar", "tail" : "", "member" : "provingground.translation.FreeExpr.AnonVar", "link" : "provingground\/translation\/FreeExpr$.html#AnonVarextendsFreeExprwithProductwithSerializable", "kind" : "case class"}, {"label" : "TypVariable", "tail" : "", "member" : "provingground.translation.FreeExpr.TypVariable", "link" : "provingground\/translation\/FreeExpr$.html#TypVariableextendsFreeExprwithProductwithSerializable", "kind" : "case class"}, {"label" : "Variable", "tail" : "", "member" : "provingground.translation.FreeExpr.Variable", "link" : "provingground\/translation\/FreeExpr$.html#VariableextendsFreeExprwithProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/FreeExpr$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/FreeExpr$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/FreeExpr$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/FreeExpr$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/FreeExpr$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/FreeExpr$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/FreeExpr$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/FreeExpr$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/FreeExpr$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/FreeExpr$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/FreeExpr$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/FreeExpr$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/FreeExpr$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/FreeExpr$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/FreeExpr$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/FreeExpr$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/FreeExpr$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/FreeExpr$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/FreeExpr$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/translation\/FreeExpr.html", "kind" : "trait"}, {"name" : "provingground.translation.FreeExprHLPatterns", "shortDescription" : "", "object" : "provingground\/translation\/FreeExprHLPatterns$.html", "members_object" : [{"label" : "qed", "tail" : ": SubTypePattern[FreeExpr, QED.type, HN]", "member" : "provingground.translation.FreeExprHLPatterns.qed", "link" : "provingground\/translation\/FreeExprHLPatterns$.html#qed:provingground.translation.SubTypePattern[provingground.translation.FreeExpr,provingground.translation.FreeExpr.QED.type,provingground.translation.Functors.HN]", "kind" : "val"}, {"label" : "ff", "tail" : ": SubTypePattern[FreeExpr, FF.type, HN]", "member" : "provingground.translation.FreeExprHLPatterns.ff", "link" : "provingground\/translation\/FreeExprHLPatterns$.html#ff:provingground.translation.SubTypePattern[provingground.translation.FreeExpr,provingground.translation.FreeExpr.FF.type,provingground.translation.Functors.HN]", "kind" : "val"}, {"label" : "tt", "tail" : ": SubTypePattern[FreeExpr, TT.type, HN]", "member" : "provingground.translation.FreeExprHLPatterns.tt", "link" : "provingground\/translation\/FreeExprHLPatterns$.html#tt:provingground.translation.SubTypePattern[provingground.translation.FreeExpr,provingground.translation.FreeExpr.TT.type,provingground.translation.Functors.HN]", "kind" : "val"}, {"label" : "equality", "tail" : ": SubTypePattern[FreeExpr, FreeEquality, IdIdHN]", "member" : "provingground.translation.FreeExprHLPatterns.equality", "link" : "provingground\/translation\/FreeExprHLPatterns$.html#equality:provingground.translation.SubTypePattern[provingground.translation.FreeExpr,provingground.translation.FreeExpr.FreeEquality,provingground.translation.Functors.IdIdHN]", "kind" : "val"}, {"label" : "coprodElim", "tail" : ": SubTypePattern[FreeExpr, OrCases, IdIdHN]", "member" : "provingground.translation.FreeExprHLPatterns.coprodElim", "link" : "provingground\/translation\/FreeExprHLPatterns$.html#coprodElim:provingground.translation.SubTypePattern[provingground.translation.FreeExpr,provingground.translation.FreeExpr.OrCases,provingground.translation.Functors.IdIdHN]", "kind" : "val"}, {"label" : "coprod", "tail" : ": SubTypePattern[FreeExpr, Or, IdIdHN]", "member" : "provingground.translation.FreeExprHLPatterns.coprod", "link" : "provingground\/translation\/FreeExprHLPatterns$.html#coprod:provingground.translation.SubTypePattern[provingground.translation.FreeExpr,provingground.translation.FreeExpr.Or,provingground.translation.Functors.IdIdHN]", "kind" : "val"}, {"label" : "pair", "tail" : ": SubTypePattern[FreeExpr, FreePair, IdIdHN]", "member" : "provingground.translation.FreeExprHLPatterns.pair", "link" : "provingground\/translation\/FreeExprHLPatterns$.html#pair:provingground.translation.SubTypePattern[provingground.translation.FreeExpr,provingground.translation.FreeExpr.FreePair,provingground.translation.Functors.IdIdHN]", "kind" : "val"}, {"label" : "applnPat", "tail" : ": SubTypePattern[FreeExpr, FreeAppln, IdIdHN]", "member" : "provingground.translation.FreeExprHLPatterns.applnPat", "link" : "provingground\/translation\/FreeExprHLPatterns$.html#applnPat:provingground.translation.SubTypePattern[provingground.translation.FreeExpr,provingground.translation.FreeExpr.FreeAppln,provingground.translation.Functors.IdIdHN]", "kind" : "val"}, {"label" : "sigmaPat", "tail" : ": SubTypePattern[FreeExpr, FreeSigma, IdIdHN]", "member" : "provingground.translation.FreeExprHLPatterns.sigmaPat", "link" : "provingground\/translation\/FreeExprHLPatterns$.html#sigmaPat:provingground.translation.SubTypePattern[provingground.translation.FreeExpr,provingground.translation.FreeExpr.FreeSigma,provingground.translation.Functors.IdIdHN]", "kind" : "val"}, {"label" : "piPat", "tail" : ": SubTypePattern[FreeExpr, FreePi, IdIdHN]", "member" : "provingground.translation.FreeExprHLPatterns.piPat", "link" : "provingground\/translation\/FreeExprHLPatterns$.html#piPat:provingground.translation.SubTypePattern[provingground.translation.FreeExpr,provingground.translation.FreeExpr.FreePi,provingground.translation.Functors.IdIdHN]", "kind" : "val"}, {"label" : "lambdaPat", "tail" : ": SubTypePattern[FreeExpr, FreeLambda, IdIdHN]", "member" : "provingground.translation.FreeExprHLPatterns.lambdaPat", "link" : "provingground\/translation\/FreeExprHLPatterns$.html#lambdaPat:provingground.translation.SubTypePattern[provingground.translation.FreeExpr,provingground.translation.FreeExpr.FreeLambda,provingground.translation.Functors.IdIdHN]", "kind" : "val"}, {"label" : "proj2", "tail" : ": SubTypePattern[FreeExpr, FreeProj2, IdHN]", "member" : "provingground.translation.FreeExprHLPatterns.proj2", "link" : "provingground\/translation\/FreeExprHLPatterns$.html#proj2:provingground.translation.SubTypePattern[provingground.translation.FreeExpr,provingground.translation.FreeExpr.FreeProj2,provingground.translation.Functors.IdHN]", "kind" : "val"}, {"label" : "proj1", "tail" : ": SubTypePattern[FreeExpr, FreeProj1, IdHN]", "member" : "provingground.translation.FreeExprHLPatterns.proj1", "link" : "provingground\/translation\/FreeExprHLPatterns$.html#proj1:provingground.translation.SubTypePattern[provingground.translation.FreeExpr,provingground.translation.FreeExpr.FreeProj1,provingground.translation.Functors.IdHN]", "kind" : "val"}, {"label" : "inR", "tail" : ": SubTypePattern[FreeExpr, FreeIncl2, IdHN]", "member" : "provingground.translation.FreeExprHLPatterns.inR", "link" : "provingground\/translation\/FreeExprHLPatterns$.html#inR:provingground.translation.SubTypePattern[provingground.translation.FreeExpr,provingground.translation.FreeExpr.FreeIncl2,provingground.translation.Functors.IdHN]", "kind" : "val"}, {"label" : "inL", "tail" : ": SubTypePattern[FreeExpr, FreeIncl1, IdHN]", "member" : "provingground.translation.FreeExprHLPatterns.inL", "link" : "provingground\/translation\/FreeExprHLPatterns$.html#inL:provingground.translation.SubTypePattern[provingground.translation.FreeExpr,provingground.translation.FreeExpr.FreeIncl1,provingground.translation.Functors.IdHN]", "kind" : "val"}, {"label" : "metaVar", "tail" : ": SubTypePattern[FreeExpr, MetaVar, IdHN]", "member" : "provingground.translation.FreeExprHLPatterns.metaVar", "link" : "provingground\/translation\/FreeExprHLPatterns$.html#metaVar:provingground.translation.SubTypePattern[provingground.translation.FreeExpr,provingground.translation.FreeExpr.MetaVar,provingground.translation.Functors.IdHN]", "kind" : "val"}, {"label" : "typVariable", "tail" : ": SubTypePattern[FreeExpr, TypVariable, StIntHN]", "member" : "provingground.translation.FreeExprHLPatterns.typVariable", "link" : "provingground\/translation\/FreeExprHLPatterns$.html#typVariable:provingground.translation.SubTypePattern[provingground.translation.FreeExpr,provingground.translation.FreeExpr.TypVariable,provingground.translation.Functors.StIntHN]", "kind" : "val"}, {"label" : "anonVar", "tail" : ": SubTypePattern[FreeExpr, AnonVar, IdHN]", "member" : "provingground.translation.FreeExprHLPatterns.anonVar", "link" : "provingground\/translation\/FreeExprHLPatterns$.html#anonVar:provingground.translation.SubTypePattern[provingground.translation.FreeExpr,provingground.translation.FreeExpr.AnonVar,provingground.translation.Functors.IdHN]", "kind" : "val"}, {"label" : "variable", "tail" : ": SubTypePattern[FreeExpr, Variable, StIdHN]", "member" : "provingground.translation.FreeExprHLPatterns.variable", "link" : "provingground\/translation\/FreeExprHLPatterns$.html#variable:provingground.translation.SubTypePattern[provingground.translation.FreeExpr,provingground.translation.FreeExpr.Variable,provingground.translation.Functors.StIdHN]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/FreeExprHLPatterns$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/FreeExprHLPatterns$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/FreeExprHLPatterns$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/FreeExprHLPatterns$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/FreeExprHLPatterns$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/FreeExprHLPatterns$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/FreeExprHLPatterns$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/FreeExprHLPatterns$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/FreeExprHLPatterns$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/FreeExprHLPatterns$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/FreeExprHLPatterns$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/FreeExprHLPatterns$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/FreeExprHLPatterns$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/FreeExprHLPatterns$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/FreeExprHLPatterns$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/FreeExprHLPatterns$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/FreeExprHLPatterns$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/FreeExprHLPatterns$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/FreeExprHLPatterns$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.translation.FreeExprPatterns", "shortDescription" : "", "object" : "provingground\/translation\/FreeExprPatterns$.html", "members_object" : [{"label" : "termToFree", "tail" : ": OrElse[Term, FreeExpr]", "member" : "provingground.translation.FreeExprPatterns.termToFree", "link" : "provingground\/translation\/FreeExprPatterns$.html#termToFree:provingground.translation.Translator.OrElse[provingground.HoTT.Term,provingground.translation.FreeExpr]", "kind" : "val"}, {"label" : "freeToTerm", "tail" : ": OrElse[FreeExpr, Term]", "member" : "provingground.translation.FreeExprPatterns.freeToTerm", "link" : "provingground\/translation\/FreeExprPatterns$.html#freeToTerm:provingground.translation.Translator.OrElse[provingground.translation.FreeExpr,provingground.HoTT.Term]", "kind" : "val"}, {"label" : "univ", "tail" : ": Pattern[FreeExpr, N]", "member" : "provingground.translation.FreeExprPatterns.univ", "link" : "provingground\/translation\/FreeExprPatterns$.html#univ:provingground.translation.Translator.Pattern[provingground.translation.FreeExpr,provingground.translation.Functors.N]", "kind" : "val"}, {"label" : "freeToExpr", "tail" : "(arg0: ExprLang[E]): OrElse[FreeExpr, E]", "member" : "provingground.translation.FreeExprPatterns.freeToExpr", "link" : "provingground\/translation\/FreeExprPatterns$.html#freeToExpr[E](implicitevidence$1:provingground.translation.ExprLang[E]):provingground.translation.Translator.OrElse[provingground.translation.FreeExpr,E]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/FreeExprPatterns$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/FreeExprPatterns$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/FreeExprPatterns$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/FreeExprPatterns$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/FreeExprPatterns$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/FreeExprPatterns$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/FreeExprPatterns$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/FreeExprPatterns$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/FreeExprPatterns$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/FreeExprPatterns$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/FreeExprPatterns$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/FreeExprPatterns$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/FreeExprPatterns$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/FreeExprPatterns$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/FreeExprPatterns$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/FreeExprPatterns$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/FreeExprPatterns$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/FreeExprPatterns$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/FreeExprPatterns$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.translation.Functors", "shortDescription" : "", "object" : "provingground\/translation\/Functors$.html", "members_object" : [{"label" : "Tests", "tail" : "", "member" : "provingground.translation.Functors.Tests", "link" : "provingground\/translation\/Functors$.html#Tests", "kind" : "object"}, {"label" : "Pickled", "tail" : "", "member" : "provingground.translation.Functors.Pickled", "link" : "provingground\/translation\/Functors$.html#Pickled=provingground.translation.Functors.Coded[String]", "kind" : "type"}, {"label" : "trCod", "tail" : "(): Traverse[Coded]", "member" : "provingground.translation.Functors.trCod", "link" : "provingground\/translation\/Functors$.html#trCod:cats.Traverse[provingground.translation.Functors.Coded]", "kind" : "implicit def"}, {"label" : "trCnst", "tail" : "(): Traverse[[A]X]", "member" : "provingground.translation.Functors.trCnst", "link" : "provingground\/translation\/Functors$.html#trCnst[X]:cats.Traverse[[A]X]", "kind" : "implicit def"}, {"label" : "Coded", "tail" : "", "member" : "provingground.translation.Functors.Coded", "link" : "provingground\/translation\/Functors$.html#Coded[A]=(provingground.translation.Functors.S[A],provingground.translation.Functors.IL[A])", "kind" : "type"}, {"label" : "Un", "tail" : "", "member" : "provingground.translation.Functors.Un", "link" : "provingground\/translation\/Functors$.html#Un[A]=provingground.translation.Functors.C[A,Unit]", "kind" : "type"}, {"label" : "S", "tail" : "", "member" : "provingground.translation.Functors.S", "link" : "provingground\/translation\/Functors$.html#S[A]=provingground.translation.Functors.C[A,String]", "kind" : "type"}, {"label" : "N", "tail" : "", "member" : "provingground.translation.Functors.N", "link" : "provingground\/translation\/Functors$.html#N[A]=provingground.translation.Functors.C[A,Int]", "kind" : "type"}, {"label" : "C", "tail" : "", "member" : "provingground.translation.Functors.C", "link" : "provingground\/translation\/Functors$.html#C[A,X]=X", "kind" : "type"}, {"label" : "III", "tail" : "", "member" : "provingground.translation.Functors.III", "link" : "provingground\/translation\/Functors$.html#III[A]=(provingground.translation.Functors.II[A],cats.Id[A])", "kind" : "type"}, {"label" : "traverseEquiv", "tail" : "(equiv: Equiv[F, Y], TY: Traverse[Y]): Traverse[F]", "member" : "provingground.translation.Functors.traverseEquiv", "link" : "provingground\/translation\/Functors$.html#traverseEquiv[F[_],Y[_]](implicitequiv:provingground.translation.Equiv[F,Y],implicitTY:cats.Traverse[Y]):cats.Traverse[F]", "kind" : "implicit def"}, {"label" : "StIntHN", "tail" : "", "member" : "provingground.translation.Functors.StIntHN", "link" : "provingground\/translation\/Functors$.html#StIntHN[A]=provingground.translation.Functors.St[A]::provingground.translation.Functors.InHN[A]", "kind" : "type"}, {"label" : "InHN", "tail" : "", "member" : "provingground.translation.Functors.InHN", "link" : "provingground\/translation\/Functors$.html#InHN[A]=provingground.translation.Functors.In[A]::provingground.translation.Functors.HN[A]", "kind" : "type"}, {"label" : "In", "tail" : "", "member" : "provingground.translation.Functors.In", "link" : "provingground\/translation\/Functors$.html#In[A]=Int", "kind" : "type"}, {"label" : "StIdHN", "tail" : "", "member" : "provingground.translation.Functors.StIdHN", "link" : "provingground\/translation\/Functors$.html#StIdHN[A]=provingground.translation.Functors.St[A]::provingground.translation.Functors.IdHN[A]", "kind" : "type"}, {"label" : "StHN", "tail" : "", "member" : "provingground.translation.Functors.StHN", "link" : "provingground\/translation\/Functors$.html#StHN[A]=provingground.translation.Functors.St[A]::provingground.translation.Functors.HN[A]", "kind" : "type"}, {"label" : "St", "tail" : "", "member" : "provingground.translation.Functors.St", "link" : "provingground\/translation\/Functors$.html#St[A]=String", "kind" : "type"}, {"label" : "IdIdIdHN", "tail" : "", "member" : "provingground.translation.Functors.IdIdIdHN", "link" : "provingground\/translation\/Functors$.html#IdIdIdHN[A]=cats.Id[A]::provingground.translation.Functors.IdIdHN[A]", "kind" : "type"}, {"label" : "IdIdHN", "tail" : "", "member" : "provingground.translation.Functors.IdIdHN", "link" : "provingground\/translation\/Functors$.html#IdIdHN[A]=cats.Id[A]::provingground.translation.Functors.IdHN[A]", "kind" : "type"}, {"label" : "IdHN", "tail" : "", "member" : "provingground.translation.Functors.IdHN", "link" : "provingground\/translation\/Functors$.html#IdHN[A]=cats.Id[A]::provingground.translation.Functors.HN[A]", "kind" : "type"}, {"label" : "HN", "tail" : "", "member" : "provingground.translation.Functors.HN", "link" : "provingground\/translation\/Functors$.html#HN[A]=shapeless.HNil", "kind" : "type"}, {"label" : "traversePair", "tail" : "(arg0: Traverse[X], arg1: Traverse[Y]): Traverse[[A](X[A], Y[A])]", "member" : "provingground.translation.Functors.traversePair", "link" : "provingground\/translation\/Functors$.html#traversePair[X[_],Y[_]](implicitevidence$11:cats.Traverse[X],implicitevidence$12:cats.Traverse[Y]):cats.Traverse[[A](X[A],Y[A])]", "kind" : "implicit def"}, {"label" : "II", "tail" : "", "member" : "provingground.translation.Functors.II", "link" : "provingground\/translation\/Functors$.html#II[A]=(cats.Id[A],cats.Id[A])", "kind" : "type"}, {"label" : "IL", "tail" : "", "member" : "provingground.translation.Functors.IL", "link" : "provingground\/translation\/Functors$.html#IL[A]=(cats.Id[A],List[A])", "kind" : "type"}, {"label" : "SV", "tail" : "", "member" : "provingground.translation.Functors.SV", "link" : "provingground\/translation\/Functors$.html#SV[A]=(provingground.translation.Functors.S[A],Vector[A])", "kind" : "type"}, {"label" : "SVO", "tail" : "", "member" : "provingground.translation.Functors.SVO", "link" : "provingground\/translation\/Functors$.html#SVO[A]=(provingground.translation.Functors.S[A],provingground.translation.Functors.VO[A])", "kind" : "type"}, {"label" : "SVII", "tail" : "", "member" : "provingground.translation.Functors.SVII", "link" : "provingground\/translation\/Functors$.html#SVII[A]=(provingground.translation.Functors.S[A],provingground.translation.Functors.VII[A])", "kind" : "type"}, {"label" : "VII", "tail" : "", "member" : "provingground.translation.Functors.VII", "link" : "provingground\/translation\/Functors$.html#VII[A]=(Vector[A],provingground.translation.Functors.II[A])", "kind" : "type"}, {"label" : "SVI", "tail" : "", "member" : "provingground.translation.Functors.SVI", "link" : "provingground\/translation\/Functors$.html#SVI[A]=(provingground.translation.Functors.S[A],provingground.translation.Functors.VI[A])", "kind" : "type"}, {"label" : "IIIV", "tail" : "", "member" : "provingground.translation.Functors.IIIV", "link" : "provingground\/translation\/Functors$.html#IIIV[A]=(cats.Id[A],provingground.translation.Functors.IIV[A])", "kind" : "type"}, {"label" : "VIIV", "tail" : "", "member" : "provingground.translation.Functors.VIIV", "link" : "provingground\/translation\/Functors$.html#VIIV[A]=(Vector[A],provingground.translation.Functors.IIV[A])", "kind" : "type"}, {"label" : "IIV", "tail" : "", "member" : "provingground.translation.Functors.IIV", "link" : "provingground\/translation\/Functors$.html#IIV[A]=(cats.Id[A],provingground.translation.Functors.IV[A])", "kind" : "type"}, {"label" : "IVI", "tail" : "", "member" : "provingground.translation.Functors.IVI", "link" : "provingground\/translation\/Functors$.html#IVI[A]=(cats.Id[A],provingground.translation.Functors.VI[A])", "kind" : "type"}, {"label" : "VO", "tail" : "", "member" : "provingground.translation.Functors.VO", "link" : "provingground\/translation\/Functors$.html#VO[A]=(Vector[A],Option[A])", "kind" : "type"}, {"label" : "VI", "tail" : "", "member" : "provingground.translation.Functors.VI", "link" : "provingground\/translation\/Functors$.html#VI[A]=(Vector[A],cats.Id[A])", "kind" : "type"}, {"label" : "IV", "tail" : "", "member" : "provingground.translation.Functors.IV", "link" : "provingground\/translation\/Functors$.html#IV[A]=(cats.Id[A],Vector[A])", "kind" : "type"}, {"label" : "VV", "tail" : "", "member" : "provingground.translation.Functors.VV", "link" : "provingground\/translation\/Functors$.html#VV[A]=(Vector[A],Vector[A])", "kind" : "type"}, {"label" : "LL", "tail" : "", "member" : "provingground.translation.Functors.LL", "link" : "provingground\/translation\/Functors$.html#LL[A]=(List[A],List[A])", "kind" : "type"}, {"label" : "t2", "tail" : "(arg0: Functor[X], arg1: Functor[Y]): Functor[[A](X[A], Y[A])]", "member" : "provingground.translation.Functors.t2", "link" : "provingground\/translation\/Functors$.html#t2[X[_],Y[_]](implicitevidence$9:cats.Functor[X],implicitevidence$10:cats.Functor[Y]):cats.Functor[[A](X[A],Y[A])]", "kind" : "implicit def"}, {"label" : "namedTrav", "tail" : ": Traverse[Named]", "member" : "provingground.translation.Functors.namedTrav", "link" : "provingground\/translation\/Functors$.html#namedTrav:cats.Traverse[provingground.translation.Functors.Named]", "kind" : "implicit val"}, {"label" : "Named", "tail" : "", "member" : "provingground.translation.Functors.Named", "link" : "provingground\/translation\/Functors$.html#Named[A]=(provingground.translation.Functors.S[A],cats.Id[A])", "kind" : "type"}, {"label" : "augmentedFunctor", "tail" : "(arg0: Functor[X]): Functor[[A](Cn, X[A])]", "member" : "provingground.translation.Functors.augmentedFunctor", "link" : "provingground\/translation\/Functors$.html#augmentedFunctor[Cn,X[_]](implicitevidence$8:cats.Functor[X]):cats.Functor[[A](Cn,X[A])]", "kind" : "implicit def"}, {"label" : "constantFunctor", "tail" : "(): Functor[[A]Cn]", "member" : "provingground.translation.Functors.constantFunctor", "link" : "provingground\/translation\/Functors$.html#constantFunctor[Cn]:cats.Functor[[A]Cn]", "kind" : "implicit def"}, {"label" : "composeFunctors", "tail" : "(arg0: Functor[X], arg1: Functor[Y]): Functor[[A]X[Y[A]]]", "member" : "provingground.translation.Functors.composeFunctors", "link" : "provingground\/translation\/Functors$.html#composeFunctors[X[_],Y[_]](implicitevidence$6:cats.Functor[X],implicitevidence$7:cats.Functor[Y]):cats.Functor[[A]X[Y[A]]]", "kind" : "implicit def"}, {"label" : "liftMap", "tail" : "(fa: F[A], f: (A) ⇒ B)(arg0: Functor[F]): F[B]", "member" : "provingground.translation.Functors.liftMap", "link" : "provingground\/translation\/Functors$.html#liftMap[A,B,F[_]](fa:F[A],f:A=>B)(implicitevidence$5:cats.Functor[F]):F[B]", "kind" : "def"}, {"label" : "traverseCompose", "tail" : "(arg0: Traverse[X], arg1: Traverse[Y]): Traverse[[A]X[Y[A]]]", "member" : "provingground.translation.CompositeFunctors.traverseCompose", "link" : "provingground\/translation\/Functors$.html#traverseCompose[X[_],Y[_]](implicitevidence$2:cats.Traverse[X],implicitevidence$3:cats.Traverse[Y]):cats.Traverse[[A]X[Y[A]]]", "kind" : "implicit def"}, {"label" : "traverseHCons", "tail" : "(tx: Lazy[Traverse[X]], YT: Traverse[Y]): Traverse[[A]::[X[A], Y[A]]]", "member" : "provingground.translation.CompositeFunctors.traverseHCons", "link" : "provingground\/translation\/Functors$.html#traverseHCons[X[_],Y[_]<:shapeless.HList](implicittx:shapeless.Lazy[cats.Traverse[X]],implicitYT:cats.Traverse[Y]):cats.Traverse[[A]X[A]::Y[A]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/Functors$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/Functors$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/Functors$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/Functors$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/Functors$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/Functors$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/Functors$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Functors$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Functors$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Functors$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/Functors$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/Functors$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/Functors$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/Functors$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/Functors$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/Functors$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/Functors$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/Functors$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/Functors$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.translation.Inclusion", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/translation\/Inclusion.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/translation\/Inclusion.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Inclusion[X, Y]) ⇒ Boolean, msg: ⇒ Any): Inclusion[X, Y]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/Inclusion.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Inclusion[X, Y]) ⇒ Boolean): Inclusion[X, Y]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/Inclusion.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Inclusion[X, Y]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/Inclusion.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Inclusion[X, Y]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/Inclusion.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Inclusion[X, Y], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/translation\/Inclusion.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Inclusion[X, Y], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/translation\/Inclusion.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/Inclusion.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/Inclusion.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/Inclusion.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/Inclusion.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/Inclusion.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/Inclusion.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/Inclusion.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Inclusion.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Inclusion.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Inclusion.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/Inclusion.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/Inclusion.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/Inclusion.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/Inclusion.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/Inclusion.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/Inclusion.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/Inclusion.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/Inclusion.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/Inclusion.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "incl", "tail" : "(): (X[I]) ⇒ Y[I]", "member" : "provingground.translation.Inclusion.incl", "link" : "provingground\/translation\/Inclusion.html#incl[I]:X[I]=>Y[I]", "kind" : "abstract def"}], "shortDescription" : "inclusion of functors", "object" : "provingground\/translation\/Inclusion$.html", "members_object" : [{"label" : "pairInclusion", "tail" : "(incl1: Inclusion[X1, Y1], incl2: Inclusion[X2, Y2]): Inclusion[[A](X1[A], X2[A]), [A](Y1[A], Y2[A])]", "member" : "provingground.translation.Inclusion.pairInclusion", "link" : "provingground\/translation\/Inclusion$.html#pairInclusion[X1[_],Y1[_],X2[_],Y2[_]](implicitincl1:provingground.translation.Inclusion[X1,Y1],implicitincl2:provingground.translation.Inclusion[X2,Y2]):provingground.translation.Inclusion[[A](X1[A],X2[A]),[A](Y1[A],Y2[A])]", "kind" : "implicit def"}, {"label" : "subtypIncl", "tail" : "(): Inclusion[X, Y]", "member" : "provingground.translation.Inclusion.subtypIncl", "link" : "provingground\/translation\/Inclusion$.html#subtypIncl[X[_],Y[_]>:X[_]]:provingground.translation.Inclusion[X,Y]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/Inclusion$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/Inclusion$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/Inclusion$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/Inclusion$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/Inclusion$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/Inclusion$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/Inclusion$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Inclusion$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Inclusion$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Inclusion$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/Inclusion$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/Inclusion$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/Inclusion$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/Inclusion$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/Inclusion$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/Inclusion$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/Inclusion$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/Inclusion$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/Inclusion$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/translation\/Inclusion.html", "kind" : "trait"}, {"name" : "provingground.translation.JsonTranslate", "shortDescription" : "", "object" : "provingground\/translation\/JsonTranslate$.html", "members_object" : [{"label" : "jsonToTerm", "tail" : "(js: Value): Option[Term]", "member" : "provingground.translation.JsonTranslate.jsonToTerm", "link" : "provingground\/translation\/JsonTranslate$.html#jsonToTerm(js:upickle.Js.Value):Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "TermWriter", "tail" : ": upickle.default.Writer[Term]", "member" : "provingground.translation.JsonTranslate.TermWriter", "link" : "provingground\/translation\/JsonTranslate$.html#TermWriter:upickle.default.Writer[provingground.HoTT.Term]", "kind" : "implicit val"}, {"label" : "termToJson", "tail" : ": OrElse[Term, Value]", "member" : "provingground.translation.JsonTranslate.termToJson", "link" : "provingground\/translation\/JsonTranslate$.html#termToJson:provingground.translation.Translator.OrElse[provingground.HoTT.Term,upickle.Js.Value]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/JsonTranslate$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/JsonTranslate$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/JsonTranslate$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/JsonTranslate$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/JsonTranslate$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/JsonTranslate$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/JsonTranslate$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/JsonTranslate$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/JsonTranslate$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/JsonTranslate$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/JsonTranslate$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/JsonTranslate$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/JsonTranslate$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/JsonTranslate$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/JsonTranslate$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/JsonTranslate$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/JsonTranslate$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/JsonTranslate$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/JsonTranslate$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.translation.LatexFormat", "shortDescription" : "", "object" : "provingground\/translation\/LatexFormat$.html", "members_object" : [{"label" : "univ", "tail" : "(n: Int): String", "member" : "provingground.translation.LatexFormat.univ", "link" : "provingground\/translation\/LatexFormat$.html#univ(n:Int):String", "kind" : "def"}, {"label" : "symbolic", "tail" : "(name: AnySym, typ: Typ[Term]): String", "member" : "provingground.translation.LatexFormat.symbolic", "link" : "provingground\/translation\/LatexFormat$.html#symbolic(name:provingground.HoTT.AnySym,typ:provingground.HoTT.Typ[provingground.HoTT.Term]):String", "kind" : "def"}, {"label" : "symbtyp", "tail" : "(typ: SymbTyp): String", "member" : "provingground.translation.LatexFormat.symbtyp", "link" : "provingground\/translation\/LatexFormat$.html#symbtyp(typ:provingground.HoTT.SymbTyp):String", "kind" : "def"}, {"label" : "symbobj", "tail" : "(term: SymbObj[Term]): String", "member" : "provingground.translation.LatexFormat.symbobj", "link" : "provingground\/translation\/LatexFormat$.html#symbobj(term:provingground.HoTT.SymbObj[provingground.HoTT.Term]):String", "kind" : "def"}, {"label" : "pair", "tail" : "(first: String, second: String): String", "member" : "provingground.translation.LatexFormat.pair", "link" : "provingground\/translation\/LatexFormat$.html#pair(first:String,second:String):String", "kind" : "def"}, {"label" : "plus", "tail" : "(first: String, scnd: String): String", "member" : "provingground.translation.LatexFormat.plus", "link" : "provingground\/translation\/LatexFormat$.html#plus(first:String,scnd:String):String", "kind" : "def"}, {"label" : "sigma", "tail" : "(fibre: String): String", "member" : "provingground.translation.LatexFormat.sigma", "link" : "provingground\/translation\/LatexFormat$.html#sigma(fibre:String):String", "kind" : "def"}, {"label" : "pi", "tail" : "(fibre: String): String", "member" : "provingground.translation.LatexFormat.pi", "link" : "provingground\/translation\/LatexFormat$.html#pi(fibre:String):String", "kind" : "def"}, {"label" : "equality", "tail" : "(dom: String, lhs: String, rhs: String): String", "member" : "provingground.translation.LatexFormat.equality", "link" : "provingground\/translation\/LatexFormat$.html#equality(dom:String,lhs:String,rhs:String):String", "kind" : "def"}, {"label" : "lambda", "tail" : "(variable: String, typ: String, value: String): String", "member" : "provingground.translation.LatexFormat.lambda", "link" : "provingground\/translation\/LatexFormat$.html#lambda(variable:String,typ:String,value:String):String", "kind" : "def"}, {"label" : "arrow", "tail" : "(dom: String, codom: String): String", "member" : "provingground.translation.LatexFormat.arrow", "link" : "provingground\/translation\/LatexFormat$.html#arrow(dom:String,codom:String):String", "kind" : "def"}, {"label" : "appln", "tail" : "(func: String, arg: String): String", "member" : "provingground.translation.LatexFormat.appln", "link" : "provingground\/translation\/LatexFormat$.html#appln(func:String,arg:String):String", "kind" : "def"}, {"label" : "fromString", "tail" : "(str: String)(typ: Typ[Term]): String", "member" : "provingground.translation.LatexFormat.fromString", "link" : "provingground\/translation\/LatexFormat$.html#fromString(str:String)(implicittyp:provingground.HoTT.Typ[provingground.HoTT.Term]):String", "kind" : "def"}, {"label" : "specialTerms", "tail" : ": PartialFunction[Term, String]", "member" : "provingground.translation.LatexFormat.specialTerms", "link" : "provingground\/translation\/LatexFormat$.html#specialTerms:PartialFunction[provingground.HoTT.Term,String]", "kind" : "val"}, {"label" : "latex", "tail" : "(t: Term): String", "member" : "provingground.translation.LatexFormat.latex", "link" : "provingground\/translation\/LatexFormat$.html#latex(t:provingground.HoTT.Term):String", "kind" : "def"}, {"label" : "apply", "tail" : "(term: Term): String", "member" : "provingground.translation.TermRec.apply", "link" : "provingground\/translation\/LatexFormat$.html#apply(term:provingground.HoTT.Term):U", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/LatexFormat$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/LatexFormat$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/LatexFormat$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/LatexFormat$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/LatexFormat$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/LatexFormat$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/LatexFormat$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/LatexFormat$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/LatexFormat$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/LatexFormat$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/LatexFormat$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/LatexFormat$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/LatexFormat$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/LatexFormat$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/LatexFormat$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/LatexFormat$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/LatexFormat$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/LatexFormat$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/LatexFormat$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.translation.LiteralParser", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/translation\/LiteralParser.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/translation\/LiteralParser.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (LiteralParser) ⇒ Boolean, msg: ⇒ Any): LiteralParser", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/LiteralParser.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (LiteralParser) ⇒ Boolean): LiteralParser", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/LiteralParser.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): LiteralParser", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/LiteralParser.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): LiteralParser", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/LiteralParser.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (LiteralParser, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/translation\/LiteralParser.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (LiteralParser, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/translation\/LiteralParser.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "apply", "tail" : "(term: Term): String", "member" : "provingground.translation.LiteralParser.apply", "link" : "provingground\/translation\/LiteralParser.html#apply(term:provingground.HoTT.Term):String", "kind" : "def"}, {"label" : "unapply", "tail" : "(lit: String, typ: Typ[Term]): Term", "member" : "provingground.translation.LiteralParser.unapply", "link" : "provingground\/translation\/LiteralParser.html#unapply(lit:String,typ:provingground.HoTT.Typ[provingground.HoTT.Term]):provingground.HoTT.Term", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/LiteralParser.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/LiteralParser.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/LiteralParser.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/LiteralParser.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/LiteralParser.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/LiteralParser.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/LiteralParser.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/LiteralParser.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/LiteralParser.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/LiteralParser.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/LiteralParser.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/LiteralParser.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/LiteralParser.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/LiteralParser.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/LiteralParser.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/LiteralParser.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/LiteralParser.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/LiteralParser.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/LiteralParser.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "literal", "tail" : "(term: Term): Option[String]", "member" : "provingground.translation.LiteralParser.literal", "link" : "provingground\/translation\/LiteralParser.html#literal(term:provingground.HoTT.Term):Option[String]", "kind" : "abstract def"}, {"label" : "parse", "tail" : "(typ: Typ[Term])(lit: String): Option[Term]", "member" : "provingground.translation.LiteralParser.parse", "link" : "provingground\/translation\/LiteralParser.html#parse(typ:provingground.HoTT.Typ[provingground.HoTT.Term])(lit:String):Option[provingground.HoTT.Term]", "kind" : "abstract def"}], "shortDescription" : "", "object" : "provingground\/translation\/LiteralParser$.html", "members_object" : [{"label" : "Empty", "tail" : "", "member" : "provingground.translation.LiteralParser.Empty", "link" : "provingground\/translation\/LiteralParser$.html#Empty", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/LiteralParser$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/LiteralParser$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/LiteralParser$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/LiteralParser$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/LiteralParser$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/LiteralParser$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/LiteralParser$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/LiteralParser$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/LiteralParser$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/LiteralParser$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/LiteralParser$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/LiteralParser$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/LiteralParser$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/LiteralParser$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/LiteralParser$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/LiteralParser$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/LiteralParser$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/LiteralParser$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/LiteralParser$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/translation\/LiteralParser.html", "kind" : "trait"}, {"name" : "provingground.translation.MathReader", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/translation\/MathReader.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/translation\/MathReader.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MathReader[D, E]) ⇒ Boolean, msg: ⇒ Any): MathReader[D, E]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/MathReader.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MathReader[D, E]) ⇒ Boolean): MathReader[D, E]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/MathReader.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): MathReader[D, E]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/MathReader.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): MathReader[D, E]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/MathReader.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (MathReader[D, E], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/translation\/MathReader.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (MathReader[D, E], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/translation\/MathReader.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/MathReader.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/MathReader.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/MathReader.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/MathReader.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/MathReader.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/MathReader.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/MathReader.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/MathReader.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/MathReader.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/MathReader.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/MathReader.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/MathReader.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/MathReader.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/MathReader.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/MathReader.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/MathReader.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/MathReader.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/MathReader.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/MathReader.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "contexts", "tail" : "(doc: D): Map[Scoped[Statement[E]], Vector[Scoped[Statement[E]]]]", "member" : "provingground.translation.MathReader.contexts", "link" : "provingground\/translation\/MathReader.html#contexts(doc:D):Map[provingground.translation.Scoped[provingground.translation.Statement[E]],Vector[provingground.translation.Scoped[provingground.translation.Statement[E]]]]", "kind" : "abstract def"}, {"label" : "read", "tail" : "(doc: D): Vector[Scoped[Statement[E]]]", "member" : "provingground.translation.MathReader.read", "link" : "provingground\/translation\/MathReader.html#read(doc:D):Vector[provingground.translation.Scoped[provingground.translation.Statement[E]]]", "kind" : "abstract def"}], "shortDescription" : "", "object" : "provingground\/translation\/MathReader$.html", "members_object" : [{"label" : "nestedDocReader", "tail" : "(): MathReader[NestedDoc[Statement[E]], E]", "member" : "provingground.translation.MathReader.nestedDocReader", "link" : "provingground\/translation\/MathReader$.html#nestedDocReader[E]:provingground.translation.MathReader[provingground.translation.NestedDoc[provingground.translation.Statement[E]],E]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/MathReader$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/MathReader$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/MathReader$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/MathReader$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/MathReader$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/MathReader$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/MathReader$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/MathReader$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/MathReader$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/MathReader$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/MathReader$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/MathReader$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/MathReader$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/MathReader$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/MathReader$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/MathReader$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/MathReader$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/MathReader$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/MathReader$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/translation\/MathReader.html", "kind" : "trait"}, {"name" : "provingground.translation.MathWriter", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/translation\/MathWriter.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/translation\/MathWriter.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MathWriter[D, E]) ⇒ Boolean, msg: ⇒ Any): MathWriter[D, E]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/MathWriter.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MathWriter[D, E]) ⇒ Boolean): MathWriter[D, E]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/MathWriter.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): MathWriter[D, E]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/MathWriter.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): MathWriter[D, E]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/MathWriter.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (MathWriter[D, E], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/translation\/MathWriter.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (MathWriter[D, E], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/translation\/MathWriter.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "appendTry", "tail" : "(s: ⇒ Statement[E], doc: D): D", "member" : "provingground.translation.MathWriter.appendTry", "link" : "provingground\/translation\/MathWriter.html#appendTry(s:=>provingground.translation.Statement[E],doc:D):D", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/MathWriter.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/MathWriter.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/MathWriter.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/MathWriter.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/MathWriter.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/MathWriter.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/MathWriter.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/MathWriter.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/MathWriter.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/MathWriter.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/MathWriter.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/MathWriter.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/MathWriter.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/MathWriter.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/MathWriter.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/MathWriter.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/MathWriter.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/MathWriter.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/MathWriter.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "end", "tail" : "(e: Beginning, doc: D): D", "member" : "provingground.translation.MathWriter.end", "link" : "provingground\/translation\/MathWriter.html#end(e:provingground.translation.Statement.Beginning,doc:D):D", "kind" : "abstract def"}, {"label" : "begin", "tail" : "(b: Beginning, doc: D): D", "member" : "provingground.translation.MathWriter.begin", "link" : "provingground\/translation\/MathWriter.html#begin(b:provingground.translation.Statement.Beginning,doc:D):D", "kind" : "abstract def"}, {"label" : "append", "tail" : "(s: Statement[E], doc: D): D", "member" : "provingground.translation.MathWriter.append", "link" : "provingground\/translation\/MathWriter.html#append(s:provingground.translation.Statement[E],doc:D):D", "kind" : "abstract def"}], "shortDescription" : "Type-class for  writing to a document of type D in terms of expressions of type E.", "object" : "provingground\/translation\/MathWriter$.html", "members_object" : [{"label" : "nestedDocWriter", "tail" : "(): MathWriter[NestedDoc[Statement[E]], E]", "member" : "provingground.translation.MathWriter.nestedDocWriter", "link" : "provingground\/translation\/MathWriter$.html#nestedDocWriter[E]:provingground.translation.MathWriter[provingground.translation.NestedDoc[provingground.translation.Statement[E]],E]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/MathWriter$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/MathWriter$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/MathWriter$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/MathWriter$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/MathWriter$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/MathWriter$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/MathWriter$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/MathWriter$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/MathWriter$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/MathWriter$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/MathWriter$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/MathWriter$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/MathWriter$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/MathWriter$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/MathWriter$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/MathWriter$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/MathWriter$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/MathWriter$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/MathWriter$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/translation\/MathWriter.html", "kind" : "trait"}, {"name" : "provingground.translation.NestedDoc", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/translation\/NestedDoc.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/translation\/NestedDoc.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (NestedDoc[T]) ⇒ Boolean, msg: ⇒ Any): NestedDoc[T]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/NestedDoc.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (NestedDoc[T]) ⇒ Boolean): NestedDoc[T]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/NestedDoc.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): NestedDoc[T]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/NestedDoc.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): NestedDoc[T]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/NestedDoc.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (NestedDoc[T], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/translation\/NestedDoc.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (NestedDoc[T], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/translation\/NestedDoc.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "begin", "tail" : "(label: L): AppendOpenBlock[T]", "member" : "provingground.translation.NestedDoc.begin", "link" : "provingground\/translation\/NestedDoc.html#begin[L](label:L):provingground.translation.NestedDoc.AppendOpenBlock[T]", "kind" : "def"}, {"label" : "beginSimple", "tail" : "(): AppendOpenBlock[T]", "member" : "provingground.translation.NestedDoc.beginSimple", "link" : "provingground\/translation\/NestedDoc.html#beginSimple:provingground.translation.NestedDoc.AppendOpenBlock[T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/NestedDoc.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/NestedDoc.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/NestedDoc.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/NestedDoc.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/NestedDoc.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/NestedDoc.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/NestedDoc.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/NestedDoc.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/NestedDoc.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/NestedDoc.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/NestedDoc.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/NestedDoc.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/NestedDoc.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/NestedDoc.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/NestedDoc.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/NestedDoc.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/NestedDoc.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/NestedDoc.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/NestedDoc.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "contexts", "tail" : "(): Map[Scoped[T], Vector[Scoped[T]]]", "member" : "provingground.translation.NestedDoc.contexts", "link" : "provingground\/translation\/NestedDoc.html#contexts:Map[provingground.translation.Scoped[T],Vector[provingground.translation.Scoped[T]]]", "kind" : "abstract def"}, {"label" : "read", "tail" : "(): Vector[Scoped[T]]", "member" : "provingground.translation.NestedDoc.read", "link" : "provingground\/translation\/NestedDoc.html#read:Vector[provingground.translation.Scoped[T]]", "kind" : "abstract def"}, {"label" : "export", "tail" : "(): (Scoped[T]) ⇒ Scoped[T]", "member" : "provingground.translation.NestedDoc.export", "link" : "provingground\/translation\/NestedDoc.html#export:provingground.translation.Scoped[T]=>provingground.translation.Scoped[T]", "kind" : "abstract def"}, {"label" : "end", "tail" : "(label: L): NestedDoc[T]", "member" : "provingground.translation.NestedDoc.end", "link" : "provingground\/translation\/NestedDoc.html#end[L](label:L):provingground.translation.NestedDoc[T]", "kind" : "abstract def"}, {"label" : "endSimple", "tail" : "(): NestedDoc[T]", "member" : "provingground.translation.NestedDoc.endSimple", "link" : "provingground\/translation\/NestedDoc.html#endSimple:provingground.translation.NestedDoc[T]", "kind" : "abstract def"}, {"label" : "sameLabel", "tail" : "(label: X): Boolean", "member" : "provingground.translation.NestedDoc.sameLabel", "link" : "provingground\/translation\/NestedDoc.html#sameLabel[X](label:X):Boolean", "kind" : "abstract def"}, {"label" : "hasLabel", "tail" : "(): Boolean", "member" : "provingground.translation.NestedDoc.hasLabel", "link" : "provingground\/translation\/NestedDoc.html#hasLabel:Boolean", "kind" : "abstract def"}, {"label" : "append", "tail" : "(t: T): NestedDoc[T]", "member" : "provingground.translation.NestedDoc.append", "link" : "provingground\/translation\/NestedDoc.html#append(t:T):provingground.translation.NestedDoc[T]", "kind" : "abstract def"}], "shortDescription" : "", "object" : "provingground\/translation\/NestedDoc$.html", "members_object" : [{"label" : "AppendOpenBlock", "tail" : "", "member" : "provingground.translation.NestedDoc.AppendOpenBlock", "link" : "provingground\/translation\/NestedDoc$.html#AppendOpenBlock[T]extendsNestedDoc[T]withNestedDoc.RecBlockDoc[T]withProductwithSerializable", "kind" : "case class"}, {"label" : "AppendBlock", "tail" : "", "member" : "provingground.translation.NestedDoc.AppendBlock", "link" : "provingground\/translation\/NestedDoc$.html#AppendBlock[T]extendsNestedDoc.ClosedDoc[T]withNestedDoc.RecBlockDoc[T]withProductwithSerializable", "kind" : "case class"}, {"label" : "Append", "tail" : "", "member" : "provingground.translation.NestedDoc.Append", "link" : "provingground\/translation\/NestedDoc$.html#Append[T]extendsNestedDoc.ClosedDoc[T]withNestedDoc.RecDoc[T]withProductwithSerializable", "kind" : "case class"}, {"label" : "RecBlockDoc", "tail" : "", "member" : "provingground.translation.NestedDoc.RecBlockDoc", "link" : "provingground\/translation\/NestedDoc$.html#RecBlockDoc[T]extendsNestedDoc.RecDoc[T]", "kind" : "trait"}, {"label" : "RecDoc", "tail" : "", "member" : "provingground.translation.NestedDoc.RecDoc", "link" : "provingground\/translation\/NestedDoc$.html#RecDoc[T]extendsAnyRef", "kind" : "trait"}, {"label" : "SimpleEmpty", "tail" : "", "member" : "provingground.translation.NestedDoc.SimpleEmpty", "link" : "provingground\/translation\/NestedDoc$.html#SimpleEmpty[T]extendsNestedDoc.Empty[T]withProductwithSerializable", "kind" : "case class"}, {"label" : "LabelledEmpty", "tail" : "", "member" : "provingground.translation.NestedDoc.LabelledEmpty", "link" : "provingground\/translation\/NestedDoc$.html#LabelledEmpty[L,T]extendsNestedDoc.Empty[T]withProductwithSerializable", "kind" : "case class"}, {"label" : "Empty", "tail" : "", "member" : "provingground.translation.NestedDoc.Empty", "link" : "provingground\/translation\/NestedDoc$.html#Empty[T]extendsNestedDoc.ClosedDoc[T]", "kind" : "trait"}, {"label" : "ClosedDoc", "tail" : "", "member" : "provingground.translation.NestedDoc.ClosedDoc", "link" : "provingground\/translation\/NestedDoc$.html#ClosedDoc[T]extendsNestedDoc[T]", "kind" : "trait"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/NestedDoc$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/NestedDoc$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/NestedDoc$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/NestedDoc$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/NestedDoc$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/NestedDoc$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/NestedDoc$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/NestedDoc$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/NestedDoc$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/NestedDoc$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/NestedDoc$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/NestedDoc$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/NestedDoc$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/NestedDoc$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/NestedDoc$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/NestedDoc$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/NestedDoc$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/NestedDoc$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/NestedDoc$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/translation\/NestedDoc.html", "kind" : "trait"}, {"name" : "provingground.translation.NlpProse", "shortDescription" : "Stanford dependency trees and associated methods", "object" : "provingground\/translation\/NlpProse$.html", "members_object" : [{"label" : "Parataxis", "tail" : "", "member" : "provingground.translation.NlpProse.Parataxis", "link" : "provingground\/translation\/NlpProse$.html#Parataxis", "kind" : "object"}, {"label" : "Which", "tail" : "", "member" : "provingground.translation.NlpProse.Which", "link" : "provingground\/translation\/NlpProse$.html#Which", "kind" : "object"}, {"label" : "Cop", "tail" : "", "member" : "provingground.translation.NlpProse.Cop", "link" : "provingground\/translation\/NlpProse$.html#Cop", "kind" : "object"}, {"label" : "Ccomp", "tail" : "", "member" : "provingground.translation.NlpProse.Ccomp", "link" : "provingground\/translation\/NlpProse$.html#Ccomp", "kind" : "object"}, {"label" : "Rcmod", "tail" : "", "member" : "provingground.translation.NlpProse.Rcmod", "link" : "provingground\/translation\/NlpProse$.html#Rcmod", "kind" : "object"}, {"label" : "Nsubj", "tail" : "", "member" : "provingground.translation.NlpProse.Nsubj", "link" : "provingground\/translation\/NlpProse$.html#Nsubj", "kind" : "object"}, {"label" : "CopRel", "tail" : "", "member" : "provingground.translation.NlpProse.CopRel", "link" : "provingground\/translation\/NlpProse$.html#CopRel", "kind" : "object"}, {"label" : "Lt", "tail" : "", "member" : "provingground.translation.NlpProse.Lt", "link" : "provingground\/translation\/NlpProse$.html#Lt", "kind" : "object"}, {"label" : "Gt", "tail" : "", "member" : "provingground.translation.NlpProse.Gt", "link" : "provingground\/translation\/NlpProse$.html#Gt", "kind" : "object"}, {"label" : "QuantMod", "tail" : "", "member" : "provingground.translation.NlpProse.QuantMod", "link" : "provingground\/translation\/NlpProse$.html#QuantMod", "kind" : "object"}, {"label" : "IfMark", "tail" : "", "member" : "provingground.translation.NlpProse.IfMark", "link" : "provingground\/translation\/NlpProse$.html#IfMark", "kind" : "object"}, {"label" : "Advcl", "tail" : "", "member" : "provingground.translation.NlpProse.Advcl", "link" : "provingground\/translation\/NlpProse$.html#Advcl", "kind" : "object"}, {"label" : "Argument", "tail" : "", "member" : "provingground.translation.NlpProse.Argument", "link" : "provingground\/translation\/NlpProse$.html#Argument", "kind" : "object"}, {"label" : "Modifier", "tail" : "", "member" : "provingground.translation.NlpProse.Modifier", "link" : "provingground\/translation\/NlpProse$.html#Modifier", "kind" : "object"}, {"label" : "Prep", "tail" : "", "member" : "provingground.translation.NlpProse.Prep", "link" : "provingground\/translation\/NlpProse$.html#Prep", "kind" : "object"}, {"label" : "Conj", "tail" : "", "member" : "provingground.translation.NlpProse.Conj", "link" : "provingground\/translation\/NlpProse$.html#Conj", "kind" : "object"}, {"label" : "TypeListMatch", "tail" : "", "member" : "provingground.translation.NlpProse.TypeListMatch", "link" : "provingground\/translation\/NlpProse$.html#TypeListMatchextendsAnyRef", "kind" : "class"}, {"label" : "TypeWordMatch", "tail" : "", "member" : "provingground.translation.NlpProse.TypeWordMatch", "link" : "provingground\/translation\/NlpProse$.html#TypeWordMatchextendsAnyRef", "kind" : "class"}, {"label" : "TypeMatch", "tail" : "", "member" : "provingground.translation.NlpProse.TypeMatch", "link" : "provingground\/translation\/NlpProse$.html#TypeMatchextendsAnyRef", "kind" : "class"}, {"label" : "ProseExtractor", "tail" : "", "member" : "provingground.translation.NlpProse.ProseExtractor", "link" : "provingground\/translation\/NlpProse$.html#ProseExtractor[A]extendsAnyRef", "kind" : "class"}, {"label" : "mweFold", "tail" : "(t: ProseTree): ProseTree", "member" : "provingground.translation.NlpProse.mweFold", "link" : "provingground\/translation\/NlpProse$.html#mweFold(t:provingground.translation.NlpProse.ProseTree):provingground.translation.NlpProse.ProseTree", "kind" : "def"}, {"label" : "mweMerge", "tail" : "(t: ProseTree, d: DepRel): DepRel", "member" : "provingground.translation.NlpProse.mweMerge", "link" : "provingground\/translation\/NlpProse$.html#mweMerge(t:provingground.translation.NlpProse.ProseTree,d:provingground.translation.NlpProse.DepRel):provingground.translation.NlpProse.DepRel", "kind" : "def"}, {"label" : "SplitTree", "tail" : "", "member" : "provingground.translation.NlpProse.SplitTree", "link" : "provingground\/translation\/NlpProse$.html#SplitTreeextendsProductwithSerializable", "kind" : "case class"}, {"label" : "mweTail", "tail" : "(t: ProseTree, node: Token): Token", "member" : "provingground.translation.NlpProse.mweTail", "link" : "provingground\/translation\/NlpProse$.html#mweTail(t:provingground.translation.NlpProse.ProseTree,node:provingground.translation.NlpProse.Token):provingground.translation.NlpProse.Token", "kind" : "def"}, {"label" : "ProseTree", "tail" : "", "member" : "provingground.translation.NlpProse.ProseTree", "link" : "provingground\/translation\/NlpProse$.html#ProseTreeextendsNlpProse.ParseDatawithProductwithSerializable", "kind" : "case class"}, {"label" : "findroot", "tail" : "(t: List[DepRel]): Token", "member" : "provingground.translation.NlpProse.findroot", "link" : "provingground\/translation\/NlpProse$.html#findroot(t:List[provingground.translation.NlpProse.DepRel]):provingground.translation.NlpProse.Token", "kind" : "def"}, {"label" : "DepRel", "tail" : "", "member" : "provingground.translation.NlpProse.DepRel", "link" : "provingground\/translation\/NlpProse$.html#DepRelextendsProductwithSerializable", "kind" : "case class"}, {"label" : "Token", "tail" : "", "member" : "provingground.translation.NlpProse.Token", "link" : "provingground\/translation\/NlpProse$.html#TokenextendsProductwithSerializable", "kind" : "case class"}, {"label" : "ParseData", "tail" : "", "member" : "provingground.translation.NlpProse.ParseData", "link" : "provingground\/translation\/NlpProse$.html#ParseDataextendsAnyRef", "kind" : "trait"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/NlpProse$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/NlpProse$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/NlpProse$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/NlpProse$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/NlpProse$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/NlpProse$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/NlpProse$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/NlpProse$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/NlpProse$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/NlpProse$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/NlpProse$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/NlpProse$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/NlpProse$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/NlpProse$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/NlpProse$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/NlpProse$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/NlpProse$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/NlpProse$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/NlpProse$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.translation.OptNat", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/translation\/OptNat.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/translation\/OptNat.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (OptNat[F]) ⇒ Boolean, msg: ⇒ Any): OptNat[F]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/OptNat.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (OptNat[F]) ⇒ Boolean): OptNat[F]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/OptNat.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): OptNat[F]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/OptNat.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): OptNat[F]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/OptNat.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (OptNat[F], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/translation\/OptNat.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (OptNat[F], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/translation\/OptNat.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/OptNat.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/OptNat.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/OptNat.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/OptNat.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/OptNat.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/OptNat.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/OptNat.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/OptNat.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/OptNat.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/OptNat.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/OptNat.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/OptNat.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/OptNat.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/OptNat.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/OptNat.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/OptNat.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/OptNat.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/OptNat.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/OptNat.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "optF", "tail" : "(fo: F[Option[A]]): Option[F[A]]", "member" : "provingground.translation.OptNat.optF", "link" : "provingground\/translation\/OptNat.html#optF[A](fo:F[Option[A]]):Option[F[A]]", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "provingground\/translation\/OptNat.html", "kind" : "trait"}, {"name" : "provingground.translation.OptRestriction", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/translation\/OptRestriction.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/translation\/OptRestriction.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (OptRestriction[X, Y]) ⇒ Boolean, msg: ⇒ Any): OptRestriction[X, Y]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/OptRestriction.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (OptRestriction[X, Y]) ⇒ Boolean): OptRestriction[X, Y]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/OptRestriction.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): OptRestriction[X, Y]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/OptRestriction.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): OptRestriction[X, Y]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/OptRestriction.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (OptRestriction[X, Y], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/translation\/OptRestriction.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (OptRestriction[X, Y], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/translation\/OptRestriction.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/OptRestriction.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/OptRestriction.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/OptRestriction.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/OptRestriction.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/OptRestriction.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/OptRestriction.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/OptRestriction.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/OptRestriction.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/OptRestriction.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/OptRestriction.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/OptRestriction.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/OptRestriction.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/OptRestriction.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/OptRestriction.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/OptRestriction.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/OptRestriction.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/OptRestriction.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/OptRestriction.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/OptRestriction.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "restrict", "tail" : "(): (Option[Y[I]]) ⇒ Option[X[I]]", "member" : "provingground.translation.ConeRestriction.restrict", "link" : "provingground\/translation\/OptRestriction.html#restrict[I]:G[Y[I]]=>G[X[I]]", "kind" : "abstract def"}], "shortDescription" : "restriction on optional functor", "object" : "provingground\/translation\/OptRestriction$.html", "members_object" : [{"label" : "pairRestriction", "tail" : "(rest1: OptRestriction[X1, Y1], rest2: OptRestriction[X2, Y2]): OptRestriction[[A](X1[A], X2[A]), [A](Y1[A], Y2[A])]", "member" : "provingground.translation.OptRestriction.pairRestriction", "link" : "provingground\/translation\/OptRestriction$.html#pairRestriction[X1[_],Y1[_],X2[_],Y2[_],G[_]](implicitrest1:provingground.translation.OptRestriction[X1,Y1],implicitrest2:provingground.translation.OptRestriction[X2,Y2]):provingground.translation.OptRestriction[[A](X1[A],X2[A]),[A](Y1[A],Y2[A])]", "kind" : "implicit def"}, {"label" : "subtypRestriction", "tail" : "(): OptRestriction[X, Y]", "member" : "provingground.translation.OptRestriction.subtypRestriction", "link" : "provingground\/translation\/OptRestriction$.html#subtypRestriction[X[_],Y[_]>:X[_]]:provingground.translation.OptRestriction[X,Y]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/OptRestriction$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/OptRestriction$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/OptRestriction$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/OptRestriction$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/OptRestriction$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/OptRestriction$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/OptRestriction$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/OptRestriction$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/OptRestriction$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/OptRestriction$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/OptRestriction$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/OptRestriction$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/OptRestriction$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/OptRestriction$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/OptRestriction$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/OptRestriction$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/OptRestriction$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/OptRestriction$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/OptRestriction$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/translation\/OptRestriction.html", "kind" : "trait"}, {"name" : "provingground.translation.PrintFormat", "shortDescription" : "", "object" : "provingground\/translation\/PrintFormat$.html", "members_object" : [{"label" : "univ", "tail" : "(n: Int): String", "member" : "provingground.translation.PrintFormat.univ", "link" : "provingground\/translation\/PrintFormat$.html#univ(n:Int):String", "kind" : "def"}, {"label" : "symbolic", "tail" : "(name: AnySym, typ: Typ[Term]): String", "member" : "provingground.translation.PrintFormat.symbolic", "link" : "provingground\/translation\/PrintFormat$.html#symbolic(name:provingground.HoTT.AnySym,typ:provingground.HoTT.Typ[provingground.HoTT.Term]):String", "kind" : "def"}, {"label" : "symbtyp", "tail" : "(typ: SymbTyp): String", "member" : "provingground.translation.PrintFormat.symbtyp", "link" : "provingground\/translation\/PrintFormat$.html#symbtyp(typ:provingground.HoTT.SymbTyp):String", "kind" : "def"}, {"label" : "symbobj", "tail" : "(term: SymbObj[Term]): String", "member" : "provingground.translation.PrintFormat.symbobj", "link" : "provingground\/translation\/PrintFormat$.html#symbobj(term:provingground.HoTT.SymbObj[provingground.HoTT.Term]):String", "kind" : "def"}, {"label" : "pair", "tail" : "(first: String, second: String): String", "member" : "provingground.translation.PrintFormat.pair", "link" : "provingground\/translation\/PrintFormat$.html#pair(first:String,second:String):String", "kind" : "def"}, {"label" : "plus", "tail" : "(first: String, scnd: String): String", "member" : "provingground.translation.PrintFormat.plus", "link" : "provingground\/translation\/PrintFormat$.html#plus(first:String,scnd:String):String", "kind" : "def"}, {"label" : "sigma", "tail" : "(fibre: String): String", "member" : "provingground.translation.PrintFormat.sigma", "link" : "provingground\/translation\/PrintFormat$.html#sigma(fibre:String):String", "kind" : "def"}, {"label" : "pi", "tail" : "(fibre: String): String", "member" : "provingground.translation.PrintFormat.pi", "link" : "provingground\/translation\/PrintFormat$.html#pi(fibre:String):String", "kind" : "def"}, {"label" : "equality", "tail" : "(dom: String, lhs: String, rhs: String): String", "member" : "provingground.translation.PrintFormat.equality", "link" : "provingground\/translation\/PrintFormat$.html#equality(dom:String,lhs:String,rhs:String):String", "kind" : "def"}, {"label" : "lambda", "tail" : "(variable: String, typ: String, value: String): String", "member" : "provingground.translation.PrintFormat.lambda", "link" : "provingground\/translation\/PrintFormat$.html#lambda(variable:String,typ:String,value:String):String", "kind" : "def"}, {"label" : "arrow", "tail" : "(dom: String, codom: String): String", "member" : "provingground.translation.PrintFormat.arrow", "link" : "provingground\/translation\/PrintFormat$.html#arrow(dom:String,codom:String):String", "kind" : "def"}, {"label" : "appln", "tail" : "(func: String, arg: String): String", "member" : "provingground.translation.PrintFormat.appln", "link" : "provingground\/translation\/PrintFormat$.html#appln(func:String,arg:String):String", "kind" : "def"}, {"label" : "fromString", "tail" : "(str: String)(typ: Typ[Term]): String", "member" : "provingground.translation.PrintFormat.fromString", "link" : "provingground\/translation\/PrintFormat$.html#fromString(str:String)(implicittyp:provingground.HoTT.Typ[provingground.HoTT.Term]):String", "kind" : "def"}, {"label" : "specialTerms", "tail" : ": PartialFunction[Term, String]", "member" : "provingground.translation.PrintFormat.specialTerms", "link" : "provingground\/translation\/PrintFormat$.html#specialTerms:PartialFunction[provingground.HoTT.Term,String]", "kind" : "val"}, {"label" : "syms", "tail" : ": UnicodeSyms.type", "member" : "provingground.translation.PrintFormat.syms", "link" : "provingground\/translation\/PrintFormat$.html#syms:provingground.HoTT.UnicodeSyms.type", "kind" : "val"}, {"label" : "apply", "tail" : "(term: Term): String", "member" : "provingground.translation.TermRec.apply", "link" : "provingground\/translation\/PrintFormat$.html#apply(term:provingground.HoTT.Term):U", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/PrintFormat$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/PrintFormat$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/PrintFormat$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/PrintFormat$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/PrintFormat$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/PrintFormat$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/PrintFormat$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/PrintFormat$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/PrintFormat$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/PrintFormat$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/PrintFormat$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/PrintFormat$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/PrintFormat$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/PrintFormat$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/PrintFormat$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/PrintFormat$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/PrintFormat$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/PrintFormat$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/PrintFormat$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.translation.QuasiInclHList", "shortDescription" : "", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/translation\/QuasiInclHList.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/translation\/QuasiInclHList.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (QuasiInclHList[X, Y, F]) ⇒ Boolean, msg: ⇒ Any): QuasiInclHList[X, Y, F]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/QuasiInclHList.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (QuasiInclHList[X, Y, F]) ⇒ Boolean): QuasiInclHList[X, Y, F]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/QuasiInclHList.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): QuasiInclHList[X, Y, F]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/QuasiInclHList.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): QuasiInclHList[X, Y, F]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/QuasiInclHList.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (QuasiInclHList[X, Y, F], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/translation\/QuasiInclHList.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (QuasiInclHList[X, Y, F], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/translation\/QuasiInclHList.html#->[B](y:B):(A,B)", "kind" : "def"}, {"member" : "provingground.translation.QuasiInclHList#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/QuasiInclHList.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/QuasiInclHList.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/QuasiInclHList.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/QuasiInclHList.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/QuasiInclHList.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/QuasiInclHList.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/QuasiInclHList.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/QuasiInclHList.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/QuasiInclHList.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/QuasiInclHList.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/QuasiInclHList.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/QuasiInclHList.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/QuasiInclHList.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/QuasiInclHList.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/QuasiInclHList.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/QuasiInclHList.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/QuasiInclHList.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/QuasiInclHList.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/QuasiInclHList.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "proj", "tail" : "(fa: F[X]): Option[Y]", "member" : "provingground.translation.QuasiInclHList.proj", "link" : "provingground\/translation\/QuasiInclHList.html#proj(fa:F[X]):Option[Y]", "kind" : "abstract def"}, {"label" : "incl", "tail" : "(y: Y): F[X]", "member" : "provingground.translation.QuasiInclHList.incl", "link" : "provingground\/translation\/QuasiInclHList.html#incl(y:Y):F[X]", "kind" : "abstract def"}], "class" : "provingground\/translation\/QuasiInclHList.html", "kind" : "class"}, {"name" : "provingground.translation.QuasiInclusion", "shortDescription" : "", "object" : "provingground\/translation\/QuasiInclusion$.html", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/translation\/QuasiInclusion.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/translation\/QuasiInclusion.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (QuasiInclusion[X, Y, F]) ⇒ Boolean, msg: ⇒ Any): QuasiInclusion[X, Y, F]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/QuasiInclusion.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (QuasiInclusion[X, Y, F]) ⇒ Boolean): QuasiInclusion[X, Y, F]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/QuasiInclusion.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): QuasiInclusion[X, Y, F]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/QuasiInclusion.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): QuasiInclusion[X, Y, F]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/QuasiInclusion.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (QuasiInclusion[X, Y, F], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/translation\/QuasiInclusion.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (QuasiInclusion[X, Y, F], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/translation\/QuasiInclusion.html#->[B](y:B):(A,B)", "kind" : "def"}, {"member" : "provingground.translation.QuasiInclusion#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/QuasiInclusion.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/QuasiInclusion.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/QuasiInclusion.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/QuasiInclusion.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/QuasiInclusion.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/QuasiInclusion.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/QuasiInclusion.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/QuasiInclusion.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/QuasiInclusion.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/QuasiInclusion.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/QuasiInclusion.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/QuasiInclusion.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/QuasiInclusion.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/QuasiInclusion.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/QuasiInclusion.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/QuasiInclusion.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/QuasiInclusion.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/QuasiInclusion.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/QuasiInclusion.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "proj", "tail" : "(fa: F[X]): Option[Y]", "member" : "provingground.translation.QuasiInclusion.proj", "link" : "provingground\/translation\/QuasiInclusion.html#proj(fa:F[X]):Option[Y]", "kind" : "abstract def"}, {"label" : "incl", "tail" : "(y: Y): F[X]", "member" : "provingground.translation.QuasiInclusion.incl", "link" : "provingground\/translation\/QuasiInclusion.html#incl(y:Y):F[X]", "kind" : "abstract def"}], "members_object" : [{"label" : "travQI", "tail" : "(arg0: Traverse[F], arg1: Traverse[G], qi: QuasiInclusion[X, Y, F]): QuasiInclusion[X, G[Y], [A]G[F[A]]]", "member" : "provingground.translation.QuasiInclusion.travQI", "link" : "provingground\/translation\/QuasiInclusion$.html#travQI[X,Y,F[_],G[_]](implicitevidence$7:cats.Traverse[F],implicitevidence$8:cats.Traverse[G],implicitqi:provingground.translation.QuasiInclusion[X,Y,F]):provingground.translation.QuasiInclusion[X,G[Y],[A]G[F[A]]]", "kind" : "implicit def"}, {"label" : "genericIncl", "tail" : "(arg0: Traverse[F1], gen: Lazy[Aux[Y, R]], qi: QuasiInclHList[X, R, F1]): QuasiInclHList[X, Y, F1]", "member" : "provingground.translation.QuasiInclusion.genericIncl", "link" : "provingground\/translation\/QuasiInclusion$.html#genericIncl[X,Y,R,F1[_]<:shapeless.HList](implicitevidence$6:cats.Traverse[F1],implicitgen:shapeless.Lazy[shapeless.Generic.Aux[Y,R]],implicitqi:provingground.translation.QuasiInclHList[X,R,F1]):provingground.translation.QuasiInclHList[X,Y,F1]", "kind" : "implicit def"}, {"label" : "hConsIncl", "tail" : "(arg0: Traverse[F1], arg1: Traverse[F2], qi1: Lazy[QuasiInclusion[X, Y1, F1]], qi2: QuasiInclHList[X, Y2, F2]): QuasiInclHList[X, ::[Y1, Y2], [A]::[F1[A], F2[A]]]", "member" : "provingground.translation.QuasiInclusion.hConsIncl", "link" : "provingground\/translation\/QuasiInclusion$.html#hConsIncl[X,Y1,Y2<:shapeless.HList,F1[_],F2[_]<:shapeless.HList](implicitevidence$4:cats.Traverse[F1],implicitevidence$5:cats.Traverse[F2],implicitqi1:shapeless.Lazy[provingground.translation.QuasiInclusion[X,Y1,F1]],implicitqi2:provingground.translation.QuasiInclHList[X,Y2,F2]):provingground.translation.QuasiInclHList[X,Y1::Y2,[A]F1[A]::F2[A]]", "kind" : "implicit def"}, {"label" : "hnilIncl", "tail" : "(): QuasiInclHList[X, HNil, HN]", "member" : "provingground.translation.QuasiInclusion.hnilIncl", "link" : "provingground\/translation\/QuasiInclusion$.html#hnilIncl[X]:provingground.translation.QuasiInclHList[X,shapeless.HNil,provingground.translation.Functors.HN]", "kind" : "implicit def"}, {"label" : "numQI", "tail" : "(arg0: Numeric[NT]): QuasiInclusion[X, NT, [A]NT]", "member" : "provingground.translation.QuasiInclusion.numQI", "link" : "provingground\/translation\/QuasiInclusion$.html#numQI[X,NT](implicitevidence$3:Numeric[NT]):provingground.translation.QuasiInclusion[X,NT,[A]NT]", "kind" : "implicit def"}, {"label" : "stringQI", "tail" : "(): QuasiInclusion[X, String, [A]String]", "member" : "provingground.translation.QuasiInclusion.stringQI", "link" : "provingground\/translation\/QuasiInclusion$.html#stringQI[X]:provingground.translation.QuasiInclusion[X,String,[A]String]", "kind" : "implicit def"}, {"label" : "constQI", "tail" : "(): QuasiInclusion[X, Cnst, [A]Cnst]", "member" : "provingground.translation.QuasiInclusion.constQI", "link" : "provingground\/translation\/QuasiInclusion$.html#constQI[X,Cnst]:provingground.translation.QuasiInclusion[X,Cnst,[A]Cnst]", "kind" : "def"}, {"label" : "componentIncl", "tail" : "(qp: QuasiProjection[X, Y]): QuasiInclusion[X, Y, Id]", "member" : "provingground.translation.QuasiInclusion.componentIncl", "link" : "provingground\/translation\/QuasiInclusion$.html#componentIncl[X,Y](implicitqp:provingground.translation.QuasiProjection[X,Y]):provingground.translation.QuasiInclusion[X,Y,cats.Id]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/QuasiInclusion$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/QuasiInclusion$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/QuasiInclusion$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/QuasiInclusion$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/QuasiInclusion$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/QuasiInclusion$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/QuasiInclusion$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/QuasiInclusion$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/QuasiInclusion$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/QuasiInclusion$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/QuasiInclusion$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/QuasiInclusion$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/QuasiInclusion$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/QuasiInclusion$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/QuasiInclusion$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/QuasiInclusion$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/QuasiInclusion$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/QuasiInclusion$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/QuasiInclusion$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/translation\/QuasiInclusion.html", "kind" : "class"}, {"name" : "provingground.translation.QuasiProjection", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/translation\/QuasiProjection.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/translation\/QuasiProjection.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (QuasiProjection[X, Y]) ⇒ Boolean, msg: ⇒ Any): QuasiProjection[X, Y]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/QuasiProjection.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (QuasiProjection[X, Y]) ⇒ Boolean): QuasiProjection[X, Y]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/QuasiProjection.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): QuasiProjection[X, Y]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/QuasiProjection.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): QuasiProjection[X, Y]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/QuasiProjection.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (QuasiProjection[X, Y], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/translation\/QuasiProjection.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (QuasiProjection[X, Y], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/translation\/QuasiProjection.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/QuasiProjection.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/QuasiProjection.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/QuasiProjection.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/QuasiProjection.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/QuasiProjection.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/QuasiProjection.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/QuasiProjection.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/QuasiProjection.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/QuasiProjection.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/QuasiProjection.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/QuasiProjection.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/QuasiProjection.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/QuasiProjection.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/QuasiProjection.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/QuasiProjection.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/QuasiProjection.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/QuasiProjection.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/QuasiProjection.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/QuasiProjection.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "incl", "tail" : "(y: Y): X", "member" : "provingground.translation.QuasiProjection.incl", "link" : "provingground\/translation\/QuasiProjection.html#incl(y:Y):X", "kind" : "abstract def"}, {"label" : "proj", "tail" : "(x: X): Option[Y]", "member" : "provingground.translation.QuasiProjection.proj", "link" : "provingground\/translation\/QuasiProjection.html#proj(x:X):Option[Y]", "kind" : "abstract def"}], "shortDescription" : "", "object" : "provingground\/translation\/QuasiProjection$.html", "members_object" : [{"label" : "genericProjection", "tail" : "(gen: Aux[X, R], qp: QuasiProjection[R, Y]): QuasiProjection[X, Y]", "member" : "provingground.translation.QuasiProjection.genericProjection", "link" : "provingground\/translation\/QuasiProjection$.html#genericProjection[X,Y,R](implicitgen:shapeless.Generic.Aux[X,R],implicitqp:provingground.translation.QuasiProjection[R,Y]):provingground.translation.QuasiProjection[X,Y]", "kind" : "implicit def"}, {"label" : "rightProjection", "tail" : "(qp: QuasiProjection[X2, Y]): QuasiProjection[:+:[X1, X2], Y]", "member" : "provingground.translation.QuasiProjection.rightProjection", "link" : "provingground\/translation\/QuasiProjection$.html#rightProjection[X1,X2<:shapeless.Coproduct,Y](implicitqp:provingground.translation.QuasiProjection[X2,Y]):provingground.translation.QuasiProjection[X1:+:X2,Y]", "kind" : "implicit def"}, {"label" : "leftProjection", "tail" : "(qp: QuasiProjection[X1, Y]): QuasiProjection[:+:[X1, X2], Y]", "member" : "provingground.translation.QuasiProjection.leftProjection", "link" : "provingground\/translation\/QuasiProjection$.html#leftProjection[X1,X2<:shapeless.Coproduct,Y](implicitqp:provingground.translation.QuasiProjection[X1,Y]):provingground.translation.QuasiProjection[X1:+:X2,Y]", "kind" : "implicit def"}, {"label" : "idProj", "tail" : "(): QuasiProjection[X, X]", "member" : "provingground.translation.QuasiProjection.idProj", "link" : "provingground\/translation\/QuasiProjection$.html#idProj[X]:provingground.translation.QuasiProjection[X,X]", "kind" : "implicit def"}, {"label" : "apply", "tail" : "(p: (X) ⇒ Option[Y], i: (Y) ⇒ X): QuasiProjection[X, Y]", "member" : "provingground.translation.QuasiProjection.apply", "link" : "provingground\/translation\/QuasiProjection$.html#apply[X,Y](p:X=>Option[Y],i:Y=>X):provingground.translation.QuasiProjection[X,Y]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/QuasiProjection$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/QuasiProjection$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/QuasiProjection$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/QuasiProjection$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/QuasiProjection$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/QuasiProjection$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/QuasiProjection$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/QuasiProjection$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/QuasiProjection$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/QuasiProjection$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/QuasiProjection$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/QuasiProjection$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/QuasiProjection$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/QuasiProjection$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/QuasiProjection$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/QuasiProjection$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/QuasiProjection$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/QuasiProjection$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/QuasiProjection$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/translation\/QuasiProjection.html", "kind" : "trait"}, {"name" : "provingground.translation.RefineTerms", "shortDescription" : "", "object" : "provingground\/translation\/RefineTerms$.html", "members_object" : [{"label" : "refineTyp", "tail" : "(typ: Typ[Term]): Typ[Term]", "member" : "provingground.translation.RefineTerms.refineTyp", "link" : "provingground\/translation\/RefineTerms$.html#refineTyp(typ:provingground.HoTT.Typ[provingground.HoTT.Term]):provingground.HoTT.Typ[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "refine", "tail" : "(term: Term): Term", "member" : "provingground.translation.RefineTerms.refine", "link" : "provingground\/translation\/RefineTerms$.html#refine(term:provingground.HoTT.Term):provingground.HoTT.Term", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/RefineTerms$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/RefineTerms$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/RefineTerms$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/RefineTerms$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/RefineTerms$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/RefineTerms$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/RefineTerms$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/RefineTerms$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/RefineTerms$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/RefineTerms$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/RefineTerms$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/RefineTerms$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/RefineTerms$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/RefineTerms$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/RefineTerms$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/RefineTerms$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/RefineTerms$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/RefineTerms$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/RefineTerms$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.translation.Scoped", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/translation\/Scoped.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/translation\/Scoped.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Scoped[S]) ⇒ Boolean, msg: ⇒ Any): Scoped[S]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/Scoped.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Scoped[S]) ⇒ Boolean): Scoped[S]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/Scoped.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Scoped[S]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/Scoped.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Scoped[S]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/Scoped.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Scoped[S], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/translation\/Scoped.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Scoped[S], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/translation\/Scoped.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "::", "tail" : "(label: L): Cons[L, S]", "member" : "provingground.translation.Scoped.::", "link" : "provingground\/translation\/Scoped.html#::[L](label:L):provingground.translation.Scoped.Cons[L,S]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/Scoped.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/Scoped.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/Scoped.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/Scoped.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/Scoped.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/Scoped.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/Scoped.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Scoped.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Scoped.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Scoped.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/Scoped.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/Scoped.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/Scoped.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/Scoped.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/Scoped.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/Scoped.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/Scoped.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/Scoped.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/Scoped.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "object" : "provingground\/translation\/Scoped$.html", "members_object" : [{"label" : "Cons", "tail" : "", "member" : "provingground.translation.Scoped.Cons", "link" : "provingground\/translation\/Scoped$.html#Cons[L,S]extendsScoped[S]withProductwithSerializable", "kind" : "case class"}, {"label" : "Outer", "tail" : "", "member" : "provingground.translation.Scoped.Outer", "link" : "provingground\/translation\/Scoped$.html#Outer[S]extendsScoped[S]withProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/Scoped$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/Scoped$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/Scoped$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/Scoped$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/Scoped$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/Scoped$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/Scoped$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Scoped$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Scoped$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Scoped$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/Scoped$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/Scoped$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/Scoped$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/Scoped$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/Scoped$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/Scoped$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/Scoped$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/Scoped$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/Scoped$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/translation\/Scoped.html", "kind" : "trait"}, {"name" : "provingground.translation.ShapeTree", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/translation\/ShapeTree.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/translation\/ShapeTree.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ShapeTree) ⇒ Boolean, msg: ⇒ Any): ShapeTree", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/ShapeTree.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ShapeTree) ⇒ Boolean): ShapeTree", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/ShapeTree.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): ShapeTree", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/ShapeTree.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ShapeTree", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/ShapeTree.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ShapeTree, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/translation\/ShapeTree.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ShapeTree, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/translation\/ShapeTree.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "subTrees", "tail" : ": Set[ShapeTree]", "member" : "provingground.translation.ShapeTree.subTrees", "link" : "provingground\/translation\/ShapeTree.html#subTrees:scala.collection.immutable.Set[provingground.translation.ShapeTree]", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/ShapeTree.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/ShapeTree.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/ShapeTree.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/ShapeTree.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/ShapeTree.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/ShapeTree.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/ShapeTree.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/ShapeTree.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/ShapeTree.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/ShapeTree.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/ShapeTree.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/ShapeTree.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/ShapeTree.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/ShapeTree.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/ShapeTree.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/ShapeTree.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/ShapeTree.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/ShapeTree.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/ShapeTree.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "recSubTrees", "tail" : "(): Set[ShapeTree]", "member" : "provingground.translation.ShapeTree.recSubTrees", "link" : "provingground\/translation\/ShapeTree.html#recSubTrees:Set[provingground.translation.ShapeTree]", "kind" : "abstract def"}], "shortDescription" : "", "object" : "provingground\/translation\/ShapeTree$.html", "members_object" : [{"label" : "PlusNode", "tail" : "", "member" : "provingground.translation.ShapeTree.PlusNode", "link" : "provingground\/translation\/ShapeTree$.html#PlusNodeextendsShapeTreewithProductwithSerializable", "kind" : "case class"}, {"label" : "PairNode", "tail" : "", "member" : "provingground.translation.ShapeTree.PairNode", "link" : "provingground\/translation\/ShapeTree$.html#PairNodeextendsShapeTreewithProductwithSerializable", "kind" : "case class"}, {"label" : "EqualityNode", "tail" : "", "member" : "provingground.translation.ShapeTree.EqualityNode", "link" : "provingground\/translation\/ShapeTree$.html#EqualityNodeextendsShapeTreewithProductwithSerializable", "kind" : "case class"}, {"label" : "LambdaNode", "tail" : "", "member" : "provingground.translation.ShapeTree.LambdaNode", "link" : "provingground\/translation\/ShapeTree$.html#LambdaNodeextendsShapeTreewithProductwithSerializable", "kind" : "case class"}, {"label" : "SigmaNode", "tail" : "", "member" : "provingground.translation.ShapeTree.SigmaNode", "link" : "provingground\/translation\/ShapeTree$.html#SigmaNodeextendsShapeTreewithProductwithSerializable", "kind" : "case class"}, {"label" : "PiNode", "tail" : "", "member" : "provingground.translation.ShapeTree.PiNode", "link" : "provingground\/translation\/ShapeTree$.html#PiNodeextendsShapeTreewithProductwithSerializable", "kind" : "case class"}, {"label" : "ArrowNode", "tail" : "", "member" : "provingground.translation.ShapeTree.ArrowNode", "link" : "provingground\/translation\/ShapeTree$.html#ArrowNodeextendsShapeTreewithProductwithSerializable", "kind" : "case class"}, {"label" : "ApplnNode", "tail" : "", "member" : "provingground.translation.ShapeTree.ApplnNode", "link" : "provingground\/translation\/ShapeTree$.html#ApplnNodeextendsShapeTreewithProductwithSerializable", "kind" : "case class"}, {"label" : "UnivLeaf", "tail" : "", "member" : "provingground.translation.ShapeTree.UnivLeaf", "link" : "provingground\/translation\/ShapeTree$.html#UnivLeaf", "kind" : "object"}, {"label" : "TypLeaf", "tail" : "", "member" : "provingground.translation.ShapeTree.TypLeaf", "link" : "provingground\/translation\/ShapeTree$.html#TypLeaf", "kind" : "object"}, {"label" : "Leaf", "tail" : "", "member" : "provingground.translation.ShapeTree.Leaf", "link" : "provingground\/translation\/ShapeTree$.html#Leaf", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/ShapeTree$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/ShapeTree$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/ShapeTree$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/ShapeTree$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/ShapeTree$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/ShapeTree$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/ShapeTree$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/ShapeTree$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/ShapeTree$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/ShapeTree$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/ShapeTree$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/ShapeTree$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/ShapeTree$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/ShapeTree$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/ShapeTree$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/ShapeTree$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/ShapeTree$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/ShapeTree$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/ShapeTree$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/translation\/ShapeTree.html", "kind" : "trait"}, {"name" : "provingground.translation.ShapeTreeFormat", "shortDescription" : "", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/translation\/ShapeTreeFormat.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/translation\/ShapeTreeFormat.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ShapeTreeFormat) ⇒ Boolean, msg: ⇒ Any): ShapeTreeFormat", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/ShapeTreeFormat.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ShapeTreeFormat) ⇒ Boolean): ShapeTreeFormat", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/ShapeTreeFormat.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): ShapeTreeFormat", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/ShapeTreeFormat.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ShapeTreeFormat", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/ShapeTreeFormat.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ShapeTreeFormat, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/translation\/ShapeTreeFormat.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ShapeTreeFormat, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/translation\/ShapeTreeFormat.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "univ", "tail" : "(n: Int): ShapeTree", "member" : "provingground.translation.ShapeTreeFormat.univ", "link" : "provingground\/translation\/ShapeTreeFormat.html#univ(n:Int):provingground.translation.ShapeTree", "kind" : "def"}, {"label" : "symbolic", "tail" : "(name: AnySym, typ: Typ[Term]): ShapeTree", "member" : "provingground.translation.ShapeTreeFormat.symbolic", "link" : "provingground\/translation\/ShapeTreeFormat.html#symbolic(name:provingground.HoTT.AnySym,typ:provingground.HoTT.Typ[provingground.HoTT.Term]):provingground.translation.ShapeTree", "kind" : "def"}, {"label" : "symbtyp", "tail" : "(term: SymbTyp): ShapeTree", "member" : "provingground.translation.ShapeTreeFormat.symbtyp", "link" : "provingground\/translation\/ShapeTreeFormat.html#symbtyp(term:provingground.HoTT.SymbTyp):provingground.translation.ShapeTree", "kind" : "def"}, {"label" : "symbobj", "tail" : "(term: SymbObj[Term]): ShapeTree", "member" : "provingground.translation.ShapeTreeFormat.symbobj", "link" : "provingground\/translation\/ShapeTreeFormat.html#symbobj(term:provingground.HoTT.SymbObj[provingground.HoTT.Term]):provingground.translation.ShapeTree", "kind" : "def"}, {"label" : "pair", "tail" : "(first: ShapeTree, second: ShapeTree): ShapeTree", "member" : "provingground.translation.ShapeTreeFormat.pair", "link" : "provingground\/translation\/ShapeTreeFormat.html#pair(first:provingground.translation.ShapeTree,second:provingground.translation.ShapeTree):provingground.translation.ShapeTree", "kind" : "def"}, {"label" : "equality", "tail" : "(dom: ShapeTree, lhs: ShapeTree, rhs: ShapeTree): ShapeTree", "member" : "provingground.translation.ShapeTreeFormat.equality", "link" : "provingground\/translation\/ShapeTreeFormat.html#equality(dom:provingground.translation.ShapeTree,lhs:provingground.translation.ShapeTree,rhs:provingground.translation.ShapeTree):provingground.translation.ShapeTree", "kind" : "def"}, {"label" : "plus", "tail" : "(first: ShapeTree, second: ShapeTree): ShapeTree", "member" : "provingground.translation.ShapeTreeFormat.plus", "link" : "provingground\/translation\/ShapeTreeFormat.html#plus(first:provingground.translation.ShapeTree,second:provingground.translation.ShapeTree):provingground.translation.ShapeTree", "kind" : "def"}, {"label" : "sigma", "tail" : "(fibre: ShapeTree): ShapeTree", "member" : "provingground.translation.ShapeTreeFormat.sigma", "link" : "provingground\/translation\/ShapeTreeFormat.html#sigma(fibre:provingground.translation.ShapeTree):provingground.translation.ShapeTree", "kind" : "def"}, {"label" : "pi", "tail" : "(fibre: ShapeTree): ShapeTree", "member" : "provingground.translation.ShapeTreeFormat.pi", "link" : "provingground\/translation\/ShapeTreeFormat.html#pi(fibre:provingground.translation.ShapeTree):provingground.translation.ShapeTree", "kind" : "def"}, {"label" : "lambda", "tail" : "(variable: ShapeTree, typ: ShapeTree, value: ShapeTree): ShapeTree", "member" : "provingground.translation.ShapeTreeFormat.lambda", "link" : "provingground\/translation\/ShapeTreeFormat.html#lambda(variable:provingground.translation.ShapeTree,typ:provingground.translation.ShapeTree,value:provingground.translation.ShapeTree):provingground.translation.ShapeTree", "kind" : "def"}, {"label" : "arrow", "tail" : "(dom: ShapeTree, codom: ShapeTree): ShapeTree", "member" : "provingground.translation.ShapeTreeFormat.arrow", "link" : "provingground\/translation\/ShapeTreeFormat.html#arrow(dom:provingground.translation.ShapeTree,codom:provingground.translation.ShapeTree):provingground.translation.ShapeTree", "kind" : "def"}, {"label" : "appln", "tail" : "(func: ShapeTree, arg: ShapeTree): ShapeTree", "member" : "provingground.translation.ShapeTreeFormat.appln", "link" : "provingground\/translation\/ShapeTreeFormat.html#appln(func:provingground.translation.ShapeTree,arg:provingground.translation.ShapeTree):provingground.translation.ShapeTree", "kind" : "def"}, {"label" : "fromString", "tail" : "(str: String)(typ: Typ[Term]): ShapeTree", "member" : "provingground.translation.ShapeTreeFormat.fromString", "link" : "provingground\/translation\/ShapeTreeFormat.html#fromString(str:String)(implicittyp:provingground.HoTT.Typ[provingground.HoTT.Term]):provingground.translation.ShapeTree", "kind" : "def"}, {"label" : "specialTerms", "tail" : ": PartialFunction[Term, ShapeTree]", "member" : "provingground.translation.ShapeTreeFormat.specialTerms", "link" : "provingground\/translation\/ShapeTreeFormat.html#specialTerms:PartialFunction[provingground.HoTT.Term,provingground.translation.ShapeTree]", "kind" : "val"}, {"member" : "provingground.translation.ShapeTreeFormat#<init>", "error" : "unsupported entity"}, {"label" : "apply", "tail" : "(term: Term): ShapeTree", "member" : "provingground.translation.TermRec.apply", "link" : "provingground\/translation\/ShapeTreeFormat.html#apply(term:provingground.HoTT.Term):U", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/ShapeTreeFormat.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/ShapeTreeFormat.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/ShapeTreeFormat.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/ShapeTreeFormat.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/ShapeTreeFormat.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/ShapeTreeFormat.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/ShapeTreeFormat.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/ShapeTreeFormat.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/ShapeTreeFormat.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/ShapeTreeFormat.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/ShapeTreeFormat.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/ShapeTreeFormat.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/ShapeTreeFormat.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/ShapeTreeFormat.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/ShapeTreeFormat.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/ShapeTreeFormat.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/ShapeTreeFormat.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/ShapeTreeFormat.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/ShapeTreeFormat.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/translation\/ShapeTreeFormat.html", "kind" : "class"}, {"name" : "provingground.translation.SpecialTerms", "shortDescription" : "", "object" : "provingground\/translation\/SpecialTerms$.html", "members_object" : [{"label" : "freeToTerm", "tail" : ": OrElse[FreeExpr, Term]", "member" : "provingground.translation.SpecialTerms.freeToTerm", "link" : "provingground\/translation\/SpecialTerms$.html#freeToTerm:provingground.translation.Translator.OrElse[provingground.translation.FreeExpr,provingground.HoTT.Term]", "kind" : "val"}, {"label" : "termToFree", "tail" : ": OrElse[Term, FreeExpr]", "member" : "provingground.translation.SpecialTerms.termToFree", "link" : "provingground\/translation\/SpecialTerms$.html#termToFree:provingground.translation.Translator.OrElse[provingground.HoTT.Term,provingground.translation.FreeExpr]", "kind" : "val"}, {"label" : "build", "tail" : ": (Coded[Term]) ⇒ Term", "member" : "provingground.translation.SpecialTerms.build", "link" : "provingground\/translation\/SpecialTerms$.html#build:provingground.translation.Functors.Coded[provingground.HoTT.Term]=>provingground.HoTT.Term", "kind" : "val"}, {"label" : "Decompose", "tail" : "", "member" : "provingground.translation.SpecialTerms.Decompose", "link" : "provingground\/translation\/SpecialTerms$.html#Decompose", "kind" : "object"}, {"label" : "Names", "tail" : "", "member" : "provingground.translation.SpecialTerms.Names", "link" : "provingground\/translation\/SpecialTerms$.html#Names", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/SpecialTerms$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/SpecialTerms$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/SpecialTerms$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/SpecialTerms$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/SpecialTerms$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/SpecialTerms$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/SpecialTerms$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/SpecialTerms$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/SpecialTerms$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/SpecialTerms$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/SpecialTerms$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/SpecialTerms$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/SpecialTerms$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/SpecialTerms$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/SpecialTerms$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/SpecialTerms$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/SpecialTerms$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/SpecialTerms$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/SpecialTerms$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.translation.Statement", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/translation\/Statement.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/translation\/Statement.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Statement[E]) ⇒ Boolean, msg: ⇒ Any): Statement[E]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/Statement.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Statement[E]) ⇒ Boolean): Statement[E]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/Statement.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Statement[E]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/Statement.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Statement[E]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/Statement.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Statement[E], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/translation\/Statement.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Statement[E], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/translation\/Statement.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "appendTo", "tail" : "(doc: D)(dw: MathWriter[D, E]): D", "member" : "provingground.translation.Statement.appendTo", "link" : "provingground\/translation\/Statement.html#appendTo[D](doc:D)(implicitdw:provingground.translation.MathWriter[D,E]):D", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/Statement.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/Statement.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/Statement.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/Statement.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/Statement.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/Statement.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/Statement.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Statement.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Statement.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Statement.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/Statement.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/Statement.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/Statement.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/Statement.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/Statement.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/Statement.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/Statement.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/Statement.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/Statement.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "A statement obtained from source which affects a document.", "object" : "provingground\/translation\/Statement$.html", "members_object" : [{"label" : "BeginPropn", "tail" : "", "member" : "provingground.translation.Statement.BeginPropn", "link" : "provingground\/translation\/Statement$.html#BeginPropnextendsStatement.Beginning", "kind" : "class"}, {"label" : "BeginProof", "tail" : "", "member" : "provingground.translation.Statement.BeginProof", "link" : "provingground\/translation\/Statement$.html#BeginProof[E]extendsStatement.BeginningwithProductwithSerializable", "kind" : "case class"}, {"label" : "End", "tail" : "", "member" : "provingground.translation.Statement.End", "link" : "provingground\/translation\/Statement$.html#EndextendsProductwithSerializable", "kind" : "case class"}, {"label" : "Beginning", "tail" : "", "member" : "provingground.translation.Statement.Beginning", "link" : "provingground\/translation\/Statement$.html#BeginningextendsAnyRef", "kind" : "trait"}, {"label" : "Assume", "tail" : "", "member" : "provingground.translation.Statement.Assume", "link" : "provingground\/translation\/Statement$.html#Assume", "kind" : "object"}, {"label" : "Fix", "tail" : "", "member" : "provingground.translation.Statement.Fix", "link" : "provingground\/translation\/Statement$.html#Fix", "kind" : "object"}, {"label" : "Fix", "tail" : "", "member" : "provingground.translation.Statement.Fix", "link" : "provingground\/translation\/Statement$.html#Fix[E]extendsStatement[E]withProductwithSerializable", "kind" : "case class"}, {"label" : "DefnPropn", "tail" : "", "member" : "provingground.translation.Statement.DefnPropn", "link" : "provingground\/translation\/Statement$.html#DefnPropn[S,E]extendsStatement.Define[S,E]withProductwithSerializable", "kind" : "case class"}, {"label" : "Definition", "tail" : "", "member" : "provingground.translation.Statement.Definition", "link" : "provingground\/translation\/Statement$.html#Definition[S,E]extendsStatement.Define[S,E]withProductwithSerializable", "kind" : "case class"}, {"label" : "Define", "tail" : "", "member" : "provingground.translation.Statement.Define", "link" : "provingground\/translation\/Statement$.html#Define[S,E]extendsStatement[E]withStatement.Assertion[E]", "kind" : "abstract class"}, {"label" : "EndCase", "tail" : "", "member" : "provingground.translation.Statement.EndCase", "link" : "provingground\/translation\/Statement$.html#EndCase[E]extendsStatement[E]withProductwithSerializable", "kind" : "case class"}, {"label" : "Case", "tail" : "", "member" : "provingground.translation.Statement.Case", "link" : "provingground\/translation\/Statement$.html#Case[E]extendsStatement.Assertion[E]withProductwithSerializable", "kind" : "case class"}, {"label" : "Using", "tail" : "", "member" : "provingground.translation.Statement.Using", "link" : "provingground\/translation\/Statement$.html#Using[E]extendsStatement.Assertion[E]withProductwithSerializable", "kind" : "case class"}, {"label" : "Conclude", "tail" : "", "member" : "provingground.translation.Statement.Conclude", "link" : "provingground\/translation\/Statement$.html#Conclude[E]extendsStatement.Assertion[E]withProductwithSerializable", "kind" : "case class"}, {"label" : "Propn", "tail" : "", "member" : "provingground.translation.Statement.Propn", "link" : "provingground\/translation\/Statement$.html#Propn[E]extendsStatement.Assertion[E]", "kind" : "class"}, {"label" : "Assert", "tail" : "", "member" : "provingground.translation.Statement.Assert", "link" : "provingground\/translation\/Statement$.html#Assert[E]extendsStatement.Assertion[E]withProductwithSerializable", "kind" : "case class"}, {"label" : "Assertion", "tail" : "", "member" : "provingground.translation.Statement.Assertion", "link" : "provingground\/translation\/Statement$.html#Assertion[E]extendsStatement[E]", "kind" : "trait"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/Statement$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/Statement$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/Statement$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/Statement$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/Statement$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/Statement$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/Statement$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Statement$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Statement$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Statement$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/Statement$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/Statement$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/Statement$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/Statement$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/Statement$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/Statement$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/Statement$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/Statement$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/Statement$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/translation\/Statement.html", "kind" : "trait"}, {"name" : "provingground.translation.StringParse", "shortDescription" : "", "object" : "provingground\/translation\/StringParse$.html", "members_object" : [{"label" : "idWrite", "tail" : "(): WriteString[String]", "member" : "provingground.translation.StringParse.idWrite", "link" : "provingground\/translation\/StringParse$.html#idWrite:provingground.translation.StringParse.WriteString[String]", "kind" : "implicit def"}, {"label" : "read", "tail" : "(str: String)(arg0: ReadString[A]): A", "member" : "provingground.translation.StringParse.read", "link" : "provingground\/translation\/StringParse$.html#read[A](str:String)(implicitevidence$2:provingground.translation.StringParse.ReadString[A]):A", "kind" : "def"}, {"label" : "write", "tail" : "(a: A)(arg0: WriteString[A]): String", "member" : "provingground.translation.StringParse.write", "link" : "provingground\/translation\/StringParse$.html#write[A](a:A)(implicitevidence$1:provingground.translation.StringParse.WriteString[A]):String", "kind" : "def"}, {"label" : "ReadString", "tail" : "", "member" : "provingground.translation.StringParse.ReadString", "link" : "provingground\/translation\/StringParse$.html#ReadString", "kind" : "object"}, {"label" : "ReadString", "tail" : "", "member" : "provingground.translation.StringParse.ReadString", "link" : "provingground\/translation\/StringParse$.html#ReadString[A]extendsAnyRef", "kind" : "trait"}, {"label" : "WriteString", "tail" : "", "member" : "provingground.translation.StringParse.WriteString", "link" : "provingground\/translation\/StringParse$.html#WriteString", "kind" : "object"}, {"label" : "WriteString", "tail" : "", "member" : "provingground.translation.StringParse.WriteString", "link" : "provingground\/translation\/StringParse$.html#WriteString[A]extendsAnyRef", "kind" : "trait"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/StringParse$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/StringParse$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/StringParse$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/StringParse$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/StringParse$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/StringParse$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/StringParse$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/StringParse$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/StringParse$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/StringParse$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/StringParse$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/StringParse$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/StringParse$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/StringParse$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/StringParse$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/StringParse$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/StringParse$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/StringParse$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/StringParse$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.translation.SubType", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/translation\/SubType.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/translation\/SubType.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SubType[X, Y]) ⇒ Boolean, msg: ⇒ Any): SubType[X, Y]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/SubType.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SubType[X, Y]) ⇒ Boolean): SubType[X, Y]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/SubType.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): SubType[X, Y]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/SubType.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): SubType[X, Y]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/SubType.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (SubType[X, Y], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/translation\/SubType.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (SubType[X, Y], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/translation\/SubType.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/SubType.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/SubType.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/SubType.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/SubType.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/SubType.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/SubType.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/SubType.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/SubType.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/SubType.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/SubType.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/SubType.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/SubType.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/SubType.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/SubType.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/SubType.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/SubType.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/SubType.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/SubType.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/SubType.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "restrict", "tail" : "(): (Option[Y[I]]) ⇒ Option[X[I]]", "member" : "provingground.translation.ConeRestriction.restrict", "link" : "provingground\/translation\/SubType.html#restrict[I]:G[Y[I]]=>G[X[I]]", "kind" : "abstract def"}, {"label" : "incl", "tail" : "(): (X[I]) ⇒ Y[I]", "member" : "provingground.translation.Inclusion.incl", "link" : "provingground\/translation\/SubType.html#incl[I]:X[I]=>Y[I]", "kind" : "abstract def"}], "shortDescription" : "subtype relation between functors, giving inclusion and optional restriction", "trait" : "provingground\/translation\/SubType.html", "kind" : "trait"}, {"name" : "provingground.translation.SubTypePattern", "shortDescription" : "", "object" : "provingground\/translation\/SubTypePattern$.html", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/translation\/SubTypePattern.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/translation\/SubTypePattern.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SubTypePattern[X, Y, F]) ⇒ Boolean, msg: ⇒ Any): SubTypePattern[X, Y, F]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/SubTypePattern.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (SubTypePattern[X, Y, F]) ⇒ Boolean): SubTypePattern[X, Y, F]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/SubTypePattern.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): SubTypePattern[X, Y, F]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/SubTypePattern.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): SubTypePattern[X, Y, F]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/SubTypePattern.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (SubTypePattern[X, Y, F], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/translation\/SubTypePattern.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (SubTypePattern[X, Y, F], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/translation\/SubTypePattern.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "on", "tail" : "(split: PartialFunction[I, F[I]]): Junction[I, X, F]", "member" : "provingground.translation.SubTypePattern.on", "link" : "provingground\/translation\/SubTypePattern.html#on[I](split:PartialFunction[I,F[I]]):provingground.translation.Translator.Junction[I,X,F]", "kind" : "def"}, {"label" : ">>>", "tail" : "(build: (F[O]) ⇒ O): Junction[X, O, F]", "member" : "provingground.translation.SubTypePattern.>>>", "link" : "provingground\/translation\/SubTypePattern.html#>>>[O](build:F[O]=>O):provingground.translation.Translator.Junction[X,O,F]", "kind" : "def"}, {"label" : ">>", "tail" : "(build: (F[O]) ⇒ Option[O]): Junction[X, O, F]", "member" : "provingground.translation.SubTypePattern.>>", "link" : "provingground\/translation\/SubTypePattern.html#>>[O](build:F[O]=>Option[O]):provingground.translation.Translator.Junction[X,O,F]", "kind" : "def"}, {"label" : "builder", "tail" : ": Builder[X, F]", "member" : "provingground.translation.SubTypePattern.builder", "link" : "provingground\/translation\/SubTypePattern.html#builder:provingground.translation.Translator.Builder[X,F]", "kind" : "val"}, {"label" : "pattern", "tail" : ": Pattern[X, F]", "member" : "provingground.translation.SubTypePattern.pattern", "link" : "provingground\/translation\/SubTypePattern.html#pattern:provingground.translation.Translator.Pattern[X,F]", "kind" : "val"}, {"label" : "build", "tail" : ": (F[X]) ⇒ Option[X]", "member" : "provingground.translation.SubTypePattern.build", "link" : "provingground\/translation\/SubTypePattern.html#build:F[X]=>Option[X]", "kind" : "val"}, {"label" : "split", "tail" : ": (X) ⇒ Option[F[X]]", "member" : "provingground.translation.SubTypePattern.split", "link" : "provingground\/translation\/SubTypePattern.html#split:X=>Option[F[X]]", "kind" : "val"}, {"member" : "provingground.translation.SubTypePattern#<init>", "error" : "unsupported entity"}, {"label" : "qp", "tail" : ": QuasiProjection[X, Y]", "member" : "provingground.translation.SubTypePattern.qp", "link" : "provingground\/translation\/SubTypePattern.html#qp:provingground.translation.QuasiProjection[X,Y]", "kind" : "implicit val"}, {"label" : "qi", "tail" : ": QuasiInclusion[X, Y, F]", "member" : "provingground.translation.SubTypePattern.qi", "link" : "provingground\/translation\/SubTypePattern.html#qi:provingground.translation.QuasiInclusion[X,Y,F]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/SubTypePattern.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/SubTypePattern.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/SubTypePattern.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/SubTypePattern.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/SubTypePattern.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/SubTypePattern.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/SubTypePattern.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/SubTypePattern.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/SubTypePattern.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/SubTypePattern.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/SubTypePattern.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/SubTypePattern.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/SubTypePattern.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/SubTypePattern.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/SubTypePattern.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/SubTypePattern.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/SubTypePattern.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/SubTypePattern.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/SubTypePattern.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "Test", "tail" : "", "member" : "provingground.translation.SubTypePattern.Test", "link" : "provingground\/translation\/SubTypePattern$.html#Test", "kind" : "object"}, {"label" : "pattern", "tail" : "(arg0: Traverse[F], qi: QuasiInclHList[X, Y, F], qp: QuasiProjection[X, Y]): SubTypePattern[X, Y, F]", "member" : "provingground.translation.SubTypePattern.pattern", "link" : "provingground\/translation\/SubTypePattern$.html#pattern[X,Y,F[_]<:shapeless.HList](implicitevidence$10:cats.Traverse[F],implicitqi:provingground.translation.QuasiInclHList[X,Y,F],implicitqp:provingground.translation.QuasiProjection[X,Y]):provingground.translation.SubTypePattern[X,Y,F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/SubTypePattern$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/SubTypePattern$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/SubTypePattern$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/SubTypePattern$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/SubTypePattern$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/SubTypePattern$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/SubTypePattern$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/SubTypePattern$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/SubTypePattern$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/SubTypePattern$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/SubTypePattern$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/SubTypePattern$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/SubTypePattern$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/SubTypePattern$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/SubTypePattern$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/SubTypePattern$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/SubTypePattern$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/SubTypePattern$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/SubTypePattern$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/translation\/SubTypePattern.html", "kind" : "class"}, {"name" : "provingground.translation.TermExpr", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/translation\/TermExpr.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/translation\/TermExpr.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TermExpr) ⇒ Boolean, msg: ⇒ Any): TermExpr", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/TermExpr.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TermExpr) ⇒ Boolean): TermExpr", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/TermExpr.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): TermExpr", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/TermExpr.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): TermExpr", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/TermExpr.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (TermExpr, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/translation\/TermExpr.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (TermExpr, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/translation\/TermExpr.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "asTyp", "tail" : "(lp: LiteralParser): Typ[Term]", "member" : "provingground.translation.TermExpr.asTyp", "link" : "provingground\/translation\/TermExpr.html#asTyp(implicitlp:provingground.translation.LiteralParser):provingground.HoTT.Typ[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/TermExpr.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/TermExpr.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/TermExpr.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/TermExpr.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/TermExpr.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/TermExpr.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/TermExpr.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TermExpr.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TermExpr.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TermExpr.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/TermExpr.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/TermExpr.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/TermExpr.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/TermExpr.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/TermExpr.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/TermExpr.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/TermExpr.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/TermExpr.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/TermExpr.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "asTerm", "tail" : "(lp: LiteralParser): Term", "member" : "provingground.translation.TermExpr.asTerm", "link" : "provingground\/translation\/TermExpr.html#asTerm(implicitlp:provingground.translation.LiteralParser):provingground.HoTT.Term", "kind" : "abstract def"}], "shortDescription" : "", "object" : "provingground\/translation\/TermExpr$.html", "members_object" : [{"label" : "expr", "tail" : "", "member" : "provingground.translation.TermExpr.expr", "link" : "provingground\/translation\/TermExpr$.html#exprextendsTermRec[provingground.translation.TermExpr]withProductwithSerializable", "kind" : "case class"}, {"label" : "unpickle", "tail" : "(str: String): TermExpr", "member" : "provingground.translation.TermExpr.unpickle", "link" : "provingground\/translation\/TermExpr$.html#unpickle(str:String):provingground.translation.TermExpr", "kind" : "def"}, {"label" : "simple", "tail" : "(term: Term): TermExpr", "member" : "provingground.translation.TermExpr.simple", "link" : "provingground\/translation\/TermExpr$.html#simple(term:provingground.HoTT.Term):provingground.translation.TermExpr", "kind" : "def"}, {"label" : "pickle", "tail" : "(expr: TermExpr): String", "member" : "provingground.translation.TermExpr.pickle", "link" : "provingground\/translation\/TermExpr$.html#pickle(expr:provingground.translation.TermExpr):String", "kind" : "def"}, {"label" : "PlusTypExpr", "tail" : "", "member" : "provingground.translation.TermExpr.PlusTypExpr", "link" : "provingground\/translation\/TermExpr$.html#PlusTypExprextendsTermExprwithProductwithSerializable", "kind" : "case class"}, {"label" : "PiExpr", "tail" : "", "member" : "provingground.translation.TermExpr.PiExpr", "link" : "provingground\/translation\/TermExpr$.html#PiExprextendsTermExprwithProductwithSerializable", "kind" : "case class"}, {"label" : "SigmaExpr", "tail" : "", "member" : "provingground.translation.TermExpr.SigmaExpr", "link" : "provingground\/translation\/TermExpr$.html#SigmaExprextendsTermExprwithProductwithSerializable", "kind" : "case class"}, {"label" : "Arrow", "tail" : "", "member" : "provingground.translation.TermExpr.Arrow", "link" : "provingground\/translation\/TermExpr$.html#ArrowextendsTermExprwithProductwithSerializable", "kind" : "case class"}, {"label" : "UnivTerm", "tail" : "", "member" : "provingground.translation.TermExpr.UnivTerm", "link" : "provingground\/translation\/TermExpr$.html#UnivTermextendsTermExprwithProductwithSerializable", "kind" : "case class"}, {"label" : "Apply", "tail" : "", "member" : "provingground.translation.TermExpr.Apply", "link" : "provingground\/translation\/TermExpr$.html#ApplyextendsTermExprwithProductwithSerializable", "kind" : "case class"}, {"label" : "PairExpr", "tail" : "", "member" : "provingground.translation.TermExpr.PairExpr", "link" : "provingground\/translation\/TermExpr$.html#PairExprextendsTermExprwithProductwithSerializable", "kind" : "case class"}, {"label" : "LambdaExpr", "tail" : "", "member" : "provingground.translation.TermExpr.LambdaExpr", "link" : "provingground\/translation\/TermExpr$.html#LambdaExprextendsTermExprwithProductwithSerializable", "kind" : "case class"}, {"label" : "VarTyp", "tail" : "", "member" : "provingground.translation.TermExpr.VarTyp", "link" : "provingground\/translation\/TermExpr$.html#VarTypextendsTermExprwithProductwithSerializable", "kind" : "case class"}, {"label" : "TypedLiteral", "tail" : "", "member" : "provingground.translation.TermExpr.TypedLiteral", "link" : "provingground\/translation\/TermExpr$.html#TypedLiteralextendsTermExprwithProductwithSerializable", "kind" : "case class"}, {"label" : "TypedVar", "tail" : "", "member" : "provingground.translation.TermExpr.TypedVar", "link" : "provingground\/translation\/TermExpr$.html#TypedVarextendsTermExprwithProductwithSerializable", "kind" : "case class"}, {"label" : "Equality", "tail" : "", "member" : "provingground.translation.TermExpr.Equality", "link" : "provingground\/translation\/TermExpr$.html#EqualityextendsTermExprwithProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/TermExpr$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/TermExpr$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/TermExpr$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/TermExpr$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/TermExpr$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/TermExpr$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/TermExpr$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TermExpr$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TermExpr$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TermExpr$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/TermExpr$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/TermExpr$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/TermExpr$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/TermExpr$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/TermExpr$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/TermExpr$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/TermExpr$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/TermExpr$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/TermExpr$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/translation\/TermExpr.html", "kind" : "trait"}, {"name" : "provingground.translation.TermFormat", "shortDescription" : "", "object" : "provingground\/translation\/TermFormat$.html", "members_object" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/TermFormat$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/TermFormat$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/TermFormat$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/TermFormat$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/TermFormat$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/TermFormat$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/TermFormat$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TermFormat$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TermFormat$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TermFormat$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/TermFormat$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/TermFormat$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/TermFormat$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/TermFormat$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/TermFormat$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/TermFormat$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/TermFormat$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/TermFormat$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/TermFormat$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.translation.TermLang", "shortDescription" : "", "object" : "provingground\/translation\/TermLang$.html", "members_object" : [{"label" : "termLang", "tail" : "(): ExprLang[Term]", "member" : "provingground.translation.TermLang.termLang", "link" : "provingground\/translation\/TermLang$.html#termLang:provingground.translation.ExprLang[provingground.HoTT.Term]", "kind" : "implicit def"}, {"label" : "domain", "tail" : "(): (Term) ⇒ Option[Term]", "member" : "provingground.translation.TermLang.domain", "link" : "provingground\/translation\/TermLang$.html#domain:provingground.HoTT.Term=>Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "isPi", "tail" : "(): (Term) ⇒ Option[(Term, Term)]", "member" : "provingground.translation.TermLang.isPi", "link" : "provingground\/translation\/TermLang$.html#isPi:provingground.HoTT.Term=>Option[(provingground.HoTT.Term,provingground.HoTT.Term)]", "kind" : "def"}, {"label" : "isSigma", "tail" : "(): (Term) ⇒ Option[(Term, Term)]", "member" : "provingground.translation.TermLang.isSigma", "link" : "provingground\/translation\/TermLang$.html#isSigma:provingground.HoTT.Term=>Option[(provingground.HoTT.Term,provingground.HoTT.Term)]", "kind" : "def"}, {"label" : "isPair", "tail" : "(): (Term) ⇒ Option[(Term, Term)]", "member" : "provingground.translation.TermLang.isPair", "link" : "provingground\/translation\/TermLang$.html#isPair:provingground.HoTT.Term=>Option[(provingground.HoTT.Term,provingground.HoTT.Term)]", "kind" : "def"}, {"label" : "numeral", "tail" : "(n: Int): Option[Term]", "member" : "provingground.translation.TermLang.numeral", "link" : "provingground\/translation\/TermLang$.html#numeral(n:Int):Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "orCases", "tail" : "(first: Term, second: Term): Option[Term]", "member" : "provingground.translation.TermLang.orCases", "link" : "provingground\/translation\/TermLang$.html#orCases(first:provingground.HoTT.Term,second:provingground.HoTT.Term):Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "ff", "tail" : "(): Option[Term]", "member" : "provingground.translation.TermLang.ff", "link" : "provingground\/translation\/TermLang$.html#ff:Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "qed", "tail" : "(): Option[Term]", "member" : "provingground.translation.TermLang.qed", "link" : "provingground\/translation\/TermLang$.html#qed:Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "tt", "tail" : "(): Option[Term]", "member" : "provingground.translation.TermLang.tt", "link" : "provingground\/translation\/TermLang$.html#tt:Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "incl2", "tail" : "(typ: Term): Option[Term]", "member" : "provingground.translation.TermLang.incl2", "link" : "provingground\/translation\/TermLang$.html#incl2(typ:provingground.HoTT.Term):Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "incl1", "tail" : "(typ: Term): Option[Term]", "member" : "provingground.translation.TermLang.incl1", "link" : "provingground\/translation\/TermLang$.html#incl1(typ:provingground.HoTT.Term):Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "or", "tail" : "(first: Term, second: Term): Option[Term]", "member" : "provingground.translation.TermLang.or", "link" : "provingground\/translation\/TermLang$.html#or(first:provingground.HoTT.Term,second:provingground.HoTT.Term):Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "proj2", "tail" : "(xy: Term): Option[Term]", "member" : "provingground.translation.TermLang.proj2", "link" : "provingground\/translation\/TermLang$.html#proj2(xy:provingground.HoTT.Term):Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "proj1", "tail" : "(xy: Term): Option[Term]", "member" : "provingground.translation.TermLang.proj1", "link" : "provingground\/translation\/TermLang$.html#proj1(xy:provingground.HoTT.Term):Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "pair", "tail" : "(x: Term, y: Term): Option[Term]", "member" : "provingground.translation.TermLang.pair", "link" : "provingground\/translation\/TermLang$.html#pair(x:provingground.HoTT.Term,y:provingground.HoTT.Term):Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "sigma", "tail" : "(variable: Term, typ: Term): Option[Term]", "member" : "provingground.translation.TermLang.sigma", "link" : "provingground\/translation\/TermLang$.html#sigma(variable:provingground.HoTT.Term,typ:provingground.HoTT.Term):Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "equality", "tail" : "(lhs: Term, rhs: Term): Option[Term]", "member" : "provingground.translation.TermLang.equality", "link" : "provingground\/translation\/TermLang$.html#equality(lhs:provingground.HoTT.Term,rhs:provingground.HoTT.Term):Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "appln", "tail" : "(func: Term, arg: Term): Option[Term]", "member" : "provingground.translation.TermLang.appln", "link" : "provingground\/translation\/TermLang$.html#appln(func:provingground.HoTT.Term,arg:provingground.HoTT.Term):Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "pi", "tail" : "(variable: Term, typ: Term): Option[Term]", "member" : "provingground.translation.TermLang.pi", "link" : "provingground\/translation\/TermLang$.html#pi(variable:provingground.HoTT.Term,typ:provingground.HoTT.Term):Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "lambda", "tail" : "(variable: Term, value: Term): Option[Term]", "member" : "provingground.translation.TermLang.lambda", "link" : "provingground\/translation\/TermLang$.html#lambda(variable:provingground.HoTT.Term,value:provingground.HoTT.Term):Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "metaVar", "tail" : "(typ: Term): Option[Term]", "member" : "provingground.translation.TermLang.metaVar", "link" : "provingground\/translation\/TermLang$.html#metaVar(typ:provingground.HoTT.Term):Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "anonVar", "tail" : "(typ: Term): Option[Term]", "member" : "provingground.translation.TermLang.anonVar", "link" : "provingground\/translation\/TermLang$.html#anonVar(typ:provingground.HoTT.Term):Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "typVariable", "tail" : "(name: S, level: Int): Option[Term]", "member" : "provingground.translation.TermLang.typVariable", "link" : "provingground\/translation\/TermLang$.html#typVariable[S](name:S,level:Int):Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "variable", "tail" : "(name: S, typ: Term): Option[Term]", "member" : "provingground.translation.TermLang.variable", "link" : "provingground\/translation\/TermLang$.html#variable[S](name:S,typ:provingground.HoTT.Term):Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "applyAll", "tail" : "(funcOpt: Option[Term], args: Vector[Term]): Option[Term]", "member" : "provingground.translation.ExprLang.applyAll", "link" : "provingground\/translation\/TermLang$.html#applyAll(funcOpt:Option[E],args:Vector[E]):Option[E]", "kind" : "def"}, {"label" : "i2", "tail" : "(typ: Term, value: Term): Option[Term]", "member" : "provingground.translation.ExprLang.i2", "link" : "provingground\/translation\/TermLang$.html#i2(typ:E,value:E):Option[E]", "kind" : "def"}, {"label" : "i1", "tail" : "(typ: Term, value: Term): Option[Term]", "member" : "provingground.translation.ExprLang.i1", "link" : "provingground\/translation\/TermLang$.html#i1(typ:E,value:E):Option[E]", "kind" : "def"}, {"label" : "funcTyp", "tail" : "(dom: Term, codom: Term): Option[Term]", "member" : "provingground.translation.ExprLang.funcTyp", "link" : "provingground\/translation\/TermLang$.html#funcTyp(dom:E,codom:E):Option[E]", "kind" : "def"}, {"label" : "pairTyp", "tail" : "(first: Term, second: Term): Option[Term]", "member" : "provingground.translation.ExprLang.pairTyp", "link" : "provingground\/translation\/TermLang$.html#pairTyp(first:E,second:E):Option[E]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/TermLang$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/TermLang$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/TermLang$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/TermLang$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/TermLang$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/TermLang$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/TermLang$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TermLang$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TermLang$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TermLang$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/TermLang$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/TermLang$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/TermLang$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/TermLang$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/TermLang$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/TermLang$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/TermLang$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.translation.TermParser", "shortDescription" : "", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/translation\/TermParser.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/translation\/TermParser.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TermParser) ⇒ Boolean, msg: ⇒ Any): TermParser", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/TermParser.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TermParser) ⇒ Boolean): TermParser", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/TermParser.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): TermParser", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/TermParser.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): TermParser", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/TermParser.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (TermParser, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/translation\/TermParser.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (TermParser, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/translation\/TermParser.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "OnceParser", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.OnceParser", "link" : "provingground\/translation\/TermParser.html#OnceParser[+T<:<?>]extendsParsers.this.Parser[T]", "kind" : "trait"}, {"label" : "~", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.~", "link" : "provingground\/translation\/TermParser.html#~[+a,+b]extendsProductwithSerializable", "kind" : "case class"}, {"label" : "Parser", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.Parser", "link" : "provingground\/translation\/TermParser.html#Parser[+T]extendsParsers.this.Input=>Parsers.this.ParseResult[T]", "kind" : "abstract class"}, {"label" : "Success", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.Success", "link" : "provingground\/translation\/TermParser.html#Success[+T<:<?>]extendsParsers.this.ParseResult[T]withProductwithSerializable", "kind" : "case class"}, {"label" : "Failure", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.Failure", "link" : "provingground\/translation\/TermParser.html#FailureextendsParsers.this.NoSuccesswithProductwithSerializable", "kind" : "case class"}, {"label" : "Error", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.Error", "link" : "provingground\/translation\/TermParser.html#ErrorextendsParsers.this.NoSuccesswithProductwithSerializable", "kind" : "case class"}, {"label" : "NoSuccess", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.NoSuccess", "link" : "provingground\/translation\/TermParser.html#NoSuccessextendsParsers.this.ParseResult[Nothing]", "kind" : "sealed abstract class"}, {"label" : "ParseResult", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.ParseResult", "link" : "provingground\/translation\/TermParser.html#ParseResult[+T<:<?>]extendsAnyRef", "kind" : "sealed abstract class"}, {"label" : "appln", "tail" : "(): Parser[Term]", "member" : "provingground.translation.TermParser.appln", "link" : "provingground\/translation\/TermParser.html#appln:TermParser.this.Parser[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "lambdaTerm", "tail" : "(): Parser[Term]", "member" : "provingground.translation.TermParser.lambdaTerm", "link" : "provingground\/translation\/TermParser.html#lambdaTerm:TermParser.this.Parser[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "term", "tail" : "(): Parser[Term]", "member" : "provingground.translation.TermParser.term", "link" : "provingground\/translation\/TermParser.html#term:TermParser.this.Parser[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "pair", "tail" : "(): Parser[Term]", "member" : "provingground.translation.TermParser.pair", "link" : "provingground\/translation\/TermParser.html#pair:TermParser.this.Parser[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "symbTerm", "tail" : "(): Parser[Term]", "member" : "provingground.translation.TermParser.symbTerm", "link" : "provingground\/translation\/TermParser.html#symbTerm:TermParser.this.Parser[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "uni", "tail" : "(): Parser[Typ[Typ[Term]]]", "member" : "provingground.translation.TermParser.uni", "link" : "provingground\/translation\/TermParser.html#uni:TermParser.this.Parser[provingground.HoTT.Typ[provingground.HoTT.Typ[provingground.HoTT.Term]]]", "kind" : "def"}, {"label" : "typ", "tail" : "(): Parser[Typ[Term]]", "member" : "provingground.translation.TermParser.typ", "link" : "provingground\/translation\/TermParser.html#typ:TermParser.this.Parser[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "sigmaTyp", "tail" : "(): Parser[Typ[Term]]", "member" : "provingground.translation.TermParser.sigmaTyp", "link" : "provingground\/translation\/TermParser.html#sigmaTyp:TermParser.this.Parser[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "piTyp", "tail" : "(): Parser[Typ[Term]]", "member" : "provingground.translation.TermParser.piTyp", "link" : "provingground\/translation\/TermParser.html#piTyp:TermParser.this.Parser[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "arrowTyp", "tail" : "(): Parser[Typ[Term]]", "member" : "provingground.translation.TermParser.arrowTyp", "link" : "provingground\/translation\/TermParser.html#arrowTyp:TermParser.this.Parser[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "symbTyp", "tail" : "(): Parser[Typ[Term]]", "member" : "provingground.translation.TermParser.symbTyp", "link" : "provingground\/translation\/TermParser.html#symbTyp:TermParser.this.Parser[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "name", "tail" : "(): Parser[AnySym]", "member" : "provingground.translation.TermParser.name", "link" : "provingground\/translation\/TermParser.html#name:TermParser.this.Parser[provingground.HoTT.AnySym]", "kind" : "def"}, {"label" : "makeSymbol", "tail" : "(s: String): AnySym", "member" : "provingground.translation.TermParser.makeSymbol", "link" : "provingground\/translation\/TermParser.html#makeSymbol(s:String):provingground.HoTT.AnySym", "kind" : "def"}, {"label" : "colon", "tail" : "(): Parser[String]", "member" : "provingground.translation.TermParser.colon", "link" : "provingground\/translation\/TermParser.html#colon:TermParser.this.Parser[String]", "kind" : "def"}, {"label" : "sigma", "tail" : "(): Parser[Any]", "member" : "provingground.translation.TermParser.sigma", "link" : "provingground\/translation\/TermParser.html#sigma:TermParser.this.Parser[Any]", "kind" : "def"}, {"label" : "prod", "tail" : "(): Parser[Any]", "member" : "provingground.translation.TermParser.prod", "link" : "provingground\/translation\/TermParser.html#prod:TermParser.this.Parser[Any]", "kind" : "def"}, {"label" : "univ", "tail" : "(): Parser[Any]", "member" : "provingground.translation.TermParser.univ", "link" : "provingground\/translation\/TermParser.html#univ:TermParser.this.Parser[Any]", "kind" : "def"}, {"label" : "mapsto", "tail" : "(): Parser[Any]", "member" : "provingground.translation.TermParser.mapsto", "link" : "provingground\/translation\/TermParser.html#mapsto:TermParser.this.Parser[Any]", "kind" : "def"}, {"label" : "arrow", "tail" : "(): Parser[Any]", "member" : "provingground.translation.TermParser.arrow", "link" : "provingground\/translation\/TermParser.html#arrow:TermParser.this.Parser[Any]", "kind" : "def"}, {"member" : "provingground.translation.TermParser#<init>", "error" : "unsupported entity"}, {"label" : "floatingPointNumber", "tail" : "(): Parser[String]", "member" : "scala.util.parsing.combinator.JavaTokenParsers.floatingPointNumber", "link" : "provingground\/translation\/TermParser.html#floatingPointNumber:JavaTokenParsers.this.Parser[String]", "kind" : "def"}, {"label" : "stringLiteral", "tail" : "(): Parser[String]", "member" : "scala.util.parsing.combinator.JavaTokenParsers.stringLiteral", "link" : "provingground\/translation\/TermParser.html#stringLiteral:JavaTokenParsers.this.Parser[String]", "kind" : "def"}, {"label" : "decimalNumber", "tail" : "(): Parser[String]", "member" : "scala.util.parsing.combinator.JavaTokenParsers.decimalNumber", "link" : "provingground\/translation\/TermParser.html#decimalNumber:JavaTokenParsers.this.Parser[String]", "kind" : "def"}, {"label" : "wholeNumber", "tail" : "(): Parser[String]", "member" : "scala.util.parsing.combinator.JavaTokenParsers.wholeNumber", "link" : "provingground\/translation\/TermParser.html#wholeNumber:JavaTokenParsers.this.Parser[String]", "kind" : "def"}, {"label" : "ident", "tail" : "(): Parser[String]", "member" : "scala.util.parsing.combinator.JavaTokenParsers.ident", "link" : "provingground\/translation\/TermParser.html#ident:JavaTokenParsers.this.Parser[String]", "kind" : "def"}, {"label" : "parseAll", "tail" : "(p: Parser[T], in: CharSequence): ParseResult[T]", "member" : "scala.util.parsing.combinator.RegexParsers.parseAll", "link" : "provingground\/translation\/TermParser.html#parseAll[T](p:RegexParsers.this.Parser[T],in:CharSequence):RegexParsers.this.ParseResult[T]", "kind" : "def"}, {"label" : "parseAll", "tail" : "(p: Parser[T], in: Reader): ParseResult[T]", "member" : "scala.util.parsing.combinator.RegexParsers.parseAll", "link" : "provingground\/translation\/TermParser.html#parseAll[T](p:RegexParsers.this.Parser[T],in:java.io.Reader):RegexParsers.this.ParseResult[T]", "kind" : "def"}, {"label" : "parseAll", "tail" : "(p: Parser[T], in: Reader[Char]): ParseResult[T]", "member" : "scala.util.parsing.combinator.RegexParsers.parseAll", "link" : "provingground\/translation\/TermParser.html#parseAll[T](p:RegexParsers.this.Parser[T],in:scala.util.parsing.input.Reader[Char]):RegexParsers.this.ParseResult[T]", "kind" : "def"}, {"label" : "parse", "tail" : "(p: Parser[T], in: Reader): ParseResult[T]", "member" : "scala.util.parsing.combinator.RegexParsers.parse", "link" : "provingground\/translation\/TermParser.html#parse[T](p:RegexParsers.this.Parser[T],in:java.io.Reader):RegexParsers.this.ParseResult[T]", "kind" : "def"}, {"label" : "parse", "tail" : "(p: Parser[T], in: CharSequence): ParseResult[T]", "member" : "scala.util.parsing.combinator.RegexParsers.parse", "link" : "provingground\/translation\/TermParser.html#parse[T](p:RegexParsers.this.Parser[T],in:CharSequence):RegexParsers.this.ParseResult[T]", "kind" : "def"}, {"label" : "parse", "tail" : "(p: Parser[T], in: Reader[Char]): ParseResult[T]", "member" : "scala.util.parsing.combinator.RegexParsers.parse", "link" : "provingground\/translation\/TermParser.html#parse[T](p:RegexParsers.this.Parser[T],in:scala.util.parsing.input.Reader[Char]):RegexParsers.this.ParseResult[T]", "kind" : "def"}, {"label" : "phrase", "tail" : "(p: Parser[T]): Parser[T]", "member" : "scala.util.parsing.combinator.RegexParsers.phrase", "link" : "provingground\/translation\/TermParser.html#phrase[T](p:RegexParsers.this.Parser[T]):RegexParsers.this.Parser[T]", "kind" : "def"}, {"label" : "positioned", "tail" : "(p: ⇒ Parser[T]): Parser[T]", "member" : "scala.util.parsing.combinator.RegexParsers.positioned", "link" : "provingground\/translation\/TermParser.html#positioned[T<:scala.util.parsing.input.Positional](p:=>RegexParsers.this.Parser[T]):RegexParsers.this.Parser[T]", "kind" : "def"}, {"label" : "regex", "tail" : "(r: Regex): Parser[String]", "member" : "scala.util.parsing.combinator.RegexParsers.regex", "link" : "provingground\/translation\/TermParser.html#regex(r:scala.util.matching.Regex):RegexParsers.this.Parser[String]", "kind" : "implicit def"}, {"label" : "literal", "tail" : "(s: String): Parser[String]", "member" : "scala.util.parsing.combinator.RegexParsers.literal", "link" : "provingground\/translation\/TermParser.html#literal(s:String):RegexParsers.this.Parser[String]", "kind" : "implicit def"}, {"label" : "handleWhiteSpace", "tail" : "(source: CharSequence, offset: Int): Int", "member" : "scala.util.parsing.combinator.RegexParsers.handleWhiteSpace", "link" : "provingground\/translation\/TermParser.html#handleWhiteSpace(source:CharSequence,offset:Int):Int", "kind" : "def"}, {"label" : "skipWhitespace", "tail" : "(): Boolean", "member" : "scala.util.parsing.combinator.RegexParsers.skipWhitespace", "link" : "provingground\/translation\/TermParser.html#skipWhitespace:Boolean", "kind" : "def"}, {"label" : "whiteSpace", "tail" : ": Regex", "member" : "scala.util.parsing.combinator.RegexParsers.whiteSpace", "link" : "provingground\/translation\/TermParser.html#whiteSpace:scala.util.matching.Regex", "kind" : "val"}, {"label" : "Elem", "tail" : "", "member" : "scala.util.parsing.combinator.RegexParsers.Elem", "link" : "provingground\/translation\/TermParser.html#Elem=Char", "kind" : "type"}, {"label" : "mkList", "tail" : "(): (~[T, List[T]]) ⇒ List[T]", "member" : "scala.util.parsing.combinator.Parsers.mkList", "link" : "provingground\/translation\/TermParser.html#mkList[T]:T~List[T]=>List[T]", "kind" : "def"}, {"label" : "guard", "tail" : "(p: ⇒ Parser[T]): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.guard", "link" : "provingground\/translation\/TermParser.html#guard[T](p:=>Parsers.this.Parser[T]):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "not", "tail" : "(p: ⇒ Parser[T]): Parser[Unit]", "member" : "scala.util.parsing.combinator.Parsers.not", "link" : "provingground\/translation\/TermParser.html#not[T](p:=>Parsers.this.Parser[T]):Parsers.this.Parser[Unit]", "kind" : "def"}, {"label" : "opt", "tail" : "(p: ⇒ Parser[T]): Parser[Option[T]]", "member" : "scala.util.parsing.combinator.Parsers.opt", "link" : "provingground\/translation\/TermParser.html#opt[T](p:=>Parsers.this.Parser[T]):Parsers.this.Parser[Option[T]]", "kind" : "def"}, {"label" : "chainr1", "tail" : "(p: ⇒ Parser[T], q: ⇒ Parser[(T, U) ⇒ U], combine: (T, U) ⇒ U, first: U): Parser[U]", "member" : "scala.util.parsing.combinator.Parsers.chainr1", "link" : "provingground\/translation\/TermParser.html#chainr1[T,U](p:=>Parsers.this.Parser[T],q:=>Parsers.this.Parser[(T,U)=>U],combine:(T,U)=>U,first:U):Parsers.this.Parser[U]", "kind" : "def"}, {"label" : "chainl1", "tail" : "(first: ⇒ Parser[T], p: ⇒ Parser[U], q: ⇒ Parser[(T, U) ⇒ T]): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.chainl1", "link" : "provingground\/translation\/TermParser.html#chainl1[T,U](first:=>Parsers.this.Parser[T],p:=>Parsers.this.Parser[U],q:=>Parsers.this.Parser[(T,U)=>T]):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "chainl1", "tail" : "(p: ⇒ Parser[T], q: ⇒ Parser[(T, T) ⇒ T]): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.chainl1", "link" : "provingground\/translation\/TermParser.html#chainl1[T](p:=>Parsers.this.Parser[T],q:=>Parsers.this.Parser[(T,T)=>T]):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "rep1sep", "tail" : "(p: ⇒ Parser[T], q: ⇒ Parser[Any]): Parser[List[T]]", "member" : "scala.util.parsing.combinator.Parsers.rep1sep", "link" : "provingground\/translation\/TermParser.html#rep1sep[T](p:=>Parsers.this.Parser[T],q:=>Parsers.this.Parser[Any]):Parsers.this.Parser[List[T]]", "kind" : "def"}, {"label" : "repN", "tail" : "(num: Int, p: ⇒ Parser[T]): Parser[List[T]]", "member" : "scala.util.parsing.combinator.Parsers.repN", "link" : "provingground\/translation\/TermParser.html#repN[T](num:Int,p:=>Parsers.this.Parser[T]):Parsers.this.Parser[List[T]]", "kind" : "def"}, {"label" : "rep1", "tail" : "(first: ⇒ Parser[T], p0: ⇒ Parser[T]): Parser[List[T]]", "member" : "scala.util.parsing.combinator.Parsers.rep1", "link" : "provingground\/translation\/TermParser.html#rep1[T](first:=>Parsers.this.Parser[T],p0:=>Parsers.this.Parser[T]):Parsers.this.Parser[List[T]]", "kind" : "def"}, {"label" : "rep1", "tail" : "(p: ⇒ Parser[T]): Parser[List[T]]", "member" : "scala.util.parsing.combinator.Parsers.rep1", "link" : "provingground\/translation\/TermParser.html#rep1[T](p:=>Parsers.this.Parser[T]):Parsers.this.Parser[List[T]]", "kind" : "def"}, {"label" : "repsep", "tail" : "(p: ⇒ Parser[T], q: ⇒ Parser[Any]): Parser[List[T]]", "member" : "scala.util.parsing.combinator.Parsers.repsep", "link" : "provingground\/translation\/TermParser.html#repsep[T](p:=>Parsers.this.Parser[T],q:=>Parsers.this.Parser[Any]):Parsers.this.Parser[List[T]]", "kind" : "def"}, {"label" : "rep", "tail" : "(p: ⇒ Parser[T]): Parser[List[T]]", "member" : "scala.util.parsing.combinator.Parsers.rep", "link" : "provingground\/translation\/TermParser.html#rep[T](p:=>Parsers.this.Parser[T]):Parsers.this.Parser[List[T]]", "kind" : "def"}, {"label" : "log", "tail" : "(p: ⇒ Parser[T])(name: String): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.log", "link" : "provingground\/translation\/TermParser.html#log[T](p:=>Parsers.this.Parser[T])(name:String):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "success", "tail" : "(v: T): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.success", "link" : "provingground\/translation\/TermParser.html#success[T](v:T):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "err", "tail" : "(msg: String): Parser[Nothing]", "member" : "scala.util.parsing.combinator.Parsers.err", "link" : "provingground\/translation\/TermParser.html#err(msg:String):Parsers.this.Parser[Nothing]", "kind" : "def"}, {"label" : "failure", "tail" : "(msg: String): Parser[Nothing]", "member" : "scala.util.parsing.combinator.Parsers.failure", "link" : "provingground\/translation\/TermParser.html#failure(msg:String):Parsers.this.Parser[Nothing]", "kind" : "def"}, {"label" : "acceptSeq", "tail" : "(es: ES)(arg0: (ES) ⇒ Iterable[Elem]): Parser[List[Elem]]", "member" : "scala.util.parsing.combinator.Parsers.acceptSeq", "link" : "provingground\/translation\/TermParser.html#acceptSeq[ES](es:ES)(implicitevidence$2:ES=>Iterable[Parsers.this.Elem]):Parsers.this.Parser[List[Parsers.this.Elem]]", "kind" : "def"}, {"label" : "acceptMatch", "tail" : "(expected: String, f: PartialFunction[Elem, U]): Parser[U]", "member" : "scala.util.parsing.combinator.Parsers.acceptMatch", "link" : "provingground\/translation\/TermParser.html#acceptMatch[U](expected:String,f:PartialFunction[Parsers.this.Elem,U]):Parsers.this.Parser[U]", "kind" : "def"}, {"label" : "acceptIf", "tail" : "(p: (Elem) ⇒ Boolean)(err: (Elem) ⇒ String): Parser[Elem]", "member" : "scala.util.parsing.combinator.Parsers.acceptIf", "link" : "provingground\/translation\/TermParser.html#acceptIf(p:Parsers.this.Elem=>Boolean)(err:Parsers.this.Elem=>String):Parsers.this.Parser[Parsers.this.Elem]", "kind" : "def"}, {"label" : "accept", "tail" : "(expected: String, f: PartialFunction[Elem, U]): Parser[U]", "member" : "scala.util.parsing.combinator.Parsers.accept", "link" : "provingground\/translation\/TermParser.html#accept[U](expected:String,f:PartialFunction[Parsers.this.Elem,U]):Parsers.this.Parser[U]", "kind" : "def"}, {"label" : "accept", "tail" : "(es: ES)(arg0: (ES) ⇒ List[Elem]): Parser[List[Elem]]", "member" : "scala.util.parsing.combinator.Parsers.accept", "link" : "provingground\/translation\/TermParser.html#accept[ES](es:ES)(implicitevidence$1:ES=>List[Parsers.this.Elem]):Parsers.this.Parser[List[Parsers.this.Elem]]", "kind" : "def"}, {"label" : "accept", "tail" : "(e: Elem): Parser[Elem]", "member" : "scala.util.parsing.combinator.Parsers.accept", "link" : "provingground\/translation\/TermParser.html#accept(e:Parsers.this.Elem):Parsers.this.Parser[Parsers.this.Elem]", "kind" : "implicit def"}, {"label" : "elem", "tail" : "(e: Elem): Parser[Elem]", "member" : "scala.util.parsing.combinator.Parsers.elem", "link" : "provingground\/translation\/TermParser.html#elem(e:Parsers.this.Elem):Parsers.this.Parser[Parsers.this.Elem]", "kind" : "def"}, {"label" : "elem", "tail" : "(kind: String, p: (Elem) ⇒ Boolean): Parser[Elem]", "member" : "scala.util.parsing.combinator.Parsers.elem", "link" : "provingground\/translation\/TermParser.html#elem(kind:String,p:Parsers.this.Elem=>Boolean):Parsers.this.Parser[Parsers.this.Elem]", "kind" : "def"}, {"label" : "commit", "tail" : "(p: ⇒ Parser[T]): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.commit", "link" : "provingground\/translation\/TermParser.html#commit[T](p:=>Parsers.this.Parser[T]):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "OnceParser", "tail" : "(f: (Input) ⇒ ParseResult[T]): Parser[T] with OnceParser[T]", "member" : "scala.util.parsing.combinator.Parsers.OnceParser", "link" : "provingground\/translation\/TermParser.html#OnceParser[T](f:Parsers.this.Input=>Parsers.this.ParseResult[T]):Parsers.this.Parser[T]withParsers.this.OnceParser[T]", "kind" : "def"}, {"label" : "Parser", "tail" : "(f: (Input) ⇒ ParseResult[T]): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.Parser", "link" : "provingground\/translation\/TermParser.html#Parser[T](f:Parsers.this.Input=>Parsers.this.ParseResult[T]):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "Input", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.Input", "link" : "provingground\/translation\/TermParser.html#Input=scala.util.parsing.input.Reader[Parsers.this.Elem]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/TermParser.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/TermParser.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/TermParser.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/TermParser.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/TermParser.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/TermParser.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/TermParser.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TermParser.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TermParser.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TermParser.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/TermParser.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/TermParser.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/TermParser.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/TermParser.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/TermParser.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/TermParser.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/TermParser.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/TermParser.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/TermParser.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/translation\/TermParser.html", "kind" : "class"}, {"name" : "provingground.translation.TermPatterns", "shortDescription" : "", "object" : "provingground\/translation\/TermPatterns$.html", "members_object" : [{"label" : "buildIndIndDef", "tail" : "(inds: (Term) ⇒ Option[IndexedConstructorSeqDom[_, Term, _, _, _]]): (Vector[Term], (Term, (Term, Vector[Term]))) ⇒ Option[Term]", "member" : "provingground.translation.TermPatterns.buildIndIndDef", "link" : "provingground\/translation\/TermPatterns$.html#buildIndIndDef(inds:provingground.HoTT.Term=>Option[provingground.induction.IndexedConstructorSeqDom[_,provingground.HoTT.Term,_,_,_]]):(Vector[provingground.HoTT.Term],(provingground.HoTT.Term,(provingground.HoTT.Term,Vector[provingground.HoTT.Term])))=>Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "buildIndDef", "tail" : "(inds: (Typ[Term]) ⇒ Option[ConstructorSeqTL[_, Term, _]]): (Term, (Term, Vector[Term])) ⇒ Option[Term]", "member" : "provingground.translation.TermPatterns.buildIndDef", "link" : "provingground\/translation\/TermPatterns$.html#buildIndDef(inds:provingground.HoTT.Typ[provingground.HoTT.Term]=>Option[provingground.induction.ConstructorSeqTL[_,provingground.HoTT.Term,_]]):(provingground.HoTT.Term,(provingground.HoTT.Term,Vector[provingground.HoTT.Term]))=>Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "fm", "tail" : "(dom: Typ[U], fmly: Term): Func[U with Subs[U], Typ[_]] forSome {type _ <: Term with Subs[_]}", "member" : "provingground.translation.TermPatterns.fm", "link" : "provingground\/translation\/TermPatterns$.html#fm[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](dom:provingground.HoTT.Typ[U],fmly:provingground.HoTT.Term):provingground.HoTT.Func[Uwithprovingground.HoTT.Subs[U],provingground.HoTT.Typ[_]]forSome{type_<:provingground.HoTT.Termwithprovingground.HoTT.Subs[_]}", "kind" : "def"}, {"label" : "buildIndRecDef", "tail" : "(inds: (Term) ⇒ Option[IndexedConstructorSeqDom[_, Term, _, _, _]]): (Vector[Term], (Term, (Term, Vector[Term]))) ⇒ Option[Term]", "member" : "provingground.translation.TermPatterns.buildIndRecDef", "link" : "provingground\/translation\/TermPatterns$.html#buildIndRecDef(inds:provingground.HoTT.Term=>Option[provingground.induction.IndexedConstructorSeqDom[_,provingground.HoTT.Term,_,_,_]]):(Vector[provingground.HoTT.Term],(provingground.HoTT.Term,(provingground.HoTT.Term,Vector[provingground.HoTT.Term])))=>Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "buildRecDef", "tail" : "(inds: (Typ[Term]) ⇒ Option[ConstructorSeqTL[_, _, _]]): (Term, (Term, Vector[Term])) ⇒ Option[Term]", "member" : "provingground.translation.TermPatterns.buildRecDef", "link" : "provingground\/translation\/TermPatterns$.html#buildRecDef(inds:provingground.HoTT.Typ[provingground.HoTT.Term]=>Option[provingground.induction.ConstructorSeqTL[_,_,_]]):(provingground.HoTT.Term,(provingground.HoTT.Term,Vector[provingground.HoTT.Term]))=>Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "termToExpr", "tail" : "(univ: (Int) ⇒ Option[E])(arg0: ExprLang[E]): OrElse[Term, E]", "member" : "provingground.translation.TermPatterns.termToExpr", "link" : "provingground\/translation\/TermPatterns$.html#termToExpr[E](univ:Int=>Option[E])(implicitevidence$2:provingground.translation.ExprLang[E]):provingground.translation.Translator.OrElse[provingground.HoTT.Term,E]", "kind" : "def"}, {"label" : "termToExprRaw", "tail" : "(arg0: ExprLang[E]): OrElse[Term, E]", "member" : "provingground.translation.TermPatterns.termToExprRaw", "link" : "provingground\/translation\/TermPatterns$.html#termToExprRaw[E](implicitevidence$1:provingground.translation.ExprLang[E]):provingground.translation.Translator.OrElse[provingground.HoTT.Term,E]", "kind" : "def"}, {"label" : "symName", "tail" : ": Pattern[Term, S]", "member" : "provingground.translation.TermPatterns.symName", "link" : "provingground\/translation\/TermPatterns$.html#symName:provingground.translation.Translator.Pattern[provingground.HoTT.Term,provingground.translation.Functors.S]", "kind" : "val"}, {"label" : "symbolic", "tail" : ": Pattern[Term, Named]", "member" : "provingground.translation.TermPatterns.symbolic", "link" : "provingground\/translation\/TermPatterns$.html#symbolic:provingground.translation.Translator.Pattern[provingground.HoTT.Term,provingground.translation.Functors.Named]", "kind" : "val"}, {"label" : "universe", "tail" : ": Pattern[Term, N]", "member" : "provingground.translation.TermPatterns.universe", "link" : "provingground\/translation\/TermPatterns$.html#universe:provingground.translation.Translator.Pattern[provingground.HoTT.Term,provingground.translation.Functors.N]", "kind" : "val"}, {"label" : "zero", "tail" : ": Pattern[Term, Un]", "member" : "provingground.translation.TermPatterns.zero", "link" : "provingground\/translation\/TermPatterns$.html#zero:provingground.translation.Translator.Pattern[provingground.HoTT.Term,provingground.translation.Functors.Un]", "kind" : "val"}, {"label" : "unit", "tail" : ": Pattern[Term, Un]", "member" : "provingground.translation.TermPatterns.unit", "link" : "provingground\/translation\/TermPatterns$.html#unit:provingground.translation.Translator.Pattern[provingground.HoTT.Term,provingground.translation.Functors.Un]", "kind" : "val"}, {"label" : "star", "tail" : ": Pattern[Term, Un]", "member" : "provingground.translation.TermPatterns.star", "link" : "provingground\/translation\/TermPatterns$.html#star:provingground.translation.Translator.Pattern[provingground.HoTT.Term,provingground.translation.Functors.Un]", "kind" : "val"}, {"label" : "secondIncl", "tail" : ": Pattern[Term, II]", "member" : "provingground.translation.TermPatterns.secondIncl", "link" : "provingground\/translation\/TermPatterns$.html#secondIncl:provingground.translation.Translator.Pattern[provingground.HoTT.Term,provingground.translation.Functors.II]", "kind" : "val"}, {"label" : "firstIncl", "tail" : ": Pattern[Term, II]", "member" : "provingground.translation.TermPatterns.firstIncl", "link" : "provingground\/translation\/TermPatterns$.html#firstIncl:provingground.translation.Translator.Pattern[provingground.HoTT.Term,provingground.translation.Functors.II]", "kind" : "val"}, {"label" : "equation", "tail" : ": Pattern[Term, II]", "member" : "provingground.translation.TermPatterns.equation", "link" : "provingground\/translation\/TermPatterns$.html#equation:provingground.translation.Translator.Pattern[provingground.HoTT.Term,provingground.translation.Functors.II]", "kind" : "val"}, {"label" : "identityTyp", "tail" : ": Pattern[Term, III]", "member" : "provingground.translation.TermPatterns.identityTyp", "link" : "provingground\/translation\/TermPatterns$.html#identityTyp:provingground.translation.Translator.Pattern[provingground.HoTT.Term,provingground.translation.Functors.III]", "kind" : "val"}, {"label" : "indInducFunc", "tail" : ": Pattern[Term, VIIV]", "member" : "provingground.translation.TermPatterns.indInducFunc", "link" : "provingground\/translation\/TermPatterns$.html#indInducFunc:provingground.translation.Translator.Pattern[provingground.HoTT.Term,provingground.translation.Functors.VIIV]", "kind" : "val"}, {"label" : "inducFunc", "tail" : ": Pattern[Term, IIV]", "member" : "provingground.translation.TermPatterns.inducFunc", "link" : "provingground\/translation\/TermPatterns$.html#inducFunc:provingground.translation.Translator.Pattern[provingground.HoTT.Term,provingground.translation.Functors.IIV]", "kind" : "val"}, {"label" : "indRecFunc", "tail" : ": Pattern[Term, VIIV]", "member" : "provingground.translation.TermPatterns.indRecFunc", "link" : "provingground\/translation\/TermPatterns$.html#indRecFunc:provingground.translation.Translator.Pattern[provingground.HoTT.Term,provingground.translation.Functors.VIIV]", "kind" : "val"}, {"label" : "recFunc", "tail" : ": Pattern[Term, IIV]", "member" : "provingground.translation.TermPatterns.recFunc", "link" : "provingground\/translation\/TermPatterns$.html#recFunc:provingground.translation.Translator.Pattern[provingground.HoTT.Term,provingground.translation.Functors.IIV]", "kind" : "val"}, {"label" : "funcTyp", "tail" : ": Pattern[Term, II]", "member" : "provingground.translation.TermPatterns.funcTyp", "link" : "provingground\/translation\/TermPatterns$.html#funcTyp:provingground.translation.Translator.Pattern[provingground.HoTT.Term,provingground.translation.Functors.II]", "kind" : "val"}, {"label" : "prodTyp", "tail" : ": Pattern[Term, II]", "member" : "provingground.translation.TermPatterns.prodTyp", "link" : "provingground\/translation\/TermPatterns$.html#prodTyp:provingground.translation.Translator.Pattern[provingground.HoTT.Term,provingground.translation.Functors.II]", "kind" : "val"}, {"label" : "absPair", "tail" : ": Pattern[Term, II]", "member" : "provingground.translation.TermPatterns.absPair", "link" : "provingground\/translation\/TermPatterns$.html#absPair:provingground.translation.Translator.Pattern[provingground.HoTT.Term,provingground.translation.Functors.II]", "kind" : "val"}, {"label" : "plusTyp", "tail" : ": Pattern[Term, II]", "member" : "provingground.translation.TermPatterns.plusTyp", "link" : "provingground\/translation\/TermPatterns$.html#plusTyp:provingground.translation.Translator.Pattern[provingground.HoTT.Term,provingground.translation.Functors.II]", "kind" : "val"}, {"label" : "sigmaLam", "tail" : ": Pattern[Term, II]", "member" : "provingground.translation.TermPatterns.sigmaLam", "link" : "provingground\/translation\/TermPatterns$.html#sigmaLam:provingground.translation.Translator.Pattern[provingground.HoTT.Term,provingground.translation.Functors.II]", "kind" : "val"}, {"label" : "sigmaTyp", "tail" : ": Pattern[Term, Id]", "member" : "provingground.translation.TermPatterns.sigmaTyp", "link" : "provingground\/translation\/TermPatterns$.html#sigmaTyp:provingground.translation.Translator.Pattern[provingground.HoTT.Term,cats.Id]", "kind" : "val"}, {"label" : "piLam", "tail" : ": Pattern[Term, II]", "member" : "provingground.translation.TermPatterns.piLam", "link" : "provingground\/translation\/TermPatterns$.html#piLam:provingground.translation.Translator.Pattern[provingground.HoTT.Term,provingground.translation.Functors.II]", "kind" : "val"}, {"label" : "piTyp", "tail" : ": Pattern[Term, Id]", "member" : "provingground.translation.TermPatterns.piTyp", "link" : "provingground\/translation\/TermPatterns$.html#piTyp:provingground.translation.Translator.Pattern[provingground.HoTT.Term,cats.Id]", "kind" : "val"}, {"label" : "sigmaTriple", "tail" : ": Pattern[Term, III]", "member" : "provingground.translation.TermPatterns.sigmaTriple", "link" : "provingground\/translation\/TermPatterns$.html#sigmaTriple:provingground.translation.Translator.Pattern[provingground.HoTT.Term,provingground.translation.Functors.III]", "kind" : "val"}, {"label" : "piTriple", "tail" : ": Pattern[Term, III]", "member" : "provingground.translation.TermPatterns.piTriple", "link" : "provingground\/translation\/TermPatterns$.html#piTriple:provingground.translation.Translator.Pattern[provingground.HoTT.Term,provingground.translation.Functors.III]", "kind" : "val"}, {"label" : "lambdaTriple", "tail" : ": Pattern[Term, III]", "member" : "provingground.translation.TermPatterns.lambdaTriple", "link" : "provingground\/translation\/TermPatterns$.html#lambdaTriple:provingground.translation.Translator.Pattern[provingground.HoTT.Term,provingground.translation.Functors.III]", "kind" : "val"}, {"label" : "lambdaAppln", "tail" : ": Pattern[Term, II]", "member" : "provingground.translation.TermPatterns.lambdaAppln", "link" : "provingground\/translation\/TermPatterns$.html#lambdaAppln:provingground.translation.Translator.Pattern[provingground.HoTT.Term,provingground.translation.Functors.II]", "kind" : "val"}, {"label" : "formalAppln", "tail" : ": Pattern[Term, II]", "member" : "provingground.translation.TermPatterns.formalAppln", "link" : "provingground\/translation\/TermPatterns$.html#formalAppln:provingground.translation.Translator.Pattern[provingground.HoTT.Term,provingground.translation.Functors.II]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/TermPatterns$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/TermPatterns$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/TermPatterns$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/TermPatterns$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/TermPatterns$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/TermPatterns$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/TermPatterns$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TermPatterns$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TermPatterns$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TermPatterns$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/TermPatterns$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/TermPatterns$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/TermPatterns$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/TermPatterns$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/TermPatterns$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/TermPatterns$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/TermPatterns$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/TermPatterns$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/TermPatterns$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.translation.TermRec", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/translation\/TermRec.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/translation\/TermRec.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TermRec[U]) ⇒ Boolean, msg: ⇒ Any): TermRec[U]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/TermRec.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TermRec[U]) ⇒ Boolean): TermRec[U]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/TermRec.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): TermRec[U]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/TermRec.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): TermRec[U]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/TermRec.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (TermRec[U], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/translation\/TermRec.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (TermRec[U], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/translation\/TermRec.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "apply", "tail" : "(term: Term): U", "member" : "provingground.translation.TermRec.apply", "link" : "provingground\/translation\/TermRec.html#apply(term:provingground.HoTT.Term):U", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/TermRec.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/TermRec.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/TermRec.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/TermRec.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/TermRec.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/TermRec.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/TermRec.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TermRec.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TermRec.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TermRec.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/TermRec.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/TermRec.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/TermRec.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/TermRec.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/TermRec.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/TermRec.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/TermRec.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/TermRec.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/TermRec.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "univ", "tail" : "(n: Int): U", "member" : "provingground.translation.TermRec.univ", "link" : "provingground\/translation\/TermRec.html#univ(n:Int):U", "kind" : "abstract def"}, {"label" : "symbolic", "tail" : "(name: AnySym, typ: Typ[Term]): U", "member" : "provingground.translation.TermRec.symbolic", "link" : "provingground\/translation\/TermRec.html#symbolic(name:provingground.HoTT.AnySym,typ:provingground.HoTT.Typ[provingground.HoTT.Term]):U", "kind" : "abstract def"}, {"label" : "symbtyp", "tail" : "(term: SymbTyp): U", "member" : "provingground.translation.TermRec.symbtyp", "link" : "provingground\/translation\/TermRec.html#symbtyp(term:provingground.HoTT.SymbTyp):U", "kind" : "abstract def"}, {"label" : "symbobj", "tail" : "(term: SymbObj[Term]): U", "member" : "provingground.translation.TermRec.symbobj", "link" : "provingground\/translation\/TermRec.html#symbobj(term:provingground.HoTT.SymbObj[provingground.HoTT.Term]):U", "kind" : "abstract def"}, {"label" : "pair", "tail" : "(first: U, second: U): U", "member" : "provingground.translation.TermRec.pair", "link" : "provingground\/translation\/TermRec.html#pair(first:U,second:U):U", "kind" : "abstract def"}, {"label" : "equality", "tail" : "(dom: U, lhs: U, rhs: U): U", "member" : "provingground.translation.TermRec.equality", "link" : "provingground\/translation\/TermRec.html#equality(dom:U,lhs:U,rhs:U):U", "kind" : "abstract def"}, {"label" : "plus", "tail" : "(first: U, second: U): U", "member" : "provingground.translation.TermRec.plus", "link" : "provingground\/translation\/TermRec.html#plus(first:U,second:U):U", "kind" : "abstract def"}, {"label" : "sigma", "tail" : "(fibre: U): U", "member" : "provingground.translation.TermRec.sigma", "link" : "provingground\/translation\/TermRec.html#sigma(fibre:U):U", "kind" : "abstract def"}, {"label" : "pi", "tail" : "(fibre: U): U", "member" : "provingground.translation.TermRec.pi", "link" : "provingground\/translation\/TermRec.html#pi(fibre:U):U", "kind" : "abstract def"}, {"label" : "lambda", "tail" : "(variable: U, typ: U, value: U): U", "member" : "provingground.translation.TermRec.lambda", "link" : "provingground\/translation\/TermRec.html#lambda(variable:U,typ:U,value:U):U", "kind" : "abstract def"}, {"label" : "arrow", "tail" : "(dom: U, codom: U): U", "member" : "provingground.translation.TermRec.arrow", "link" : "provingground\/translation\/TermRec.html#arrow(dom:U,codom:U):U", "kind" : "abstract def"}, {"label" : "appln", "tail" : "(func: U, arg: U): U", "member" : "provingground.translation.TermRec.appln", "link" : "provingground\/translation\/TermRec.html#appln(func:U,arg:U):U", "kind" : "abstract def"}, {"label" : "fromString", "tail" : "(str: String)(typ: Typ[Term]): U", "member" : "provingground.translation.TermRec.fromString", "link" : "provingground\/translation\/TermRec.html#fromString(str:String)(implicittyp:provingground.HoTT.Typ[provingground.HoTT.Term]):U", "kind" : "abstract def"}, {"label" : "specialTerms", "tail" : ": PartialFunction[Term, U]", "member" : "provingground.translation.TermRec.specialTerms", "link" : "provingground\/translation\/TermRec.html#specialTerms:PartialFunction[provingground.HoTT.Term,U]", "kind" : "abstract val"}], "shortDescription" : "", "trait" : "provingground\/translation\/TermRec.html", "kind" : "trait"}, {"name" : "provingground.translation.TermShapeTree", "shortDescription" : "", "object" : "provingground\/translation\/TermShapeTree$.html", "members_object" : [{"label" : "univ", "tail" : "(n: Int): ShapeTree", "member" : "provingground.translation.ShapeTreeFormat.univ", "link" : "provingground\/translation\/TermShapeTree$.html#univ(n:Int):provingground.translation.ShapeTree", "kind" : "def"}, {"label" : "symbolic", "tail" : "(name: AnySym, typ: Typ[Term]): ShapeTree", "member" : "provingground.translation.ShapeTreeFormat.symbolic", "link" : "provingground\/translation\/TermShapeTree$.html#symbolic(name:provingground.HoTT.AnySym,typ:provingground.HoTT.Typ[provingground.HoTT.Term]):provingground.translation.ShapeTree", "kind" : "def"}, {"label" : "symbtyp", "tail" : "(term: SymbTyp): ShapeTree", "member" : "provingground.translation.ShapeTreeFormat.symbtyp", "link" : "provingground\/translation\/TermShapeTree$.html#symbtyp(term:provingground.HoTT.SymbTyp):provingground.translation.ShapeTree", "kind" : "def"}, {"label" : "symbobj", "tail" : "(term: SymbObj[Term]): ShapeTree", "member" : "provingground.translation.ShapeTreeFormat.symbobj", "link" : "provingground\/translation\/TermShapeTree$.html#symbobj(term:provingground.HoTT.SymbObj[provingground.HoTT.Term]):provingground.translation.ShapeTree", "kind" : "def"}, {"label" : "pair", "tail" : "(first: ShapeTree, second: ShapeTree): ShapeTree", "member" : "provingground.translation.ShapeTreeFormat.pair", "link" : "provingground\/translation\/TermShapeTree$.html#pair(first:provingground.translation.ShapeTree,second:provingground.translation.ShapeTree):provingground.translation.ShapeTree", "kind" : "def"}, {"label" : "equality", "tail" : "(dom: ShapeTree, lhs: ShapeTree, rhs: ShapeTree): ShapeTree", "member" : "provingground.translation.ShapeTreeFormat.equality", "link" : "provingground\/translation\/TermShapeTree$.html#equality(dom:provingground.translation.ShapeTree,lhs:provingground.translation.ShapeTree,rhs:provingground.translation.ShapeTree):provingground.translation.ShapeTree", "kind" : "def"}, {"label" : "plus", "tail" : "(first: ShapeTree, second: ShapeTree): ShapeTree", "member" : "provingground.translation.ShapeTreeFormat.plus", "link" : "provingground\/translation\/TermShapeTree$.html#plus(first:provingground.translation.ShapeTree,second:provingground.translation.ShapeTree):provingground.translation.ShapeTree", "kind" : "def"}, {"label" : "sigma", "tail" : "(fibre: ShapeTree): ShapeTree", "member" : "provingground.translation.ShapeTreeFormat.sigma", "link" : "provingground\/translation\/TermShapeTree$.html#sigma(fibre:provingground.translation.ShapeTree):provingground.translation.ShapeTree", "kind" : "def"}, {"label" : "pi", "tail" : "(fibre: ShapeTree): ShapeTree", "member" : "provingground.translation.ShapeTreeFormat.pi", "link" : "provingground\/translation\/TermShapeTree$.html#pi(fibre:provingground.translation.ShapeTree):provingground.translation.ShapeTree", "kind" : "def"}, {"label" : "lambda", "tail" : "(variable: ShapeTree, typ: ShapeTree, value: ShapeTree): ShapeTree", "member" : "provingground.translation.ShapeTreeFormat.lambda", "link" : "provingground\/translation\/TermShapeTree$.html#lambda(variable:provingground.translation.ShapeTree,typ:provingground.translation.ShapeTree,value:provingground.translation.ShapeTree):provingground.translation.ShapeTree", "kind" : "def"}, {"label" : "arrow", "tail" : "(dom: ShapeTree, codom: ShapeTree): ShapeTree", "member" : "provingground.translation.ShapeTreeFormat.arrow", "link" : "provingground\/translation\/TermShapeTree$.html#arrow(dom:provingground.translation.ShapeTree,codom:provingground.translation.ShapeTree):provingground.translation.ShapeTree", "kind" : "def"}, {"label" : "appln", "tail" : "(func: ShapeTree, arg: ShapeTree): ShapeTree", "member" : "provingground.translation.ShapeTreeFormat.appln", "link" : "provingground\/translation\/TermShapeTree$.html#appln(func:provingground.translation.ShapeTree,arg:provingground.translation.ShapeTree):provingground.translation.ShapeTree", "kind" : "def"}, {"label" : "fromString", "tail" : "(str: String)(typ: Typ[Term]): ShapeTree", "member" : "provingground.translation.ShapeTreeFormat.fromString", "link" : "provingground\/translation\/TermShapeTree$.html#fromString(str:String)(implicittyp:provingground.HoTT.Typ[provingground.HoTT.Term]):provingground.translation.ShapeTree", "kind" : "def"}, {"label" : "specialTerms", "tail" : ": PartialFunction[Term, ShapeTree]", "member" : "provingground.translation.ShapeTreeFormat.specialTerms", "link" : "provingground\/translation\/TermShapeTree$.html#specialTerms:PartialFunction[provingground.HoTT.Term,provingground.translation.ShapeTree]", "kind" : "val"}, {"label" : "apply", "tail" : "(term: Term): ShapeTree", "member" : "provingground.translation.TermRec.apply", "link" : "provingground\/translation\/TermShapeTree$.html#apply(term:provingground.HoTT.Term):U", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/TermShapeTree$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/TermShapeTree$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/TermShapeTree$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/TermShapeTree$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/TermShapeTree$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/TermShapeTree$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/TermShapeTree$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TermShapeTree$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TermShapeTree$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TermShapeTree$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/TermShapeTree$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/TermShapeTree$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/TermShapeTree$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/TermShapeTree$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/TermShapeTree$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/TermShapeTree$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/TermShapeTree$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/TermShapeTree$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/TermShapeTree$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.translation.TermToExpr", "shortDescription" : "", "object" : "provingground\/translation\/TermToExpr$.html", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/translation\/TermToExpr.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/translation\/TermToExpr.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TermToExpr[E]) ⇒ Boolean, msg: ⇒ Any): TermToExpr[E]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/TermToExpr.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TermToExpr[E]) ⇒ Boolean): TermToExpr[E]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/TermToExpr.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): TermToExpr[E]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/TermToExpr.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): TermToExpr[E]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/TermToExpr.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (TermToExpr[E], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/translation\/TermToExpr.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (TermToExpr[E], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/translation\/TermToExpr.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "apply", "tail" : "(term: Term): Option[E]", "member" : "provingground.translation.TermToExpr.apply", "link" : "provingground\/translation\/TermToExpr.html#apply(term:provingground.HoTT.Term):Option[E]", "kind" : "def"}, {"label" : "expr", "tail" : "(): (Term) ⇒ Option[E]", "member" : "provingground.translation.TermToExpr.expr", "link" : "provingground\/translation\/TermToExpr.html#expr:provingground.HoTT.Term=>Option[E]", "kind" : "def"}, {"member" : "provingground.translation.TermToExpr#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/TermToExpr.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/TermToExpr.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/TermToExpr.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/TermToExpr.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/TermToExpr.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/TermToExpr.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/TermToExpr.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TermToExpr.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TermToExpr.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TermToExpr.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/TermToExpr.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/TermToExpr.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/TermToExpr.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/TermToExpr.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/TermToExpr.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/TermToExpr.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/TermToExpr.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/TermToExpr.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/TermToExpr.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "rebuildMap", "tail" : "(m: Map[Term, Set[(U, Term)]], prefix: String): Map[Term, Set[(U, Term)]]", "member" : "provingground.translation.TermToExpr.rebuildMap", "link" : "provingground\/translation\/TermToExpr$.html#rebuildMap[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](m:Map[provingground.HoTT.Term,Set[(U,provingground.HoTT.Term)]],prefix:String):scala.collection.immutable.Map[provingground.HoTT.Term,scala.collection.immutable.Set[(U,provingground.HoTT.Term)]]", "kind" : "def"}, {"label" : "rebuildList", "tail" : "(ts: List[Term], prefix: String): List[Term]", "member" : "provingground.translation.TermToExpr.rebuildList", "link" : "provingground\/translation\/TermToExpr$.html#rebuildList(ts:List[provingground.HoTT.Term],prefix:String):List[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "rebuildTyp", "tail" : "(t: Typ[Term], prefix: String): Typ[Term]", "member" : "provingground.translation.TermToExpr.rebuildTyp", "link" : "provingground\/translation\/TermToExpr$.html#rebuildTyp(t:provingground.HoTT.Typ[provingground.HoTT.Term],prefix:String):provingground.HoTT.Typ[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "rebuild", "tail" : "(t: Term, prefix: String): Term", "member" : "provingground.translation.TermToExpr.rebuild", "link" : "provingground\/translation\/TermToExpr$.html#rebuild(t:provingground.HoTT.Term,prefix:String):provingground.HoTT.Term", "kind" : "def"}, {"label" : "newTermOpt", "tail" : "(term: Term, prefix: String): Option[Term]", "member" : "provingground.translation.TermToExpr.newTermOpt", "link" : "provingground\/translation\/TermToExpr$.html#newTermOpt(term:provingground.HoTT.Term,prefix:String):Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "NewNameFactory", "tail" : "", "member" : "provingground.translation.TermToExpr.NewNameFactory", "link" : "provingground\/translation\/TermToExpr$.html#NewNameFactoryextendsAnyRef", "kind" : "class"}, {"label" : "decode", "tail" : "(names: Vector[(Term, String)]): (Term) ⇒ Term", "member" : "provingground.translation.TermToExpr.decode", "link" : "provingground\/translation\/TermToExpr$.html#decode(names:Vector[(provingground.HoTT.Term,String)]):provingground.HoTT.Term=>provingground.HoTT.Term", "kind" : "def"}, {"label" : "encode", "tail" : "(names: Vector[(Term, String)]): (Term) ⇒ Term", "member" : "provingground.translation.TermToExpr.encode", "link" : "provingground\/translation\/TermToExpr$.html#encode(names:Vector[(provingground.HoTT.Term,String)]):provingground.HoTT.Term=>provingground.HoTT.Term", "kind" : "def"}, {"label" : "fromFormalInduc", "tail" : "(term: Term): (Typ[Term], FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], Term]])", "member" : "provingground.translation.TermToExpr.fromFormalInduc", "link" : "provingground\/translation\/TermToExpr$.html#fromFormalInduc(term:provingground.HoTT.Term):(provingground.HoTT.Typ[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]])", "kind" : "def"}, {"label" : "formalIdInduc", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], Typ[Term]]]] with Subs[FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], Typ[Term]]]]], Func[FuncLike[Term with Subs[Term] with Subs[Term with Subs[Term]], Term] with Subs[FuncLike[Term with Subs[Term] with Subs[Term with Subs[Term]], Term]], FuncLike[Term with Subs[Term] with Subs[Term with Subs[Term]], FuncLike[Term with Subs[Term] with Subs[Term with Subs[Term]], Func[Term with Subs[Term], Term]]]] with Subs[Func[FuncLike[Term with Subs[Term] with Subs[Term with Subs[Term]], Term] with Subs[FuncLike[Term with Subs[Term] with Subs[Term with Subs[Term]], Term]], FuncLike[Term with Subs[Term] with Subs[Term with Subs[Term]], FuncLike[Term with Subs[Term] with Subs[Term with Subs[Term]], Func[Term with Subs[Term], Term]]]]]]]", "member" : "provingground.translation.TermToExpr.formalIdInduc", "link" : "provingground\/translation\/TermToExpr$.html#formalIdInduc:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Typ[provingground.HoTT.Term]]]]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Typ[provingground.HoTT.Term]]]]],provingground.HoTT.Func[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]],provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]],provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]],provingground.HoTT.Func[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]]]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]],provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]],provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]],provingground.HoTT.Func[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]]]]]]]", "kind" : "val"}, {"label" : "idInduc", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], Typ[Term]]]] with Subs[FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], Typ[Term]]]]], Func[FuncLike[Term with Subs[Term] with Subs[Term with Subs[Term]], Term] with Subs[FuncLike[Term with Subs[Term] with Subs[Term with Subs[Term]], Term]], FuncLike[Term with Subs[Term] with Subs[Term with Subs[Term]], FuncLike[Term with Subs[Term] with Subs[Term with Subs[Term]], Func[Term with Subs[Term], Term]]]]]]", "member" : "provingground.translation.TermToExpr.idInduc", "link" : "provingground\/translation\/TermToExpr$.html#idInduc:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Typ[provingground.HoTT.Term]]]]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Typ[provingground.HoTT.Term]]]]],provingground.HoTT.Func[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]],provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]],provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]],provingground.HoTT.Func[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]]]]]]", "kind" : "val"}, {"label" : "formalIdRec", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Typ[Term] with Subs[Typ[Term]], U with Subs[U]]] forSome {type U >: _1.type <: Term with Subs[U], val _1: Term}", "member" : "provingground.translation.TermToExpr.formalIdRec", "link" : "provingground\/translation\/TermToExpr$.html#formalIdRec:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],Uwithprovingground.HoTT.Subs[U]]]forSome{typeU>:_1.type<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U];val_1:provingground.HoTT.Term}", "kind" : "val"}, {"label" : "idRec", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Typ[Term] with Subs[Typ[Term]], Term]]", "member" : "provingground.translation.TermToExpr.idRec", "link" : "provingground\/translation\/TermToExpr$.html#idRec:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "formalRefl", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Term with Subs[Term], Term]] with Subs[FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Term with Subs[Term], Term]]]", "member" : "provingground.translation.TermToExpr.formalRefl", "link" : "provingground\/translation\/TermToExpr$.html#formalRefl:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "reflFn", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Term with Subs[Term], Refl[Term with Subs[Term]]]]", "member" : "provingground.translation.TermToExpr.reflFn", "link" : "provingground\/translation\/TermToExpr$.html#reflFn:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Refl[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/TermToExpr$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/TermToExpr$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/TermToExpr$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/TermToExpr$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/TermToExpr$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/TermToExpr$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/TermToExpr$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TermToExpr$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TermToExpr$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TermToExpr$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/TermToExpr$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/TermToExpr$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/TermToExpr$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/TermToExpr$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/TermToExpr$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/TermToExpr$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/TermToExpr$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/TermToExpr$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/TermToExpr$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/translation\/TermToExpr.html", "kind" : "class"}, {"name" : "provingground.translation.TestTrait", "shortDescription" : "", "object" : "provingground\/translation\/TestTrait$.html", "members_object" : [{"label" : "B", "tail" : "", "member" : "provingground.translation.TestTrait.B", "link" : "provingground\/translation\/TestTrait$.html#BextendsTestTrait.AwithProductwithSerializable", "kind" : "case class"}, {"label" : "C", "tail" : "", "member" : "provingground.translation.TestTrait.C", "link" : "provingground\/translation\/TestTrait$.html#C", "kind" : "object"}, {"label" : "A", "tail" : "", "member" : "provingground.translation.TestTrait.A", "link" : "provingground\/translation\/TestTrait$.html#AextendsAnyRef", "kind" : "sealed trait"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/TestTrait$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/TestTrait$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/TestTrait$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/TestTrait$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/TestTrait$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/TestTrait$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/TestTrait$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TestTrait$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TestTrait$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TestTrait$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/TestTrait$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/TestTrait$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/TestTrait$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/TestTrait$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/TestTrait$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/TestTrait$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/TestTrait$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/TestTrait$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/TestTrait$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.translation.TeXTranslate", "shortDescription" : "", "object" : "provingground\/translation\/TeXTranslate$.html", "members_object" : [{"label" : "texTrans", "tail" : ": OrElse[Term, String]", "member" : "provingground.translation.TeXTranslate.texTrans", "link" : "provingground\/translation\/TeXTranslate$.html#texTrans:provingground.translation.Translator.OrElse[provingground.HoTT.Term,String]", "kind" : "val"}, {"label" : "apply", "tail" : "(x: Term): String", "member" : "provingground.translation.TeXTranslate.apply", "link" : "provingground\/translation\/TeXTranslate$.html#apply(x:provingground.HoTT.Term):String", "kind" : "def"}, {"label" : "syms", "tail" : ": UnicodeSyms.type", "member" : "provingground.translation.TeXTranslate.syms", "link" : "provingground\/translation\/TeXTranslate$.html#syms:provingground.HoTT.UnicodeSyms.type", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/TeXTranslate$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/TeXTranslate$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/TeXTranslate$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/TeXTranslate$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/TeXTranslate$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/TeXTranslate$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/TeXTranslate$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TeXTranslate$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TeXTranslate$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TeXTranslate$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/TeXTranslate$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/TeXTranslate$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/TeXTranslate$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/TeXTranslate$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/TeXTranslate$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/TeXTranslate$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/TeXTranslate$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/TeXTranslate$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/TeXTranslate$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.translation.TextToInt", "shortDescription" : "Converts prose numbers to Integers without checking for bad cases", "object" : "provingground\/translation\/TextToInt$.html", "members_object" : [{"label" : "stringNumber", "tail" : "(t: String): Long", "member" : "provingground.translation.TextToInt.stringNumber", "link" : "provingground\/translation\/TextToInt$.html#stringNumber(t:String):Long", "kind" : "def"}, {"label" : "splitString", "tail" : "(t: String): List[String]", "member" : "provingground.translation.TextToInt.splitString", "link" : "provingground\/translation\/TextToInt$.html#splitString(t:String):List[String]", "kind" : "def"}, {"label" : "wordListNumber", "tail" : "(l: List[String]): Long", "member" : "provingground.translation.TextToInt.wordListNumber", "link" : "provingground\/translation\/TextToInt$.html#wordListNumber(l:List[String]):Long", "kind" : "def"}, {"label" : "wordNum", "tail" : "(w: String): Long", "member" : "provingground.translation.TextToInt.wordNum", "link" : "provingground\/translation\/TextToInt$.html#wordNum(w:String):Long", "kind" : "def"}, {"label" : "Int", "tail" : "", "member" : "provingground.translation.TextToInt.Int", "link" : "provingground\/translation\/TextToInt$.html#Int", "kind" : "object"}, {"label" : "Long", "tail" : "", "member" : "provingground.translation.TextToInt.Long", "link" : "provingground\/translation\/TextToInt$.html#Long", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/TextToInt$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/TextToInt$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/TextToInt$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/TextToInt$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/TextToInt$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/TextToInt$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/TextToInt$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TextToInt$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TextToInt$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TextToInt$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/TextToInt$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/TextToInt$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/TextToInt$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/TextToInt$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/TextToInt$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/TextToInt$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/TextToInt$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/TextToInt$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/TextToInt$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.translation.Translator", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/translation\/Translator.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/translation\/Translator.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Translator[I, O]) ⇒ Boolean, msg: ⇒ Any): Translator[I, O]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/Translator.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Translator[I, O]) ⇒ Boolean): Translator[I, O]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/Translator.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Translator[I, O]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/Translator.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Translator[I, O]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/Translator.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Translator[I, O], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/translation\/Translator.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Translator[I, O], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/translation\/Translator.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "map", "tail" : "(fn: (O) ⇒ X, ufn: (X) ⇒ O): Mapped[I, O, X]", "member" : "provingground.translation.Translator.map", "link" : "provingground\/translation\/Translator.html#map[X](fn:O=>X,ufn:X=>O):provingground.translation.Translator.Mapped[I,O,X]", "kind" : "def"}, {"label" : "||:", "tail" : "(that: Translator[I, O]): OrElse[I, O]", "member" : "provingground.translation.Translator.||:", "link" : "provingground\/translation\/Translator.html#||:(that:provingground.translation.Translator[I,O]):provingground.translation.Translator.OrElse[I,O]", "kind" : "def"}, {"label" : "||", "tail" : "(that: Translator[I, O]): OrElse[I, O]", "member" : "provingground.translation.Translator.||", "link" : "provingground\/translation\/Translator.html#||(that:provingground.translation.Translator[I,O]):provingground.translation.Translator.OrElse[I,O]", "kind" : "def"}, {"label" : "elseOr", "tail" : "(that: Translator[I, O]): OrElse[I, O]", "member" : "provingground.translation.Translator.elseOr", "link" : "provingground\/translation\/Translator.html#elseOr(that:provingground.translation.Translator[I,O]):provingground.translation.Translator.OrElse[I,O]", "kind" : "def"}, {"label" : "orElse", "tail" : "(that: Translator[I, O]): OrElse[I, O]", "member" : "provingground.translation.Translator.orElse", "link" : "provingground\/translation\/Translator.html#orElse(that:provingground.translation.Translator[I,O]):provingground.translation.Translator.OrElse[I,O]", "kind" : "def"}, {"label" : "apply", "tail" : "(inp: I): Option[O]", "member" : "provingground.translation.Translator.apply", "link" : "provingground\/translation\/Translator.html#apply(inp:I):Option[O]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Function1.toString", "link" : "provingground\/translation\/Translator.html#toString():String", "kind" : "def"}, {"label" : "andThen", "tail" : "(g: (Option[O]) ⇒ A): (I) ⇒ A", "member" : "scala.Function1.andThen", "link" : "provingground\/translation\/Translator.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) ⇒ I): (A) ⇒ Option[O]", "member" : "scala.Function1.compose", "link" : "provingground\/translation\/Translator.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/Translator.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/Translator.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/Translator.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/Translator.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/Translator.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/Translator.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/Translator.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Translator.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Translator.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Translator.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/Translator.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/Translator.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/Translator.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/Translator.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/Translator.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/Translator.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/Translator.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/Translator.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "recTranslate", "tail" : "(leafMap: ⇒ (I) ⇒ Option[O]): (I) ⇒ Option[O]", "member" : "provingground.translation.Translator.recTranslate", "link" : "provingground\/translation\/Translator.html#recTranslate(leafMap:=>I=>Option[O]):I=>Option[O]", "kind" : "abstract def"}], "shortDescription" : "recursive  translation from one scala type to the other, allowing mixing in cases;the abstract method applies to leaves, and a concrete one is obtained by taking a diagonal.", "object" : "provingground\/translation\/Translator$.html", "members_object" : [{"label" : "VarWord", "tail" : "", "member" : "provingground.translation.Translator.VarWord", "link" : "provingground\/translation\/Translator$.html#VarWord[X[_],S]extendsProductwithSerializable", "kind" : "case class"}, {"label" : "Pattern", "tail" : "", "member" : "provingground.translation.Translator.Pattern", "link" : "provingground\/translation\/Translator$.html#Pattern", "kind" : "object"}, {"label" : "Pattern", "tail" : "", "member" : "provingground.translation.Translator.Pattern", "link" : "provingground\/translation\/Translator$.html#Pattern[I,X[_]]extendsAnyRef", "kind" : "class"}, {"label" : "Builder", "tail" : "", "member" : "provingground.translation.Translator.Builder", "link" : "provingground\/translation\/Translator$.html#Builder[O,X[_]]extendsProductwithSerializable", "kind" : "case class"}, {"label" : "Mapped", "tail" : "", "member" : "provingground.translation.Translator.Mapped", "link" : "provingground\/translation\/Translator$.html#Mapped[I,O,X]extendsTranslator[I,X]withProductwithSerializable", "kind" : "case class"}, {"label" : "PolyJunction", "tail" : "", "member" : "provingground.translation.Translator.PolyJunction", "link" : "provingground\/translation\/Translator$.html#PolyJunction[I,O,X[_]]extendsTranslator[I,O]withProductwithSerializable", "kind" : "case class"}, {"label" : "Junction", "tail" : "", "member" : "provingground.translation.Translator.Junction", "link" : "provingground\/translation\/Translator$.html#Junction[I,O,X[_]]extendsTranslator[I,O]withProductwithSerializable", "kind" : "case class"}, {"label" : "OrElse", "tail" : "", "member" : "provingground.translation.Translator.OrElse", "link" : "provingground\/translation\/Translator$.html#OrElse[I,O]extendsTranslator[I,O]withProductwithSerializable", "kind" : "case class"}, {"label" : "Empty", "tail" : "", "member" : "provingground.translation.Translator.Empty", "link" : "provingground\/translation\/Translator$.html#Empty[I,O]extendsTranslator[I,O]withProductwithSerializable", "kind" : "case class"}, {"label" : "connect", "tail" : "(pattern: (I) ⇒ Option[S], literal: (S) ⇒ Option[O]): Simple[I, O]", "member" : "provingground.translation.Translator.connect", "link" : "provingground\/translation\/Translator$.html#connect[I,O,S](pattern:I=>Option[S],literal:S=>Option[O]):provingground.translation.Translator.Simple[I,O]", "kind" : "def"}, {"label" : "Simple", "tail" : "", "member" : "provingground.translation.Translator.Simple", "link" : "provingground\/translation\/Translator$.html#Simple[I,O]extendsTranslator[I,O]withProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/Translator$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/Translator$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/Translator$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/Translator$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/Translator$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/Translator$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/Translator$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Translator$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Translator$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Translator$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/Translator$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/Translator$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/Translator$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/Translator$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/Translator$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/Translator$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/Translator$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/Translator$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/Translator$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/translation\/Translator.html", "kind" : "trait"}, {"name" : "provingground.translation.Vocabulary", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/translation\/Vocabulary.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/translation\/Vocabulary.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Vocabulary[E, C]) ⇒ Boolean, msg: ⇒ Any): Vocabulary[E, C]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/Vocabulary.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Vocabulary[E, C]) ⇒ Boolean): Vocabulary[E, C]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/Vocabulary.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Vocabulary[E, C]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/Vocabulary.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Vocabulary[E, C]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/translation\/Vocabulary.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Vocabulary[E, C], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/translation\/Vocabulary.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Vocabulary[E, C], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/translation\/Vocabulary.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/Vocabulary.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/Vocabulary.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/Vocabulary.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/Vocabulary.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/Vocabulary.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/Vocabulary.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/Vocabulary.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Vocabulary.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Vocabulary.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Vocabulary.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/Vocabulary.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/Vocabulary.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/Vocabulary.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/Vocabulary.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/Vocabulary.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/Vocabulary.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/Vocabulary.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/Vocabulary.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/Vocabulary.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "vocab", "tail" : "(name: String, context: C): Option[E]", "member" : "provingground.translation.Vocabulary.vocab", "link" : "provingground\/translation\/Vocabulary.html#vocab(name:String,context:C):Option[E]", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "provingground\/translation\/Vocabulary.html", "kind" : "trait"}], "provingground.library" : [{"name" : "provingground.library.BinTrees", "shortDescription" : "", "object" : "provingground\/library\/BinTrees$.html", "members_object" : [{"label" : "leaves", "tail" : ": Func[Term, Term]", "member" : "provingground.library.BinTrees.leaves", "link" : "provingground\/library\/BinTrees$.html#leaves:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]", "kind" : "val"}, {"label" : "g", "tail" : ": Func[Term, Term] with Subs[Func[Term, Term]]", "member" : "provingground.library.BinTrees.g", "link" : "provingground\/library\/BinTrees$.html#g:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "f", "tail" : ": Func[Term, Term] with Subs[Func[Term, Term]]", "member" : "provingground.library.BinTrees.f", "link" : "provingground\/library\/BinTrees$.html#f:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "recBTN", "tail" : ": Func[Term, Func[Func[Func[Term, Term], Func[Func[Term, Term], Term]], Func[Term, Term]]]", "member" : "provingground.library.BinTrees.recBTN", "link" : "provingground\/library\/BinTrees$.html#recBTN:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Func[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term],provingground.HoTT.Term]],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "node", "tail" : ": Func[Func[Term, Term], Term]", "member" : "provingground.library.BinTrees.node", "link" : "provingground\/library\/BinTrees$.html#node:provingground.HoTT.Func[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term],provingground.HoTT.Term]", "kind" : "val"}, {"label" : "leaf", "tail" : ": Term", "member" : "provingground.library.BinTrees.leaf", "link" : "provingground\/library\/BinTrees$.html#leaf:provingground.HoTT.Term", "kind" : "val"}, {"label" : "BTInd", "tail" : ": ConstructorSeqTL[::[HNil, ::[::[FuncConsShape.type, HNil], HNil]], Term, ::[Term, ::[Func[Func[Term, Term], Term], HNil]]]", "member" : "provingground.library.BinTrees.BTInd", "link" : "provingground\/library\/BinTrees$.html#BTInd:provingground.induction.ConstructorSeqTL[shapeless.HNil::(provingground.induction.ConstructorShape.FuncConsShape.type::shapeless.HNil)::shapeless.HNil,provingground.HoTT.Term,provingground.HoTT.Term::provingground.HoTT.Func[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term],provingground.HoTT.Term]::shapeless.HNil]", "kind" : "val"}, {"label" : "BT", "tail" : ": Typ[Term] with Subs[Typ[Term]]", "member" : "provingground.library.BinTrees.BT", "link" : "provingground\/library\/BinTrees$.html#BT:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/library\/BinTrees$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/library\/BinTrees$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/library\/BinTrees$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/library\/BinTrees$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/library\/BinTrees$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/library\/BinTrees$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/library\/BinTrees$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/BinTrees$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/BinTrees$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/BinTrees$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/library\/BinTrees$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/library\/BinTrees$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/library\/BinTrees$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/library\/BinTrees$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/library\/BinTrees$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/library\/BinTrees$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/library\/BinTrees$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/library\/BinTrees$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/library\/BinTrees$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.library.Bools", "shortDescription" : "", "object" : "provingground\/library\/Bools$.html", "members_object" : [{"label" : "or", "tail" : ": Func[Term, Func[Term, Term]]", "member" : "provingground.library.Bools.or", "link" : "provingground\/library\/Bools$.html#or:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "and", "tail" : ": Func[Term, Func[Term, Term]]", "member" : "provingground.library.Bools.and", "link" : "provingground\/library\/Bools$.html#and:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "recBBB", "tail" : ": Func[Func[Term, Term], Func[Func[Term, Term], Func[Term, Func[Term, Term]]]]", "member" : "provingground.library.Bools.recBBB", "link" : "provingground\/library\/Bools$.html#recBBB:provingground.HoTT.Func[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]]", "kind" : "val"}, {"label" : "b", "tail" : ": Term with Subs[Term]", "member" : "provingground.library.Bools.b", "link" : "provingground\/library\/Bools$.html#b:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "not", "tail" : ": Func[Term, Term]", "member" : "provingground.library.Bools.not", "link" : "provingground\/library\/Bools$.html#not:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]", "kind" : "val"}, {"label" : "recBoolBool", "tail" : ": Func[Term, Func[Term, Func[Term, Term]]]", "member" : "provingground.library.Bools.recBoolBool", "link" : "provingground\/library\/Bools$.html#recBoolBool:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "ff", "tail" : ": Term", "member" : "provingground.library.Bools.ff", "link" : "provingground\/library\/Bools$.html#ff:provingground.HoTT.Term", "kind" : "val"}, {"label" : "tt", "tail" : ": Term", "member" : "provingground.library.Bools.tt", "link" : "provingground\/library\/Bools$.html#tt:provingground.HoTT.Term", "kind" : "val"}, {"label" : "BoolInd", "tail" : ": ConstructorSeqTL[::[HNil, ::[HNil, HNil]], Term, ::[Term, ::[Term, HNil]]]", "member" : "provingground.library.Bools.BoolInd", "link" : "provingground\/library\/Bools$.html#BoolInd:provingground.induction.ConstructorSeqTL[shapeless.HNil::shapeless.HNil::shapeless.HNil,provingground.HoTT.Term,provingground.HoTT.Term::provingground.HoTT.Term::shapeless.HNil]", "kind" : "val"}, {"label" : "Bool", "tail" : ": Typ[Term] with Subs[Typ[Term]]", "member" : "provingground.library.Bools.Bool", "link" : "provingground\/library\/Bools$.html#Bool:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/library\/Bools$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/library\/Bools$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/library\/Bools$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/library\/Bools$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/library\/Bools$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/library\/Bools$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/library\/Bools$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/Bools$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/Bools$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/Bools$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/library\/Bools$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/library\/Bools$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/library\/Bools$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/library\/Bools$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/library\/Bools$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/library\/Bools$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/library\/Bools$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/library\/Bools$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/library\/Bools$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.library.DoubleEven", "shortDescription" : "", "object" : "provingground\/library\/DoubleEven$.html", "members_object" : [{"label" : "pf", "tail" : ": FuncLike[Term with Subs[Term], Term]", "member" : "provingground.library.DoubleEven.pf", "link" : "provingground\/library\/DoubleEven$.html#pf:provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]", "kind" : "val"}, {"label" : "inductor", "tail" : ": Func[Term, Func[FuncLike[Term, Func[Term, Term]], FuncLike[Term, Term]]]", "member" : "provingground.library.DoubleEven.inductor", "link" : "provingground\/library\/DoubleEven$.html#inductor:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "hyp", "tail" : ": Term with Subs[Term]", "member" : "provingground.library.DoubleEven.hyp", "link" : "provingground\/library\/DoubleEven$.html#hyp:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "thm", "tail" : ": GenFuncTyp[Term with Subs[Term], Term]", "member" : "provingground.library.DoubleEven.thm", "link" : "provingground\/library\/DoubleEven$.html#thm:provingground.HoTT.GenFuncTyp[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/library\/DoubleEven$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/library\/DoubleEven$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/library\/DoubleEven$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/library\/DoubleEven$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/library\/DoubleEven$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/library\/DoubleEven$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/library\/DoubleEven$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/DoubleEven$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/DoubleEven$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/DoubleEven$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/library\/DoubleEven$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/library\/DoubleEven$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/library\/DoubleEven$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/library\/DoubleEven$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/library\/DoubleEven$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/library\/DoubleEven$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/library\/DoubleEven$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/library\/DoubleEven$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/library\/DoubleEven$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.library.Group", "shortDescription" : "", "object" : "provingground\/library\/Group$.html", "members_object" : [{"label" : "rInv", "tail" : ": GenFuncTyp[Term with Subs[Term], Term]", "member" : "provingground.library.Group.rInv", "link" : "provingground\/library\/Group$.html#rInv:provingground.HoTT.GenFuncTyp[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]", "kind" : "val"}, {"label" : "lInv", "tail" : ": GenFuncTyp[Term with Subs[Term], Term]", "member" : "provingground.library.Group.lInv", "link" : "provingground\/library\/Group$.html#lInv:provingground.HoTT.GenFuncTyp[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]", "kind" : "val"}, {"label" : "i", "tail" : ": Func[Term, Term] with Subs[Func[Term, Term]]", "member" : "provingground.library.Group.i", "link" : "provingground\/library\/Group$.html#i:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/library\/Group$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/library\/Group$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/library\/Group$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/library\/Group$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/library\/Group$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/library\/Group$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/library\/Group$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/Group$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/Group$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/Group$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/library\/Group$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/library\/Group$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/library\/Group$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/library\/Group$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/library\/Group$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/library\/Group$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/library\/Group$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/library\/Group$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/library\/Group$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.library.Lists", "shortDescription" : "", "object" : "provingground\/library\/Lists$.html", "members_object" : [{"label" : "size", "tail" : ": Func[Term, Term]", "member" : "provingground.library.Lists.size", "link" : "provingground\/library\/Lists$.html#size:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]", "kind" : "val"}, {"label" : "l", "tail" : ": Term with Subs[Term]", "member" : "provingground.library.Lists.l", "link" : "provingground\/library\/Lists$.html#l:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "a", "tail" : ": Term with Subs[Term]", "member" : "provingground.library.Lists.a", "link" : "provingground\/library\/Lists$.html#a:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "recLN", "tail" : ": Func[Term, Func[Func[Term, Func[Term, Func[Term, Term]]], Func[Term, Term]]]", "member" : "provingground.library.Lists.recLN", "link" : "provingground\/library\/Lists$.html#recLN:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "cons", "tail" : ": Func[Term, Func[Term, Term]]", "member" : "provingground.library.Lists.cons", "link" : "provingground\/library\/Lists$.html#cons:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "nil", "tail" : ": Term", "member" : "provingground.library.Lists.nil", "link" : "provingground\/library\/Lists$.html#nil:provingground.HoTT.Term", "kind" : "val"}, {"label" : "ListAInd", "tail" : ": ConstructorSeqTL[::[HNil, ::[::[CnstFuncConsShape.type, ::[FuncConsShape.type, HNil]], HNil]], Term, ::[Term, ::[Func[Term, Func[Term, Term]], HNil]]]", "member" : "provingground.library.Lists.ListAInd", "link" : "provingground\/library\/Lists$.html#ListAInd:provingground.induction.ConstructorSeqTL[shapeless.HNil::(provingground.induction.ConstructorShape.CnstFuncConsShape.type::provingground.induction.ConstructorShape.FuncConsShape.type::shapeless.HNil)::shapeless.HNil,provingground.HoTT.Term,provingground.HoTT.Term::provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]::shapeless.HNil]", "kind" : "val"}, {"label" : "ListA", "tail" : ": Typ[Term] with Subs[Typ[Term]]", "member" : "provingground.library.Lists.ListA", "link" : "provingground\/library\/Lists$.html#ListA:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "A", "tail" : ": Typ[Term] with Subs[Typ[Term]]", "member" : "provingground.library.Lists.A", "link" : "provingground\/library\/Lists$.html#A:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/library\/Lists$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/library\/Lists$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/library\/Lists$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/library\/Lists$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/library\/Lists$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/library\/Lists$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/library\/Lists$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/Lists$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/Lists$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/Lists$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/library\/Lists$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/library\/Lists$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/library\/Lists$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/library\/Lists$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/library\/Lists$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/library\/Lists$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/library\/Lists$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/library\/Lists$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/library\/Lists$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.library.LocalConstImpliesConst", "shortDescription" : "", "object" : "provingground\/library\/LocalConstImpliesConst$.html", "members_object" : [{"label" : "pf", "tail" : ": FuncLike[Term with Subs[Term], Term]", "member" : "provingground.library.LocalConstImpliesConst.pf", "link" : "provingground\/library\/LocalConstImpliesConst$.html#pf:provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]", "kind" : "val"}, {"label" : "inductor", "tail" : ": Func[Term, Func[FuncLike[Term, Func[Term, Term]], FuncLike[Term, Term]]]", "member" : "provingground.library.LocalConstImpliesConst.inductor", "link" : "provingground\/library\/LocalConstImpliesConst$.html#inductor:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "thm", "tail" : ": GenFuncTyp[Term with Subs[Term], Term]", "member" : "provingground.library.LocalConstImpliesConst.thm", "link" : "provingground\/library\/LocalConstImpliesConst$.html#thm:provingground.HoTT.GenFuncTyp[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]", "kind" : "val"}, {"label" : "step", "tail" : ": Func[Term with Subs[Term], Term]", "member" : "provingground.library.LocalConstImpliesConst.step", "link" : "provingground\/library\/LocalConstImpliesConst$.html#step:provingground.HoTT.Func[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]", "kind" : "val"}, {"label" : "hyp", "tail" : ": Term with Subs[Term]", "member" : "provingground.library.LocalConstImpliesConst.hyp", "link" : "provingground\/library\/LocalConstImpliesConst$.html#hyp:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "base", "tail" : ": Refl[Term]", "member" : "provingground.library.LocalConstImpliesConst.base", "link" : "provingground\/library\/LocalConstImpliesConst$.html#base:provingground.HoTT.Refl[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "claim", "tail" : ": Func[Term with Subs[Term], IdentityTyp[Term]]", "member" : "provingground.library.LocalConstImpliesConst.claim", "link" : "provingground\/library\/LocalConstImpliesConst$.html#claim:provingground.HoTT.Func[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.IdentityTyp[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "ass", "tail" : ": FuncLike[Term with Subs[Term], Term] with Subs[FuncLike[Term with Subs[Term], Term]]", "member" : "provingground.library.LocalConstImpliesConst.ass", "link" : "provingground\/library\/LocalConstImpliesConst$.html#ass:provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "f", "tail" : ": Func[Term, Term] with Subs[Func[Term, Term]]", "member" : "provingground.library.LocalConstImpliesConst.f", "link" : "provingground\/library\/LocalConstImpliesConst$.html#f:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "A", "tail" : ": Typ[Term] with Subs[Typ[Term]]", "member" : "provingground.library.LocalConstImpliesConst.A", "link" : "provingground\/library\/LocalConstImpliesConst$.html#A:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/library\/LocalConstImpliesConst$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/library\/LocalConstImpliesConst$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/library\/LocalConstImpliesConst$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/library\/LocalConstImpliesConst$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/library\/LocalConstImpliesConst$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/library\/LocalConstImpliesConst$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/library\/LocalConstImpliesConst$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/LocalConstImpliesConst$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/LocalConstImpliesConst$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/LocalConstImpliesConst$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/library\/LocalConstImpliesConst$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/library\/LocalConstImpliesConst$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/library\/LocalConstImpliesConst$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/library\/LocalConstImpliesConst$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/library\/LocalConstImpliesConst$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/library\/LocalConstImpliesConst$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/library\/LocalConstImpliesConst$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/library\/LocalConstImpliesConst$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/library\/LocalConstImpliesConst$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.library.Monoid", "shortDescription" : "", "object" : "provingground\/library\/Monoid$.html", "members_object" : [{"label" : "sigma", "tail" : "(t: Term): Term with Subs[Term]", "member" : "provingground.library.Monoid.sigma", "link" : "provingground\/library\/Monoid$.html#sigma(t:provingground.HoTT.Term):provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "smooth", "tail" : "(fd: FiniteDistribution[Term]): FiniteDistribution[Term with Subs[Term]]", "member" : "provingground.library.Monoid.smooth", "link" : "provingground\/library\/Monoid$.html#smooth(fd:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.FiniteDistribution[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "ded", "tail" : ": Deducer", "member" : "provingground.library.Monoid.ded", "link" : "provingground\/library\/Monoid$.html#ded:provingground.learning.Deducer", "kind" : "val"}, {"label" : "smallDist", "tail" : ": FiniteDistribution[Term with Subs[Term]]", "member" : "provingground.library.Monoid.smallDist", "link" : "provingground\/library\/Monoid$.html#smallDist:provingground.FiniteDistribution[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "elemDist", "tail" : ": FiniteDistribution[Term with Subs[Term]]", "member" : "provingground.library.Monoid.elemDist", "link" : "provingground\/library\/Monoid$.html#elemDist:provingground.FiniteDistribution[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "dist", "tail" : ": FiniteDistribution[Term with Subs[Term]]", "member" : "provingground.library.Monoid.dist", "link" : "provingground\/library\/Monoid$.html#dist:provingground.FiniteDistribution[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "vars", "tail" : ": Vector[Term with Subs[Term]]", "member" : "provingground.library.Monoid.vars", "link" : "provingground\/library\/Monoid$.html#vars:scala.collection.immutable.Vector[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "elTyps", "tail" : ": Func[Term with Subs[Term], Func[Term with Subs[Term], IdentityTyp[Term with Subs[Term]]]]", "member" : "provingground.library.Monoid.elTyps", "link" : "provingground\/library\/Monoid$.html#elTyps:provingground.HoTT.Func[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.IdentityTyp[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]]]", "kind" : "val"}, {"label" : "names", "tail" : ": Vector[(FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Func[Term, Term] with Subs[Func[Term, Term]], FuncLike[Func[Term, Term] with Subs[Func[Term, Term]], FuncLike[Term with Subs[Term], Func[Term, Term]]]]]] with Subs[FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Func[Term, Term] with Subs[Func[Term, Term]], FuncLike[Func[Term, Term] with Subs[Func[Term, Term]], FuncLike[Term with Subs[Term], Func[Term, Term]]]]]]], String)]", "member" : "provingground.library.Monoid.names", "link" : "provingground\/library\/Monoid$.html#names:scala.collection.immutable.Vector[(provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]]]]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]]]]],String)]", "kind" : "val"}, {"label" : "transfer", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Func[Term, Term] with Subs[Func[Term, Term]], FuncLike[Func[Term, Term] with Subs[Func[Term, Term]], FuncLike[Term with Subs[Term], Func[Term, Term]]]]]] with Subs[FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Func[Term, Term] with Subs[Func[Term, Term]], FuncLike[Func[Term, Term] with Subs[Func[Term, Term]], FuncLike[Term with Subs[Term], Func[Term, Term]]]]]]]", "member" : "provingground.library.Monoid.transfer", "link" : "provingground\/library\/Monoid$.html#transfer:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]]]]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]]]]]", "kind" : "val"}, {"label" : "extensionality", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Func[Term, Term] with Subs[Func[Term, Term]], FuncLike[Term with Subs[Term] with Subs[Term with Subs[Term]], FuncLike[Term with Subs[Term] with Subs[Term with Subs[Term]], Func[Term with Subs[Term], Term]]]]]]", "member" : "provingground.library.Monoid.extensionality", "link" : "provingground\/library\/Monoid$.html#extensionality:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]],provingground.HoTT.Func[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]]]]]]", "kind" : "val"}, {"label" : "x", "tail" : ": Term with Subs[Term]", "member" : "provingground.library.Monoid.x", "link" : "provingground\/library\/Monoid$.html#x:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "g", "tail" : ": Func[Term, Term] with Subs[Func[Term, Term]]", "member" : "provingground.library.Monoid.g", "link" : "provingground\/library\/Monoid$.html#g:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "f", "tail" : ": Func[Term, Term] with Subs[Func[Term, Term]]", "member" : "provingground.library.Monoid.f", "link" : "provingground\/library\/Monoid$.html#f:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "Y", "tail" : ": Typ[Term] with Subs[Typ[Term]]", "member" : "provingground.library.Monoid.Y", "link" : "provingground\/library\/Monoid$.html#Y:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "X", "tail" : ": Typ[Term] with Subs[Typ[Term]]", "member" : "provingground.library.Monoid.X", "link" : "provingground\/library\/Monoid$.html#X:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "MVars", "tail" : ": Vector[Weighted[Term]]", "member" : "provingground.library.Monoid.MVars", "link" : "provingground\/library\/Monoid$.html#MVars:scala.collection.immutable.Vector[provingground.Weighted[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "assoc", "tail" : ": FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], Term]]] with Subs[FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], Term]]]]", "member" : "provingground.library.Monoid.assoc", "link" : "provingground\/library\/Monoid$.html#assoc:provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]]]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]]]]", "kind" : "val"}, {"label" : "idUnique", "tail" : ": GenFuncTyp[Term with Subs[Term], Func[FuncLike[Term with Subs[Term], Term], Term]]", "member" : "provingground.library.Monoid.idUnique", "link" : "provingground\/library\/Monoid$.html#idUnique:provingground.HoTT.GenFuncTyp[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term],provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "refl", "tail" : ": FuncLike[Term with Subs[Term], Refl[Term with Subs[Term]]]", "member" : "provingground.library.Monoid.refl", "link" : "provingground\/library\/Monoid$.html#refl:provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Refl[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "rightId", "tail" : ": FuncLike[Term with Subs[Term], Term] with Subs[FuncLike[Term with Subs[Term], Term]]", "member" : "provingground.library.Monoid.rightId", "link" : "provingground\/library\/Monoid$.html#rightId:provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "leftId", "tail" : ": FuncLike[Term with Subs[Term], Term] with Subs[FuncLike[Term with Subs[Term], Term]]", "member" : "provingground.library.Monoid.leftId", "link" : "provingground\/library\/Monoid$.html#leftId:provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "op", "tail" : ": Func[Term, Func[Term, Term]] with Subs[Func[Term, Func[Term, Term]]]", "member" : "provingground.library.Monoid.op", "link" : "provingground\/library\/Monoid$.html#op:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "r", "tail" : ": Term with Subs[Term]", "member" : "provingground.library.Monoid.r", "link" : "provingground\/library\/Monoid$.html#r:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "l", "tail" : ": Term with Subs[Term]", "member" : "provingground.library.Monoid.l", "link" : "provingground\/library\/Monoid$.html#l:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "c", "tail" : ": Term with Subs[Term]", "member" : "provingground.library.Monoid.c", "link" : "provingground\/library\/Monoid$.html#c:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "b", "tail" : ": Term with Subs[Term]", "member" : "provingground.library.Monoid.b", "link" : "provingground\/library\/Monoid$.html#b:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "a", "tail" : ": Term with Subs[Term]", "member" : "provingground.library.Monoid.a", "link" : "provingground\/library\/Monoid$.html#a:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "trans", "tail" : ": FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], Func[Term with Subs[Term], Func[Term, Term]]]]]", "member" : "provingground.library.Monoid.trans", "link" : "provingground\/library\/Monoid$.html#trans:provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]]]", "kind" : "val"}, {"label" : "sym", "tail" : ": FuncLike[Term with Subs[Term] with Subs[Term with Subs[Term]], FuncLike[Term with Subs[Term] with Subs[Term with Subs[Term]], Func[Term with Subs[Term], Term]]]", "member" : "provingground.library.Monoid.sym", "link" : "provingground\/library\/Monoid$.html#sym:provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]],provingground.HoTT.Func[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "M", "tail" : ": Typ[Term] with Subs[Typ[Term]]", "member" : "provingground.library.Monoid.M", "link" : "provingground\/library\/Monoid$.html#M:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/library\/Monoid$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/library\/Monoid$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/library\/Monoid$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/library\/Monoid$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/library\/Monoid$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/library\/Monoid$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/library\/Monoid$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/Monoid$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/Monoid$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/Monoid$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/library\/Monoid$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/library\/Monoid$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/library\/Monoid$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/library\/Monoid$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/library\/Monoid$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/library\/Monoid$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/library\/Monoid$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/library\/Monoid$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/library\/Monoid$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.library.MonoidSimple", "shortDescription" : "", "object" : "provingground\/library\/MonoidSimple$.html", "members_object" : [{"label" : "elemDist", "tail" : ": FiniteDistribution[Term with Subs[Term]]", "member" : "provingground.library.MonoidSimple.elemDist", "link" : "provingground\/library\/MonoidSimple$.html#elemDist:provingground.FiniteDistribution[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "assoc", "tail" : ": FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], Term]]] with Subs[FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], Term]]]]", "member" : "provingground.library.MonoidSimple.assoc", "link" : "provingground\/library\/MonoidSimple$.html#assoc:provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]]]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]]]]", "kind" : "val"}, {"label" : "dist", "tail" : ": FiniteDistribution[Term]", "member" : "provingground.library.MonoidSimple.dist", "link" : "provingground\/library\/MonoidSimple$.html#dist:provingground.FiniteDistribution[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "refl", "tail" : ": FuncLike[Term with Subs[Term], Term] with Subs[FuncLike[Term with Subs[Term], Term]]", "member" : "provingground.library.MonoidSimple.refl", "link" : "provingground\/library\/MonoidSimple$.html#refl:provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "rightId", "tail" : ": FuncLike[Term with Subs[Term], Term] with Subs[FuncLike[Term with Subs[Term], Term]]", "member" : "provingground.library.MonoidSimple.rightId", "link" : "provingground\/library\/MonoidSimple$.html#rightId:provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "leftId", "tail" : ": FuncLike[Term with Subs[Term], Term] with Subs[FuncLike[Term with Subs[Term], Term]]", "member" : "provingground.library.MonoidSimple.leftId", "link" : "provingground\/library\/MonoidSimple$.html#leftId:provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "op", "tail" : ": Func[Term, Func[Term, Term]] with Subs[Func[Term, Func[Term, Term]]]", "member" : "provingground.library.MonoidSimple.op", "link" : "provingground\/library\/MonoidSimple$.html#op:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "r", "tail" : ": Term with Subs[Term]", "member" : "provingground.library.MonoidSimple.r", "link" : "provingground\/library\/MonoidSimple$.html#r:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "l", "tail" : ": Term with Subs[Term]", "member" : "provingground.library.MonoidSimple.l", "link" : "provingground\/library\/MonoidSimple$.html#l:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "trans", "tail" : ": FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], Func[Term, Func[Term, Term]]]]] with Subs[FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], Func[Term, Func[Term, Term]]]]]]", "member" : "provingground.library.MonoidSimple.trans", "link" : "provingground\/library\/MonoidSimple$.html#trans:provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]]]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]]]]", "kind" : "val"}, {"label" : "sym", "tail" : ": FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], Func[Term, Term]]] with Subs[FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], Func[Term, Term]]]]", "member" : "provingground.library.MonoidSimple.sym", "link" : "provingground\/library\/MonoidSimple$.html#sym:provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]]", "kind" : "val"}, {"label" : "c", "tail" : ": Term with Subs[Term]", "member" : "provingground.library.MonoidSimple.c", "link" : "provingground\/library\/MonoidSimple$.html#c:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "b", "tail" : ": Term with Subs[Term]", "member" : "provingground.library.MonoidSimple.b", "link" : "provingground\/library\/MonoidSimple$.html#b:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "a", "tail" : ": Term with Subs[Term]", "member" : "provingground.library.MonoidSimple.a", "link" : "provingground\/library\/MonoidSimple$.html#a:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "eqM", "tail" : ": Func[Term, Func[Term, Typ[Term]]] with Subs[Func[Term, Func[Term, Typ[Term]]]]", "member" : "provingground.library.MonoidSimple.eqM", "link" : "provingground\/library\/MonoidSimple$.html#eqM:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]]]", "kind" : "val"}, {"label" : "M", "tail" : ": Typ[Term] with Subs[Typ[Term]]", "member" : "provingground.library.MonoidSimple.M", "link" : "provingground\/library\/MonoidSimple$.html#M:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/library\/MonoidSimple$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/library\/MonoidSimple$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/library\/MonoidSimple$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/library\/MonoidSimple$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/library\/MonoidSimple$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/library\/MonoidSimple$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/library\/MonoidSimple$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/MonoidSimple$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/MonoidSimple$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/MonoidSimple$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/library\/MonoidSimple$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/library\/MonoidSimple$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/library\/MonoidSimple$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/library\/MonoidSimple$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/library\/MonoidSimple$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/library\/MonoidSimple$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/library\/MonoidSimple$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/library\/MonoidSimple$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/library\/MonoidSimple$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.library.Nats", "shortDescription" : "", "object" : "provingground\/library\/Nats$.html", "members_object" : [{"label" : "ack", "tail" : ": Func[Term, Func[Term, Term]]", "member" : "provingground.library.Nats.ack", "link" : "provingground\/library\/Nats$.html#ack:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "ackmp1n", "tail" : ": Term with Subs[Term]", "member" : "provingground.library.Nats.ackmp1n", "link" : "provingground\/library\/Nats$.html#ackmp1n:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "ackm", "tail" : ": Func[Term, Term] with Subs[Func[Term, Term]]", "member" : "provingground.library.Nats.ackm", "link" : "provingground\/library\/Nats$.html#ackm:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "sumTo", "tail" : ": Func[Term, Term]", "member" : "provingground.library.Nats.sumTo", "link" : "provingground\/library\/Nats$.html#sumTo:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]", "kind" : "lazy val"}, {"label" : "add", "tail" : ": Func[Term, Func[Term, Term]]", "member" : "provingground.library.Nats.add", "link" : "provingground\/library\/Nats$.html#add:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "addn", "tail" : ": Func[Term, Term] with Subs[Func[Term, Term]]", "member" : "provingground.library.Nats.addn", "link" : "provingground\/library\/Nats$.html#addn:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "recNNN", "tail" : ": Func[Func[Term, Term], Func[Func[Term, Func[Func[Term, Term], Func[Term, Term]]], Func[Term, Func[Term, Term]]]]", "member" : "provingground.library.Nats.recNNN", "link" : "provingground\/library\/Nats$.html#recNNN:provingground.HoTT.Func[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]]", "kind" : "val"}, {"label" : "double", "tail" : ": Func[Term, Term]", "member" : "provingground.library.Nats.double", "link" : "provingground\/library\/Nats$.html#double:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]", "kind" : "val"}, {"label" : "recNN", "tail" : ": Func[Term, Func[Func[Term, Func[Term, Term]], Func[Term, Term]]]", "member" : "provingground.library.Nats.recNN", "link" : "provingground\/library\/Nats$.html#recNN:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "m", "tail" : ": Term with Subs[Term]", "member" : "provingground.library.Nats.m", "link" : "provingground\/library\/Nats$.html#m:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "n", "tail" : ": Term with Subs[Term]", "member" : "provingground.library.Nats.n", "link" : "provingground\/library\/Nats$.html#n:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "N", "tail" : ": Stream[Term]", "member" : "provingground.library.Nats.N", "link" : "provingground\/library\/Nats$.html#N:scala.collection.immutable.Stream[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "succ", "tail" : ": Func[Term, Term]", "member" : "provingground.library.Nats.succ", "link" : "provingground\/library\/Nats$.html#succ:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]", "kind" : "val"}, {"label" : "zero", "tail" : ": Term", "member" : "provingground.library.Nats.zero", "link" : "provingground\/library\/Nats$.html#zero:provingground.HoTT.Term", "kind" : "val"}, {"label" : "NatInd", "tail" : ": ConstructorSeqTL[::[HNil, ::[::[FuncConsShape.type, HNil], HNil]], Term, ::[Term, ::[Func[Term, Term], HNil]]]", "member" : "provingground.library.Nats.NatInd", "link" : "provingground\/library\/Nats$.html#NatInd:provingground.induction.ConstructorSeqTL[shapeless.HNil::(provingground.induction.ConstructorShape.FuncConsShape.type::shapeless.HNil)::shapeless.HNil,provingground.HoTT.Term,provingground.HoTT.Term::provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]::shapeless.HNil]", "kind" : "val"}, {"label" : "Nat", "tail" : ": Typ[Term] with Subs[Typ[Term]]", "member" : "provingground.library.Nats.Nat", "link" : "provingground\/library\/Nats$.html#Nat:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/library\/Nats$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/library\/Nats$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/library\/Nats$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/library\/Nats$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/library\/Nats$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/library\/Nats$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/library\/Nats$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/Nats$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/Nats$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/Nats$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/library\/Nats$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/library\/Nats$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/library\/Nats$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/library\/Nats$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/library\/Nats$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/library\/Nats$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/library\/Nats$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/library\/Nats$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/library\/Nats$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.library.SimpleEvens", "shortDescription" : "", "object" : "provingground\/library\/SimpleEvens$.html", "members_object" : [{"label" : "plusTwoEven", "tail" : ": FuncLike[Term with Subs[Term], Func[Term, Term]] with Subs[FuncLike[Term with Subs[Term], Func[Term, Term]]]", "member" : "provingground.library.SimpleEvens.plusTwoEven", "link" : "provingground\/library\/SimpleEvens$.html#plusTwoEven:provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "zeroEven", "tail" : ": Term with Subs[Term]", "member" : "provingground.library.SimpleEvens.zeroEven", "link" : "provingground\/library\/SimpleEvens$.html#zeroEven:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "isEven", "tail" : ": Func[Term, Typ[Term]] with Subs[Func[Term, Typ[Term]]]", "member" : "provingground.library.SimpleEvens.isEven", "link" : "provingground\/library\/SimpleEvens$.html#isEven:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/library\/SimpleEvens$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/library\/SimpleEvens$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/library\/SimpleEvens$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/library\/SimpleEvens$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/library\/SimpleEvens$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/library\/SimpleEvens$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/library\/SimpleEvens$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/SimpleEvens$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/SimpleEvens$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/SimpleEvens$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/library\/SimpleEvens$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/library\/SimpleEvens$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/library\/SimpleEvens$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/library\/SimpleEvens$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/library\/SimpleEvens$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/library\/SimpleEvens$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/library\/SimpleEvens$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/library\/SimpleEvens$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/library\/SimpleEvens$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.library.SimpleGroup", "shortDescription" : "", "object" : "provingground\/library\/SimpleGroup$.html", "members_object" : [{"label" : "dist", "tail" : ": FiniteDistribution[Term]", "member" : "provingground.library.SimpleGroup.dist", "link" : "provingground\/library\/SimpleGroup$.html#dist:provingground.FiniteDistribution[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "hyp", "tail" : ": Term with Subs[Term]", "member" : "provingground.library.SimpleGroup.hyp", "link" : "provingground\/library\/SimpleGroup$.html#hyp:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "f", "tail" : ": Func[Term, Term] with Subs[Func[Term, Term]]", "member" : "provingground.library.SimpleGroup.f", "link" : "provingground\/library\/SimpleGroup$.html#f:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "i", "tail" : ": Func[Term, Term] with Subs[Func[Term, Term]]", "member" : "provingground.library.SimpleGroup.i", "link" : "provingground\/library\/SimpleGroup$.html#i:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "op", "tail" : ": Func[Term, Func[Term, Term]] with Subs[Func[Term, Func[Term, Term]]]", "member" : "provingground.library.SimpleGroup.op", "link" : "provingground\/library\/SimpleGroup$.html#op:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "e", "tail" : ": Term with Subs[Term]", "member" : "provingground.library.SimpleGroup.e", "link" : "provingground\/library\/SimpleGroup$.html#e:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "c", "tail" : ": Term with Subs[Term]", "member" : "provingground.library.SimpleGroup.c", "link" : "provingground\/library\/SimpleGroup$.html#c:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "b", "tail" : ": Term with Subs[Term]", "member" : "provingground.library.SimpleGroup.b", "link" : "provingground\/library\/SimpleGroup$.html#b:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "a", "tail" : ": Term with Subs[Term]", "member" : "provingground.library.SimpleGroup.a", "link" : "provingground\/library\/SimpleGroup$.html#a:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "eqG", "tail" : ": Func[Term, Func[Term, Typ[Term]]] with Subs[Func[Term, Func[Term, Typ[Term]]]]", "member" : "provingground.library.SimpleGroup.eqG", "link" : "provingground\/library\/SimpleGroup$.html#eqG:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]]]", "kind" : "val"}, {"label" : "G", "tail" : ": Typ[Term] with Subs[Typ[Term]]", "member" : "provingground.library.SimpleGroup.G", "link" : "provingground\/library\/SimpleGroup$.html#G:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/library\/SimpleGroup$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/library\/SimpleGroup$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/library\/SimpleGroup$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/library\/SimpleGroup$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/library\/SimpleGroup$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/library\/SimpleGroup$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/library\/SimpleGroup$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/SimpleGroup$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/SimpleGroup$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/SimpleGroup$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/library\/SimpleGroup$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/library\/SimpleGroup$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/library\/SimpleGroup$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/library\/SimpleGroup$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/library\/SimpleGroup$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/library\/SimpleGroup$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/library\/SimpleGroup$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/library\/SimpleGroup$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/library\/SimpleGroup$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.library.SuccNOrNEven", "shortDescription" : "", "object" : "provingground\/library\/SuccNOrNEven$.html", "members_object" : [{"label" : "pf", "tail" : ": FuncLike[Term with Subs[Term], Term]", "member" : "provingground.library.SuccNOrNEven.pf", "link" : "provingground\/library\/SuccNOrNEven$.html#pf:provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]", "kind" : "val"}, {"label" : "inductor", "tail" : ": Func[Term, Func[FuncLike[Term, Func[Term, Term]], FuncLike[Term, Term]]]", "member" : "provingground.library.SuccNOrNEven.inductor", "link" : "provingground\/library\/SuccNOrNEven$.html#inductor:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "step", "tail" : ": FuncLike[Term with Subs[Term], Func[Term, Term]]", "member" : "provingground.library.SuccNOrNEven.step", "link" : "provingground\/library\/SuccNOrNEven$.html#step:provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "thm", "tail" : ": GenFuncTyp[Term with Subs[Term], Term]", "member" : "provingground.library.SuccNOrNEven.thm", "link" : "provingground\/library\/SuccNOrNEven$.html#thm:provingground.HoTT.GenFuncTyp[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]", "kind" : "val"}, {"label" : "hyp2", "tail" : ": Term with Subs[Term]", "member" : "provingground.library.SuccNOrNEven.hyp2", "link" : "provingground\/library\/SuccNOrNEven$.html#hyp2:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "hyp1", "tail" : ": Term with Subs[Term]", "member" : "provingground.library.SuccNOrNEven.hyp1", "link" : "provingground\/library\/SuccNOrNEven$.html#hyp1:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "base", "tail" : ": Term", "member" : "provingground.library.SuccNOrNEven.base", "link" : "provingground\/library\/SuccNOrNEven$.html#base:provingground.HoTT.Term", "kind" : "val"}, {"label" : "claim", "tail" : ": Func[Term with Subs[Term], PlusTyp[Term, Term]]", "member" : "provingground.library.SuccNOrNEven.claim", "link" : "provingground\/library\/SuccNOrNEven$.html#claim:provingground.HoTT.Func[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.PlusTyp[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/library\/SuccNOrNEven$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/library\/SuccNOrNEven$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/library\/SuccNOrNEven$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/library\/SuccNOrNEven$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/library\/SuccNOrNEven$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/library\/SuccNOrNEven$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/library\/SuccNOrNEven$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/SuccNOrNEven$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/SuccNOrNEven$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/SuccNOrNEven$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/library\/SuccNOrNEven$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/library\/SuccNOrNEven$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/library\/SuccNOrNEven$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/library\/SuccNOrNEven$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/library\/SuccNOrNEven$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/library\/SuccNOrNEven$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/library\/SuccNOrNEven$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/library\/SuccNOrNEven$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/library\/SuccNOrNEven$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.library.Trees", "shortDescription" : "", "object" : "provingground\/library\/Trees$.html", "members_object" : [{"label" : "vertices", "tail" : ": Func[Term, Term]", "member" : "provingground.library.Trees.vertices", "link" : "provingground\/library\/Trees$.html#vertices:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]", "kind" : "val"}, {"label" : "t2", "tail" : ": Term with Subs[Term]", "member" : "provingground.library.Trees.t2", "link" : "provingground\/library\/Trees$.html#t2:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "t1", "tail" : ": Term with Subs[Term]", "member" : "provingground.library.Trees.t1", "link" : "provingground\/library\/Trees$.html#t1:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "recTN", "tail" : ": Func[Term, Func[Func[Term, Func[Term, Func[Term, Func[Term, Term]]]], Func[Term, Term]]]", "member" : "provingground.library.Trees.recTN", "link" : "provingground\/library\/Trees$.html#recTN:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "node", "tail" : ": Func[Term, Func[Term, Term]]", "member" : "provingground.library.Trees.node", "link" : "provingground\/library\/Trees$.html#node:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "leaf", "tail" : ": Term", "member" : "provingground.library.Trees.leaf", "link" : "provingground\/library\/Trees$.html#leaf:provingground.HoTT.Term", "kind" : "val"}, {"label" : "TInd", "tail" : ": ConstructorSeqTL[::[HNil, ::[::[FuncConsShape.type, ::[FuncConsShape.type, HNil]], HNil]], Term, ::[Term, ::[Func[Term, Func[Term, Term]], HNil]]]", "member" : "provingground.library.Trees.TInd", "link" : "provingground\/library\/Trees$.html#TInd:provingground.induction.ConstructorSeqTL[shapeless.HNil::(provingground.induction.ConstructorShape.FuncConsShape.type::provingground.induction.ConstructorShape.FuncConsShape.type::shapeless.HNil)::shapeless.HNil,provingground.HoTT.Term,provingground.HoTT.Term::provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]::shapeless.HNil]", "kind" : "val"}, {"label" : "T", "tail" : ": Typ[Term] with Subs[Typ[Term]]", "member" : "provingground.library.Trees.T", "link" : "provingground\/library\/Trees$.html#T:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/library\/Trees$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/library\/Trees$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/library\/Trees$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/library\/Trees$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/library\/Trees$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/library\/Trees$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/library\/Trees$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/Trees$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/Trees$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/Trees$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/library\/Trees$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/library\/Trees$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/library\/Trees$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/library\/Trees$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/library\/Trees$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/library\/Trees$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/library\/Trees$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/library\/Trees$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/library\/Trees$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.library.Vecs", "shortDescription" : "", "object" : "provingground\/library\/Vecs$.html", "members_object" : [{"label" : "vconcat", "tail" : ": FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], Func[Term, Term]]]]", "member" : "provingground.library.Vecs.vconcat", "link" : "provingground\/library\/Vecs$.html#vconcat:provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]]", "kind" : "val"}, {"label" : "concatVn", "tail" : ": FuncLike[Term with Subs[Term], Func[Term, Term]] with Subs[FuncLike[Term with Subs[Term], Func[Term, Term]]]", "member" : "provingground.library.Vecs.concatVn", "link" : "provingground\/library\/Vecs$.html#concatVn:provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "indVVV", "tail" : ": Func[FuncLike[Term with Subs[Term], Func[Term, Term]], Func[FuncLike[Term with Subs[Term], FuncLike[Term, FuncLike[Term, Func[FuncLike[Term with Subs[Term], Func[Term, Term]], FuncLike[Term with Subs[Term], Func[Term, Term]]]]]], FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], Func[Term, Term]]]]]]", "member" : "provingground.library.Vecs.indVVV", "link" : "provingground\/library\/Vecs$.html#indVVV:provingground.HoTT.Func[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]],provingground.HoTT.Func[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]]]],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]]]]", "kind" : "val"}, {"label" : "size", "tail" : ": FuncLike[Term, Func[Term, Term]]", "member" : "provingground.library.Vecs.size", "link" : "provingground\/library\/Vecs$.html#size:provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "recVN", "tail" : ": Func[Term, Func[FuncLike[Term with Subs[Term], Func[Term, Func[Term, Func[Term, Term]]]], FuncLike[Term, Func[Term, Term]]]]", "member" : "provingground.library.Vecs.recVN", "link" : "provingground\/library\/Vecs$.html#recVN:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]],provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]]", "kind" : "val"}, {"label" : "vm", "tail" : ": Term with Subs[Term]", "member" : "provingground.library.Vecs.vm", "link" : "provingground\/library\/Vecs$.html#vm:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "vn", "tail" : ": Term with Subs[Term]", "member" : "provingground.library.Vecs.vn", "link" : "provingground\/library\/Vecs$.html#vn:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "vcons", "tail" : ": FuncLike[Term with Subs[Term], Func[Term, Func[Term, Term]]]", "member" : "provingground.library.Vecs.vcons", "link" : "provingground\/library\/Vecs$.html#vcons:provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "vnil", "tail" : ": Term", "member" : "provingground.library.Vecs.vnil", "link" : "provingground\/library\/Vecs$.html#vnil:provingground.HoTT.Term", "kind" : "val"}, {"label" : "VecInd", "tail" : ": Cons[::[::[IndexedCnstDepFuncConsShape.type, ::[IndexedCnstFuncConsShape.type, ::[IndexedFuncConsShape.type, HNil]]], HNil], HNil, Term, Func[Term, Typ[Term]] with Subs[Func[Term, Typ[Term]]], Term, ::[Term, HNil], ::[FuncLike[Term with Subs[Term], Func[Term, Func[Term, Term]]], HNil]]", "member" : "provingground.library.Vecs.VecInd", "link" : "provingground\/library\/Vecs$.html#VecInd:provingground.induction.IndexedConstructorSeqDom.Cons[(provingground.induction.IndexedConstructorShape.IndexedCnstDepFuncConsShape.type::provingground.induction.IndexedConstructorShape.IndexedCnstFuncConsShape.type::provingground.induction.IndexedConstructorShape.IndexedFuncConsShape.type::shapeless.HNil)::shapeless.HNil,shapeless.HNil,provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]],provingground.HoTT.Term,provingground.HoTT.Term::shapeless.HNil,provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]::shapeless.HNil]", "kind" : "val"}, {"label" : "Vec", "tail" : ": Func[Term, Typ[Term]] with Subs[Func[Term, Typ[Term]]]", "member" : "provingground.library.Vecs.Vec", "link" : "provingground\/library\/Vecs$.html#Vec:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "a", "tail" : ": Term with Subs[Term]", "member" : "provingground.library.Vecs.a", "link" : "provingground\/library\/Vecs$.html#a:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "A", "tail" : ": Typ[Term] with Subs[Typ[Term]]", "member" : "provingground.library.Vecs.A", "link" : "provingground\/library\/Vecs$.html#A:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/library\/Vecs$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/library\/Vecs$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/library\/Vecs$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/library\/Vecs$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/library\/Vecs$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/library\/Vecs$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/library\/Vecs$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/Vecs$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/Vecs$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/Vecs$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/library\/Vecs$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/library\/Vecs$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/library\/Vecs$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/library\/Vecs$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/library\/Vecs$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/library\/Vecs$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/library\/Vecs$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/library\/Vecs$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/library\/Vecs$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}]};