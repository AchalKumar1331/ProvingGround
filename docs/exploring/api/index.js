Index.PACKAGES = {"ammonite" : [], "ammonite.ops" : [], "provingground" : [{"name" : "provingground.AB", "shortDescription" : "", "object" : "provingground\/AB$.html", "members_object" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/AB$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/AB$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/AB$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/AB$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/AB$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/AB$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/AB$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/AB$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/AB$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/AB$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/AB$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/AB$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/AB$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/AB$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/AB$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/AB$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/AB$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/AB$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/AB$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "provingground.explore" : [{"name" : "provingground.explore.ABDeduc", "shortDescription" : "", "object" : "provingground\/explore\/ABDeduc$.html", "members_object" : [{"label" : "buf2Days", "tail" : ": Deducer.BufferedRun", "member" : "provingground.explore.ABDeduc.buf2Days", "link" : "provingground\/explore\/ABDeduc$.html#buf2Days:provingground.explore.ABDeduc.ded.BufferedRun", "kind" : "val"}, {"label" : "twodays", "tail" : ": Long", "member" : "provingground.explore.ABDeduc.twodays", "link" : "provingground\/explore\/ABDeduc$.html#twodays:Long", "kind" : "val"}, {"label" : "bufFine", "tail" : ": Deducer.BufferedRun", "member" : "provingground.explore.ABDeduc.bufFine", "link" : "provingground\/explore\/ABDeduc$.html#bufFine:provingground.explore.ABDeduc.dedFine.BufferedRun", "kind" : "val"}, {"label" : "bufQuick", "tail" : ": Deducer.BufferedRun", "member" : "provingground.explore.ABDeduc.bufQuick", "link" : "provingground\/explore\/ABDeduc$.html#bufQuick:provingground.explore.ABDeduc.ded.BufferedRun", "kind" : "val"}, {"label" : "buf", "tail" : ": Deducer.BufferedRun", "member" : "provingground.explore.ABDeduc.buf", "link" : "provingground\/explore\/ABDeduc$.html#buf:provingground.explore.ABDeduc.ded.BufferedRun", "kind" : "val"}, {"label" : "saveFine", "tail" : "(t: FiniteDistribution[Term]): Unit", "member" : "provingground.explore.ABDeduc.saveFine", "link" : "provingground\/explore\/ABDeduc$.html#saveFine(t:provingground.FiniteDistribution[provingground.HoTT.Term]):Unit", "kind" : "def"}, {"label" : "save2", "tail" : "(t: FiniteDistribution[Term]): Unit", "member" : "provingground.explore.ABDeduc.save2", "link" : "provingground\/explore\/ABDeduc$.html#save2(t:provingground.FiniteDistribution[provingground.HoTT.Term]):Unit", "kind" : "def"}, {"label" : "save", "tail" : "(t: FiniteDistribution[Term]): Unit", "member" : "provingground.explore.ABDeduc.save", "link" : "provingground\/explore\/ABDeduc$.html#save(t:provingground.FiniteDistribution[provingground.HoTT.Term]):Unit", "kind" : "def"}, {"label" : "dir", "tail" : ": Path", "member" : "provingground.explore.ABDeduc.dir", "link" : "provingground\/explore\/ABDeduc$.html#dir:ammonite.ops.Path", "kind" : "val"}, {"label" : "dedFine", "tail" : ": Deducer", "member" : "provingground.explore.ABDeduc.dedFine", "link" : "provingground\/explore\/ABDeduc$.html#dedFine:provingground.Deducer", "kind" : "val"}, {"label" : "smooth", "tail" : "(fd: FiniteDistribution[Term]): FiniteDistribution[Term]", "member" : "provingground.explore.ABDeduc.smooth", "link" : "provingground\/explore\/ABDeduc$.html#smooth(fd:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.FiniteDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "swap", "tail" : "(t: Term): Term with Subs[Term]", "member" : "provingground.explore.ABDeduc.swap", "link" : "provingground\/explore\/ABDeduc$.html#swap(t:provingground.HoTT.Term):provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "X", "tail" : ": Typ[Term] with Subs[Typ[Term]]", "member" : "provingground.explore.ABDeduc.X", "link" : "provingground\/explore\/ABDeduc$.html#X:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "ded", "tail" : ": Deducer", "member" : "provingground.explore.ABDeduc.ded", "link" : "provingground\/explore\/ABDeduc$.html#ded:provingground.Deducer", "kind" : "val"}, {"label" : "varsAB", "tail" : ": Vector[Weighted[Term]]", "member" : "provingground.explore.ABDeduc.varsAB", "link" : "provingground\/explore\/ABDeduc$.html#varsAB:scala.collection.immutable.Vector[provingground.Weighted[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "idA", "tail" : ": Func[Term with Subs[Term], Term with Subs[Term]]", "member" : "provingground.explore.ABDeduc.idA", "link" : "provingground\/explore\/ABDeduc$.html#idA:provingground.HoTT.Func[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "g", "tail" : ": Func[Term, Term] with Subs[Func[Term, Term]]", "member" : "provingground.explore.ABDeduc.g", "link" : "provingground\/explore\/ABDeduc$.html#g:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "f", "tail" : ": Func[Term, Term] with Subs[Func[Term, Term]]", "member" : "provingground.explore.ABDeduc.f", "link" : "provingground\/explore\/ABDeduc$.html#f:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "cnst", "tail" : ": Func[Term with Subs[Term], Func[Term with Subs[Term], Term with Subs[Term]]]", "member" : "provingground.explore.ABDeduc.cnst", "link" : "provingground\/explore\/ABDeduc$.html#cnst:provingground.HoTT.Func[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "distAB", "tail" : ": FiniteDistribution[Term]", "member" : "provingground.explore.ABDeduc.distAB", "link" : "provingground\/explore\/ABDeduc$.html#distAB:provingground.FiniteDistribution[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "b", "tail" : ": Term with Subs[Term]", "member" : "provingground.explore.ABDeduc.b", "link" : "provingground\/explore\/ABDeduc$.html#b:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "a", "tail" : ": Term with Subs[Term]", "member" : "provingground.explore.ABDeduc.a", "link" : "provingground\/explore\/ABDeduc$.html#a:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "B", "tail" : ": Typ[Term] with Subs[Typ[Term]]", "member" : "provingground.explore.ABDeduc.B", "link" : "provingground\/explore\/ABDeduc$.html#B:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "A", "tail" : ": Typ[Term] with Subs[Typ[Term]]", "member" : "provingground.explore.ABDeduc.A", "link" : "provingground\/explore\/ABDeduc$.html#A:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/explore\/ABDeduc$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/explore\/ABDeduc$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/explore\/ABDeduc$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/explore\/ABDeduc$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/explore\/ABDeduc$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/explore\/ABDeduc$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/explore\/ABDeduc$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/explore\/ABDeduc$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/explore\/ABDeduc$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/explore\/ABDeduc$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/explore\/ABDeduc$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/explore\/ABDeduc$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/explore\/ABDeduc$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/explore\/ABDeduc$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/explore\/ABDeduc$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/explore\/ABDeduc$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/explore\/ABDeduc$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/explore\/ABDeduc$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/explore\/ABDeduc$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.explore.MonoidLearn", "shortDescription" : "", "object" : "provingground\/explore\/MonoidLearn$.html", "members_object" : [{"label" : "shortRun", "tail" : "(): Future[Done]", "member" : "provingground.explore.MonoidLearn.shortRun", "link" : "provingground\/explore\/MonoidLearn$.html#shortRun:scala.concurrent.Future[akka.Done]", "kind" : "def"}, {"label" : "dedSrc", "tail" : ": DeducerSource", "member" : "provingground.explore.MonoidLearn.dedSrc", "link" : "provingground\/explore\/MonoidLearn$.html#dedSrc:provingground.DeducerSource", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/explore\/MonoidLearn$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/explore\/MonoidLearn$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/explore\/MonoidLearn$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/explore\/MonoidLearn$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/explore\/MonoidLearn$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/explore\/MonoidLearn$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/explore\/MonoidLearn$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/explore\/MonoidLearn$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/explore\/MonoidLearn$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/explore\/MonoidLearn$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/explore\/MonoidLearn$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/explore\/MonoidLearn$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/explore\/MonoidLearn$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/explore\/MonoidLearn$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/explore\/MonoidLearn$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/explore\/MonoidLearn$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/explore\/MonoidLearn$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/explore\/MonoidLearn$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/explore\/MonoidLearn$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.explore.MonoidLearnRun", "shortDescription" : "", "object" : "provingground\/explore\/MonoidLearnRun$.html", "members_object" : [{"label" : "file", "tail" : ": Path", "member" : "provingground.explore.MonoidLearnRun.file", "link" : "provingground\/explore\/MonoidLearnRun$.html#file:ammonite.ops.Path", "kind" : "val"}, {"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "scala.App.main", "link" : "provingground\/explore\/MonoidLearnRun$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "delayedInit", "tail" : "(body: ⇒ Unit): Unit", "member" : "scala.App.delayedInit", "link" : "provingground\/explore\/MonoidLearnRun$.html#delayedInit(body:=>Unit):Unit", "kind" : "def"}, {"label" : "args", "tail" : "(): Array[String]", "member" : "scala.App.args", "link" : "provingground\/explore\/MonoidLearnRun$.html#args:Array[String]", "kind" : "def"}, {"label" : "executionStart", "tail" : ": Long", "member" : "scala.App.executionStart", "link" : "provingground\/explore\/MonoidLearnRun$.html#executionStart:Long", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/explore\/MonoidLearnRun$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/explore\/MonoidLearnRun$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/explore\/MonoidLearnRun$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/explore\/MonoidLearnRun$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/explore\/MonoidLearnRun$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/explore\/MonoidLearnRun$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/explore\/MonoidLearnRun$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/explore\/MonoidLearnRun$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/explore\/MonoidLearnRun$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/explore\/MonoidLearnRun$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/explore\/MonoidLearnRun$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/explore\/MonoidLearnRun$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/explore\/MonoidLearnRun$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/explore\/MonoidLearnRun$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/explore\/MonoidLearnRun$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/explore\/MonoidLearnRun$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/explore\/MonoidLearnRun$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/explore\/MonoidLearnRun$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/explore\/MonoidLearnRun$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}]};