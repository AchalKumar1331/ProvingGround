Index.PACKAGES = {"provingground" : [{"name" : "provingground.BigOps", "shortDescription" : "", "object" : "provingground\/BigOps$.html", "members_object" : [{"label" : "BigSum", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Term with Subs[Term], FuncLike[Func[Term, Term] with Subs[Func[Term, Term]], Func[Func[Term, Func[Term, Term]], Term]]]]", "member" : "provingground.BigOps.BigSum", "link" : "provingground\/BigOps$.html#BigSum:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]],provingground.HoTT.Func[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]],provingground.HoTT.Term]]]]", "kind" : "val"}, {"label" : "en", "tail" : ": Term with Subs[Term]", "member" : "provingground.BigOps.en", "link" : "provingground\/BigOps$.html#en:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "f", "tail" : ": Func[Term, Term] with Subs[Func[Term, Term]]", "member" : "provingground.BigOps.f", "link" : "provingground\/BigOps$.html#f:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "A", "tail" : ": Typ[Term] with Subs[Typ[Term]]", "member" : "provingground.BigOps.A", "link" : "provingground\/BigOps$.html#A:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/BigOps$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/BigOps$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/BigOps$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/BigOps$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/BigOps$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/BigOps$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/BigOps$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/BigOps$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/BigOps$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/BigOps$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/BigOps$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/BigOps$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/BigOps$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/BigOps$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/BigOps$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/BigOps$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/BigOps$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/BigOps$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/BigOps$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.BoolType", "shortDescription" : "", "object" : "provingground\/BoolType$.html", "members_object" : [{"label" : "itedep", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Term with Subs[Term], Term]]]", "member" : "provingground.BoolType.itedep", "link" : "provingground\/BoolType$.html#itedep:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]]]", "kind" : "lazy val"}, {"label" : "iteDepFunc", "tail" : "(u: Typ[Term], v: Typ[Term]): FuncLike[Term with Subs[Term], Term]", "member" : "provingground.BoolType.iteDepFunc", "link" : "provingground\/BoolType$.html#iteDepFunc(u:provingground.HoTT.Typ[provingground.HoTT.Term],v:provingground.HoTT.Typ[provingground.HoTT.Term]):provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]", "kind" : "def"}, {"label" : "ite", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], Func[Term, Func[Term, Func[Term, Term]]]]", "member" : "provingground.BoolType.ite", "link" : "provingground\/BoolType$.html#ite:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]]", "kind" : "lazy val"}, {"label" : "iteFunc", "tail" : "(u: Typ[U]): Func[Term, Func[U, Func[U, U]]]", "member" : "provingground.BoolType.iteFunc", "link" : "provingground\/BoolType$.html#iteFunc[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](u:provingground.HoTT.Typ[U]):provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[U,provingground.HoTT.Func[U,U]]]", "kind" : "def"}, {"label" : "yes", "tail" : "", "member" : "provingground.BoolType.yes", "link" : "provingground\/BoolType$.html#yes", "kind" : "object"}, {"label" : "isTrueTyp", "tail" : "", "member" : "provingground.BoolType.isTrueTyp", "link" : "provingground\/BoolType$.html#isTrueTypextendsHoTT.SmallTypwithProductwithSerializable", "kind" : "case class"}, {"label" : "isTrue", "tail" : ": Func[Term, Typ[Term]]", "member" : "provingground.BoolType.isTrue", "link" : "provingground\/BoolType$.html#isTrue:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "boolFmly", "tail" : ": FuncRep[Term, Boolean, Typ[Term], Typ[Term]]", "member" : "provingground.BoolType.boolFmly", "link" : "provingground\/BoolType$.html#boolFmly:provingground.FuncRep[provingground.HoTT.Term,Boolean,provingground.HoTT.Typ[provingground.HoTT.Term],provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "or", "tail" : ": Func[Term, Func[Term, Term]]", "member" : "provingground.BoolType.or", "link" : "provingground\/BoolType$.html#or:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "and", "tail" : ": Func[Term, Func[Term, Term]]", "member" : "provingground.BoolType.and", "link" : "provingground\/BoolType$.html#and:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "not", "tail" : ": Func[Term, Term]", "member" : "provingground.BoolType.not", "link" : "provingground\/BoolType$.html#not:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]", "kind" : "lazy val"}, {"label" : "boolrep", "tail" : ": SimpleRep[Term, Boolean]", "member" : "provingground.BoolType.boolrep", "link" : "provingground\/BoolType$.html#boolrep:provingground.ScalaRep.SimpleRep[provingground.HoTT.Term,Boolean]", "kind" : "lazy val"}, {"label" : "Bool", "tail" : "", "member" : "provingground.BoolType.Bool", "link" : "provingground\/BoolType$.html#Bool", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/BoolType$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/BoolType$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/BoolType$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/BoolType$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/BoolType$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/BoolType$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/BoolType$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/BoolType$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/BoolType$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/BoolType$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/BoolType$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/BoolType$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/BoolType$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/BoolType$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/BoolType$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/BoolType$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/BoolType$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/BoolType$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/BoolType$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.EnumFin", "shortDescription" : "", "object" : "provingground\/EnumFin$.html", "members_object" : [{"label" : "enumFin", "tail" : ": FuncLike[Term with Subs[Term], Term]", "member" : "provingground.EnumFin.enumFin", "link" : "provingground\/EnumFin$.html#enumFin:provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]", "kind" : "val"}, {"label" : "enumFinFn", "tail" : "(n: Long): EnumTerm[Term]", "member" : "provingground.EnumFin.enumFinFn", "link" : "provingground\/EnumFin$.html#enumFinFn(n:Long):provingground.EnumType.EnumTerm[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "enumFinList", "tail" : "(n: Long): List[Term with Subs[Term]]", "member" : "provingground.EnumFin.enumFinList", "link" : "provingground\/EnumFin$.html#enumFinList(n:Long):List[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/EnumFin$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/EnumFin$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/EnumFin$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/EnumFin$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/EnumFin$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/EnumFin$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/EnumFin$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/EnumFin$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/EnumFin$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/EnumFin$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/EnumFin$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/EnumFin$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/EnumFin$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/EnumFin$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/EnumFin$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/EnumFin$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/EnumFin$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/EnumFin$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/EnumFin$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.EnumFuncs", "shortDescription" : "", "object" : "provingground\/EnumFuncs$.html", "members_object" : [{"label" : "enumSec", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Func[Term, Typ[Term]] with Subs[Func[Term, Typ[Term]]], Func[Term, Func[FuncLike[Term with Subs[Term], Term], Term]]]]", "member" : "provingground.EnumFuncs.enumSec", "link" : "provingground\/EnumFuncs$.html#enumSec:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term],provingground.HoTT.Term]]]]", "kind" : "val"}, {"label" : "EnumSec", "tail" : "(dom: Typ[U], codoms: (U) ⇒ Typ[V])(su: ScalaUniv[U], sv: ScalaUniv[V]): Func[Term, Func[FuncLike[U with Subs[U], Term], Term]]", "member" : "provingground.EnumFuncs.EnumSec", "link" : "provingground\/EnumFuncs$.html#EnumSec[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](dom:provingground.HoTT.Typ[U],codoms:U=>provingground.HoTT.Typ[V])(implicitsu:provingground.ScalaUniv[U],implicitsv:provingground.ScalaUniv[V]):provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.FuncLike[Uwithprovingground.HoTT.Subs[U],provingground.HoTT.Term],provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "allSec", "tail" : "(domenum: EnumTerm[U])(codomenums: (U) ⇒ EnumTerm[V])(sv: ScalaUniv[V]): EnumTerm[FuncLike[U, V]]", "member" : "provingground.EnumFuncs.allSec", "link" : "provingground\/EnumFuncs$.html#allSec[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](domenum:provingground.EnumType.EnumTerm[U])(codomenums:U=>provingground.EnumType.EnumTerm[V])(implicitsv:provingground.ScalaUniv[V]):provingground.EnumType.EnumTerm[provingground.HoTT.FuncLike[U,V]]", "kind" : "def"}, {"label" : "enumFn", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Typ[Term] with Subs[Typ[Term]], Func[Term, Func[Term, Term]]]]", "member" : "provingground.EnumFuncs.enumFn", "link" : "provingground\/EnumFuncs$.html#enumFn:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]]", "kind" : "val"}, {"label" : "EnumFunc", "tail" : "(dom: Typ[U], codom: Typ[V]): Func[Term, Func[Term, Term]]", "member" : "provingground.EnumFuncs.EnumFunc", "link" : "provingground\/EnumFuncs$.html#EnumFunc[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](dom:provingground.HoTT.Typ[U],codom:provingground.HoTT.Typ[V]):provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "allFunc", "tail" : "(domenum: EnumTerm[U])(codomenum: EnumTerm[V]): EnumTerm[Func[U, V]]", "member" : "provingground.EnumFuncs.allFunc", "link" : "provingground\/EnumFuncs$.html#allFunc[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](domenum:provingground.EnumType.EnumTerm[U])(codomenum:provingground.EnumType.EnumTerm[V]):provingground.EnumType.EnumTerm[provingground.HoTT.Func[U,V]]", "kind" : "def"}, {"label" : "allPairs", "tail" : "(dom: List[U], cods: (U) ⇒ Option[List[V]]): Option[List[AbsPair[U, V]]]", "member" : "provingground.EnumFuncs.allPairs", "link" : "provingground\/EnumFuncs$.html#allPairs[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](dom:List[U],cods:U=>Option[List[V]]):Option[List[provingground.HoTT.AbsPair[U,V]]]", "kind" : "def"}, {"label" : "pairs", "tail" : "(first: List[U], second: List[V]): List[PairTerm[U, V]]", "member" : "provingground.EnumFuncs.pairs", "link" : "provingground\/EnumFuncs$.html#pairs[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](first:List[U],second:List[V]):List[provingground.HoTT.PairTerm[U,V]]", "kind" : "def"}, {"label" : "allSecMapsOpt", "tail" : "(dom: List[U], codoms: (U) ⇒ Option[List[V]]): Option[List[Map[U, V]]]", "member" : "provingground.EnumFuncs.allSecMapsOpt", "link" : "provingground\/EnumFuncs$.html#allSecMapsOpt[U,V](dom:List[U],codoms:U=>Option[List[V]]):Option[List[Map[U,V]]]", "kind" : "def"}, {"label" : "allSecMaps", "tail" : "(dom: List[U], codoms: (U) ⇒ List[V]): List[Map[U, V]]", "member" : "provingground.EnumFuncs.allSecMaps", "link" : "provingground\/EnumFuncs$.html#allSecMaps[U,V](dom:List[U],codoms:U=>List[V]):List[Map[U,V]]", "kind" : "def"}, {"label" : "allMaps", "tail" : "(dom: List[U], codom: List[V]): List[Map[U, V]]", "member" : "provingground.EnumFuncs.allMaps", "link" : "provingground\/EnumFuncs$.html#allMaps[U,V](dom:List[U],codom:List[V]):List[Map[U,V]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/EnumFuncs$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/EnumFuncs$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/EnumFuncs$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/EnumFuncs$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/EnumFuncs$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/EnumFuncs$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/EnumFuncs$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/EnumFuncs$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/EnumFuncs$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/EnumFuncs$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/EnumFuncs$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/EnumFuncs$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/EnumFuncs$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/EnumFuncs$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/EnumFuncs$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/EnumFuncs$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/EnumFuncs$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/EnumFuncs$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/EnumFuncs$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.EnumType", "shortDescription" : "", "object" : "provingground\/EnumType$.html", "members_object" : [{"label" : "enumlist", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], Func[Term, Term]]", "member" : "provingground.EnumType.enumlist", "link" : "provingground\/EnumType$.html#enumlist:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "enumList", "tail" : "(elemTyp: Typ[U]): Func[Term, Term]", "member" : "provingground.EnumType.enumList", "link" : "provingground\/EnumType$.html#enumList[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](elemTyp:provingground.HoTT.Typ[U]):provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]", "kind" : "def"}, {"label" : "EnumRep", "tail" : "", "member" : "provingground.EnumType.EnumRep", "link" : "provingground\/EnumType$.html#EnumRep[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsScalaRep[provingground.HoTT.Term,provingground.EnumType.EnumTerm[U]]withProductwithSerializable", "kind" : "case class"}, {"label" : "EnumTerm", "tail" : "", "member" : "provingground.EnumType.EnumTerm", "link" : "provingground\/EnumType$.html#EnumTerm[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsScalaRep.ConstTerm[List[U]]withProductwithSerializable", "kind" : "case class"}, {"label" : "EnumTyp", "tail" : "", "member" : "provingground.EnumType.EnumTyp", "link" : "provingground\/EnumType$.html#EnumTyp[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsHoTT.SmallTypwithProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/EnumType$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/EnumType$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/EnumType$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/EnumType$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/EnumType$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/EnumType$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/EnumType$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/EnumType$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/EnumType$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/EnumType$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/EnumType$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/EnumType$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/EnumType$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/EnumType$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/EnumType$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/EnumType$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/EnumType$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/EnumType$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/EnumType$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.FunctionFeedback", "shortDescription" : "", "object" : "provingground\/FunctionFeedback$.html", "members_object" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/FunctionFeedback$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/FunctionFeedback$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/FunctionFeedback$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/FunctionFeedback$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/FunctionFeedback$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/FunctionFeedback$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/FunctionFeedback$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/FunctionFeedback$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/FunctionFeedback$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/FunctionFeedback$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/FunctionFeedback$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/FunctionFeedback$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/FunctionFeedback$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/FunctionFeedback$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/FunctionFeedback$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/FunctionFeedback$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/FunctionFeedback$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/FunctionFeedback$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/FunctionFeedback$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.InducPairs", "shortDescription" : "Recursion and induction for (dependent) pairs.", "object" : "provingground\/InducPairs$.html", "members_object" : [{"label" : "InducSigma", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Func[Term, Typ[Term]] with Subs[Func[Term, Typ[Term]]], FuncLike[Func[Term, Func[Term, Typ[Term]]] with Subs[Func[Term, Func[Term, Typ[Term]]]], FuncLike[FuncLike[Term, FuncLike[Term, Term]] with Subs[FuncLike[Term, FuncLike[Term, Term]]], FuncLike[DepPair[Term, Term], Term]]]]]", "member" : "provingground.InducPairs.InducSigma", "link" : "provingground\/InducPairs$.html#InducSigma:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]],provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]]],provingground.HoTT.FuncLike[provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term]]],provingground.HoTT.FuncLike[provingground.HoTT.DepPair[provingground.HoTT.Term,provingground.HoTT.Term],provingground.HoTT.Term]]]]]", "kind" : "val"}, {"label" : "hDep", "tail" : ": FuncLike[Term, FuncLike[Term, Term]] with Subs[FuncLike[Term, FuncLike[Term, Term]]]", "member" : "provingground.InducPairs.hDep", "link" : "provingground\/InducPairs$.html#hDep:provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "toCsDep", "tail" : ": GenFuncTyp[Term, FuncLike[Term, Term]]", "member" : "provingground.InducPairs.toCsDep", "link" : "provingground\/InducPairs$.html#toCsDep:provingground.HoTT.GenFuncTyp[provingground.HoTT.Term,provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "inducPair", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Func[Term, Func[Term, Typ[Term]]] with Subs[Func[Term, Func[Term, Typ[Term]]]], FuncLike[FuncLike[Term, FuncLike[Term, Term]] with Subs[FuncLike[Term, FuncLike[Term, Term]]], FuncLike[PairTerm[Term with Subs[Term], Term with Subs[Term]], Term]]]]]", "member" : "provingground.InducPairs.inducPair", "link" : "provingground\/InducPairs$.html#inducPair:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]]],provingground.HoTT.FuncLike[provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term]]],provingground.HoTT.FuncLike[provingground.HoTT.PairTerm[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]],provingground.HoTT.Term]]]]]", "kind" : "val"}, {"label" : "h", "tail" : ": FuncLike[Term, FuncLike[Term, Term]] with Subs[FuncLike[Term, FuncLike[Term, Term]]]", "member" : "provingground.InducPairs.h", "link" : "provingground\/InducPairs$.html#h:provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "toCs", "tail" : ": GenFuncTyp[Term, FuncLike[Term, Term]]", "member" : "provingground.InducPairs.toCs", "link" : "provingground\/InducPairs$.html#toCs:provingground.HoTT.GenFuncTyp[provingground.HoTT.Term,provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "Cs", "tail" : ": Func[Term, Func[Term, Typ[Term]]] with Subs[Func[Term, Func[Term, Typ[Term]]]]", "member" : "provingground.InducPairs.Cs", "link" : "provingground\/InducPairs$.html#Cs:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]]]", "kind" : "val"}, {"label" : "recSigma", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[FuncLike[Term with Subs[Term], Func[Term, Term]] with Subs[FuncLike[Term with Subs[Term], Func[Term, Term]]], FuncLike[DepPair[Term, Term], Term]]]]]", "member" : "provingground.InducPairs.recSigma", "link" : "provingground\/InducPairs$.html#recSigma:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]],provingground.HoTT.FuncLike[provingground.HoTT.DepPair[provingground.HoTT.Term,provingground.HoTT.Term],provingground.HoTT.Term]]]]]", "kind" : "val"}, {"label" : "abDep", "tail" : ": DepPair[Term, Term]", "member" : "provingground.InducPairs.abDep", "link" : "provingground\/InducPairs$.html#abDep:provingground.HoTT.DepPair[provingground.HoTT.Term,provingground.HoTT.Term]", "kind" : "val"}, {"label" : "g", "tail" : ": FuncLike[Term with Subs[Term], Func[Term, Term]] with Subs[FuncLike[Term with Subs[Term], Func[Term, Term]]]", "member" : "provingground.InducPairs.g", "link" : "provingground\/InducPairs$.html#g:provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "toC", "tail" : ": GenFuncTyp[Term with Subs[Term], Func[Term, Term]]", "member" : "provingground.InducPairs.toC", "link" : "provingground\/InducPairs$.html#toC:provingground.HoTT.GenFuncTyp[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "bs", "tail" : ": FuncLike[Term, Term] with Subs[FuncLike[Term, Term]]", "member" : "provingground.InducPairs.bs", "link" : "provingground\/InducPairs$.html#bs:provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "Btype", "tail" : ": PiDefn[Term, Term]", "member" : "provingground.InducPairs.Btype", "link" : "provingground\/InducPairs$.html#Btype:provingground.HoTT.PiDefn[provingground.HoTT.Term,provingground.HoTT.Term]", "kind" : "val"}, {"label" : "Bs", "tail" : ": Func[Term, Typ[Term]] with Subs[Func[Term, Typ[Term]]]", "member" : "provingground.InducPairs.Bs", "link" : "provingground\/InducPairs$.html#Bs:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "recPair", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Func[Term, Func[Term, Term]] with Subs[Func[Term, Func[Term, Term]]], FuncLike[PairTerm[Term with Subs[Term], Term with Subs[Term]], Term]]]]]", "member" : "provingground.InducPairs.recPair", "link" : "provingground\/InducPairs$.html#recPair:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]],provingground.HoTT.FuncLike[provingground.HoTT.PairTerm[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]],provingground.HoTT.Term]]]]]", "kind" : "val"}, {"label" : "ab", "tail" : ": PairTerm[Term with Subs[Term], Term with Subs[Term]]", "member" : "provingground.InducPairs.ab", "link" : "provingground\/InducPairs$.html#ab:provingground.HoTT.PairTerm[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "b", "tail" : ": Term with Subs[Term]", "member" : "provingground.InducPairs.b", "link" : "provingground\/InducPairs$.html#b:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "a", "tail" : ": Term with Subs[Term]", "member" : "provingground.InducPairs.a", "link" : "provingground\/InducPairs$.html#a:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "f", "tail" : ": Func[Term, Func[Term, Term]] with Subs[Func[Term, Func[Term, Term]]]", "member" : "provingground.InducPairs.f", "link" : "provingground\/InducPairs$.html#f:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "C", "tail" : ": Typ[Term] with Subs[Typ[Term]]", "member" : "provingground.InducPairs.C", "link" : "provingground\/InducPairs$.html#C:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "B", "tail" : ": Typ[Term] with Subs[Typ[Term]]", "member" : "provingground.InducPairs.B", "link" : "provingground\/InducPairs$.html#B:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "A", "tail" : ": Typ[Term] with Subs[Typ[Term]]", "member" : "provingground.InducPairs.A", "link" : "provingground\/InducPairs$.html#A:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/InducPairs$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/InducPairs$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/InducPairs$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/InducPairs$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/InducPairs$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/InducPairs$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/InducPairs$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/InducPairs$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/InducPairs$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/InducPairs$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/InducPairs$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/InducPairs$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/InducPairs$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/InducPairs$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/InducPairs$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/InducPairs$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/InducPairs$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/InducPairs$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/InducPairs$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.IntTypes", "shortDescription" : "", "object" : "provingground\/IntTypes$.html", "members_object" : [{"label" : "kmodn", "tail" : ": Func[Term, FuncLike[Term with Subs[Term], Term]]", "member" : "provingground.IntTypes.kmodn", "link" : "provingground\/IntTypes$.html#kmodn:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "NFinRep", "tail" : ": FuncRep[Term, Long, FuncLike[Term with Subs[Term], Term], (Long) ⇒ Term]", "member" : "provingground.IntTypes.NFinRep", "link" : "provingground\/IntTypes$.html#NFinRep:provingground.FuncRep[provingground.HoTT.Term,Long,provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term],Long=>provingground.HoTT.Term]", "kind" : "val"}, {"label" : "FinRep", "tail" : ": DepFuncRep[Term with Subs[Term], Long, Term, Term]", "member" : "provingground.IntTypes.FinRep", "link" : "provingground\/IntTypes$.html#FinRep:provingground.DepFuncRep[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],Long,provingground.HoTT.Term,provingground.HoTT.Term]", "kind" : "val"}, {"label" : "finrep", "tail" : ": RepSection[Long, Term, Term]", "member" : "provingground.IntTypes.finrep", "link" : "provingground\/IntTypes$.html#finrep:provingground.ScalaRep.RepSection[Long,provingground.HoTT.Term,provingground.HoTT.Term]", "kind" : "val"}, {"label" : "SimpleFinRep", "tail" : ": DepFuncRep[Term, Long, Term, Term]", "member" : "provingground.IntTypes.SimpleFinRep", "link" : "provingground\/IntTypes$.html#SimpleFinRep:provingground.DepFuncRep[provingground.HoTT.Term,Long,provingground.HoTT.Term,provingground.HoTT.Term]", "kind" : "val"}, {"label" : "FinFn", "tail" : ": Func[Term, Typ[Term]]", "member" : "provingground.IntTypes.FinFn", "link" : "provingground\/IntTypes$.html#FinFn:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "Nfmly", "tail" : ": FuncRep[Term, Long, Typ[Term], Typ[Term]]", "member" : "provingground.IntTypes.Nfmly", "link" : "provingground\/IntTypes$.html#Nfmly:provingground.FuncRep[provingground.HoTT.Term,Long,provingground.HoTT.Typ[provingground.HoTT.Term],provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "Fin", "tail" : "", "member" : "provingground.IntTypes.Fin", "link" : "provingground\/IntTypes$.html#FinextendsIntTypes.IntTypwithProductwithSerializable", "kind" : "case class"}, {"label" : "induction", "tail" : "(us: Func[Term, Typ[U]]): Func[U, Func[FuncLike[Term with Subs[Term], Term], FuncLike[Term, U]]]", "member" : "provingground.IntTypes.induction", "link" : "provingground\/IntTypes$.html#induction[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](us:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[U]]):provingground.HoTT.Func[U,provingground.HoTT.Func[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Term,U]]]", "kind" : "def"}, {"label" : "recursion", "tail" : "(u: Typ[U]): Func[U, Func[Func[Term, Func[U, U]], Func[Term, U]]]", "member" : "provingground.IntTypes.recursion", "link" : "provingground\/IntTypes$.html#recursion[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](u:provingground.HoTT.Typ[U]):provingground.HoTT.Func[U,provingground.HoTT.Func[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[U,U]],provingground.HoTT.Func[provingground.HoTT.Term,U]]]", "kind" : "def"}, {"label" : "induccurry", "tail" : "(): (U) ⇒ ((Long) ⇒ (U) ⇒ U) ⇒ (Long) ⇒ U", "member" : "provingground.IntTypes.induccurry", "link" : "provingground\/IntTypes$.html#induccurry[U<:provingground.HoTT.Term]:U=>((Long=>(U=>U))=>(Long=>U))", "kind" : "def"}, {"label" : "inducN", "tail" : ": FuncLike[Func[Term, Typ[Term]] with Subs[Func[Term, Typ[Term]]], Func[Term with Subs[Term], Func[FuncLike[Term with Subs[Term], Func[Term, Term]] with Subs[FuncLike[Term with Subs[Term], Func[Term, Term]]], FuncLike[Term, Term]]]]", "member" : "provingground.IntTypes.inducN", "link" : "provingground\/IntTypes$.html#inducN:provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]],provingground.HoTT.Func[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]],provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term]]]]", "kind" : "val"}, {"label" : "recN", "tail" : ": LambdaTerm[Typ[Term] with Subs[Typ[Term]], LambdaFixed[Term with Subs[Term], LambdaFixed[Func[Term, Func[Term, Term]] with Subs[Func[Term, Func[Term, Term]]], Func[Term, Term]]]]", "member" : "provingground.IntTypes.recN", "link" : "provingground\/IntTypes$.html#recN:provingground.HoTT.LambdaTerm[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.LambdaFixed[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.LambdaFixed[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]]", "kind" : "val"}, {"label" : "inducFn", "tail" : "(f0: U, g: (Long) ⇒ (U) ⇒ U, n: Long, thenApply: (U) ⇒ U): U", "member" : "provingground.IntTypes.inducFn", "link" : "provingground\/IntTypes$.html#inducFn[U<:provingground.HoTT.Term](f0:U,g:Long=>(U=>U),n:Long,thenApply:U=>U):U", "kind" : "def"}, {"label" : "Z", "tail" : "", "member" : "provingground.IntTypes.Z", "link" : "provingground\/IntTypes$.html#Z", "kind" : "object"}, {"label" : "N", "tail" : "", "member" : "provingground.IntTypes.N", "link" : "provingground\/IntTypes$.html#N", "kind" : "object"}, {"label" : "IntTyp", "tail" : "", "member" : "provingground.IntTypes.IntTyp", "link" : "provingground\/IntTypes$.html#IntTypextendsHoTT.SmallTyp", "kind" : "trait"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/IntTypes$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/IntTypes$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/IntTypes$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/IntTypes$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/IntTypes$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/IntTypes$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/IntTypes$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/IntTypes$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/IntTypes$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/IntTypes$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/IntTypes$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/IntTypes$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/IntTypes$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/IntTypes$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/IntTypes$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/IntTypes$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/IntTypes$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/IntTypes$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/IntTypes$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.ListType", "shortDescription" : "", "object" : "provingground\/ListType$.html", "members_object" : [{"label" : "tail", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], Func[Term, Term]]", "member" : "provingground.ListType.tail", "link" : "provingground\/ListType$.html#tail:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "headOpt", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], OptDepFuncDefn[Term]]", "member" : "provingground.ListType.headOpt", "link" : "provingground\/ListType$.html#headOpt:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.OptDepFuncDefn[provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "tailFn", "tail" : "(typ: Typ[U]): Func[Term, Term]", "member" : "provingground.ListType.tailFn", "link" : "provingground\/ListType$.html#tailFn[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](typ:provingground.HoTT.Typ[U]):provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]", "kind" : "def"}, {"label" : "headOptFn", "tail" : "(typ: Typ[U]): OptDepFuncDefn[Term]", "member" : "provingground.ListType.headOptFn", "link" : "provingground\/ListType$.html#headOptFn[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](typ:provingground.HoTT.Typ[U]):provingground.HoTT.OptDepFuncDefn[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "foldLeft", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Typ[Term] with Subs[Typ[Term]], Func[Term, Func[Term, Func[Func[Term, Func[Term, Term]], Term]]]]]", "member" : "provingground.ListType.foldLeft", "link" : "provingground\/ListType$.html#foldLeft:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]],provingground.HoTT.Term]]]]]", "kind" : "lazy val"}, {"label" : "lmap", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Typ[Term] with Subs[Typ[Term]], Func[Func[Term, Term], Func[Term, Term]]]]", "member" : "provingground.ListType.lmap", "link" : "provingground\/ListType$.html#lmap:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.Func[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]]", "kind" : "lazy val"}, {"label" : "lmapFunc", "tail" : "(u: Typ[U], v: Typ[V]): Func[Func[U, V], Func[Term, Term]]", "member" : "provingground.ListType.lmapFunc", "link" : "provingground\/ListType$.html#lmapFunc[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](u:provingground.HoTT.Typ[U],v:provingground.HoTT.Typ[V]):provingground.HoTT.Func[provingground.HoTT.Func[U,V],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "foldFunction", "tail" : "(u: Typ[U], v: Typ[V]): Func[Term, Func[V, Func[Func[U, Func[V, V]], V]]]", "member" : "provingground.ListType.foldFunction", "link" : "provingground\/ListType$.html#foldFunction[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](u:provingground.HoTT.Typ[U],v:provingground.HoTT.Typ[V]):provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[V,provingground.HoTT.Func[provingground.HoTT.Func[U,provingground.HoTT.Func[V,V]],V]]]", "kind" : "def"}, {"label" : "ListRep", "tail" : "", "member" : "provingground.ListType.ListRep", "link" : "provingground\/ListType$.html#ListRep[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsScalaRep[provingground.HoTT.Term,List[U]]withProductwithSerializable", "kind" : "case class"}, {"label" : "ListTerm", "tail" : "", "member" : "provingground.ListType.ListTerm", "link" : "provingground\/ListType$.html#ListTerm[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsScalaRep.ConstTerm[List[U]]withProductwithSerializable", "kind" : "case class"}, {"label" : "ListTyp", "tail" : "", "member" : "provingground.ListType.ListTyp", "link" : "provingground\/ListType$.html#ListTyp[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsHoTT.SmallTypwithProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/ListType$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/ListType$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/ListType$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/ListType$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/ListType$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/ListType$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/ListType$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/ListType$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/ListType$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/ListType$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/ListType$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/ListType$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/ListType$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/ListType$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/ListType$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/ListType$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/ListType$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/ListType$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/ListType$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.MatrixTypes", "shortDescription" : "", "object" : "provingground\/MatrixTypes$.html", "members_object" : [{"label" : "ZmatEql", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Func[Term, Func[Term, Term]] with Subs[Func[Term, Func[Term, Term]]], FuncLike[Func[Term, Func[Term, Term]] with Subs[Func[Term, Func[Term, Term]]], FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], Term]]]]]]", "member" : "provingground.MatrixTypes.ZmatEql", "link" : "provingground\/MatrixTypes$.html#ZmatEql:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]],provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]]]]]]", "kind" : "val"}, {"label" : "ZmatProd", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Term with Subs[Term], FuncLike[Func[Term, Func[Term, Term]] with Subs[Func[Term, Func[Term, Term]]], FuncLike[Func[Term, Func[Term, Term]] with Subs[Func[Term, Func[Term, Term]]], FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], Func[Func[Term, Func[Term, Term]], Term]]]]]]]]]", "member" : "provingground.MatrixTypes.ZmatProd", "link" : "provingground\/MatrixTypes$.html#ZmatProd:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]],provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]],provingground.HoTT.Term]]]]]]]]]", "kind" : "val"}, {"label" : "w", "tail" : ": Term with Subs[Term]", "member" : "provingground.MatrixTypes.w", "link" : "provingground\/MatrixTypes$.html#w:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "ZmatSum", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Func[Term, Func[Term, Term]] with Subs[Func[Term, Func[Term, Term]]], FuncLike[Func[Term, Func[Term, Term]] with Subs[Func[Term, Func[Term, Term]]], FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], Term]]]]]]", "member" : "provingground.MatrixTypes.ZmatSum", "link" : "provingground\/MatrixTypes$.html#ZmatSum:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]],provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]]]]]]", "kind" : "val"}, {"label" : "Matrix", "tail" : "", "member" : "provingground.MatrixTypes.Matrix", "link" : "provingground\/MatrixTypes$.html#MatrixextendsAnyRef", "kind" : "implicit class"}, {"label" : "y", "tail" : ": Term with Subs[Term]", "member" : "provingground.MatrixTypes.y", "link" : "provingground\/MatrixTypes$.html#y:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "x", "tail" : ": Term with Subs[Term]", "member" : "provingground.MatrixTypes.x", "link" : "provingground\/MatrixTypes$.html#x:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "basis", "tail" : ": Term with Subs[Term]", "member" : "provingground.MatrixTypes.basis", "link" : "provingground\/MatrixTypes$.html#basis:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "C", "tail" : ": Func[Term, Func[Term, Term]] with Subs[Func[Term, Func[Term, Term]]]", "member" : "provingground.MatrixTypes.C", "link" : "provingground\/MatrixTypes$.html#C:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "B", "tail" : ": Func[Term, Func[Term, Term]] with Subs[Func[Term, Func[Term, Term]]]", "member" : "provingground.MatrixTypes.B", "link" : "provingground\/MatrixTypes$.html#B:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "A", "tail" : ": Func[Term, Func[Term, Term]] with Subs[Func[Term, Func[Term, Term]]]", "member" : "provingground.MatrixTypes.A", "link" : "provingground\/MatrixTypes$.html#A:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "Zmat", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Typ[Term] with Subs[Typ[Term]], FuncTyp[Term, Func[Term, Term]]]]", "member" : "provingground.MatrixTypes.Zmat", "link" : "provingground\/MatrixTypes$.html#Zmat:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncTyp[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]]", "kind" : "val"}, {"label" : "W", "tail" : ": Typ[Term] with Subs[Typ[Term]]", "member" : "provingground.MatrixTypes.W", "link" : "provingground\/MatrixTypes$.html#W:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "Y", "tail" : ": Typ[Term] with Subs[Typ[Term]]", "member" : "provingground.MatrixTypes.Y", "link" : "provingground\/MatrixTypes$.html#Y:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "X", "tail" : ": Typ[Term] with Subs[Typ[Term]]", "member" : "provingground.MatrixTypes.X", "link" : "provingground\/MatrixTypes$.html#X:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/MatrixTypes$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/MatrixTypes$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/MatrixTypes$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/MatrixTypes$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/MatrixTypes$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/MatrixTypes$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/MatrixTypes$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/MatrixTypes$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/MatrixTypes$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/MatrixTypes$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/MatrixTypes$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/MatrixTypes$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/MatrixTypes$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/MatrixTypes$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/MatrixTypes$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/MatrixTypes$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/MatrixTypes$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/MatrixTypes$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/MatrixTypes$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.Norm", "shortDescription" : "", "object" : "provingground\/Norm$.html", "members_object" : [{"label" : "supWeight", "tail" : "(fn: FuncLike[Term, Term])(x: Term): Double", "member" : "provingground.Norm.supWeight", "link" : "provingground\/Norm$.html#supWeight(fn:provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term])(x:provingground.HoTT.Term):Double", "kind" : "def"}, {"label" : "supWeightExp", "tail" : "(fn: FuncLike[Term, Term])(x: Term): Option[Double]", "member" : "provingground.Norm.supWeightExp", "link" : "provingground\/Norm$.html#supWeightExp(fn:provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term])(x:provingground.HoTT.Term):Option[Double]", "kind" : "def"}, {"label" : "supnorm", "tail" : "(term: Term): Option[Double]", "member" : "provingground.Norm.supnorm", "link" : "provingground\/Norm$.html#supnorm(term:provingground.HoTT.Term):Option[Double]", "kind" : "def"}, {"label" : "maxopt", "tail" : "(l: List[Option[Double]]): Option[Double]", "member" : "provingground.Norm.maxopt", "link" : "provingground\/Norm$.html#maxopt(l:List[Option[Double]]):Option[Double]", "kind" : "def"}, {"label" : "foldopt", "tail" : "(op: (U, U) ⇒ U)(l: List[Option[U]]): Option[U]", "member" : "provingground.Norm.foldopt", "link" : "provingground\/Norm$.html#foldopt[U](op:(U,U)=>U)(l:List[Option[U]]):Option[U]", "kind" : "def"}, {"label" : "optop", "tail" : "(op: (U, U) ⇒ U)(a: Option[U], b: Option[U]): Option[U]", "member" : "provingground.Norm.optop", "link" : "provingground\/Norm$.html#optop[U,V](op:(U,U)=>U)(a:Option[U],b:Option[U]):Option[U]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/Norm$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/Norm$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/Norm$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/Norm$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/Norm$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/Norm$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/Norm$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/Norm$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/Norm$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/Norm$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/Norm$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/Norm$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/Norm$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/Norm$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/Norm$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/Norm$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/Norm$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/Norm$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/Norm$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.PlusTypInduc", "shortDescription" : "", "object" : "provingground\/PlusTypInduc$.html", "members_object" : [{"label" : "induc", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Func[Term, Typ[Term]] with Subs[Func[Term, Typ[Term]]], FuncLike[FuncLike[Term, Term] with Subs[FuncLike[Term, Term]], FuncLike[FuncLike[Term, Term] with Subs[FuncLike[Term, Term]], PlusExtendedDepFunction[Term]]]]]]", "member" : "provingground.PlusTypInduc.induc", "link" : "provingground\/PlusTypInduc$.html#induc:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]],provingground.HoTT.FuncLike[provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term]],provingground.PlusTypInduc.PlusExtendedDepFunction[provingground.HoTT.Term]]]]]]", "kind" : "val"}, {"label" : "gdep", "tail" : ": FuncLike[Term, Term] with Subs[FuncLike[Term, Term]]", "member" : "provingground.PlusTypInduc.gdep", "link" : "provingground\/PlusTypInduc$.html#gdep:provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "fdep", "tail" : ": FuncLike[Term, Term] with Subs[FuncLike[Term, Term]]", "member" : "provingground.PlusTypInduc.fdep", "link" : "provingground\/PlusTypInduc$.html#fdep:provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "C_b", "tail" : ": FuncLike[Term with Subs[Term], Typ[Term]]", "member" : "provingground.PlusTypInduc.C_b", "link" : "provingground\/PlusTypInduc$.html#C_b:provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "C_a", "tail" : ": FuncLike[Term with Subs[Term], Typ[Term]]", "member" : "provingground.PlusTypInduc.C_a", "link" : "provingground\/PlusTypInduc$.html#C_a:provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "b", "tail" : ": Term with Subs[Term]", "member" : "provingground.PlusTypInduc.b", "link" : "provingground\/PlusTypInduc$.html#b:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "a", "tail" : ": Term with Subs[Term]", "member" : "provingground.PlusTypInduc.a", "link" : "provingground\/PlusTypInduc$.html#a:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "Cs", "tail" : ": Func[Term, Typ[Term]] with Subs[Func[Term, Typ[Term]]]", "member" : "provingground.PlusTypInduc.Cs", "link" : "provingground\/PlusTypInduc$.html#Cs:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "AplusB", "tail" : ": PlusTyp[Term, Term]", "member" : "provingground.PlusTypInduc.AplusB", "link" : "provingground\/PlusTypInduc$.html#AplusB:provingground.HoTT.PlusTyp[provingground.HoTT.Term,provingground.HoTT.Term]", "kind" : "val"}, {"label" : "rec", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Func[Term, Term] with Subs[Func[Term, Term]], FuncLike[Func[Term, Term] with Subs[Func[Term, Term]], PlusExtendedFunction[Term]]]]]]", "member" : "provingground.PlusTypInduc.rec", "link" : "provingground\/PlusTypInduc$.html#rec:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]],provingground.PlusTypInduc.PlusExtendedFunction[provingground.HoTT.Term]]]]]]", "kind" : "val"}, {"label" : "g", "tail" : ": Func[Term, Term] with Subs[Func[Term, Term]]", "member" : "provingground.PlusTypInduc.g", "link" : "provingground\/PlusTypInduc$.html#g:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "f", "tail" : ": Func[Term, Term] with Subs[Func[Term, Term]]", "member" : "provingground.PlusTypInduc.f", "link" : "provingground\/PlusTypInduc$.html#f:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "C", "tail" : ": Typ[Term] with Subs[Typ[Term]]", "member" : "provingground.PlusTypInduc.C", "link" : "provingground\/PlusTypInduc$.html#C:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "B", "tail" : ": Typ[Term] with Subs[Typ[Term]]", "member" : "provingground.PlusTypInduc.B", "link" : "provingground\/PlusTypInduc$.html#B:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "A", "tail" : ": Typ[Term] with Subs[Typ[Term]]", "member" : "provingground.PlusTypInduc.A", "link" : "provingground\/PlusTypInduc$.html#A:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "PlusExtendedDepFunction", "tail" : "", "member" : "provingground.PlusTypInduc.PlusExtendedDepFunction", "link" : "provingground\/PlusTypInduc$.html#PlusExtendedDepFunction[V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]]extendsHoTT.FuncLike[provingground.HoTT.Term,V]withHoTT.Subs[provingground.PlusTypInduc.PlusExtendedDepFunction[V]]withProductwithSerializable", "kind" : "case class"}, {"label" : "PlusExtendedFunction", "tail" : "", "member" : "provingground.PlusTypInduc.PlusExtendedFunction", "link" : "provingground\/PlusTypInduc$.html#PlusExtendedFunction[V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]]extendsHoTT.Func[provingground.HoTT.Term,V]withHoTT.Subs[provingground.PlusTypInduc.PlusExtendedFunction[V]]withProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/PlusTypInduc$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/PlusTypInduc$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/PlusTypInduc$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/PlusTypInduc$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/PlusTypInduc$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/PlusTypInduc$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/PlusTypInduc$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/PlusTypInduc$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/PlusTypInduc$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/PlusTypInduc$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/PlusTypInduc$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/PlusTypInduc$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/PlusTypInduc$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/PlusTypInduc$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/PlusTypInduc$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/PlusTypInduc$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/PlusTypInduc$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/PlusTypInduc$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/PlusTypInduc$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.RecEnum", "shortDescription" : "", "object" : "provingground\/RecEnum$.html", "members_object" : [{"label" : "recEnumList", "tail" : ": (Typ[Term]) ⇒ Option[List[Term]]", "member" : "provingground.RecEnum.recEnumList", "link" : "provingground\/RecEnum$.html#recEnumList:provingground.HoTT.Typ[provingground.HoTT.Term]=>Option[List[provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/RecEnum$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/RecEnum$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/RecEnum$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/RecEnum$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/RecEnum$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/RecEnum$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/RecEnum$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/RecEnum$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/RecEnum$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/RecEnum$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/RecEnum$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/RecEnum$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/RecEnum$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/RecEnum$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/RecEnum$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/RecEnum$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/RecEnum$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/RecEnum$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/RecEnum$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.SigmaPiEnum", "shortDescription" : "", "object" : "provingground\/SigmaPiEnum$.html", "members_object" : [{"label" : "resPi", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Func[Term, Typ[Term]] with Subs[Func[Term, Typ[Term]]], FuncLike[Term with Subs[Term], Typ[Term]]]]", "member" : "provingground.SigmaPiEnum.resPi", "link" : "provingground\/SigmaPiEnum$.html#resPi:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Typ[provingground.HoTT.Term]]]]", "kind" : "val"}, {"label" : "resSigma", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Func[Term, Typ[Term]] with Subs[Func[Term, Typ[Term]]], FuncLike[Term with Subs[Term], FuncTyp[Term, DepPair[Term, Term]]]]]", "member" : "provingground.SigmaPiEnum.resSigma", "link" : "provingground\/SigmaPiEnum$.html#resSigma:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncTyp[provingground.HoTT.Term,provingground.HoTT.DepPair[provingground.HoTT.Term,provingground.HoTT.Term]]]]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/SigmaPiEnum$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/SigmaPiEnum$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/SigmaPiEnum$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/SigmaPiEnum$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/SigmaPiEnum$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/SigmaPiEnum$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/SigmaPiEnum$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/SigmaPiEnum$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/SigmaPiEnum$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/SigmaPiEnum$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/SigmaPiEnum$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/SigmaPiEnum$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/SigmaPiEnum$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/SigmaPiEnum$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/SigmaPiEnum$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/SigmaPiEnum$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/SigmaPiEnum$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/SigmaPiEnum$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/SigmaPiEnum$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}]};