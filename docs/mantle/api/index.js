Index.PACKAGES = {"reactivemongo.bson" : [], "akka.pattern" : [], "provingground" : [{"name" : "provingground.AgdaExpressions", "shortDescription" : "Parsing an Agda-like language in two steps.", "object" : "provingground\/AgdaExpressions$.html", "members_object" : [{"label" : "DepArrow", "tail" : "", "member" : "provingground.AgdaExpressions.DepArrow", "link" : "provingground\/AgdaExpressions$.html#DepArrowextendsAgdaExpressions.TypExpressionwithProductwithSerializable", "kind" : "case class"}, {"label" : "pityp", "tail" : "(x: Term, y: Term): Option[PiDefn[Term, Term]]", "member" : "provingground.AgdaExpressions.pityp", "link" : "provingground\/AgdaExpressions$.html#pityp(x:provingground.HoTT.Term,y:provingground.HoTT.Term):Option[provingground.HoTT.PiDefn[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "Arrow", "tail" : "", "member" : "provingground.AgdaExpressions.Arrow", "link" : "provingground\/AgdaExpressions$.html#ArrowextendsAgdaExpressions.TypExpressionwithProductwithSerializable", "kind" : "case class"}, {"label" : "arrowtyp", "tail" : "(x: Term, y: Term): Option[Typ[Term]]", "member" : "provingground.AgdaExpressions.arrowtyp", "link" : "provingground\/AgdaExpressions$.html#arrowtyp(x:provingground.HoTT.Term,y:provingground.HoTT.Term):Option[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "U", "tail" : "", "member" : "provingground.AgdaExpressions.U", "link" : "provingground\/AgdaExpressions$.html#U", "kind" : "object"}, {"label" : "Apply", "tail" : "", "member" : "provingground.AgdaExpressions.Apply", "link" : "provingground\/AgdaExpressions$.html#ApplyextendsAgdaExpressions.ExpressionwithProductwithSerializable", "kind" : "case class"}, {"label" : "applyterm", "tail" : "(f: Term, arg: Term): Option[Term]", "member" : "provingground.AgdaExpressions.applyterm", "link" : "provingground\/AgdaExpressions$.html#applyterm(f:provingground.HoTT.Term,arg:provingground.HoTT.Term):Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "Token", "tail" : "", "member" : "provingground.AgdaExpressions.Token", "link" : "provingground\/AgdaExpressions$.html#TokenextendsAgdaExpressions.ExpressionwithProductwithSerializable", "kind" : "case class"}, {"label" : "LambdaExp", "tail" : "", "member" : "provingground.AgdaExpressions.LambdaExp", "link" : "provingground\/AgdaExpressions$.html#LambdaExpextendsAgdaExpressions.ExpressionwithProductwithSerializable", "kind" : "case class"}, {"label" : "TypedVar", "tail" : "", "member" : "provingground.AgdaExpressions.TypedVar", "link" : "provingground\/AgdaExpressions$.html#TypedVarextendsAgdaExpressions.ExpressionwithProductwithSerializable", "kind" : "case class"}, {"label" : "symbterm", "tail" : "(name: String, tp: Term): Option[Term]", "member" : "provingground.AgdaExpressions.symbterm", "link" : "provingground\/AgdaExpressions$.html#symbterm(name:String,tp:provingground.HoTT.Term):Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "Equality", "tail" : "", "member" : "provingground.AgdaExpressions.Equality", "link" : "provingground\/AgdaExpressions$.html#EqualityextendsAgdaExpressions.StatementwithProductwithSerializable", "kind" : "case class"}, {"label" : "TypExpression", "tail" : "", "member" : "provingground.AgdaExpressions.TypExpression", "link" : "provingground\/AgdaExpressions$.html#TypExpressionextendsAgdaExpressions.Expression", "kind" : "trait"}, {"label" : "Expression", "tail" : "", "member" : "provingground.AgdaExpressions.Expression", "link" : "provingground\/AgdaExpressions$.html#ExpressionextendsAnyRef", "kind" : "trait"}, {"label" : "Statement", "tail" : "", "member" : "provingground.AgdaExpressions.Statement", "link" : "provingground\/AgdaExpressions$.html#StatementextendsAnyRef", "kind" : "trait"}, {"label" : "AgdaPatternParser", "tail" : "", "member" : "provingground.AgdaExpressions.AgdaPatternParser", "link" : "provingground\/AgdaExpressions$.html#AgdaPatternParserextendsJavaTokenParsers", "kind" : "class"}, {"label" : "AgdaParse", "tail" : "", "member" : "provingground.AgdaExpressions.AgdaParse", "link" : "provingground\/AgdaExpressions$.html#AgdaParseextendsJavaTokenParsers", "kind" : "class"}, {"label" : "splitblocks", "tail" : "(code: String): Array[String]", "member" : "provingground.AgdaExpressions.splitblocks", "link" : "provingground\/AgdaExpressions$.html#splitblocks(code:String):Array[String]", "kind" : "def"}, {"label" : "blnkline", "tail" : ": String", "member" : "provingground.AgdaExpressions.blnkline", "link" : "provingground\/AgdaExpressions$.html#blnkline:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/AgdaExpressions$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/AgdaExpressions$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/AgdaExpressions$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/AgdaExpressions$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/AgdaExpressions$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/AgdaExpressions$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/AgdaExpressions$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/AgdaExpressions$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/AgdaExpressions$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/AgdaExpressions$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/AgdaExpressions$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/AgdaExpressions$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/AgdaExpressions$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/AgdaExpressions$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/AgdaExpressions$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/AgdaExpressions$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/AgdaExpressions$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/AgdaExpressions$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/AgdaExpressions$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.Blender", "shortDescription" : "", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/Blender.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/Blender.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Blender[A]) ⇒ Boolean, msg: ⇒ Any): Blender[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/Blender.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (Blender[A]) ⇒ Boolean): Blender[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/Blender.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): Blender[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/Blender.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): Blender[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/Blender.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (Blender[A], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/Blender.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (Blender[A], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/Blender.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "iter", "tail" : "(init: A, copies: Int, loops: Int): Future[A]", "member" : "provingground.Blender.iter", "link" : "provingground\/Blender.html#iter(init:A,copies:Int,loops:Int):scala.concurrent.Future[A]", "kind" : "def"}, {"label" : "iterFut", "tail" : "(init: Future[A], copies: Int, loops: Int): Future[A]", "member" : "provingground.Blender.iterFut", "link" : "provingground\/Blender.html#iterFut(init:scala.concurrent.Future[A],copies:Int,loops:Int):scala.concurrent.Future[A]", "kind" : "def"}, {"label" : "futDynLoop", "tail" : "(fut: Future[A], n: Int): Future[A]", "member" : "provingground.Blender.futDynLoop", "link" : "provingground\/Blender.html#futDynLoop(fut:scala.concurrent.Future[A],n:Int):scala.concurrent.Future[A]", "kind" : "def"}, {"label" : "asyncDynLoop", "tail" : "(a: A, n: Int): Future[A]", "member" : "provingground.Blender.asyncDynLoop", "link" : "provingground\/Blender.html#asyncDynLoop(a:A,n:Int):scala.concurrent.Future[A]", "kind" : "def"}, {"member" : "provingground.Blender#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/Blender.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/Blender.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/Blender.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/Blender.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/Blender.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/Blender.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/Blender.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/Blender.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/Blender.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/Blender.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/Blender.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/Blender.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/Blender.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/Blender.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/Blender.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/Blender.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/Blender.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/Blender.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/Blender.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/Blender.html", "kind" : "class"}, {"name" : "provingground.BufferActor", "shortDescription" : "", "object" : "provingground\/BufferActor$.html", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/BufferActor.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/BufferActor.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (BufferActor[A]) ⇒ Boolean, msg: ⇒ Any): BufferActor[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/BufferActor.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (BufferActor[A]) ⇒ Boolean): BufferActor[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/BufferActor.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): BufferActor[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/BufferActor.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): BufferActor[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/BufferActor.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (BufferActor[A], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/BufferActor.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (BufferActor[A], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/BufferActor.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "receive", "tail" : "(): PartialFunction[Any, Unit]", "member" : "provingground.BufferActor.receive", "link" : "provingground\/BufferActor.html#receive:PartialFunction[Any,Unit]", "kind" : "def"}, {"label" : "buffer", "tail" : ": Vector[A]", "member" : "provingground.BufferActor.buffer", "link" : "provingground\/BufferActor.html#buffer:Vector[A]", "kind" : "var"}, {"member" : "provingground.BufferActor#<init>", "error" : "unsupported entity"}, {"label" : "unhandled", "tail" : "(message: Any): Unit", "member" : "akka.actor.Actor.unhandled", "link" : "provingground\/BufferActor.html#unhandled(message:Any):Unit", "kind" : "def"}, {"label" : "postRestart", "tail" : "(reason: Throwable): Unit", "member" : "akka.actor.Actor.postRestart", "link" : "provingground\/BufferActor.html#postRestart(reason:Throwable):Unit", "kind" : "def"}, {"label" : "preRestart", "tail" : "(reason: Throwable, message: Option[Any]): Unit", "member" : "akka.actor.Actor.preRestart", "link" : "provingground\/BufferActor.html#preRestart(reason:Throwable,message:Option[Any]):Unit", "kind" : "def"}, {"label" : "postStop", "tail" : "(): Unit", "member" : "akka.actor.Actor.postStop", "link" : "provingground\/BufferActor.html#postStop():Unit", "kind" : "def"}, {"label" : "preStart", "tail" : "(): Unit", "member" : "akka.actor.Actor.preStart", "link" : "provingground\/BufferActor.html#preStart():Unit", "kind" : "def"}, {"label" : "supervisorStrategy", "tail" : "(): SupervisorStrategy", "member" : "akka.actor.Actor.supervisorStrategy", "link" : "provingground\/BufferActor.html#supervisorStrategy:akka.actor.SupervisorStrategy", "kind" : "def"}, {"label" : "aroundPostRestart", "tail" : "(reason: Throwable): Unit", "member" : "akka.actor.Actor.aroundPostRestart", "link" : "provingground\/BufferActor.html#aroundPostRestart(reason:Throwable):Unit", "kind" : "def"}, {"label" : "aroundPreRestart", "tail" : "(reason: Throwable, message: Option[Any]): Unit", "member" : "akka.actor.Actor.aroundPreRestart", "link" : "provingground\/BufferActor.html#aroundPreRestart(reason:Throwable,message:Option[Any]):Unit", "kind" : "def"}, {"label" : "aroundPostStop", "tail" : "(): Unit", "member" : "akka.actor.Actor.aroundPostStop", "link" : "provingground\/BufferActor.html#aroundPostStop():Unit", "kind" : "def"}, {"label" : "aroundPreStart", "tail" : "(): Unit", "member" : "akka.actor.Actor.aroundPreStart", "link" : "provingground\/BufferActor.html#aroundPreStart():Unit", "kind" : "def"}, {"label" : "aroundReceive", "tail" : "(receive: akka.actor.Actor.Receive, msg: Any): Unit", "member" : "akka.actor.Actor.aroundReceive", "link" : "provingground\/BufferActor.html#aroundReceive(receive:akka.actor.Actor.Receive,msg:Any):Unit", "kind" : "def"}, {"label" : "sender", "tail" : "(): ActorRef", "member" : "akka.actor.Actor.sender", "link" : "provingground\/BufferActor.html#sender():akka.actor.ActorRef", "kind" : "final def"}, {"label" : "self", "tail" : ": ActorRef", "member" : "akka.actor.Actor.self", "link" : "provingground\/BufferActor.html#self:akka.actor.ActorRef", "kind" : "implicit final val"}, {"label" : "context", "tail" : ": ActorContext", "member" : "akka.actor.Actor.context", "link" : "provingground\/BufferActor.html#context:akka.actor.ActorContext", "kind" : "implicit val"}, {"label" : "Receive", "tail" : "", "member" : "akka.actor.Actor.Receive", "link" : "provingground\/BufferActor.html#Receive=akka.actor.Actor.Receive", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/BufferActor.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/BufferActor.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/BufferActor.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/BufferActor.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/BufferActor.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/BufferActor.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/BufferActor.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/BufferActor.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/BufferActor.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/BufferActor.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/BufferActor.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/BufferActor.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/BufferActor.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/BufferActor.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/BufferActor.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/BufferActor.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/BufferActor.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/BufferActor.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/BufferActor.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "buffer", "tail" : "(): ActorRef", "member" : "provingground.BufferActor.buffer", "link" : "provingground\/BufferActor$.html#buffer[A]:akka.actor.ActorRef", "kind" : "def"}, {"label" : "props", "tail" : "(): Props", "member" : "provingground.BufferActor.props", "link" : "provingground\/BufferActor$.html#props[A]:akka.actor.Props", "kind" : "def"}, {"label" : "save", "tail" : "(ref: ActorRef): (A) ⇒ Unit", "member" : "provingground.BufferActor.save", "link" : "provingground\/BufferActor$.html#save[A](ref:akka.actor.ActorRef):A=>Unit", "kind" : "def"}, {"label" : "Tick", "tail" : "", "member" : "provingground.BufferActor.Tick", "link" : "provingground\/BufferActor$.html#Tick", "kind" : "object"}, {"label" : "Ticker", "tail" : "", "member" : "provingground.BufferActor.Ticker", "link" : "provingground\/BufferActor$.html#TickerextendsAnyRef", "kind" : "class"}, {"label" : "Query", "tail" : "", "member" : "provingground.BufferActor.Query", "link" : "provingground\/BufferActor$.html#Query", "kind" : "object"}, {"label" : "Save", "tail" : "", "member" : "provingground.BufferActor.Save", "link" : "provingground\/BufferActor$.html#Save[A]extendsProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/BufferActor$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/BufferActor$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/BufferActor$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/BufferActor$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/BufferActor$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/BufferActor$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/BufferActor$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/BufferActor$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/BufferActor$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/BufferActor$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/BufferActor$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/BufferActor$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/BufferActor$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/BufferActor$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/BufferActor$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/BufferActor$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/BufferActor$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/BufferActor$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/BufferActor$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/BufferActor.html", "kind" : "class"}, {"name" : "provingground.BufferedRun", "shortDescription" : "", "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/BufferedRun.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/BufferedRun.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (BufferedRun[A]) ⇒ Boolean, msg: ⇒ Any): BufferedRun[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/BufferedRun.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (BufferedRun[A]) ⇒ Boolean): BufferedRun[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/BufferedRun.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): BufferedRun[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/BufferedRun.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): BufferedRun[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/BufferedRun.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (BufferedRun[A], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/BufferedRun.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (BufferedRun[A], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/BufferedRun.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "timeseries", "tail" : ": ArrayBuffer[A]", "member" : "provingground.BufferedRun.timeseries", "link" : "provingground\/BufferedRun.html#timeseries:scala.collection.mutable.ArrayBuffer[A]", "kind" : "val"}, {"label" : "it", "tail" : ": Iterator[A]", "member" : "provingground.BufferedRun.it", "link" : "provingground\/BufferedRun.html#it:Iterator[A]", "kind" : "val"}, {"label" : "stop", "tail" : "(): Unit", "member" : "provingground.BufferedRun.stop", "link" : "provingground\/BufferedRun.html#stop():Unit", "kind" : "def"}, {"label" : "live", "tail" : ": Boolean", "member" : "provingground.BufferedRun.live", "link" : "provingground\/BufferedRun.html#live:Boolean", "kind" : "var"}, {"member" : "provingground.BufferedRun#<init>", "error" : "unsupported entity"}, {"label" : "iter", "tail" : ": Iterator[A]", "member" : "provingground.BufferedRun.iter", "link" : "provingground\/BufferedRun.html#iter:Iterator[A]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/BufferedRun.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/BufferedRun.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/BufferedRun.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/BufferedRun.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/BufferedRun.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/BufferedRun.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/BufferedRun.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/BufferedRun.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/BufferedRun.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/BufferedRun.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/BufferedRun.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/BufferedRun.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/BufferedRun.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/BufferedRun.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/BufferedRun.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/BufferedRun.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/BufferedRun.html", "kind" : "case class"}, {"name" : "provingground.BufferFlow", "shortDescription" : "", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/BufferFlow.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/BufferFlow.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (BufferFlow[A]) ⇒ Boolean, msg: ⇒ Any): BufferFlow[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/BufferFlow.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (BufferFlow[A]) ⇒ Boolean): BufferFlow[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/BufferFlow.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): BufferFlow[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/BufferFlow.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): BufferFlow[A]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/BufferFlow.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (BufferFlow[A], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/BufferFlow.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (BufferFlow[A], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/BufferFlow.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "source", "tail" : "(d: FiniteDuration): Source[A, Cancellable]", "member" : "provingground.BufferFlow.source", "link" : "provingground\/BufferFlow.html#source(d:scala.concurrent.duration.FiniteDuration):akka.stream.scaladsl.Source[A,akka.actor.Cancellable]", "kind" : "def"}, {"label" : "ticksource", "tail" : "(d: FiniteDuration): Source[Ticker, Cancellable]", "member" : "provingground.BufferFlow.ticksource", "link" : "provingground\/BufferFlow.html#ticksource(d:scala.concurrent.duration.FiniteDuration):akka.stream.scaladsl.Source[provingground.BufferActor.Ticker,akka.actor.Cancellable]", "kind" : "def"}, {"label" : "flow", "tail" : "(): Flow[X, A, NotUsed]", "member" : "provingground.BufferFlow.flow", "link" : "provingground\/BufferFlow.html#flow[X]:akka.stream.scaladsl.Flow[X,A,akka.NotUsed]", "kind" : "def"}, {"label" : "query", "tail" : "(): Vector[A]", "member" : "provingground.BufferFlow.query", "link" : "provingground\/BufferFlow.html#query():Vector[A]", "kind" : "def"}, {"label" : "timeout", "tail" : ": Timeout", "member" : "provingground.BufferFlow.timeout", "link" : "provingground\/BufferFlow.html#timeout:akka.util.Timeout", "kind" : "implicit val"}, {"label" : "sink", "tail" : "(): Sink[A, Future[Done]]", "member" : "provingground.BufferFlow.sink", "link" : "provingground\/BufferFlow.html#sink():akka.stream.scaladsl.Sink[A,scala.concurrent.Future[akka.Done]]", "kind" : "def"}, {"label" : "actor", "tail" : ": ActorRef", "member" : "provingground.BufferFlow.actor", "link" : "provingground\/BufferFlow.html#actor:akka.actor.ActorRef", "kind" : "val"}, {"member" : "provingground.BufferFlow#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/BufferFlow.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/BufferFlow.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/BufferFlow.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/BufferFlow.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/BufferFlow.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/BufferFlow.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/BufferFlow.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/BufferFlow.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/BufferFlow.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/BufferFlow.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/BufferFlow.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/BufferFlow.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/BufferFlow.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/BufferFlow.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/BufferFlow.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/BufferFlow.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/BufferFlow.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/BufferFlow.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/BufferFlow.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/BufferFlow.html", "kind" : "class"}, {"name" : "provingground.DeducerBuffer", "shortDescription" : "", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/DeducerBuffer.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/DeducerBuffer.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (DeducerBuffer) ⇒ Boolean, msg: ⇒ Any): DeducerBuffer", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/DeducerBuffer.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (DeducerBuffer) ⇒ Boolean): DeducerBuffer", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/DeducerBuffer.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): DeducerBuffer", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/DeducerBuffer.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): DeducerBuffer", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/DeducerBuffer.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (DeducerBuffer, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/DeducerBuffer.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (DeducerBuffer, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/DeducerBuffer.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "sink", "tail" : "(): Sink[FiniteDistribution[Term], Future[Done]]", "member" : "provingground.DeducerBuffer.sink", "link" : "provingground\/DeducerBuffer.html#sink:akka.stream.scaladsl.Sink[provingground.FiniteDistribution[provingground.HoTT.Term],scala.concurrent.Future[akka.Done]]", "kind" : "def"}, {"label" : "save", "tail" : "(fd: FiniteDistribution[Term]): Unit", "member" : "provingground.DeducerBuffer.save", "link" : "provingground\/DeducerBuffer.html#save(fd:provingground.FiniteDistribution[provingground.HoTT.Term]):Unit", "kind" : "def"}, {"label" : "timeSeries", "tail" : ": Map[Term, Vector[Double]]", "member" : "provingground.DeducerBuffer.timeSeries", "link" : "provingground\/DeducerBuffer.html#timeSeries:scala.collection.mutable.Map[provingground.HoTT.Term,Vector[Double]]", "kind" : "val"}, {"label" : "dist", "tail" : ": FiniteDistribution[Term]", "member" : "provingground.DeducerBuffer.dist", "link" : "provingground\/DeducerBuffer.html#dist:provingground.FiniteDistribution[provingground.HoTT.Term]", "kind" : "var"}, {"label" : "loops", "tail" : ": Int", "member" : "provingground.DeducerBuffer.loops", "link" : "provingground\/DeducerBuffer.html#loops:Int", "kind" : "var"}, {"member" : "provingground.DeducerBuffer#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/DeducerBuffer.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/DeducerBuffer.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/DeducerBuffer.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/DeducerBuffer.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/DeducerBuffer.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/DeducerBuffer.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/DeducerBuffer.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/DeducerBuffer.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/DeducerBuffer.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/DeducerBuffer.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/DeducerBuffer.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/DeducerBuffer.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/DeducerBuffer.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/DeducerBuffer.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/DeducerBuffer.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/DeducerBuffer.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/DeducerBuffer.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/DeducerBuffer.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/DeducerBuffer.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/DeducerBuffer.html", "kind" : "class"}, {"name" : "provingground.DeducerSource", "shortDescription" : "", "object" : "provingground\/DeducerSource$.html", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/DeducerSource.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/DeducerSource.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (DeducerSource) ⇒ Boolean, msg: ⇒ Any): DeducerSource", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/DeducerSource.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (DeducerSource) ⇒ Boolean): DeducerSource", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/DeducerSource.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): DeducerSource", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/DeducerSource.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): DeducerSource", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/DeducerSource.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (DeducerSource, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/DeducerSource.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (DeducerSource, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/DeducerSource.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "timedRunConc", "tail" : "(dedTime: FiniteDuration, learnTime: FiniteDuration, name: String, threads: Int): Future[Done]", "member" : "provingground.DeducerSource.timedRunConc", "link" : "provingground\/DeducerSource.html#timedRunConc(dedTime:scala.concurrent.duration.FiniteDuration,learnTime:scala.concurrent.duration.FiniteDuration,name:String,threads:Int):scala.concurrent.Future[akka.Done]", "kind" : "def"}, {"label" : "timedRun", "tail" : "(dedTime: FiniteDuration, learnTime: FiniteDuration, name: String): Future[Done]", "member" : "provingground.DeducerSource.timedRun", "link" : "provingground\/DeducerSource.html#timedRun(dedTime:scala.concurrent.duration.FiniteDuration,learnTime:scala.concurrent.duration.FiniteDuration,name:String):scala.concurrent.Future[akka.Done]", "kind" : "def"}, {"label" : "loopySaved", "tail" : "(dedLoops: Long, learnLoops: Long, name: String): Future[Done]", "member" : "provingground.DeducerSource.loopySaved", "link" : "provingground\/DeducerSource.html#loopySaved(dedLoops:Long,learnLoops:Long,name:String):scala.concurrent.Future[akka.Done]", "kind" : "def"}, {"label" : "loopyConc", "tail" : "(dedLoops: Long, learnLoops: Long, threads: Int): NotUsed", "member" : "provingground.DeducerSource.loopyConc", "link" : "provingground\/DeducerSource.html#loopyConc(dedLoops:Long,learnLoops:Long,threads:Int):akka.NotUsed", "kind" : "def"}, {"label" : "loopy", "tail" : "(dedLoops: Long, learnLoops: Long): NotUsed", "member" : "provingground.DeducerSource.loopy", "link" : "provingground\/DeducerSource.html#loopy(dedLoops:Long,learnLoops:Long):akka.NotUsed", "kind" : "def"}, {"label" : "learnFlowConc", "tail" : "(threads: Int): Flow[FiniteDistribution[Term], FiniteDistribution[Term], NotUsed]", "member" : "provingground.DeducerSource.learnFlowConc", "link" : "provingground\/DeducerSource.html#learnFlowConc(threads:Int):akka.stream.scaladsl.Flow[provingground.FiniteDistribution[provingground.HoTT.Term],provingground.FiniteDistribution[provingground.HoTT.Term],akka.NotUsed]", "kind" : "def"}, {"label" : "learnFlow", "tail" : "(): Flow[FiniteDistribution[Term], FiniteDistribution[Term], NotUsed]", "member" : "provingground.DeducerSource.learnFlow", "link" : "provingground\/DeducerSource.html#learnFlow:akka.stream.scaladsl.Flow[provingground.FiniteDistribution[provingground.HoTT.Term],provingground.FiniteDistribution[provingground.HoTT.Term],akka.NotUsed]", "kind" : "def"}, {"label" : "learnBatchesConc", "tail" : "(threads: Int)(fdInit: FiniteDistribution[Term], invMap: InvMap): Source[FiniteDistribution[Term], NotUsed]", "member" : "provingground.DeducerSource.learnBatchesConc", "link" : "provingground\/DeducerSource.html#learnBatchesConc(threads:Int)(fdInit:provingground.FiniteDistribution[provingground.HoTT.Term],invMap:provingground.Deducer.InvMap):akka.stream.scaladsl.Source[provingground.FiniteDistribution[provingground.HoTT.Term],akka.NotUsed]", "kind" : "def"}, {"label" : "learnBatches", "tail" : "(fdInit: FiniteDistribution[Term], invMap: InvMap): Source[FiniteDistribution[Term], NotUsed]", "member" : "provingground.DeducerSource.learnBatches", "link" : "provingground\/DeducerSource.html#learnBatches(fdInit:provingground.FiniteDistribution[provingground.HoTT.Term],invMap:provingground.Deducer.InvMap):akka.stream.scaladsl.Source[provingground.FiniteDistribution[provingground.HoTT.Term],akka.NotUsed]", "kind" : "def"}, {"label" : "deducResult", "tail" : "(): Source[FiniteDistribution[Term], NotUsed]", "member" : "provingground.DeducerSource.deducResult", "link" : "provingground\/DeducerSource.html#deducResult:akka.stream.scaladsl.Source[provingground.FiniteDistribution[provingground.HoTT.Term],akka.NotUsed]", "kind" : "def"}, {"label" : "deducConc", "tail" : "(threads: Int): Source[FiniteDistribution[Term], NotUsed]", "member" : "provingground.DeducerSource.deducConc", "link" : "provingground\/DeducerSource.html#deducConc(threads:Int):akka.stream.scaladsl.Source[provingground.FiniteDistribution[provingground.HoTT.Term],akka.NotUsed]", "kind" : "def"}, {"label" : "deduc", "tail" : "(): Source[FiniteDistribution[Term], NotUsed]", "member" : "provingground.DeducerSource.deduc", "link" : "provingground\/DeducerSource.html#deduc:akka.stream.scaladsl.Source[provingground.FiniteDistribution[provingground.HoTT.Term],akka.NotUsed]", "kind" : "def"}, {"label" : "deducBatchesConc", "tail" : "(threads: Int)(fdInit: FiniteDistribution[Term], invMap: InvMap): Source[FiniteDistribution[Term], NotUsed]", "member" : "provingground.DeducerSource.deducBatchesConc", "link" : "provingground\/DeducerSource.html#deducBatchesConc(threads:Int)(fdInit:provingground.FiniteDistribution[provingground.HoTT.Term],invMap:provingground.Deducer.InvMap):akka.stream.scaladsl.Source[provingground.FiniteDistribution[provingground.HoTT.Term],akka.NotUsed]", "kind" : "def"}, {"label" : "deducBatches", "tail" : "(fdInit: FiniteDistribution[Term], invMap: InvMap): Source[FiniteDistribution[Term], NotUsed]", "member" : "provingground.DeducerSource.deducBatches", "link" : "provingground\/DeducerSource.html#deducBatches(fdInit:provingground.FiniteDistribution[provingground.HoTT.Term],invMap:provingground.Deducer.InvMap):akka.stream.scaladsl.Source[provingground.FiniteDistribution[provingground.HoTT.Term],akka.NotUsed]", "kind" : "def"}, {"label" : "initSourceConc", "tail" : "(threads: Int): Source[(FiniteDistribution[Term], InvMap), NotUsed]", "member" : "provingground.DeducerSource.initSourceConc", "link" : "provingground\/DeducerSource.html#initSourceConc(threads:Int):akka.stream.scaladsl.Source[(provingground.FiniteDistribution[provingground.HoTT.Term],provingground.Deducer.InvMap),akka.NotUsed]", "kind" : "def"}, {"label" : "initSource", "tail" : "(): Source[(FiniteDistribution[Term], InvMap), NotUsed]", "member" : "provingground.DeducerSource.initSource", "link" : "provingground\/DeducerSource.html#initSource:akka.stream.scaladsl.Source[(provingground.FiniteDistribution[provingground.HoTT.Term],provingground.Deducer.InvMap),akka.NotUsed]", "kind" : "def"}, {"label" : "firstBatchConc", "tail" : "(threads: Int): Future[(FiniteDistribution[Term], InvMap)]", "member" : "provingground.DeducerSource.firstBatchConc", "link" : "provingground\/DeducerSource.html#firstBatchConc(threads:Int):scala.concurrent.Future[(provingground.FiniteDistribution[provingground.HoTT.Term],provingground.Deducer.InvMap)]", "kind" : "def"}, {"label" : "firstBatchFut", "tail" : "(): Future[(FiniteDistribution[Term], InvMap)]", "member" : "provingground.DeducerSource.firstBatchFut", "link" : "provingground\/DeducerSource.html#firstBatchFut:scala.concurrent.Future[(provingground.FiniteDistribution[provingground.HoTT.Term],provingground.Deducer.InvMap)]", "kind" : "def"}, {"member" : "provingground.DeducerSource#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/DeducerSource.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/DeducerSource.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/DeducerSource.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/DeducerSource.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/DeducerSource.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/DeducerSource.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/DeducerSource.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/DeducerSource.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/DeducerSource.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/DeducerSource.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/DeducerSource.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/DeducerSource.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/DeducerSource.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/DeducerSource.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/DeducerSource.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/DeducerSource.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/DeducerSource.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/DeducerSource.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/DeducerSource.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "loadLearn", "tail" : "(name: String, names: Vector[(Term, String)]): Source[FiniteDistribution[Term], NotUsed]", "member" : "provingground.DeducerSource.loadLearn", "link" : "provingground\/DeducerSource$.html#loadLearn(name:String,names:Vector[(provingground.HoTT.Term,String)]):akka.stream.scaladsl.Source[provingground.FiniteDistribution[provingground.HoTT.Term],akka.NotUsed]", "kind" : "def"}, {"label" : "loadDeduc", "tail" : "(name: String, names: Vector[(Term, String)]): Source[FiniteDistribution[Term], NotUsed]", "member" : "provingground.DeducerSource.loadDeduc", "link" : "provingground\/DeducerSource$.html#loadDeduc(name:String,names:Vector[(provingground.HoTT.Term,String)]):akka.stream.scaladsl.Source[provingground.FiniteDistribution[provingground.HoTT.Term],akka.NotUsed]", "kind" : "def"}, {"label" : "saveLearn", "tail" : "(name: String, names: Vector[(Term, String)]): Sink[FiniteDistribution[Term], Future[Done]]", "member" : "provingground.DeducerSource.saveLearn", "link" : "provingground\/DeducerSource$.html#saveLearn(name:String,names:Vector[(provingground.HoTT.Term,String)]):akka.stream.scaladsl.Sink[provingground.FiniteDistribution[provingground.HoTT.Term],scala.concurrent.Future[akka.Done]]", "kind" : "def"}, {"label" : "saveDeduc", "tail" : "(name: String, names: Vector[(Term, String)]): Sink[FiniteDistribution[Term], Future[Done]]", "member" : "provingground.DeducerSource.saveDeduc", "link" : "provingground\/DeducerSource$.html#saveDeduc(name:String,names:Vector[(provingground.HoTT.Term,String)]):akka.stream.scaladsl.Sink[provingground.FiniteDistribution[provingground.HoTT.Term],scala.concurrent.Future[akka.Done]]", "kind" : "def"}, {"label" : "display", "tail" : "(names: Vector[(Term, String)]): Sink[FiniteDistribution[Term], NotUsed]", "member" : "provingground.DeducerSource.display", "link" : "provingground\/DeducerSource$.html#display(names:Vector[(provingground.HoTT.Term,String)]):akka.stream.scaladsl.Sink[provingground.FiniteDistribution[provingground.HoTT.Term],akka.NotUsed]", "kind" : "def"}, {"label" : "withTimeSeries", "tail" : "(terms: ⇒ Traversable[Term]): Flow[FiniteDistribution[Term], (FiniteDistribution[Term], Map[Term, Vector[Double]]), NotUsed]", "member" : "provingground.DeducerSource.withTimeSeries", "link" : "provingground\/DeducerSource$.html#withTimeSeries(terms:=>Traversable[provingground.HoTT.Term]):akka.stream.scaladsl.Flow[provingground.FiniteDistribution[provingground.HoTT.Term],(provingground.FiniteDistribution[provingground.HoTT.Term],Map[provingground.HoTT.Term,Vector[Double]]),akka.NotUsed]", "kind" : "def"}, {"label" : "lastResult", "tail" : "(): Flow[FiniteDistribution[Term], FiniteDistribution[Term], NotUsed]", "member" : "provingground.DeducerSource.lastResult", "link" : "provingground\/DeducerSource$.html#lastResult:akka.stream.scaladsl.Flow[provingground.FiniteDistribution[provingground.HoTT.Term],provingground.FiniteDistribution[provingground.HoTT.Term],akka.NotUsed]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/DeducerSource$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/DeducerSource$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/DeducerSource$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/DeducerSource$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/DeducerSource$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/DeducerSource$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/DeducerSource$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/DeducerSource$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/DeducerSource$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/DeducerSource$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/DeducerSource$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/DeducerSource$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/DeducerSource$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/DeducerSource$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/DeducerSource$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/DeducerSource$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/DeducerSource$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/DeducerSource$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/DeducerSource$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/DeducerSource.html", "kind" : "class"}, {"name" : "provingground.FDHub", "shortDescription" : "Actor controlling (bu not creating) the various loopers for running;maintains info on the state etc.", "object" : "provingground\/FDHub$.html", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/FDHub.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/FDHub.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (FDHub) ⇒ Boolean, msg: ⇒ Any): FDHub", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/FDHub.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (FDHub) ⇒ Boolean): FDHub", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/FDHub.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): FDHub", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/FDHub.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): FDHub", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/FDHub.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (FDHub, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/FDHub.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (FDHub, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/FDHub.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "receive", "tail" : "(): PartialFunction[Any, Unit]", "member" : "provingground.FDHub.receive", "link" : "provingground\/FDHub.html#receive:PartialFunction[Any,Unit]", "kind" : "def"}, {"label" : "states", "tail" : "(): Map[String, State]", "member" : "provingground.FDHub.states", "link" : "provingground\/FDHub.html#states:scala.collection.immutable.Map[String,provingground.FDHub.State]", "kind" : "def"}, {"label" : "names", "tail" : "(): List[String]", "member" : "provingground.FDHub.names", "link" : "provingground\/FDHub.html#names:List[String]", "kind" : "def"}, {"label" : "loopers", "tail" : ": Map[ActorRef, State]", "member" : "provingground.FDHub.loopers", "link" : "provingground\/FDHub.html#loopers:Map[akka.actor.ActorRef,provingground.FDHub.State]", "kind" : "var"}, {"member" : "provingground.FDHub#<init>", "error" : "unsupported entity"}, {"label" : "unhandled", "tail" : "(message: Any): Unit", "member" : "akka.actor.Actor.unhandled", "link" : "provingground\/FDHub.html#unhandled(message:Any):Unit", "kind" : "def"}, {"label" : "postRestart", "tail" : "(reason: Throwable): Unit", "member" : "akka.actor.Actor.postRestart", "link" : "provingground\/FDHub.html#postRestart(reason:Throwable):Unit", "kind" : "def"}, {"label" : "preRestart", "tail" : "(reason: Throwable, message: Option[Any]): Unit", "member" : "akka.actor.Actor.preRestart", "link" : "provingground\/FDHub.html#preRestart(reason:Throwable,message:Option[Any]):Unit", "kind" : "def"}, {"label" : "postStop", "tail" : "(): Unit", "member" : "akka.actor.Actor.postStop", "link" : "provingground\/FDHub.html#postStop():Unit", "kind" : "def"}, {"label" : "preStart", "tail" : "(): Unit", "member" : "akka.actor.Actor.preStart", "link" : "provingground\/FDHub.html#preStart():Unit", "kind" : "def"}, {"label" : "supervisorStrategy", "tail" : "(): SupervisorStrategy", "member" : "akka.actor.Actor.supervisorStrategy", "link" : "provingground\/FDHub.html#supervisorStrategy:akka.actor.SupervisorStrategy", "kind" : "def"}, {"label" : "aroundPostRestart", "tail" : "(reason: Throwable): Unit", "member" : "akka.actor.Actor.aroundPostRestart", "link" : "provingground\/FDHub.html#aroundPostRestart(reason:Throwable):Unit", "kind" : "def"}, {"label" : "aroundPreRestart", "tail" : "(reason: Throwable, message: Option[Any]): Unit", "member" : "akka.actor.Actor.aroundPreRestart", "link" : "provingground\/FDHub.html#aroundPreRestart(reason:Throwable,message:Option[Any]):Unit", "kind" : "def"}, {"label" : "aroundPostStop", "tail" : "(): Unit", "member" : "akka.actor.Actor.aroundPostStop", "link" : "provingground\/FDHub.html#aroundPostStop():Unit", "kind" : "def"}, {"label" : "aroundPreStart", "tail" : "(): Unit", "member" : "akka.actor.Actor.aroundPreStart", "link" : "provingground\/FDHub.html#aroundPreStart():Unit", "kind" : "def"}, {"label" : "aroundReceive", "tail" : "(receive: akka.actor.Actor.Receive, msg: Any): Unit", "member" : "akka.actor.Actor.aroundReceive", "link" : "provingground\/FDHub.html#aroundReceive(receive:akka.actor.Actor.Receive,msg:Any):Unit", "kind" : "def"}, {"label" : "sender", "tail" : "(): ActorRef", "member" : "akka.actor.Actor.sender", "link" : "provingground\/FDHub.html#sender():akka.actor.ActorRef", "kind" : "final def"}, {"label" : "self", "tail" : ": ActorRef", "member" : "akka.actor.Actor.self", "link" : "provingground\/FDHub.html#self:akka.actor.ActorRef", "kind" : "implicit final val"}, {"label" : "context", "tail" : ": ActorContext", "member" : "akka.actor.Actor.context", "link" : "provingground\/FDHub.html#context:akka.actor.ActorContext", "kind" : "implicit val"}, {"label" : "Receive", "tail" : "", "member" : "akka.actor.Actor.Receive", "link" : "provingground\/FDHub.html#Receive=akka.actor.Actor.Receive", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/FDHub.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/FDHub.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/FDHub.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/FDHub.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/FDHub.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/FDHub.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/FDHub.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/FDHub.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/FDHub.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/FDHub.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/FDHub.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/FDHub.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/FDHub.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/FDHub.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/FDHub.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/FDHub.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/FDHub.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/FDHub.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/FDHub.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "setEpsilon", "tail" : "(runner: ActorRef, epsilon: Double)(hub: ActorRef): Unit", "member" : "provingground.FDHub.setEpsilon", "link" : "provingground\/FDHub$.html#setEpsilon(runner:akka.actor.ActorRef,epsilon:Double)(implicithub:akka.actor.ActorRef):Unit", "kind" : "def"}, {"label" : "setStrictness", "tail" : "(runner: ActorRef, strictness: Double)(hub: ActorRef): Unit", "member" : "provingground.FDHub.setStrictness", "link" : "provingground\/FDHub$.html#setStrictness(runner:akka.actor.ActorRef,strictness:Double)(implicithub:akka.actor.ActorRef):Unit", "kind" : "def"}, {"label" : "setSteps", "tail" : "(runner: ActorRef, steps: Int)(hub: ActorRef): Unit", "member" : "provingground.FDHub.setSteps", "link" : "provingground\/FDHub$.html#setSteps(runner:akka.actor.ActorRef,steps:Int)(implicithub:akka.actor.ActorRef):Unit", "kind" : "def"}, {"label" : "setParam", "tail" : "(runner: ActorRef, steps: Int, strictness: Double, epsilon: Double)(hub: ActorRef): Unit", "member" : "provingground.FDHub.setParam", "link" : "provingground\/FDHub$.html#setParam(runner:akka.actor.ActorRef,steps:Int,strictness:Double,epsilon:Double)(implicithub:akka.actor.ActorRef):Unit", "kind" : "def"}, {"label" : "resume", "tail" : "(runner: ActorRef)(hub: ActorRef): Unit", "member" : "provingground.FDHub.resume", "link" : "provingground\/FDHub$.html#resume(runner:akka.actor.ActorRef)(implicithub:akka.actor.ActorRef):Unit", "kind" : "def"}, {"label" : "pause", "tail" : "(runner: ActorRef)(hub: ActorRef): Unit", "member" : "provingground.FDHub.pause", "link" : "provingground\/FDHub$.html#pause(runner:akka.actor.ActorRef)(implicithub:akka.actor.ActorRef):Unit", "kind" : "def"}, {"label" : "start", "tail" : "(runner: ActorRef, steps: Int, strictness: Double, epsilon: Double)(hub: ActorRef): Unit", "member" : "provingground.FDHub.start", "link" : "provingground\/FDHub$.html#start(runner:akka.actor.ActorRef,steps:Int,strictness:Double,epsilon:Double)(implicithub:akka.actor.ActorRef):Unit", "kind" : "def"}, {"label" : "states", "tail" : "(hub: ActorRef): Future[Map[String, State]]", "member" : "provingground.FDHub.states", "link" : "provingground\/FDHub$.html#states(implicithub:akka.actor.ActorRef):scala.concurrent.Future[Map[String,provingground.FDHub.State]]", "kind" : "def"}, {"label" : "loopers", "tail" : "(hub: ActorRef): Future[List[String]]", "member" : "provingground.FDHub.loopers", "link" : "provingground\/FDHub$.html#loopers(implicithub:akka.actor.ActorRef):scala.concurrent.Future[List[String]]", "kind" : "def"}, {"label" : "timeout", "tail" : ": Timeout", "member" : "provingground.FDHub.timeout", "link" : "provingground\/FDHub$.html#timeout:akka.util.Timeout", "kind" : "implicit val"}, {"label" : "stop", "tail" : "(hub: ActorRef): Unit", "member" : "provingground.FDHub.stop", "link" : "provingground\/FDHub$.html#stop(implicithub:akka.actor.ActorRef):Unit", "kind" : "def"}, {"label" : "stopHub", "tail" : "(hub: ActorRef): Unit", "member" : "provingground.FDHub.stopHub", "link" : "provingground\/FDHub$.html#stopHub(implicithub:akka.actor.ActorRef):Unit", "kind" : "def"}, {"label" : "startHub", "tail" : "(name: String): ActorRef", "member" : "provingground.FDHub.startHub", "link" : "provingground\/FDHub$.html#startHub(name:String):akka.actor.ActorRef", "kind" : "def"}, {"label" : "props", "tail" : "(): Props", "member" : "provingground.FDHub.props", "link" : "provingground\/FDHub$.html#props:akka.actor.Props", "kind" : "def"}, {"label" : "Resume", "tail" : "", "member" : "provingground.FDHub.Resume", "link" : "provingground\/FDHub$.html#ResumeextendsProductwithSerializable", "kind" : "case class"}, {"label" : "Stopping", "tail" : "", "member" : "provingground.FDHub.Stopping", "link" : "provingground\/FDHub$.html#StoppingextendsProductwithSerializable", "kind" : "case class"}, {"label" : "StopHub", "tail" : "", "member" : "provingground.FDHub.StopHub", "link" : "provingground\/FDHub$.html#StopHub", "kind" : "object"}, {"label" : "Pause", "tail" : "", "member" : "provingground.FDHub.Pause", "link" : "provingground\/FDHub$.html#PauseextendsProductwithSerializable", "kind" : "case class"}, {"label" : "SetEpsilon", "tail" : "", "member" : "provingground.FDHub.SetEpsilon", "link" : "provingground\/FDHub$.html#SetEpsilonextendsProductwithSerializable", "kind" : "case class"}, {"label" : "SetStrictness", "tail" : "", "member" : "provingground.FDHub.SetStrictness", "link" : "provingground\/FDHub$.html#SetStrictnessextendsProductwithSerializable", "kind" : "case class"}, {"label" : "SetSteps", "tail" : "", "member" : "provingground.FDHub.SetSteps", "link" : "provingground\/FDHub$.html#SetStepsextendsProductwithSerializable", "kind" : "case class"}, {"label" : "SetParam", "tail" : "", "member" : "provingground.FDHub.SetParam", "link" : "provingground\/FDHub$.html#SetParamextendsProductwithSerializable", "kind" : "case class"}, {"label" : "State", "tail" : "", "member" : "provingground.FDHub.State", "link" : "provingground\/FDHub$.html#StateextendsProductwithSerializable", "kind" : "case class"}, {"label" : "StartAll", "tail" : "", "member" : "provingground.FDHub.StartAll", "link" : "provingground\/FDHub$.html#StartAllextendsProductwithSerializable", "kind" : "case class"}, {"label" : "Start", "tail" : "", "member" : "provingground.FDHub.Start", "link" : "provingground\/FDHub$.html#StartextendsProductwithSerializable", "kind" : "case class"}, {"label" : "Done", "tail" : "", "member" : "provingground.FDHub.Done", "link" : "provingground\/FDHub$.html#DoneextendsProductwithSerializable", "kind" : "case class"}, {"label" : "States", "tail" : "", "member" : "provingground.FDHub.States", "link" : "provingground\/FDHub$.html#States", "kind" : "object"}, {"label" : "Loopers", "tail" : "", "member" : "provingground.FDHub.Loopers", "link" : "provingground\/FDHub$.html#Loopers", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/FDHub$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/FDHub$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/FDHub$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/FDHub$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/FDHub$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/FDHub$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/FDHub$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/FDHub$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/FDHub$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/FDHub$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/FDHub$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/FDHub$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/FDHub$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/FDHub$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/FDHub$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/FDHub$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/FDHub$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/FDHub$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/FDHub$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/FDHub.html", "kind" : "class"}, {"name" : "provingground.FDLooper", "shortDescription" : "", "object" : "provingground\/FDLooper$.html", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/FDLooper.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/FDLooper.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (FDLooper[X, P]) ⇒ Boolean, msg: ⇒ Any): FDLooper[X, P]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/FDLooper.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (FDLooper[X, P]) ⇒ Boolean): FDLooper[X, P]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/FDLooper.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): FDLooper[X, P]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/FDLooper.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): FDLooper[X, P]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/FDLooper.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (FDLooper[X, P], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/FDLooper.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (FDLooper[X, P], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/FDLooper.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "receive", "tail" : "(): PartialFunction[Any, Unit]", "member" : "provingground.FDLooper.receive", "link" : "provingground\/FDLooper.html#receive:PartialFunction[Any,Unit]", "kind" : "def"}, {"label" : "shift", "tail" : "(start: X, strictness: Double, steps: Int, epsilon: Double): X", "member" : "provingground.FDLooper.shift", "link" : "provingground\/FDLooper.html#shift(start:X,strictness:Double,steps:Int,epsilon:Double):X", "kind" : "def"}, {"label" : "snapShot", "tail" : "(x: X): SnapShot[X, P]", "member" : "provingground.FDLooper.snapShot", "link" : "provingground\/FDLooper.html#snapShot(x:X):provingground.SnapShot[X,P]", "kind" : "def"}, {"label" : "state", "tail" : ": X", "member" : "provingground.FDLooper.state", "link" : "provingground\/FDLooper.html#state:X", "kind" : "var"}, {"label" : "loops", "tail" : ": Int", "member" : "provingground.FDLooper.loops", "link" : "provingground\/FDLooper.html#loops:Int", "kind" : "var"}, {"member" : "provingground.FDLooper#<init>", "error" : "unsupported entity"}, {"label" : "param", "tail" : ": P", "member" : "provingground.FDLooper.param", "link" : "provingground\/FDLooper.html#param:P", "kind" : "val"}, {"label" : "unhandled", "tail" : "(message: Any): Unit", "member" : "akka.actor.Actor.unhandled", "link" : "provingground\/FDLooper.html#unhandled(message:Any):Unit", "kind" : "def"}, {"label" : "postRestart", "tail" : "(reason: Throwable): Unit", "member" : "akka.actor.Actor.postRestart", "link" : "provingground\/FDLooper.html#postRestart(reason:Throwable):Unit", "kind" : "def"}, {"label" : "preRestart", "tail" : "(reason: Throwable, message: Option[Any]): Unit", "member" : "akka.actor.Actor.preRestart", "link" : "provingground\/FDLooper.html#preRestart(reason:Throwable,message:Option[Any]):Unit", "kind" : "def"}, {"label" : "postStop", "tail" : "(): Unit", "member" : "akka.actor.Actor.postStop", "link" : "provingground\/FDLooper.html#postStop():Unit", "kind" : "def"}, {"label" : "preStart", "tail" : "(): Unit", "member" : "akka.actor.Actor.preStart", "link" : "provingground\/FDLooper.html#preStart():Unit", "kind" : "def"}, {"label" : "supervisorStrategy", "tail" : "(): SupervisorStrategy", "member" : "akka.actor.Actor.supervisorStrategy", "link" : "provingground\/FDLooper.html#supervisorStrategy:akka.actor.SupervisorStrategy", "kind" : "def"}, {"label" : "aroundPostRestart", "tail" : "(reason: Throwable): Unit", "member" : "akka.actor.Actor.aroundPostRestart", "link" : "provingground\/FDLooper.html#aroundPostRestart(reason:Throwable):Unit", "kind" : "def"}, {"label" : "aroundPreRestart", "tail" : "(reason: Throwable, message: Option[Any]): Unit", "member" : "akka.actor.Actor.aroundPreRestart", "link" : "provingground\/FDLooper.html#aroundPreRestart(reason:Throwable,message:Option[Any]):Unit", "kind" : "def"}, {"label" : "aroundPostStop", "tail" : "(): Unit", "member" : "akka.actor.Actor.aroundPostStop", "link" : "provingground\/FDLooper.html#aroundPostStop():Unit", "kind" : "def"}, {"label" : "aroundPreStart", "tail" : "(): Unit", "member" : "akka.actor.Actor.aroundPreStart", "link" : "provingground\/FDLooper.html#aroundPreStart():Unit", "kind" : "def"}, {"label" : "aroundReceive", "tail" : "(receive: akka.actor.Actor.Receive, msg: Any): Unit", "member" : "akka.actor.Actor.aroundReceive", "link" : "provingground\/FDLooper.html#aroundReceive(receive:akka.actor.Actor.Receive,msg:Any):Unit", "kind" : "def"}, {"label" : "sender", "tail" : "(): ActorRef", "member" : "akka.actor.Actor.sender", "link" : "provingground\/FDLooper.html#sender():akka.actor.ActorRef", "kind" : "final def"}, {"label" : "self", "tail" : ": ActorRef", "member" : "akka.actor.Actor.self", "link" : "provingground\/FDLooper.html#self:akka.actor.ActorRef", "kind" : "implicit final val"}, {"label" : "context", "tail" : ": ActorContext", "member" : "akka.actor.Actor.context", "link" : "provingground\/FDLooper.html#context:akka.actor.ActorContext", "kind" : "implicit val"}, {"label" : "Receive", "tail" : "", "member" : "akka.actor.Actor.Receive", "link" : "provingground\/FDLooper.html#Receive=akka.actor.Actor.Receive", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/FDLooper.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/FDLooper.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/FDLooper.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/FDLooper.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/FDLooper.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/FDLooper.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/FDLooper.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/FDLooper.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/FDLooper.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/FDLooper.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/FDLooper.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/FDLooper.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/FDLooper.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/FDLooper.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/FDLooper.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/FDLooper.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/FDLooper.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/FDLooper.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/FDLooper.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "RunnerStop", "tail" : "", "member" : "provingground.FDLooper.RunnerStop", "link" : "provingground\/FDLooper$.html#RunnerStop", "kind" : "object"}, {"label" : "Continue", "tail" : "", "member" : "provingground.FDLooper.Continue", "link" : "provingground\/FDLooper$.html#ContinueextendsProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/FDLooper$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/FDLooper$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/FDLooper$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/FDLooper$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/FDLooper$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/FDLooper$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/FDLooper$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/FDLooper$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/FDLooper$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/FDLooper$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/FDLooper$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/FDLooper$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/FDLooper$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/FDLooper$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/FDLooper$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/FDLooper$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/FDLooper$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/FDLooper$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/FDLooper$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/FDLooper.html", "kind" : "object"}, {"name" : "provingground.FDSrc", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/FDSrc.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/FDSrc.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (FDSrc[X, P]) ⇒ Boolean, msg: ⇒ Any): FDSrc[X, P]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/FDSrc.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (FDSrc[X, P]) ⇒ Boolean): FDSrc[X, P]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/FDSrc.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): FDSrc[X, P]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/FDSrc.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): FDSrc[X, P]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/FDSrc.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (FDSrc[X, P], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/FDSrc.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (FDSrc[X, P], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/FDSrc.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "receive", "tail" : "(): PartialFunction[Any, Unit]", "member" : "provingground.FDSrc.receive", "link" : "provingground\/FDSrc.html#receive:PartialFunction[Any,Unit]", "kind" : "def"}, {"label" : "unhandled", "tail" : "(message: Any): Unit", "member" : "akka.actor.Actor.unhandled", "link" : "provingground\/FDSrc.html#unhandled(message:Any):Unit", "kind" : "def"}, {"label" : "postRestart", "tail" : "(reason: Throwable): Unit", "member" : "akka.actor.Actor.postRestart", "link" : "provingground\/FDSrc.html#postRestart(reason:Throwable):Unit", "kind" : "def"}, {"label" : "preRestart", "tail" : "(reason: Throwable, message: Option[Any]): Unit", "member" : "akka.actor.Actor.preRestart", "link" : "provingground\/FDSrc.html#preRestart(reason:Throwable,message:Option[Any]):Unit", "kind" : "def"}, {"label" : "postStop", "tail" : "(): Unit", "member" : "akka.actor.Actor.postStop", "link" : "provingground\/FDSrc.html#postStop():Unit", "kind" : "def"}, {"label" : "preStart", "tail" : "(): Unit", "member" : "akka.actor.Actor.preStart", "link" : "provingground\/FDSrc.html#preStart():Unit", "kind" : "def"}, {"label" : "supervisorStrategy", "tail" : "(): SupervisorStrategy", "member" : "akka.actor.Actor.supervisorStrategy", "link" : "provingground\/FDSrc.html#supervisorStrategy:akka.actor.SupervisorStrategy", "kind" : "def"}, {"label" : "aroundPostRestart", "tail" : "(reason: Throwable): Unit", "member" : "akka.actor.Actor.aroundPostRestart", "link" : "provingground\/FDSrc.html#aroundPostRestart(reason:Throwable):Unit", "kind" : "def"}, {"label" : "aroundPreRestart", "tail" : "(reason: Throwable, message: Option[Any]): Unit", "member" : "akka.actor.Actor.aroundPreRestart", "link" : "provingground\/FDSrc.html#aroundPreRestart(reason:Throwable,message:Option[Any]):Unit", "kind" : "def"}, {"label" : "aroundPostStop", "tail" : "(): Unit", "member" : "akka.actor.Actor.aroundPostStop", "link" : "provingground\/FDSrc.html#aroundPostStop():Unit", "kind" : "def"}, {"label" : "aroundPreStart", "tail" : "(): Unit", "member" : "akka.actor.Actor.aroundPreStart", "link" : "provingground\/FDSrc.html#aroundPreStart():Unit", "kind" : "def"}, {"label" : "aroundReceive", "tail" : "(receive: akka.actor.Actor.Receive, msg: Any): Unit", "member" : "akka.actor.Actor.aroundReceive", "link" : "provingground\/FDSrc.html#aroundReceive(receive:akka.actor.Actor.Receive,msg:Any):Unit", "kind" : "def"}, {"label" : "sender", "tail" : "(): ActorRef", "member" : "akka.actor.Actor.sender", "link" : "provingground\/FDSrc.html#sender():akka.actor.ActorRef", "kind" : "final def"}, {"label" : "self", "tail" : ": ActorRef", "member" : "akka.actor.Actor.self", "link" : "provingground\/FDSrc.html#self:akka.actor.ActorRef", "kind" : "implicit final val"}, {"label" : "context", "tail" : ": ActorContext", "member" : "akka.actor.Actor.context", "link" : "provingground\/FDSrc.html#context:akka.actor.ActorContext", "kind" : "implicit val"}, {"label" : "Receive", "tail" : "", "member" : "akka.actor.Actor.Receive", "link" : "provingground\/FDSrc.html#Receive=akka.actor.Actor.Receive", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/FDSrc.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/FDSrc.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/FDSrc.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/FDSrc.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/FDSrc.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/FDSrc.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/FDSrc.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/FDSrc.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/FDSrc.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/FDSrc.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/FDSrc.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/FDSrc.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/FDSrc.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/FDSrc.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/FDSrc.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/FDSrc.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/FDSrc.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/FDSrc.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/FDSrc.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "save", "tail" : "(): (SnapShot[X, P]) ⇒ Unit", "member" : "provingground.FDSrc.save", "link" : "provingground\/FDSrc.html#save:provingground.SnapShot[X,P]=>Unit", "kind" : "abstract def"}], "shortDescription" : "Actor saving snapshots, typically materialized from an akka Source", "trait" : "provingground\/FDSrc.html", "kind" : "trait"}, {"name" : "provingground.FileName", "shortDescription" : "", "object" : "provingground\/FileName$.html", "members_object" : [{"label" : "unapply", "tail" : "(file: String, ext: String): Option[String]", "member" : "provingground.FileName.unapply", "link" : "provingground\/FileName$.html#unapply(file:String,ext:String):Option[String]", "kind" : "def"}, {"label" : "unapply", "tail" : "(file: Path, ext: String): Option[String]", "member" : "provingground.FileName.unapply", "link" : "provingground\/FileName$.html#unapply(file:ammonite.ops.Path,ext:String):Option[String]", "kind" : "def"}, {"label" : "apply", "tail" : "(name: String, ext: String): String", "member" : "provingground.FileName.apply", "link" : "provingground\/FileName$.html#apply(name:String,ext:String):String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/FileName$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/FileName$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/FileName$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/FileName$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/FileName$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/FileName$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/FileName$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/FileName$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/FileName$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/FileName$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/FileName$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/FileName$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/FileName$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/FileName$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/FileName$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/FileName$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/FileName$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/FileName$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/FileName$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.HttpServer", "shortDescription" : "", "object" : "provingground\/HttpServer$.html", "members_object" : [{"label" : "bindingFuture", "tail" : ": Future[ServerBinding]", "member" : "provingground.HttpServer.bindingFuture", "link" : "provingground\/HttpServer$.html#bindingFuture:scala.concurrent.Future[akka.http.scaladsl.Http.ServerBinding]", "kind" : "val"}, {"label" : "server", "tail" : ": ServerStart", "member" : "provingground.HttpServer.server", "link" : "provingground\/HttpServer$.html#server:provingground.ServerStart", "kind" : "val"}, {"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "scala.App.main", "link" : "provingground\/HttpServer$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "delayedInit", "tail" : "(body: ⇒ Unit): Unit", "member" : "scala.App.delayedInit", "link" : "provingground\/HttpServer$.html#delayedInit(body:=>Unit):Unit", "kind" : "def"}, {"label" : "args", "tail" : "(): Array[String]", "member" : "scala.App.args", "link" : "provingground\/HttpServer$.html#args:Array[String]", "kind" : "def"}, {"label" : "executionStart", "tail" : ": Long", "member" : "scala.App.executionStart", "link" : "provingground\/HttpServer$.html#executionStart:Long", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/HttpServer$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/HttpServer$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/HttpServer$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/HttpServer$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/HttpServer$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/HttpServer$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/HttpServer$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/HttpServer$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/HttpServer$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/HttpServer$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/HttpServer$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/HttpServer$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/HttpServer$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/HttpServer$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/HttpServer$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/HttpServer$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/HttpServer$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/HttpServer$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/HttpServer$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.Hub", "shortDescription" : "", "object" : "provingground\/Hub$.html", "members_object" : [{"label" : "executionContext", "tail" : ": ExecutionContextExecutor", "member" : "provingground.Hub.executionContext", "link" : "provingground\/Hub$.html#executionContext:scala.concurrent.ExecutionContextExecutor", "kind" : "implicit val"}, {"label" : "materializer", "tail" : ": ActorMaterializer", "member" : "provingground.Hub.materializer", "link" : "provingground\/Hub$.html#materializer:akka.stream.ActorMaterializer", "kind" : "implicit val"}, {"label" : "system", "tail" : ": ActorSystem", "member" : "provingground.Hub.system", "link" : "provingground\/Hub$.html#system:akka.actor.ActorSystem", "kind" : "implicit val"}, {"label" : "ReactiveMongo", "tail" : "", "member" : "provingground.Hub.ReactiveMongo", "link" : "provingground\/Hub$.html#ReactiveMongo", "kind" : "object"}, {"label" : "cnf", "tail" : ": Config", "member" : "provingground.Hub.cnf", "link" : "provingground\/Hub$.html#cnf:com.typesafe.config.Config", "kind" : "val"}, {"label" : "conf", "tail" : ": Config", "member" : "provingground.Hub.conf", "link" : "provingground\/Hub$.html#conf:com.typesafe.config.Config", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/Hub$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/Hub$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/Hub$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/Hub$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/Hub$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/Hub$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/Hub$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/Hub$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/Hub$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/Hub$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/Hub$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/Hub$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/Hub$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/Hub$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/Hub$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/Hub$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/Hub$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/Hub$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/Hub$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.IndexedInductiveTypes", "shortDescription" : "", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/IndexedInductiveTypes.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/IndexedInductiveTypes.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (IndexedInductiveTypes[I]) ⇒ Boolean, msg: ⇒ Any): IndexedInductiveTypes[I]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/IndexedInductiveTypes.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (IndexedInductiveTypes[I]) ⇒ Boolean): IndexedInductiveTypes[I]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/IndexedInductiveTypes.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): IndexedInductiveTypes[I]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/IndexedInductiveTypes.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): IndexedInductiveTypes[I]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/IndexedInductiveTypes.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (IndexedInductiveTypes[I], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/IndexedInductiveTypes.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (IndexedInductiveTypes[I], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/IndexedInductiveTypes.html#->[B](y:B):(A,B)", "kind" : "def"}, {"member" : "provingground.IndexedInductiveTypes#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/IndexedInductiveTypes.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/IndexedInductiveTypes.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/IndexedInductiveTypes.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/IndexedInductiveTypes.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/IndexedInductiveTypes.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/IndexedInductiveTypes.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/IndexedInductiveTypes.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/IndexedInductiveTypes.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/IndexedInductiveTypes.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/IndexedInductiveTypes.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/IndexedInductiveTypes.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/IndexedInductiveTypes.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/IndexedInductiveTypes.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/IndexedInductiveTypes.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/IndexedInductiveTypes.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/IndexedInductiveTypes.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/IndexedInductiveTypes.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/IndexedInductiveTypes.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/IndexedInductiveTypes.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/IndexedInductiveTypes.html", "kind" : "class"}, {"name" : "provingground.InductiveTypes", "shortDescription" : "Inductively defined types in homotopy type theory", "object" : "provingground\/InductiveTypes$.html", "members_object" : [{"label" : "InductiveTypDefn", "tail" : "", "member" : "provingground.InductiveTypes.InductiveTypDefn", "link" : "provingground\/InductiveTypes$.html#InductiveTypDefnextendsHoTT.SmallTypwithInductiveTypes.InductiveTyp", "kind" : "class"}, {"label" : "InductiveTyp", "tail" : "", "member" : "provingground.InductiveTypes.InductiveTyp", "link" : "provingground\/InductiveTypes$.html#InductiveTypextendsHoTT.Typ[provingground.HoTT.Term]", "kind" : "trait"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/InductiveTypes$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/InductiveTypes$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/InductiveTypes$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/InductiveTypes$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/InductiveTypes$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/InductiveTypes$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/InductiveTypes$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/InductiveTypes$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/InductiveTypes$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/InductiveTypes$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/InductiveTypes$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/InductiveTypes$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/InductiveTypes$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/InductiveTypes$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/InductiveTypes$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/InductiveTypes$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/InductiveTypes$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/InductiveTypes$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/InductiveTypes$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.LatexParser", "shortDescription" : "", "object" : "provingground\/LatexParser$.html", "members_object" : [{"label" : "LateXTokenizer", "tail" : "", "member" : "provingground.LatexParser.LateXTokenizer", "link" : "provingground\/LatexParser$.html#LateXTokenizerextendsJavaTokenParsers", "kind" : "class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/LatexParser$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/LatexParser$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/LatexParser$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/LatexParser$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/LatexParser$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/LatexParser$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/LatexParser$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/LatexParser$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/LatexParser$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/LatexParser$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/LatexParser$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/LatexParser$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/LatexParser$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/LatexParser$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/LatexParser$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/LatexParser$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/LatexParser$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/LatexParser$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/LatexParser$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.LeanIO", "shortDescription" : "", "object" : "provingground\/LeanIO$.html", "members_object" : [{"label" : "recallDefs", "tail" : "(defDir: Path): Vector[List[String]]", "member" : "provingground.LeanIO.recallDefs", "link" : "provingground\/LeanIO$.html#recallDefs(defDir:ammonite.ops.Path):scala.collection.immutable.Vector[List[String]]", "kind" : "def"}, {"label" : "snapshot", "tail" : "(fd: Map[String, Future[Vector[String]]]): Vector[String]", "member" : "provingground.LeanIO.snapshot", "link" : "provingground\/LeanIO$.html#snapshot(fd:Map[String,scala.concurrent.Future[Vector[String]]]):scala.collection.immutable.Vector[String]", "kind" : "def"}, {"label" : "makeDefs", "tail" : "(inDir: Path, outDir: Path): Map[String, Future[Vector[String]]]", "member" : "provingground.LeanIO.makeDefs", "link" : "provingground\/LeanIO$.html#makeDefs(inDir:ammonite.ops.Path,outDir:ammonite.ops.Path):scala.collection.immutable.Map[String,scala.concurrent.Future[scala.collection.immutable.Vector[String]]]", "kind" : "def"}, {"label" : "futPickleDefs", "tail" : "(file: Path, outputDir: Path): Future[Vector[String]]", "member" : "provingground.LeanIO.futPickleDefs", "link" : "provingground\/LeanIO$.html#futPickleDefs(file:ammonite.ops.Path,outputDir:ammonite.ops.Path):scala.concurrent.Future[scala.collection.immutable.Vector[String]]", "kind" : "def"}, {"label" : "pickleDefs", "tail" : "(file: Path, outputDir: Path): Vector[String]", "member" : "provingground.LeanIO.pickleDefs", "link" : "provingground\/LeanIO$.html#pickleDefs(file:ammonite.ops.Path,outputDir:ammonite.ops.Path):scala.collection.immutable.Vector[String]", "kind" : "def"}, {"label" : "readDefs", "tail" : "(file: Path): Vector[Definition]", "member" : "provingground.LeanIO.readDefs", "link" : "provingground\/LeanIO$.html#readDefs(file:ammonite.ops.Path):scala.collection.immutable.Vector[provingground.LeanExportElem.Definition]", "kind" : "def"}, {"label" : "readData", "tail" : "(file: Path): Vector[Data]", "member" : "provingground.LeanIO.readData", "link" : "provingground\/LeanIO$.html#readData(file:ammonite.ops.Path):scala.collection.immutable.Vector[provingground.LeanExportElem.Data]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/LeanIO$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/LeanIO$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/LeanIO$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/LeanIO$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/LeanIO$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/LeanIO$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/LeanIO$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/LeanIO$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/LeanIO$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/LeanIO$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/LeanIO$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/LeanIO$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/LeanIO$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/LeanIO$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/LeanIO$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/LeanIO$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/LeanIO$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/LeanIO$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/LeanIO$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.MoveLearner", "shortDescription" : "Learning dynamical system where we only have moves, not combinations.", "object" : "provingground\/MoveLearner$.html", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/MoveLearner.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/MoveLearner.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MoveLearner[V, M]) ⇒ Boolean, msg: ⇒ Any): MoveLearner[V, M]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/MoveLearner.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (MoveLearner[V, M]) ⇒ Boolean): MoveLearner[V, M]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/MoveLearner.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): MoveLearner[V, M]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/MoveLearner.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): MoveLearner[V, M]", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/MoveLearner.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (MoveLearner[V, M], B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/MoveLearner.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (MoveLearner[V, M], B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/MoveLearner.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "LearningLoop", "tail" : "", "member" : "provingground.MoveLearner.LearningLoop", "link" : "provingground\/MoveLearner.html#LearningLoopextendsProductwithSerializable", "kind" : "case class"}, {"label" : "learnstep", "tail" : "(d: DynDst, epsilon: Double, chains: Set[Chain], cutoff: Double)(correction: Feedback): DynDst", "member" : "provingground.MoveLearner.learnstep", "link" : "provingground\/MoveLearner.html#learnstep(d:MoveLearner.this.DynDst,epsilon:Double,chains:Set[MoveLearner.this.Chain],cutoff:Double)(implicitcorrection:MoveLearner.this.Feedback):MoveLearner.this.DynDst", "kind" : "def"}, {"label" : "Feedback", "tail" : "", "member" : "provingground.MoveLearner.Feedback", "link" : "provingground\/MoveLearner.html#Feedback=provingground.FiniteDistribution[V]=>provingground.FiniteDistribution[V]", "kind" : "type"}, {"label" : "backprop", "tail" : "(initdstbn: DynDst, error: FiniteDistribution[V], chains: Set[Chain]): DynDst", "member" : "provingground.MoveLearner.backprop", "link" : "provingground\/MoveLearner.html#backprop(initdstbn:MoveLearner.this.DynDst,error:provingground.FiniteDistribution[V],chains:Set[MoveLearner.this.Chain]):MoveLearner.this.DynDst", "kind" : "def"}, {"label" : "backpropchain", "tail" : "(initdstbn: DynDst, error: Double, accum: DynDst, chain: Chain): DynDst", "member" : "provingground.MoveLearner.backpropchain", "link" : "provingground\/MoveLearner.html#backpropchain(initdstbn:MoveLearner.this.DynDst,error:Double,accum:MoveLearner.this.DynDst,chain:MoveLearner.this.Chain):MoveLearner.this.DynDst", "kind" : "final def"}, {"label" : "finaldist", "tail" : "(dstbn: DynDst, chains: Set[Chain]): FiniteDistribution[V]", "member" : "provingground.MoveLearner.finaldist", "link" : "provingground\/MoveLearner.html#finaldist(dstbn:MoveLearner.this.DynDst,chains:Set[MoveLearner.this.Chain]):provingground.FiniteDistribution[V]", "kind" : "def"}, {"label" : "propagate", "tail" : "(chains: Set[Chain], prune: (Chain) ⇒ Boolean, prev: Set[Chain]): Set[Chain]", "member" : "provingground.MoveLearner.propagate", "link" : "provingground\/MoveLearner.html#propagate(chains:Set[MoveLearner.this.Chain],prune:MoveLearner.this.Chain=>Boolean,prev:Set[MoveLearner.this.Chain]):Set[MoveLearner.this.Chain]", "kind" : "final def"}, {"label" : "propagateSteps", "tail" : "(chains: Set[Chain], steps: Int): Set[Chain]", "member" : "provingground.MoveLearner.propagateSteps", "link" : "provingground\/MoveLearner.html#propagateSteps(chains:Set[MoveLearner.this.Chain],steps:Int):Set[MoveLearner.this.Chain]", "kind" : "final def"}, {"label" : "prunednextgen", "tail" : "(chains: Set[Chain], prune: (Chain) ⇒ Boolean): Set[Chain]", "member" : "provingground.MoveLearner.prunednextgen", "link" : "provingground\/MoveLearner.html#prunednextgen(chains:Set[MoveLearner.this.Chain],prune:MoveLearner.this.Chain=>Boolean):scala.collection.immutable.Set[MoveLearner.this.Chain]", "kind" : "def"}, {"label" : "fullnextgen", "tail" : "(chains: Set[Chain]): Set[Chain]", "member" : "provingground.MoveLearner.fullnextgen", "link" : "provingground\/MoveLearner.html#fullnextgen(chains:Set[MoveLearner.this.Chain]):scala.collection.immutable.Set[MoveLearner.this.Chain]", "kind" : "def"}, {"label" : "offspring", "tail" : "(chain: Chain): List[RecChain]", "member" : "provingground.MoveLearner.offspring", "link" : "provingground\/MoveLearner.html#offspring(chain:MoveLearner.this.Chain):List[MoveLearner.this.RecChain]", "kind" : "def"}, {"label" : "subChains", "tail" : "(chn: Chain, accum: Set[Chain], append: (Chain) ⇒ Chain): Set[Chain]", "member" : "provingground.MoveLearner.subChains", "link" : "provingground\/MoveLearner.html#subChains(chn:MoveLearner.this.Chain,accum:Set[MoveLearner.this.Chain],append:MoveLearner.this.Chain=>MoveLearner.this.Chain):Set[MoveLearner.this.Chain]", "kind" : "final def"}, {"label" : "RecChain", "tail" : "", "member" : "provingground.MoveLearner.RecChain", "link" : "provingground\/MoveLearner.html#RecChainextendsMoveLearner.this.ChainwithProductwithSerializable", "kind" : "case class"}, {"label" : "AtomicChain", "tail" : "", "member" : "provingground.MoveLearner.AtomicChain", "link" : "provingground\/MoveLearner.html#AtomicChainextendsMoveLearner.this.ChainwithProductwithSerializable", "kind" : "case class"}, {"label" : "Chain", "tail" : "", "member" : "provingground.MoveLearner.Chain", "link" : "provingground\/MoveLearner.html#ChainextendsAnyRef", "kind" : "trait"}, {"label" : "DynDst", "tail" : "", "member" : "provingground.MoveLearner.DynDst", "link" : "provingground\/MoveLearner.html#DynDst", "kind" : "object"}, {"label" : "DynDst", "tail" : "", "member" : "provingground.MoveLearner.DynDst", "link" : "provingground\/MoveLearner.html#DynDstextendsProductwithSerializable", "kind" : "case class"}, {"label" : "multiplicity", "tail" : "(vert: V, movetype: M): Int", "member" : "provingground.MoveLearner.multiplicity", "link" : "provingground\/MoveLearner.html#multiplicity(vert:V,movetype:M):Int", "kind" : "def"}, {"member" : "provingground.MoveLearner#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/MoveLearner.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/MoveLearner.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/MoveLearner.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/MoveLearner.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/MoveLearner.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/MoveLearner.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/MoveLearner.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/MoveLearner.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/MoveLearner.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/MoveLearner.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/MoveLearner.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/MoveLearner.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/MoveLearner.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/MoveLearner.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/MoveLearner.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/MoveLearner.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/MoveLearner.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/MoveLearner.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/MoveLearner.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "DynDstView", "tail" : "", "member" : "provingground.MoveLearner.DynDstView", "link" : "provingground\/MoveLearner$.html#DynDstViewextendsProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/MoveLearner$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/MoveLearner$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/MoveLearner$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/MoveLearner$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/MoveLearner$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/MoveLearner$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/MoveLearner$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/MoveLearner$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/MoveLearner$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/MoveLearner$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/MoveLearner$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/MoveLearner$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/MoveLearner$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/MoveLearner$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/MoveLearner$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/MoveLearner$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/MoveLearner$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/MoveLearner$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/MoveLearner$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/MoveLearner.html", "kind" : "class"}, {"name" : "provingground.NextSample", "shortDescription" : "", "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/NextSample.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/NextSample.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (NextSample) ⇒ Boolean, msg: ⇒ Any): NextSample", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/NextSample.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (NextSample) ⇒ Boolean): NextSample", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/NextSample.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): NextSample", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/NextSample.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): NextSample", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/NextSample.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (NextSample, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/NextSample.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (NextSample, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/NextSample.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "buf", "tail" : "(): BufferedRun[NextSample]", "member" : "provingground.NextSample.buf", "link" : "provingground\/NextSample.html#buf:provingground.BufferedRun[provingground.NextSample]", "kind" : "def"}, {"label" : "iter", "tail" : "(): Iterator[NextSample]", "member" : "provingground.NextSample.iter", "link" : "provingground\/NextSample.html#iter:Iterator[provingground.NextSample]", "kind" : "def"}, {"label" : "succ", "tail" : ": NextSample", "member" : "provingground.NextSample.succ", "link" : "provingground\/NextSample.html#succ:provingground.NextSample", "kind" : "lazy val"}, {"label" : "succFD", "tail" : ": FiniteDistribution[Term]", "member" : "provingground.NextSample.succFD", "link" : "provingground\/NextSample.html#succFD:provingground.FiniteDistribution[provingground.HoTT.Term]", "kind" : "lazy val"}, {"label" : "shiftedFD", "tail" : "(totalSize: Int, epsilon: Double): FiniteDistribution[Term]", "member" : "provingground.NextSample.shiftedFD", "link" : "provingground\/NextSample.html#shiftedFD(totalSize:Int,epsilon:Double):provingground.FiniteDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "derivativeFD", "tail" : "(p: FiniteDistribution[Term], n: Int): FiniteDistribution[Term]", "member" : "provingground.NextSample.derivativeFD", "link" : "provingground\/NextSample.html#derivativeFD(p:provingground.FiniteDistribution[provingground.HoTT.Term],n:Int):provingground.FiniteDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "feedBacks", "tail" : ": Map[Term, Double]", "member" : "provingground.NextSample.feedBacks", "link" : "provingground\/NextSample.html#feedBacks:scala.collection.immutable.Map[provingground.HoTT.Term,Double]", "kind" : "lazy val"}, {"label" : "derFDs", "tail" : ": Map[Term, (FiniteDistribution[Term], FiniteDistribution[Term])]", "member" : "provingground.NextSample.derFDs", "link" : "provingground\/NextSample.html#derFDs:scala.collection.immutable.Map[provingground.HoTT.Term,(provingground.FiniteDistribution[provingground.HoTT.Term],provingground.FiniteDistribution[provingground.HoTT.Term])]", "kind" : "lazy val"}, {"label" : "derSamplesSizes", "tail" : ": Map[Term, Int]", "member" : "provingground.NextSample.derSamplesSizes", "link" : "provingground\/NextSample.html#derSamplesSizes:Map[provingground.HoTT.Term,Int]", "kind" : "lazy val"}, {"label" : "derivativePD", "tail" : "(tang: FiniteDistribution[Term]): ProbabilityDistribution[Term]", "member" : "provingground.NextSample.derivativePD", "link" : "provingground\/NextSample.html#derivativePD(tang:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "thmFeedback", "tail" : ": TheoremFeedback", "member" : "provingground.NextSample.thmFeedback", "link" : "provingground\/NextSample.html#thmFeedback:provingground.TheoremFeedback", "kind" : "lazy val"}, {"label" : "nextTypFD", "tail" : ": FiniteDistribution[Term]", "member" : "provingground.NextSample.nextTypFD", "link" : "provingground\/NextSample.html#nextTypFD:provingground.FiniteDistribution[provingground.HoTT.Term]", "kind" : "lazy val"}, {"label" : "nextTypSamp", "tail" : ": Map[Term, Int]", "member" : "provingground.NextSample.nextTypSamp", "link" : "provingground\/NextSample.html#nextTypSamp:Map[provingground.HoTT.Term,Int]", "kind" : "lazy val"}, {"label" : "nextFD", "tail" : ": FiniteDistribution[Term]", "member" : "provingground.NextSample.nextFD", "link" : "provingground\/NextSample.html#nextFD:provingground.FiniteDistribution[provingground.HoTT.Term]", "kind" : "lazy val"}, {"label" : "nextSamp", "tail" : ": Map[Term, Int]", "member" : "provingground.NextSample.nextSamp", "link" : "provingground\/NextSample.html#nextSamp:Map[provingground.HoTT.Term,Int]", "kind" : "lazy val"}, {"label" : "init", "tail" : ": ProbabilityDistribution[Term]", "member" : "provingground.NextSample.init", "link" : "provingground\/NextSample.html#init:provingground.ProbabilityDistribution[provingground.HoTT.Term]", "kind" : "lazy val"}, {"member" : "provingground.NextSample#<init>", "error" : "unsupported entity"}, {"label" : "inertia", "tail" : ": Double", "member" : "provingground.NextSample.inertia", "link" : "provingground\/NextSample.html#inertia:Double", "kind" : "val"}, {"label" : "epsilon", "tail" : ": Double", "member" : "provingground.NextSample.epsilon", "link" : "provingground\/NextSample.html#epsilon:Double", "kind" : "val"}, {"label" : "derTotalSize", "tail" : ": Int", "member" : "provingground.NextSample.derTotalSize", "link" : "provingground\/NextSample.html#derTotalSize:Int", "kind" : "val"}, {"label" : "size", "tail" : ": Int", "member" : "provingground.NextSample.size", "link" : "provingground\/NextSample.html#size:Int", "kind" : "val"}, {"label" : "vars", "tail" : ": Vector[Term]", "member" : "provingground.NextSample.vars", "link" : "provingground\/NextSample.html#vars:Vector[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "ded", "tail" : ": FineDeducer", "member" : "provingground.NextSample.ded", "link" : "provingground\/NextSample.html#ded:provingground.FineDeducer", "kind" : "val"}, {"label" : "p", "tail" : ": FiniteDistribution[Term]", "member" : "provingground.NextSample.p", "link" : "provingground\/NextSample.html#p:provingground.FiniteDistribution[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/NextSample.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/NextSample.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/NextSample.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/NextSample.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/NextSample.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/NextSample.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/NextSample.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/NextSample.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/NextSample.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/NextSample.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/NextSample.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/NextSample.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/NextSample.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/NextSample.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/NextSample.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/NextSample.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/NextSample.html", "kind" : "case class"}, {"name" : "provingground.QDI", "shortDescription" : "", "object" : "provingground\/QDI$.html", "members_object" : [{"label" : "head", "tail" : ": Elem", "member" : "provingground.QDI.head", "link" : "provingground\/QDI$.html#head:scala.xml.Elem", "kind" : "val"}, {"label" : "css", "tail" : ": String", "member" : "provingground.QDI.css", "link" : "provingground\/QDI$.html#css:String", "kind" : "val"}, {"label" : "run", "tail" : "(init: A, dyn: (A) ⇒ A, steps: Int, threads: Int): IndexedSeq[Future[A]]", "member" : "provingground.QDI.run", "link" : "provingground\/QDI$.html#run[A](init:A,dyn:A=>A,steps:Int,threads:Int):scala.collection.immutable.IndexedSeq[scala.concurrent.Future[A]]", "kind" : "def"}, {"label" : "asyncIterLog", "tail" : "(init: A, dyn: (A) ⇒ A, steps: Int, logger: Logger): Future[A]", "member" : "provingground.QDI.asyncIterLog", "link" : "provingground\/QDI$.html#asyncIterLog[A](init:A,dyn:A=>A,steps:Int,logger:provingground.QDI.Logger):scala.concurrent.Future[A]", "kind" : "def"}, {"label" : "iterLog", "tail" : "(init: A, dyn: (A) ⇒ A, steps: Int, logger: Logger): A", "member" : "provingground.QDI.iterLog", "link" : "provingground\/QDI$.html#iterLog[A](init:A,dyn:A=>A,steps:Int,logger:provingground.QDI.Logger):A", "kind" : "def"}, {"label" : "fdRead", "tail" : "(): ReadString[List[String]]", "member" : "provingground.QDI.fdRead", "link" : "provingground\/QDI$.html#fdRead:provingground.StringParse.ReadString[List[String]]", "kind" : "implicit def"}, {"label" : "tableRead", "tail" : "(): ReadString[List[List[String]]]", "member" : "provingground.QDI.tableRead", "link" : "provingground\/QDI$.html#tableRead:provingground.StringParse.ReadString[List[List[String]]]", "kind" : "implicit def"}, {"label" : "fdWrite", "tail" : "(): WriteString[FiniteDistribution[A]]", "member" : "provingground.QDI.fdWrite", "link" : "provingground\/QDI$.html#fdWrite[A]:provingground.StringParse.WriteString[provingground.FiniteDistribution[A]]", "kind" : "implicit def"}, {"label" : "tableWrite", "tail" : "(): WriteString[List[List[A]]]", "member" : "provingground.QDI.tableWrite", "link" : "provingground\/QDI$.html#tableWrite[A]:provingground.StringParse.WriteString[List[List[A]]]", "kind" : "implicit def"}, {"label" : "readFile", "tail" : "(filename: String): Iterator[String]", "member" : "provingground.QDI.readFile", "link" : "provingground\/QDI$.html#readFile(filename:String):Iterator[String]", "kind" : "def"}, {"label" : "FileLog", "tail" : "", "member" : "provingground.QDI.FileLog", "link" : "provingground\/QDI$.html#FileLogextendsQDI.Logger", "kind" : "class"}, {"label" : "MemLog", "tail" : "", "member" : "provingground.QDI.MemLog", "link" : "provingground\/QDI$.html#MemLogextendsQDI.Logger", "kind" : "class"}, {"label" : "Logger", "tail" : "", "member" : "provingground.QDI.Logger", "link" : "provingground\/QDI$.html#LoggerextendsAnyRef", "kind" : "trait"}, {"label" : "tableString", "tail" : "(xy: List[List[Any]]): String", "member" : "provingground.QDI.tableString", "link" : "provingground\/QDI$.html#tableString(xy:List[List[Any]]):String", "kind" : "implicit def"}, {"label" : "tableDiv", "tail" : "(xy: List[List[Any]]): Elem", "member" : "provingground.QDI.tableDiv", "link" : "provingground\/QDI$.html#tableDiv(xy:List[List[Any]]):scala.xml.Elem", "kind" : "implicit def"}, {"label" : "row", "tail" : "(xs: List[String]): Elem", "member" : "provingground.QDI.row", "link" : "provingground\/QDI$.html#row(xs:List[String]):scala.xml.Elem", "kind" : "def"}, {"label" : "fdListList", "tail" : "(fd: FiniteDistribution[A]): List[List[Any]]", "member" : "provingground.QDI.fdListList", "link" : "provingground\/QDI$.html#fdListList[A](fd:provingground.FiniteDistribution[A]):List[List[Any]]", "kind" : "implicit def"}, {"label" : "fdString", "tail" : "(fd: FiniteDistribution[A]): String", "member" : "provingground.QDI.fdString", "link" : "provingground\/QDI$.html#fdString[A](fd:provingground.FiniteDistribution[A]):String", "kind" : "implicit def"}, {"label" : "fdListDiv", "tail" : "(fds: List[FiniteDistribution[A]]): Node", "member" : "provingground.QDI.fdListDiv", "link" : "provingground\/QDI$.html#fdListDiv[A](fds:List[provingground.FiniteDistribution[A]]):scala.xml.Node", "kind" : "implicit def"}, {"label" : "fdDiv", "tail" : "(fd: FiniteDistribution[A]): Node", "member" : "provingground.QDI.fdDiv", "link" : "provingground\/QDI$.html#fdDiv[A](fd:provingground.FiniteDistribution[A]):scala.xml.Node", "kind" : "implicit def"}, {"label" : "listView", "tail" : "(arg0: WebView[A]): WebView[List[A]]", "member" : "provingground.QDI.listView", "link" : "provingground\/QDI$.html#listView[A](implicitevidence$2:provingground.QDI.WebView[A]):provingground.QDI.WebView[List[A]]", "kind" : "implicit def"}, {"label" : "toXML", "tail" : "(a: A)(arg0: WebView[A]): Node", "member" : "provingground.QDI.toXML", "link" : "provingground\/QDI$.html#toXML[A](a:A)(implicitevidence$1:provingground.QDI.WebView[A]):scala.xml.Node", "kind" : "implicit def"}, {"label" : "WebView", "tail" : "", "member" : "provingground.QDI.WebView", "link" : "provingground\/QDI$.html#WebView[A]extendsAnyRef", "kind" : "trait"}, {"label" : "p", "tail" : "(s: String): Node", "member" : "provingground.QDI.p", "link" : "provingground\/QDI$.html#p(s:String):scala.xml.Node", "kind" : "def"}, {"label" : "view", "tail" : "(ps: Node*): Unit", "member" : "provingground.QDI.view", "link" : "provingground\/QDI$.html#view(ps:scala.xml.Node*):Unit", "kind" : "def"}, {"label" : "viewPage", "tail" : "(body: Node, fileName: String): Unit", "member" : "provingground.QDI.viewPage", "link" : "provingground\/QDI$.html#viewPage(body:scala.xml.Node,fileName:String):Unit", "kind" : "def"}, {"label" : "writeFile", "tail" : "(text: String, fileName: String, append: Boolean): Unit", "member" : "provingground.QDI.writeFile", "link" : "provingground\/QDI$.html#writeFile(text:String,fileName:String,append:Boolean):Unit", "kind" : "def"}, {"label" : "datafile", "tail" : "(): String", "member" : "provingground.QDI.datafile", "link" : "provingground\/QDI$.html#datafile:String", "kind" : "def"}, {"label" : "desktop", "tail" : ": Desktop", "member" : "provingground.QDI.desktop", "link" : "provingground\/QDI$.html#desktop:java.awt.Desktop", "kind" : "lazy val"}, {"label" : "timed", "tail" : "(result: ⇒ A): A", "member" : "provingground.QDI.timed", "link" : "provingground\/QDI$.html#timed[A](result:=>A):A", "kind" : "def"}, {"label" : "gc", "tail" : "(): Unit", "member" : "provingground.QDI.gc", "link" : "provingground\/QDI$.html#gc:Unit", "kind" : "def"}, {"label" : "totalMem", "tail" : "(): Long", "member" : "provingground.QDI.totalMem", "link" : "provingground\/QDI$.html#totalMem:Long", "kind" : "def"}, {"label" : "maxMem", "tail" : "(): Long", "member" : "provingground.QDI.maxMem", "link" : "provingground\/QDI$.html#maxMem:Long", "kind" : "def"}, {"label" : "freeMem", "tail" : "(): Long", "member" : "provingground.QDI.freeMem", "link" : "provingground\/QDI$.html#freeMem:Long", "kind" : "def"}, {"label" : "runTime", "tail" : ": Runtime", "member" : "provingground.QDI.runTime", "link" : "provingground\/QDI$.html#runTime:Runtime", "kind" : "lazy val"}, {"label" : "runForFut", "tail" : "(f: (A) ⇒ A, init: A, duration: Long): Future[A]", "member" : "provingground.QDI.runForFut", "link" : "provingground\/QDI$.html#runForFut[A](f:A=>A,init:A,duration:Long):scala.concurrent.Future[A]", "kind" : "def"}, {"label" : "runForFut", "tail" : "(f: (A) ⇒ A, init: A, duration: Long, save: (A, Int) ⇒ Unit): Future[A]", "member" : "provingground.QDI.runForFut", "link" : "provingground\/QDI$.html#runForFut[A](f:A=>A,init:A,duration:Long,save:(A,Int)=>Unit):scala.concurrent.Future[A]", "kind" : "def"}, {"label" : "runFor", "tail" : "(f: (A) ⇒ A, init: A, duration: Long): A", "member" : "provingground.QDI.runFor", "link" : "provingground\/QDI$.html#runFor[A](f:A=>A,init:A,duration:Long):A", "kind" : "def"}, {"label" : "runFor", "tail" : "(f: (A) ⇒ A, init: A, duration: Long, save: (A, Int) ⇒ Unit): A", "member" : "provingground.QDI.runFor", "link" : "provingground\/QDI$.html#runFor[A](f:A=>A,init:A,duration:Long,save:(A,Int)=>Unit):A", "kind" : "def"}, {"label" : "readFD", "tail" : "(filename: String, dir: String): FiniteDistribution[String]", "member" : "provingground.QDI.readFD", "link" : "provingground\/QDI$.html#readFD(filename:String,dir:String):provingground.FiniteDistribution[String]", "kind" : "def"}, {"label" : "writeFD", "tail" : "(fd: FiniteDistribution[String], filename: String, dir: String): Unit", "member" : "provingground.QDI.writeFD", "link" : "provingground\/QDI$.html#writeFD(fd:provingground.FiniteDistribution[String],filename:String,dir:String):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/QDI$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/QDI$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/QDI$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/QDI$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/QDI$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/QDI$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/QDI$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/QDI$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/QDI$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/QDI$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/QDI$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/QDI$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/QDI$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/QDI$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/QDI$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/QDI$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/QDI$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/QDI$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/QDI$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.ReflPickle", "shortDescription" : "Reflection based picking for case objects which are terms.", "object" : "provingground\/ReflPickle$.html", "members_object" : [{"label" : "unpickle", "tail" : "(str: String): Term", "member" : "provingground.ReflPickle.unpickle", "link" : "provingground\/ReflPickle$.html#unpickle(str:String):provingground.HoTT.Term", "kind" : "def"}, {"label" : "mirror", "tail" : ": Mirror", "member" : "provingground.ReflPickle.mirror", "link" : "provingground\/ReflPickle$.html#mirror:reflect.runtime.universe.Mirror", "kind" : "lazy val"}, {"label" : "pickle", "tail" : "(t: Term): String", "member" : "provingground.ReflPickle.pickle", "link" : "provingground\/ReflPickle$.html#pickle(t:provingground.HoTT.Term):String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/ReflPickle$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/ReflPickle$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/ReflPickle$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/ReflPickle$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/ReflPickle$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/ReflPickle$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/ReflPickle$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/ReflPickle$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/ReflPickle$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/ReflPickle$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/ReflPickle$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/ReflPickle$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/ReflPickle$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/ReflPickle$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/ReflPickle$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/ReflPickle$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/ReflPickle$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/ReflPickle$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/ReflPickle$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.Sampler", "shortDescription" : "", "object" : "provingground\/Sampler$.html", "members_object" : [{"label" : "sample", "tail" : "(pd: ProbabilityDistribution[A], n: Int): Map[A, Int]", "member" : "provingground.Sampler.sample", "link" : "provingground\/Sampler$.html#sample[A](pd:provingground.ProbabilityDistribution[A],n:Int):Map[A,Int]", "kind" : "def"}, {"label" : "grouped", "tail" : "(vec: Vector[A]): Map[A, Int]", "member" : "provingground.Sampler.grouped", "link" : "provingground\/Sampler$.html#grouped[A](vec:Vector[A]):scala.collection.immutable.Map[A,Int]", "kind" : "def"}, {"label" : "linear", "tail" : "(m: Map[A, Int]): Vector[A]", "member" : "provingground.Sampler.linear", "link" : "provingground\/Sampler$.html#linear[A](m:Map[A,Int]):scala.collection.immutable.Vector[A]", "kind" : "def"}, {"label" : "toFD", "tail" : "(sample: Map[A, Int]): FiniteDistribution[A]", "member" : "provingground.Sampler.toFD", "link" : "provingground\/Sampler$.html#toFD[A](sample:Map[A,Int]):provingground.FiniteDistribution[A]", "kind" : "def"}, {"label" : "getMultinomial", "tail" : "(xs: Vector[A], ps: Vector[Double], size: Int): Map[A, Int]", "member" : "provingground.Sampler.getMultinomial", "link" : "provingground\/Sampler$.html#getMultinomial[A](xs:Vector[A],ps:Vector[Double],size:Int):scala.collection.immutable.Map[A,Int]", "kind" : "def"}, {"label" : "fromPMF", "tail" : "(pmf: Vector[Weighted[A]], size: Int): Map[A, Int]", "member" : "provingground.Sampler.fromPMF", "link" : "provingground\/Sampler$.html#fromPMF[A](pmf:Vector[provingground.Weighted[A]],size:Int):Map[A,Int]", "kind" : "def"}, {"label" : "combineAll", "tail" : "(xs: Vector[Map[A, Int]]): Map[A, Int]", "member" : "provingground.Sampler.combineAll", "link" : "provingground\/Sampler$.html#combineAll[A](xs:Vector[Map[A,Int]]):scala.collection.immutable.Map[A,Int]", "kind" : "def"}, {"label" : "collapse", "tail" : "(ps: Vector[(A, Int)]): Map[A, Int]", "member" : "provingground.Sampler.collapse", "link" : "provingground\/Sampler$.html#collapse[A](ps:Vector[(A,Int)]):scala.collection.immutable.Map[A,Int]", "kind" : "def"}, {"label" : "combine", "tail" : "(x: Map[A, Int], y: Map[A, Int]): Map[A, Int]", "member" : "provingground.Sampler.combine", "link" : "provingground\/Sampler$.html#combine[A](x:Map[A,Int],y:Map[A,Int]):scala.collection.immutable.Map[A,Int]", "kind" : "def"}, {"label" : "total", "tail" : "(x: Vector[(A, Int)]): Int", "member" : "provingground.Sampler.total", "link" : "provingground\/Sampler$.html#total[A](x:Vector[(A,Int)]):Int", "kind" : "def"}, {"label" : "rand", "tail" : ": Random", "member" : "provingground.Sampler.rand", "link" : "provingground\/Sampler$.html#rand:scala.util.Random", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/Sampler$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/Sampler$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/Sampler$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/Sampler$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/Sampler$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/Sampler$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/Sampler$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/Sampler$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/Sampler$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/Sampler$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/Sampler$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/Sampler$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/Sampler$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/Sampler$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/Sampler$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/Sampler$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/Sampler$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/Sampler$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/Sampler$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.ServerStart", "shortDescription" : "", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/ServerStart.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/ServerStart.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ServerStart) ⇒ Boolean, msg: ⇒ Any): ServerStart", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/ServerStart.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ServerStart) ⇒ Boolean): ServerStart", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/ServerStart.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): ServerStart", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/ServerStart.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ServerStart", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/ServerStart.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ServerStart, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/ServerStart.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ServerStart, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/ServerStart.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "stop", "tail" : "(): Unit", "member" : "provingground.ServerStart.stop", "link" : "provingground\/ServerStart.html#stop():Unit", "kind" : "def"}, {"label" : "bindingFuture", "tail" : ": Future[ServerBinding]", "member" : "provingground.ServerStart.bindingFuture", "link" : "provingground\/ServerStart.html#bindingFuture:scala.concurrent.Future[akka.http.scaladsl.Http.ServerBinding]", "kind" : "val"}, {"label" : "route", "tail" : ": Route", "member" : "provingground.ServerStart.route", "link" : "provingground\/ServerStart.html#route:akka.http.scaladsl.server.Route", "kind" : "val"}, {"member" : "provingground.ServerStart#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/ServerStart.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/ServerStart.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/ServerStart.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/ServerStart.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/ServerStart.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/ServerStart.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/ServerStart.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/ServerStart.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/ServerStart.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/ServerStart.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/ServerStart.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/ServerStart.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/ServerStart.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/ServerStart.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/ServerStart.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/ServerStart.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/ServerStart.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/ServerStart.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/ServerStart.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/ServerStart.html", "kind" : "class"}, {"name" : "provingground.TermObj", "shortDescription" : "", "object" : "provingground\/TermObj$.html", "members_object" : [{"label" : "objCase", "tail" : ": PartialFunction[String, Term]", "member" : "provingground.TermObj.objCase", "link" : "provingground\/TermObj$.html#objCase:PartialFunction[String,provingground.HoTT.Term]", "kind" : "val"}, {"label" : "unapply", "tail" : "(str: String): Option[Term]", "member" : "provingground.TermObj.unapply", "link" : "provingground\/TermObj$.html#unapply(str:String):Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "apply", "tail" : "(t: Term): String", "member" : "provingground.TermObj.apply", "link" : "provingground\/TermObj$.html#apply(t:provingground.HoTT.Term):String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/TermObj$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/TermObj$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/TermObj$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/TermObj$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/TermObj$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/TermObj$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/TermObj$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/TermObj$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/TermObj$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/TermObj$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/TermObj$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/TermObj$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/TermObj$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/TermObj$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/TermObj$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/TermObj$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/TermObj$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/TermObj$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/TermObj$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.TermSampler", "shortDescription" : "", "object" : "provingground\/TermSampler$.html", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/TermSampler.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/TermSampler.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TermSampler) ⇒ Boolean, msg: ⇒ Any): TermSampler", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/TermSampler.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (TermSampler) ⇒ Boolean): TermSampler", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/TermSampler.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): TermSampler", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/TermSampler.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): TermSampler", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/TermSampler.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (TermSampler, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/TermSampler.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (TermSampler, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/TermSampler.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "NextSample", "tail" : "", "member" : "provingground.TermSampler.NextSample", "link" : "provingground\/TermSampler.html#NextSampleextendsProductwithSerializable", "kind" : "case class"}, {"label" : "loggedBuffer", "tail" : "(init: FiniteDistribution[Term], sampleSize: Int, derSampleSize: Int, epsilon: Double, sc: Double, inertia: Double): ArrayBuffer[NextSample]", "member" : "provingground.TermSampler.loggedBuffer", "link" : "provingground\/TermSampler.html#loggedBuffer(init:provingground.FiniteDistribution[provingground.HoTT.Term],sampleSize:Int,derSampleSize:Int,epsilon:Double,sc:Double,inertia:Double):scala.collection.mutable.ArrayBuffer[TermSampler.this.NextSample]", "kind" : "def"}, {"label" : "stop", "tail" : "(): Unit", "member" : "provingground.TermSampler.stop", "link" : "provingground\/TermSampler.html#stop():Unit", "kind" : "def"}, {"label" : "live", "tail" : ": Boolean", "member" : "provingground.TermSampler.live", "link" : "provingground\/TermSampler.html#live:Boolean", "kind" : "var"}, {"label" : "loggedIterator", "tail" : "(init: FiniteDistribution[Term], sampleSize: Int, derSampleSize: Int, epsilon: Double, sc: Double, inertia: Double): Iterator[NextSample]", "member" : "provingground.TermSampler.loggedIterator", "link" : "provingground\/TermSampler.html#loggedIterator(init:provingground.FiniteDistribution[provingground.HoTT.Term],sampleSize:Int,derSampleSize:Int,epsilon:Double,sc:Double,inertia:Double):Iterator[TermSampler.this.NextSample]", "kind" : "def"}, {"label" : "iterator", "tail" : "(init: FiniteDistribution[Term], sampleSize: Int, derSampleSize: Int, epsilon: Double, sc: Double, inertia: Double): Iterator[FiniteDistribution[Term]]", "member" : "provingground.TermSampler.iterator", "link" : "provingground\/TermSampler.html#iterator(init:provingground.FiniteDistribution[provingground.HoTT.Term],sampleSize:Int,derSampleSize:Int,epsilon:Double,sc:Double,inertia:Double):Iterator[provingground.FiniteDistribution[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "flow", "tail" : "(sampleSize: Int, derSampleSize: Int, epsilon: Double, sc: Double, inertia: Double): (FiniteDistribution[Term]) ⇒ FiniteDistribution[Term]", "member" : "provingground.TermSampler.flow", "link" : "provingground\/TermSampler.html#flow(sampleSize:Int,derSampleSize:Int,epsilon:Double,sc:Double,inertia:Double):provingground.FiniteDistribution[provingground.HoTT.Term]=>provingground.FiniteDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"member" : "provingground.TermSampler#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/TermSampler.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/TermSampler.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/TermSampler.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/TermSampler.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/TermSampler.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/TermSampler.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/TermSampler.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/TermSampler.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/TermSampler.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/TermSampler.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/TermSampler.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/TermSampler.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/TermSampler.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/TermSampler.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/TermSampler.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/TermSampler.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/TermSampler.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/TermSampler.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/TermSampler.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "thmEntropies", "tail" : "(sample: Map[Term, Int], d: BasicDeducer): ThmEntropies", "member" : "provingground.TermSampler.thmEntropies", "link" : "provingground\/TermSampler$.html#thmEntropies(sample:Map[provingground.HoTT.Term,Int],d:provingground.BasicDeducer):provingground.ThmEntropies", "kind" : "def"}, {"label" : "thmEntropies", "tail" : "(sample: Map[Term, Int]): ThmEntropies", "member" : "provingground.TermSampler.thmEntropies", "link" : "provingground\/TermSampler$.html#thmEntropies(sample:Map[provingground.HoTT.Term,Int]):provingground.ThmEntropies", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/TermSampler$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/TermSampler$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/TermSampler$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/TermSampler$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/TermSampler$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/TermSampler$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/TermSampler$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/TermSampler$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/TermSampler$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/TermSampler$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/TermSampler$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/TermSampler$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/TermSampler$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/TermSampler$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/TermSampler$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/TermSampler$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/TermSampler$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/TermSampler$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/TermSampler$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/TermSampler.html", "kind" : "object"}, {"name" : "provingground.Tuples", "shortDescription" : "", "object" : "provingground\/Tuples$.html", "members_object" : [{"label" : "DepPairCons", "tail" : "", "member" : "provingground.Tuples.DepPairCons", "link" : "provingground\/Tuples$.html#DepPairCons[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],T<:provingground.HoTT.Termwithprovingground.HoTT.Subs[T]]extendsTuples.TermTuple[provingground.HoTT.DepPair[U,W],provingground.HoTT.FuncLike[U,F],T]withProductwithSerializable", "kind" : "case class"}, {"label" : "PairCons", "tail" : "", "member" : "provingground.Tuples.PairCons", "link" : "provingground\/Tuples$.html#PairCons[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],T<:provingground.HoTT.Termwithprovingground.HoTT.Subs[T]]extendsTuples.TermTuple[provingground.HoTT.PairTerm[U,W],provingground.HoTT.FuncLike[U,F],T]withProductwithSerializable", "kind" : "case class"}, {"label" : "singleton", "tail" : "(term: U): Singleton[U]", "member" : "provingground.Tuples.singleton", "link" : "provingground\/Tuples$.html#singleton[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](term:U):provingground.Tuples.Singleton[U]", "kind" : "implicit def"}, {"label" : "SingleEnv", "tail" : "", "member" : "provingground.Tuples.SingleEnv", "link" : "provingground\/Tuples$.html#SingleEnv[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],T<:provingground.HoTT.Termwithprovingground.HoTT.Subs[T]]extendsTuples.TermTuple[U,provingground.HoTT.FuncLike[U,T],T]", "kind" : "class"}, {"label" : "Singleton", "tail" : "", "member" : "provingground.Tuples.Singleton", "link" : "provingground\/Tuples$.html#Singleton[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsTuples.SingleEnv[U,provingground.HoTT.Term]withProductwithSerializable", "kind" : "case class"}, {"label" : "MapsTo", "tail" : "", "member" : "provingground.Tuples.MapsTo", "link" : "provingground\/Tuples$.html#MapsTo[F,T]extendsAnyRef", "kind" : "trait"}, {"label" : "getTerm", "tail" : "(tuple: TermTuple[U, F, T]): U", "member" : "provingground.Tuples.getTerm", "link" : "provingground\/Tuples$.html#getTerm[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],T<:provingground.HoTT.Termwithprovingground.HoTT.Subs[T]](tuple:provingground.Tuples.TermTuple[U,F,T]):U", "kind" : "implicit def"}, {"label" : "TermTuple", "tail" : "", "member" : "provingground.Tuples.TermTuple", "link" : "provingground\/Tuples$.html#TermTuple[TermType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TermType],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],T<:provingground.HoTT.Termwithprovingground.HoTT.Subs[T]]extendsTuples.MapsTo[F,T]", "kind" : "trait"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/Tuples$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/Tuples$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/Tuples$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/Tuples$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/Tuples$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/Tuples$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/Tuples$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/Tuples$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/Tuples$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/Tuples$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/Tuples$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/Tuples$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/Tuples$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/Tuples$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/Tuples$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/Tuples$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/Tuples$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/Tuples$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/Tuples$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.WebServer", "shortDescription" : "", "object" : "provingground\/WebServer$.html", "members_object" : [{"label" : "stop", "tail" : "(): Unit", "member" : "provingground.WebServer.stop", "link" : "provingground\/WebServer$.html#stop:Unit", "kind" : "def"}, {"label" : "bind", "tail" : "(): Unit", "member" : "provingground.WebServer.bind", "link" : "provingground\/WebServer$.html#bind:Unit", "kind" : "def"}, {"label" : "bindingFuture", "tail" : ": Future[ServerBinding]", "member" : "provingground.WebServer.bindingFuture", "link" : "provingground\/WebServer$.html#bindingFuture:scala.concurrent.Future[akka.http.scaladsl.Http.ServerBinding]", "kind" : "lazy val"}, {"label" : "helloRoute", "tail" : ": Route", "member" : "provingground.WebServer.helloRoute", "link" : "provingground\/WebServer$.html#helloRoute:akka.http.scaladsl.server.Route", "kind" : "val"}, {"label" : "route", "tail" : ": Route", "member" : "provingground.WebServer.route", "link" : "provingground\/WebServer$.html#route:akka.http.scaladsl.server.Route", "kind" : "val"}, {"label" : "mixin", "tail" : "(route: Route): Route", "member" : "provingground.WebServer.mixin", "link" : "provingground\/WebServer$.html#mixin(route:akka.http.scaladsl.server.Route):akka.http.scaladsl.server.Route", "kind" : "def"}, {"label" : "addRoute", "tail" : "(route: Route): Unit", "member" : "provingground.WebServer.addRoute", "link" : "provingground\/WebServer$.html#addRoute(route:akka.http.scaladsl.server.Route):Unit", "kind" : "def"}, {"label" : "otherRoutes", "tail" : ": Option[Route]", "member" : "provingground.WebServer.otherRoutes", "link" : "provingground\/WebServer$.html#otherRoutes:Option[akka.http.scaladsl.server.Route]", "kind" : "var"}, {"label" : "resourceRoute", "tail" : ": (RequestContext) ⇒ Future[RouteResult]", "member" : "provingground.WebServer.resourceRoute", "link" : "provingground\/WebServer$.html#resourceRoute:akka.http.scaladsl.server.RequestContext=>scala.concurrent.Future[akka.http.scaladsl.server.RouteResult]", "kind" : "val"}, {"label" : "dataRoute", "tail" : ": (RequestContext) ⇒ Future[RouteResult]", "member" : "provingground.WebServer.dataRoute", "link" : "provingground\/WebServer$.html#dataRoute:akka.http.scaladsl.server.RequestContext=>scala.concurrent.Future[akka.http.scaladsl.server.RouteResult]", "kind" : "val"}, {"label" : "textRoute", "tail" : ": (RequestContext) ⇒ Future[RouteResult]", "member" : "provingground.WebServer.textRoute", "link" : "provingground\/WebServer$.html#textRoute:akka.http.scaladsl.server.RequestContext=>scala.concurrent.Future[akka.http.scaladsl.server.RouteResult]", "kind" : "val"}, {"label" : "htmlRoute", "tail" : ": (RequestContext) ⇒ Future[RouteResult]", "member" : "provingground.WebServer.htmlRoute", "link" : "provingground\/WebServer$.html#htmlRoute:akka.http.scaladsl.server.RequestContext=>scala.concurrent.Future[akka.http.scaladsl.server.RouteResult]", "kind" : "val"}, {"label" : "getText", "tail" : "(name: String): String", "member" : "provingground.WebServer.getText", "link" : "provingground\/WebServer$.html#getText(name:String):String", "kind" : "def"}, {"label" : "showDummy", "tail" : "(): Unit", "member" : "provingground.WebServer.showDummy", "link" : "provingground\/WebServer$.html#showDummy:Unit", "kind" : "def"}, {"label" : "dummy", "tail" : ": String", "member" : "provingground.WebServer.dummy", "link" : "provingground\/WebServer$.html#dummy:String", "kind" : "val"}, {"label" : "fdRoute", "tail" : ": Route", "member" : "provingground.WebServer.fdRoute", "link" : "provingground\/WebServer$.html#fdRoute:akka.http.scaladsl.server.Route", "kind" : "val"}, {"label" : "pingQueue", "tail" : ": Source[Unit, SourceQueueWithComplete[Unit]]", "member" : "provingground.WebServer.pingQueue", "link" : "provingground\/WebServer$.html#pingQueue:akka.stream.scaladsl.Source[Unit,akka.stream.scaladsl.SourceQueueWithComplete[Unit]]", "kind" : "val"}, {"label" : "getTimeSeries", "tail" : "(): List[(String, Vector[Double])]", "member" : "provingground.WebServer.getTimeSeries", "link" : "provingground\/WebServer$.html#getTimeSeries:List[(String,Vector[Double])]", "kind" : "def"}, {"label" : "display", "tail" : "(buf: Deducer.BufferedRun): Unit", "member" : "provingground.WebServer.display", "link" : "provingground\/WebServer$.html#display(buf:provingground.Deducer#BufferedRun):Unit", "kind" : "def"}, {"label" : "displayTS", "tail" : "(fds: Vector[FiniteDistribution[Term]], names: Vector[(Term, String)]): Unit", "member" : "provingground.WebServer.displayTS", "link" : "provingground\/WebServer$.html#displayTS(fds:Vector[provingground.FiniteDistribution[provingground.HoTT.Term]],names:Vector[(provingground.HoTT.Term,String)]):Unit", "kind" : "def"}, {"label" : "viewTypes", "tail" : ": Set[Typ[Term]]", "member" : "provingground.WebServer.viewTypes", "link" : "provingground\/WebServer$.html#viewTypes:scala.collection.mutable.Set[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "viewTerms", "tail" : ": Set[Term]", "member" : "provingground.WebServer.viewTerms", "link" : "provingground\/WebServer$.html#viewTerms:scala.collection.mutable.Set[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "showFDs", "tail" : "(fds: Vector[FiniteDistribution[U]], terms: Set[U], typs: Set[Typ[Term]], names: Vector[(Term, String)]): Unit", "member" : "provingground.WebServer.showFDs", "link" : "provingground\/WebServer$.html#showFDs[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](fds:Vector[provingground.FiniteDistribution[U]],terms:Set[U],typs:Set[provingground.HoTT.Typ[provingground.HoTT.Term]],names:Vector[(provingground.HoTT.Term,String)]):Unit", "kind" : "def"}, {"label" : "showTimeSeries", "tail" : "(term: U, ts: Vector[Double], names: Vector[(Term, String)]): Unit", "member" : "provingground.WebServer.showTimeSeries", "link" : "provingground\/WebServer$.html#showTimeSeries[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](term:U,ts:Vector[Double],names:Vector[(provingground.HoTT.Term,String)]):Unit", "kind" : "def"}, {"label" : "showDist", "tail" : "(fd: FiniteDistribution[U], names: Vector[(Term, String)]): Unit", "member" : "provingground.WebServer.showDist", "link" : "provingground\/WebServer$.html#showDist[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](fd:provingground.FiniteDistribution[U],names:Vector[(provingground.HoTT.Term,String)]):Unit", "kind" : "def"}, {"label" : "typTimeSeries", "tail" : ": Map[String, Vector[Double]]", "member" : "provingground.WebServer.typTimeSeries", "link" : "provingground\/WebServer$.html#typTimeSeries:scala.collection.mutable.Map[String,Vector[Double]]", "kind" : "val"}, {"label" : "timeSeries", "tail" : ": Map[String, Vector[Double]]", "member" : "provingground.WebServer.timeSeries", "link" : "provingground\/WebServer$.html#timeSeries:scala.collection.mutable.Map[String,Vector[Double]]", "kind" : "val"}, {"label" : "fdVec", "tail" : ": Vector[(String, String, Double)]", "member" : "provingground.WebServer.fdVec", "link" : "provingground\/WebServer$.html#fdVec:Vector[(String,String,Double)]", "kind" : "var"}, {"label" : "termsView", "tail" : ": String", "member" : "provingground.WebServer.termsView", "link" : "provingground\/WebServer$.html#termsView:String", "kind" : "val"}, {"label" : "fdView", "tail" : ": String", "member" : "provingground.WebServer.fdView", "link" : "provingground\/WebServer$.html#fdView:String", "kind" : "val"}, {"label" : "makePage", "tail" : "(divs: String): String", "member" : "provingground.WebServer.makePage", "link" : "provingground\/WebServer$.html#makePage(divs:String):String", "kind" : "def"}, {"label" : "katex", "tail" : ": String", "member" : "provingground.WebServer.katex", "link" : "provingground\/WebServer$.html#katex:String", "kind" : "val"}, {"label" : "getView", "tail" : "(name: String): String", "member" : "provingground.WebServer.getView", "link" : "provingground\/WebServer$.html#getView(name:String):String", "kind" : "def"}, {"label" : "getData", "tail" : "(name: String): String", "member" : "provingground.WebServer.getData", "link" : "provingground\/WebServer$.html#getData(name:String):String", "kind" : "def"}, {"label" : "showData", "tail" : "(name: String, dataVal: () ⇒ String): Unit", "member" : "provingground.WebServer.showData", "link" : "provingground\/WebServer$.html#showData(name:String,dataVal:()=>String):Unit", "kind" : "def"}, {"label" : "showText", "tail" : "(name: String, data: String): Unit", "member" : "provingground.WebServer.showText", "link" : "provingground\/WebServer$.html#showText(name:String,data:String):Unit", "kind" : "def"}, {"label" : "showView", "tail" : "(name: String, data: String): Unit", "member" : "provingground.WebServer.showView", "link" : "provingground\/WebServer$.html#showView(name:String,data:String):Unit", "kind" : "def"}, {"label" : "dummyData", "tail" : "(): () ⇒ String", "member" : "provingground.WebServer.dummyData", "link" : "provingground\/WebServer$.html#dummyData:()=>String", "kind" : "def"}, {"label" : "executionContext", "tail" : ": ExecutionContextExecutor", "member" : "provingground.WebServer.executionContext", "link" : "provingground\/WebServer$.html#executionContext:scala.concurrent.ExecutionContextExecutor", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/WebServer$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/WebServer$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/WebServer$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/WebServer$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/WebServer$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/WebServer$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/WebServer$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/WebServer$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/WebServer$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/WebServer$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/WebServer$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/WebServer$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/WebServer$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/WebServer$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/WebServer$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/WebServer$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/WebServer$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/WebServer$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/WebServer$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "akka" : [], "ammonite.ops" : [], "provingground.scratch" : [{"name" : "provingground.scratch.DedGrad", "shortDescription" : "", "object" : "provingground\/scratch\/DedGrad$.html", "members_object" : [{"label" : "ABU", "tail" : "", "member" : "provingground.scratch.DedGrad.ABU", "link" : "provingground\/scratch\/DedGrad$.html#ABU", "kind" : "object"}, {"label" : "AB", "tail" : "", "member" : "provingground.scratch.DedGrad.AB", "link" : "provingground\/scratch\/DedGrad$.html#AB", "kind" : "object"}, {"label" : "SimpleGrad", "tail" : "", "member" : "provingground.scratch.DedGrad.SimpleGrad", "link" : "provingground\/scratch\/DedGrad$.html#SimpleGrad", "kind" : "object"}, {"label" : "LongRun", "tail" : "", "member" : "provingground.scratch.DedGrad.LongRun", "link" : "provingground\/scratch\/DedGrad$.html#LongRun", "kind" : "object"}, {"label" : "idA", "tail" : ": Func[Term with Subs[Term], Term with Subs[Term]]", "member" : "provingground.scratch.DedGrad.idA", "link" : "provingground\/scratch\/DedGrad$.html#idA:provingground.HoTT.Func[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "f", "tail" : ": Func[Term, Term] with Subs[Func[Term, Term]]", "member" : "provingground.scratch.DedGrad.f", "link" : "provingground\/scratch\/DedGrad$.html#f:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "cnst", "tail" : ": Func[Term with Subs[Term], Func[Term with Subs[Term], Term with Subs[Term]]]", "member" : "provingground.scratch.DedGrad.cnst", "link" : "provingground\/scratch\/DedGrad$.html#cnst:provingground.HoTT.Func[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "distAB", "tail" : ": FiniteDistribution[Term]", "member" : "provingground.scratch.DedGrad.distAB", "link" : "provingground\/scratch\/DedGrad$.html#distAB:provingground.FiniteDistribution[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "distABU", "tail" : ": FiniteDistribution[Term]", "member" : "provingground.scratch.DedGrad.distABU", "link" : "provingground\/scratch\/DedGrad$.html#distABU:provingground.FiniteDistribution[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "b", "tail" : ": Term with Subs[Term]", "member" : "provingground.scratch.DedGrad.b", "link" : "provingground\/scratch\/DedGrad$.html#b:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "a", "tail" : ": Term with Subs[Term]", "member" : "provingground.scratch.DedGrad.a", "link" : "provingground\/scratch\/DedGrad$.html#a:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "B", "tail" : ": Typ[Term] with Subs[Typ[Term]]", "member" : "provingground.scratch.DedGrad.B", "link" : "provingground\/scratch\/DedGrad$.html#B:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "A", "tail" : ": Typ[Term] with Subs[Typ[Term]]", "member" : "provingground.scratch.DedGrad.A", "link" : "provingground\/scratch\/DedGrad$.html#A:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/scratch\/DedGrad$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/scratch\/DedGrad$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/scratch\/DedGrad$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/scratch\/DedGrad$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/scratch\/DedGrad$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/scratch\/DedGrad$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/scratch\/DedGrad$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scratch\/DedGrad$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scratch\/DedGrad$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scratch\/DedGrad$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/scratch\/DedGrad$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/scratch\/DedGrad$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/scratch\/DedGrad$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/scratch\/DedGrad$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/scratch\/DedGrad$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/scratch\/DedGrad$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/scratch\/DedGrad$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/scratch\/DedGrad$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/scratch\/DedGrad$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.scratch.TempMain", "shortDescription" : "", "object" : "provingground\/scratch\/TempMain$.html", "members_object" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/scratch\/TempMain$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/scratch\/TempMain$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/scratch\/TempMain$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/scratch\/TempMain$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/scratch\/TempMain$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/scratch\/TempMain$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/scratch\/TempMain$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scratch\/TempMain$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scratch\/TempMain$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scratch\/TempMain$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/scratch\/TempMain$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/scratch\/TempMain$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/scratch\/TempMain$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/scratch\/TempMain$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/scratch\/TempMain$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/scratch\/TempMain$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/scratch\/TempMain$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/scratch\/TempMain$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/scratch\/TempMain$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.scratch.UnifInv", "shortDescription" : "", "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/scratch\/UnifInv.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/scratch\/UnifInv.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (UnifInv) ⇒ Boolean, msg: ⇒ Any): UnifInv", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/scratch\/UnifInv.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (UnifInv) ⇒ Boolean): UnifInv", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/scratch\/UnifInv.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): UnifInv", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/scratch\/UnifInv.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): UnifInv", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/scratch\/UnifInv.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (UnifInv, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/scratch\/UnifInv.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (UnifInv, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/scratch\/UnifInv.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "bug", "tail" : "(): Boolean", "member" : "provingground.scratch.UnifInv.bug", "link" : "provingground\/scratch\/UnifInv.html#bug:Boolean", "kind" : "def"}, {"label" : "prodOpt", "tail" : "(): Option[Term]", "member" : "provingground.scratch.UnifInv.prodOpt", "link" : "provingground\/scratch\/UnifInv.html#prodOpt:Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "unified", "tail" : "(): Boolean", "member" : "provingground.scratch.UnifInv.unified", "link" : "provingground\/scratch\/UnifInv.html#unified:Boolean", "kind" : "def"}, {"label" : "origProd", "tail" : "(): Boolean", "member" : "provingground.scratch.UnifInv.origProd", "link" : "provingground\/scratch\/UnifInv.html#origProd:Boolean", "kind" : "def"}, {"label" : "newFunc", "tail" : ": Term", "member" : "provingground.scratch.UnifInv.newFunc", "link" : "provingground\/scratch\/UnifInv.html#newFunc:provingground.HoTT.Term", "kind" : "val"}, {"label" : "newArg", "tail" : ": Term", "member" : "provingground.scratch.UnifInv.newArg", "link" : "provingground\/scratch\/UnifInv.html#newArg:provingground.HoTT.Term", "kind" : "val"}, {"label" : "newResult", "tail" : ": Term", "member" : "provingground.scratch.UnifInv.newResult", "link" : "provingground\/scratch\/UnifInv.html#newResult:provingground.HoTT.Term", "kind" : "val"}, {"member" : "provingground.scratch.UnifInv#<init>", "error" : "unsupported entity"}, {"label" : "arg", "tail" : ": Term", "member" : "provingground.scratch.UnifInv.arg", "link" : "provingground\/scratch\/UnifInv.html#arg:provingground.HoTT.Term", "kind" : "val"}, {"label" : "func", "tail" : ": Term", "member" : "provingground.scratch.UnifInv.func", "link" : "provingground\/scratch\/UnifInv.html#func:provingground.HoTT.Term", "kind" : "val"}, {"label" : "unif", "tail" : ": Map[Term, Term]", "member" : "provingground.scratch.UnifInv.unif", "link" : "provingground\/scratch\/UnifInv.html#unif:Map[provingground.HoTT.Term,provingground.HoTT.Term]", "kind" : "val"}, {"label" : "result", "tail" : ": Term", "member" : "provingground.scratch.UnifInv.result", "link" : "provingground\/scratch\/UnifInv.html#result:provingground.HoTT.Term", "kind" : "val"}, {"label" : "target", "tail" : ": Term", "member" : "provingground.scratch.UnifInv.target", "link" : "provingground\/scratch\/UnifInv.html#target:provingground.HoTT.Term", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/scratch\/UnifInv.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/scratch\/UnifInv.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/scratch\/UnifInv.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/scratch\/UnifInv.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/scratch\/UnifInv.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/scratch\/UnifInv.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/scratch\/UnifInv.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scratch\/UnifInv.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scratch\/UnifInv.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scratch\/UnifInv.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/scratch\/UnifInv.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/scratch\/UnifInv.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/scratch\/UnifInv.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/scratch\/UnifInv.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/scratch\/UnifInv.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/scratch\/UnifInv.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/scratch\/UnifInv.html", "kind" : "case class"}], "provingground.andrewscurtis" : [{"name" : "provingground.andrewscurtis.ACBatch", "shortDescription" : "Batch start for Andrews-Curtis runs", "object" : "provingground\/andrewscurtis\/ACBatch$.html", "members_object" : [{"label" : "quickStart", "tail" : "(dir: String, file: String): Vector[Future[ActorRef]]", "member" : "provingground.andrewscurtis.ACBatch.quickStart", "link" : "provingground\/andrewscurtis\/ACBatch$.html#quickStart(dir:String,file:String):scala.collection.immutable.Vector[scala.concurrent.Future[akka.actor.ActorRef]]", "kind" : "def"}, {"label" : "loadStartData", "tail" : "(dir: String, file: String): Vector[StartData]", "member" : "provingground.andrewscurtis.ACBatch.loadStartData", "link" : "provingground\/andrewscurtis\/ACBatch$.html#loadStartData(dir:String,file:String):scala.collection.immutable.Vector[provingground.andrewscurtis.StartData]", "kind" : "def"}, {"label" : "loadRawStartData", "tail" : "(dir: String, file: String): Vector[String]", "member" : "provingground.andrewscurtis.ACBatch.loadRawStartData", "link" : "provingground\/andrewscurtis\/ACBatch$.html#loadRawStartData(dir:String,file:String):scala.collection.immutable.Vector[String]", "kind" : "def"}, {"label" : "wd", "tail" : ": ThisType", "member" : "provingground.andrewscurtis.ACBatch.wd", "link" : "provingground\/andrewscurtis\/ACBatch$.html#wd:ammonite.ops.pwd.ThisType", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/ACBatch$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/ACBatch$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/ACBatch$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/ACBatch$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/ACBatch$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/ACBatch$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/ACBatch$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACBatch$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACBatch$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACBatch$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/ACBatch$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/ACBatch$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/andrewscurtis\/ACBatch$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/ACBatch$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/ACBatch$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/ACBatch$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/ACBatch$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/ACBatch$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/ACBatch$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.andrewscurtis.ACFlow", "shortDescription" : "", "object" : "provingground\/andrewscurtis\/ACFlow$.html", "members_object" : [{"label" : "moveWeightsFlow", "tail" : "(): Repr[ACMoveWeights]", "member" : "provingground.andrewscurtis.ACFlow.moveWeightsFlow", "link" : "provingground\/andrewscurtis\/ACFlow$.html#moveWeightsFlow:provingground.andrewscurtis.ACFlow.fl.Repr[provingground.andrewscurtis.ACMoveWeights]", "kind" : "def"}, {"label" : "fdMFlow", "tail" : "(): Repr[(String, FiniteDistribution[AtomicMove])]", "member" : "provingground.andrewscurtis.ACFlow.fdMFlow", "link" : "provingground\/andrewscurtis\/ACFlow$.html#fdMFlow:provingground.andrewscurtis.ACFlow.fl.Repr[(String,provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove])]", "kind" : "def"}, {"label" : "elemsFlow", "tail" : "(): Repr[ACElem]", "member" : "provingground.andrewscurtis.ACFlow.elemsFlow", "link" : "provingground\/andrewscurtis\/ACFlow$.html#elemsFlow:provingground.andrewscurtis.ACFlow.fl.Repr[provingground.andrewscurtis.ACElem]", "kind" : "def"}, {"label" : "thmsFlow", "tail" : ": Repr[ACThm]", "member" : "provingground.andrewscurtis.ACFlow.thmsFlow", "link" : "provingground\/andrewscurtis\/ACFlow$.html#thmsFlow:provingground.andrewscurtis.ACFlow.fl.Repr[provingground.andrewscurtis.ACThm]", "kind" : "val"}, {"label" : "loopsFlow", "tail" : ": Repr[(String, Int)]", "member" : "provingground.andrewscurtis.ACFlow.loopsFlow", "link" : "provingground\/andrewscurtis\/ACFlow$.html#loopsFlow:provingground.andrewscurtis.ACFlow.fl.Repr[(String,Int)]", "kind" : "val"}, {"label" : "src", "tail" : ": Source[SnapShot[(FiniteDistribution[AtomicMove], FiniteDistribution[Moves]), Param], ActorRef]", "member" : "provingground.andrewscurtis.ACFlow.src", "link" : "provingground\/andrewscurtis\/ACFlow$.html#src:akka.stream.scaladsl.Source[provingground.SnapShot[(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves]),provingground.andrewscurtis.Param],akka.actor.ActorRef]", "kind" : "val"}, {"label" : "fl", "tail" : ": Flow[Snap, Snap, NotUsed]", "member" : "provingground.andrewscurtis.ACFlow.fl", "link" : "provingground\/andrewscurtis\/ACFlow$.html#fl:akka.stream.scaladsl.Flow[provingground.andrewscurtis.ACElem.Snap,provingground.andrewscurtis.ACElem.Snap,akka.NotUsed]", "kind" : "val"}, {"label" : "mat", "tail" : ": ActorMaterializer", "member" : "provingground.andrewscurtis.ACFlow.mat", "link" : "provingground\/andrewscurtis\/ACFlow$.html#mat:akka.stream.ActorMaterializer", "kind" : "implicit val"}, {"label" : "system", "tail" : ": ActorSystem", "member" : "provingground.andrewscurtis.ACFlow.system", "link" : "provingground\/andrewscurtis\/ACFlow$.html#system:akka.actor.ActorSystem", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/ACFlow$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/ACFlow$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/ACFlow$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/ACFlow$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/ACFlow$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/ACFlow$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/ACFlow$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACFlow$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACFlow$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACFlow$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/ACFlow$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/ACFlow$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/andrewscurtis\/ACFlow$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/ACFlow$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/ACFlow$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/ACFlow$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/ACFlow$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/ACFlow$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/ACFlow$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.andrewscurtis.ACLooper", "shortDescription" : "The loop for learning specialized to Andrews-Curtis moves", "object" : "provingground\/andrewscurtis\/ACLooper$.html", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/andrewscurtis\/ACLooper.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/andrewscurtis\/ACLooper.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ACLooper) ⇒ Boolean, msg: ⇒ Any): ACLooper", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/ACLooper.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ACLooper) ⇒ Boolean): ACLooper", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/ACLooper.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): ACLooper", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/ACLooper.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ACLooper", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/ACLooper.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ACLooper, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/andrewscurtis\/ACLooper.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ACLooper, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/andrewscurtis\/ACLooper.html#->[B](y:B):(A,B)", "kind" : "def"}, {"member" : "provingground.andrewscurtis.ACLooper#<init>", "error" : "unsupported entity"}, {"label" : "receive", "tail" : "(): PartialFunction[Any, Unit]", "member" : "provingground.FDLooper.receive", "link" : "provingground\/andrewscurtis\/ACLooper.html#receive:PartialFunction[Any,Unit]", "kind" : "def"}, {"label" : "shift", "tail" : "(start: (FiniteDistribution[AtomicMove], FiniteDistribution[Moves]), strictness: Double, steps: Int, epsilon: Double): (FiniteDistribution[AtomicMove], FiniteDistribution[Moves])", "member" : "provingground.FDLooper.shift", "link" : "provingground\/andrewscurtis\/ACLooper.html#shift(start:X,strictness:Double,steps:Int,epsilon:Double):X", "kind" : "def"}, {"label" : "snapShot", "tail" : "(x: (FiniteDistribution[AtomicMove], FiniteDistribution[Moves])): SnapShot[(FiniteDistribution[AtomicMove], FiniteDistribution[Moves]), Param]", "member" : "provingground.FDLooper.snapShot", "link" : "provingground\/andrewscurtis\/ACLooper.html#snapShot(x:X):provingground.SnapShot[X,P]", "kind" : "def"}, {"label" : "state", "tail" : ": (FiniteDistribution[AtomicMove], FiniteDistribution[Moves])", "member" : "provingground.FDLooper.state", "link" : "provingground\/andrewscurtis\/ACLooper.html#state:X", "kind" : "var"}, {"label" : "loops", "tail" : ": Int", "member" : "provingground.FDLooper.loops", "link" : "provingground\/andrewscurtis\/ACLooper.html#loops:Int", "kind" : "var"}, {"label" : "param", "tail" : ": Param", "member" : "provingground.FDLooper.param", "link" : "provingground\/andrewscurtis\/ACLooper.html#param:P", "kind" : "val"}, {"label" : "unhandled", "tail" : "(message: Any): Unit", "member" : "akka.actor.Actor.unhandled", "link" : "provingground\/andrewscurtis\/ACLooper.html#unhandled(message:Any):Unit", "kind" : "def"}, {"label" : "postRestart", "tail" : "(reason: Throwable): Unit", "member" : "akka.actor.Actor.postRestart", "link" : "provingground\/andrewscurtis\/ACLooper.html#postRestart(reason:Throwable):Unit", "kind" : "def"}, {"label" : "preRestart", "tail" : "(reason: Throwable, message: Option[Any]): Unit", "member" : "akka.actor.Actor.preRestart", "link" : "provingground\/andrewscurtis\/ACLooper.html#preRestart(reason:Throwable,message:Option[Any]):Unit", "kind" : "def"}, {"label" : "postStop", "tail" : "(): Unit", "member" : "akka.actor.Actor.postStop", "link" : "provingground\/andrewscurtis\/ACLooper.html#postStop():Unit", "kind" : "def"}, {"label" : "preStart", "tail" : "(): Unit", "member" : "akka.actor.Actor.preStart", "link" : "provingground\/andrewscurtis\/ACLooper.html#preStart():Unit", "kind" : "def"}, {"label" : "supervisorStrategy", "tail" : "(): SupervisorStrategy", "member" : "akka.actor.Actor.supervisorStrategy", "link" : "provingground\/andrewscurtis\/ACLooper.html#supervisorStrategy:akka.actor.SupervisorStrategy", "kind" : "def"}, {"label" : "aroundPostRestart", "tail" : "(reason: Throwable): Unit", "member" : "akka.actor.Actor.aroundPostRestart", "link" : "provingground\/andrewscurtis\/ACLooper.html#aroundPostRestart(reason:Throwable):Unit", "kind" : "def"}, {"label" : "aroundPreRestart", "tail" : "(reason: Throwable, message: Option[Any]): Unit", "member" : "akka.actor.Actor.aroundPreRestart", "link" : "provingground\/andrewscurtis\/ACLooper.html#aroundPreRestart(reason:Throwable,message:Option[Any]):Unit", "kind" : "def"}, {"label" : "aroundPostStop", "tail" : "(): Unit", "member" : "akka.actor.Actor.aroundPostStop", "link" : "provingground\/andrewscurtis\/ACLooper.html#aroundPostStop():Unit", "kind" : "def"}, {"label" : "aroundPreStart", "tail" : "(): Unit", "member" : "akka.actor.Actor.aroundPreStart", "link" : "provingground\/andrewscurtis\/ACLooper.html#aroundPreStart():Unit", "kind" : "def"}, {"label" : "aroundReceive", "tail" : "(receive: akka.actor.Actor.Receive, msg: Any): Unit", "member" : "akka.actor.Actor.aroundReceive", "link" : "provingground\/andrewscurtis\/ACLooper.html#aroundReceive(receive:akka.actor.Actor.Receive,msg:Any):Unit", "kind" : "def"}, {"label" : "sender", "tail" : "(): ActorRef", "member" : "akka.actor.Actor.sender", "link" : "provingground\/andrewscurtis\/ACLooper.html#sender():akka.actor.ActorRef", "kind" : "final def"}, {"label" : "self", "tail" : ": ActorRef", "member" : "akka.actor.Actor.self", "link" : "provingground\/andrewscurtis\/ACLooper.html#self:akka.actor.ActorRef", "kind" : "implicit final val"}, {"label" : "context", "tail" : ": ActorContext", "member" : "akka.actor.Actor.context", "link" : "provingground\/andrewscurtis\/ACLooper.html#context:akka.actor.ActorContext", "kind" : "implicit val"}, {"label" : "Receive", "tail" : "", "member" : "akka.actor.Actor.Receive", "link" : "provingground\/andrewscurtis\/ACLooper.html#Receive=akka.actor.Actor.Receive", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/ACLooper.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/ACLooper.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/ACLooper.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/ACLooper.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/ACLooper.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/ACLooper.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/ACLooper.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACLooper.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACLooper.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACLooper.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/ACLooper.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/ACLooper.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/andrewscurtis\/ACLooper.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/ACLooper.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/ACLooper.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/ACLooper.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/ACLooper.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/ACLooper.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/ACLooper.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "initState", "tail" : "(rank: Int): (FiniteDistribution[AtomicMove], FiniteDistribution[Moves])", "member" : "provingground.andrewscurtis.ACLooper.initState", "link" : "provingground\/andrewscurtis\/ACLooper$.html#initState(rank:Int):(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves])", "kind" : "def"}, {"label" : "smoothSpawn", "tail" : "(name: String, rank: Int, size: Int, wrdCntn: Double, init: (FiniteDistribution[AtomicMove], FiniteDistribution[Moves]), srcRef: ActorRef, param: Param): ActorRef", "member" : "provingground.andrewscurtis.ACLooper.smoothSpawn", "link" : "provingground\/andrewscurtis\/ACLooper$.html#smoothSpawn(name:String,rank:Int,size:Int,wrdCntn:Double,init:(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves]),srcRef:akka.actor.ActorRef,param:provingground.andrewscurtis.Param):akka.actor.ActorRef", "kind" : "def"}, {"label" : "spawn", "tail" : "(name: String, rank: Int, size: Int, wrdCntn: Double, init: (FiniteDistribution[AtomicMove], FiniteDistribution[Moves]), srcRef: ActorRef, param: Param): ActorRef", "member" : "provingground.andrewscurtis.ACLooper.spawn", "link" : "provingground\/andrewscurtis\/ACLooper$.html#spawn(name:String,rank:Int,size:Int,wrdCntn:Double,init:(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves]),srcRef:akka.actor.ActorRef,param:provingground.andrewscurtis.Param):akka.actor.ActorRef", "kind" : "def"}, {"label" : "smoothProps", "tail" : "(rank: Int, size: Int, wrdCntn: Double, init: (FiniteDistribution[AtomicMove], FiniteDistribution[Moves]), srcRef: ActorRef, param: Param): Props", "member" : "provingground.andrewscurtis.ACLooper.smoothProps", "link" : "provingground\/andrewscurtis\/ACLooper$.html#smoothProps(rank:Int,size:Int,wrdCntn:Double,init:(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves]),srcRef:akka.actor.ActorRef,param:provingground.andrewscurtis.Param):akka.actor.Props", "kind" : "def"}, {"label" : "props", "tail" : "(rank: Int, size: Int, wrdCntn: Double, init: (FiniteDistribution[AtomicMove], FiniteDistribution[Moves]), srcRef: ActorRef, param: Param): Props", "member" : "provingground.andrewscurtis.ACLooper.props", "link" : "provingground\/andrewscurtis\/ACLooper$.html#props(rank:Int,size:Int,wrdCntn:Double,init:(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves]),srcRef:akka.actor.ActorRef,param:provingground.andrewscurtis.Param):akka.actor.Props", "kind" : "def"}, {"label" : "padSmoothback", "tail" : "(rank: Int, wrdCntn: Double): (Double) ⇒ ((FiniteDistribution[AtomicMove], FiniteDistribution[Moves])) ⇒ ((FiniteDistribution[AtomicMove], FiniteDistribution[Moves])) ⇒ (FiniteDistribution[AtomicMove], FiniteDistribution[Moves])", "member" : "provingground.andrewscurtis.ACLooper.padSmoothback", "link" : "provingground\/andrewscurtis\/ACLooper$.html#padSmoothback(rank:Int,wrdCntn:Double):Double=>(((provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves]))=>((provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves]))=>(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves]))", "kind" : "def"}, {"label" : "padFeedback", "tail" : "(rank: Int, wrdCntn: Double): (Double) ⇒ ((FiniteDistribution[AtomicMove], FiniteDistribution[Moves])) ⇒ ((FiniteDistribution[AtomicMove], FiniteDistribution[Moves])) ⇒ (FiniteDistribution[AtomicMove], FiniteDistribution[Moves])", "member" : "provingground.andrewscurtis.ACLooper.padFeedback", "link" : "provingground\/andrewscurtis\/ACLooper$.html#padFeedback(rank:Int,wrdCntn:Double):Double=>(((provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves]))=>((provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves]))=>(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves]))", "kind" : "def"}, {"label" : "smoothFeedback", "tail" : "(rank: Int, wrdCntn: Double, strictness: Double): ((FiniteDistribution[AtomicMove], FiniteDistribution[Moves])) ⇒ (FiniteDistribution[AtomicMove], FiniteDistribution[Moves])", "member" : "provingground.andrewscurtis.ACLooper.smoothFeedback", "link" : "provingground\/andrewscurtis\/ACLooper$.html#smoothFeedback(rank:Int,wrdCntn:Double,strictness:Double):((provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves]))=>(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves])", "kind" : "def"}, {"label" : "feedback", "tail" : "(rank: Int, wrdCntn: Double, strictness: Double): ((FiniteDistribution[AtomicMove], FiniteDistribution[Moves])) ⇒ (FiniteDistribution[AtomicMove], FiniteDistribution[Moves])", "member" : "provingground.andrewscurtis.ACLooper.feedback", "link" : "provingground\/andrewscurtis\/ACLooper$.html#feedback(rank:Int,wrdCntn:Double,strictness:Double):((provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves]))=>(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves])", "kind" : "def"}, {"label" : "normalize", "tail" : ": ((FiniteDistribution[AtomicMove], FiniteDistribution[Moves])) ⇒ (FiniteDistribution[AtomicMove], FiniteDistribution[Moves])", "member" : "provingground.andrewscurtis.ACLooper.normalize", "link" : "provingground\/andrewscurtis\/ACLooper$.html#normalize:((provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves]))=>(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves])", "kind" : "val"}, {"label" : "dyn", "tail" : "(rank: Int, size: Int): DiffbleFunction[(FiniteDistribution[M], FiniteDistribution[V]), (FiniteDistribution[M], FiniteDistribution[V])]", "member" : "provingground.andrewscurtis.ACLooper.dyn", "link" : "provingground\/andrewscurtis\/ACLooper$.html#dyn(rank:Int,size:Int):provingground.DiffbleFunction[(provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.M],provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.V]),(provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.M],provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.V])]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/ACLooper$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/ACLooper$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/ACLooper$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/ACLooper$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/ACLooper$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/ACLooper$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/ACLooper$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACLooper$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACLooper$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACLooper$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/ACLooper$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/ACLooper$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/andrewscurtis\/ACLooper$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/ACLooper$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/ACLooper$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/ACLooper$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/ACLooper$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/ACLooper$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/ACLooper$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/andrewscurtis\/ACLooper.html", "kind" : "class"}, {"name" : "provingground.andrewscurtis.ACMongo", "shortDescription" : "", "object" : "provingground\/andrewscurtis\/ACMongo$.html", "members_object" : [{"label" : "thmsCSV", "tail" : "(name: String, dir: String): Future[Unit]", "member" : "provingground.andrewscurtis.ACMongo.thmsCSV", "link" : "provingground\/andrewscurtis\/ACMongo$.html#thmsCSV(name:String,dir:String):scala.concurrent.Future[Unit]", "kind" : "def"}, {"label" : "thmSaveCSV", "tail" : "(thms: Vector[ACThm])(name: String, loops: Int, dir: String): Unit", "member" : "provingground.andrewscurtis.ACMongo.thmSaveCSV", "link" : "provingground\/andrewscurtis\/ACMongo$.html#thmSaveCSV(thms:Vector[provingground.andrewscurtis.ACThm])(name:String,loops:Int,dir:String):Unit", "kind" : "def"}, {"label" : "thmView", "tail" : "(thms: Vector[ACThm])(thm: Presentation, name: String, loops: Int): String", "member" : "provingground.andrewscurtis.ACMongo.thmView", "link" : "provingground\/andrewscurtis\/ACMongo$.html#thmView(thms:Vector[provingground.andrewscurtis.ACThm])(thm:provingground.andrewscurtis.FreeGroups.Presentation,name:String,loops:Int):String", "kind" : "def"}, {"label" : "thmSupp", "tail" : "(name: String): Future[Vector[Presentation]]", "member" : "provingground.andrewscurtis.ACMongo.thmSupp", "link" : "provingground\/andrewscurtis\/ACMongo$.html#thmSupp(name:String):scala.concurrent.Future[Vector[provingground.andrewscurtis.FreeGroups.Presentation]]", "kind" : "def"}, {"label" : "allThmWeights", "tail" : "(name: String): Future[Vector[ACThm]]", "member" : "provingground.andrewscurtis.ACMongo.allThmWeights", "link" : "provingground\/andrewscurtis\/ACMongo$.html#allThmWeights(name:String):scala.concurrent.Future[Vector[provingground.andrewscurtis.ACThm]]", "kind" : "def"}, {"label" : "thmWeights", "tail" : "(thm: Presentation, name: String): Future[Stream[ACThm]]", "member" : "provingground.andrewscurtis.ACMongo.thmWeights", "link" : "provingground\/andrewscurtis\/ACMongo$.html#thmWeights(thm:provingground.andrewscurtis.FreeGroups.Presentation,name:String):scala.concurrent.Future[Stream[provingground.andrewscurtis.ACThm]]", "kind" : "def"}, {"label" : "getFutState", "tail" : "(name: String): Future[(FiniteDistribution[AtomicMove], FiniteDistribution[Moves])]", "member" : "provingground.andrewscurtis.ACMongo.getFutState", "link" : "provingground\/andrewscurtis\/ACMongo$.html#getFutState(name:String):scala.concurrent.Future[(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves])]", "kind" : "def"}, {"label" : "getFutStateDefault", "tail" : "(name: String, rank: Int): Future[(FiniteDistribution[AtomicMove], FiniteDistribution[Moves])]", "member" : "provingground.andrewscurtis.ACMongo.getFutStateDefault", "link" : "provingground\/andrewscurtis\/ACMongo$.html#getFutStateDefault(name:String,rank:Int):scala.concurrent.Future[(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves])]", "kind" : "def"}, {"label" : "getFutOptState", "tail" : "(name: String): Future[Option[(FiniteDistribution[AtomicMove], FiniteDistribution[Moves])]]", "member" : "provingground.andrewscurtis.ACMongo.getFutOptState", "link" : "provingground\/andrewscurtis\/ACMongo$.html#getFutOptState(name:String):scala.concurrent.Future[Option[(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves])]]", "kind" : "def"}, {"label" : "getFutOptThms", "tail" : "(name: String): Future[Option[FiniteDistribution[Presentation]]]", "member" : "provingground.andrewscurtis.ACMongo.getFutOptThms", "link" : "provingground\/andrewscurtis\/ACMongo$.html#getFutOptThms(name:String):scala.concurrent.Future[Option[provingground.FiniteDistribution[provingground.andrewscurtis.FreeGroups.Presentation]]]", "kind" : "def"}, {"label" : "getFutOptFDV", "tail" : "(name: String): Future[Option[FiniteDistribution[Moves]]]", "member" : "provingground.andrewscurtis.ACMongo.getFutOptFDV", "link" : "provingground\/andrewscurtis\/ACMongo$.html#getFutOptFDV(name:String):scala.concurrent.Future[Option[provingground.FiniteDistribution[provingground.andrewscurtis.Moves]]]", "kind" : "def"}, {"label" : "collect", "tail" : "(xs: Seq[Future[Option[T]]]): Future[Seq[T]]", "member" : "provingground.andrewscurtis.ACMongo.collect", "link" : "provingground\/andrewscurtis\/ACMongo$.html#collect[T](xs:Seq[scala.concurrent.Future[Option[T]]]):scala.concurrent.Future[Seq[T]]", "kind" : "def"}, {"label" : "FutOptMonad", "tail" : "", "member" : "provingground.andrewscurtis.ACMongo.FutOptMonad", "link" : "provingground\/andrewscurtis\/ACMongo$.html#FutOptMonad[A]extendsAnyRef", "kind" : "implicit class"}, {"label" : "mapFutOpt", "tail" : "(futOpt: Future[Option[S]])(fn: (S) ⇒ T): Future[Option[T]]", "member" : "provingground.andrewscurtis.ACMongo.mapFutOpt", "link" : "provingground\/andrewscurtis\/ACMongo$.html#mapFutOpt[S,T](futOpt:scala.concurrent.Future[Option[S]])(fn:S=>T):scala.concurrent.Future[Option[T]]", "kind" : "def"}, {"label" : "getFutOptFDM", "tail" : "(name: String): Future[Option[FiniteDistribution[AtomicMove]]]", "member" : "provingground.andrewscurtis.ACMongo.getFutOptFDM", "link" : "provingground\/andrewscurtis\/ACMongo$.html#getFutOptFDM(name:String):scala.concurrent.Future[Option[provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove]]]", "kind" : "def"}, {"label" : "getFutOptThmElems", "tail" : "(name: String): Future[Option[Vector[ACThm]]]", "member" : "provingground.andrewscurtis.ACMongo.getFutOptThmElems", "link" : "provingground\/andrewscurtis\/ACMongo$.html#getFutOptThmElems(name:String):scala.concurrent.Future[Option[Vector[provingground.andrewscurtis.ACThm]]]", "kind" : "def"}, {"label" : "getFutOptElems", "tail" : "(name: String): Future[Option[Vector[ACElem]]]", "member" : "provingground.andrewscurtis.ACMongo.getFutOptElems", "link" : "provingground\/andrewscurtis\/ACMongo$.html#getFutOptElems(name:String):scala.concurrent.Future[Option[Vector[provingground.andrewscurtis.ACElem]]]", "kind" : "def"}, {"label" : "getFutOptLoops", "tail" : "(name: String): Future[Option[Int]]", "member" : "provingground.andrewscurtis.ACMongo.getFutOptLoops", "link" : "provingground\/andrewscurtis\/ACMongo$.html#getFutOptLoops(name:String):scala.concurrent.Future[Option[Int]]", "kind" : "def"}, {"label" : "getFutStartData", "tail" : "(): Future[Vector[StartData]]", "member" : "provingground.andrewscurtis.ACMongo.getFutStartData", "link" : "provingground\/andrewscurtis\/ACMongo$.html#getFutStartData():scala.concurrent.Future[scala.collection.immutable.Vector[provingground.andrewscurtis.StartData]]", "kind" : "def"}, {"label" : "getFutActors", "tail" : "(): Future[Vector[String]]", "member" : "provingground.andrewscurtis.ACMongo.getFutActors", "link" : "provingground\/andrewscurtis\/ACMongo$.html#getFutActors():scala.concurrent.Future[scala.collection.immutable.Vector[String]]", "kind" : "def"}, {"label" : "getFutOptFDMStep", "tail" : "(name: String, loops: Int): Future[Option[FiniteDistribution[AtomicMove]]]", "member" : "provingground.andrewscurtis.ACMongo.getFutOptFDMStep", "link" : "provingground\/andrewscurtis\/ACMongo$.html#getFutOptFDMStep(name:String,loops:Int):scala.concurrent.Future[Option[provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove]]]", "kind" : "def"}, {"label" : "getFutThmElemsStep", "tail" : "(name: String, loops: Int): Future[Vector[ACThm]]", "member" : "provingground.andrewscurtis.ACMongo.getFutThmElemsStep", "link" : "provingground\/andrewscurtis\/ACMongo$.html#getFutThmElemsStep(name:String,loops:Int):scala.concurrent.Future[Vector[provingground.andrewscurtis.ACThm]]", "kind" : "def"}, {"label" : "getFutElemsStep", "tail" : "(name: String, loops: Int): Future[Vector[ACElem]]", "member" : "provingground.andrewscurtis.ACMongo.getFutElemsStep", "link" : "provingground\/andrewscurtis\/ACMongo$.html#getFutElemsStep(name:String,loops:Int):scala.concurrent.Future[Vector[provingground.andrewscurtis.ACElem]]", "kind" : "def"}, {"label" : "updateLoops", "tail" : "(name: String, loops: Int): Unit", "member" : "provingground.andrewscurtis.ACMongo.updateLoops", "link" : "provingground\/andrewscurtis\/ACMongo$.html#updateLoops(name:String,loops:Int):Unit", "kind" : "def"}, {"label" : "addMoveWeight", "tail" : "(wts: ACMoveWeights): Unit", "member" : "provingground.andrewscurtis.ACMongo.addMoveWeight", "link" : "provingground\/andrewscurtis\/ACMongo$.html#addMoveWeight(wts:provingground.andrewscurtis.ACMoveWeights):Unit", "kind" : "def"}, {"label" : "addThm", "tail" : "(thm: ACThm): Unit", "member" : "provingground.andrewscurtis.ACMongo.addThm", "link" : "provingground\/andrewscurtis\/ACMongo$.html#addThm(thm:provingground.andrewscurtis.ACThm):Unit", "kind" : "def"}, {"label" : "addElem", "tail" : "(el: ACElem): Unit", "member" : "provingground.andrewscurtis.ACMongo.addElem", "link" : "provingground\/andrewscurtis\/ACMongo$.html#addElem(el:provingground.andrewscurtis.ACElem):Unit", "kind" : "def"}, {"label" : "MoveWeightReader", "tail" : "", "member" : "provingground.andrewscurtis.ACMongo.MoveWeightReader", "link" : "provingground\/andrewscurtis\/ACMongo$.html#MoveWeightReader", "kind" : "implicit object"}, {"label" : "MoveWeightWriter", "tail" : "", "member" : "provingground.andrewscurtis.ACMongo.MoveWeightWriter", "link" : "provingground\/andrewscurtis\/ACMongo$.html#MoveWeightWriter", "kind" : "implicit object"}, {"label" : "ThmReader", "tail" : "", "member" : "provingground.andrewscurtis.ACMongo.ThmReader", "link" : "provingground\/andrewscurtis\/ACMongo$.html#ThmReader", "kind" : "implicit object"}, {"label" : "ThmWriter", "tail" : "", "member" : "provingground.andrewscurtis.ACMongo.ThmWriter", "link" : "provingground\/andrewscurtis\/ACMongo$.html#ThmWriter", "kind" : "implicit object"}, {"label" : "ElemsReader", "tail" : "", "member" : "provingground.andrewscurtis.ACMongo.ElemsReader", "link" : "provingground\/andrewscurtis\/ACMongo$.html#ElemsReader", "kind" : "implicit object"}, {"label" : "ElemsWriter", "tail" : "", "member" : "provingground.andrewscurtis.ACMongo.ElemsWriter", "link" : "provingground\/andrewscurtis\/ACMongo$.html#ElemsWriter", "kind" : "implicit object"}, {"label" : "moveWeightsDB", "tail" : ": BSONCollection", "member" : "provingground.andrewscurtis.ACMongo.moveWeightsDB", "link" : "provingground\/andrewscurtis\/ACMongo$.html#moveWeightsDB:reactivemongo.api.collections.bson.BSONCollection", "kind" : "lazy val"}, {"label" : "actorsDB", "tail" : ": BSONCollection", "member" : "provingground.andrewscurtis.ACMongo.actorsDB", "link" : "provingground\/andrewscurtis\/ACMongo$.html#actorsDB:reactivemongo.api.collections.bson.BSONCollection", "kind" : "lazy val"}, {"label" : "thmsPresIndex", "tail" : ": Index", "member" : "provingground.andrewscurtis.ACMongo.thmsPresIndex", "link" : "provingground\/andrewscurtis\/ACMongo$.html#thmsPresIndex:reactivemongo.api.indexes.Index", "kind" : "val"}, {"label" : "thmsInd", "tail" : ": CollectionIndexesManager", "member" : "provingground.andrewscurtis.ACMongo.thmsInd", "link" : "provingground\/andrewscurtis\/ACMongo$.html#thmsInd:reactivemongo.api.indexes.CollectionIndexesManager", "kind" : "val"}, {"label" : "thmsDB", "tail" : ": BSONCollection", "member" : "provingground.andrewscurtis.ACMongo.thmsDB", "link" : "provingground\/andrewscurtis\/ACMongo$.html#thmsDB:reactivemongo.api.collections.bson.BSONCollection", "kind" : "lazy val"}, {"label" : "index", "tail" : ": Index", "member" : "provingground.andrewscurtis.ACMongo.index", "link" : "provingground\/andrewscurtis\/ACMongo$.html#index:reactivemongo.api.indexes.Index", "kind" : "val"}, {"label" : "elemsInd", "tail" : ": CollectionIndexesManager", "member" : "provingground.andrewscurtis.ACMongo.elemsInd", "link" : "provingground\/andrewscurtis\/ACMongo$.html#elemsInd:reactivemongo.api.indexes.CollectionIndexesManager", "kind" : "val"}, {"label" : "elemsDB", "tail" : ": BSONCollection", "member" : "provingground.andrewscurtis.ACMongo.elemsDB", "link" : "provingground\/andrewscurtis\/ACMongo$.html#elemsDB:reactivemongo.api.collections.bson.BSONCollection", "kind" : "lazy val"}, {"label" : "db", "tail" : ": DefaultDB", "member" : "provingground.andrewscurtis.ACMongo.db", "link" : "provingground\/andrewscurtis\/ACMongo$.html#db:reactivemongo.api.DefaultDB", "kind" : "implicit lazy val"}, {"label" : "connection", "tail" : ": MongoConnection", "member" : "provingground.andrewscurtis.ACMongo.connection", "link" : "provingground\/andrewscurtis\/ACMongo$.html#connection:reactivemongo.api.MongoConnection", "kind" : "lazy val"}, {"label" : "driver", "tail" : ": MongoDriver", "member" : "provingground.andrewscurtis.ACMongo.driver", "link" : "provingground\/andrewscurtis\/ACMongo$.html#driver:reactivemongo.api.MongoDriver", "kind" : "lazy val"}, {"label" : "writerRef", "tail" : "(interface: Sink[Snap, M]): ActorRef", "member" : "provingground.andrewscurtis.ACWriter.writerRef", "link" : "provingground\/andrewscurtis\/ACMongo$.html#writerRef[M](interface:akka.stream.scaladsl.Sink[provingground.andrewscurtis.ACElem.Snap,M]):akka.actor.ActorRef", "kind" : "def"}, {"label" : "writerFlow", "tail" : ": Flow[SnapShot[(FiniteDistribution[AtomicMove], FiniteDistribution[Moves]), Param], SnapShot[(FiniteDistribution[AtomicMove], FiniteDistribution[Moves]), Param], NotUsed]", "member" : "provingground.andrewscurtis.ACWriter.writerFlow", "link" : "provingground\/andrewscurtis\/ACMongo$.html#writerFlow:akka.stream.scaladsl.Flow[provingground.SnapShot[(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves]),provingground.andrewscurtis.Param],provingground.SnapShot[(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves]),provingground.andrewscurtis.Param],akka.NotUsed]", "kind" : "val"}, {"label" : "loopsSink", "tail" : ": Sink[Snap, NotUsed]", "member" : "provingground.andrewscurtis.ACWriter.loopsSink", "link" : "provingground\/andrewscurtis\/ACMongo$.html#loopsSink:akka.stream.scaladsl.Sink[provingground.andrewscurtis.ACElem.Snap,akka.NotUsed]", "kind" : "val"}, {"label" : "moveWeightsSink", "tail" : ": Sink[Snap, NotUsed]", "member" : "provingground.andrewscurtis.ACWriter.moveWeightsSink", "link" : "provingground\/andrewscurtis\/ACMongo$.html#moveWeightsSink:akka.stream.scaladsl.Sink[provingground.andrewscurtis.ACElem.Snap,akka.NotUsed]", "kind" : "val"}, {"label" : "thmsSink", "tail" : ": Sink[Snap, NotUsed]", "member" : "provingground.andrewscurtis.ACWriter.thmsSink", "link" : "provingground\/andrewscurtis\/ACMongo$.html#thmsSink:akka.stream.scaladsl.Sink[provingground.andrewscurtis.ACElem.Snap,akka.NotUsed]", "kind" : "val"}, {"label" : "elemsSink", "tail" : ": Sink[Snap, NotUsed]", "member" : "provingground.andrewscurtis.ACWriter.elemsSink", "link" : "provingground\/andrewscurtis\/ACMongo$.html#elemsSink:akka.stream.scaladsl.Sink[provingground.andrewscurtis.ACElem.Snap,akka.NotUsed]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/ACMongo$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/ACMongo$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/ACMongo$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/ACMongo$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/ACMongo$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/ACMongo$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/ACMongo$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACMongo$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACMongo$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACMongo$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/ACMongo$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/ACMongo$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/andrewscurtis\/ACMongo$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/ACMongo$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/ACMongo$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/ACMongo$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/ACMongo$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/ACMongo$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/ACMongo$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.andrewscurtis.ACMoveWeights", "shortDescription" : "", "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/andrewscurtis\/ACMoveWeights.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/andrewscurtis\/ACMoveWeights.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ACMoveWeights) ⇒ Boolean, msg: ⇒ Any): ACMoveWeights", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/ACMoveWeights.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ACMoveWeights) ⇒ Boolean): ACMoveWeights", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/ACMoveWeights.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): ACMoveWeights", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/ACMoveWeights.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ACMoveWeights", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/ACMoveWeights.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ACMoveWeights, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/andrewscurtis\/ACMoveWeights.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ACMoveWeights, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/andrewscurtis\/ACMoveWeights.html#->[B](y:B):(A,B)", "kind" : "def"}, {"member" : "provingground.andrewscurtis.ACMoveWeights#<init>", "error" : "unsupported entity"}, {"label" : "loops", "tail" : ": Int", "member" : "provingground.andrewscurtis.ACMoveWeights.loops", "link" : "provingground\/andrewscurtis\/ACMoveWeights.html#loops:Int", "kind" : "val"}, {"label" : "fdM", "tail" : ": FiniteDistribution[AtomicMove]", "member" : "provingground.andrewscurtis.ACMoveWeights.fdM", "link" : "provingground\/andrewscurtis\/ACMoveWeights.html#fdM:provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove]", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "provingground.andrewscurtis.ACMoveWeights.name", "link" : "provingground\/andrewscurtis\/ACMoveWeights.html#name:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/ACMoveWeights.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/ACMoveWeights.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/ACMoveWeights.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/ACMoveWeights.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/ACMoveWeights.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/ACMoveWeights.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/ACMoveWeights.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACMoveWeights.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACMoveWeights.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACMoveWeights.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/ACMoveWeights.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/ACMoveWeights.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/ACMoveWeights.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/ACMoveWeights.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/ACMoveWeights.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/ACMoveWeights.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/andrewscurtis\/ACMoveWeights.html", "kind" : "case class"}, {"name" : "provingground.andrewscurtis.ACRoutes", "shortDescription" : "", "object" : "provingground\/andrewscurtis\/ACRoutes$.html", "members_object" : [{"label" : "acRoutes", "tail" : ": Route", "member" : "provingground.andrewscurtis.ACRoutes.acRoutes", "link" : "provingground\/andrewscurtis\/ACRoutes$.html#acRoutes:akka.http.scaladsl.server.Route", "kind" : "val"}, {"label" : "stop", "tail" : ": Route", "member" : "provingground.andrewscurtis.ACRoutes.stop", "link" : "provingground\/andrewscurtis\/ACRoutes$.html#stop:akka.http.scaladsl.server.Route", "kind" : "val"}, {"label" : "quickstart", "tail" : ": Route", "member" : "provingground.andrewscurtis.ACRoutes.quickstart", "link" : "provingground\/andrewscurtis\/ACRoutes$.html#quickstart:akka.http.scaladsl.server.Route", "kind" : "val"}, {"label" : "start", "tail" : ": Route", "member" : "provingground.andrewscurtis.ACRoutes.start", "link" : "provingground\/andrewscurtis\/ACRoutes$.html#start:akka.http.scaladsl.server.Route", "kind" : "val"}, {"label" : "getData", "tail" : ": Route", "member" : "provingground.andrewscurtis.ACRoutes.getData", "link" : "provingground\/andrewscurtis\/ACRoutes$.html#getData:akka.http.scaladsl.server.Route", "kind" : "val"}, {"label" : "actors", "tail" : ": Route", "member" : "provingground.andrewscurtis.ACRoutes.actors", "link" : "provingground\/andrewscurtis\/ACRoutes$.html#actors:akka.http.scaladsl.server.Route", "kind" : "val"}, {"label" : "moveWeights", "tail" : ": (RequestContext) ⇒ Future[RouteResult]", "member" : "provingground.andrewscurtis.ACRoutes.moveWeights", "link" : "provingground\/andrewscurtis\/ACRoutes$.html#moveWeights:akka.http.scaladsl.server.RequestContext=>scala.concurrent.Future[akka.http.scaladsl.server.RouteResult]", "kind" : "val"}, {"label" : "terms", "tail" : ": (RequestContext) ⇒ Future[RouteResult]", "member" : "provingground.andrewscurtis.ACRoutes.terms", "link" : "provingground\/andrewscurtis\/ACRoutes$.html#terms:akka.http.scaladsl.server.RequestContext=>scala.concurrent.Future[akka.http.scaladsl.server.RouteResult]", "kind" : "val"}, {"label" : "thms", "tail" : ": (RequestContext) ⇒ Future[RouteResult]", "member" : "provingground.andrewscurtis.ACRoutes.thms", "link" : "provingground\/andrewscurtis\/ACRoutes$.html#thms:akka.http.scaladsl.server.RequestContext=>scala.concurrent.Future[akka.http.scaladsl.server.RouteResult]", "kind" : "val"}, {"label" : "thmEvolve", "tail" : ": (RequestContext) ⇒ Future[RouteResult]", "member" : "provingground.andrewscurtis.ACRoutes.thmEvolve", "link" : "provingground\/andrewscurtis\/ACRoutes$.html#thmEvolve:akka.http.scaladsl.server.RequestContext=>scala.concurrent.Future[akka.http.scaladsl.server.RouteResult]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/ACRoutes$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/ACRoutes$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/ACRoutes$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/ACRoutes$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/ACRoutes$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/ACRoutes$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/ACRoutes$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACRoutes$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACRoutes$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACRoutes$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/ACRoutes$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/ACRoutes$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/andrewscurtis\/ACRoutes$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/ACRoutes$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/ACRoutes$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/ACRoutes$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/ACRoutes$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/ACRoutes$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/ACRoutes$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.andrewscurtis.ACsmoothLooper", "shortDescription" : "", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ACsmoothLooper) ⇒ Boolean, msg: ⇒ Any): ACsmoothLooper", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ACsmoothLooper) ⇒ Boolean): ACsmoothLooper", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): ACsmoothLooper", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ACsmoothLooper", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ACsmoothLooper, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ACsmoothLooper, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#->[B](y:B):(A,B)", "kind" : "def"}, {"member" : "provingground.andrewscurtis.ACsmoothLooper#<init>", "error" : "unsupported entity"}, {"label" : "receive", "tail" : "(): PartialFunction[Any, Unit]", "member" : "provingground.FDLooper.receive", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#receive:PartialFunction[Any,Unit]", "kind" : "def"}, {"label" : "shift", "tail" : "(start: (FiniteDistribution[AtomicMove], FiniteDistribution[Moves]), strictness: Double, steps: Int, epsilon: Double): (FiniteDistribution[AtomicMove], FiniteDistribution[Moves])", "member" : "provingground.FDLooper.shift", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#shift(start:X,strictness:Double,steps:Int,epsilon:Double):X", "kind" : "def"}, {"label" : "snapShot", "tail" : "(x: (FiniteDistribution[AtomicMove], FiniteDistribution[Moves])): SnapShot[(FiniteDistribution[AtomicMove], FiniteDistribution[Moves]), Param]", "member" : "provingground.FDLooper.snapShot", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#snapShot(x:X):provingground.SnapShot[X,P]", "kind" : "def"}, {"label" : "state", "tail" : ": (FiniteDistribution[AtomicMove], FiniteDistribution[Moves])", "member" : "provingground.FDLooper.state", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#state:X", "kind" : "var"}, {"label" : "loops", "tail" : ": Int", "member" : "provingground.FDLooper.loops", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#loops:Int", "kind" : "var"}, {"label" : "param", "tail" : ": Param", "member" : "provingground.FDLooper.param", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#param:P", "kind" : "val"}, {"label" : "unhandled", "tail" : "(message: Any): Unit", "member" : "akka.actor.Actor.unhandled", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#unhandled(message:Any):Unit", "kind" : "def"}, {"label" : "postRestart", "tail" : "(reason: Throwable): Unit", "member" : "akka.actor.Actor.postRestart", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#postRestart(reason:Throwable):Unit", "kind" : "def"}, {"label" : "preRestart", "tail" : "(reason: Throwable, message: Option[Any]): Unit", "member" : "akka.actor.Actor.preRestart", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#preRestart(reason:Throwable,message:Option[Any]):Unit", "kind" : "def"}, {"label" : "postStop", "tail" : "(): Unit", "member" : "akka.actor.Actor.postStop", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#postStop():Unit", "kind" : "def"}, {"label" : "preStart", "tail" : "(): Unit", "member" : "akka.actor.Actor.preStart", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#preStart():Unit", "kind" : "def"}, {"label" : "supervisorStrategy", "tail" : "(): SupervisorStrategy", "member" : "akka.actor.Actor.supervisorStrategy", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#supervisorStrategy:akka.actor.SupervisorStrategy", "kind" : "def"}, {"label" : "aroundPostRestart", "tail" : "(reason: Throwable): Unit", "member" : "akka.actor.Actor.aroundPostRestart", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#aroundPostRestart(reason:Throwable):Unit", "kind" : "def"}, {"label" : "aroundPreRestart", "tail" : "(reason: Throwable, message: Option[Any]): Unit", "member" : "akka.actor.Actor.aroundPreRestart", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#aroundPreRestart(reason:Throwable,message:Option[Any]):Unit", "kind" : "def"}, {"label" : "aroundPostStop", "tail" : "(): Unit", "member" : "akka.actor.Actor.aroundPostStop", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#aroundPostStop():Unit", "kind" : "def"}, {"label" : "aroundPreStart", "tail" : "(): Unit", "member" : "akka.actor.Actor.aroundPreStart", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#aroundPreStart():Unit", "kind" : "def"}, {"label" : "aroundReceive", "tail" : "(receive: akka.actor.Actor.Receive, msg: Any): Unit", "member" : "akka.actor.Actor.aroundReceive", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#aroundReceive(receive:akka.actor.Actor.Receive,msg:Any):Unit", "kind" : "def"}, {"label" : "sender", "tail" : "(): ActorRef", "member" : "akka.actor.Actor.sender", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#sender():akka.actor.ActorRef", "kind" : "final def"}, {"label" : "self", "tail" : ": ActorRef", "member" : "akka.actor.Actor.self", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#self:akka.actor.ActorRef", "kind" : "implicit final val"}, {"label" : "context", "tail" : ": ActorContext", "member" : "akka.actor.Actor.context", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#context:akka.actor.ActorContext", "kind" : "implicit val"}, {"label" : "Receive", "tail" : "", "member" : "akka.actor.Actor.Receive", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#Receive=akka.actor.Actor.Receive", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/andrewscurtis\/ACsmoothLooper.html", "kind" : "class"}, {"name" : "provingground.andrewscurtis.ACWriter", "members_trait" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/andrewscurtis\/ACWriter.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/andrewscurtis\/ACWriter.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ACWriter) ⇒ Boolean, msg: ⇒ Any): ACWriter", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/ACWriter.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (ACWriter) ⇒ Boolean): ACWriter", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/ACWriter.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): ACWriter", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/ACWriter.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): ACWriter", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/ACWriter.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (ACWriter, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/andrewscurtis\/ACWriter.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (ACWriter, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/andrewscurtis\/ACWriter.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "writerRef", "tail" : "(interface: Sink[Snap, M]): ActorRef", "member" : "provingground.andrewscurtis.ACWriter.writerRef", "link" : "provingground\/andrewscurtis\/ACWriter.html#writerRef[M](interface:akka.stream.scaladsl.Sink[provingground.andrewscurtis.ACElem.Snap,M]):akka.actor.ActorRef", "kind" : "def"}, {"label" : "writerFlow", "tail" : ": Flow[SnapShot[(FiniteDistribution[AtomicMove], FiniteDistribution[Moves]), Param], SnapShot[(FiniteDistribution[AtomicMove], FiniteDistribution[Moves]), Param], NotUsed]", "member" : "provingground.andrewscurtis.ACWriter.writerFlow", "link" : "provingground\/andrewscurtis\/ACWriter.html#writerFlow:akka.stream.scaladsl.Flow[provingground.SnapShot[(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves]),provingground.andrewscurtis.Param],provingground.SnapShot[(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves]),provingground.andrewscurtis.Param],akka.NotUsed]", "kind" : "val"}, {"label" : "loopsSink", "tail" : ": Sink[Snap, NotUsed]", "member" : "provingground.andrewscurtis.ACWriter.loopsSink", "link" : "provingground\/andrewscurtis\/ACWriter.html#loopsSink:akka.stream.scaladsl.Sink[provingground.andrewscurtis.ACElem.Snap,akka.NotUsed]", "kind" : "val"}, {"label" : "moveWeightsSink", "tail" : ": Sink[Snap, NotUsed]", "member" : "provingground.andrewscurtis.ACWriter.moveWeightsSink", "link" : "provingground\/andrewscurtis\/ACWriter.html#moveWeightsSink:akka.stream.scaladsl.Sink[provingground.andrewscurtis.ACElem.Snap,akka.NotUsed]", "kind" : "val"}, {"label" : "thmsSink", "tail" : ": Sink[Snap, NotUsed]", "member" : "provingground.andrewscurtis.ACWriter.thmsSink", "link" : "provingground\/andrewscurtis\/ACWriter.html#thmsSink:akka.stream.scaladsl.Sink[provingground.andrewscurtis.ACElem.Snap,akka.NotUsed]", "kind" : "val"}, {"label" : "elemsSink", "tail" : ": Sink[Snap, NotUsed]", "member" : "provingground.andrewscurtis.ACWriter.elemsSink", "link" : "provingground\/andrewscurtis\/ACWriter.html#elemsSink:akka.stream.scaladsl.Sink[provingground.andrewscurtis.ACElem.Snap,akka.NotUsed]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/ACWriter.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/ACWriter.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/ACWriter.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/ACWriter.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/ACWriter.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/ACWriter.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/ACWriter.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACWriter.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACWriter.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACWriter.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/ACWriter.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/ACWriter.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/andrewscurtis\/ACWriter.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/ACWriter.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/ACWriter.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/ACWriter.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/ACWriter.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/ACWriter.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/ACWriter.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "updateLoops", "tail" : "(name: String, loops: Int): Unit", "member" : "provingground.andrewscurtis.ACWriter.updateLoops", "link" : "provingground\/andrewscurtis\/ACWriter.html#updateLoops(name:String,loops:Int):Unit", "kind" : "abstract def"}, {"label" : "addMoveWeight", "tail" : "(wts: ACMoveWeights): Unit", "member" : "provingground.andrewscurtis.ACWriter.addMoveWeight", "link" : "provingground\/andrewscurtis\/ACWriter.html#addMoveWeight(wts:provingground.andrewscurtis.ACMoveWeights):Unit", "kind" : "abstract def"}, {"label" : "addThm", "tail" : "(thm: ACThm): Unit", "member" : "provingground.andrewscurtis.ACWriter.addThm", "link" : "provingground\/andrewscurtis\/ACWriter.html#addThm(thm:provingground.andrewscurtis.ACThm):Unit", "kind" : "abstract def"}, {"label" : "addElem", "tail" : "(el: ACElem): Unit", "member" : "provingground.andrewscurtis.ACWriter.addElem", "link" : "provingground\/andrewscurtis\/ACWriter.html#addElem(el:provingground.andrewscurtis.ACElem):Unit", "kind" : "abstract def"}], "shortDescription" : "Saving the results of Andrews-Curtis runsabstract methods are for the various saves and updatesconcrete methods give sinks and a flow that does all the saving.", "trait" : "provingground\/andrewscurtis\/ACWriter.html", "kind" : "trait"}, {"name" : "provingground.andrewscurtis.StartData", "shortDescription" : "data for spawning and starting an andrews-curtis runner.", "object" : "provingground\/andrewscurtis\/StartData$.html", "members_object" : [{"label" : "fromJson", "tail" : "(st: String): StartData", "member" : "provingground.andrewscurtis.StartData.fromJson", "link" : "provingground\/andrewscurtis\/StartData$.html#fromJson(st:String):provingground.andrewscurtis.StartData", "kind" : "def"}, {"label" : "quickhub", "tail" : ": ActorRef", "member" : "provingground.andrewscurtis.StartData.quickhub", "link" : "provingground\/andrewscurtis\/StartData$.html#quickhub:akka.actor.ActorRef", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/StartData$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/StartData$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/StartData$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/StartData$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/StartData$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/StartData$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/StartData$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/StartData$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/StartData$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/StartData$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/StartData$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/StartData$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/andrewscurtis\/StartData$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/StartData$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/StartData$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/StartData$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/StartData$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/StartData$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/StartData$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/andrewscurtis\/StartData.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/andrewscurtis\/StartData.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (StartData) ⇒ Boolean, msg: ⇒ Any): StartData", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/StartData.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (StartData) ⇒ Boolean): StartData", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/StartData.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): StartData", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/StartData.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): StartData", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/StartData.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (StartData, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/andrewscurtis\/StartData.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (StartData, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/andrewscurtis\/StartData.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "run", "tail" : "(sse: Sink[Snap, Future[Done]]): Future[ActorRef]", "member" : "provingground.andrewscurtis.StartData.run", "link" : "provingground\/andrewscurtis\/StartData.html#run(sse:akka.stream.scaladsl.Sink[provingground.andrewscurtis.ACElem.Snap,scala.concurrent.Future[akka.Done]]):scala.concurrent.Future[akka.actor.ActorRef]", "kind" : "def"}, {"label" : "log", "tail" : "(): (Future[BSONDocument], Future[Future[WriteResult]])", "member" : "provingground.andrewscurtis.StartData.log", "link" : "provingground\/andrewscurtis\/StartData.html#log:(scala.concurrent.Future[reactivemongo.bson.BSONDocument],scala.concurrent.Future[scala.concurrent.Future[reactivemongo.api.commands.WriteResult]])", "kind" : "def"}, {"label" : "runner", "tail" : "(init: (FiniteDistribution[AtomicMove], FiniteDistribution[Moves]), sse: Sink[Snap, Future[Done]]): ActorRef", "member" : "provingground.andrewscurtis.StartData.runner", "link" : "provingground\/andrewscurtis\/StartData.html#runner(init:(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves]),sse:akka.stream.scaladsl.Sink[provingground.andrewscurtis.ACElem.Snap,scala.concurrent.Future[akka.Done]]):akka.actor.ActorRef", "kind" : "def"}, {"label" : "initFut", "tail" : "(): Future[(FiniteDistribution[AtomicMove], FiniteDistribution[Moves])]", "member" : "provingground.andrewscurtis.StartData.initFut", "link" : "provingground\/andrewscurtis\/StartData.html#initFut:scala.concurrent.Future[(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves])]", "kind" : "def"}, {"label" : "p", "tail" : ": Param", "member" : "provingground.andrewscurtis.StartData.p", "link" : "provingground\/andrewscurtis\/StartData.html#p:provingground.andrewscurtis.Param", "kind" : "val"}, {"member" : "provingground.andrewscurtis.StartData#<init>", "error" : "unsupported entity"}, {"label" : "smooth", "tail" : ": Boolean", "member" : "provingground.andrewscurtis.StartData.smooth", "link" : "provingground\/andrewscurtis\/StartData.html#smooth:Boolean", "kind" : "val"}, {"label" : "epsilon", "tail" : ": Double", "member" : "provingground.andrewscurtis.StartData.epsilon", "link" : "provingground\/andrewscurtis\/StartData.html#epsilon:Double", "kind" : "val"}, {"label" : "strictness", "tail" : ": Double", "member" : "provingground.andrewscurtis.StartData.strictness", "link" : "provingground\/andrewscurtis\/StartData.html#strictness:Double", "kind" : "val"}, {"label" : "steps", "tail" : ": Int", "member" : "provingground.andrewscurtis.StartData.steps", "link" : "provingground\/andrewscurtis\/StartData.html#steps:Int", "kind" : "val"}, {"label" : "wrdCntn", "tail" : ": Double", "member" : "provingground.andrewscurtis.StartData.wrdCntn", "link" : "provingground\/andrewscurtis\/StartData.html#wrdCntn:Double", "kind" : "val"}, {"label" : "size", "tail" : ": Int", "member" : "provingground.andrewscurtis.StartData.size", "link" : "provingground\/andrewscurtis\/StartData.html#size:Int", "kind" : "val"}, {"label" : "rank", "tail" : ": Int", "member" : "provingground.andrewscurtis.StartData.rank", "link" : "provingground\/andrewscurtis\/StartData.html#rank:Int", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "provingground.andrewscurtis.StartData.name", "link" : "provingground\/andrewscurtis\/StartData.html#name:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/StartData.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/StartData.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/StartData.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/StartData.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/StartData.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/StartData.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/StartData.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/StartData.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/StartData.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/StartData.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/StartData.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/StartData.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/StartData.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/StartData.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/StartData.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/StartData.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/andrewscurtis\/StartData.html", "kind" : "case class"}, {"name" : "provingground.andrewscurtis.StateView", "shortDescription" : "", "object" : "provingground\/andrewscurtis\/StateView$.html", "members_class" : [{"label" : "+", "tail" : "(other: String): String", "member" : "scala.Predef.any2stringadd.+", "link" : "provingground\/andrewscurtis\/StateView.html#+(other:String):String", "kind" : "def"}, {"label" : "formatted", "tail" : "(fmtstr: String): String", "member" : "scala.Predef.StringFormat.formatted", "link" : "provingground\/andrewscurtis\/StateView.html#formatted(fmtstr:String):String", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (StateView) ⇒ Boolean, msg: ⇒ Any): StateView", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/StateView.html#ensuring(cond:A=>Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: (StateView) ⇒ Boolean): StateView", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/StateView.html#ensuring(cond:A=>Boolean):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean, msg: ⇒ Any): StateView", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/StateView.html#ensuring(cond:Boolean,msg:=>Any):A", "kind" : "def"}, {"label" : "ensuring", "tail" : "(cond: Boolean): StateView", "member" : "scala.Predef.Ensuring.ensuring", "link" : "provingground\/andrewscurtis\/StateView.html#ensuring(cond:Boolean):A", "kind" : "def"}, {"label" : "→", "tail" : "(y: B): (StateView, B)", "member" : "scala.Predef.ArrowAssoc.→", "link" : "provingground\/andrewscurtis\/StateView.html#→[B](y:B):(A,B)", "kind" : "def"}, {"label" : "->", "tail" : "(y: B): (StateView, B)", "member" : "scala.Predef.ArrowAssoc.->", "link" : "provingground\/andrewscurtis\/StateView.html#->[B](y:B):(A,B)", "kind" : "def"}, {"label" : "hardThms", "tail" : "(): Vector[Presentation]", "member" : "provingground.andrewscurtis.StateView.hardThms", "link" : "provingground\/andrewscurtis\/StateView.html#hardThms:scala.collection.immutable.Vector[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "hardness", "tail" : "(thm: Presentation): Double", "member" : "provingground.andrewscurtis.StateView.hardness", "link" : "provingground\/andrewscurtis\/StateView.html#hardness(thm:provingground.andrewscurtis.FreeGroups.Presentation):Double", "kind" : "def"}, {"label" : "hardnessMap", "tail" : ": Map[Presentation, Double]", "member" : "provingground.andrewscurtis.StateView.hardnessMap", "link" : "provingground\/andrewscurtis\/StateView.html#hardnessMap:scala.collection.immutable.Map[provingground.andrewscurtis.FreeGroups.Presentation,Double]", "kind" : "lazy val"}, {"label" : "totalProofWeight", "tail" : "(thm: Presentation): Double", "member" : "provingground.andrewscurtis.StateView.totalProofWeight", "link" : "provingground\/andrewscurtis\/StateView.html#totalProofWeight(thm:provingground.andrewscurtis.FreeGroups.Presentation):Double", "kind" : "def"}, {"label" : "proofWeightMap", "tail" : ": Map[Presentation, Double]", "member" : "provingground.andrewscurtis.StateView.proofWeightMap", "link" : "provingground\/andrewscurtis\/StateView.html#proofWeightMap:scala.collection.immutable.Map[provingground.andrewscurtis.FreeGroups.Presentation,Double]", "kind" : "lazy val"}, {"label" : "thmWeights", "tail" : ": Map[Presentation, Double]", "member" : "provingground.andrewscurtis.StateView.thmWeights", "link" : "provingground\/andrewscurtis\/StateView.html#thmWeights:scala.collection.immutable.Map[provingground.andrewscurtis.FreeGroups.Presentation,Double]", "kind" : "lazy val"}, {"label" : "proofWeight", "tail" : "(mvs: Moves): Double", "member" : "provingground.andrewscurtis.StateView.proofWeight", "link" : "provingground\/andrewscurtis\/StateView.html#proofWeight(mvs:provingground.andrewscurtis.Moves):Double", "kind" : "def"}, {"label" : "proofs", "tail" : "(thm: Presentation): Vector[Moves]", "member" : "provingground.andrewscurtis.StateView.proofs", "link" : "provingground\/andrewscurtis\/StateView.html#proofs(thm:provingground.andrewscurtis.FreeGroups.Presentation):scala.collection.immutable.Vector[provingground.andrewscurtis.Moves]", "kind" : "def"}, {"label" : "proofElems", "tail" : ": Map[Presentation, Vector[ACElem]]", "member" : "provingground.andrewscurtis.StateView.proofElems", "link" : "provingground\/andrewscurtis\/StateView.html#proofElems:scala.collection.immutable.Map[provingground.andrewscurtis.FreeGroups.Presentation,scala.collection.immutable.Vector[provingground.andrewscurtis.ACElem]]", "kind" : "lazy val"}, {"label" : "fdP", "tail" : ": FiniteDistribution[Presentation]", "member" : "provingground.andrewscurtis.StateView.fdP", "link" : "provingground\/andrewscurtis\/StateView.html#fdP:provingground.FiniteDistribution[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "lazy val"}, {"label" : "fdV", "tail" : ": FiniteDistribution[Moves]", "member" : "provingground.andrewscurtis.StateView.fdV", "link" : "provingground\/andrewscurtis\/StateView.html#fdV:provingground.FiniteDistribution[provingground.andrewscurtis.Moves]", "kind" : "lazy val"}, {"member" : "provingground.andrewscurtis.StateView#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/StateView.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/StateView.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/StateView.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/StateView.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/StateView.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/StateView.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/StateView.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/StateView.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/StateView.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/StateView.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/StateView.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/StateView.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/andrewscurtis\/StateView.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/StateView.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/StateView.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/StateView.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/StateView.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/StateView.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/StateView.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "fromMongo", "tail" : "(name: String): Future[StateView]", "member" : "provingground.andrewscurtis.StateView.fromMongo", "link" : "provingground\/andrewscurtis\/StateView$.html#fromMongo(name:String):scala.concurrent.Future[provingground.andrewscurtis.StateView]", "kind" : "def"}, {"label" : "apply", "tail" : "(name: String): Future[StateView]", "member" : "provingground.andrewscurtis.StateView.apply", "link" : "provingground\/andrewscurtis\/StateView$.html#apply(name:String):scala.concurrent.Future[provingground.andrewscurtis.StateView]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/StateView$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/StateView$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/StateView$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/StateView$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/StateView$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/StateView$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/StateView$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/StateView$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/StateView$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/StateView$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/StateView$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/StateView$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/andrewscurtis\/StateView$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/StateView$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/StateView$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/StateView$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/StateView$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/StateView$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/StateView$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/andrewscurtis\/StateView.html", "kind" : "class"}], "provingground.andrewscurtis.batch" : [{"name" : "provingground.andrewscurtis.batch.Dec_15_2015", "shortDescription" : "", "object" : "provingground\/andrewscurtis\/batch\/Dec_15_2015$.html", "members_object" : [{"label" : "pluto", "tail" : ": StartData", "member" : "provingground.andrewscurtis.batch.Dec_15_2015.pluto", "link" : "provingground\/andrewscurtis\/batch\/Dec_15_2015$.html#pluto:provingground.andrewscurtis.StartData", "kind" : "val"}, {"label" : "goofy", "tail" : ": StartData", "member" : "provingground.andrewscurtis.batch.Dec_15_2015.goofy", "link" : "provingground\/andrewscurtis\/batch\/Dec_15_2015$.html#goofy:provingground.andrewscurtis.StartData", "kind" : "val"}, {"label" : "donald", "tail" : ": StartData", "member" : "provingground.andrewscurtis.batch.Dec_15_2015.donald", "link" : "provingground\/andrewscurtis\/batch\/Dec_15_2015$.html#donald:provingground.andrewscurtis.StartData", "kind" : "val"}, {"label" : "mickey", "tail" : ": StartData", "member" : "provingground.andrewscurtis.batch.Dec_15_2015.mickey", "link" : "provingground\/andrewscurtis\/batch\/Dec_15_2015$.html#mickey:provingground.andrewscurtis.StartData", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/batch\/Dec_15_2015$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/batch\/Dec_15_2015$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/batch\/Dec_15_2015$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/batch\/Dec_15_2015$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/batch\/Dec_15_2015$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/batch\/Dec_15_2015$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/batch\/Dec_15_2015$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/batch\/Dec_15_2015$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/batch\/Dec_15_2015$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/batch\/Dec_15_2015$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/batch\/Dec_15_2015$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/batch\/Dec_15_2015$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/andrewscurtis\/batch\/Dec_15_2015$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/batch\/Dec_15_2015$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/batch\/Dec_15_2015$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/batch\/Dec_15_2015$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/batch\/Dec_15_2015$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/batch\/Dec_15_2015$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/batch\/Dec_15_2015$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "ammonite" : [], "reactivemongo" : []};