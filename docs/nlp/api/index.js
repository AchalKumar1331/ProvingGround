Index.PACKAGES = {"ammonite" : [], "ammonite.ops" : [], "provingground" : [{"name" : "provingground.CoreNLP", "shortDescription" : "", "object" : "provingground\/CoreNLP$.html", "members_object" : [{"label" : "namedentity", "tail" : "(token: CoreLabel): String", "member" : "provingground.CoreNLP.namedentity", "link" : "provingground\/CoreNLP$.html#namedentity(token:edu.stanford.nlp.ling.CoreLabel):String", "kind" : "def"}, {"label" : "pos", "tail" : "(token: CoreLabel): String", "member" : "provingground.CoreNLP.pos", "link" : "provingground\/CoreNLP$.html#pos(token:edu.stanford.nlp.ling.CoreLabel):String", "kind" : "def"}, {"label" : "word", "tail" : "(token: CoreLabel): String", "member" : "provingground.CoreNLP.word", "link" : "provingground\/CoreNLP$.html#word(token:edu.stanford.nlp.ling.CoreLabel):String", "kind" : "def"}, {"label" : "coreLabelList", "tail" : "(sentence: CoreMap): List[CoreLabel]", "member" : "provingground.CoreNLP.coreLabelList", "link" : "provingground\/CoreNLP$.html#coreLabelList(sentence:edu.stanford.nlp.util.CoreMap):List[edu.stanford.nlp.ling.CoreLabel]", "kind" : "def"}, {"label" : "proseTrees", "tail" : "(text: String)(pipe: StanfordCoreNLP): List[ProseTree]", "member" : "provingground.CoreNLP.proseTrees", "link" : "provingground\/CoreNLP$.html#proseTrees(text:String)(implicitpipe:edu.stanford.nlp.pipeline.StanfordCoreNLP):List[provingground.NlpProse.ProseTree]", "kind" : "def"}, {"label" : "depRelIterable", "tail" : "(sentence: CoreMap): Iterable[DepRel]", "member" : "provingground.CoreNLP.depRelIterable", "link" : "provingground\/CoreNLP$.html#depRelIterable(sentence:edu.stanford.nlp.util.CoreMap):Iterable[provingground.NlpProse.DepRel]", "kind" : "def"}, {"label" : "sentences", "tail" : "(document: Annotation): List[CoreMap]", "member" : "provingground.CoreNLP.sentences", "link" : "provingground\/CoreNLP$.html#sentences(document:edu.stanford.nlp.pipeline.Annotation):List[edu.stanford.nlp.util.CoreMap]", "kind" : "def"}, {"label" : "annotatedDoc", "tail" : "(text: String, pipe: StanfordCoreNLP): Annotation", "member" : "provingground.CoreNLP.annotatedDoc", "link" : "provingground\/CoreNLP$.html#annotatedDoc(text:String,pipe:edu.stanford.nlp.pipeline.StanfordCoreNLP):edu.stanford.nlp.pipeline.Annotation", "kind" : "def"}, {"label" : "pipe", "tail" : ": StanfordCoreNLP", "member" : "provingground.CoreNLP.pipe", "link" : "provingground\/CoreNLP$.html#pipe:edu.stanford.nlp.pipeline.StanfordCoreNLP", "kind" : "implicit lazy val"}, {"label" : "newPipe", "tail" : "(): StanfordCoreNLP", "member" : "provingground.CoreNLP.newPipe", "link" : "provingground\/CoreNLP$.html#newPipe:edu.stanford.nlp.pipeline.StanfordCoreNLP", "kind" : "def"}, {"label" : "depType", "tail" : "(e: SemanticGraphEdge): String", "member" : "provingground.CoreNLP.depType", "link" : "provingground\/CoreNLP$.html#depType(e:edu.stanford.nlp.semgraph.SemanticGraphEdge):String", "kind" : "def"}, {"label" : "depWord", "tail" : "(short: String, specific: String): String", "member" : "provingground.CoreNLP.depWord", "link" : "provingground\/CoreNLP$.html#depWord(short:String,specific:String):String", "kind" : "def"}, {"label" : "dep", "tail" : "(e: SemanticGraphEdge): Token", "member" : "provingground.CoreNLP.dep", "link" : "provingground\/CoreNLP$.html#dep(e:edu.stanford.nlp.semgraph.SemanticGraphEdge):provingground.NlpProse.Token", "kind" : "def"}, {"label" : "gov", "tail" : "(e: SemanticGraphEdge): Token", "member" : "provingground.CoreNLP.gov", "link" : "provingground\/CoreNLP$.html#gov(e:edu.stanford.nlp.semgraph.SemanticGraphEdge):provingground.NlpProse.Token", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/CoreNLP$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/CoreNLP$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/CoreNLP$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/CoreNLP$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/CoreNLP$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/CoreNLP$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/CoreNLP$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/CoreNLP$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/CoreNLP$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/CoreNLP$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/CoreNLP$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/CoreNLP$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/CoreNLP$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/CoreNLP$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/CoreNLP$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/CoreNLP$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/CoreNLP$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/CoreNLP$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/CoreNLP$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.CoreNLPTest", "shortDescription" : "", "object" : "provingground\/CoreNLPTest$.html", "members_object" : [{"label" : "tree", "tail" : ": ProseTree", "member" : "provingground.CoreNLPTest.tree", "link" : "provingground\/CoreNLPTest$.html#tree:provingground.NlpProse.ProseTree", "kind" : "val"}, {"label" : "depTrees", "tail" : ": List[Iterable[DepRel]]", "member" : "provingground.CoreNLPTest.depTrees", "link" : "provingground\/CoreNLPTest$.html#depTrees:List[Iterable[provingground.NlpProse.DepRel]]", "kind" : "val"}, {"label" : "sentences", "tail" : ": List[CoreMap]", "member" : "provingground.CoreNLPTest.sentences", "link" : "provingground\/CoreNLPTest$.html#sentences:List[edu.stanford.nlp.util.CoreMap]", "kind" : "val"}, {"label" : "sentencesJava", "tail" : ": List[CoreMap]", "member" : "provingground.CoreNLPTest.sentencesJava", "link" : "provingground\/CoreNLPTest$.html#sentencesJava:java.util.List[edu.stanford.nlp.util.CoreMap]", "kind" : "val"}, {"label" : "document", "tail" : ": Annotation", "member" : "provingground.CoreNLPTest.document", "link" : "provingground\/CoreNLPTest$.html#document:edu.stanford.nlp.pipeline.Annotation", "kind" : "val"}, {"label" : "text", "tail" : ": String", "member" : "provingground.CoreNLPTest.text", "link" : "provingground\/CoreNLPTest$.html#text:String", "kind" : "val"}, {"label" : "pipeline", "tail" : ": StanfordCoreNLP", "member" : "provingground.CoreNLPTest.pipeline", "link" : "provingground\/CoreNLPTest$.html#pipeline:edu.stanford.nlp.pipeline.StanfordCoreNLP", "kind" : "val"}, {"label" : "props", "tail" : ": Properties", "member" : "provingground.CoreNLPTest.props", "link" : "provingground\/CoreNLPTest$.html#props:java.util.Properties", "kind" : "val"}, {"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "scala.App.main", "link" : "provingground\/CoreNLPTest$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "delayedInit", "tail" : "(body: ⇒ Unit): Unit", "member" : "scala.App.delayedInit", "link" : "provingground\/CoreNLPTest$.html#delayedInit(body:=>Unit):Unit", "kind" : "def"}, {"label" : "args", "tail" : "(): Array[String]", "member" : "scala.App.args", "link" : "provingground\/CoreNLPTest$.html#args:Array[String]", "kind" : "def"}, {"label" : "executionStart", "tail" : ": Long", "member" : "scala.App.executionStart", "link" : "provingground\/CoreNLPTest$.html#executionStart:Long", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/CoreNLPTest$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/CoreNLPTest$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/CoreNLPTest$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/CoreNLPTest$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/CoreNLPTest$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/CoreNLPTest$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/CoreNLPTest$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/CoreNLPTest$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/CoreNLPTest$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/CoreNLPTest$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/CoreNLPTest$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/CoreNLPTest$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/CoreNLPTest$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/CoreNLPTest$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/CoreNLPTest$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/CoreNLPTest$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/CoreNLPTest$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/CoreNLPTest$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/CoreNLPTest$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.FormalExpr", "shortDescription" : "", "object" : "provingground\/FormalExpr$.html", "members_object" : [{"label" : "translator", "tail" : "(): Translator.OrElse[Tree, MathExpr]", "member" : "provingground.FormalExpr.translator", "link" : "provingground\/FormalExpr$.html#translator:provingground.Translator.OrElse[edu.stanford.nlp.trees.Tree,provingground.MathExpr]", "kind" : "def"}, {"label" : "SL", "tail" : "", "member" : "provingground.FormalExpr.SL", "link" : "provingground\/FormalExpr$.html#SL[A]=(provingground.Functors.S[A],Vector[A])", "kind" : "type"}, {"label" : "Node", "tail" : "", "member" : "provingground.FormalExpr.Node", "link" : "provingground\/FormalExpr$.html#NodeextendsMathExprwithProductwithSerializable", "kind" : "case class"}, {"label" : "Leaf", "tail" : "", "member" : "provingground.FormalExpr.Leaf", "link" : "provingground\/FormalExpr$.html#LeafextendsMathExprwithProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/FormalExpr$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/FormalExpr$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/FormalExpr$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/FormalExpr$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/FormalExpr$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/FormalExpr$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/FormalExpr$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/FormalExpr$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/FormalExpr$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/FormalExpr$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/FormalExpr$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/FormalExpr$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/FormalExpr$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/FormalExpr$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/FormalExpr$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/FormalExpr$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/FormalExpr$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/FormalExpr$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/FormalExpr$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.MathExpr", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/MathExpr.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/MathExpr.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/MathExpr.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/MathExpr.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/MathExpr.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/MathExpr.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/MathExpr.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/MathExpr.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/MathExpr.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/MathExpr.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/MathExpr.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/MathExpr.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/MathExpr.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/MathExpr.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/MathExpr.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/MathExpr.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/MathExpr.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/MathExpr.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/MathExpr.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Expression in a language to represent terms in HoTT and  trees representing them in prose, including partially collapsed trees.", "object" : "provingground\/MathExpr$.html", "members_object" : [{"label" : "ThatIsSP", "tail" : "", "member" : "provingground.MathExpr.ThatIsSP", "link" : "provingground\/MathExpr$.html#ThatIsSPextendsMathExpr.SententialPhrasewithProductwithSerializable", "kind" : "case class"}, {"label" : "DisjSP", "tail" : "", "member" : "provingground.MathExpr.DisjSP", "link" : "provingground\/MathExpr$.html#DisjSPextendsMathExpr.SententialPhrasewithProductwithSerializable", "kind" : "case class"}, {"label" : "ConjSP", "tail" : "", "member" : "provingground.MathExpr.ConjSP", "link" : "provingground\/MathExpr$.html#ConjSPextendsMathExpr.SententialPhrasewithProductwithSerializable", "kind" : "case class"}, {"label" : "NegSP", "tail" : "", "member" : "provingground.MathExpr.NegSP", "link" : "provingground\/MathExpr$.html#NegSPextendsMathExpr.SententialPhrasewithProductwithSerializable", "kind" : "case class"}, {"label" : "ExistentialSP", "tail" : "", "member" : "provingground.MathExpr.ExistentialSP", "link" : "provingground\/MathExpr$.html#ExistentialSPextendsMathExpr.SententialPhrasewithProductwithSerializable", "kind" : "case class"}, {"label" : "ForAllSP", "tail" : "", "member" : "provingground.MathExpr.ForAllSP", "link" : "provingground\/MathExpr$.html#ForAllSPextendsMathExpr.SententialPhrasewithProductwithSerializable", "kind" : "case class"}, {"label" : "VerbPP", "tail" : "", "member" : "provingground.MathExpr.VerbPP", "link" : "provingground\/MathExpr$.html#VerbPPextendsMathExpr.VerbPhrasewithProductwithSerializable", "kind" : "case class"}, {"label" : "IsPrep", "tail" : "", "member" : "provingground.MathExpr.IsPrep", "link" : "provingground\/MathExpr$.html#IsPrepextendsMathExpr.VerbPhrasewithProductwithSerializable", "kind" : "case class"}, {"label" : "IsSuchThat", "tail" : "", "member" : "provingground.MathExpr.IsSuchThat", "link" : "provingground\/MathExpr$.html#IsSuchThatextendsMathExpr.VerbPhrasewithProductwithSerializable", "kind" : "case class"}, {"label" : "IsAdjPrep", "tail" : "", "member" : "provingground.MathExpr.IsAdjPrep", "link" : "provingground\/MathExpr$.html#IsAdjPrepextendsMathExpr.VerbPhrasewithProductwithSerializable", "kind" : "case class"}, {"label" : "AreAdj", "tail" : "", "member" : "provingground.MathExpr.AreAdj", "link" : "provingground\/MathExpr$.html#AreAdjextendsMathExpr.VerbPhrasewithProductwithSerializable", "kind" : "case class"}, {"label" : "IsAdj", "tail" : "", "member" : "provingground.MathExpr.IsAdj", "link" : "provingground\/MathExpr$.html#IsAdjextendsMathExpr.VerbPhrasewithProductwithSerializable", "kind" : "case class"}, {"label" : "IsNoun", "tail" : "", "member" : "provingground.MathExpr.IsNoun", "link" : "provingground\/MathExpr$.html#IsNounextendsMathExpr.VerbPhrasewithProductwithSerializable", "kind" : "case class"}, {"label" : "VerbAdj", "tail" : "", "member" : "provingground.MathExpr.VerbAdj", "link" : "provingground\/MathExpr$.html#VerbAdjextendsMathExpr.VerbPhrasewithProductwithSerializable", "kind" : "case class"}, {"label" : "Core", "tail" : "", "member" : "provingground.MathExpr.Core", "link" : "provingground\/MathExpr$.html#CoreextendsMathExprwithProductwithSerializable", "kind" : "case class"}, {"label" : "DP", "tail" : "", "member" : "provingground.MathExpr.DP", "link" : "provingground\/MathExpr$.html#DPextendsMathExprwithProductwithSerializable", "kind" : "case class"}, {"label" : "SuchThat", "tail" : "", "member" : "provingground.MathExpr.SuchThat", "link" : "provingground\/MathExpr$.html#SuchThatextendsMathExpr.PostModifierwithProductwithSerializable", "kind" : "case class"}, {"label" : "PostModifier", "tail" : "", "member" : "provingground.MathExpr.PostModifier", "link" : "provingground\/MathExpr$.html#PostModifier=provingground.MathExpr", "kind" : "type"}, {"label" : "Variable", "tail" : "", "member" : "provingground.MathExpr.Variable", "link" : "provingground\/MathExpr$.html#VariableextendsMathExpr.QuantTermwithProductwithSerializable", "kind" : "case class"}, {"label" : "QuantTerm", "tail" : "", "member" : "provingground.MathExpr.QuantTerm", "link" : "provingground\/MathExpr$.html#QuantTerm=provingground.MathExpr", "kind" : "type"}, {"label" : "PP", "tail" : "", "member" : "provingground.MathExpr.PP", "link" : "provingground\/MathExpr$.html#PPextendsMathExpr.PostModifierwithProductwithSerializable", "kind" : "case class"}, {"label" : "JJPP", "tail" : "", "member" : "provingground.MathExpr.JJPP", "link" : "provingground\/MathExpr$.html#JJPPextendsMathExpr.AdjectivalPhrasewithProductwithSerializable", "kind" : "case class"}, {"label" : "JJ", "tail" : "", "member" : "provingground.MathExpr.JJ", "link" : "provingground\/MathExpr$.html#JJextendsMathExpr.AdjectivalPhrasewithProductwithSerializable", "kind" : "case class"}, {"label" : "AP", "tail" : "", "member" : "provingground.MathExpr.AP", "link" : "provingground\/MathExpr$.html#APextendsMathExpr.AdjectivalPhrasewithProductwithSerializable", "kind" : "case class"}, {"label" : "AdjectivalPhrase", "tail" : "", "member" : "provingground.MathExpr.AdjectivalPhrase", "link" : "provingground\/MathExpr$.html#AdjectivalPhrase=provingground.MathExpr", "kind" : "type"}, {"label" : "Determiner", "tail" : "", "member" : "provingground.MathExpr.Determiner", "link" : "provingground\/MathExpr$.html#Determiner=provingground.MathExpr", "kind" : "type"}, {"label" : "Determiner", "tail" : "", "member" : "provingground.MathExpr.Determiner", "link" : "provingground\/MathExpr$.html#Determiner", "kind" : "object"}, {"label" : "Preposition", "tail" : "", "member" : "provingground.MathExpr.Preposition", "link" : "provingground\/MathExpr$.html#Preposition=provingground.MathExpr", "kind" : "type"}, {"label" : "Prep", "tail" : "", "member" : "provingground.MathExpr.Prep", "link" : "provingground\/MathExpr$.html#PrepextendsMathExpr.PrepositionwithProductwithSerializable", "kind" : "case class"}, {"label" : "Preposition", "tail" : "", "member" : "provingground.MathExpr.Preposition", "link" : "provingground\/MathExpr$.html#Preposition", "kind" : "object"}, {"label" : "NPVP", "tail" : "", "member" : "provingground.MathExpr.NPVP", "link" : "provingground\/MathExpr$.html#NPVPextendsMathExpr.SententialPhrasewithProductwithSerializable", "kind" : "case class"}, {"label" : "VerbObj", "tail" : "", "member" : "provingground.MathExpr.VerbObj", "link" : "provingground\/MathExpr$.html#VerbObjextendsMathExpr.VerbPhrasewithProductwithSerializable", "kind" : "case class"}, {"label" : "NegVP", "tail" : "", "member" : "provingground.MathExpr.NegVP", "link" : "provingground\/MathExpr$.html#NegVPextendsMathExpr.VerbPhrasewithProductwithSerializable", "kind" : "case class"}, {"label" : "VB", "tail" : "", "member" : "provingground.MathExpr.VB", "link" : "provingground\/MathExpr$.html#VBextendsMathExpr.VerbPhrasewithProductwithSerializable", "kind" : "case class"}, {"label" : "VP", "tail" : "", "member" : "provingground.MathExpr.VP", "link" : "provingground\/MathExpr$.html#VPextendsMathExpr.VerbPhrasewithProductwithSerializable", "kind" : "case class"}, {"label" : "VerbPhrase", "tail" : "", "member" : "provingground.MathExpr.VerbPhrase", "link" : "provingground\/MathExpr$.html#VerbPhrase=provingground.MathExpr", "kind" : "type"}, {"label" : "DisjunctNP", "tail" : "", "member" : "provingground.MathExpr.DisjunctNP", "link" : "provingground\/MathExpr$.html#DisjunctNPextendsMathExpr.NounPhrasewithProductwithSerializable", "kind" : "case class"}, {"label" : "ConjunctNP", "tail" : "", "member" : "provingground.MathExpr.ConjunctNP", "link" : "provingground\/MathExpr$.html#ConjunctNPextendsMathExpr.NounPhrasewithProductwithSerializable", "kind" : "case class"}, {"label" : "Formula", "tail" : "", "member" : "provingground.MathExpr.Formula", "link" : "provingground\/MathExpr$.html#FormulaextendsMathExpr.NounPhrasewithProductwithSerializable", "kind" : "case class"}, {"label" : "NN", "tail" : "", "member" : "provingground.MathExpr.NN", "link" : "provingground\/MathExpr$.html#NNextendsMathExpr.NounPhrasewithProductwithSerializable", "kind" : "case class"}, {"label" : "NP", "tail" : "", "member" : "provingground.MathExpr.NP", "link" : "provingground\/MathExpr$.html#NPextendsMathExpr.NounPhrasewithProductwithSerializable", "kind" : "case class"}, {"label" : "NounPhrase", "tail" : "", "member" : "provingground.MathExpr.NounPhrase", "link" : "provingground\/MathExpr$.html#NounPhrase=provingground.MathExpr", "kind" : "type"}, {"label" : "IfThen", "tail" : "", "member" : "provingground.MathExpr.IfThen", "link" : "provingground\/MathExpr$.html#IfThenextendsMathExpr.SententialPhrasewithProductwithSerializable", "kind" : "case class"}, {"label" : "DisjuctSP", "tail" : "", "member" : "provingground.MathExpr.DisjuctSP", "link" : "provingground\/MathExpr$.html#DisjuctSPextendsMathExpr.SententialPhrasewithProductwithSerializable", "kind" : "case class"}, {"label" : "ConjuctSP", "tail" : "", "member" : "provingground.MathExpr.ConjuctSP", "link" : "provingground\/MathExpr$.html#ConjuctSPextendsMathExpr.SententialPhrasewithProductwithSerializable", "kind" : "case class"}, {"label" : "SP", "tail" : "", "member" : "provingground.MathExpr.SP", "link" : "provingground\/MathExpr$.html#SPextendsMathExpr.SententialPhrasewithProductwithSerializable", "kind" : "case class"}, {"label" : "SententialPhrase", "tail" : "", "member" : "provingground.MathExpr.SententialPhrase", "link" : "provingground\/MathExpr$.html#SententialPhrase=provingground.MathExpr", "kind" : "type"}, {"label" : "T", "tail" : "", "member" : "provingground.MathExpr.T", "link" : "provingground\/MathExpr$.html#T=edu.stanford.nlp.trees.Tree", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/MathExpr$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/MathExpr$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/MathExpr$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/MathExpr$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/MathExpr$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/MathExpr$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/MathExpr$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/MathExpr$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/MathExpr$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/MathExpr$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/MathExpr$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/MathExpr$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/MathExpr$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/MathExpr$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/MathExpr$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/MathExpr$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/MathExpr$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/MathExpr$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/MathExpr$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/MathExpr.html", "kind" : "trait"}, {"name" : "provingground.MathText", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/MathText.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/MathText.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/MathText.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/MathText.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/MathText.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/MathText.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/MathText.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/MathText.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/MathText.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/MathText.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/MathText.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/MathText.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/MathText.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/MathText.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/MathText.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/MathText.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/MathText.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/MathText.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/MathText.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "object" : "provingground\/MathText$.html", "members_object" : [{"label" : "VariableType", "tail" : "", "member" : "provingground.MathText.VariableType", "link" : "provingground\/MathText$.html#VariableTypeextendsProductwithSerializable", "kind" : "case class"}, {"label" : "CopulaDefinition", "tail" : "", "member" : "provingground.MathText.CopulaDefinition", "link" : "provingground\/MathText$.html#CopulaDefinitionextendsMathExpr.SententialPhrasewithProductwithSerializable", "kind" : "case class"}, {"label" : "BiEquationalDefinition", "tail" : "", "member" : "provingground.MathText.BiEquationalDefinition", "link" : "provingground\/MathText$.html#BiEquationalDefinitionextendsMathExpr.SententialPhrasewithProductwithSerializable", "kind" : "case class"}, {"label" : "CopulaDefinitionSP", "tail" : "", "member" : "provingground.MathText.CopulaDefinitionSP", "link" : "provingground\/MathText$.html#CopulaDefinitionSPextendsMathExpr.SententialPhrasewithProductwithSerializable", "kind" : "case class"}, {"label" : "BiEquationalDefinitionSP", "tail" : "", "member" : "provingground.MathText.BiEquationalDefinitionSP", "link" : "provingground\/MathText$.html#BiEquationalDefinitionSPextendsMathExpr.SententialPhrasewithProductwithSerializable", "kind" : "case class"}, {"label" : "CopulaDefiniendum", "tail" : "", "member" : "provingground.MathText.CopulaDefiniendum", "link" : "provingground\/MathText$.html#CopulaDefiniendumextendsMathExprwithProductwithSerializable", "kind" : "case class"}, {"label" : "CopulaDefiniendumNP", "tail" : "", "member" : "provingground.MathText.CopulaDefiniendumNP", "link" : "provingground\/MathText$.html#CopulaDefiniendumNPextendsMathExpr.NounPhrasewithProductwithSerializable", "kind" : "case class"}, {"label" : "BiImplicationDefiniendum", "tail" : "", "member" : "provingground.MathText.BiImplicationDefiniendum", "link" : "provingground\/MathText$.html#BiImplicationDefiniendumextendsMathExprwithProductwithSerializable", "kind" : "case class"}, {"label" : "BiImplicationDefiniendumSP", "tail" : "", "member" : "provingground.MathText.BiImplicationDefiniendumSP", "link" : "provingground\/MathText$.html#BiImplicationDefiniendumSPextendsMathExpr.SententialPhrasewithProductwithSerializable", "kind" : "case class"}, {"label" : "Assume", "tail" : "", "member" : "provingground.MathText.Assume", "link" : "provingground\/MathText$.html#AssumeextendsMathTextwithProductwithSerializable", "kind" : "case class"}, {"label" : "Assert", "tail" : "", "member" : "provingground.MathText.Assert", "link" : "provingground\/MathText$.html#AssertextendsMathTextwithProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/MathText$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/MathText$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/MathText$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/MathText$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/MathText$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/MathText$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/MathText$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/MathText$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/MathText$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/MathText$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/MathText$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/MathText$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/MathText$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/MathText$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/MathText$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/MathText$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/MathText$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/MathText$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/MathText$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/MathText.html", "kind" : "trait"}, {"name" : "provingground.NLPHoTT", "shortDescription" : "Parses prose to HoTT Gives context-free expressions, not actual typed terms.", "object" : "provingground\/NLPHoTT$.html", "members_object" : [{"label" : "parse", "tail" : ": (ProseTree) ⇒ Term", "member" : "provingground.NLPHoTT.parse", "link" : "provingground\/NLPHoTT$.html#parse:provingground.NlpProse.ProseTree=>provingground.TheoryTypes.Term", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/NLPHoTT$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/NLPHoTT$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/NLPHoTT$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/NLPHoTT$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/NLPHoTT$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/NLPHoTT$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/NLPHoTT$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/NLPHoTT$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/NLPHoTT$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/NLPHoTT$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/NLPHoTT$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/NLPHoTT$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/NLPHoTT$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/NLPHoTT$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/NLPHoTT$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/NLPHoTT$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/NLPHoTT$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/NLPHoTT$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/NLPHoTT$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.PennTrees", "shortDescription" : "", "object" : "provingground\/PennTrees$.html", "members_object" : [{"label" : "sentence", "tail" : "(children: Vector[Tree]): Tree", "member" : "provingground.PennTrees.sentence", "link" : "provingground\/PennTrees$.html#sentence(children:Vector[edu.stanford.nlp.trees.Tree]):edu.stanford.nlp.trees.Tree", "kind" : "def"}, {"label" : "mkTree", "tail" : "(children: Vector[Tree], tag: String, parent: Tree): Tree", "member" : "provingground.PennTrees.mkTree", "link" : "provingground\/PennTrees$.html#mkTree(children:Vector[edu.stanford.nlp.trees.Tree],tag:String,parent:edu.stanford.nlp.trees.Tree):edu.stanford.nlp.trees.Tree", "kind" : "def"}, {"label" : "ShowString", "tail" : "", "member" : "provingground.PennTrees.ShowString", "link" : "provingground\/PennTrees$.html#ShowStringextendsAnyRef", "kind" : "implicit class"}, {"label" : "ShowModel", "tail" : "", "member" : "provingground.PennTrees.ShowModel", "link" : "provingground\/PennTrees$.html#ShowModelextendsAnyRef", "kind" : "implicit class"}, {"label" : "model", "tail" : "(t: Tree): TreeModel", "member" : "provingground.PennTrees.model", "link" : "provingground\/PennTrees$.html#model(t:edu.stanford.nlp.trees.Tree):provingground.TreeModel", "kind" : "def"}, {"label" : "Node", "tail" : "", "member" : "provingground.PennTrees.Node", "link" : "provingground\/PennTrees$.html#Node", "kind" : "object"}, {"label" : "Leaf", "tail" : "", "member" : "provingground.PennTrees.Leaf", "link" : "provingground\/PennTrees$.html#Leaf", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/PennTrees$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/PennTrees$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/PennTrees$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/PennTrees$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/PennTrees$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/PennTrees$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/PennTrees$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/PennTrees$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/PennTrees$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/PennTrees$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/PennTrees$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/PennTrees$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/PennTrees$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/PennTrees$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/PennTrees$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/PennTrees$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/PennTrees$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/PennTrees$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/PennTrees$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.Raw", "shortDescription" : "An unparsed tree, the default parse for iterative debugging.", "object" : "provingground\/Raw$.html", "members_object" : [{"label" : "translator", "tail" : ": Simple[Tree, MathExpr]", "member" : "provingground.Raw.translator", "link" : "provingground\/Raw$.html#translator:provingground.Translator.Simple[edu.stanford.nlp.trees.Tree,provingground.MathExpr]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/Raw$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/Raw$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/Raw$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/Raw$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/Raw$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/Raw$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/Raw$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/Raw$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/Raw$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/Raw$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/Raw$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/Raw$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/Raw$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/Raw$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/Raw$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/Raw$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/Raw$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/Raw$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/Raw$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"member" : "provingground.Raw#<init>", "error" : "unsupported entity"}, {"label" : "model", "tail" : ": TreeModel", "member" : "provingground.Raw.model", "link" : "provingground\/Raw.html#model:provingground.TreeModel", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/Raw.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/Raw.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/Raw.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/Raw.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/Raw.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/Raw.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/Raw.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/Raw.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/Raw.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/Raw.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/Raw.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/Raw.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/Raw.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/Raw.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/Raw.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/Raw.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/Raw.html", "kind" : "case class"}, {"name" : "provingground.Script", "shortDescription" : "", "object" : "provingground\/Script$.html", "members_object" : [{"label" : "parse", "tail" : "(s: String): Tree", "member" : "provingground.Script.parse", "link" : "provingground\/Script$.html#parse(s:String):edu.stanford.nlp.trees.Tree", "kind" : "def"}, {"label" : "saveQuote", "tail" : "(s: String): Unit", "member" : "provingground.Script.saveQuote", "link" : "provingground\/Script$.html#saveQuote(s:String):Unit", "kind" : "def"}, {"label" : "saveCode", "tail" : "(s: String): Unit", "member" : "provingground.Script.saveCode", "link" : "provingground\/Script$.html#saveCode(s:String):Unit", "kind" : "def"}, {"label" : "save", "tail" : "(s: String): Unit", "member" : "provingground.Script.save", "link" : "provingground\/Script$.html#save(s:String):Unit", "kind" : "def"}, {"label" : "file", "tail" : ": Path", "member" : "provingground.Script.file", "link" : "provingground\/Script$.html#file:ammonite.ops.Path", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/Script$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/Script$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/Script$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/Script$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/Script$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/Script$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/Script$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/Script$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/Script$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/Script$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/Script$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/Script$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/Script$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/Script$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/Script$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/Script$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/Script$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/Script$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/Script$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.StanfordParser", "shortDescription" : "", "object" : "provingground\/StanfordParser$.html", "members_object" : [{"label" : "texParse", "tail" : "(s: String): Tree", "member" : "provingground.StanfordParser.texParse", "link" : "provingground\/StanfordParser$.html#texParse(s:String):edu.stanford.nlp.trees.Tree", "kind" : "def"}, {"label" : "TeXParsed", "tail" : "", "member" : "provingground.StanfordParser.TeXParsed", "link" : "provingground\/StanfordParser$.html#TeXParsedextendsProductwithSerializable", "kind" : "case class"}, {"label" : "texDisplay", "tail" : "(s: String): MatchIterator", "member" : "provingground.StanfordParser.texDisplay", "link" : "provingground\/StanfordParser$.html#texDisplay(s:String):scala.util.matching.Regex.MatchIterator", "kind" : "def"}, {"label" : "texInline", "tail" : "(s: String): MatchIterator", "member" : "provingground.StanfordParser.texInline", "link" : "provingground\/StanfordParser$.html#texInline(s:String):scala.util.matching.Regex.MatchIterator", "kind" : "def"}, {"label" : "parse", "tail" : "(s: String): Tree", "member" : "provingground.StanfordParser.parse", "link" : "provingground\/StanfordParser$.html#parse(s:String):edu.stanford.nlp.trees.Tree", "kind" : "def"}, {"label" : "words", "tail" : "(s: String): Buffer[Word]", "member" : "provingground.StanfordParser.words", "link" : "provingground\/StanfordParser$.html#words(s:String):scala.collection.mutable.Buffer[edu.stanford.nlp.ling.Word]", "kind" : "def"}, {"label" : "coreLabels", "tail" : "(s: String): List[CoreLabel]", "member" : "provingground.StanfordParser.coreLabels", "link" : "provingground\/StanfordParser$.html#coreLabels(s:String):java.util.List[edu.stanford.nlp.ling.CoreLabel]", "kind" : "def"}, {"label" : "tokenizerFactory", "tail" : ": TokenizerFactory[CoreLabel]", "member" : "provingground.StanfordParser.tokenizerFactory", "link" : "provingground\/StanfordParser$.html#tokenizerFactory:edu.stanford.nlp.process.TokenizerFactory[edu.stanford.nlp.ling.CoreLabel]", "kind" : "val"}, {"label" : "tagger", "tail" : ": MaxentTagger", "member" : "provingground.StanfordParser.tagger", "link" : "provingground\/StanfordParser$.html#tagger:edu.stanford.nlp.tagger.maxent.MaxentTagger", "kind" : "val"}, {"label" : "lp", "tail" : ": LexicalizedParser", "member" : "provingground.StanfordParser.lp", "link" : "provingground\/StanfordParser$.html#lp:edu.stanford.nlp.parser.lexparser.LexicalizedParser", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/StanfordParser$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/StanfordParser$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/StanfordParser$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/StanfordParser$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/StanfordParser$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/StanfordParser$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/StanfordParser$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/StanfordParser$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/StanfordParser$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/StanfordParser$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/StanfordParser$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/StanfordParser$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/StanfordParser$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/StanfordParser$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/StanfordParser$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/StanfordParser$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/StanfordParser$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/StanfordParser$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/StanfordParser$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.TheoryTypes", "shortDescription" : "", "object" : "provingground\/TheoryTypes$.html", "members_object" : [{"label" : "Para", "tail" : "", "member" : "provingground.TheoryTypes.Para", "link" : "provingground\/TheoryTypes$.html#ParaextendsTheoryTypes.TheoryTypwithProductwithSerializable", "kind" : "case class"}, {"label" : "Method", "tail" : "", "member" : "provingground.TheoryTypes.Method", "link" : "provingground\/TheoryTypes$.html#MethodextendsAnyRef", "kind" : "trait"}, {"label" : "Using", "tail" : "", "member" : "provingground.TheoryTypes.Using", "link" : "provingground\/TheoryTypes$.html#UsingextendsTheoryTypes.ClaimwithProductwithSerializable", "kind" : "case class"}, {"label" : "Claim", "tail" : "", "member" : "provingground.TheoryTypes.Claim", "link" : "provingground\/TheoryTypes$.html#ClaimextendsTheoryTypes.TheoryTyp", "kind" : "trait"}, {"label" : "TextTyp", "tail" : "", "member" : "provingground.TheoryTypes.TextTyp", "link" : "provingground\/TheoryTypes$.html#TextTypextendsTheoryTypes.TheoryTypwithProductwithSerializable", "kind" : "case class"}, {"label" : "TheoryTyp", "tail" : "", "member" : "provingground.TheoryTypes.TheoryTyp", "link" : "provingground\/TheoryTypes$.html#TheoryTypextendsHoTT.SmallTyp", "kind" : "trait"}, {"label" : "ExpressionParser", "tail" : "", "member" : "provingground.TheoryTypes.ExpressionParser", "link" : "provingground\/TheoryTypes$.html#ExpressionParserextendsJavaTokenParsers", "kind" : "class"}, {"label" : "RealSym", "tail" : "", "member" : "provingground.TheoryTypes.RealSym", "link" : "provingground\/TheoryTypes$.html#RealSymextendsTheoryTypes.TermwithProductwithSerializable", "kind" : "case class"}, {"label" : "IntSym", "tail" : "", "member" : "provingground.TheoryTypes.IntSym", "link" : "provingground\/TheoryTypes$.html#IntSymextendsTheoryTypes.TermwithProductwithSerializable", "kind" : "case class"}, {"label" : "Underscore", "tail" : "", "member" : "provingground.TheoryTypes.Underscore", "link" : "provingground\/TheoryTypes$.html#Underscore", "kind" : "object"}, {"label" : "LambdaTerm", "tail" : "", "member" : "provingground.TheoryTypes.LambdaTerm", "link" : "provingground\/TheoryTypes$.html#LambdaTermextendsTheoryTypes.TermwithProductwithSerializable", "kind" : "case class"}, {"label" : "TermSym", "tail" : "", "member" : "provingground.TheoryTypes.TermSym", "link" : "provingground\/TheoryTypes$.html#TermSym[A]extendsTheoryTypes.TermwithProductwithSerializable", "kind" : "case class"}, {"label" : "SupScript", "tail" : "", "member" : "provingground.TheoryTypes.SupScript", "link" : "provingground\/TheoryTypes$.html#SupScriptextendsTheoryTypes.TermwithProductwithSerializable", "kind" : "case class"}, {"label" : "SubScript", "tail" : "", "member" : "provingground.TheoryTypes.SubScript", "link" : "provingground\/TheoryTypes$.html#SubScriptextendsTheoryTypes.TermwithProductwithSerializable", "kind" : "case class"}, {"label" : "Braces", "tail" : "", "member" : "provingground.TheoryTypes.Braces", "link" : "provingground\/TheoryTypes$.html#BracesextendsTheoryTypes.TermwithProductwithSerializable", "kind" : "case class"}, {"label" : "BigOpTerm", "tail" : "", "member" : "provingground.TheoryTypes.BigOpTerm", "link" : "provingground\/TheoryTypes$.html#BigOpTermextendsTheoryTypes.TermwithProductwithSerializable", "kind" : "case class"}, {"label" : "BinOpTerm", "tail" : "", "member" : "provingground.TheoryTypes.BinOpTerm", "link" : "provingground\/TheoryTypes$.html#BinOpTermextendsTheoryTypes.TermwithProductwithSerializable", "kind" : "case class"}, {"label" : "Arrow", "tail" : "", "member" : "provingground.TheoryTypes.Arrow", "link" : "provingground\/TheoryTypes$.html#ArrowextendsTheoryTypes.ExpressionwithProductwithSerializable", "kind" : "case class"}, {"label" : "FuncTypTerm", "tail" : "", "member" : "provingground.TheoryTypes.FuncTypTerm", "link" : "provingground\/TheoryTypes$.html#FuncTypTermextendsTheoryTypes.TermwithProductwithSerializable", "kind" : "case class"}, {"label" : "MultiApply", "tail" : "", "member" : "provingground.TheoryTypes.MultiApply", "link" : "provingground\/TheoryTypes$.html#MultiApply[L]extendsTheoryTypes.TermwithProductwithSerializable", "kind" : "case class"}, {"label" : "Apply", "tail" : "", "member" : "provingground.TheoryTypes.Apply", "link" : "provingground\/TheoryTypes$.html#ApplyextendsTheoryTypes.TermwithProductwithSerializable", "kind" : "case class"}, {"label" : "Equality", "tail" : "", "member" : "provingground.TheoryTypes.Equality", "link" : "provingground\/TheoryTypes$.html#EqualityextendsTheoryTypes.TermwithProductwithSerializable", "kind" : "case class"}, {"label" : "Prod", "tail" : "", "member" : "provingground.TheoryTypes.Prod", "link" : "provingground\/TheoryTypes$.html#ProdextendsTheoryTypes.TermwithProductwithSerializable", "kind" : "case class"}, {"label" : "TypedTerm", "tail" : "", "member" : "provingground.TheoryTypes.TypedTerm", "link" : "provingground\/TheoryTypes$.html#TypedTermextendsTheoryTypes.TermwithProductwithSerializable", "kind" : "case class"}, {"label" : "Colon", "tail" : "", "member" : "provingground.TheoryTypes.Colon", "link" : "provingground\/TheoryTypes$.html#ColonextendsTheoryTypes.ExpressionwithProductwithSerializable", "kind" : "case class"}, {"label" : "ParaTerm", "tail" : "", "member" : "provingground.TheoryTypes.ParaTerm", "link" : "provingground\/TheoryTypes$.html#ParaTermextendsTheoryTypes.TermwithProductwithSerializable", "kind" : "case class"}, {"label" : "Conjunct", "tail" : "", "member" : "provingground.TheoryTypes.Conjunct", "link" : "provingground\/TheoryTypes$.html#ConjunctextendsTheoryTypes.TermwithProductwithSerializable", "kind" : "case class"}, {"label" : "Is", "tail" : "", "member" : "provingground.TheoryTypes.Is", "link" : "provingground\/TheoryTypes$.html#IsextendsTheoryTypes.TermwithProductwithSerializable", "kind" : "case class"}, {"label" : "Or", "tail" : "", "member" : "provingground.TheoryTypes.Or", "link" : "provingground\/TheoryTypes$.html#OrextendsTheoryTypes.TermwithProductwithSerializable", "kind" : "case class"}, {"label" : "And", "tail" : "", "member" : "provingground.TheoryTypes.And", "link" : "provingground\/TheoryTypes$.html#AndextendsTheoryTypes.TermwithProductwithSerializable", "kind" : "case class"}, {"label" : "Term", "tail" : "", "member" : "provingground.TheoryTypes.Term", "link" : "provingground\/TheoryTypes$.html#TermextendsTheoryTypes.Expression", "kind" : "trait"}, {"label" : "Expression", "tail" : "", "member" : "provingground.TheoryTypes.Expression", "link" : "provingground\/TheoryTypes$.html#ExpressionextendsAnyRef", "kind" : "trait"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/TheoryTypes$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/TheoryTypes$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/TheoryTypes$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/TheoryTypes$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/TheoryTypes$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/TheoryTypes$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/TheoryTypes$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/TheoryTypes$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/TheoryTypes$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/TheoryTypes$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/TheoryTypes$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/TheoryTypes$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/TheoryTypes$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/TheoryTypes$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/TheoryTypes$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/TheoryTypes$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/TheoryTypes$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/TheoryTypes$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/TheoryTypes$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.TreeModel", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/TreeModel.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/TreeModel.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/TreeModel.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/TreeModel.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/TreeModel.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/TreeModel.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/TreeModel.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/TreeModel.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/TreeModel.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/TreeModel.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/TreeModel.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/TreeModel.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/TreeModel.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/TreeModel.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/TreeModel.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/TreeModel.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/TreeModel.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/TreeModel.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/TreeModel.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "object" : "provingground\/TreeModel$.html", "members_object" : [{"label" : "Node", "tail" : "", "member" : "provingground.TreeModel.Node", "link" : "provingground\/TreeModel$.html#NodeextendsTreeModelwithProductwithSerializable", "kind" : "case class"}, {"label" : "Leaf", "tail" : "", "member" : "provingground.TreeModel.Leaf", "link" : "provingground\/TreeModel$.html#LeafextendsTreeModelwithProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/TreeModel$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/TreeModel$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/TreeModel$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/TreeModel$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/TreeModel$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/TreeModel$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/TreeModel$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/TreeModel$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/TreeModel$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/TreeModel$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/TreeModel$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/TreeModel$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/TreeModel$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/TreeModel$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/TreeModel$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/TreeModel$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/TreeModel$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/TreeModel$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/TreeModel$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/TreeModel.html", "kind" : "trait"}, {"name" : "provingground.TreePatterns", "shortDescription" : "", "object" : "provingground\/TreePatterns$.html", "members_object" : [{"label" : "DropNP", "tail" : "", "member" : "provingground.TreePatterns.DropNP", "link" : "provingground\/TreePatterns$.html#DropNP", "kind" : "object"}, {"label" : "DropRoot", "tail" : "", "member" : "provingground.TreePatterns.DropRoot", "link" : "provingground\/TreePatterns$.html#DropRoot", "kind" : "object"}, {"label" : "IN", "tail" : "", "member" : "provingground.TreePatterns.IN", "link" : "provingground\/TreePatterns$.html#IN", "kind" : "object"}, {"label" : "JJ", "tail" : "", "member" : "provingground.TreePatterns.JJ", "link" : "provingground\/TreePatterns$.html#JJ", "kind" : "object"}, {"label" : "VB", "tail" : "", "member" : "provingground.TreePatterns.VB", "link" : "provingground\/TreePatterns$.html#VB", "kind" : "object"}, {"label" : "ConjunctNP", "tail" : "", "member" : "provingground.TreePatterns.ConjunctNP", "link" : "provingground\/TreePatterns$.html#ConjunctNP", "kind" : "object"}, {"label" : "DisjunctNP", "tail" : "", "member" : "provingground.TreePatterns.DisjunctNP", "link" : "provingground\/TreePatterns$.html#DisjunctNP", "kind" : "object"}, {"label" : "NNP", "tail" : "", "member" : "provingground.TreePatterns.NNP", "link" : "provingground\/TreePatterns$.html#NNP", "kind" : "object"}, {"label" : "NN", "tail" : "", "member" : "provingground.TreePatterns.NN", "link" : "provingground\/TreePatterns$.html#NN", "kind" : "object"}, {"label" : "NotVP", "tail" : "", "member" : "provingground.TreePatterns.NotVP", "link" : "provingground\/TreePatterns$.html#NotVP", "kind" : "object"}, {"label" : "isModalDo", "tail" : ": (Tree) ⇒ Boolean", "member" : "provingground.TreePatterns.isModalDo", "link" : "provingground\/TreePatterns$.html#isModalDo:edu.stanford.nlp.trees.Tree=>Boolean", "kind" : "val"}, {"label" : "DPBaseQuantZero", "tail" : "", "member" : "provingground.TreePatterns.DPBaseQuantZero", "link" : "provingground\/TreePatterns$.html#DPBaseQuantZero", "kind" : "object"}, {"label" : "DPBaseQuant", "tail" : "", "member" : "provingground.TreePatterns.DPBaseQuant", "link" : "provingground\/TreePatterns$.html#DPBaseQuant", "kind" : "object"}, {"label" : "DPQuant", "tail" : "", "member" : "provingground.TreePatterns.DPQuant", "link" : "provingground\/TreePatterns$.html#DPQuant", "kind" : "object"}, {"label" : "DPBaseZero", "tail" : "", "member" : "provingground.TreePatterns.DPBaseZero", "link" : "provingground\/TreePatterns$.html#DPBaseZero", "kind" : "object"}, {"label" : "DPBase", "tail" : "", "member" : "provingground.TreePatterns.DPBase", "link" : "provingground\/TreePatterns$.html#DPBase", "kind" : "object"}, {"label" : "npvpPattern", "tail" : ": Pattern[Tree, II]", "member" : "provingground.TreePatterns.npvpPattern", "link" : "provingground\/TreePatterns$.html#npvpPattern:provingground.Translator.Pattern[edu.stanford.nlp.trees.Tree,provingground.Functors.II]", "kind" : "val"}, {"label" : "Purge", "tail" : "", "member" : "provingground.TreePatterns.Purge", "link" : "provingground\/TreePatterns$.html#Purge", "kind" : "object"}, {"label" : "SimpleNPVP", "tail" : "", "member" : "provingground.TreePatterns.SimpleNPVP", "link" : "provingground\/TreePatterns$.html#SimpleNPVP", "kind" : "object"}, {"label" : "NPWH", "tail" : "", "member" : "provingground.TreePatterns.NPWH", "link" : "provingground\/TreePatterns$.html#NPWH", "kind" : "object"}, {"label" : "NPPP", "tail" : "", "member" : "provingground.TreePatterns.NPPP", "link" : "provingground\/TreePatterns$.html#NPPP", "kind" : "object"}, {"label" : "PP", "tail" : "", "member" : "provingground.TreePatterns.PP", "link" : "provingground\/TreePatterns$.html#PP", "kind" : "object"}, {"label" : "VerbPP", "tail" : "", "member" : "provingground.TreePatterns.VerbPP", "link" : "provingground\/TreePatterns$.html#VerbPP", "kind" : "object"}, {"label" : "JJPP", "tail" : "", "member" : "provingground.TreePatterns.JJPP", "link" : "provingground\/TreePatterns$.html#JJPP", "kind" : "object"}, {"label" : "VerbNotAdj", "tail" : "", "member" : "provingground.TreePatterns.VerbNotAdj", "link" : "provingground\/TreePatterns$.html#VerbNotAdj", "kind" : "object"}, {"label" : "VerbAdj", "tail" : "", "member" : "provingground.TreePatterns.VerbAdj", "link" : "provingground\/TreePatterns$.html#VerbAdj", "kind" : "object"}, {"label" : "VerbNotObj", "tail" : "", "member" : "provingground.TreePatterns.VerbNotObj", "link" : "provingground\/TreePatterns$.html#VerbNotObj", "kind" : "object"}, {"label" : "VerbObj", "tail" : "", "member" : "provingground.TreePatterns.VerbObj", "link" : "provingground\/TreePatterns$.html#VerbObj", "kind" : "object"}, {"label" : "NPVP", "tail" : "", "member" : "provingground.TreePatterns.NPVP", "link" : "provingground\/TreePatterns$.html#NPVP", "kind" : "object"}, {"label" : "NP", "tail" : "", "member" : "provingground.TreePatterns.NP", "link" : "provingground\/TreePatterns$.html#NP", "kind" : "object"}, {"label" : "VP", "tail" : "", "member" : "provingground.TreePatterns.VP", "link" : "provingground\/TreePatterns$.html#VP", "kind" : "object"}, {"label" : "Test", "tail" : "", "member" : "provingground.TreePatterns.Test", "link" : "provingground\/TreePatterns$.html#Test", "kind" : "object"}, {"label" : "ifPattern", "tail" : ": Pattern[Tree, IV]", "member" : "provingground.TreePatterns.ifPattern", "link" : "provingground\/TreePatterns$.html#ifPattern:provingground.Translator.Pattern[edu.stanford.nlp.trees.Tree,provingground.Functors.IV]", "kind" : "val"}, {"label" : "IfTreeSent", "tail" : "", "member" : "provingground.TreePatterns.IfTreeSent", "link" : "provingground\/TreePatterns$.html#IfTreeSent", "kind" : "object"}, {"label" : "IfTree", "tail" : "", "member" : "provingground.TreePatterns.IfTree", "link" : "provingground\/TreePatterns$.html#IfTree", "kind" : "object"}, {"label" : "ThenSent", "tail" : "", "member" : "provingground.TreePatterns.ThenSent", "link" : "provingground\/TreePatterns$.html#ThenSent", "kind" : "object"}, {"label" : "Then", "tail" : "", "member" : "provingground.TreePatterns.Then", "link" : "provingground\/TreePatterns$.html#Then", "kind" : "object"}, {"label" : "IfClause", "tail" : "", "member" : "provingground.TreePatterns.IfClause", "link" : "provingground\/TreePatterns$.html#IfClause", "kind" : "object"}, {"label" : "word", "tail" : "", "member" : "provingground.TreePatterns.word", "link" : "provingground\/TreePatterns$.html#word", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/TreePatterns$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/TreePatterns$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/TreePatterns$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/TreePatterns$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/TreePatterns$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/TreePatterns$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/TreePatterns$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/TreePatterns$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/TreePatterns$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/TreePatterns$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/TreePatterns$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/TreePatterns$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/TreePatterns$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/TreePatterns$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/TreePatterns$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/TreePatterns$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/TreePatterns$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/TreePatterns$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/TreePatterns$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.TreeToMath", "shortDescription" : "", "object" : "provingground\/TreeToMath$.html", "members_object" : [{"label" : "mathExprTree", "tail" : ": Translator.OrElse[Tree, MathExpr]", "member" : "provingground.TreeToMath.mathExprTree", "link" : "provingground\/TreeToMath$.html#mathExprTree:provingground.Translator.OrElse[edu.stanford.nlp.trees.Tree,provingground.MathExpr]", "kind" : "val"}, {"label" : "mathExpr", "tail" : ": Translator.OrElse[Tree, MathExpr]", "member" : "provingground.TreeToMath.mathExpr", "link" : "provingground\/TreeToMath$.html#mathExpr:provingground.Translator.OrElse[edu.stanford.nlp.trees.Tree,provingground.MathExpr]", "kind" : "val"}, {"label" : "notvp", "tail" : ": Junction[Tree, MathExpr, Id]", "member" : "provingground.TreeToMath.notvp", "link" : "provingground\/TreeToMath$.html#notvp:provingground.Translator.Junction[edu.stanford.nlp.trees.Tree,provingground.MathExpr,cats.Id]", "kind" : "val"}, {"label" : "ifThen", "tail" : ": Junction[Tree, MathExpr, II]", "member" : "provingground.TreeToMath.ifThen", "link" : "provingground\/TreeToMath$.html#ifThen:provingground.Translator.Junction[edu.stanford.nlp.trees.Tree,provingground.MathExpr,provingground.Functors.II]", "kind" : "val"}, {"label" : "purge", "tail" : ": Junction[Tree, MathExpr, Id]", "member" : "provingground.TreeToMath.purge", "link" : "provingground\/TreeToMath$.html#purge:provingground.Translator.Junction[edu.stanford.nlp.trees.Tree,provingground.MathExpr,cats.Id]", "kind" : "val"}, {"label" : "dropNP", "tail" : ": Junction[Tree, MathExpr, Vector]", "member" : "provingground.TreeToMath.dropNP", "link" : "provingground\/TreeToMath$.html#dropNP:provingground.Translator.Junction[edu.stanford.nlp.trees.Tree,provingground.MathExpr,Vector]", "kind" : "val"}, {"label" : "dropRoot", "tail" : ": Junction[Tree, MathExpr, Id]", "member" : "provingground.TreeToMath.dropRoot", "link" : "provingground\/TreeToMath$.html#dropRoot:provingground.Translator.Junction[edu.stanford.nlp.trees.Tree,provingground.MathExpr,cats.Id]", "kind" : "val"}, {"label" : "and", "tail" : ": Junction[Tree, MathExpr, Vector]", "member" : "provingground.TreeToMath.and", "link" : "provingground\/TreeToMath$.html#and:provingground.Translator.Junction[edu.stanford.nlp.trees.Tree,provingground.MathExpr,Vector]", "kind" : "val"}, {"label" : "or", "tail" : ": Junction[Tree, MathExpr, Vector]", "member" : "provingground.TreeToMath.or", "link" : "provingground\/TreeToMath$.html#or:provingground.Translator.Junction[edu.stanford.nlp.trees.Tree,provingground.MathExpr,Vector]", "kind" : "val"}, {"label" : "verbpp", "tail" : ": Junction[Tree, MathExpr, IV]", "member" : "provingground.TreeToMath.verbpp", "link" : "provingground\/TreeToMath$.html#verbpp:provingground.Translator.Junction[edu.stanford.nlp.trees.Tree,provingground.MathExpr,provingground.Functors.IV]", "kind" : "val"}, {"label" : "jjpp", "tail" : ": Junction[Tree, MathExpr, IV]", "member" : "provingground.TreeToMath.jjpp", "link" : "provingground\/TreeToMath$.html#jjpp:provingground.Translator.Junction[edu.stanford.nlp.trees.Tree,provingground.MathExpr,provingground.Functors.IV]", "kind" : "val"}, {"label" : "addST", "tail" : ": Junction[Tree, MathExpr, II]", "member" : "provingground.TreeToMath.addST", "link" : "provingground\/TreeToMath$.html#addST:provingground.Translator.Junction[edu.stanford.nlp.trees.Tree,provingground.MathExpr,provingground.Functors.II]", "kind" : "val"}, {"label" : "addPP", "tail" : ": Junction[Tree, MathExpr, II]", "member" : "provingground.TreeToMath.addPP", "link" : "provingground\/TreeToMath$.html#addPP:provingground.Translator.Junction[edu.stanford.nlp.trees.Tree,provingground.MathExpr,provingground.Functors.II]", "kind" : "val"}, {"label" : "dpBaseQuantZero", "tail" : ": Junction[Tree, MathExpr, VII]", "member" : "provingground.TreeToMath.dpBaseQuantZero", "link" : "provingground\/TreeToMath$.html#dpBaseQuantZero:provingground.Translator.Junction[edu.stanford.nlp.trees.Tree,provingground.MathExpr,provingground.Functors.VII]", "kind" : "val"}, {"label" : "dpBaseQuant", "tail" : ": Junction[Tree, MathExpr, SVII]", "member" : "provingground.TreeToMath.dpBaseQuant", "link" : "provingground\/TreeToMath$.html#dpBaseQuant:provingground.Translator.Junction[edu.stanford.nlp.trees.Tree,provingground.MathExpr,provingground.Functors.SVII]", "kind" : "val"}, {"label" : "dpQuant", "tail" : ": Junction[Tree, MathExpr, SVI]", "member" : "provingground.TreeToMath.dpQuant", "link" : "provingground\/TreeToMath$.html#dpQuant:provingground.Translator.Junction[edu.stanford.nlp.trees.Tree,provingground.MathExpr,provingground.Functors.SVI]", "kind" : "val"}, {"label" : "dpBaseZero", "tail" : ": Junction[Tree, MathExpr, VO]", "member" : "provingground.TreeToMath.dpBaseZero", "link" : "provingground\/TreeToMath$.html#dpBaseZero:provingground.Translator.Junction[edu.stanford.nlp.trees.Tree,provingground.MathExpr,provingground.Functors.VO]", "kind" : "val"}, {"label" : "dpBase", "tail" : ": Junction[Tree, MathExpr, SVO]", "member" : "provingground.TreeToMath.dpBase", "link" : "provingground\/TreeToMath$.html#dpBase:provingground.Translator.Junction[edu.stanford.nlp.trees.Tree,provingground.MathExpr,provingground.Functors.SVO]", "kind" : "val"}, {"label" : "prep", "tail" : ": Junction[Tree, MathExpr, S]", "member" : "provingground.TreeToMath.prep", "link" : "provingground\/TreeToMath$.html#prep:provingground.Translator.Junction[edu.stanford.nlp.trees.Tree,provingground.MathExpr,provingground.Functors.S]", "kind" : "val"}, {"label" : "jj", "tail" : ": Junction[Tree, MathExpr, S]", "member" : "provingground.TreeToMath.jj", "link" : "provingground\/TreeToMath$.html#jj:provingground.Translator.Junction[edu.stanford.nlp.trees.Tree,provingground.MathExpr,provingground.Functors.S]", "kind" : "val"}, {"label" : "vb", "tail" : ": Junction[Tree, MathExpr, S]", "member" : "provingground.TreeToMath.vb", "link" : "provingground\/TreeToMath$.html#vb:provingground.Translator.Junction[edu.stanford.nlp.trees.Tree,provingground.MathExpr,provingground.Functors.S]", "kind" : "val"}, {"label" : "fmla", "tail" : ": Junction[Tree, MathExpr, S]", "member" : "provingground.TreeToMath.fmla", "link" : "provingground\/TreeToMath$.html#fmla:provingground.Translator.Junction[edu.stanford.nlp.trees.Tree,provingground.MathExpr,provingground.Functors.S]", "kind" : "val"}, {"label" : "nn", "tail" : ": Junction[Tree, MathExpr, S]", "member" : "provingground.TreeToMath.nn", "link" : "provingground\/TreeToMath$.html#nn:provingground.Translator.Junction[edu.stanford.nlp.trees.Tree,provingground.MathExpr,provingground.Functors.S]", "kind" : "val"}, {"label" : "pp", "tail" : ": Junction[Tree, MathExpr, II]", "member" : "provingground.TreeToMath.pp", "link" : "provingground\/TreeToMath$.html#pp:provingground.Translator.Junction[edu.stanford.nlp.trees.Tree,provingground.MathExpr,provingground.Functors.II]", "kind" : "val"}, {"label" : "verbNotAdj", "tail" : ": Junction[Tree, MathExpr, II]", "member" : "provingground.TreeToMath.verbNotAdj", "link" : "provingground\/TreeToMath$.html#verbNotAdj:provingground.Translator.Junction[edu.stanford.nlp.trees.Tree,provingground.MathExpr,provingground.Functors.II]", "kind" : "val"}, {"label" : "verbNotObj", "tail" : ": Junction[Tree, MathExpr, II]", "member" : "provingground.TreeToMath.verbNotObj", "link" : "provingground\/TreeToMath$.html#verbNotObj:provingground.Translator.Junction[edu.stanford.nlp.trees.Tree,provingground.MathExpr,provingground.Functors.II]", "kind" : "val"}, {"label" : "verbAdj", "tail" : ": Junction[Tree, MathExpr, II]", "member" : "provingground.TreeToMath.verbAdj", "link" : "provingground\/TreeToMath$.html#verbAdj:provingground.Translator.Junction[edu.stanford.nlp.trees.Tree,provingground.MathExpr,provingground.Functors.II]", "kind" : "val"}, {"label" : "verbObj", "tail" : ": Junction[Tree, MathExpr, II]", "member" : "provingground.TreeToMath.verbObj", "link" : "provingground\/TreeToMath$.html#verbObj:provingground.Translator.Junction[edu.stanford.nlp.trees.Tree,provingground.MathExpr,provingground.Functors.II]", "kind" : "val"}, {"label" : "npvp", "tail" : ": Junction[Tree, MathExpr, II]", "member" : "provingground.TreeToMath.npvp", "link" : "provingground\/TreeToMath$.html#npvp:provingground.Translator.Junction[edu.stanford.nlp.trees.Tree,provingground.MathExpr,provingground.Functors.II]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/TreeToMath$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/TreeToMath$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/TreeToMath$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/TreeToMath$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/TreeToMath$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/TreeToMath$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/TreeToMath$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/TreeToMath$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/TreeToMath$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/TreeToMath$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/TreeToMath$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/TreeToMath$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/TreeToMath$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/TreeToMath$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/TreeToMath$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/TreeToMath$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/TreeToMath$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/TreeToMath$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/TreeToMath$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.XmlParse", "shortDescription" : "", "object" : "provingground\/XmlParse$.html", "members_object" : [{"label" : "proseTree", "tail" : "(filename: String): ProseTree", "member" : "provingground.XmlParse.proseTree", "link" : "provingground\/XmlParse$.html#proseTree(filename:String):provingground.NlpProse.ProseTree", "kind" : "def"}, {"label" : "depTree", "tail" : "(parse: NodeSeq): List[DepRel]", "member" : "provingground.XmlParse.depTree", "link" : "provingground\/XmlParse$.html#depTree(parse:scala.xml.NodeSeq):List[provingground.NlpProse.DepRel]", "kind" : "def"}, {"label" : "xmltoDepRel", "tail" : "(node: Node): DepRel", "member" : "provingground.XmlParse.xmltoDepRel", "link" : "provingground\/XmlParse$.html#xmltoDepRel(node:scala.xml.Node):provingground.NlpProse.DepRel", "kind" : "def"}, {"label" : "xmltoToken", "tail" : "(node: Node): Token", "member" : "provingground.XmlParse.xmltoToken", "link" : "provingground\/XmlParse$.html#xmltoToken(node:scala.xml.Node):provingground.NlpProse.Token", "kind" : "def"}, {"label" : "xmlSrc", "tail" : "(filename: String): Elem", "member" : "provingground.XmlParse.xmlSrc", "link" : "provingground\/XmlParse$.html#xmlSrc(filename:String):scala.xml.Elem", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/XmlParse$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/XmlParse$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/XmlParse$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/XmlParse$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/XmlParse$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/XmlParse$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/XmlParse$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/XmlParse$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/XmlParse$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/XmlParse$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/XmlParse$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/XmlParse$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/XmlParse$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/XmlParse$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/XmlParse$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/XmlParse$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/XmlParse$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/XmlParse$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/XmlParse$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "provingground.examples" : [{"name" : "provingground.examples.IfThen", "shortDescription" : "", "object" : "provingground\/examples\/IfThen$.html", "members_object" : [{"label" : "matches2", "tail" : ": List[IV[Tree]]", "member" : "provingground.examples.IfThen.matches2", "link" : "provingground\/examples\/IfThen$.html#matches2:List[provingground.Functors.IV[edu.stanford.nlp.trees.Tree]]", "kind" : "val"}, {"label" : "st2", "tail" : ": List[Tree]", "member" : "provingground.examples.IfThen.st2", "link" : "provingground\/examples\/IfThen$.html#st2:List[edu.stanford.nlp.trees.Tree]", "kind" : "val"}, {"label" : "tree2", "tail" : ": Tree", "member" : "provingground.examples.IfThen.tree2", "link" : "provingground\/examples\/IfThen$.html#tree2:edu.stanford.nlp.trees.Tree", "kind" : "val"}, {"label" : "sent2", "tail" : ": Sentence", "member" : "provingground.examples.IfThen.sent2", "link" : "provingground\/examples\/IfThen$.html#sent2:edu.stanford.nlp.simple.Sentence", "kind" : "val"}, {"label" : "matches", "tail" : ": List[IV[Tree]]", "member" : "provingground.examples.IfThen.matches", "link" : "provingground\/examples\/IfThen$.html#matches:List[provingground.Functors.IV[edu.stanford.nlp.trees.Tree]]", "kind" : "val"}, {"label" : "st", "tail" : ": List[Tree]", "member" : "provingground.examples.IfThen.st", "link" : "provingground\/examples\/IfThen$.html#st:List[edu.stanford.nlp.trees.Tree]", "kind" : "val"}, {"label" : "tree", "tail" : ": Tree", "member" : "provingground.examples.IfThen.tree", "link" : "provingground\/examples\/IfThen$.html#tree:edu.stanford.nlp.trees.Tree", "kind" : "val"}, {"label" : "sent", "tail" : ": Sentence", "member" : "provingground.examples.IfThen.sent", "link" : "provingground\/examples\/IfThen$.html#sent:edu.stanford.nlp.simple.Sentence", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/examples\/IfThen$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/examples\/IfThen$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/examples\/IfThen$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/examples\/IfThen$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/examples\/IfThen$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/examples\/IfThen$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/examples\/IfThen$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/examples\/IfThen$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/examples\/IfThen$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/examples\/IfThen$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/examples\/IfThen$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/examples\/IfThen$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/examples\/IfThen$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/examples\/IfThen$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/examples\/IfThen$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/examples\/IfThen$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/examples\/IfThen$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/examples\/IfThen$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/examples\/IfThen$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}]};