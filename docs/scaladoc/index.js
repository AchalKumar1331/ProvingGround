Index.PACKAGES = {"scala.meta.classifiers" : [], "scala.meta.parsers" : [], "reactivemongo.bson" : [], "scala.meta.transversers" : [], "provingground.induction" : [{"name" : "provingground.induction.ConstructorPatternMap", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/ConstructorPatternMap.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/ConstructorPatternMap.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/ConstructorPatternMap.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/ConstructorPatternMap.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/ConstructorPatternMap.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/ConstructorPatternMap.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/ConstructorPatternMap.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorPatternMap.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorPatternMap.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorPatternMap.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/ConstructorPatternMap.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/ConstructorPatternMap.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/ConstructorPatternMap.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/ConstructorPatternMap.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/ConstructorPatternMap.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/ConstructorPatternMap.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/ConstructorPatternMap.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/ConstructorPatternMap.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/ConstructorPatternMap.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "univLevel", "tail" : ": Int", "member" : "provingground.induction.ConstructorPatternMap.univLevel", "link" : "provingground\/induction\/ConstructorPatternMap.html#univLevel:Int", "kind" : "abstract val"}, {"label" : "inducDefCase", "tail" : "(cons: ConstructorType, data: InducDataType, f: ⇒ FuncLike[H, Cod]): (H) ⇒ Option[Cod]", "member" : "provingground.induction.ConstructorPatternMap.inducDefCase", "link" : "provingground\/induction\/ConstructorPatternMap.html#inducDefCase(cons:ConstructorType,data:InducDataType,f:=>provingground.HoTT.FuncLike[H,Cod]):H=>Option[Cod]", "kind" : "abstract def"}, {"label" : "recDefCase", "tail" : "(cons: ConstructorType, data: RecDataType, f: ⇒ Func[H, Cod]): (H) ⇒ Option[Cod]", "member" : "provingground.induction.ConstructorPatternMap.recDefCase", "link" : "provingground\/induction\/ConstructorPatternMap.html#recDefCase(cons:ConstructorType,data:RecDataType,f:=>provingground.HoTT.Func[H,Cod]):H=>Option[Cod]", "kind" : "abstract def"}, {"label" : "inducDataTyp", "tail" : "(w: Typ[H], xs: Func[H, Typ[Cod]])(cons: ConstructorType): Typ[InducDataType]", "member" : "provingground.induction.ConstructorPatternMap.inducDataTyp", "link" : "provingground\/induction\/ConstructorPatternMap.html#inducDataTyp(w:provingground.HoTT.Typ[H],xs:provingground.HoTT.Func[H,provingground.HoTT.Typ[Cod]])(cons:ConstructorType):provingground.HoTT.Typ[InducDataType]", "kind" : "abstract def"}, {"label" : "codFromData", "tail" : "(d: RecDataType): Typ[Cod]", "member" : "provingground.induction.ConstructorPatternMap.codFromData", "link" : "provingground\/induction\/ConstructorPatternMap.html#codFromData(d:RecDataType):provingground.HoTT.Typ[Cod]", "kind" : "abstract def"}, {"label" : "recDataTyp", "tail" : "(w: Typ[H], x: Typ[Cod]): Typ[RecDataType]", "member" : "provingground.induction.ConstructorPatternMap.recDataTyp", "link" : "provingground\/induction\/ConstructorPatternMap.html#recDataTyp(w:provingground.HoTT.Typ[H],x:provingground.HoTT.Typ[Cod]):provingground.HoTT.Typ[RecDataType]", "kind" : "abstract def"}, {"label" : "subs", "tail" : "(x: Term, y: Term): ConstructorPatternMap[Cod, ConstructorType, H, RecDataType, InducDataType]", "member" : "provingground.induction.ConstructorPatternMap.subs", "link" : "provingground\/induction\/ConstructorPatternMap.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.induction.ConstructorPatternMap[Cod,ConstructorType,H,RecDataType,InducDataType]", "kind" : "abstract def"}], "shortDescription" : "Introduction rule for an inductive type,as in ConstructorShape with the scala type of the codomain specified;hence the scala type of the recurion and induction types are determined.", "object" : "provingground\/induction\/ConstructorPatternMap$.html", "members_object" : [{"label" : "CnstDepFuncPtnMap", "tail" : "", "member" : "provingground.induction.ConstructorPatternMap.CnstDepFuncPtnMap", "link" : "provingground\/induction\/ConstructorPatternMap$.html#CnstDepFuncPtnMap[T<:provingground.HoTT.Termwithprovingground.HoTT.Subs[T],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V],VV<:provingground.HoTT.Termwithprovingground.HoTT.Subs[VV],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],HC<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HC],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],HR<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HR],HI<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HI]]extendsConstructorPatternMap.RecursiveConstructorPatternMap[C,T,HC,provingground.HoTT.FuncLike[T,HC],H,provingground.HoTT.FuncLike[T,V],provingground.HoTT.FuncLike[T,VV],V,VV]withProductwithSerializable", "kind" : "case class"}, {"label" : "CnstFncPtnMap", "tail" : "", "member" : "provingground.induction.ConstructorPatternMap.CnstFncPtnMap", "link" : "provingground\/induction\/ConstructorPatternMap$.html#CnstFncPtnMap[T<:provingground.HoTT.Termwithprovingground.HoTT.Subs[T],Cod<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Cod],HC<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HC],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],HR<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HR],HI<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HI]]extendsConstructorPatternMap.RecursiveConstructorPatternMap[Cod,T,HC,provingground.HoTT.Func[T,HC],H,provingground.HoTT.Func[T,HR],provingground.HoTT.FuncLike[T,HI],HR,HI]withProductwithSerializable", "kind" : "case class"}, {"label" : "FuncPtnMap", "tail" : "", "member" : "provingground.induction.ConstructorPatternMap.FuncPtnMap", "link" : "provingground\/induction\/ConstructorPatternMap$.html#FuncPtnMap[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],HC<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HC],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],HR<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HR],HI<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HI],TT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TT],DT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[DT]]extendsConstructorPatternMap.RecursiveConstructorPatternMap[C,F,HC,provingground.HoTT.Func[F,HC],H,provingground.HoTT.Func[F,provingground.HoTT.Func[TT,HR]],provingground.HoTT.FuncLike[F,provingground.HoTT.Func[DT,HI]],HR,HI]withProductwithSerializable", "kind" : "case class"}, {"label" : "Debug", "tail" : "", "member" : "provingground.induction.ConstructorPatternMap.Debug", "link" : "provingground\/induction\/ConstructorPatternMap$.html#Debug", "kind" : "object"}, {"label" : "RecursiveConstructorPatternMap", "tail" : "", "member" : "provingground.induction.ConstructorPatternMap.RecursiveConstructorPatternMap", "link" : "provingground\/induction\/ConstructorPatternMap$.html#RecursiveConstructorPatternMap[Cod<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Cod],ArgType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[ArgType],HeadConstructorType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HeadConstructorType],CT<:provingground.HoTT.FuncLike[ArgType,HeadConstructorType]withprovingground.HoTT.Subs[CT],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],RecDataType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[RecDataType],InducDataType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[InducDataType],HeadRecDataType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HeadRecDataType],HeadInducDataType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HeadInducDataType]]extendsConstructorPatternMap[Cod,CT,H,RecDataType,InducDataType]", "kind" : "sealed trait"}, {"label" : "IdTargMap", "tail" : "", "member" : "provingground.induction.ConstructorPatternMap.IdTargMap", "link" : "provingground\/induction\/ConstructorPatternMap$.html#IdTargMap[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H]]extendsConstructorPatternMap[C,H,H,C,C]withProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/ConstructorPatternMap$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/ConstructorPatternMap$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/ConstructorPatternMap$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/ConstructorPatternMap$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/ConstructorPatternMap$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/ConstructorPatternMap$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/ConstructorPatternMap$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorPatternMap$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorPatternMap$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorPatternMap$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/ConstructorPatternMap$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/ConstructorPatternMap$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/ConstructorPatternMap$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/ConstructorPatternMap$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/ConstructorPatternMap$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/ConstructorPatternMap$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/ConstructorPatternMap$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/ConstructorPatternMap$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/ConstructorPatternMap$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/induction\/ConstructorPatternMap.html", "kind" : "trait"}, {"name" : "provingground.induction.ConstructorPatternMapper", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/ConstructorPatternMapper.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/ConstructorPatternMapper.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/ConstructorPatternMapper.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/ConstructorPatternMapper.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/ConstructorPatternMapper.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/ConstructorPatternMapper.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/ConstructorPatternMapper.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorPatternMapper.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorPatternMapper.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorPatternMapper.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/ConstructorPatternMapper.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/ConstructorPatternMapper.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/ConstructorPatternMapper.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/ConstructorPatternMapper.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/ConstructorPatternMapper.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/ConstructorPatternMapper.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/ConstructorPatternMapper.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/ConstructorPatternMapper.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/ConstructorPatternMapper.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "mapper", "tail" : "(): (ConstructorShape[Shape, H, ConstructorType]) ⇒ ConstructorPatternMap[Cod, ConstructorType, H, RecDataType, InducDataType]", "member" : "provingground.induction.ConstructorPatternMapper.mapper", "link" : "provingground\/induction\/ConstructorPatternMapper.html#mapper:provingground.induction.ConstructorShape[Shape,H,ConstructorType]=>provingground.induction.ConstructorPatternMap[Cod,ConstructorType,H,RecDataType,InducDataType]", "kind" : "abstract def"}], "shortDescription" : "", "object" : "provingground\/induction\/ConstructorPatternMapper$.html", "members_object" : [{"label" : "cnstDepFncPtnMapper", "tail" : "(head: ConstructorPatternMapper[HShape, Cod, HC, H, HR, HI]): ConstructorPatternMapper[::[CnstDepFuncConsShape.type, HShape], Cod, FuncLike[T, HC], H, FuncLike[T, HR], FuncLike[T, HI]]", "member" : "provingground.induction.ConstructorPatternMapper.cnstDepFncPtnMapper", "link" : "provingground\/induction\/ConstructorPatternMapper$.html#cnstDepFncPtnMapper[HShape<:shapeless.HList,T<:provingground.HoTT.Termwithprovingground.HoTT.Subs[T],Cod<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Cod],HC<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HC],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],HR<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HR],HI<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HI]](implicithead:provingground.induction.ConstructorPatternMapper[HShape,Cod,HC,H,HR,HI]):provingground.induction.ConstructorPatternMapper[provingground.induction.ConstructorShape.CnstDepFuncConsShape.type::HShape,Cod,provingground.HoTT.FuncLike[T,HC],H,provingground.HoTT.FuncLike[T,HR],provingground.HoTT.FuncLike[T,HI]]", "kind" : "implicit def"}, {"label" : "cnstFncPtnMapper", "tail" : "(head: ConstructorPatternMapper[HShape, Cod, HC, H, HR, HI]): ConstructorPatternMapper[::[CnstFuncConsShape.type, HShape], Cod, Func[T, HC], H, Func[T, HR], FuncLike[T, HI]]", "member" : "provingground.induction.ConstructorPatternMapper.cnstFncPtnMapper", "link" : "provingground\/induction\/ConstructorPatternMapper$.html#cnstFncPtnMapper[HShape<:shapeless.HList,T<:provingground.HoTT.Termwithprovingground.HoTT.Subs[T],Cod<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Cod],HC<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HC],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],HR<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HR],HI<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HI]](implicithead:provingground.induction.ConstructorPatternMapper[HShape,Cod,HC,H,HR,HI]):provingground.induction.ConstructorPatternMapper[provingground.induction.ConstructorShape.CnstFuncConsShape.type::HShape,Cod,provingground.HoTT.Func[T,HC],H,provingground.HoTT.Func[T,HR],provingground.HoTT.FuncLike[T,HI]]", "kind" : "implicit def"}, {"label" : "funcPtnMapper", "tail" : "(tail: IterFuncMapper[H, C, F, TT, DT], head: ConstructorPatternMapper[HShape, C, HC, H, HR, HI]): ConstructorPatternMapper[::[FuncConsShape.type, HShape], C, Func[F, HC], H, Func[F, Func[TT, HR]], FuncLike[F, Func[DT, HI]]]", "member" : "provingground.induction.ConstructorPatternMapper.funcPtnMapper", "link" : "provingground\/induction\/ConstructorPatternMapper$.html#funcPtnMapper[HShape<:shapeless.HList,C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],HC<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HC],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],HR<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HR],HI<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HI],TT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TT],DT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[DT]](implicittail:provingground.induction.IterFuncMapper[H,C,F,TT,DT],implicithead:provingground.induction.ConstructorPatternMapper[HShape,C,HC,H,HR,HI]):provingground.induction.ConstructorPatternMapper[provingground.induction.ConstructorShape.FuncConsShape.type::HShape,C,provingground.HoTT.Func[F,HC],H,provingground.HoTT.Func[F,provingground.HoTT.Func[TT,HR]],provingground.HoTT.FuncLike[F,provingground.HoTT.Func[DT,HI]]]", "kind" : "implicit def"}, {"label" : "idTargMapper", "tail" : "(): ConstructorPatternMapper[HNil, C, H, H, C, C]", "member" : "provingground.induction.ConstructorPatternMapper.idTargMapper", "link" : "provingground\/induction\/ConstructorPatternMapper$.html#idTargMapper[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H]]:provingground.induction.ConstructorPatternMapper[shapeless.HNil,C,H,H,C,C]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/ConstructorPatternMapper$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/ConstructorPatternMapper$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/ConstructorPatternMapper$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/ConstructorPatternMapper$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/ConstructorPatternMapper$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/ConstructorPatternMapper$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/ConstructorPatternMapper$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorPatternMapper$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorPatternMapper$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorPatternMapper$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/ConstructorPatternMapper$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/ConstructorPatternMapper$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/ConstructorPatternMapper$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/ConstructorPatternMapper$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/ConstructorPatternMapper$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/ConstructorPatternMapper$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/ConstructorPatternMapper$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/ConstructorPatternMapper$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/ConstructorPatternMapper$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/induction\/ConstructorPatternMapper.html", "kind" : "object"}, {"name" : "provingground.induction.ConstructorSeqDom", "members_trait" : [{"label" : "induc", "tail" : "(W: Typ[H], Xs: Func[H, Typ[C]]): InducType forSome {type InducType <: Term with Subs[InducType]}", "member" : "provingground.induction.ConstructorSeqDom.induc", "link" : "provingground\/induction\/ConstructorSeqDom.html#induc[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C]](W:provingground.HoTT.Typ[H],Xs:provingground.HoTT.Func[H,provingground.HoTT.Typ[C]]):InducTypeforSome{typeInducType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[InducType]}", "kind" : "def"}, {"label" : "rec", "tail" : "(W: Typ[H], X: Typ[C]): RecType forSome {type RecType <: Term with Subs[RecType]}", "member" : "provingground.induction.ConstructorSeqDom.rec", "link" : "provingground\/induction\/ConstructorSeqDom.html#rec[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C]](W:provingground.HoTT.Typ[H],X:provingground.HoTT.Typ[C]):RecTypeforSome{typeRecType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[RecType]}", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/ConstructorSeqDom.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/ConstructorSeqDom.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/ConstructorSeqDom.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/ConstructorSeqDom.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/ConstructorSeqDom.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/ConstructorSeqDom.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/ConstructorSeqDom.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorSeqDom.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorSeqDom.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorSeqDom.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/ConstructorSeqDom.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/ConstructorSeqDom.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/ConstructorSeqDom.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/ConstructorSeqDom.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/ConstructorSeqDom.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/ConstructorSeqDom.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/ConstructorSeqDom.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/ConstructorSeqDom.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/ConstructorSeqDom.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "subs", "tail" : "(x: Term, y: Term): ConstructorSeqDom[SS, H, Intros]", "member" : "provingground.induction.ConstructorSeqDom.subs", "link" : "provingground\/induction\/ConstructorSeqDom.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.induction.ConstructorSeqDom[SS,H,Intros]", "kind" : "abstract def"}, {"label" : "intros", "tail" : "(typ: Typ[H]): Intros", "member" : "provingground.induction.ConstructorSeqDom.intros", "link" : "provingground\/induction\/ConstructorSeqDom.html#intros(typ:provingground.HoTT.Typ[H]):Intros", "kind" : "abstract def"}, {"label" : "mapped", "tail" : "(W: Typ[H]): ConstructorSeqMap[C, H, RecType, InducType, TIntros] forSome {type RecType <: Term with Subs[RecType], type InducType <: Term with Subs[InducType], type TIntros <: HList}", "member" : "provingground.induction.ConstructorSeqDom.mapped", "link" : "provingground\/induction\/ConstructorSeqDom.html#mapped[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C]](W:provingground.HoTT.Typ[H]):provingground.induction.ConstructorSeqMap[C,H,RecType,InducType,TIntros]forSome{typeRecType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[RecType];typeInducType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[InducType];typeTIntros<:shapeless.HList}", "kind" : "abstract def"}, {"label" : "numIntros", "tail" : ": Int", "member" : "provingground.induction.ConstructorSeqDom.numIntros", "link" : "provingground\/induction\/ConstructorSeqDom.html#numIntros:Int", "kind" : "abstract val"}, {"label" : "introArgsVec", "tail" : ": Vector[Int]", "member" : "provingground.induction.ConstructorSeqDom.introArgsVec", "link" : "provingground\/induction\/ConstructorSeqDom.html#introArgsVec:Vector[Int]", "kind" : "abstract val"}], "shortDescription" : "the shape of the definition of an inductive type; when a type is specified we get an object of typeConstructorSeqTL, which is the full definition", "object" : "provingground\/induction\/ConstructorSeqDom$.html", "members_object" : [{"label" : "Cons", "tail" : "", "member" : "provingground.induction.ConstructorSeqDom.Cons", "link" : "provingground\/induction\/ConstructorSeqDom$.html#Cons[TSS<:shapeless.HList,HShape<:shapeless.HList,H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],ConstructorType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[ConstructorType],TIntros<:shapeless.HList]extendsConstructorSeqDom[HShape::TSS,H,ConstructorType::TIntros]withProductwithSerializable", "kind" : "case class"}, {"label" : "Empty", "tail" : "", "member" : "provingground.induction.ConstructorSeqDom.Empty", "link" : "provingground\/induction\/ConstructorSeqDom$.html#Empty", "kind" : "object"}, {"label" : "Empty", "tail" : "", "member" : "provingground.induction.ConstructorSeqDom.Empty", "link" : "provingground\/induction\/ConstructorSeqDom$.html#Empty[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H]]extendsConstructorSeqDom[shapeless.HNil,H,shapeless.HNil]withProductwithSerializable", "kind" : "case class"}, {"label" : "consSeqDomSubst", "tail" : "(): Subst[ConstructorSeqDom[SS, H, Intros]]", "member" : "provingground.induction.ConstructorSeqDom.consSeqDomSubst", "link" : "provingground\/induction\/ConstructorSeqDom$.html#consSeqDomSubst[SS<:shapeless.HList,H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],Intros<:shapeless.HList]:provingground.Subst[provingground.induction.ConstructorSeqDom[SS,H,Intros]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/ConstructorSeqDom$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/ConstructorSeqDom$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/ConstructorSeqDom$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/ConstructorSeqDom$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/ConstructorSeqDom$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/ConstructorSeqDom$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/ConstructorSeqDom$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorSeqDom$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorSeqDom$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorSeqDom$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/ConstructorSeqDom$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/ConstructorSeqDom$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/ConstructorSeqDom$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/ConstructorSeqDom$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/ConstructorSeqDom$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/ConstructorSeqDom$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/ConstructorSeqDom$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/ConstructorSeqDom$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/ConstructorSeqDom$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/induction\/ConstructorSeqDom.html", "kind" : "trait"}, {"name" : "provingground.induction.ConstructorSeqMap", "members_trait" : [{"label" : "induc", "tail" : "(fibre: Func[H, Typ[C]]): InducType", "member" : "provingground.induction.ConstructorSeqMap.induc", "link" : "provingground\/induction\/ConstructorSeqMap.html#induc(fibre:provingground.HoTT.Func[H,provingground.HoTT.Typ[C]]):InducType", "kind" : "def"}, {"label" : "rec", "tail" : "(X: Typ[C]): RecType", "member" : "provingground.induction.ConstructorSeqMap.rec", "link" : "provingground\/induction\/ConstructorSeqMap.html#rec(X:provingground.HoTT.Typ[C]):RecType", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/ConstructorSeqMap.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/ConstructorSeqMap.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/ConstructorSeqMap.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/ConstructorSeqMap.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/ConstructorSeqMap.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/ConstructorSeqMap.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/ConstructorSeqMap.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorSeqMap.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorSeqMap.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorSeqMap.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/ConstructorSeqMap.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/ConstructorSeqMap.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/ConstructorSeqMap.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/ConstructorSeqMap.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/ConstructorSeqMap.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/ConstructorSeqMap.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/ConstructorSeqMap.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/ConstructorSeqMap.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/ConstructorSeqMap.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "subs", "tail" : "(x: Term, y: Term): ConstructorSeqMap[C, H, RecType, InducType, Intros]", "member" : "provingground.induction.ConstructorSeqMap.subs", "link" : "provingground\/induction\/ConstructorSeqMap.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.induction.ConstructorSeqMap[C,H,RecType,InducType,Intros]", "kind" : "abstract def"}, {"label" : "inducDataLambda", "tail" : "(fibre: Func[H, Typ[C]]): (FuncLike[H, C]) ⇒ InducType", "member" : "provingground.induction.ConstructorSeqMap.inducDataLambda", "link" : "provingground\/induction\/ConstructorSeqMap.html#inducDataLambda(fibre:provingground.HoTT.Func[H,provingground.HoTT.Typ[C]]):provingground.HoTT.FuncLike[H,C]=>InducType", "kind" : "abstract def"}, {"label" : "inducDefn", "tail" : "(fibre: Func[H, Typ[C]]): InductiveDefinition[H, C]", "member" : "provingground.induction.ConstructorSeqMap.inducDefn", "link" : "provingground\/induction\/ConstructorSeqMap.html#inducDefn(fibre:provingground.HoTT.Func[H,provingground.HoTT.Typ[C]]):provingground.induction.InductiveDefinition[H,C]", "kind" : "abstract def"}, {"label" : "recDataLambda", "tail" : "(X: Typ[C]): (Func[H, C]) ⇒ RecType", "member" : "provingground.induction.ConstructorSeqMap.recDataLambda", "link" : "provingground\/induction\/ConstructorSeqMap.html#recDataLambda(X:provingground.HoTT.Typ[C]):provingground.HoTT.Func[H,C]=>RecType", "kind" : "abstract def"}, {"label" : "W", "tail" : ": Typ[H]", "member" : "provingground.induction.ConstructorSeqMap.W", "link" : "provingground\/induction\/ConstructorSeqMap.html#W:provingground.HoTT.Typ[H]", "kind" : "abstract val"}, {"label" : "recDefn", "tail" : "(X: Typ[C]): RecursiveDefinition[H, C]", "member" : "provingground.induction.ConstructorSeqMap.recDefn", "link" : "provingground\/induction\/ConstructorSeqMap.html#recDefn(X:provingground.HoTT.Typ[C]):provingground.induction.RecursiveDefinition[H,C]", "kind" : "abstract def"}], "shortDescription" : "Inductive type definition as in ConstructorSeqTL together with the scala type of a codomain;this determines the scala type of rec_W,X and induc_W, Xs functions.", "object" : "provingground\/induction\/ConstructorSeqMap$.html", "members_object" : [{"label" : "Cons", "tail" : "", "member" : "provingground.induction.ConstructorSeqMap.Cons", "link" : "provingground\/induction\/ConstructorSeqMap$.html#Cons[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],Cod<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Cod],RD<:provingground.HoTT.Termwithprovingground.HoTT.Subs[RD],ID<:provingground.HoTT.Termwithprovingground.HoTT.Subs[ID],TR<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TR],TI<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TI],TIntros<:shapeless.HList]extendsConstructorSeqMap[Cod,H,provingground.HoTT.Func[RD,TR],provingground.HoTT.Func[ID,TI],C::TIntros]withProductwithSerializable", "kind" : "case class"}, {"label" : "InducDataSym", "tail" : "", "member" : "provingground.induction.ConstructorSeqMap.InducDataSym", "link" : "provingground\/induction\/ConstructorSeqMap$.html#InducDataSym[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C]]extendsHoTT.AnySymwithProductwithSerializable", "kind" : "case class"}, {"label" : "RecDataSym", "tail" : "", "member" : "provingground.induction.ConstructorSeqMap.RecDataSym", "link" : "provingground\/induction\/ConstructorSeqMap$.html#RecDataSym[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C]]extendsHoTT.AnySymwithProductwithSerializable", "kind" : "case class"}, {"label" : "Empty", "tail" : "", "member" : "provingground.induction.ConstructorSeqMap.Empty", "link" : "provingground\/induction\/ConstructorSeqMap$.html#Empty[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H]]extendsConstructorSeqMap[C,H,provingground.HoTT.Func[H,C],provingground.HoTT.FuncLike[H,C],shapeless.HNil]withProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/ConstructorSeqMap$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/ConstructorSeqMap$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/ConstructorSeqMap$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/ConstructorSeqMap$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/ConstructorSeqMap$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/ConstructorSeqMap$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/ConstructorSeqMap$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorSeqMap$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorSeqMap$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorSeqMap$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/ConstructorSeqMap$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/ConstructorSeqMap$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/ConstructorSeqMap$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/ConstructorSeqMap$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/ConstructorSeqMap$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/ConstructorSeqMap$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/ConstructorSeqMap$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/ConstructorSeqMap$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/ConstructorSeqMap$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/induction\/ConstructorSeqMap.html", "kind" : "trait"}, {"name" : "provingground.induction.ConstructorSeqMapper", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/ConstructorSeqMapper.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/ConstructorSeqMapper.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/ConstructorSeqMapper.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/ConstructorSeqMapper.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/ConstructorSeqMapper.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/ConstructorSeqMapper.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/ConstructorSeqMapper.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorSeqMapper.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorSeqMapper.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorSeqMapper.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/ConstructorSeqMapper.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/ConstructorSeqMapper.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/ConstructorSeqMapper.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/ConstructorSeqMapper.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/ConstructorSeqMapper.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/ConstructorSeqMapper.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/ConstructorSeqMapper.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/ConstructorSeqMapper.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/ConstructorSeqMapper.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "mapped", "tail" : "(seqdom: ConstructorSeqDom[SS, H, Intros])(W: Typ[H]): ConstructorSeqMap[C, H, RecType, InducType, Intros]", "member" : "provingground.induction.ConstructorSeqMapper.mapped", "link" : "provingground\/induction\/ConstructorSeqMapper.html#mapped(seqdom:provingground.induction.ConstructorSeqDom[SS,H,Intros])(W:provingground.HoTT.Typ[H]):provingground.induction.ConstructorSeqMap[C,H,RecType,InducType,Intros]", "kind" : "abstract def"}], "shortDescription" : "given scala type of the codomain and a specific inductive type, lifts a ConstructorSeqDom to a ConstructorSeqMap", "object" : "provingground\/induction\/ConstructorSeqMapper$.html", "members_object" : [{"label" : "cons", "tail" : "(patternMapper: ConstructorPatternMapper[HShape, Cod, ConstructorType, H, RD, ID], tailMapper: ConstructorSeqMapper[TSS, Cod, H, TR, TI, TIntros]): ConstructorSeqMapper[::[HShape, TSS], Cod, H, Func[RD, TR], Func[ID, TI], ::[ConstructorType, TIntros]]", "member" : "provingground.induction.ConstructorSeqMapper.cons", "link" : "provingground\/induction\/ConstructorSeqMapper$.html#cons[TSS<:shapeless.HList,HShape<:shapeless.HList,H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],Cod<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Cod],ConstructorType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[ConstructorType],TIntros<:shapeless.HList,RD<:provingground.HoTT.Termwithprovingground.HoTT.Subs[RD],ID<:provingground.HoTT.Termwithprovingground.HoTT.Subs[ID],TR<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TR],TI<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TI]](implicitpatternMapper:provingground.induction.ConstructorPatternMapper[HShape,Cod,ConstructorType,H,RD,ID],implicittailMapper:provingground.induction.ConstructorSeqMapper[TSS,Cod,H,TR,TI,TIntros]):provingground.induction.ConstructorSeqMapper[HShape::TSS,Cod,H,provingground.HoTT.Func[RD,TR],provingground.HoTT.Func[ID,TI],ConstructorType::TIntros]", "kind" : "implicit def"}, {"label" : "empty", "tail" : "(): ConstructorSeqMapper[HNil, C, H, Func[H, C], FuncLike[H, C], HNil]", "member" : "provingground.induction.ConstructorSeqMapper.empty", "link" : "provingground\/induction\/ConstructorSeqMapper$.html#empty[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C]]:provingground.induction.ConstructorSeqMapper[shapeless.HNil,C,H,provingground.HoTT.Func[H,C],provingground.HoTT.FuncLike[H,C],shapeless.HNil]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/ConstructorSeqMapper$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/ConstructorSeqMapper$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/ConstructorSeqMapper$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/ConstructorSeqMapper$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/ConstructorSeqMapper$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/ConstructorSeqMapper$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/ConstructorSeqMapper$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorSeqMapper$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorSeqMapper$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorSeqMapper$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/ConstructorSeqMapper$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/ConstructorSeqMapper$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/ConstructorSeqMapper$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/ConstructorSeqMapper$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/ConstructorSeqMapper$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/ConstructorSeqMapper$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/ConstructorSeqMapper$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/ConstructorSeqMapper$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/ConstructorSeqMapper$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/induction\/ConstructorSeqMapper.html", "kind" : "trait"}, {"name" : "provingground.induction.ConstructorSeqTL", "shortDescription" : "Essentially the definition of an inductive type; has all parameters of the definition:", "object" : "provingground\/induction\/ConstructorSeqTL$.html", "members_object" : [{"label" : "getExst", "tail" : "(w: Typ[Term], intros: Vector[Term]): Exst", "member" : "provingground.induction.ConstructorSeqTL.getExst", "link" : "provingground\/induction\/ConstructorSeqTL$.html#getExst(w:provingground.HoTT.Typ[provingground.HoTT.Term],intros:Vector[provingground.HoTT.Term]):provingground.induction.ConstructorSeqTL.Exst", "kind" : "def"}, {"label" : "Exst", "tail" : "", "member" : "provingground.induction.ConstructorSeqTL.Exst", "link" : "provingground\/induction\/ConstructorSeqTL$.html#Exst", "kind" : "object"}, {"label" : "Exst", "tail" : "", "member" : "provingground.induction.ConstructorSeqTL.Exst", "link" : "provingground\/induction\/ConstructorSeqTL$.html#ExstextendsAnyRef", "kind" : "sealed trait"}, {"label" : "Empty", "tail" : "(W: Typ[H]): ConstructorSeqTL[HNil, H, HNil]", "member" : "provingground.induction.ConstructorSeqTL.Empty", "link" : "provingground\/induction\/ConstructorSeqTL$.html#Empty[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H]](W:provingground.HoTT.Typ[H]):provingground.induction.ConstructorSeqTL[shapeless.HNil,H,shapeless.HNil]", "kind" : "def"}, {"label" : "consSeqTLSubs", "tail" : "(): Subst[ConstructorSeqTL[SS, H, Intros]]", "member" : "provingground.induction.ConstructorSeqTL.consSeqTLSubs", "link" : "provingground\/induction\/ConstructorSeqTL$.html#consSeqTLSubs[SS<:shapeless.HList,H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],Intros<:shapeless.HList]:provingground.Subst[provingground.induction.ConstructorSeqTL[SS,H,Intros]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/ConstructorSeqTL$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/ConstructorSeqTL$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/ConstructorSeqTL$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/ConstructorSeqTL$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/ConstructorSeqTL$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/ConstructorSeqTL$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/ConstructorSeqTL$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorSeqTL$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorSeqTL$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorSeqTL$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/ConstructorSeqTL$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/ConstructorSeqTL$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/ConstructorSeqTL$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/ConstructorSeqTL$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/ConstructorSeqTL$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/ConstructorSeqTL$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/ConstructorSeqTL$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/ConstructorSeqTL$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/ConstructorSeqTL$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "intros", "tail" : ": Intros", "member" : "provingground.induction.ConstructorSeqTL.intros", "link" : "provingground\/induction\/ConstructorSeqTL.html#intros:Intros", "kind" : "val"}, {"label" : "induc", "tail" : "(Xs: Func[H, Typ[C]])(mapper: ConstructorSeqMapper[SS, C, H, RecType, InducType, Intros]): InducType", "member" : "provingground.induction.ConstructorSeqTL.induc", "link" : "provingground\/induction\/ConstructorSeqTL.html#induc[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],RecType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[RecType],InducType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[InducType]](Xs:provingground.HoTT.Func[H,provingground.HoTT.Typ[C]])(implicitmapper:provingground.induction.ConstructorSeqMapper[SS,C,H,RecType,InducType,Intros]):InducType", "kind" : "def"}, {"label" : "inducE", "tail" : "(Xs: Func[H, Typ[C]]): InducType forSome {type InducType <: Term with Subs[InducType]}", "member" : "provingground.induction.ConstructorSeqTL.inducE", "link" : "provingground\/induction\/ConstructorSeqTL.html#inducE[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C]](Xs:provingground.HoTT.Func[H,provingground.HoTT.Typ[C]]):InducTypeforSome{typeInducType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[InducType]}", "kind" : "def"}, {"label" : "rec", "tail" : "(X: Typ[C])(mapper: ConstructorSeqMapper[SS, C, H, RecType, InducType, Intros]): RecType", "member" : "provingground.induction.ConstructorSeqTL.rec", "link" : "provingground\/induction\/ConstructorSeqTL.html#rec[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],RecType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[RecType],InducType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[InducType]](X:provingground.HoTT.Typ[C])(implicitmapper:provingground.induction.ConstructorSeqMapper[SS,C,H,RecType,InducType,Intros]):RecType", "kind" : "def"}, {"label" : "recE", "tail" : "(X: Typ[C]): RecType forSome {type RecType <: Term with Subs[RecType]}", "member" : "provingground.induction.ConstructorSeqTL.recE", "link" : "provingground\/induction\/ConstructorSeqTL.html#recE[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C]](X:provingground.HoTT.Typ[C]):RecTypeforSome{typeRecType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[RecType]}", "kind" : "def"}, {"label" : "|:", "tail" : "(head: ConstructorTL[S, H, ConstructorType]): ConstructorSeqTL[::[S, SS], H, ::[ConstructorType, Intros]]", "member" : "provingground.induction.ConstructorSeqTL.|:", "link" : "provingground\/induction\/ConstructorSeqTL.html#|:[S<:shapeless.HList,ConstructorType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[ConstructorType]](head:provingground.induction.ConstructorTL[S,H,ConstructorType]):provingground.induction.ConstructorSeqTL[S::SS,H,ConstructorType::Intros]", "kind" : "def"}, {"label" : "subs", "tail" : "(x: Term, y: Term): ConstructorSeqTL[SS, H, Intros]", "member" : "provingground.induction.ConstructorSeqTL.subs", "link" : "provingground\/induction\/ConstructorSeqTL.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.induction.ConstructorSeqTL[SS,H,Intros]", "kind" : "def"}, {"member" : "provingground.induction.ConstructorSeqTL#<init>", "error" : "unsupported entity"}, {"label" : "typ", "tail" : ": Typ[H]", "member" : "provingground.induction.ConstructorSeqTL.typ", "link" : "provingground\/induction\/ConstructorSeqTL.html#typ:provingground.HoTT.Typ[H]", "kind" : "val"}, {"label" : "seqDom", "tail" : ": ConstructorSeqDom[SS, H, Intros]", "member" : "provingground.induction.ConstructorSeqTL.seqDom", "link" : "provingground\/induction\/ConstructorSeqTL.html#seqDom:provingground.induction.ConstructorSeqDom[SS,H,Intros]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/ConstructorSeqTL.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/ConstructorSeqTL.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/ConstructorSeqTL.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/ConstructorSeqTL.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/ConstructorSeqTL.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/ConstructorSeqTL.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/ConstructorSeqTL.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorSeqTL.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorSeqTL.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorSeqTL.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/ConstructorSeqTL.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/ConstructorSeqTL.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/ConstructorSeqTL.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/ConstructorSeqTL.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/ConstructorSeqTL.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/ConstructorSeqTL.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/induction\/ConstructorSeqTL.html", "kind" : "case class"}, {"name" : "provingground.induction.ConstructorShape", "members_trait" : [{"label" : "~>:", "tail" : "(tailVar: T): CnstDepFuncConsShape[S, H, ConstructorType, T, Nothing]", "member" : "provingground.induction.ConstructorShape.~>:", "link" : "provingground\/induction\/ConstructorShape.html#~>:[T<:provingground.HoTT.Termwithprovingground.HoTT.Subs[T]](tailVar:T):provingground.induction.ConstructorShape.CnstDepFuncConsShape[S,H,ConstructorType,T,Nothing]", "kind" : "def"}, {"label" : "->:", "tail" : "(tail: Typ[T]): CnstFuncConsShape[S, H, ConstructorType, T, Nothing]", "member" : "provingground.induction.ConstructorShape.->:", "link" : "provingground\/induction\/ConstructorShape.html#->:[T<:provingground.HoTT.Termwithprovingground.HoTT.Subs[T]](tail:provingground.HoTT.Typ[T]):provingground.induction.ConstructorShape.CnstFuncConsShape[S,H,ConstructorType,T,Nothing]", "kind" : "def"}, {"label" : "-->:", "tail" : "(that: IdShape.type): FuncConsShape[S, H, ConstructorType, H]", "member" : "provingground.induction.ConstructorShape.-->:", "link" : "provingground\/induction\/ConstructorShape.html#-->:(that:provingground.induction.ConstructorShape.IdShape.type):provingground.induction.ConstructorShape.FuncConsShape[S,H,ConstructorType,H]", "kind" : "def"}, {"label" : "-->:", "tail" : "(that: IterFuncShape[H, F]): FuncConsShape[S, H, ConstructorType, F]", "member" : "provingground.induction.ConstructorShape.-->:", "link" : "provingground\/induction\/ConstructorShape.html#-->:[F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F]](that:provingground.induction.IterFuncShape[H,F]):provingground.induction.ConstructorShape.FuncConsShape[S,H,ConstructorType,F]", "kind" : "def"}, {"label" : "symbcons", "tail" : "(name: AnySym, tp: Typ[H]): symbcons._1.type.Obj with Subs[symbcons._1.type.Obj] forSome {val _1: Typ[ConstructorType]}", "member" : "provingground.induction.ConstructorShape.symbcons", "link" : "provingground\/induction\/ConstructorShape.html#symbcons(name:provingground.HoTT.AnySym,tp:provingground.HoTT.Typ[H]):_1.Objwithprovingground.HoTT.Subs[_1.Obj]forSome{val_1:provingground.HoTT.Typ[ConstructorType]}", "kind" : "def"}, {"label" : "mapped", "tail" : "(): ConstructorPatternMap[Cod, ConstructorType, H, RecDataType, InducDataType] forSome {type RecDataType <: Term with Subs[RecDataType], type InducDataType <: Term with Subs[InducDataType]}", "member" : "provingground.induction.ConstructorShape.mapped", "link" : "provingground\/induction\/ConstructorShape.html#mapped[Cod<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Cod]]:provingground.induction.ConstructorPatternMap[Cod,ConstructorType,H,RecDataType,InducDataType]forSome{typeRecDataType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[RecDataType];typeInducDataType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[InducDataType]}", "kind" : "def"}, {"label" : "lift", "tail" : "(mp: ConstructorPatternMapper[S, Cod, ConstructorType, H, RecDataType, InducDataType]): ConstructorPatternMap[Cod, ConstructorType, H, RecDataType, InducDataType]", "member" : "provingground.induction.ConstructorShape.lift", "link" : "provingground\/induction\/ConstructorShape.html#lift[Cod<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Cod],RecDataType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[RecDataType],InducDataType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[InducDataType]](implicitmp:provingground.induction.ConstructorPatternMapper[S,Cod,ConstructorType,H,RecDataType,InducDataType]):provingground.induction.ConstructorPatternMap[Cod,ConstructorType,H,RecDataType,InducDataType]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/ConstructorShape.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/ConstructorShape.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/ConstructorShape.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/ConstructorShape.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/ConstructorShape.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/ConstructorShape.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/ConstructorShape.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorShape.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorShape.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorShape.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/ConstructorShape.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/ConstructorShape.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/ConstructorShape.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/ConstructorShape.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/ConstructorShape.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/ConstructorShape.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/ConstructorShape.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/ConstructorShape.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/ConstructorShape.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "subs", "tail" : "(x: Term, y: Term): ConstructorShape[S, H, ConstructorType]", "member" : "provingground.induction.ConstructorShape.subs", "link" : "provingground\/induction\/ConstructorShape.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.induction.ConstructorShape[S,H,ConstructorType]", "kind" : "abstract def"}, {"label" : "mapper", "tail" : "(): ConstructorPatternMapper[S, Cod, ConstructorType, H, RecDataType, InducDataType] forSome {type RecDataType <: Term with Subs[RecDataType], type InducDataType <: Term with Subs[InducDataType]}", "member" : "provingground.induction.ConstructorShape.mapper", "link" : "provingground\/induction\/ConstructorShape.html#mapper[Cod<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Cod]]:provingground.induction.ConstructorPatternMapper[S,Cod,ConstructorType,H,RecDataType,InducDataType]forSome{typeRecDataType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[RecDataType];typeInducDataType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[InducDataType]}", "kind" : "abstract def"}, {"label" : "apply", "tail" : "(tp: Typ[H]): Typ[ConstructorType]", "member" : "provingground.induction.ConstructorShape.apply", "link" : "provingground\/induction\/ConstructorShape.html#apply(tp:provingground.HoTT.Typ[H]):provingground.HoTT.Typ[ConstructorType]", "kind" : "abstract def"}, {"label" : "introArgs", "tail" : ": Int", "member" : "provingground.induction.ConstructorShape.introArgs", "link" : "provingground\/induction\/ConstructorShape.html#introArgs:Int", "kind" : "abstract val"}], "shortDescription" : "The introduction rule for an inductive type, as a function of the type;typically (A -> B -> W)-> C -> W -> (D -> W) -> W as a function of WMay have Pi-types instead of function types.", "object" : "provingground\/induction\/ConstructorShape$.html", "members_object" : [{"label" : "CnstDepFuncConsShape", "tail" : "", "member" : "provingground.induction.ConstructorShape.CnstDepFuncConsShape", "link" : "provingground\/induction\/ConstructorShape$.html#CnstDepFuncConsShape[HShape<:shapeless.HList,H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],HC<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HC],T<:provingground.HoTT.Termwithprovingground.HoTT.Subs[T],HS<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HS]]extendsConstructorShape[provingground.induction.ConstructorShape.CnstDepFuncConsShape.type::HShape,H,provingground.HoTT.FuncLike[T,HC]]withProductwithSerializable", "kind" : "case class"}, {"label" : "CnstFuncConsShape", "tail" : "", "member" : "provingground.induction.ConstructorShape.CnstFuncConsShape", "link" : "provingground\/induction\/ConstructorShape$.html#CnstFuncConsShape[HShape<:shapeless.HList,H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],HC<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HC],T<:provingground.HoTT.Termwithprovingground.HoTT.Subs[T],HS<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HS]]extendsConstructorShape[provingground.induction.ConstructorShape.CnstFuncConsShape.type::HShape,H,provingground.HoTT.Func[T,HC]]withProductwithSerializable", "kind" : "case class"}, {"label" : "FuncConsShape", "tail" : "", "member" : "provingground.induction.ConstructorShape.FuncConsShape", "link" : "provingground\/induction\/ConstructorShape$.html#FuncConsShape[HS<:shapeless.HList,H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],HC<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HC],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F]]extendsConstructorShape[provingground.induction.ConstructorShape.FuncConsShape.type::HS,H,provingground.HoTT.Func[F,HC]]withProductwithSerializable", "kind" : "case class"}, {"label" : "IdShape", "tail" : "", "member" : "provingground.induction.ConstructorShape.IdShape", "link" : "provingground\/induction\/ConstructorShape$.html#IdShape", "kind" : "object"}, {"label" : "IdShape", "tail" : "", "member" : "provingground.induction.ConstructorShape.IdShape", "link" : "provingground\/induction\/ConstructorShape$.html#IdShape[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H]]extendsConstructorShape[shapeless.HNil,H,H]withProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/ConstructorShape$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/ConstructorShape$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/ConstructorShape$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/ConstructorShape$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/ConstructorShape$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/ConstructorShape$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/ConstructorShape$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorShape$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorShape$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorShape$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/ConstructorShape$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/ConstructorShape$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/ConstructorShape$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/ConstructorShape$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/ConstructorShape$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/ConstructorShape$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/ConstructorShape$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/ConstructorShape$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/ConstructorShape$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/induction\/ConstructorShape.html", "kind" : "trait"}, {"name" : "provingground.induction.ConstructorTL", "shortDescription" : "an introduction rule for an inductive type", "members_case class" : [{"member" : "provingground.induction.ConstructorTL#<init>", "error" : "unsupported entity"}, {"label" : "W", "tail" : ": Typ[H]", "member" : "provingground.induction.ConstructorTL.W", "link" : "provingground\/induction\/ConstructorTL.html#W:provingground.HoTT.Typ[H]", "kind" : "val"}, {"label" : "shape", "tail" : ": ConstructorShape[S, H, ConstructorType]", "member" : "provingground.induction.ConstructorTL.shape", "link" : "provingground\/induction\/ConstructorTL.html#shape:provingground.induction.ConstructorShape[S,H,ConstructorType]", "kind" : "val"}, {"label" : "name", "tail" : ": AnySym", "member" : "provingground.induction.ConstructorTL.name", "link" : "provingground\/induction\/ConstructorTL.html#name:provingground.HoTT.AnySym", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/ConstructorTL.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/ConstructorTL.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/ConstructorTL.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/ConstructorTL.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/ConstructorTL.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/ConstructorTL.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/ConstructorTL.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorTL.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorTL.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorTL.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/ConstructorTL.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/ConstructorTL.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/ConstructorTL.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/ConstructorTL.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/ConstructorTL.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/ConstructorTL.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/induction\/ConstructorTL.html", "kind" : "case class"}, {"name" : "provingground.induction.ConstructorTypTL", "shortDescription" : "an introduction rule shape together with the iductive type typ being defined.", "object" : "provingground\/induction\/ConstructorTypTL$.html", "members_object" : [{"label" : "getExst", "tail" : "(w: Typ[Term], cnstTyp: Typ[Term]): Exst", "member" : "provingground.induction.ConstructorTypTL.getExst", "link" : "provingground\/induction\/ConstructorTypTL$.html#getExst(w:provingground.HoTT.Typ[provingground.HoTT.Term],cnstTyp:provingground.HoTT.Typ[provingground.HoTT.Term]):provingground.induction.ConstructorTypTL.Exst", "kind" : "def"}, {"label" : "Exst", "tail" : "", "member" : "provingground.induction.ConstructorTypTL.Exst", "link" : "provingground\/induction\/ConstructorTypTL$.html#Exst", "kind" : "object"}, {"label" : "Exst", "tail" : "", "member" : "provingground.induction.ConstructorTypTL.Exst", "link" : "provingground\/induction\/ConstructorTypTL$.html#ExstextendsAnyRef", "kind" : "sealed trait"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/ConstructorTypTL$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/ConstructorTypTL$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/ConstructorTypTL$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/ConstructorTypTL$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/ConstructorTypTL$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/ConstructorTypTL$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/ConstructorTypTL$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorTypTL$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorTypTL$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorTypTL$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/ConstructorTypTL$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/ConstructorTypTL$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/ConstructorTypTL$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/ConstructorTypTL$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/ConstructorTypTL$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/ConstructorTypTL$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/ConstructorTypTL$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/ConstructorTypTL$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/ConstructorTypTL$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "~>>:", "tail" : "(thatVar: H): ConstructorTypTL[::[CnstDepFuncConsShape.type, S], H, FuncLike[H, ConstructorType]]", "member" : "provingground.induction.ConstructorTypTL.~>>:", "link" : "provingground\/induction\/ConstructorTypTL.html#~>>:(thatVar:H):provingground.induction.ConstructorTypTL[provingground.induction.ConstructorShape.CnstDepFuncConsShape.type::S,H,provingground.HoTT.FuncLike[H,ConstructorType]]", "kind" : "def"}, {"label" : "->>:", "tail" : "(that: Typ[T]): ConstructorTypTL[::[CnstFuncConsShape.type, S], H, Func[T, ConstructorType]]", "member" : "provingground.induction.ConstructorTypTL.->>:", "link" : "provingground\/induction\/ConstructorTypTL.html#->>:[T<:provingground.HoTT.Termwithprovingground.HoTT.Subs[T]](that:provingground.HoTT.Typ[T]):provingground.induction.ConstructorTypTL[provingground.induction.ConstructorShape.CnstFuncConsShape.type::S,H,provingground.HoTT.Func[T,ConstructorType]]", "kind" : "def"}, {"label" : "-->>:", "tail" : "(that: IterFuncShape[H, F]): ConstructorTypTL[::[FuncConsShape.type, S], H, Func[F, ConstructorType]]", "member" : "provingground.induction.ConstructorTypTL.-->>:", "link" : "provingground\/induction\/ConstructorTypTL.html#-->>:[F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F]](that:provingground.induction.IterFuncShape[H,F]):provingground.induction.ConstructorTypTL[provingground.induction.ConstructorShape.FuncConsShape.type::S,H,provingground.HoTT.Func[F,ConstructorType]]", "kind" : "def"}, {"label" : "-->>:", "tail" : "(that: Typ[H]): ConstructorTypTL[::[FuncConsShape.type, S], H, Func[H, ConstructorType]]", "member" : "provingground.induction.ConstructorTypTL.-->>:", "link" : "provingground\/induction\/ConstructorTypTL.html#-->>:(that:provingground.HoTT.Typ[H]):provingground.induction.ConstructorTypTL[provingground.induction.ConstructorShape.FuncConsShape.type::S,H,provingground.HoTT.Func[H,ConstructorType]]", "kind" : "def"}, {"label" : ":::", "tail" : "(name: AnySym): ConstructorTL[S, H, ConstructorType]", "member" : "provingground.induction.ConstructorTypTL.:::", "link" : "provingground\/induction\/ConstructorTypTL.html#:::(name:provingground.HoTT.AnySym):provingground.induction.ConstructorTL[S,H,ConstructorType]", "kind" : "def"}, {"member" : "provingground.induction.ConstructorTypTL#<init>", "error" : "unsupported entity"}, {"label" : "typ", "tail" : ": Typ[H]", "member" : "provingground.induction.ConstructorTypTL.typ", "link" : "provingground\/induction\/ConstructorTypTL.html#typ:provingground.HoTT.Typ[H]", "kind" : "val"}, {"label" : "shape", "tail" : ": ConstructorShape[S, H, ConstructorType]", "member" : "provingground.induction.ConstructorTypTL.shape", "link" : "provingground\/induction\/ConstructorTypTL.html#shape:provingground.induction.ConstructorShape[S,H,ConstructorType]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/ConstructorTypTL.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/ConstructorTypTL.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/ConstructorTypTL.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/ConstructorTypTL.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/ConstructorTypTL.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/ConstructorTypTL.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/ConstructorTypTL.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorTypTL.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorTypTL.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ConstructorTypTL.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/ConstructorTypTL.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/ConstructorTypTL.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/ConstructorTypTL.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/ConstructorTypTL.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/ConstructorTypTL.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/ConstructorTypTL.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/induction\/ConstructorTypTL.html", "kind" : "case class"}, {"name" : "provingground.induction.ExstInducDefn", "shortDescription" : "", "members_case class" : [{"label" : "sameAs", "tail" : "(that: ExstInducDefn): Boolean", "member" : "provingground.induction.ExstInducDefn.sameAs", "link" : "provingground\/induction\/ExstInducDefn.html#sameAs(that:provingground.induction.ExstInducDefn):Boolean", "kind" : "def"}, {"label" : "introsTypGroups", "tail" : "(): Map[Typ[Term], Int]", "member" : "provingground.induction.ExstInducDefn.introsTypGroups", "link" : "provingground\/induction\/ExstInducDefn.html#introsTypGroups:Map[provingground.HoTT.Typ[provingground.HoTT.Term],Int]", "kind" : "def"}, {"member" : "provingground.induction.ExstInducDefn#<init>", "error" : "unsupported entity"}, {"label" : "parameters", "tail" : ": Vector[Term]", "member" : "provingground.induction.ExstInducDefn.parameters", "link" : "provingground\/induction\/ExstInducDefn.html#parameters:Vector[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "ind", "tail" : ": ExstInducStruc", "member" : "provingground.induction.ExstInducDefn.ind", "link" : "provingground\/induction\/ExstInducDefn.html#ind:provingground.induction.ExstInducStruc", "kind" : "val"}, {"label" : "intros", "tail" : ": Vector[Term]", "member" : "provingground.induction.ExstInducDefn.intros", "link" : "provingground\/induction\/ExstInducDefn.html#intros:Vector[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "typFamily", "tail" : ": Term", "member" : "provingground.induction.ExstInducDefn.typFamily", "link" : "provingground\/induction\/ExstInducDefn.html#typFamily:provingground.HoTT.Term", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/ExstInducDefn.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/ExstInducDefn.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/ExstInducDefn.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/ExstInducDefn.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/ExstInducDefn.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/ExstInducDefn.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/ExstInducDefn.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ExstInducDefn.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ExstInducDefn.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ExstInducDefn.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/ExstInducDefn.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/ExstInducDefn.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/ExstInducDefn.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/ExstInducDefn.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/ExstInducDefn.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/ExstInducDefn.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/induction\/ExstInducDefn.html", "kind" : "case class"}, {"name" : "provingground.induction.ExstInducStruc", "members_trait" : [{"label" : "||", "tail" : "(that: ExstInducStruc): OrElse", "member" : "provingground.induction.ExstInducStruc.||", "link" : "provingground\/induction\/ExstInducStruc.html#||(that:provingground.induction.ExstInducStruc):provingground.induction.ExstInducStruc.OrElse", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/ExstInducStruc.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/ExstInducStruc.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/ExstInducStruc.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/ExstInducStruc.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/ExstInducStruc.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/ExstInducStruc.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/ExstInducStruc.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ExstInducStruc.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ExstInducStruc.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ExstInducStruc.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/ExstInducStruc.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/ExstInducStruc.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/ExstInducStruc.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/ExstInducStruc.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/ExstInducStruc.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/ExstInducStruc.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/ExstInducStruc.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/ExstInducStruc.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/ExstInducStruc.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "constants", "tail" : ": Vector[Term]", "member" : "provingground.induction.ExstInducStruc.constants", "link" : "provingground\/induction\/ExstInducStruc.html#constants:Vector[provingground.HoTT.Term]", "kind" : "abstract val"}, {"label" : "inducOpt", "tail" : "(dom: Term, cod: Term): Option[Term]", "member" : "provingground.induction.ExstInducStruc.inducOpt", "link" : "provingground\/induction\/ExstInducStruc.html#inducOpt(dom:provingground.HoTT.Term,cod:provingground.HoTT.Term):Option[provingground.HoTT.Term]", "kind" : "abstract def"}, {"label" : "recOpt", "tail" : "(dom: Term, cod: Typ[C]): Option[Term]", "member" : "provingground.induction.ExstInducStruc.recOpt", "link" : "provingground\/induction\/ExstInducStruc.html#recOpt[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C]](dom:provingground.HoTT.Term,cod:provingground.HoTT.Typ[C]):Option[provingground.HoTT.Term]", "kind" : "abstract def"}, {"label" : "subs", "tail" : "(x: Term, y: Term): ExstInducStruc", "member" : "provingground.induction.ExstInducStruc.subs", "link" : "provingground\/induction\/ExstInducStruc.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.induction.ExstInducStruc", "kind" : "abstract def"}], "shortDescription" : "term level inductive structure for runtime contexts", "object" : "provingground\/induction\/ExstInducStruc$.html", "members_object" : [{"label" : "Base", "tail" : "", "member" : "provingground.induction.ExstInducStruc.Base", "link" : "provingground\/induction\/ExstInducStruc$.html#Base", "kind" : "object"}, {"label" : "getIndexed", "tail" : "(typF: Term, intros: Vector[Term]): ExstInducStruc", "member" : "provingground.induction.ExstInducStruc.getIndexed", "link" : "provingground\/induction\/ExstInducStruc$.html#getIndexed(typF:provingground.HoTT.Term,intros:Vector[provingground.HoTT.Term]):provingground.induction.ExstInducStruc", "kind" : "def"}, {"label" : "IndConsSeqExst", "tail" : "", "member" : "provingground.induction.ExstInducStruc.IndConsSeqExst", "link" : "provingground\/induction\/ExstInducStruc$.html#IndConsSeqExst[SS<:shapeless.HList,H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],Index<:shapeless.HList,Intros<:shapeless.HList]extendsExstInducStrucwithProductwithSerializable", "kind" : "case class"}, {"label" : "get", "tail" : "(typ: Term, intros: Vector[Term]): ExstInducStruc", "member" : "provingground.induction.ExstInducStruc.get", "link" : "provingground\/induction\/ExstInducStruc$.html#get(typ:provingground.HoTT.Term,intros:Vector[provingground.HoTT.Term]):provingground.induction.ExstInducStruc", "kind" : "def"}, {"label" : "ConsSeqExst", "tail" : "", "member" : "provingground.induction.ExstInducStruc.ConsSeqExst", "link" : "provingground\/induction\/ExstInducStruc$.html#ConsSeqExst[SS<:shapeless.HList,H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],Intros<:shapeless.HList]extendsExstInducStrucwithProductwithSerializable", "kind" : "case class"}, {"label" : "LambdaInduc", "tail" : "", "member" : "provingground.induction.ExstInducStruc.LambdaInduc", "link" : "provingground\/induction\/ExstInducStruc$.html#LambdaInducextendsExstInducStrucwithProductwithSerializable", "kind" : "case class"}, {"label" : "OrElse", "tail" : "", "member" : "provingground.induction.ExstInducStruc.OrElse", "link" : "provingground\/induction\/ExstInducStruc$.html#OrElseextendsExstInducStrucwithProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/ExstInducStruc$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/ExstInducStruc$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/ExstInducStruc$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/ExstInducStruc$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/ExstInducStruc$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/ExstInducStruc$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/ExstInducStruc$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ExstInducStruc$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ExstInducStruc$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/ExstInducStruc$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/ExstInducStruc$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/ExstInducStruc$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/ExstInducStruc$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/ExstInducStruc$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/ExstInducStruc$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/ExstInducStruc$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/ExstInducStruc$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/ExstInducStruc$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/ExstInducStruc$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/induction\/ExstInducStruc.html", "kind" : "trait"}, {"name" : "provingground.induction.implicits", "shortDescription" : "", "object" : "provingground\/induction\/package$$implicits$.html", "members_object" : [{"label" : "TermListOp", "tail" : "", "member" : "provingground.TermListImplicits.TermListOp", "link" : "provingground\/TermListImplicits.html#TermListOp[A]extendsTermListImplicits.this.SubstOp[A]", "kind" : "implicit class"}, {"label" : "SubstOp", "tail" : "", "member" : "provingground.SubstImplicits.SubstOp", "link" : "provingground\/SubstImplicits.html#SubstOp[A]extendsAnyRef", "kind" : "implicit class"}, {"label" : "IndexedPair", "tail" : "", "member" : "provingground.induction.InductionImplicits.IndexedPair", "link" : "provingground\/induction\/InductionImplicits.html#IndexedPair[F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],Index<:shapeless.HList]extendsAnyRef", "kind" : "implicit class"}, {"label" : "IndexedFamily", "tail" : "", "member" : "provingground.induction.InductionImplicits.IndexedFamily", "link" : "provingground\/induction\/InductionImplicits.html#IndexedFamily[F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],Index<:shapeless.HList]extendsAnyRef", "kind" : "implicit class"}, {"label" : "IterFuncTypHead", "tail" : "", "member" : "provingground.induction.InductionImplicits.IterFuncTypHead", "link" : "provingground\/induction\/InductionImplicits.html#IterFuncTypHead[O<:provingground.HoTT.Termwithprovingground.HoTT.Subs[O]]extendsAnyRef", "kind" : "implicit class"}, {"label" : "TypAsSeqHead", "tail" : "", "member" : "provingground.induction.InductionImplicits.TypAsSeqHead", "link" : "provingground\/induction\/InductionImplicits.html#TypAsSeqHead[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H]]extendsAnyRef", "kind" : "implicit class"}, {"label" : "ConstructorHead", "tail" : "", "member" : "provingground.induction.InductionImplicits.ConstructorHead", "link" : "provingground\/induction\/InductionImplicits.html#ConstructorHead[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H]]extendsAnyRef", "kind" : "implicit class"}, {"label" : "stringSym", "tail" : "(name: String): Name", "member" : "provingground.induction.InductionImplicits.stringSym", "link" : "provingground\/induction\/package$$implicits$.html#stringSym(name:String):provingground.HoTT.Name", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/package$$implicits$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/package$$implicits$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/package$$implicits$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/package$$implicits$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/package$$implicits$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/package$$implicits$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/package$$implicits$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/package$$implicits$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/package$$implicits$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/package$$implicits$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/package$$implicits$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/package$$implicits$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/package$$implicits$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/package$$implicits$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/package$$implicits$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/package$$implicits$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/package$$implicits$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/package$$implicits$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/package$$implicits$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.induction.IndexedConstructor", "shortDescription" : "", "object" : "provingground\/induction\/IndexedConstructor$.html", "members_object" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/IndexedConstructor$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/IndexedConstructor$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/IndexedConstructor$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/IndexedConstructor$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/IndexedConstructor$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/IndexedConstructor$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/IndexedConstructor$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructor$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructor$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructor$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/IndexedConstructor$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/IndexedConstructor$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/IndexedConstructor$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/IndexedConstructor$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/IndexedConstructor$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/IndexedConstructor$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/IndexedConstructor$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/IndexedConstructor$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/IndexedConstructor$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"member" : "provingground.induction.IndexedConstructor#<init>", "error" : "unsupported entity"}, {"label" : "shape", "tail" : ": IndexedConstructorShape[S, H, F, ConstructorType, Index]", "member" : "provingground.induction.IndexedConstructor.shape", "link" : "provingground\/induction\/IndexedConstructor.html#shape:provingground.induction.IndexedConstructorShape[S,H,F,ConstructorType,Index]", "kind" : "val"}, {"label" : "name", "tail" : ": AnySym", "member" : "provingground.induction.IndexedConstructor.name", "link" : "provingground\/induction\/IndexedConstructor.html#name:provingground.HoTT.AnySym", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/IndexedConstructor.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/IndexedConstructor.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/IndexedConstructor.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/IndexedConstructor.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/IndexedConstructor.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/IndexedConstructor.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/IndexedConstructor.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructor.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructor.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructor.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/IndexedConstructor.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/IndexedConstructor.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/IndexedConstructor.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/IndexedConstructor.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/IndexedConstructor.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/IndexedConstructor.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/induction\/IndexedConstructor.html", "kind" : "case class"}, {"name" : "provingground.induction.IndexedConstructorPatternMap", "shortDescription" : "Introduction rule for an indexed inductive type,as in IndexedConstructorShape with the scala type of the codomain specified;hence the scala type of the recurion and induction types are determined.", "object" : "provingground\/induction\/IndexedConstructorPatternMap$.html", "members_class" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/IndexedConstructorPatternMap.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/IndexedConstructorPatternMap.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/IndexedConstructorPatternMap.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/IndexedConstructorPatternMap.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/IndexedConstructorPatternMap.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/IndexedConstructorPatternMap.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/IndexedConstructorPatternMap.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructorPatternMap.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructorPatternMap.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructorPatternMap.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/IndexedConstructorPatternMap.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/IndexedConstructorPatternMap.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/IndexedConstructorPatternMap.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/IndexedConstructorPatternMap.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/IndexedConstructorPatternMap.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/IndexedConstructorPatternMap.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/IndexedConstructorPatternMap.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/IndexedConstructorPatternMap.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/IndexedConstructorPatternMap.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "univLevel", "tail" : ": Int", "member" : "provingground.induction.IndexedConstructorPatternMap.univLevel", "link" : "provingground\/induction\/IndexedConstructorPatternMap.html#univLevel:Int", "kind" : "abstract val"}, {"label" : "inducDefCase", "tail" : "(cons: ConstructorType, data: InducDataType, f: ⇒ IDF): (H) ⇒ Option[Cod]", "member" : "provingground.induction.IndexedConstructorPatternMap.inducDefCase", "link" : "provingground\/induction\/IndexedConstructorPatternMap.html#inducDefCase(cons:ConstructorType,data:InducDataType,f:=>IDF):H=>Option[Cod]", "kind" : "abstract def"}, {"label" : "recDefCase", "tail" : "(cons: ConstructorType, data: RecDataType, f: ⇒ IF): (H) ⇒ Option[Cod]", "member" : "provingground.induction.IndexedConstructorPatternMap.recDefCase", "link" : "provingground\/induction\/IndexedConstructorPatternMap.html#recDefCase(cons:ConstructorType,data:RecDataType,f:=>IF):H=>Option[Cod]", "kind" : "abstract def"}, {"label" : "inducDataTyp", "tail" : "(w: Fb, xs: IDFT)(cons: ConstructorType): Typ[InducDataType]", "member" : "provingground.induction.IndexedConstructorPatternMap.inducDataTyp", "link" : "provingground\/induction\/IndexedConstructorPatternMap.html#inducDataTyp(w:Fb,xs:IDFT)(cons:ConstructorType):provingground.HoTT.Typ[InducDataType]", "kind" : "abstract def"}, {"label" : "recDataTyp", "tail" : "(wb: Fb, x: Typ[Cod]): Typ[RecDataType]", "member" : "provingground.induction.IndexedConstructorPatternMap.recDataTyp", "link" : "provingground\/induction\/IndexedConstructorPatternMap.html#recDataTyp(wb:Fb,x:provingground.HoTT.Typ[Cod]):provingground.HoTT.Typ[RecDataType]", "kind" : "abstract def"}, {"label" : "apply", "tail" : "(tp: Fb): Typ[ConstructorType]", "member" : "provingground.induction.IndexedConstructorPatternMap.apply", "link" : "provingground\/induction\/IndexedConstructorPatternMap.html#apply(tp:Fb):provingground.HoTT.Typ[ConstructorType]", "kind" : "abstract def"}, {"label" : "subs", "tail" : "(x: Term, y: Term): IndexedConstructorPatternMap[Cod, ConstructorType, H, RecDataType, InducDataType, Fb, Index, IF, IDF, IDFT]", "member" : "provingground.induction.IndexedConstructorPatternMap.subs", "link" : "provingground\/induction\/IndexedConstructorPatternMap.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.induction.IndexedConstructorPatternMap[Cod,ConstructorType,H,RecDataType,InducDataType,Fb,Index,IF,IDF,IDFT]", "kind" : "abstract def"}, {"label" : "family", "tail" : ": TypFamilyMap[H, Fb, Cod, Index, IF, IDF, IDFT]", "member" : "provingground.induction.IndexedConstructorPatternMap.family", "link" : "provingground\/induction\/IndexedConstructorPatternMap.html#family:provingground.induction.TypFamilyMap[H,Fb,Cod,Index,IF,IDF,IDFT]", "kind" : "abstract val"}], "members_object" : [{"label" : "IndexedCnstDepFncPtnMap", "tail" : "", "member" : "provingground.induction.IndexedConstructorPatternMap.IndexedCnstDepFncPtnMap", "link" : "provingground\/induction\/IndexedConstructorPatternMap$.html#IndexedCnstDepFncPtnMap[T<:provingground.HoTT.Termwithprovingground.HoTT.Subs[T],Cod<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Cod],HC<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HC],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],HR<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HR],HI<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HI],Fb<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Fb],Index<:shapeless.HList,IF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IF],IDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDF],IDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT]]extendsIndexedConstructorPatternMap.IndexedRecursiveConstructorPatternMap[Cod,T,HC,provingground.HoTT.FuncLike[T,HC],H,provingground.HoTT.FuncLike[T,HR],provingground.HoTT.FuncLike[T,HI],HR,HI,Fb,Index,IF,IDF,IDFT]withProductwithSerializable", "kind" : "case class"}, {"label" : "IndexedCnstFncPtnMap", "tail" : "", "member" : "provingground.induction.IndexedConstructorPatternMap.IndexedCnstFncPtnMap", "link" : "provingground\/induction\/IndexedConstructorPatternMap$.html#IndexedCnstFncPtnMap[T<:provingground.HoTT.Termwithprovingground.HoTT.Subs[T],Cod<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Cod],HC<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HC],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],HR<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HR],HI<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HI],Fb<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Fb],Index<:shapeless.HList,IF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IF],IDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDF],IDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT]]extendsIndexedConstructorPatternMap.IndexedRecursiveConstructorPatternMap[Cod,T,HC,provingground.HoTT.Func[T,HC],H,provingground.HoTT.Func[T,HR],provingground.HoTT.FuncLike[T,HI],HR,HI,Fb,Index,IF,IDF,IDFT]withProductwithSerializable", "kind" : "case class"}, {"label" : "IndexedIndexedFuncPtnMap", "tail" : "", "member" : "provingground.induction.IndexedConstructorPatternMap.IndexedIndexedFuncPtnMap", "link" : "provingground\/induction\/IndexedConstructorPatternMap$.html#IndexedIndexedFuncPtnMap[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],HC<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HC],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],HR<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HR],HI<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HI],TT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TT],DT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[DT],Fb<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Fb],Index<:shapeless.HList,IF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IF],IDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDF],IDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT]]extendsIndexedConstructorPatternMap.IndexedRecursiveConstructorPatternMap[C,F,HC,provingground.HoTT.Func[F,HC],H,provingground.HoTT.Func[F,provingground.HoTT.Func[TT,HR]],provingground.HoTT.FuncLike[F,provingground.HoTT.Func[DT,HI]],HR,HI,Fb,Index,IF,IDF,IDFT]withProductwithSerializable", "kind" : "case class"}, {"label" : "IndexedFuncPtnMap", "tail" : "", "member" : "provingground.induction.IndexedConstructorPatternMap.IndexedFuncPtnMap", "link" : "provingground\/induction\/IndexedConstructorPatternMap$.html#IndexedFuncPtnMap[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],HC<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HC],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],HR<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HR],HI<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HI],TT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TT],DT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[DT],Fb<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Fb],Index<:shapeless.HList,IF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IF],IDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDF],IDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT]]extendsIndexedConstructorPatternMap.IndexedRecursiveConstructorPatternMap[C,F,HC,provingground.HoTT.Func[F,HC],H,provingground.HoTT.Func[F,provingground.HoTT.Func[TT,HR]],provingground.HoTT.FuncLike[F,provingground.HoTT.Func[DT,HI]],HR,HI,Fb,Index,IF,IDF,IDFT]withProductwithSerializable", "kind" : "case class"}, {"label" : "IndexedRecursiveConstructorPatternMap", "tail" : "", "member" : "provingground.induction.IndexedConstructorPatternMap.IndexedRecursiveConstructorPatternMap", "link" : "provingground\/induction\/IndexedConstructorPatternMap$.html#IndexedRecursiveConstructorPatternMap[Cod<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Cod],ArgType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[ArgType],HeadConstructorType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HeadConstructorType],CT<:provingground.HoTT.FuncLike[ArgType,HeadConstructorType]withprovingground.HoTT.Subs[CT],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],RecDataType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[RecDataType],InducDataType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[InducDataType],HeadRecDataType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HeadRecDataType],HeadInducDataType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HeadInducDataType],Fb<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Fb],Index<:shapeless.HList,IF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IF],IDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDF],IDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT]]extendsIndexedConstructorPatternMap[Cod,CT,H,RecDataType,InducDataType,Fb,Index,IF,IDF,IDFT]", "kind" : "sealed abstract class"}, {"label" : "IndexedIdMap", "tail" : "", "member" : "provingground.induction.IndexedConstructorPatternMap.IndexedIdMap", "link" : "provingground\/induction\/IndexedConstructorPatternMap$.html#IndexedIdMap[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],Fb<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Fb],Index<:shapeless.HList,IF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IF],IDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDF],IDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT]]extendsIndexedConstructorPatternMap[C,H,H,C,C,Fb,Index,IF,IDF,IDFT]withProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/IndexedConstructorPatternMap$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/IndexedConstructorPatternMap$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/IndexedConstructorPatternMap$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/IndexedConstructorPatternMap$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/IndexedConstructorPatternMap$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/IndexedConstructorPatternMap$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/IndexedConstructorPatternMap$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructorPatternMap$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructorPatternMap$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructorPatternMap$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/IndexedConstructorPatternMap$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/IndexedConstructorPatternMap$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/IndexedConstructorPatternMap$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/IndexedConstructorPatternMap$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/IndexedConstructorPatternMap$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/IndexedConstructorPatternMap$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/IndexedConstructorPatternMap$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/IndexedConstructorPatternMap$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/IndexedConstructorPatternMap$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/induction\/IndexedConstructorPatternMap.html", "kind" : "class"}, {"name" : "provingground.induction.IndexedConstructorPatternMapper", "shortDescription" : "bridge between IndexedConstructorShape and IndexedConstructorPatternMap", "object" : "provingground\/induction\/IndexedConstructorPatternMapper$.html", "members_class" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/IndexedConstructorPatternMapper.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/IndexedConstructorPatternMapper.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/IndexedConstructorPatternMapper.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/IndexedConstructorPatternMapper.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/IndexedConstructorPatternMapper.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/IndexedConstructorPatternMapper.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/IndexedConstructorPatternMapper.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructorPatternMapper.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructorPatternMapper.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructorPatternMapper.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/IndexedConstructorPatternMapper.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/IndexedConstructorPatternMapper.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/IndexedConstructorPatternMapper.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/IndexedConstructorPatternMapper.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/IndexedConstructorPatternMapper.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/IndexedConstructorPatternMapper.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/IndexedConstructorPatternMapper.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/IndexedConstructorPatternMapper.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/IndexedConstructorPatternMapper.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "mapper", "tail" : "(fmlyMapper: TypFamilyMapper[H, F, Cod, Index, IF, IDF, IDFT]): (IndexedConstructorShape[S, H, F, ConstructorType, Index]) ⇒ IndexedConstructorPatternMap[Cod, ConstructorType, H, RecDataType, InducDataType, F, Index, IF, IDF, IDFT]", "member" : "provingground.induction.IndexedConstructorPatternMapper.mapper", "link" : "provingground\/induction\/IndexedConstructorPatternMapper.html#mapper(implicitfmlyMapper:provingground.induction.TypFamilyMapper[H,F,Cod,Index,IF,IDF,IDFT]):provingground.induction.IndexedConstructorShape[S,H,F,ConstructorType,Index]=>provingground.induction.IndexedConstructorPatternMap[Cod,ConstructorType,H,RecDataType,InducDataType,F,Index,IF,IDF,IDFT]", "kind" : "abstract def"}], "members_object" : [{"label" : "indexedCnstDepFncPtnMapper", "tail" : "(arg0: TermList[Index], head: IndexedConstructorPatternMapper[HShape, Cod, HC, H, HR, HI, Fb, Index, IF, IDF, IDFT]): IndexedConstructorPatternMapper[::[IndexedCnstDepFuncConsShape.type, HShape], Cod, FuncLike[T, HC], H, FuncLike[T, HR], FuncLike[T, HI], Fb, Index, IF, IDF, IDFT]", "member" : "provingground.induction.IndexedConstructorPatternMapper.indexedCnstDepFncPtnMapper", "link" : "provingground\/induction\/IndexedConstructorPatternMapper$.html#indexedCnstDepFncPtnMapper[HShape<:shapeless.HList,T<:provingground.HoTT.Termwithprovingground.HoTT.Subs[T],Cod<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Cod],HC<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HC],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],HR<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HR],HI<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HI],Fb<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Fb],Index<:shapeless.HList,IF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IF],IDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDF],IDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT]](implicitevidence$20:provingground.TermList[Index],implicithead:provingground.induction.IndexedConstructorPatternMapper[HShape,Cod,HC,H,HR,HI,Fb,Index,IF,IDF,IDFT]):provingground.induction.IndexedConstructorPatternMapper[provingground.induction.IndexedConstructorShape.IndexedCnstDepFuncConsShape.type::HShape,Cod,provingground.HoTT.FuncLike[T,HC],H,provingground.HoTT.FuncLike[T,HR],provingground.HoTT.FuncLike[T,HI],Fb,Index,IF,IDF,IDFT]", "kind" : "implicit def"}, {"label" : "indexedCnstFncPtnMapper", "tail" : "(arg0: TermList[Index], head: IndexedConstructorPatternMapper[HShape, Cod, HC, H, HR, HI, Fb, Index, IF, IDF, IDFT]): IndexedConstructorPatternMapper[::[IndexedCnstFuncConsShape.type, HShape], Cod, Func[T, HC], H, Func[T, HR], FuncLike[T, HI], Fb, Index, IF, IDF, IDFT]", "member" : "provingground.induction.IndexedConstructorPatternMapper.indexedCnstFncPtnMapper", "link" : "provingground\/induction\/IndexedConstructorPatternMapper$.html#indexedCnstFncPtnMapper[HShape<:shapeless.HList,T<:provingground.HoTT.Termwithprovingground.HoTT.Subs[T],Cod<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Cod],HC<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HC],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],HR<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HR],HI<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HI],Fb<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Fb],Index<:shapeless.HList,IF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IF],IDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDF],IDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT]](implicitevidence$19:provingground.TermList[Index],implicithead:provingground.induction.IndexedConstructorPatternMapper[HShape,Cod,HC,H,HR,HI,Fb,Index,IF,IDF,IDFT]):provingground.induction.IndexedConstructorPatternMapper[provingground.induction.IndexedConstructorShape.IndexedCnstFuncConsShape.type::HShape,Cod,provingground.HoTT.Func[T,HC],H,provingground.HoTT.Func[T,HR],provingground.HoTT.FuncLike[T,HI],Fb,Index,IF,IDF,IDFT]", "kind" : "implicit def"}, {"label" : "indexedIndexedFuncPtnMap", "tail" : "(arg0: TermList[Index], tail: IndexedIterFuncPtnMapper[H, Fb, Index, C, F, TT, DT, IF, IDF, IDFT], head: IndexedConstructorPatternMapper[HShape, C, HC, H, HR, HI, Fb, Index, IF, IDF, IDFT]): IndexedConstructorPatternMapper[::[IndexedIndexedFuncConsShape.type, HShape], C, Func[F, HC], H, Func[F, Func[TT, HR]], FuncLike[F, Func[DT, HI]], Fb, Index, IF, IDF, IDFT]", "member" : "provingground.induction.IndexedConstructorPatternMapper.indexedIndexedFuncPtnMap", "link" : "provingground\/induction\/IndexedConstructorPatternMapper$.html#indexedIndexedFuncPtnMap[HShape<:shapeless.HList,C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],HC<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HC],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],HR<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HR],HI<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HI],TT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TT],DT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[DT],Fb<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Fb],Index<:shapeless.HList,IF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IF],IDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDF],IDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT]](implicitevidence$18:provingground.TermList[Index],implicittail:provingground.induction.IndexedIterFuncPtnMapper[H,Fb,Index,C,F,TT,DT,IF,IDF,IDFT],implicithead:provingground.induction.IndexedConstructorPatternMapper[HShape,C,HC,H,HR,HI,Fb,Index,IF,IDF,IDFT]):provingground.induction.IndexedConstructorPatternMapper[provingground.induction.IndexedConstructorShape.IndexedIndexedFuncConsShape.type::HShape,C,provingground.HoTT.Func[F,HC],H,provingground.HoTT.Func[F,provingground.HoTT.Func[TT,HR]],provingground.HoTT.FuncLike[F,provingground.HoTT.Func[DT,HI]],Fb,Index,IF,IDF,IDFT]", "kind" : "implicit def"}, {"label" : "indexedFuncPtnMap", "tail" : "(arg0: TermList[Index], tail: IterFuncMapper[H, C, FI, TT, DT], head: IndexedConstructorPatternMapper[HShape, C, HC, H, HR, HI, Fb, Index, IF, IDF, IDFT]): IndexedConstructorPatternMapper[::[IndexedFuncConsShape.type, HShape], C, Func[FI, HC], H, Func[FI, Func[TT, HR]], FuncLike[FI, Func[DT, HI]], Fb, Index, IF, IDF, IDFT]", "member" : "provingground.induction.IndexedConstructorPatternMapper.indexedFuncPtnMap", "link" : "provingground\/induction\/IndexedConstructorPatternMapper$.html#indexedFuncPtnMap[HShape<:shapeless.HList,C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],FI<:provingground.HoTT.Termwithprovingground.HoTT.Subs[FI],HC<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HC],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],HR<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HR],HI<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HI],TT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TT],DT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[DT],Fb<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Fb],Index<:shapeless.HList,IF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IF],IDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDF],IDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT]](implicitevidence$17:provingground.TermList[Index],implicittail:provingground.induction.IterFuncMapper[H,C,FI,TT,DT],implicithead:provingground.induction.IndexedConstructorPatternMapper[HShape,C,HC,H,HR,HI,Fb,Index,IF,IDF,IDFT]):provingground.induction.IndexedConstructorPatternMapper[provingground.induction.IndexedConstructorShape.IndexedFuncConsShape.type::HShape,C,provingground.HoTT.Func[FI,HC],H,provingground.HoTT.Func[FI,provingground.HoTT.Func[TT,HR]],provingground.HoTT.FuncLike[FI,provingground.HoTT.Func[DT,HI]],Fb,Index,IF,IDF,IDFT]", "kind" : "implicit def"}, {"label" : "indexedIdMapper", "tail" : "(arg0: TermList[Index], family: TypFamilyMapper[H, F, C, Index, IF, IDF, IDFT]): IndexedConstructorPatternMapper[HNil, C, H, H, C, C, F, Index, IF, IDF, IDFT]", "member" : "provingground.induction.IndexedConstructorPatternMapper.indexedIdMapper", "link" : "provingground\/induction\/IndexedConstructorPatternMapper$.html#indexedIdMapper[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],Index<:shapeless.HList,IF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IF],IDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDF],IDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT]](implicitevidence$16:provingground.TermList[Index],implicitfamily:provingground.induction.TypFamilyMapper[H,F,C,Index,IF,IDF,IDFT]):provingground.induction.IndexedConstructorPatternMapper[shapeless.HNil,C,H,H,C,C,F,Index,IF,IDF,IDFT]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/IndexedConstructorPatternMapper$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/IndexedConstructorPatternMapper$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/IndexedConstructorPatternMapper$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/IndexedConstructorPatternMapper$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/IndexedConstructorPatternMapper$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/IndexedConstructorPatternMapper$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/IndexedConstructorPatternMapper$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructorPatternMapper$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructorPatternMapper$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructorPatternMapper$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/IndexedConstructorPatternMapper$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/IndexedConstructorPatternMapper$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/IndexedConstructorPatternMapper$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/IndexedConstructorPatternMapper$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/IndexedConstructorPatternMapper$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/IndexedConstructorPatternMapper$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/IndexedConstructorPatternMapper$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/IndexedConstructorPatternMapper$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/IndexedConstructorPatternMapper$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/induction\/IndexedConstructorPatternMapper.html", "kind" : "class"}, {"name" : "provingground.induction.IndexedConstructorSeqDom", "shortDescription" : "Essentially the definition of an indexed inductive type;", "object" : "provingground\/induction\/IndexedConstructorSeqDom$.html", "members_class" : [{"label" : "|:", "tail" : "(head: IndexedConstructor[HShape, H, F, HC, Index]): IndexedConstructorSeqDom[::[HShape, SS], H, F, Index, ::[HC, Intros]]", "member" : "provingground.induction.IndexedConstructorSeqDom.|:", "link" : "provingground\/induction\/IndexedConstructorSeqDom.html#|:[HShape<:shapeless.HList,HC<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HC]](head:provingground.induction.IndexedConstructor[HShape,H,F,HC,Index]):provingground.induction.IndexedConstructorSeqDom[HShape::SS,H,F,Index,HC::Intros]", "kind" : "def"}, {"label" : "inducE", "tail" : "(Xs: IDFT): InducType forSome {type InducType <: Term with Subs[InducType]}", "member" : "provingground.induction.IndexedConstructorSeqDom.inducE", "link" : "provingground\/induction\/IndexedConstructorSeqDom.html#inducE[IDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT]](Xs:IDFT):InducTypeforSome{typeInducType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[InducType]}", "kind" : "def"}, {"label" : "induc", "tail" : "(Xs: IDFT)(mapper: IndexedConstructorSeqMapper[SS, C, H, RecType, InducType, Intros, F, Index, IF, IDF, IDFT]): InducType", "member" : "provingground.induction.IndexedConstructorSeqDom.induc", "link" : "provingground\/induction\/IndexedConstructorSeqDom.html#induc[IDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],IF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IF],IDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDF],RecType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[RecType],InducType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[InducType]](Xs:IDFT)(implicitmapper:provingground.induction.IndexedConstructorSeqMapper[SS,C,H,RecType,InducType,Intros,F,Index,IF,IDF,IDFT]):InducType", "kind" : "def"}, {"label" : "getMapper", "tail" : "(X: Typ[C])(mapper: IndexedConstructorSeqMapper[SS, C, H, RecType, InducType, Intros, F, Index, IF, IDF, IDFT]): IndexedConstructorSeqMap[C, H, RecType, InducType, Intros, F, Index, IF, IDF, IDFT]", "member" : "provingground.induction.IndexedConstructorSeqDom.getMapper", "link" : "provingground\/induction\/IndexedConstructorSeqDom.html#getMapper[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],IDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT],IF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IF],IDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDF],RecType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[RecType],InducType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[InducType]](X:provingground.HoTT.Typ[C])(implicitmapper:provingground.induction.IndexedConstructorSeqMapper[SS,C,H,RecType,InducType,Intros,F,Index,IF,IDF,IDFT]):provingground.induction.IndexedConstructorSeqMap[C,H,RecType,InducType,Intros,F,Index,IF,IDF,IDFT]", "kind" : "def"}, {"label" : "getInduc", "tail" : "(X: Typ[C])(mapper: IndexedConstructorSeqMapper[SS, C, H, RecType, InducType, Intros, F, Index, IF, IDF, IDFT]): (IDFT) ⇒ InducType", "member" : "provingground.induction.IndexedConstructorSeqDom.getInduc", "link" : "provingground\/induction\/IndexedConstructorSeqDom.html#getInduc[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],IDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT],IF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IF],IDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDF],RecType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[RecType],InducType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[InducType]](X:provingground.HoTT.Typ[C])(implicitmapper:provingground.induction.IndexedConstructorSeqMapper[SS,C,H,RecType,InducType,Intros,F,Index,IF,IDF,IDFT]):IDFT=>InducType", "kind" : "def"}, {"label" : "rec", "tail" : "(X: Typ[C])(mapper: IndexedConstructorSeqMapper[SS, C, H, RecType, InducType, Intros, F, Index, IF, IDF, IDFT]): RecType", "member" : "provingground.induction.IndexedConstructorSeqDom.rec", "link" : "provingground\/induction\/IndexedConstructorSeqDom.html#rec[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],IF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IF],IDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDF],IDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT],RecType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[RecType],InducType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[InducType]](X:provingground.HoTT.Typ[C])(implicitmapper:provingground.induction.IndexedConstructorSeqMapper[SS,C,H,RecType,InducType,Intros,F,Index,IF,IDF,IDFT]):RecType", "kind" : "def"}, {"label" : "recE", "tail" : "(x: Typ[C]): RecType forSome {type RecType <: Term with Subs[RecType]}", "member" : "provingground.induction.IndexedConstructorSeqDom.recE", "link" : "provingground\/induction\/IndexedConstructorSeqDom.html#recE[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C]](x:provingground.HoTT.Typ[C]):RecTypeforSome{typeRecType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[RecType]}", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/IndexedConstructorSeqDom.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/IndexedConstructorSeqDom.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/IndexedConstructorSeqDom.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/IndexedConstructorSeqDom.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/IndexedConstructorSeqDom.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/IndexedConstructorSeqDom.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/IndexedConstructorSeqDom.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructorSeqDom.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructorSeqDom.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructorSeqDom.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/IndexedConstructorSeqDom.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/IndexedConstructorSeqDom.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/IndexedConstructorSeqDom.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/IndexedConstructorSeqDom.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/IndexedConstructorSeqDom.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/IndexedConstructorSeqDom.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/IndexedConstructorSeqDom.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/IndexedConstructorSeqDom.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/IndexedConstructorSeqDom.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "subs", "tail" : "(x: Term, y: Term): IndexedConstructorSeqDom[SS, H, F, Index, Intros]", "member" : "provingground.induction.IndexedConstructorSeqDom.subs", "link" : "provingground\/induction\/IndexedConstructorSeqDom.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.induction.IndexedConstructorSeqDom[SS,H,F,Index,Intros]", "kind" : "abstract def"}, {"label" : "mapped", "tail" : "(fmlyMapper: TypFamilyMapper[H, F, C, Index, IF, IDF, IDFT]): IndexedConstructorSeqMap[C, H, RecType, InducType, Intros, F, Index, IF, IDF, IDFT] forSome {type RecType <: Term with Subs[RecType], type InducType <: Term with Subs[InducType]}", "member" : "provingground.induction.IndexedConstructorSeqDom.mapped", "link" : "provingground\/induction\/IndexedConstructorSeqDom.html#mapped[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],IF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IF],IDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDF],IDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT]](implicitfmlyMapper:provingground.induction.TypFamilyMapper[H,F,C,Index,IF,IDF,IDFT]):provingground.induction.IndexedConstructorSeqMap[C,H,RecType,InducType,Intros,F,Index,IF,IDF,IDFT]forSome{typeRecType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[RecType];typeInducType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[InducType]}", "kind" : "abstract def"}, {"label" : "intros", "tail" : ": Intros", "member" : "provingground.induction.IndexedConstructorSeqDom.intros", "link" : "provingground\/induction\/IndexedConstructorSeqDom.html#intros:Intros", "kind" : "abstract val"}, {"label" : "W", "tail" : ": F", "member" : "provingground.induction.IndexedConstructorSeqDom.W", "link" : "provingground\/induction\/IndexedConstructorSeqDom.html#W:F", "kind" : "abstract val"}, {"label" : "family", "tail" : ": TypFamilyPtn[H, F, Index]", "member" : "provingground.induction.IndexedConstructorSeqDom.family", "link" : "provingground\/induction\/IndexedConstructorSeqDom.html#family:provingground.induction.TypFamilyPtn[H,F,Index]", "kind" : "abstract val"}], "members_object" : [{"label" : "Cons", "tail" : "", "member" : "provingground.induction.IndexedConstructorSeqDom.Cons", "link" : "provingground\/induction\/IndexedConstructorSeqDom$.html#Cons[TSS<:shapeless.HList,HShape<:shapeless.HList,H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],HC<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HC],Index<:shapeless.HList,TIntro<:shapeless.HList]extendsIndexedConstructorSeqDom[HShape::TSS,H,F,Index,HC::TIntro]withProductwithSerializable", "kind" : "case class"}, {"label" : "Cons", "tail" : "", "member" : "provingground.induction.IndexedConstructorSeqDom.Cons", "link" : "provingground\/induction\/IndexedConstructorSeqDom$.html#Cons", "kind" : "object"}, {"label" : "Empty", "tail" : "", "member" : "provingground.induction.IndexedConstructorSeqDom.Empty", "link" : "provingground\/induction\/IndexedConstructorSeqDom$.html#Empty[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],Index<:shapeless.HList]extendsIndexedConstructorSeqDom[shapeless.HNil,H,F,Index,shapeless.HNil]withProductwithSerializable", "kind" : "case class"}, {"label" : "get", "tail" : "(w: F)(g: TypFamilyPtnGetter[F, H, Index]): Empty[H, F, Index]", "member" : "provingground.induction.IndexedConstructorSeqDom.get", "link" : "provingground\/induction\/IndexedConstructorSeqDom$.html#get[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],Index<:shapeless.HList](w:F)(implicitg:provingground.induction.TypFamilyPtnGetter[F,H,Index]):provingground.induction.IndexedConstructorSeqDom.Empty[H,F,Index]", "kind" : "def"}, {"label" : "substIndConsSeqDom", "tail" : "(tl: TermList[Index]): Subst[IndexedConstructorSeqDom[SS, H, F, Index, Intros]]", "member" : "provingground.induction.IndexedConstructorSeqDom.substIndConsSeqDom", "link" : "provingground\/induction\/IndexedConstructorSeqDom$.html#substIndConsSeqDom[SS<:shapeless.HList,H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],Index<:shapeless.HList,Intros<:shapeless.HList](implicittl:provingground.TermList[Index]):provingground.Subst[provingground.induction.IndexedConstructorSeqDom[SS,H,F,Index,Intros]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/IndexedConstructorSeqDom$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/IndexedConstructorSeqDom$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/IndexedConstructorSeqDom$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/IndexedConstructorSeqDom$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/IndexedConstructorSeqDom$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/IndexedConstructorSeqDom$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/IndexedConstructorSeqDom$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructorSeqDom$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructorSeqDom$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructorSeqDom$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/IndexedConstructorSeqDom$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/IndexedConstructorSeqDom$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/IndexedConstructorSeqDom$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/IndexedConstructorSeqDom$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/IndexedConstructorSeqDom$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/IndexedConstructorSeqDom$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/IndexedConstructorSeqDom$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/IndexedConstructorSeqDom$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/IndexedConstructorSeqDom$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/induction\/IndexedConstructorSeqDom.html", "kind" : "class"}, {"name" : "provingground.induction.IndexedConstructorSeqMap", "shortDescription" : "indexed version of ConstructorSeqMap, giving definitions of  indexed recursion and induction functions.", "object" : "provingground\/induction\/IndexedConstructorSeqMap$.html", "members_class" : [{"label" : "inducF", "tail" : "(fibre: Term): InducType", "member" : "provingground.induction.IndexedConstructorSeqMap.inducF", "link" : "provingground\/induction\/IndexedConstructorSeqMap.html#inducF(fibre:provingground.HoTT.Term):InducType", "kind" : "def"}, {"label" : "induc", "tail" : "(fibre: IDFT): InducType", "member" : "provingground.induction.IndexedConstructorSeqMap.induc", "link" : "provingground\/induction\/IndexedConstructorSeqMap.html#induc(fibre:IDFT):InducType", "kind" : "def"}, {"label" : "rec", "tail" : "(X: Typ[C]): RecType", "member" : "provingground.induction.IndexedConstructorSeqMap.rec", "link" : "provingground\/induction\/IndexedConstructorSeqMap.html#rec(X:provingground.HoTT.Typ[C]):RecType", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/IndexedConstructorSeqMap.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/IndexedConstructorSeqMap.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/IndexedConstructorSeqMap.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/IndexedConstructorSeqMap.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/IndexedConstructorSeqMap.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/IndexedConstructorSeqMap.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/IndexedConstructorSeqMap.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructorSeqMap.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructorSeqMap.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructorSeqMap.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/IndexedConstructorSeqMap.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/IndexedConstructorSeqMap.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/IndexedConstructorSeqMap.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/IndexedConstructorSeqMap.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/IndexedConstructorSeqMap.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/IndexedConstructorSeqMap.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/IndexedConstructorSeqMap.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/IndexedConstructorSeqMap.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/IndexedConstructorSeqMap.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "inducDataLambda", "tail" : "(fibre: IDFT): (IDF) ⇒ InducType", "member" : "provingground.induction.IndexedConstructorSeqMap.inducDataLambda", "link" : "provingground\/induction\/IndexedConstructorSeqMap.html#inducDataLambda(fibre:IDFT):IDF=>InducType", "kind" : "abstract def"}, {"label" : "inducDefn", "tail" : "(fibre: IDFT): IndexedInductiveDefinition[H, F, C, Index, IF, IDF, IDFT]", "member" : "provingground.induction.IndexedConstructorSeqMap.inducDefn", "link" : "provingground\/induction\/IndexedConstructorSeqMap.html#inducDefn(fibre:IDFT):provingground.induction.IndexedInductiveDefinition[H,F,C,Index,IF,IDF,IDFT]", "kind" : "abstract def"}, {"label" : "recDataLambda", "tail" : "(X: Typ[C]): (IF) ⇒ RecType", "member" : "provingground.induction.IndexedConstructorSeqMap.recDataLambda", "link" : "provingground\/induction\/IndexedConstructorSeqMap.html#recDataLambda(X:provingground.HoTT.Typ[C]):IF=>RecType", "kind" : "abstract def"}, {"label" : "W", "tail" : ": F", "member" : "provingground.induction.IndexedConstructorSeqMap.W", "link" : "provingground\/induction\/IndexedConstructorSeqMap.html#W:F", "kind" : "abstract val"}, {"label" : "recDefn", "tail" : "(X: Typ[C]): IndexedRecursiveDefinition[H, F, C, Index, IF, IDF, IDFT]", "member" : "provingground.induction.IndexedConstructorSeqMap.recDefn", "link" : "provingground\/induction\/IndexedConstructorSeqMap.html#recDefn(X:provingground.HoTT.Typ[C]):provingground.induction.IndexedRecursiveDefinition[H,F,C,Index,IF,IDF,IDFT]", "kind" : "abstract def"}, {"label" : "subs", "tail" : "(x: Term, y: Term): IndexedConstructorSeqMap[C, H, RecType, InducType, Intros, F, Index, IF, IDF, IDFT]", "member" : "provingground.induction.IndexedConstructorSeqMap.subs", "link" : "provingground\/induction\/IndexedConstructorSeqMap.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.induction.IndexedConstructorSeqMap[C,H,RecType,InducType,Intros,F,Index,IF,IDF,IDFT]", "kind" : "abstract def"}, {"label" : "family", "tail" : ": TypFamilyMap[H, F, C, Index, IF, IDF, IDFT]", "member" : "provingground.induction.IndexedConstructorSeqMap.family", "link" : "provingground\/induction\/IndexedConstructorSeqMap.html#family:provingground.induction.TypFamilyMap[H,F,C,Index,IF,IDF,IDFT]", "kind" : "abstract val"}], "members_object" : [{"label" : "Cons", "tail" : "", "member" : "provingground.induction.IndexedConstructorSeqMap.Cons", "link" : "provingground\/induction\/IndexedConstructorSeqMap$.html#Cons[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],Cod<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Cod],RD<:provingground.HoTT.Termwithprovingground.HoTT.Subs[RD],ID<:provingground.HoTT.Termwithprovingground.HoTT.Subs[ID],TR<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TR],TI<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TI],TIntros<:shapeless.HList,F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],Index<:shapeless.HList,IF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IF],IDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDF],IDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT]]extendsIndexedConstructorSeqMap[Cod,H,provingground.HoTT.Func[RD,TR],provingground.HoTT.Func[ID,TI],C::TIntros,F,Index,IF,IDF,IDFT]withProductwithSerializable", "kind" : "case class"}, {"label" : "Empty", "tail" : "", "member" : "provingground.induction.IndexedConstructorSeqMap.Empty", "link" : "provingground\/induction\/IndexedConstructorSeqMap$.html#Empty[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],Index<:shapeless.HList,IF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IF],IDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDF],IDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT]]extendsIndexedConstructorSeqMap[C,H,IF,IDF,shapeless.HNil,F,Index,IF,IDF,IDFT]withProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/IndexedConstructorSeqMap$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/IndexedConstructorSeqMap$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/IndexedConstructorSeqMap$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/IndexedConstructorSeqMap$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/IndexedConstructorSeqMap$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/IndexedConstructorSeqMap$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/IndexedConstructorSeqMap$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructorSeqMap$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructorSeqMap$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructorSeqMap$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/IndexedConstructorSeqMap$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/IndexedConstructorSeqMap$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/IndexedConstructorSeqMap$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/IndexedConstructorSeqMap$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/IndexedConstructorSeqMap$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/IndexedConstructorSeqMap$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/IndexedConstructorSeqMap$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/IndexedConstructorSeqMap$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/IndexedConstructorSeqMap$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/induction\/IndexedConstructorSeqMap.html", "kind" : "class"}, {"name" : "provingground.induction.IndexedConstructorSeqMapper", "shortDescription" : "bride between IndexedConstructorSeqDom and IndexedConstructorSeqMap", "object" : "provingground\/induction\/IndexedConstructorSeqMapper$.html", "members_class" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/IndexedConstructorSeqMapper.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/IndexedConstructorSeqMapper.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/IndexedConstructorSeqMapper.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/IndexedConstructorSeqMapper.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/IndexedConstructorSeqMapper.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/IndexedConstructorSeqMapper.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/IndexedConstructorSeqMapper.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructorSeqMapper.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructorSeqMapper.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructorSeqMapper.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/IndexedConstructorSeqMapper.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/IndexedConstructorSeqMapper.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/IndexedConstructorSeqMapper.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/IndexedConstructorSeqMapper.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/IndexedConstructorSeqMapper.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/IndexedConstructorSeqMapper.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/IndexedConstructorSeqMapper.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/IndexedConstructorSeqMapper.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/IndexedConstructorSeqMapper.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "mapped", "tail" : "(seqdom: IndexedConstructorSeqDom[SS, H, F, Index, Intros])(W: F, family: TypFamilyPtn[H, F, Index]): IndexedConstructorSeqMap[C, H, RecType, InducType, Intros, F, Index, IF, IDF, IDFT]", "member" : "provingground.induction.IndexedConstructorSeqMapper.mapped", "link" : "provingground\/induction\/IndexedConstructorSeqMapper.html#mapped(seqdom:provingground.induction.IndexedConstructorSeqDom[SS,H,F,Index,Intros])(W:F,family:provingground.induction.TypFamilyPtn[H,F,Index]):provingground.induction.IndexedConstructorSeqMap[C,H,RecType,InducType,Intros,F,Index,IF,IDF,IDFT]", "kind" : "abstract def"}], "members_object" : [{"label" : "cons", "tail" : "(patternMapper: IndexedConstructorPatternMapper[HShape, Cod, ConstructorType, H, RD, ID, F, Index, IF, IDF, IDFT], tailMapper: IndexedConstructorSeqMapper[TSS, Cod, H, TR, TI, TIntros, F, Index, IF, IDF, IDFT], subst: TermList[Index], fmlyMapper: TypFamilyMapper[H, F, Cod, Index, IF, IDF, IDFT]): IndexedConstructorSeqMapper[::[HShape, TSS], Cod, H, Func[RD, TR], Func[ID, TI], ::[ConstructorType, TIntros], F, Index, IF, IDF, IDFT]", "member" : "provingground.induction.IndexedConstructorSeqMapper.cons", "link" : "provingground\/induction\/IndexedConstructorSeqMapper$.html#cons[TSS<:shapeless.HList,HShape<:shapeless.HList,H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],Cod<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Cod],ConstructorType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[ConstructorType],TIntros<:shapeless.HList,RD<:provingground.HoTT.Termwithprovingground.HoTT.Subs[RD],ID<:provingground.HoTT.Termwithprovingground.HoTT.Subs[ID],TR<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TR],TI<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TI],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],Index<:shapeless.HList,IF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IF],IDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDF],IDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT]](implicitpatternMapper:provingground.induction.IndexedConstructorPatternMapper[HShape,Cod,ConstructorType,H,RD,ID,F,Index,IF,IDF,IDFT],implicittailMapper:provingground.induction.IndexedConstructorSeqMapper[TSS,Cod,H,TR,TI,TIntros,F,Index,IF,IDF,IDFT],implicitsubst:provingground.TermList[Index],implicitfmlyMapper:provingground.induction.TypFamilyMapper[H,F,Cod,Index,IF,IDF,IDFT]):provingground.induction.IndexedConstructorSeqMapper[HShape::TSS,Cod,H,provingground.HoTT.Func[RD,TR],provingground.HoTT.Func[ID,TI],ConstructorType::TIntros,F,Index,IF,IDF,IDFT]", "kind" : "implicit def"}, {"label" : "empty", "tail" : "(subst: TermList[Index], fmlyMapper: TypFamilyMapper[H, F, C, Index, IF, IDF, IDFT]): IndexedConstructorSeqMapper[HNil, C, H, IF, IDF, HNil, F, Index, IF, IDF, IDFT]", "member" : "provingground.induction.IndexedConstructorSeqMapper.empty", "link" : "provingground\/induction\/IndexedConstructorSeqMapper$.html#empty[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],Index<:shapeless.HList,IF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IF],IDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDF],IDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT]](implicitsubst:provingground.TermList[Index],implicitfmlyMapper:provingground.induction.TypFamilyMapper[H,F,C,Index,IF,IDF,IDFT]):provingground.induction.IndexedConstructorSeqMapper[shapeless.HNil,C,H,IF,IDF,shapeless.HNil,F,Index,IF,IDF,IDFT]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/IndexedConstructorSeqMapper$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/IndexedConstructorSeqMapper$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/IndexedConstructorSeqMapper$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/IndexedConstructorSeqMapper$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/IndexedConstructorSeqMapper$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/IndexedConstructorSeqMapper$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/IndexedConstructorSeqMapper$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructorSeqMapper$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructorSeqMapper$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructorSeqMapper$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/IndexedConstructorSeqMapper$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/IndexedConstructorSeqMapper$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/IndexedConstructorSeqMapper$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/IndexedConstructorSeqMapper$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/IndexedConstructorSeqMapper$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/IndexedConstructorSeqMapper$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/IndexedConstructorSeqMapper$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/IndexedConstructorSeqMapper$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/IndexedConstructorSeqMapper$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/induction\/IndexedConstructorSeqMapper.html", "kind" : "class"}, {"name" : "provingground.induction.IndexedConstructorShape", "shortDescription" : "The introduction rule for an indexed inductive type;typically (A -> B -> W(x))-> C -> W(y) -> (D -> W(y)) -> W(z) as a function of WMay have Pi-types instead of function types.", "object" : "provingground\/induction\/IndexedConstructorShape$.html", "members_class" : [{"label" : "~>>:", "tail" : "(tailVar: T): IndexedCnstDepFuncConsShape[S, T, H, Fb, ConstructorType, Index]", "member" : "provingground.induction.IndexedConstructorShape.~>>:", "link" : "provingground\/induction\/IndexedConstructorShape.html#~>>:[T<:provingground.HoTT.Termwithprovingground.HoTT.Subs[T]](tailVar:T):provingground.induction.IndexedConstructorShape.IndexedCnstDepFuncConsShape[S,T,H,Fb,ConstructorType,Index]", "kind" : "def"}, {"label" : "->>:", "tail" : "(tail: Typ[T]): IndexedCnstFuncConsShape[S, T, H, Fb, ConstructorType, Index]", "member" : "provingground.induction.IndexedConstructorShape.->>:", "link" : "provingground\/induction\/IndexedConstructorShape.html#->>:[T<:provingground.HoTT.Termwithprovingground.HoTT.Subs[T]](tail:provingground.HoTT.Typ[T]):provingground.induction.IndexedConstructorShape.IndexedCnstFuncConsShape[S,T,H,Fb,ConstructorType,Index]", "kind" : "def"}, {"label" : "-->>:", "tail" : "(that: IndexedIterFuncShape[H, F, Fb, Index], ind: Index): IndexedIndexedFuncConsShape[S, H, F, ConstructorType, Fb, Index]", "member" : "provingground.induction.IndexedConstructorShape.-->>:", "link" : "provingground\/induction\/IndexedConstructorShape.html#-->>:[F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F]](that:provingground.induction.IndexedIterFuncShape[H,F,Fb,Index],ind:Index):provingground.induction.IndexedConstructorShape.IndexedIndexedFuncConsShape[S,H,F,ConstructorType,Fb,Index]", "kind" : "def"}, {"label" : "mapped", "tail" : "(fmlyMapper: TypFamilyMapper[H, Fb, C, Index, IF, IDF, IDFT]): IndexedConstructorPatternMap[C, ConstructorType, H, RecDataType, InducDataType, Fb, Index, IF, IDF, IDFT] forSome {type RecDataType <: Term with Subs[RecDataType], type InducDataType <: Term with Subs[InducDataType]}", "member" : "provingground.induction.IndexedConstructorShape.mapped", "link" : "provingground\/induction\/IndexedConstructorShape.html#mapped[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],IF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IF],IDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDF],IDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT]](implicitfmlyMapper:provingground.induction.TypFamilyMapper[H,Fb,C,Index,IF,IDF,IDFT]):provingground.induction.IndexedConstructorPatternMap[C,ConstructorType,H,RecDataType,InducDataType,Fb,Index,IF,IDF,IDFT]forSome{typeRecDataType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[RecDataType];typeInducDataType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[InducDataType]}", "kind" : "def"}, {"label" : ":::", "tail" : "(name: AnySym): IndexedConstructor[S, H, Fb, ConstructorType, Index]", "member" : "provingground.induction.IndexedConstructorShape.:::", "link" : "provingground\/induction\/IndexedConstructorShape.html#:::(name:provingground.HoTT.AnySym):provingground.induction.IndexedConstructor[S,H,Fb,ConstructorType,Index]", "kind" : "def"}, {"label" : "symbcons", "tail" : "(name: AnySym, tp: Fb): ConstructorType", "member" : "provingground.induction.IndexedConstructorShape.symbcons", "link" : "provingground\/induction\/IndexedConstructorShape.html#symbcons(name:provingground.HoTT.AnySym,tp:Fb):ConstructorType", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/IndexedConstructorShape.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/IndexedConstructorShape.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/IndexedConstructorShape.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/IndexedConstructorShape.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/IndexedConstructorShape.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/IndexedConstructorShape.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/IndexedConstructorShape.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructorShape.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructorShape.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructorShape.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/IndexedConstructorShape.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/IndexedConstructorShape.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/IndexedConstructorShape.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/IndexedConstructorShape.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/IndexedConstructorShape.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/IndexedConstructorShape.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/IndexedConstructorShape.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/IndexedConstructorShape.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/IndexedConstructorShape.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "mapper", "tail" : "(fmlyMapper: TypFamilyMapper[H, Fb, C, Index, IF, IDF, IDFT]): IndexedConstructorPatternMapper[S, C, ConstructorType, H, RecDataType, InducDataType, Fb, Index, IF, IDF, IDFT] forSome {type RecDataType <: Term with Subs[RecDataType], type InducDataType <: Term with Subs[InducDataType]}", "member" : "provingground.induction.IndexedConstructorShape.mapper", "link" : "provingground\/induction\/IndexedConstructorShape.html#mapper[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],IF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IF],IDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDF],IDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT]](implicitfmlyMapper:provingground.induction.TypFamilyMapper[H,Fb,C,Index,IF,IDF,IDFT]):provingground.induction.IndexedConstructorPatternMapper[S,C,ConstructorType,H,RecDataType,InducDataType,Fb,Index,IF,IDF,IDFT]forSome{typeRecDataType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[RecDataType];typeInducDataType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[InducDataType]}", "kind" : "abstract def"}, {"label" : "subs", "tail" : "(x: Term, y: Term): IndexedConstructorShape[S, H, Fb, ConstructorType, Index]", "member" : "provingground.induction.IndexedConstructorShape.subs", "link" : "provingground\/induction\/IndexedConstructorShape.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.induction.IndexedConstructorShape[S,H,Fb,ConstructorType,Index]", "kind" : "abstract def"}, {"label" : "apply", "tail" : "(tp: Fb): Typ[ConstructorType]", "member" : "provingground.induction.IndexedConstructorShape.apply", "link" : "provingground\/induction\/IndexedConstructorShape.html#apply(tp:Fb):provingground.HoTT.Typ[ConstructorType]", "kind" : "abstract def"}, {"label" : "family", "tail" : ": TypFamilyPtn[H, Fb, Index]", "member" : "provingground.induction.IndexedConstructorShape.family", "link" : "provingground\/induction\/IndexedConstructorShape.html#family:provingground.induction.TypFamilyPtn[H,Fb,Index]", "kind" : "abstract val"}], "members_object" : [{"label" : "IndexedCnstDepFuncConsShape", "tail" : "", "member" : "provingground.induction.IndexedConstructorShape.IndexedCnstDepFuncConsShape", "link" : "provingground\/induction\/IndexedConstructorShape$.html#IndexedCnstDepFuncConsShape[HShape<:shapeless.HList,T<:provingground.HoTT.Termwithprovingground.HoTT.Subs[T],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],HC<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HC],Index<:shapeless.HList]extendsIndexedConstructorShape[provingground.induction.IndexedConstructorShape.IndexedCnstDepFuncConsShape.type::HShape,H,F,provingground.HoTT.FuncLike[T,HC],Index]withProductwithSerializable", "kind" : "case class"}, {"label" : "IndexedCnstDepFuncConsShape", "tail" : "", "member" : "provingground.induction.IndexedConstructorShape.IndexedCnstDepFuncConsShape", "link" : "provingground\/induction\/IndexedConstructorShape$.html#IndexedCnstDepFuncConsShape", "kind" : "object"}, {"label" : "IndexedCnstFuncConsShape", "tail" : "", "member" : "provingground.induction.IndexedConstructorShape.IndexedCnstFuncConsShape", "link" : "provingground\/induction\/IndexedConstructorShape$.html#IndexedCnstFuncConsShape[HShape<:shapeless.HList,T<:provingground.HoTT.Termwithprovingground.HoTT.Subs[T],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],HC<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HC],Index<:shapeless.HList]extendsIndexedConstructorShape[provingground.induction.IndexedConstructorShape.IndexedCnstFuncConsShape.type::HShape,H,F,provingground.HoTT.Func[T,HC],Index]withProductwithSerializable", "kind" : "case class"}, {"label" : "IndexedCnstFuncConsShape", "tail" : "", "member" : "provingground.induction.IndexedConstructorShape.IndexedCnstFuncConsShape", "link" : "provingground\/induction\/IndexedConstructorShape$.html#IndexedCnstFuncConsShape", "kind" : "object"}, {"label" : "IndexedIndexedFuncConsShape", "tail" : "", "member" : "provingground.induction.IndexedConstructorShape.IndexedIndexedFuncConsShape", "link" : "provingground\/induction\/IndexedConstructorShape$.html#IndexedIndexedFuncConsShape[HShape<:shapeless.HList,H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],HC<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HC],Fb<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Fb],Index<:shapeless.HList]extendsIndexedConstructorShape[provingground.induction.IndexedConstructorShape.IndexedIndexedFuncConsShape.type::HShape,H,Fb,provingground.HoTT.Func[F,HC],Index]withProductwithSerializable", "kind" : "case class"}, {"label" : "IndexedIndexedFuncConsShape", "tail" : "", "member" : "provingground.induction.IndexedConstructorShape.IndexedIndexedFuncConsShape", "link" : "provingground\/induction\/IndexedConstructorShape$.html#IndexedIndexedFuncConsShape", "kind" : "object"}, {"label" : "IndexedFuncConsShape", "tail" : "", "member" : "provingground.induction.IndexedConstructorShape.IndexedFuncConsShape", "link" : "provingground\/induction\/IndexedConstructorShape$.html#IndexedFuncConsShape[HShape<:shapeless.HList,H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],FI<:provingground.HoTT.Termwithprovingground.HoTT.Subs[FI],HC<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HC],Index<:shapeless.HList]extendsIndexedConstructorShape[provingground.induction.IndexedConstructorShape.IndexedFuncConsShape.type::HShape,H,F,provingground.HoTT.Func[FI,HC],Index]withProductwithSerializable", "kind" : "case class"}, {"label" : "IndexedFuncConsShape", "tail" : "", "member" : "provingground.induction.IndexedConstructorShape.IndexedFuncConsShape", "link" : "provingground\/induction\/IndexedConstructorShape$.html#IndexedFuncConsShape", "kind" : "object"}, {"label" : "IndexedIdShape", "tail" : "", "member" : "provingground.induction.IndexedConstructorShape.IndexedIdShape", "link" : "provingground\/induction\/IndexedConstructorShape$.html#IndexedIdShape[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],Index<:shapeless.HList]extendsIndexedConstructorShape[shapeless.HNil,H,F,H,Index]withProductwithSerializable", "kind" : "case class"}, {"label" : "get", "tail" : "(w: F, typ: Typ[H])(arg0: TermList[Index], g: TypFamilyPtnGetter[F, H, Index]): IndexedIdShape[H, F, Index]", "member" : "provingground.induction.IndexedConstructorShape.get", "link" : "provingground\/induction\/IndexedConstructorShape$.html#get[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],Index<:shapeless.HList](w:F,typ:provingground.HoTT.Typ[H])(implicitevidence$9:provingground.TermList[Index],implicitg:provingground.induction.TypFamilyPtnGetter[F,H,Index]):provingground.induction.IndexedConstructorShape.IndexedIdShape[H,F,Index]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/IndexedConstructorShape$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/IndexedConstructorShape$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/IndexedConstructorShape$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/IndexedConstructorShape$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/IndexedConstructorShape$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/IndexedConstructorShape$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/IndexedConstructorShape$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructorShape$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructorShape$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedConstructorShape$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/IndexedConstructorShape$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/IndexedConstructorShape$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/IndexedConstructorShape$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/IndexedConstructorShape$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/IndexedConstructorShape$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/IndexedConstructorShape$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/IndexedConstructorShape$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/IndexedConstructorShape$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/IndexedConstructorShape$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/induction\/IndexedConstructorShape.html", "kind" : "class"}, {"name" : "provingground.induction.IndexedInductiveDefinition", "shortDescription" : "indexed version of InductiveDefinition", "object" : "provingground\/induction\/IndexedInductiveDefinition$.html", "members_class" : [{"label" : "iterDepFunc", "tail" : ": IDF", "member" : "provingground.induction.IndexedInductiveDefinition.iterDepFunc", "link" : "provingground\/induction\/IndexedInductiveDefinition.html#iterDepFunc:IDF", "kind" : "lazy val"}, {"label" : "Funcs", "tail" : "", "member" : "provingground.induction.IndexedInductiveDefinition.Funcs", "link" : "provingground\/induction\/IndexedInductiveDefinition.html#FuncsextendsHoTT.IndInducFuncLike[H,C,F,IDFT]withProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/IndexedInductiveDefinition.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/IndexedInductiveDefinition.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/IndexedInductiveDefinition.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/IndexedInductiveDefinition.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/IndexedInductiveDefinition.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/IndexedInductiveDefinition.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/IndexedInductiveDefinition.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedInductiveDefinition.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedInductiveDefinition.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedInductiveDefinition.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/IndexedInductiveDefinition.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/IndexedInductiveDefinition.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/IndexedInductiveDefinition.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/IndexedInductiveDefinition.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/IndexedInductiveDefinition.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/IndexedInductiveDefinition.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/IndexedInductiveDefinition.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/IndexedInductiveDefinition.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/IndexedInductiveDefinition.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "dataSubs", "tail" : "(that: IndexedInductiveDefinition[H, F, C, Index, IF, IDF, IDFT], x: Term, y: Term): IndexedInductiveDefinition[H, F, C, Index, IF, IDF, IDFT]", "member" : "provingground.induction.IndexedInductiveDefinition.dataSubs", "link" : "provingground\/induction\/IndexedInductiveDefinition.html#dataSubs(that:provingground.induction.IndexedInductiveDefinition[H,F,C,Index,IF,IDF,IDFT],x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.induction.IndexedInductiveDefinition[H,F,C,Index,IF,IDF,IDFT]", "kind" : "abstract def"}, {"label" : "subs", "tail" : "(x: Term, y: Term): IndexedInductiveDefinition[H, F, C, Index, IF, IDF, IDFT]", "member" : "provingground.induction.IndexedInductiveDefinition.subs", "link" : "provingground\/induction\/IndexedInductiveDefinition.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.induction.IndexedInductiveDefinition[H,F,C,Index,IF,IDF,IDFT]", "kind" : "abstract def"}, {"label" : "caseFn", "tail" : "(f: ⇒ IDF)(arg: H): Option[C]", "member" : "provingground.induction.IndexedInductiveDefinition.caseFn", "link" : "provingground\/induction\/IndexedInductiveDefinition.html#caseFn(f:=>IDF)(arg:H):Option[C]", "kind" : "abstract def"}, {"label" : "Xs", "tail" : ": IDFT", "member" : "provingground.induction.IndexedInductiveDefinition.Xs", "link" : "provingground\/induction\/IndexedInductiveDefinition.html#Xs:IDFT", "kind" : "abstract val"}, {"label" : "W", "tail" : ": F", "member" : "provingground.induction.IndexedInductiveDefinition.W", "link" : "provingground\/induction\/IndexedInductiveDefinition.html#W:F", "kind" : "abstract val"}, {"label" : "fromData", "tail" : "(data: Vector[Term]): IndexedInductiveDefinition[H, F, C, Index, IF, IDF, IDFT]", "member" : "provingground.induction.IndexedInductiveDefinition.fromData", "link" : "provingground\/induction\/IndexedInductiveDefinition.html#fromData(data:Vector[provingground.HoTT.Term]):provingground.induction.IndexedInductiveDefinition[H,F,C,Index,IF,IDF,IDFT]", "kind" : "abstract def"}, {"label" : "defnData", "tail" : ": Vector[Term]", "member" : "provingground.induction.IndexedInductiveDefinition.defnData", "link" : "provingground\/induction\/IndexedInductiveDefinition.html#defnData:Vector[provingground.HoTT.Term]", "kind" : "abstract val"}, {"label" : "family", "tail" : ": TypFamilyMap[H, F, C, Index, IF, IDF, IDFT]", "member" : "provingground.induction.IndexedInductiveDefinition.family", "link" : "provingground\/induction\/IndexedInductiveDefinition.html#family:provingground.induction.TypFamilyMap[H,F,C,Index,IF,IDF,IDFT]", "kind" : "abstract val"}], "members_object" : [{"label" : "DataCons", "tail" : "", "member" : "provingground.induction.IndexedInductiveDefinition.DataCons", "link" : "provingground\/induction\/IndexedInductiveDefinition$.html#DataCons[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],Index<:shapeless.HList,IF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IF],IDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDF],IDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT],D<:provingground.HoTT.Termwithprovingground.HoTT.Subs[D]]extendsIndexedInductiveDefinition[H,F,C,Index,IF,IDF,IDFT]withProductwithSerializable", "kind" : "case class"}, {"label" : "Empty", "tail" : "", "member" : "provingground.induction.IndexedInductiveDefinition.Empty", "link" : "provingground\/induction\/IndexedInductiveDefinition$.html#Empty[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],Index<:shapeless.HList,IF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IF],IDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDF],IDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT]]extendsIndexedInductiveDefinition[H,F,C,Index,IF,IDF,IDFT]withProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/IndexedInductiveDefinition$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/IndexedInductiveDefinition$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/IndexedInductiveDefinition$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/IndexedInductiveDefinition$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/IndexedInductiveDefinition$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/IndexedInductiveDefinition$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/IndexedInductiveDefinition$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedInductiveDefinition$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedInductiveDefinition$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedInductiveDefinition$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/IndexedInductiveDefinition$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/IndexedInductiveDefinition$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/IndexedInductiveDefinition$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/IndexedInductiveDefinition$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/IndexedInductiveDefinition$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/IndexedInductiveDefinition$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/IndexedInductiveDefinition$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/IndexedInductiveDefinition$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/IndexedInductiveDefinition$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/induction\/IndexedInductiveDefinition.html", "kind" : "class"}, {"name" : "provingground.induction.IndexedIterFuncPtnMap", "shortDescription" : "Indexed version of IterFuncPtnMap", "object" : "provingground\/induction\/IndexedIterFuncPtnMap$.html", "members_class" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/IndexedIterFuncPtnMap.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/IndexedIterFuncPtnMap.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/IndexedIterFuncPtnMap.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/IndexedIterFuncPtnMap.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/IndexedIterFuncPtnMap.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/IndexedIterFuncPtnMap.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/IndexedIterFuncPtnMap.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedIterFuncPtnMap.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedIterFuncPtnMap.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedIterFuncPtnMap.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/IndexedIterFuncPtnMap.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/IndexedIterFuncPtnMap.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/IndexedIterFuncPtnMap.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/IndexedIterFuncPtnMap.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/IndexedIterFuncPtnMap.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/IndexedIterFuncPtnMap.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/IndexedIterFuncPtnMap.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/IndexedIterFuncPtnMap.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/IndexedIterFuncPtnMap.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "inducedDep", "tail" : "(f: IDF): (F) ⇒ DT", "member" : "provingground.induction.IndexedIterFuncPtnMap.inducedDep", "link" : "provingground\/induction\/IndexedIterFuncPtnMap.html#inducedDep(f:IDF):F=>DT", "kind" : "abstract def"}, {"label" : "induced", "tail" : "(f: IF): (F) ⇒ TT", "member" : "provingground.induction.IndexedIterFuncPtnMap.induced", "link" : "provingground\/induction\/IndexedIterFuncPtnMap.html#induced(f:IF):F=>TT", "kind" : "abstract def"}, {"label" : "subs", "tail" : "(x: Term, y: Term): IndexedIterFuncPtnMap[H, Fb, Index, C, F, TT, DT, IF, IDF, IDFT]", "member" : "provingground.induction.IndexedIterFuncPtnMap.subs", "link" : "provingground\/induction\/IndexedIterFuncPtnMap.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.induction.IndexedIterFuncPtnMap[H,Fb,Index,C,F,TT,DT,IF,IDF,IDFT]", "kind" : "abstract def"}, {"label" : "depTarget", "tail" : "(xs: IDFT): (F) ⇒ Typ[DT]", "member" : "provingground.induction.IndexedIterFuncPtnMap.depTarget", "link" : "provingground\/induction\/IndexedIterFuncPtnMap.html#depTarget(xs:IDFT):F=>provingground.HoTT.Typ[DT]", "kind" : "abstract def"}, {"label" : "target", "tail" : "(x: Typ[C]): Typ[TT]", "member" : "provingground.induction.IndexedIterFuncPtnMap.target", "link" : "provingground\/induction\/IndexedIterFuncPtnMap.html#target(x:provingground.HoTT.Typ[C]):provingground.HoTT.Typ[TT]", "kind" : "abstract def"}, {"label" : "apply", "tail" : "(W: Fb): Typ[F]", "member" : "provingground.induction.IndexedIterFuncPtnMap.apply", "link" : "provingground\/induction\/IndexedIterFuncPtnMap.html#apply(W:Fb):provingground.HoTT.Typ[F]", "kind" : "abstract def"}, {"label" : "family", "tail" : ": TypFamilyMap[H, Fb, C, Index, IF, IDF, IDFT]", "member" : "provingground.induction.IndexedIterFuncPtnMap.family", "link" : "provingground\/induction\/IndexedIterFuncPtnMap.html#family:provingground.induction.TypFamilyMap[H,Fb,C,Index,IF,IDF,IDFT]", "kind" : "abstract val"}, {"label" : "univLevel", "tail" : ": Int", "member" : "provingground.induction.IndexedIterFuncPtnMap.univLevel", "link" : "provingground\/induction\/IndexedIterFuncPtnMap.html#univLevel:Int", "kind" : "abstract val"}], "members_object" : [{"label" : "IndexedDepFuncIterPtnMap", "tail" : "", "member" : "provingground.induction.IndexedIterFuncPtnMap.IndexedDepFuncIterPtnMap", "link" : "provingground\/induction\/IndexedIterFuncPtnMap$.html#IndexedDepFuncIterPtnMap[TT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TT],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V],T<:provingground.HoTT.Termwithprovingground.HoTT.Subs[T],D<:provingground.HoTT.Termwithprovingground.HoTT.Subs[D],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],Fb<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Fb],Index<:shapeless.HList,C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],IF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IF],IDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDF],IDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT]]extendsIndexedIterFuncPtnMap[H,Fb,Index,C,provingground.HoTT.FuncLike[TT,V],provingground.HoTT.FuncLike[TT,T],provingground.HoTT.FuncLike[TT,D],IF,IDF,IDFT]withProductwithSerializable", "kind" : "case class"}, {"label" : "IndexedFuncIterPtnMap", "tail" : "", "member" : "provingground.induction.IndexedIterFuncPtnMap.IndexedFuncIterPtnMap", "link" : "provingground\/induction\/IndexedIterFuncPtnMap$.html#IndexedFuncIterPtnMap[TT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TT],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V],T<:provingground.HoTT.Termwithprovingground.HoTT.Subs[T],D<:provingground.HoTT.Termwithprovingground.HoTT.Subs[D],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],Fb<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Fb],Index<:shapeless.HList,C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],IF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IF],IDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDF],IDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT]]extendsIndexedIterFuncPtnMap[H,Fb,Index,C,provingground.HoTT.Func[TT,V],provingground.HoTT.Func[TT,T],provingground.HoTT.FuncLike[TT,D],IF,IDF,IDFT]withProductwithSerializable", "kind" : "case class"}, {"label" : "IdIterPtnMap", "tail" : "", "member" : "provingground.induction.IndexedIterFuncPtnMap.IdIterPtnMap", "link" : "provingground\/induction\/IndexedIterFuncPtnMap$.html#IdIterPtnMap[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],Fb<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Fb],Index<:shapeless.HList,C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],IF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IF],IDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDF],IDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT]]extendsIndexedIterFuncPtnMap[H,Fb,Index,C,H,C,C,IF,IDF,IDFT]withProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/IndexedIterFuncPtnMap$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/IndexedIterFuncPtnMap$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/IndexedIterFuncPtnMap$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/IndexedIterFuncPtnMap$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/IndexedIterFuncPtnMap$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/IndexedIterFuncPtnMap$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/IndexedIterFuncPtnMap$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedIterFuncPtnMap$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedIterFuncPtnMap$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedIterFuncPtnMap$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/IndexedIterFuncPtnMap$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/IndexedIterFuncPtnMap$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/IndexedIterFuncPtnMap$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/IndexedIterFuncPtnMap$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/IndexedIterFuncPtnMap$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/IndexedIterFuncPtnMap$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/IndexedIterFuncPtnMap$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/IndexedIterFuncPtnMap$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/IndexedIterFuncPtnMap$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/induction\/IndexedIterFuncPtnMap.html", "kind" : "class"}, {"name" : "provingground.induction.IndexedIterFuncPtnMapper", "shortDescription" : "bridge between IndexedIterFuncShape and IndexedIterFuncPtnMap", "object" : "provingground\/induction\/IndexedIterFuncPtnMapper$.html", "members_class" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "mapper", "tail" : "(fmlyMapper: TypFamilyMapper[H, Fb, C, Index, IF, IDF, IDFT]): (IndexedIterFuncShape[H, F, Fb, Index]) ⇒ IndexedIterFuncPtnMap[H, Fb, Index, C, F, TT, DT, IF, IDF, IDFT]", "member" : "provingground.induction.IndexedIterFuncPtnMapper.mapper", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper.html#mapper(implicitfmlyMapper:provingground.induction.TypFamilyMapper[H,Fb,C,Index,IF,IDF,IDFT]):provingground.induction.IndexedIterFuncShape[H,F,Fb,Index]=>provingground.induction.IndexedIterFuncPtnMap[H,Fb,Index,C,F,TT,DT,IF,IDF,IDFT]", "kind" : "abstract def"}], "members_object" : [{"label" : "indexedDepFuncIterPtnMapper", "tail" : "(arg0: TermList[Index], hm: IndexedIterFuncPtnMapper[H, Fb, Index, C, V, T, D, IF, IDF, IDFT]): IndexedIterFuncPtnMapper[H, Fb, Index, C, FuncLike[TT, V], FuncLike[TT, T], FuncLike[TT, D], IF, IDF, IDFT]", "member" : "provingground.induction.IndexedIterFuncPtnMapper.indexedDepFuncIterPtnMapper", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper$.html#indexedDepFuncIterPtnMapper[TT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TT],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V],T<:provingground.HoTT.Termwithprovingground.HoTT.Subs[T],D<:provingground.HoTT.Termwithprovingground.HoTT.Subs[D],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],Fb<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Fb],Index<:shapeless.HList,C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],IF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IF],IDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDF],IDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT]](implicitevidence$12:provingground.TermList[Index],implicithm:provingground.induction.IndexedIterFuncPtnMapper[H,Fb,Index,C,V,T,D,IF,IDF,IDFT]):provingground.induction.IndexedIterFuncPtnMapper[H,Fb,Index,C,provingground.HoTT.FuncLike[TT,V],provingground.HoTT.FuncLike[TT,T],provingground.HoTT.FuncLike[TT,D],IF,IDF,IDFT]", "kind" : "implicit def"}, {"label" : "indexedFuncIterPtnMapper", "tail" : "(arg0: TermList[Index], hm: IndexedIterFuncPtnMapper[H, Fb, Index, C, V, T, D, IF, IDF, IDFT]): IndexedIterFuncPtnMapper[H, Fb, Index, C, Func[TT, V], Func[TT, T], FuncLike[TT, D], IF, IDF, IDFT]", "member" : "provingground.induction.IndexedIterFuncPtnMapper.indexedFuncIterPtnMapper", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper$.html#indexedFuncIterPtnMapper[TT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TT],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V],T<:provingground.HoTT.Termwithprovingground.HoTT.Subs[T],D<:provingground.HoTT.Termwithprovingground.HoTT.Subs[D],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],Fb<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Fb],Index<:shapeless.HList,C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],IF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IF],IDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDF],IDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT]](implicitevidence$11:provingground.TermList[Index],implicithm:provingground.induction.IndexedIterFuncPtnMapper[H,Fb,Index,C,V,T,D,IF,IDF,IDFT]):provingground.induction.IndexedIterFuncPtnMapper[H,Fb,Index,C,provingground.HoTT.Func[TT,V],provingground.HoTT.Func[TT,T],provingground.HoTT.FuncLike[TT,D],IF,IDF,IDFT]", "kind" : "implicit def"}, {"label" : "idIterPtnMapper", "tail" : "(arg0: TermList[Index]): IndexedIterFuncPtnMapper[H, Fb, Index, C, H, C, C, IF, IDF, IDFT]", "member" : "provingground.induction.IndexedIterFuncPtnMapper.idIterPtnMapper", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper$.html#idIterPtnMapper[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],Fb<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Fb],Index<:shapeless.HList,C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],IF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IF],IDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDF],IDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT]](implicitevidence$10:provingground.TermList[Index]):provingground.induction.IndexedIterFuncPtnMapper[H,Fb,Index,C,H,C,C,IF,IDF,IDFT]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/IndexedIterFuncPtnMapper$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/induction\/IndexedIterFuncPtnMapper.html", "kind" : "class"}, {"name" : "provingground.induction.IndexedIterFuncShape", "shortDescription" : "indexed version of IterFuncShape", "object" : "provingground\/induction\/IndexedIterFuncShape$.html", "members_class" : [{"label" : "mapped", "tail" : "(fmlyMapper: TypFamilyMapper[H, Fb, C, Index, IF, IDF, IDFT]): IndexedIterFuncPtnMap[H, Fb, Index, C, F, TT, DT, IF, IDF, IDFT] forSome {type TT <: Term with Subs[TT], type DT <: Term with Subs[DT]}", "member" : "provingground.induction.IndexedIterFuncShape.mapped", "link" : "provingground\/induction\/IndexedIterFuncShape.html#mapped[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],IF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IF],IDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDF],IDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT]](implicitfmlyMapper:provingground.induction.TypFamilyMapper[H,Fb,C,Index,IF,IDF,IDFT]):provingground.induction.IndexedIterFuncPtnMap[H,Fb,Index,C,F,TT,DT,IF,IDF,IDFT]forSome{typeTT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TT];typeDT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[DT]}", "kind" : "def"}, {"label" : "piShape", "tail" : "(variable: TT, dom: Typ[TT]): DepFuncShape[TT, H, F, Fb, Index]", "member" : "provingground.induction.IndexedIterFuncShape.piShape", "link" : "provingground\/induction\/IndexedIterFuncShape.html#piShape[TT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TT]](variable:TT,dom:provingground.HoTT.Typ[TT]):provingground.induction.IndexedIterFuncShape.DepFuncShape[TT,H,F,Fb,Index]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/IndexedIterFuncShape.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/IndexedIterFuncShape.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/IndexedIterFuncShape.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/IndexedIterFuncShape.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/IndexedIterFuncShape.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/IndexedIterFuncShape.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/IndexedIterFuncShape.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedIterFuncShape.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedIterFuncShape.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedIterFuncShape.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/IndexedIterFuncShape.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/IndexedIterFuncShape.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/IndexedIterFuncShape.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/IndexedIterFuncShape.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/IndexedIterFuncShape.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/IndexedIterFuncShape.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/IndexedIterFuncShape.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/IndexedIterFuncShape.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/IndexedIterFuncShape.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "mapper", "tail" : "(fmlyMapper: TypFamilyMapper[H, Fb, C, Index, IF, IDF, IDFT]): IndexedIterFuncPtnMapper[H, Fb, Index, C, F, TT, DT, IF, IDF, IDFT] forSome {type TT <: Term with Subs[TT], type DT <: Term with Subs[DT]}", "member" : "provingground.induction.IndexedIterFuncShape.mapper", "link" : "provingground\/induction\/IndexedIterFuncShape.html#mapper[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],IF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IF],IDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDF],IDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT]](implicitfmlyMapper:provingground.induction.TypFamilyMapper[H,Fb,C,Index,IF,IDF,IDFT]):provingground.induction.IndexedIterFuncPtnMapper[H,Fb,Index,C,F,TT,DT,IF,IDF,IDFT]forSome{typeTT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TT];typeDT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[DT]}", "kind" : "abstract def"}, {"label" : "family", "tail" : ": TypFamilyPtn[H, Fb, Index]", "member" : "provingground.induction.IndexedIterFuncShape.family", "link" : "provingground\/induction\/IndexedIterFuncShape.html#family:provingground.induction.TypFamilyPtn[H,Fb,Index]", "kind" : "abstract val"}, {"label" : "subs", "tail" : "(x: Term, y: Term): IndexedIterFuncShape[H, F, Fb, Index]", "member" : "provingground.induction.IndexedIterFuncShape.subs", "link" : "provingground\/induction\/IndexedIterFuncShape.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.induction.IndexedIterFuncShape[H,F,Fb,Index]", "kind" : "abstract def"}, {"label" : "apply", "tail" : "(W: Fb): Typ[F]", "member" : "provingground.induction.IndexedIterFuncShape.apply", "link" : "provingground\/induction\/IndexedIterFuncShape.html#apply(W:Fb):provingground.HoTT.Typ[F]", "kind" : "abstract def"}], "members_object" : [{"label" : "Exst", "tail" : "", "member" : "provingground.induction.IndexedIterFuncShape.Exst", "link" : "provingground\/induction\/IndexedIterFuncShape$.html#Exst", "kind" : "object"}, {"label" : "Exst", "tail" : "", "member" : "provingground.induction.IndexedIterFuncShape.Exst", "link" : "provingground\/induction\/IndexedIterFuncShape$.html#ExstextendsAnyRef", "kind" : "sealed trait"}, {"label" : "DepFuncShape", "tail" : "", "member" : "provingground.induction.IndexedIterFuncShape.DepFuncShape", "link" : "provingground\/induction\/IndexedIterFuncShape$.html#DepFuncShape[TT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TT],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],TF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TF],Fb<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Fb],Index<:shapeless.HList]extendsIndexedIterFuncShape[H,provingground.HoTT.FuncLike[TT,TF],Fb,Index]withProductwithSerializable", "kind" : "case class"}, {"label" : "FuncShape", "tail" : "", "member" : "provingground.induction.IndexedIterFuncShape.FuncShape", "link" : "provingground\/induction\/IndexedIterFuncShape$.html#FuncShape[TT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TT],TF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TF],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],Fb<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Fb],Index<:shapeless.HList]extendsIndexedIterFuncShape[H,provingground.HoTT.Func[TT,TF],Fb,Index]withProductwithSerializable", "kind" : "case class"}, {"label" : "IdIterShape", "tail" : "", "member" : "provingground.induction.IndexedIterFuncShape.IdIterShape", "link" : "provingground\/induction\/IndexedIterFuncShape$.html#IdIterShape[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],Fb<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Fb],Index<:shapeless.HList]extendsIndexedIterFuncShape[H,H,Fb,Index]withProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/IndexedIterFuncShape$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/IndexedIterFuncShape$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/IndexedIterFuncShape$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/IndexedIterFuncShape$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/IndexedIterFuncShape$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/IndexedIterFuncShape$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/IndexedIterFuncShape$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedIterFuncShape$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedIterFuncShape$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedIterFuncShape$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/IndexedIterFuncShape$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/IndexedIterFuncShape$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/IndexedIterFuncShape$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/IndexedIterFuncShape$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/IndexedIterFuncShape$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/IndexedIterFuncShape$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/IndexedIterFuncShape$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/IndexedIterFuncShape$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/IndexedIterFuncShape$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/induction\/IndexedIterFuncShape.html", "kind" : "class"}, {"name" : "provingground.induction.IndexedRecursiveDefinition", "shortDescription" : "indexed version of RecursiveDefinition", "object" : "provingground\/induction\/IndexedRecursiveDefinition$.html", "members_class" : [{"label" : "iterFunc", "tail" : ": IF", "member" : "provingground.induction.IndexedRecursiveDefinition.iterFunc", "link" : "provingground\/induction\/IndexedRecursiveDefinition.html#iterFunc:IF", "kind" : "lazy val"}, {"label" : "Funcs", "tail" : "", "member" : "provingground.induction.IndexedRecursiveDefinition.Funcs", "link" : "provingground\/induction\/IndexedRecursiveDefinition.html#FuncsextendsHoTT.IndRecFunc[H,C,F]withProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/IndexedRecursiveDefinition.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/IndexedRecursiveDefinition.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/IndexedRecursiveDefinition.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/IndexedRecursiveDefinition.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/IndexedRecursiveDefinition.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/IndexedRecursiveDefinition.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/IndexedRecursiveDefinition.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedRecursiveDefinition.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedRecursiveDefinition.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedRecursiveDefinition.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/IndexedRecursiveDefinition.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/IndexedRecursiveDefinition.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/IndexedRecursiveDefinition.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/IndexedRecursiveDefinition.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/IndexedRecursiveDefinition.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/IndexedRecursiveDefinition.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/IndexedRecursiveDefinition.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/IndexedRecursiveDefinition.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/IndexedRecursiveDefinition.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "dataSubs", "tail" : "(that: IndexedRecursiveDefinition[H, F, C, Index, IF, IDF, IDFT], x: Term, y: Term): IndexedRecursiveDefinition[H, F, C, Index, IF, IDF, IDFT]", "member" : "provingground.induction.IndexedRecursiveDefinition.dataSubs", "link" : "provingground\/induction\/IndexedRecursiveDefinition.html#dataSubs(that:provingground.induction.IndexedRecursiveDefinition[H,F,C,Index,IF,IDF,IDFT],x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.induction.IndexedRecursiveDefinition[H,F,C,Index,IF,IDF,IDFT]", "kind" : "abstract def"}, {"label" : "subs", "tail" : "(x: Term, y: Term): IndexedRecursiveDefinition[H, F, C, Index, IF, IDF, IDFT]", "member" : "provingground.induction.IndexedRecursiveDefinition.subs", "link" : "provingground\/induction\/IndexedRecursiveDefinition.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.induction.IndexedRecursiveDefinition[H,F,C,Index,IF,IDF,IDFT]", "kind" : "abstract def"}, {"label" : "caseFn", "tail" : "(f: ⇒ IF)(arg: H): Option[C]", "member" : "provingground.induction.IndexedRecursiveDefinition.caseFn", "link" : "provingground\/induction\/IndexedRecursiveDefinition.html#caseFn(f:=>IF)(arg:H):Option[C]", "kind" : "abstract def"}, {"label" : "fromData", "tail" : "(data: Vector[Term]): IndexedRecursiveDefinition[H, F, C, Index, IF, IDF, IDFT]", "member" : "provingground.induction.IndexedRecursiveDefinition.fromData", "link" : "provingground\/induction\/IndexedRecursiveDefinition.html#fromData(data:Vector[provingground.HoTT.Term]):provingground.induction.IndexedRecursiveDefinition[H,F,C,Index,IF,IDF,IDFT]", "kind" : "abstract def"}, {"label" : "defnData", "tail" : ": Vector[Term]", "member" : "provingground.induction.IndexedRecursiveDefinition.defnData", "link" : "provingground\/induction\/IndexedRecursiveDefinition.html#defnData:Vector[provingground.HoTT.Term]", "kind" : "abstract val"}, {"label" : "X", "tail" : ": Typ[C]", "member" : "provingground.induction.IndexedRecursiveDefinition.X", "link" : "provingground\/induction\/IndexedRecursiveDefinition.html#X:provingground.HoTT.Typ[C]", "kind" : "abstract val"}, {"label" : "W", "tail" : ": F", "member" : "provingground.induction.IndexedRecursiveDefinition.W", "link" : "provingground\/induction\/IndexedRecursiveDefinition.html#W:F", "kind" : "abstract val"}, {"label" : "family", "tail" : ": TypFamilyMap[H, F, C, Index, IF, IDF, IDFT]", "member" : "provingground.induction.IndexedRecursiveDefinition.family", "link" : "provingground\/induction\/IndexedRecursiveDefinition.html#family:provingground.induction.TypFamilyMap[H,F,C,Index,IF,IDF,IDFT]", "kind" : "abstract val"}], "members_object" : [{"label" : "DataCons", "tail" : "", "member" : "provingground.induction.IndexedRecursiveDefinition.DataCons", "link" : "provingground\/induction\/IndexedRecursiveDefinition$.html#DataCons[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],Index<:shapeless.HList,IF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IF],IDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDF],IDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT],D<:provingground.HoTT.Termwithprovingground.HoTT.Subs[D]]extendsIndexedRecursiveDefinition[H,F,C,Index,IF,IDF,IDFT]withProductwithSerializable", "kind" : "case class"}, {"label" : "Empty", "tail" : "", "member" : "provingground.induction.IndexedRecursiveDefinition.Empty", "link" : "provingground\/induction\/IndexedRecursiveDefinition$.html#Empty[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],Index<:shapeless.HList,IF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IF],IDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDF],IDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT]]extendsIndexedRecursiveDefinition[H,F,C,Index,IF,IDF,IDFT]withProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/IndexedRecursiveDefinition$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/IndexedRecursiveDefinition$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/IndexedRecursiveDefinition$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/IndexedRecursiveDefinition$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/IndexedRecursiveDefinition$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/IndexedRecursiveDefinition$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/IndexedRecursiveDefinition$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedRecursiveDefinition$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedRecursiveDefinition$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndexedRecursiveDefinition$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/IndexedRecursiveDefinition$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/IndexedRecursiveDefinition$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/IndexedRecursiveDefinition$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/IndexedRecursiveDefinition$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/IndexedRecursiveDefinition$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/IndexedRecursiveDefinition$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/IndexedRecursiveDefinition$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/IndexedRecursiveDefinition$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/IndexedRecursiveDefinition$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/induction\/IndexedRecursiveDefinition.html", "kind" : "class"}, {"name" : "provingground.induction.IndTyp", "shortDescription" : "", "members_case class" : [{"label" : "Elem", "tail" : "", "member" : "provingground.HoTT.Typ.Elem", "link" : "provingground\/HoTT$$Typ.html#Elem", "kind" : "object"}, {"label" : "variable", "tail" : "(name: AnySym): SymbObj[Term]", "member" : "provingground.induction.IndTyp.variable", "link" : "provingground\/induction\/IndTyp.html#variable(name:provingground.HoTT.AnySym):provingground.HoTT.SymbObj[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "subs", "tail" : "(x: Term, y: Term): IndTyp[SS, Intros]", "member" : "provingground.induction.IndTyp.subs", "link" : "provingground\/induction\/IndTyp.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.induction.IndTyp[SS,Intros]", "kind" : "def"}, {"label" : "newobj", "tail" : "(): Nothing", "member" : "provingground.induction.IndTyp.newobj", "link" : "provingground\/induction\/IndTyp.html#newobj:Nothing", "kind" : "def"}, {"label" : "typ", "tail" : ": Universe", "member" : "provingground.induction.IndTyp.typ", "link" : "provingground\/induction\/IndTyp.html#typ:provingground.HoTT.Universe", "kind" : "val"}, {"label" : "Obj", "tail" : "", "member" : "provingground.induction.IndTyp.Obj", "link" : "provingground\/induction\/IndTyp.html#Obj=provingground.HoTT.Term", "kind" : "type"}, {"label" : "baseTyp", "tail" : ": ConstructorSeqTL[SS, Term, Intros]", "member" : "provingground.induction.IndTyp.baseTyp", "link" : "provingground\/induction\/IndTyp.html#baseTyp:provingground.induction.ConstructorSeqTL[SS,provingground.HoTT.Term,Intros]", "kind" : "val"}, {"label" : "struct", "tail" : ": ConstructorSeqTL[SS, Term, Intros]", "member" : "provingground.induction.IndTyp.struct", "link" : "provingground\/induction\/IndTyp.html#struct:provingground.induction.ConstructorSeqTL[SS,provingground.HoTT.Term,Intros]", "kind" : "lazy val"}, {"member" : "provingground.induction.IndTyp#<init>", "error" : "unsupported entity"}, {"label" : "seqDom", "tail" : ": ConstructorSeqDom[SS, Term, Intros]", "member" : "provingground.induction.IndTyp.seqDom", "link" : "provingground\/induction\/IndTyp.html#seqDom:provingground.induction.ConstructorSeqDom[SS,provingground.HoTT.Term,Intros]", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "provingground.induction.IndTyp.name", "link" : "provingground\/induction\/IndTyp.html#name:String", "kind" : "val"}, {"label" : "++", "tail" : "(those: V): SigmaTyp[UU, VV]", "member" : "provingground.HoTT.Typ.++", "link" : "provingground\/induction\/IndTyp.html#++[UU>:provingground.HoTT.Typ[U]<:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[UU],VV<:provingground.HoTT.Termwithprovingground.HoTT.Subs[VV],V<:provingground.HoTT.Typ[VV]withprovingground.HoTT.Subs[V]](those:V):provingground.HoTT.SigmaTyp[UU,VV]", "kind" : "def"}, {"label" : "||", "tail" : "(that: Typ[V]): PlusTyp[UU, V]", "member" : "provingground.HoTT.Typ.||", "link" : "provingground\/induction\/IndTyp.html#||[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](that:provingground.HoTT.Typ[V]):provingground.HoTT.PlusTyp[UU,V]", "kind" : "def"}, {"label" : "&&", "tail" : "(that: Typ[V]): ProdTyp[UU, V]", "member" : "provingground.HoTT.Typ.&&", "link" : "provingground\/induction\/IndTyp.html#&&[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](that:provingground.HoTT.Typ[V]):provingground.HoTT.ProdTyp[UU,V]", "kind" : "def"}, {"label" : "~>:", "tail" : "(variable: V): GenFuncTyp[V, UU]", "member" : "provingground.HoTT.Typ.~>:", "link" : "provingground\/induction\/IndTyp.html#~>:[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](variable:V):provingground.HoTT.GenFuncTyp[V,UU]", "kind" : "def"}, {"label" : "->:", "tail" : "(that: Typ[W]): FuncTyp[W, UU]", "member" : "provingground.HoTT.Typ.->:", "link" : "provingground\/induction\/IndTyp.html#->:[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU]](that:provingground.HoTT.Typ[W]):provingground.HoTT.FuncTyp[W,UU]", "kind" : "def"}, {"label" : "typedVar", "tail" : "(factory: NameFactory): TypedTerm[Term]", "member" : "provingground.HoTT.Typ.typedVar", "link" : "provingground\/induction\/IndTyp.html#typedVar(implicitfactory:provingground.HoTT.NameFactory):provingground.HoTT.TypedTerm[U]", "kind" : "def"}, {"label" : "Var", "tail" : "(factory: NameFactory): Term with Subs[Term]", "member" : "provingground.HoTT.Typ.Var", "link" : "provingground\/induction\/IndTyp.html#Var(implicitfactory:provingground.HoTT.NameFactory):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "sym", "tail" : "(name: Name): Term with Subs[Term]", "member" : "provingground.HoTT.Typ.sym", "link" : "provingground\/induction\/IndTyp.html#sym(implicitname:sourcecode.Name):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "::", "tail" : "(name: String): Term with Subs[Term]", "member" : "provingground.HoTT.Typ.::", "link" : "provingground\/induction\/IndTyp.html#::(name:String):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "typedVar", "tail" : "(name: AnySym): TypedTerm[Term]", "member" : "provingground.HoTT.Typ.typedVar", "link" : "provingground\/induction\/IndTyp.html#typedVar(name:provingground.HoTT.AnySym):provingground.HoTT.TypedTerm[U]", "kind" : "def"}, {"label" : "symbObj", "tail" : "(name: AnySym): Term with Subs[Term]", "member" : "provingground.HoTT.Typ.symbObj", "link" : "provingground\/induction\/IndTyp.html#symbObj(name:provingground.HoTT.AnySym):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "typlevel", "tail" : ": Int", "member" : "provingground.HoTT.Typ.typlevel", "link" : "provingground\/induction\/IndTyp.html#typlevel:Int", "kind" : "lazy val"}, {"label" : "typed", "tail" : ": TypedTerm[Typ[Term]]", "member" : "provingground.HoTT.Typ.typed", "link" : "provingground\/induction\/IndTyp.html#typed:provingground.HoTT.TypedTerm[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "!:", "tail" : "(term: Term): Term", "member" : "provingground.HoTT.Typ.!:", "link" : "provingground\/induction\/IndTyp.html#!:(term:provingground.HoTT.Term):U", "kind" : "def"}, {"label" : "obj", "tail" : "(): Term", "member" : "provingground.HoTT.Typ.obj", "link" : "provingground\/induction\/IndTyp.html#obj:U", "kind" : "def"}, {"label" : "usesVar", "tail" : "(t: Term): Boolean", "member" : "provingground.HoTT.Term.usesVar", "link" : "provingground\/induction\/IndTyp.html#usesVar(t:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "indepOf", "tail" : "(that: Term): Boolean", "member" : "provingground.HoTT.Term.indepOf", "link" : "provingground\/induction\/IndTyp.html#indepOf(that:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "dependsOn", "tail" : "(that: Term): Boolean", "member" : "provingground.HoTT.Term.dependsOn", "link" : "provingground\/induction\/IndTyp.html#dependsOn(that:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "replace", "tail" : "(x: Term, y: Term): Typ[Term] with Subs[Typ[Term]]", "member" : "provingground.HoTT.Subs.replace", "link" : "provingground\/induction\/IndTyp.html#replace(x:provingground.HoTT.Term,y:provingground.HoTT.Term):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/IndTyp.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/IndTyp.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/IndTyp.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/IndTyp.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/IndTyp.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/IndTyp.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/IndTyp.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndTyp.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndTyp.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IndTyp.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/IndTyp.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/IndTyp.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/IndTyp.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/IndTyp.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/IndTyp.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/IndTyp.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/induction\/IndTyp.html", "kind" : "case class"}, {"name" : "provingground.induction.InductionImplicits", "members_trait" : [{"label" : "IndexedPair", "tail" : "", "member" : "provingground.induction.InductionImplicits.IndexedPair", "link" : "provingground\/induction\/InductionImplicits.html#IndexedPair[F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],Index<:shapeless.HList]extendsAnyRef", "kind" : "implicit class"}, {"label" : "IndexedFamily", "tail" : "", "member" : "provingground.induction.InductionImplicits.IndexedFamily", "link" : "provingground\/induction\/InductionImplicits.html#IndexedFamily[F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],Index<:shapeless.HList]extendsAnyRef", "kind" : "implicit class"}, {"label" : "IterFuncTypHead", "tail" : "", "member" : "provingground.induction.InductionImplicits.IterFuncTypHead", "link" : "provingground\/induction\/InductionImplicits.html#IterFuncTypHead[O<:provingground.HoTT.Termwithprovingground.HoTT.Subs[O]]extendsAnyRef", "kind" : "implicit class"}, {"label" : "TypAsSeqHead", "tail" : "", "member" : "provingground.induction.InductionImplicits.TypAsSeqHead", "link" : "provingground\/induction\/InductionImplicits.html#TypAsSeqHead[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H]]extendsAnyRef", "kind" : "implicit class"}, {"label" : "ConstructorHead", "tail" : "", "member" : "provingground.induction.InductionImplicits.ConstructorHead", "link" : "provingground\/induction\/InductionImplicits.html#ConstructorHead[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H]]extendsAnyRef", "kind" : "implicit class"}, {"label" : "stringSym", "tail" : "(name: String): Name", "member" : "provingground.induction.InductionImplicits.stringSym", "link" : "provingground\/induction\/InductionImplicits.html#stringSym(name:String):provingground.HoTT.Name", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/InductionImplicits.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/InductionImplicits.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/InductionImplicits.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/InductionImplicits.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/InductionImplicits.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/InductionImplicits.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/InductionImplicits.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/InductionImplicits.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/InductionImplicits.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/InductionImplicits.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/InductionImplicits.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/InductionImplicits.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/InductionImplicits.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/InductionImplicits.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/InductionImplicits.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/InductionImplicits.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/InductionImplicits.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/InductionImplicits.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/InductionImplicits.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "provingground\/induction\/InductionImplicits.html", "kind" : "trait"}, {"name" : "provingground.induction.InductiveDefinition", "members_trait" : [{"label" : "act", "tail" : "(arg: H): C", "member" : "provingground.induction.InductiveDefinition.act", "link" : "provingground\/induction\/InductiveDefinition.html#act(arg:H):C", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "provingground.HoTT.InducFuncLike.toString", "link" : "provingground\/induction\/InductiveDefinition.html#toString():String", "kind" : "def"}, {"label" : "equals", "tail" : "(that: Any): Boolean", "member" : "provingground.HoTT.InducFuncLike.equals", "link" : "provingground\/induction\/InductiveDefinition.html#equals(that:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "provingground.HoTT.InducFuncLike.hashCode", "link" : "provingground\/induction\/InductiveDefinition.html#hashCode():Int", "kind" : "def"}, {"label" : "fullData", "tail" : ": (Typ[H], (H) ⇒ Typ[C], Vector[Term])", "member" : "provingground.HoTT.InducFuncLike.fullData", "link" : "provingground\/induction\/InductiveDefinition.html#fullData:(provingground.HoTT.Typ[W],W=>provingground.HoTT.Typ[U],Vector[provingground.HoTT.Term])", "kind" : "lazy val"}, {"label" : "usesVar", "tail" : "(t: Term): Boolean", "member" : "provingground.HoTT.InducFuncLike.usesVar", "link" : "provingground\/induction\/InductiveDefinition.html#usesVar(t:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "applyUnchecked", "tail" : "(arg: H): C", "member" : "provingground.HoTT.FuncLike.applyUnchecked", "link" : "provingground\/induction\/InductiveDefinition.html#applyUnchecked(arg:W):U", "kind" : "def"}, {"label" : "apply", "tail" : "(arg: H): C", "member" : "provingground.HoTT.FuncLike.apply", "link" : "provingground\/induction\/InductiveDefinition.html#apply(arg:W):U", "kind" : "def"}, {"label" : "typed", "tail" : ": TypedTerm[FuncLike[H, C]]", "member" : "provingground.HoTT.FuncLike.typed", "link" : "provingground\/induction\/InductiveDefinition.html#typed:provingground.HoTT.TypedTerm[provingground.HoTT.FuncLike[W,U]]", "kind" : "lazy val"}, {"label" : "andThen", "tail" : "(g: (C) ⇒ A): (H) ⇒ A", "member" : "scala.Function1.andThen", "link" : "provingground\/induction\/InductiveDefinition.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) ⇒ H): (A) ⇒ C", "member" : "scala.Function1.compose", "link" : "provingground\/induction\/InductiveDefinition.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "indepOf", "tail" : "(that: Term): Boolean", "member" : "provingground.HoTT.Term.indepOf", "link" : "provingground\/induction\/InductiveDefinition.html#indepOf(that:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "dependsOn", "tail" : "(that: Term): Boolean", "member" : "provingground.HoTT.Term.dependsOn", "link" : "provingground\/induction\/InductiveDefinition.html#dependsOn(that:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "replace", "tail" : "(x: Term, y: Term): FuncLike[H, C] with Subs[FuncLike[H, C]]", "member" : "provingground.HoTT.Subs.replace", "link" : "provingground\/induction\/InductiveDefinition.html#replace(x:provingground.HoTT.Term,y:provingground.HoTT.Term):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/InductiveDefinition.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/InductiveDefinition.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/InductiveDefinition.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/InductiveDefinition.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/InductiveDefinition.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/InductiveDefinition.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/InductiveDefinition.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/InductiveDefinition.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/InductiveDefinition.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/InductiveDefinition.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/InductiveDefinition.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/InductiveDefinition.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/InductiveDefinition.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/InductiveDefinition.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/InductiveDefinition.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/InductiveDefinition.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "subs", "tail" : "(x: Term, y: Term): InductiveDefinition[H, C]", "member" : "provingground.induction.InductiveDefinition.subs", "link" : "provingground\/induction\/InductiveDefinition.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.induction.InductiveDefinition[H,C]", "kind" : "abstract def"}, {"label" : "caseFn", "tail" : "(f: ⇒ FuncLike[H, C])(arg: H): Option[C]", "member" : "provingground.induction.InductiveDefinition.caseFn", "link" : "provingground\/induction\/InductiveDefinition.html#caseFn(f:=>provingground.HoTT.FuncLike[H,C])(arg:H):Option[C]", "kind" : "abstract def"}, {"label" : "dataSubs", "tail" : "(that: InductiveDefinition[H, C], x: Term, y: Term): InductiveDefinition[H, C]", "member" : "provingground.induction.InductiveDefinition.dataSubs", "link" : "provingground\/induction\/InductiveDefinition.html#dataSubs(that:provingground.induction.InductiveDefinition[H,C],x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.induction.InductiveDefinition[H,C]", "kind" : "abstract def"}, {"label" : "fromData", "tail" : "(data: Vector[Term]): InductiveDefinition[H, C]", "member" : "provingground.induction.InductiveDefinition.fromData", "link" : "provingground\/induction\/InductiveDefinition.html#fromData(data:Vector[provingground.HoTT.Term]):provingground.induction.InductiveDefinition[H,C]", "kind" : "abstract def"}, {"label" : "fibre", "tail" : ": Func[H, Typ[C]]", "member" : "provingground.induction.InductiveDefinition.fibre", "link" : "provingground\/induction\/InductiveDefinition.html#fibre:provingground.HoTT.Func[H,provingground.HoTT.Typ[C]]", "kind" : "abstract val"}, {"label" : "defnData", "tail" : ": Vector[Term]", "member" : "provingground.HoTT.InducFuncLike.defnData", "link" : "provingground\/induction\/InductiveDefinition.html#defnData:Vector[provingground.HoTT.Term]", "kind" : "abstract val"}, {"label" : "depcodom", "tail" : ": (H) ⇒ Typ[C]", "member" : "provingground.HoTT.FuncLike.depcodom", "link" : "provingground\/induction\/InductiveDefinition.html#depcodom:W=>provingground.HoTT.Typ[U]", "kind" : "abstract val"}, {"label" : "dom", "tail" : ": Typ[H]", "member" : "provingground.HoTT.FuncLike.dom", "link" : "provingground\/induction\/InductiveDefinition.html#dom:provingground.HoTT.Typ[W]", "kind" : "abstract val"}, {"label" : "typ", "tail" : ": Typ[FuncLike[H, C]]", "member" : "provingground.HoTT.FuncLike.typ", "link" : "provingground\/induction\/InductiveDefinition.html#typ:provingground.HoTT.Typ[provingground.HoTT.FuncLike[W,U]]", "kind" : "abstract val"}, {"member" : "provingground.HoTT.FuncLike.Obj", "error" : "unsupported entity"}, {"label" : "newobj", "tail" : "(): FuncLike[H, C] with Subs[FuncLike[H, C]]", "member" : "provingground.HoTT.Subs.newobj", "link" : "provingground\/induction\/InductiveDefinition.html#newobj:Uwithprovingground.HoTT.Subs[U]", "kind" : "abstract def"}], "shortDescription" : "inductively defined dependent function, to be built by mixing in cases,defaults to a formal application by itself", "object" : "provingground\/induction\/InductiveDefinition$.html", "members_object" : [{"label" : "DataCons", "tail" : "", "member" : "provingground.induction.InductiveDefinition.DataCons", "link" : "provingground\/induction\/InductiveDefinition$.html#DataCons[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],D<:provingground.HoTT.Termwithprovingground.HoTT.Subs[D]]extendsInductiveDefinition[H,C]withProductwithSerializable", "kind" : "case class"}, {"label" : "Empty", "tail" : "", "member" : "provingground.induction.InductiveDefinition.Empty", "link" : "provingground\/induction\/InductiveDefinition$.html#Empty[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C]]extendsInductiveDefinition[H,C]withProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/InductiveDefinition$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/InductiveDefinition$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/InductiveDefinition$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/InductiveDefinition$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/InductiveDefinition$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/InductiveDefinition$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/InductiveDefinition$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/InductiveDefinition$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/InductiveDefinition$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/InductiveDefinition$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/InductiveDefinition$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/InductiveDefinition$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/InductiveDefinition$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/InductiveDefinition$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/InductiveDefinition$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/InductiveDefinition$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/InductiveDefinition$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/InductiveDefinition$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/InductiveDefinition$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/induction\/InductiveDefinition.html", "kind" : "trait"}, {"name" : "provingground.induction.IterFuncMapper", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/IterFuncMapper.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/IterFuncMapper.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/IterFuncMapper.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/IterFuncMapper.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/IterFuncMapper.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/IterFuncMapper.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/IterFuncMapper.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IterFuncMapper.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IterFuncMapper.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IterFuncMapper.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/IterFuncMapper.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/IterFuncMapper.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/IterFuncMapper.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/IterFuncMapper.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/IterFuncMapper.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/IterFuncMapper.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/IterFuncMapper.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/IterFuncMapper.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/IterFuncMapper.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "mapper", "tail" : "(): (IterFuncShape[O, F]) ⇒ IterFuncPtnMap[O, C, F, TT, DT]", "member" : "provingground.induction.IterFuncMapper.mapper", "link" : "provingground\/induction\/IterFuncMapper.html#mapper:provingground.induction.IterFuncShape[O,F]=>provingground.induction.IterFuncPtnMap[O,C,F,TT,DT]", "kind" : "abstract def"}], "shortDescription" : "Given the scala type of the codomain, lifts IterFuncShape to IterFuncMapper", "object" : "provingground\/induction\/IterFuncMapper$.html", "members_object" : [{"label" : "depFuncIterMapper", "tail" : "(hm: IterFuncMapper[O, C, HF, HTT, HDT]): IterFuncMapper[O, C, FuncLike[Tail, HF], FuncLike[Tail, HTT], FuncLike[Tail, HDT]]", "member" : "provingground.induction.IterFuncMapper.depFuncIterMapper", "link" : "provingground\/induction\/IterFuncMapper$.html#depFuncIterMapper[Tail<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Tail],O<:provingground.HoTT.Termwithprovingground.HoTT.Subs[O],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],HF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HF],HTT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HTT],HDT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HDT]](implicithm:provingground.induction.IterFuncMapper[O,C,HF,HTT,HDT]):provingground.induction.IterFuncMapper[O,C,provingground.HoTT.FuncLike[Tail,HF],provingground.HoTT.FuncLike[Tail,HTT],provingground.HoTT.FuncLike[Tail,HDT]]", "kind" : "implicit def"}, {"label" : "funcIterMapper", "tail" : "(hm: IterFuncMapper[O, C, HF, HTT, HDT]): IterFuncMapper[O, C, Func[Tail, HF], Func[Tail, HTT], FuncLike[Tail, HDT]]", "member" : "provingground.induction.IterFuncMapper.funcIterMapper", "link" : "provingground\/induction\/IterFuncMapper$.html#funcIterMapper[Tail<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Tail],O<:provingground.HoTT.Termwithprovingground.HoTT.Subs[O],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],HF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HF],HTT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HTT],HDT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HDT]](implicithm:provingground.induction.IterFuncMapper[O,C,HF,HTT,HDT]):provingground.induction.IterFuncMapper[O,C,provingground.HoTT.Func[Tail,HF],provingground.HoTT.Func[Tail,HTT],provingground.HoTT.FuncLike[Tail,HDT]]", "kind" : "implicit def"}, {"label" : "idIterMapper", "tail" : "(): IterFuncMapper[O, C, O, C, C]", "member" : "provingground.induction.IterFuncMapper.idIterMapper", "link" : "provingground\/induction\/IterFuncMapper$.html#idIterMapper[O<:provingground.HoTT.Termwithprovingground.HoTT.Subs[O],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C]]:provingground.induction.IterFuncMapper[O,C,O,C,C]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/IterFuncMapper$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/IterFuncMapper$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/IterFuncMapper$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/IterFuncMapper$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/IterFuncMapper$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/IterFuncMapper$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/IterFuncMapper$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IterFuncMapper$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IterFuncMapper$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IterFuncMapper$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/IterFuncMapper$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/IterFuncMapper$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/IterFuncMapper$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/IterFuncMapper$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/IterFuncMapper$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/IterFuncMapper$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/IterFuncMapper$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/IterFuncMapper$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/IterFuncMapper$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/induction\/IterFuncMapper.html", "kind" : "trait"}, {"name" : "provingground.induction.IterFuncPtnMap", "members_trait" : [{"label" : "Family", "tail" : "", "member" : "provingground.induction.IterFuncPtnMap.Family", "link" : "provingground\/induction\/IterFuncPtnMap.html#Family=F", "kind" : "type"}, {"label" : "Cod", "tail" : "", "member" : "provingground.induction.IterFuncPtnMap.Cod", "link" : "provingground\/induction\/IterFuncPtnMap.html#Cod=C", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/IterFuncPtnMap.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/IterFuncPtnMap.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/IterFuncPtnMap.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/IterFuncPtnMap.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/IterFuncPtnMap.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/IterFuncPtnMap.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/IterFuncPtnMap.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IterFuncPtnMap.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IterFuncPtnMap.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IterFuncPtnMap.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/IterFuncPtnMap.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/IterFuncPtnMap.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/IterFuncPtnMap.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/IterFuncPtnMap.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/IterFuncPtnMap.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/IterFuncPtnMap.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/IterFuncPtnMap.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/IterFuncPtnMap.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/IterFuncPtnMap.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "inducedDep", "tail" : "(f: FuncLike[O, Cod]): (Family) ⇒ DT", "member" : "provingground.induction.IterFuncPtnMap.inducedDep", "link" : "provingground\/induction\/IterFuncPtnMap.html#inducedDep(f:provingground.HoTT.FuncLike[O,IterFuncPtnMap.this.Cod]):IterFuncPtnMap.this.Family=>DT", "kind" : "abstract def"}, {"label" : "induced", "tail" : "(f: Func[O, Cod]): (Family) ⇒ TT", "member" : "provingground.induction.IterFuncPtnMap.induced", "link" : "provingground\/induction\/IterFuncPtnMap.html#induced(f:provingground.HoTT.Func[O,IterFuncPtnMap.this.Cod]):IterFuncPtnMap.this.Family=>TT", "kind" : "abstract def"}, {"label" : "subs", "tail" : "(x: Term, y: Term): IterFuncPtnMap[O, C, F, TT, DT]", "member" : "provingground.induction.IterFuncPtnMap.subs", "link" : "provingground\/induction\/IterFuncPtnMap.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.induction.IterFuncPtnMap[O,C,F,TT,DT]", "kind" : "abstract def"}, {"label" : "depTarget", "tail" : "(xs: Func[O, Typ[Cod]]): (Family) ⇒ Typ[DT]", "member" : "provingground.induction.IterFuncPtnMap.depTarget", "link" : "provingground\/induction\/IterFuncPtnMap.html#depTarget(xs:provingground.HoTT.Func[O,provingground.HoTT.Typ[IterFuncPtnMap.this.Cod]]):IterFuncPtnMap.this.Family=>provingground.HoTT.Typ[DT]", "kind" : "abstract def"}, {"label" : "target", "tail" : "(x: Typ[Cod]): Typ[TT]", "member" : "provingground.induction.IterFuncPtnMap.target", "link" : "provingground\/induction\/IterFuncPtnMap.html#target(x:provingground.HoTT.Typ[IterFuncPtnMap.this.Cod]):provingground.HoTT.Typ[TT]", "kind" : "abstract def"}, {"label" : "apply", "tail" : "(tp: Typ[O]): Typ[Family]", "member" : "provingground.induction.IterFuncPtnMap.apply", "link" : "provingground\/induction\/IterFuncPtnMap.html#apply(tp:provingground.HoTT.Typ[O]):provingground.HoTT.Typ[IterFuncPtnMap.this.Family]", "kind" : "abstract def"}, {"label" : "univLevel", "tail" : ": Int", "member" : "provingground.induction.IterFuncPtnMap.univLevel", "link" : "provingground\/induction\/IterFuncPtnMap.html#univLevel:Int", "kind" : "abstract val"}], "shortDescription" : "a family of the form P: A -> B -> W etc, or dependent versions of this as a function of W,together with the scala type of a codomain; has methods for defining induced functions and dependent functions.", "object" : "provingground\/induction\/IterFuncPtnMap$.html", "members_object" : [{"label" : "DepFuncIterPtnMap", "tail" : "", "member" : "provingground.induction.IterFuncPtnMap.DepFuncIterPtnMap", "link" : "provingground\/induction\/IterFuncPtnMap$.html#DepFuncIterPtnMap[TT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TT],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V],T<:provingground.HoTT.Termwithprovingground.HoTT.Subs[T],D<:provingground.HoTT.Termwithprovingground.HoTT.Subs[D],O<:provingground.HoTT.Termwithprovingground.HoTT.Subs[O],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C]]extendsIterFuncPtnMap[O,C,provingground.HoTT.FuncLike[TT,V],provingground.HoTT.FuncLike[TT,T],provingground.HoTT.FuncLike[TT,D]]withProductwithSerializable", "kind" : "case class"}, {"label" : "FuncIterPtnMap", "tail" : "", "member" : "provingground.induction.IterFuncPtnMap.FuncIterPtnMap", "link" : "provingground\/induction\/IterFuncPtnMap$.html#FuncIterPtnMap[TT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TT],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V],T<:provingground.HoTT.Termwithprovingground.HoTT.Subs[T],D<:provingground.HoTT.Termwithprovingground.HoTT.Subs[D],O<:provingground.HoTT.Termwithprovingground.HoTT.Subs[O],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C]]extendsIterFuncPtnMap[O,C,provingground.HoTT.Func[TT,V],provingground.HoTT.Func[TT,T],provingground.HoTT.FuncLike[TT,D]]withProductwithSerializable", "kind" : "case class"}, {"label" : "IdIterPtnMap", "tail" : "", "member" : "provingground.induction.IterFuncPtnMap.IdIterPtnMap", "link" : "provingground\/induction\/IterFuncPtnMap$.html#IdIterPtnMap[O<:provingground.HoTT.Termwithprovingground.HoTT.Subs[O],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C]]extendsIterFuncPtnMap[O,C,O,C,C]withProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/IterFuncPtnMap$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/IterFuncPtnMap$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/IterFuncPtnMap$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/IterFuncPtnMap$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/IterFuncPtnMap$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/IterFuncPtnMap$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/IterFuncPtnMap$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IterFuncPtnMap$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IterFuncPtnMap$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IterFuncPtnMap$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/IterFuncPtnMap$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/IterFuncPtnMap$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/IterFuncPtnMap$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/IterFuncPtnMap$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/IterFuncPtnMap$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/IterFuncPtnMap$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/IterFuncPtnMap$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/IterFuncPtnMap$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/IterFuncPtnMap$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/induction\/IterFuncPtnMap.html", "kind" : "trait"}, {"name" : "provingground.induction.IterFuncShape", "members_trait" : [{"label" : "-|>:", "tail" : "(tail: Typ[TT]): FuncShape[TT, O, F]", "member" : "provingground.induction.IterFuncShape.-|>:", "link" : "provingground\/induction\/IterFuncShape.html#-|>:[TT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TT]](tail:provingground.HoTT.Typ[TT]):provingground.induction.IterFuncShape.FuncShape[TT,O,F]", "kind" : "def"}, {"label" : "piShape", "tail" : "(variable: TT, dom: Typ[TT]): DepFuncShape[TT, O, F]", "member" : "provingground.induction.IterFuncShape.piShape", "link" : "provingground\/induction\/IterFuncShape.html#piShape[TT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TT]](variable:TT,dom:provingground.HoTT.Typ[TT]):provingground.induction.IterFuncShape.DepFuncShape[TT,O,F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/IterFuncShape.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/IterFuncShape.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/IterFuncShape.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/IterFuncShape.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/IterFuncShape.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/IterFuncShape.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/IterFuncShape.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IterFuncShape.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IterFuncShape.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IterFuncShape.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/IterFuncShape.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/IterFuncShape.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/IterFuncShape.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/IterFuncShape.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/IterFuncShape.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/IterFuncShape.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/IterFuncShape.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/IterFuncShape.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/IterFuncShape.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "subs", "tail" : "(x: Term, y: Term): IterFuncShape[O, F]", "member" : "provingground.induction.IterFuncShape.subs", "link" : "provingground\/induction\/IterFuncShape.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.induction.IterFuncShape[O,F]", "kind" : "abstract def"}, {"label" : "mapper", "tail" : "(): IterFuncMapper[O, C, F, TT, DT] forSome {type TT <: Term with Subs[TT], type DT <: Term with Subs[DT]}", "member" : "provingground.induction.IterFuncShape.mapper", "link" : "provingground\/induction\/IterFuncShape.html#mapper[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C]]:provingground.induction.IterFuncMapper[O,C,F,TT,DT]forSome{typeTT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TT];typeDT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[DT]}", "kind" : "abstract def"}, {"label" : "apply", "tail" : "(tp: Typ[O]): Typ[F]", "member" : "provingground.induction.IterFuncShape.apply", "link" : "provingground\/induction\/IterFuncShape.html#apply(tp:provingground.HoTT.Typ[O]):provingground.HoTT.Typ[F]", "kind" : "abstract def"}], "shortDescription" : "a family of the form P: A -> B -> W etc, or dependent versions of this as a function of W.", "object" : "provingground\/induction\/IterFuncShape$.html", "members_object" : [{"label" : "fromTyp", "tail" : "(w: Typ[Term], fmly: F): IterFuncShape[Term, F]", "member" : "provingground.induction.IterFuncShape.fromTyp", "link" : "provingground\/induction\/IterFuncShape$.html#fromTyp[F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F]](w:provingground.HoTT.Typ[provingground.HoTT.Term],fmly:F):provingground.induction.IterFuncShape[provingground.HoTT.Term,F]", "kind" : "def"}, {"label" : "getExst", "tail" : "(w: Typ[Term], fmly: Typ[Term]): Exst", "member" : "provingground.induction.IterFuncShape.getExst", "link" : "provingground\/induction\/IterFuncShape$.html#getExst(w:provingground.HoTT.Typ[provingground.HoTT.Term],fmly:provingground.HoTT.Typ[provingground.HoTT.Term]):provingground.induction.IterFuncShape.Exst", "kind" : "def"}, {"label" : "Exst", "tail" : "", "member" : "provingground.induction.IterFuncShape.Exst", "link" : "provingground\/induction\/IterFuncShape$.html#Exst", "kind" : "object"}, {"label" : "Exst", "tail" : "", "member" : "provingground.induction.IterFuncShape.Exst", "link" : "provingground\/induction\/IterFuncShape$.html#ExstextendsAnyRef", "kind" : "sealed trait"}, {"label" : "DepFuncShape", "tail" : "", "member" : "provingground.induction.IterFuncShape.DepFuncShape", "link" : "provingground\/induction\/IterFuncShape$.html#DepFuncShape[TT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TT],O<:provingground.HoTT.Termwithprovingground.HoTT.Subs[O],HF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HF]]extendsIterFuncShape[O,provingground.HoTT.FuncLike[TT,HF]]withProductwithSerializable", "kind" : "case class"}, {"label" : "FuncShape", "tail" : "", "member" : "provingground.induction.IterFuncShape.FuncShape", "link" : "provingground\/induction\/IterFuncShape$.html#FuncShape[TT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TT],O<:provingground.HoTT.Termwithprovingground.HoTT.Subs[O],HF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HF]]extendsIterFuncShape[O,provingground.HoTT.Func[TT,HF]]withProductwithSerializable", "kind" : "case class"}, {"label" : "IdIterShape", "tail" : "", "member" : "provingground.induction.IterFuncShape.IdIterShape", "link" : "provingground\/induction\/IterFuncShape$.html#IdIterShape", "kind" : "object"}, {"label" : "IdIterShape", "tail" : "", "member" : "provingground.induction.IterFuncShape.IdIterShape", "link" : "provingground\/induction\/IterFuncShape$.html#IdIterShape[O<:provingground.HoTT.Termwithprovingground.HoTT.Subs[O]]extendsIterFuncShape[O,O]withProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/IterFuncShape$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/IterFuncShape$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/IterFuncShape$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/IterFuncShape$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/IterFuncShape$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/IterFuncShape$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/IterFuncShape$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IterFuncShape$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IterFuncShape$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/IterFuncShape$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/IterFuncShape$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/IterFuncShape$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/IterFuncShape$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/IterFuncShape$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/IterFuncShape$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/IterFuncShape$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/IterFuncShape$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/IterFuncShape$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/IterFuncShape$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/induction\/IterFuncShape.html", "kind" : "trait"}, {"name" : "provingground.induction.NoIntro", "shortDescription" : "", "members_case class" : [{"member" : "provingground.induction.NoIntro#<init>", "error" : "unsupported entity"}, {"label" : "cnstTyp", "tail" : ": Typ[Term]", "member" : "provingground.induction.NoIntro.cnstTyp", "link" : "provingground\/induction\/NoIntro.html#cnstTyp:provingground.HoTT.Typ[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "w", "tail" : ": Typ[Term]", "member" : "provingground.induction.NoIntro.w", "link" : "provingground\/induction\/NoIntro.html#w:provingground.HoTT.Typ[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "provingground\/induction\/NoIntro.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "provingground\/induction\/NoIntro.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "provingground\/induction\/NoIntro.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "provingground\/induction\/NoIntro.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "provingground\/induction\/NoIntro.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "provingground\/induction\/NoIntro.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "provingground\/induction\/NoIntro.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "provingground\/induction\/NoIntro.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "provingground\/induction\/NoIntro.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "provingground\/induction\/NoIntro.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "provingground\/induction\/NoIntro.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "provingground\/induction\/NoIntro.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "provingground\/induction\/NoIntro.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/NoIntro.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/NoIntro.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/NoIntro.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/NoIntro.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/NoIntro.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/NoIntro.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/NoIntro.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/NoIntro.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/NoIntro.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/NoIntro.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/NoIntro.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/NoIntro.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/NoIntro.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/NoIntro.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/NoIntro.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/NoIntro.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/induction\/NoIntro.html", "kind" : "case class"}, {"name" : "provingground.induction.NotFunc", "shortDescription" : "", "members_case class" : [{"member" : "provingground.induction.NotFunc#<init>", "error" : "unsupported entity"}, {"label" : "t", "tail" : ": Term", "member" : "provingground.induction.NotFunc.t", "link" : "provingground\/induction\/NotFunc.html#t:provingground.HoTT.Term", "kind" : "val"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "provingground\/induction\/NotFunc.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "provingground\/induction\/NotFunc.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "provingground\/induction\/NotFunc.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "provingground\/induction\/NotFunc.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "provingground\/induction\/NotFunc.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "provingground\/induction\/NotFunc.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "provingground\/induction\/NotFunc.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "provingground\/induction\/NotFunc.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "provingground\/induction\/NotFunc.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "provingground\/induction\/NotFunc.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "provingground\/induction\/NotFunc.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "provingground\/induction\/NotFunc.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "provingground\/induction\/NotFunc.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/NotFunc.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/NotFunc.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/NotFunc.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/NotFunc.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/NotFunc.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/NotFunc.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/NotFunc.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/NotFunc.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/NotFunc.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/NotFunc.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/NotFunc.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/NotFunc.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/NotFunc.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/NotFunc.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/NotFunc.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/NotFunc.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/induction\/NotFunc.html", "kind" : "case class"}, {"name" : "provingground.induction.RecursiveDefinition", "members_trait" : [{"label" : "act", "tail" : "(arg: H): C", "member" : "provingground.induction.RecursiveDefinition.act", "link" : "provingground\/induction\/RecursiveDefinition.html#act(arg:H):C", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "provingground.HoTT.RecFunc.toString", "link" : "provingground\/induction\/RecursiveDefinition.html#toString():String", "kind" : "def"}, {"label" : "equals", "tail" : "(that: Any): Boolean", "member" : "provingground.HoTT.RecFunc.equals", "link" : "provingground\/induction\/RecursiveDefinition.html#equals(that:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "provingground.HoTT.RecFunc.hashCode", "link" : "provingground\/induction\/RecursiveDefinition.html#hashCode():Int", "kind" : "def"}, {"label" : "fullData", "tail" : ": (Typ[H], Typ[C], Vector[Term])", "member" : "provingground.HoTT.RecFunc.fullData", "link" : "provingground\/induction\/RecursiveDefinition.html#fullData:(provingground.HoTT.Typ[W],provingground.HoTT.Typ[U],Vector[provingground.HoTT.Term])", "kind" : "lazy val"}, {"label" : "usesVar", "tail" : "(t: Term): Boolean", "member" : "provingground.HoTT.RecFunc.usesVar", "link" : "provingground\/induction\/RecursiveDefinition.html#usesVar(t:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "depcodom", "tail" : ": (H) ⇒ Typ[C]", "member" : "provingground.HoTT.Func.depcodom", "link" : "provingground\/induction\/RecursiveDefinition.html#depcodom:W=>provingground.HoTT.Typ[U]", "kind" : "val"}, {"label" : "typed", "tail" : ": TypedTerm[Func[H, C]]", "member" : "provingground.HoTT.Func.typed", "link" : "provingground\/induction\/RecursiveDefinition.html#typed:provingground.HoTT.TypedTerm[provingground.HoTT.Func[W,U]]", "kind" : "lazy val"}, {"label" : "applyUnchecked", "tail" : "(arg: H): C", "member" : "provingground.HoTT.FuncLike.applyUnchecked", "link" : "provingground\/induction\/RecursiveDefinition.html#applyUnchecked(arg:W):U", "kind" : "def"}, {"label" : "apply", "tail" : "(arg: H): C", "member" : "provingground.HoTT.FuncLike.apply", "link" : "provingground\/induction\/RecursiveDefinition.html#apply(arg:W):U", "kind" : "def"}, {"label" : "andThen", "tail" : "(g: (C) ⇒ A): (H) ⇒ A", "member" : "scala.Function1.andThen", "link" : "provingground\/induction\/RecursiveDefinition.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) ⇒ H): (A) ⇒ C", "member" : "scala.Function1.compose", "link" : "provingground\/induction\/RecursiveDefinition.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "indepOf", "tail" : "(that: Term): Boolean", "member" : "provingground.HoTT.Term.indepOf", "link" : "provingground\/induction\/RecursiveDefinition.html#indepOf(that:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "dependsOn", "tail" : "(that: Term): Boolean", "member" : "provingground.HoTT.Term.dependsOn", "link" : "provingground\/induction\/RecursiveDefinition.html#dependsOn(that:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "replace", "tail" : "(x: Term, y: Term): Func[H, C] with Subs[Func[H, C]]", "member" : "provingground.HoTT.Subs.replace", "link" : "provingground\/induction\/RecursiveDefinition.html#replace(x:provingground.HoTT.Term,y:provingground.HoTT.Term):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/RecursiveDefinition.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/RecursiveDefinition.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/RecursiveDefinition.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/RecursiveDefinition.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/RecursiveDefinition.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/RecursiveDefinition.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/RecursiveDefinition.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/RecursiveDefinition.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/RecursiveDefinition.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/RecursiveDefinition.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/RecursiveDefinition.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/RecursiveDefinition.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/RecursiveDefinition.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/RecursiveDefinition.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/RecursiveDefinition.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/RecursiveDefinition.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "rebuilt", "tail" : "(): RecursiveDefinition[H, C]", "member" : "provingground.induction.RecursiveDefinition.rebuilt", "link" : "provingground\/induction\/RecursiveDefinition.html#rebuilt:provingground.induction.RecursiveDefinition[H,C]", "kind" : "abstract def"}, {"label" : "subs", "tail" : "(x: Term, y: Term): RecursiveDefinition[H, C]", "member" : "provingground.induction.RecursiveDefinition.subs", "link" : "provingground\/induction\/RecursiveDefinition.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.induction.RecursiveDefinition[H,C]", "kind" : "abstract def"}, {"label" : "dataSubs", "tail" : "(that: RecursiveDefinition[H, C], x: Term, y: Term): RecursiveDefinition[H, C]", "member" : "provingground.induction.RecursiveDefinition.dataSubs", "link" : "provingground\/induction\/RecursiveDefinition.html#dataSubs(that:provingground.induction.RecursiveDefinition[H,C],x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.induction.RecursiveDefinition[H,C]", "kind" : "abstract def"}, {"label" : "caseFn", "tail" : "(f: ⇒ Func[H, C])(arg: H): Option[C]", "member" : "provingground.induction.RecursiveDefinition.caseFn", "link" : "provingground\/induction\/RecursiveDefinition.html#caseFn(f:=>provingground.HoTT.Func[H,C])(arg:H):Option[C]", "kind" : "abstract def"}, {"label" : "fromData", "tail" : "(data: Vector[Term]): RecursiveDefinition[H, C]", "member" : "provingground.induction.RecursiveDefinition.fromData", "link" : "provingground\/induction\/RecursiveDefinition.html#fromData(data:Vector[provingground.HoTT.Term]):provingground.induction.RecursiveDefinition[H,C]", "kind" : "abstract def"}, {"label" : "defnData", "tail" : ": Vector[Term]", "member" : "provingground.HoTT.RecFunc.defnData", "link" : "provingground\/induction\/RecursiveDefinition.html#defnData:Vector[provingground.HoTT.Term]", "kind" : "abstract val"}, {"label" : "typ", "tail" : ": Typ[Func[H, C]]", "member" : "provingground.HoTT.Func.typ", "link" : "provingground\/induction\/RecursiveDefinition.html#typ:provingground.HoTT.Typ[provingground.HoTT.Func[W,U]]", "kind" : "abstract val"}, {"label" : "codom", "tail" : ": Typ[C]", "member" : "provingground.HoTT.Func.codom", "link" : "provingground\/induction\/RecursiveDefinition.html#codom:provingground.HoTT.Typ[U]", "kind" : "abstract val"}, {"label" : "dom", "tail" : ": Typ[H]", "member" : "provingground.HoTT.Func.dom", "link" : "provingground\/induction\/RecursiveDefinition.html#dom:provingground.HoTT.Typ[W]", "kind" : "abstract val"}, {"member" : "provingground.HoTT.FuncLike.Obj", "error" : "unsupported entity"}, {"label" : "newobj", "tail" : "(): Func[H, C] with Subs[Func[H, C]]", "member" : "provingground.HoTT.Subs.newobj", "link" : "provingground\/induction\/RecursiveDefinition.html#newobj:Uwithprovingground.HoTT.Subs[U]", "kind" : "abstract def"}], "shortDescription" : "recursively defined function, to be built by mixing in cases,defaults to a formal application by itself", "object" : "provingground\/induction\/RecursiveDefinition$.html", "members_object" : [{"label" : "DataCons", "tail" : "", "member" : "provingground.induction.RecursiveDefinition.DataCons", "link" : "provingground\/induction\/RecursiveDefinition$.html#DataCons[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],D<:provingground.HoTT.Termwithprovingground.HoTT.Subs[D]]extendsRecursiveDefinition[H,C]withProductwithSerializable", "kind" : "case class"}, {"label" : "Empty", "tail" : "", "member" : "provingground.induction.RecursiveDefinition.Empty", "link" : "provingground\/induction\/RecursiveDefinition$.html#Empty[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C]]extendsRecursiveDefinition[H,C]withProductwithSerializable", "kind" : "case class"}, {"label" : "rebuild", "tail" : "(t: U): U", "member" : "provingground.induction.RecursiveDefinition.rebuild", "link" : "provingground\/induction\/RecursiveDefinition$.html#rebuild[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]](t:U):U", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/RecursiveDefinition$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/RecursiveDefinition$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/RecursiveDefinition$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/RecursiveDefinition$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/RecursiveDefinition$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/RecursiveDefinition$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/RecursiveDefinition$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/RecursiveDefinition$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/RecursiveDefinition$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/RecursiveDefinition$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/RecursiveDefinition$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/RecursiveDefinition$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/RecursiveDefinition$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/RecursiveDefinition$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/RecursiveDefinition$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/RecursiveDefinition$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/RecursiveDefinition$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/RecursiveDefinition$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/RecursiveDefinition$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/induction\/RecursiveDefinition.html", "kind" : "trait"}, {"name" : "provingground.induction.SubstInstances", "shortDescription" : "", "object" : "provingground\/induction\/SubstInstances$.html", "members_object" : [{"label" : "indexedIterFunc", "tail" : "(arg0: TermList[Index]): Subst[IndexedIterFuncShape[H, F, Fb, Index]]", "member" : "provingground.induction.SubstInstances.indexedIterFunc", "link" : "provingground\/induction\/SubstInstances$.html#indexedIterFunc[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],Fb<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Fb],Index<:shapeless.HList](implicitevidence$3:provingground.TermList[Index]):provingground.Subst[provingground.induction.IndexedIterFuncShape[H,F,Fb,Index]]", "kind" : "implicit def"}, {"label" : "iterFunc", "tail" : "(): Subst[IterFuncShape[O, F]]", "member" : "provingground.induction.SubstInstances.iterFunc", "link" : "provingground\/induction\/SubstInstances$.html#iterFunc[O<:provingground.HoTT.Termwithprovingground.HoTT.Subs[O],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F]]:provingground.Subst[provingground.induction.IterFuncShape[O,F]]", "kind" : "implicit def"}, {"label" : "typFmaily", "tail" : "(arg0: TermList[Index]): Subst[TypFamilyPtn[H, F, Index]]", "member" : "provingground.induction.SubstInstances.typFmaily", "link" : "provingground\/induction\/SubstInstances$.html#typFmaily[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],Index<:shapeless.HList](implicitevidence$2:provingground.TermList[Index]):provingground.Subst[provingground.induction.TypFamilyPtn[H,F,Index]]", "kind" : "implicit def"}, {"label" : "consShape", "tail" : "(): Subst[ConstructorShape[S, H, ConstructorType]]", "member" : "provingground.induction.SubstInstances.consShape", "link" : "provingground\/induction\/SubstInstances$.html#consShape[S<:shapeless.HList,H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],ConstructorType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[ConstructorType]]:provingground.Subst[provingground.induction.ConstructorShape[S,H,ConstructorType]]", "kind" : "implicit def"}, {"label" : "indConsShape", "tail" : "(arg0: TermList[Index]): Subst[IndexedConstructorShape[S, H, Fb, ConstructorType, Index]]", "member" : "provingground.induction.SubstInstances.indConsShape", "link" : "provingground\/induction\/SubstInstances$.html#indConsShape[S<:shapeless.HList,H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],Fb<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Fb],ConstructorType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[ConstructorType],Index<:shapeless.HList](implicitevidence$1:provingground.TermList[Index]):provingground.Subst[provingground.induction.IndexedConstructorShape[S,H,Fb,ConstructorType,Index]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/SubstInstances$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/SubstInstances$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/SubstInstances$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/SubstInstances$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/SubstInstances$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/SubstInstances$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/SubstInstances$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/SubstInstances$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/SubstInstances$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/SubstInstances$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/SubstInstances$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/SubstInstances$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/SubstInstances$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/SubstInstances$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/SubstInstances$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/SubstInstances$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/SubstInstances$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/SubstInstances$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/SubstInstances$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.induction.TLImplicits", "shortDescription" : "implicits for constructing inductive types", "object" : "provingground\/induction\/TLImplicits$.html", "members_object" : [{"label" : "IndexedPair", "tail" : "", "member" : "provingground.induction.InductionImplicits.IndexedPair", "link" : "provingground\/induction\/InductionImplicits.html#IndexedPair[F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],Index<:shapeless.HList]extendsAnyRef", "kind" : "implicit class"}, {"label" : "IndexedFamily", "tail" : "", "member" : "provingground.induction.InductionImplicits.IndexedFamily", "link" : "provingground\/induction\/InductionImplicits.html#IndexedFamily[F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],Index<:shapeless.HList]extendsAnyRef", "kind" : "implicit class"}, {"label" : "IterFuncTypHead", "tail" : "", "member" : "provingground.induction.InductionImplicits.IterFuncTypHead", "link" : "provingground\/induction\/InductionImplicits.html#IterFuncTypHead[O<:provingground.HoTT.Termwithprovingground.HoTT.Subs[O]]extendsAnyRef", "kind" : "implicit class"}, {"label" : "TypAsSeqHead", "tail" : "", "member" : "provingground.induction.InductionImplicits.TypAsSeqHead", "link" : "provingground\/induction\/InductionImplicits.html#TypAsSeqHead[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H]]extendsAnyRef", "kind" : "implicit class"}, {"label" : "ConstructorHead", "tail" : "", "member" : "provingground.induction.InductionImplicits.ConstructorHead", "link" : "provingground\/induction\/InductionImplicits.html#ConstructorHead[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H]]extendsAnyRef", "kind" : "implicit class"}, {"label" : "stringSym", "tail" : "(name: String): Name", "member" : "provingground.induction.InductionImplicits.stringSym", "link" : "provingground\/induction\/TLImplicits$.html#stringSym(name:String):provingground.HoTT.Name", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/TLImplicits$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/TLImplicits$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/TLImplicits$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/TLImplicits$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/TLImplicits$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/TLImplicits$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/TLImplicits$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TLImplicits$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TLImplicits$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TLImplicits$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/TLImplicits$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/TLImplicits$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/TLImplicits$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/TLImplicits$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/TLImplicits$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/TLImplicits$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/TLImplicits$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/TLImplicits$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/TLImplicits$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.induction.TypFamilyExst", "members_trait" : [{"label" : "IndexedConstructorSeqExst", "tail" : "", "member" : "provingground.induction.TypFamilyExst.IndexedConstructorSeqExst", "link" : "provingground\/induction\/TypFamilyExst.html#IndexedConstructorSeqExst", "kind" : "object"}, {"label" : "IndexedConstructorSeqExst", "tail" : "", "member" : "provingground.induction.TypFamilyExst.IndexedConstructorSeqExst", "link" : "provingground\/induction\/TypFamilyExst.html#IndexedConstructorSeqExstextendsAnyRef", "kind" : "sealed trait"}, {"label" : "IndexedConstructorShapeExst", "tail" : "", "member" : "provingground.induction.TypFamilyExst.IndexedConstructorShapeExst", "link" : "provingground\/induction\/TypFamilyExst.html#IndexedConstructorShapeExst", "kind" : "object"}, {"label" : "IndexedConstructorShapeExst", "tail" : "", "member" : "provingground.induction.TypFamilyExst.IndexedConstructorShapeExst", "link" : "provingground\/induction\/TypFamilyExst.html#IndexedConstructorShapeExstextendsAnyRef", "kind" : "sealed trait"}, {"label" : "IndexedIterFuncExst", "tail" : "", "member" : "provingground.induction.TypFamilyExst.IndexedIterFuncExst", "link" : "provingground\/induction\/TypFamilyExst.html#IndexedIterFuncExst", "kind" : "object"}, {"label" : "IndexedIterFuncExst", "tail" : "", "member" : "provingground.induction.TypFamilyExst.IndexedIterFuncExst", "link" : "provingground\/induction\/TypFamilyExst.html#IndexedIterFuncExstextendsAnyRef", "kind" : "sealed trait"}, {"label" : "mapsTo", "tail" : "(variable: TT, dom: Typ[TT]): TypFamilyExst { ... \/* 5 definitions in type refinement *\/ }", "member" : "provingground.induction.TypFamilyExst.mapsTo", "link" : "provingground\/induction\/TypFamilyExst.html#mapsTo[TT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TT]](variable:TT,dom:provingground.HoTT.Typ[TT]):provingground.induction.TypFamilyExst{valsubst:provingground.TermList[this.Index];typeFb=provingground.HoTT.Func[TT,TypFamilyExst.this.Fb];valpattern:provingground.induction.TypFamilyPtn[provingground.HoTT.Term,provingground.HoTT.Func[TT,TypFamilyExst.this.Fb],TT::TypFamilyExst.this.Index];valW:provingground.HoTT.Func[TT,TypFamilyExst.this.Fb];typeIndex=TT::TypFamilyExst.this.Index}", "kind" : "def"}, {"label" : "->:", "tail" : "(dom: Typ[TT]): TypFamilyExst { ... \/* 2 definitions in type refinement *\/ }", "member" : "provingground.induction.TypFamilyExst.->:", "link" : "provingground\/induction\/TypFamilyExst.html#->:[TT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TT]](dom:provingground.HoTT.Typ[TT]):provingground.induction.TypFamilyExst{typeFb=provingground.HoTT.Func[TTwithprovingground.HoTT.Subs[TT],TypFamilyExst.this.Fb];typeIndex=TT::TypFamilyExst.this.Index}", "kind" : "def"}, {"label" : "~>:", "tail" : "(variable: TT): TypFamilyExst { ... \/* 2 definitions in type refinement *\/ }", "member" : "provingground.induction.TypFamilyExst.~>:", "link" : "provingground\/induction\/TypFamilyExst.html#~>:[TT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TT]](variable:TT):provingground.induction.TypFamilyExst{typeFb=provingground.HoTT.FuncLike[TT,TypFamilyExst.this.Fb];typeIndex=TT::TypFamilyExst.this.Index}", "kind" : "def"}, {"label" : "lambdaExst", "tail" : "(variable: TT, dom: Typ[TT]): TypFamilyExst { ... \/* 2 definitions in type refinement *\/ }", "member" : "provingground.induction.TypFamilyExst.lambdaExst", "link" : "provingground\/induction\/TypFamilyExst.html#lambdaExst[TT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TT]](variable:TT,dom:provingground.HoTT.Typ[TT]):provingground.induction.TypFamilyExst{typeFb=provingground.HoTT.FuncLike[TT,TypFamilyExst.this.Fb];typeIndex=TT::TypFamilyExst.this.Index}", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/TypFamilyExst.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/TypFamilyExst.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/TypFamilyExst.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/TypFamilyExst.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/TypFamilyExst.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/TypFamilyExst.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/TypFamilyExst.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TypFamilyExst.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TypFamilyExst.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TypFamilyExst.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/TypFamilyExst.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/TypFamilyExst.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/TypFamilyExst.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/TypFamilyExst.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/TypFamilyExst.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/TypFamilyExst.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/TypFamilyExst.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/TypFamilyExst.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/TypFamilyExst.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "subst", "tail" : ": TermList[Index]", "member" : "provingground.induction.TypFamilyExst.subst", "link" : "provingground\/induction\/TypFamilyExst.html#subst:provingground.TermList[TypFamilyExst.this.Index]", "kind" : "implicit abstract val"}, {"label" : "W", "tail" : ": Fb", "member" : "provingground.induction.TypFamilyExst.W", "link" : "provingground\/induction\/TypFamilyExst.html#W:TypFamilyExst.this.Fb", "kind" : "abstract val"}, {"label" : "pattern", "tail" : ": TypFamilyPtn[Term, Fb, Index]", "member" : "provingground.induction.TypFamilyExst.pattern", "link" : "provingground\/induction\/TypFamilyExst.html#pattern:provingground.induction.TypFamilyPtn[provingground.HoTT.Term,TypFamilyExst.this.Fb,TypFamilyExst.this.Index]", "kind" : "abstract val"}, {"member" : "provingground.induction.TypFamilyExst.Index", "error" : "unsupported entity"}, {"member" : "provingground.induction.TypFamilyExst.Fb", "error" : "unsupported entity"}], "shortDescription" : "", "object" : "provingground\/induction\/TypFamilyExst$.html", "members_object" : [{"label" : "getIndexedConstructorSeq", "tail" : "(w: Fb, intros: Vector[Term]): IndexedConstructorSeqExst", "member" : "provingground.induction.TypFamilyExst.getIndexedConstructorSeq", "link" : "provingground\/induction\/TypFamilyExst$.html#getIndexedConstructorSeq[Fb<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Fb]](w:Fb,intros:Vector[provingground.HoTT.Term]):provingground.induction.TypFamilyExst#IndexedConstructorSeqExst", "kind" : "def"}, {"label" : "getFamily", "tail" : "(w: Fb): TypFamilyExst", "member" : "provingground.induction.TypFamilyExst.getFamily", "link" : "provingground\/induction\/TypFamilyExst$.html#getFamily[Fb<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Fb]](w:Fb):provingground.induction.TypFamilyExst", "kind" : "def"}, {"label" : "apply", "tail" : "(tf: TypFamilyPtn[Term, Fib, In], w: Fib)(arg0: TermList[In]): TypFamilyExst { ... \/* 2 definitions in type refinement *\/ }", "member" : "provingground.induction.TypFamilyExst.apply", "link" : "provingground\/induction\/TypFamilyExst$.html#apply[Fib<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Fib],In<:shapeless.HList](tf:provingground.induction.TypFamilyPtn[provingground.HoTT.Term,Fib,In],w:Fib)(implicitevidence$1:provingground.TermList[In]):provingground.induction.TypFamilyExst{typeFb=Fib;typeIndex=In}", "kind" : "def"}, {"label" : "GetIndexedException", "tail" : "", "member" : "provingground.induction.TypFamilyExst.GetIndexedException", "link" : "provingground\/induction\/TypFamilyExst$.html#GetIndexedExceptionextendsExceptionwithProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/TypFamilyExst$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/TypFamilyExst$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/TypFamilyExst$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/TypFamilyExst$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/TypFamilyExst$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/TypFamilyExst$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/TypFamilyExst$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TypFamilyExst$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TypFamilyExst$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TypFamilyExst$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/TypFamilyExst$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/TypFamilyExst$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/TypFamilyExst$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/TypFamilyExst$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/TypFamilyExst$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/TypFamilyExst$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/TypFamilyExst$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/TypFamilyExst$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/TypFamilyExst$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/induction\/TypFamilyExst.html", "kind" : "trait"}, {"name" : "provingground.induction.TypFamilyMap", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/TypFamilyMap.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/TypFamilyMap.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/TypFamilyMap.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/TypFamilyMap.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/TypFamilyMap.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/TypFamilyMap.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/TypFamilyMap.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TypFamilyMap.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TypFamilyMap.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TypFamilyMap.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/TypFamilyMap.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/TypFamilyMap.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/TypFamilyMap.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/TypFamilyMap.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/TypFamilyMap.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/TypFamilyMap.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/TypFamilyMap.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/TypFamilyMap.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/TypFamilyMap.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "subs", "tail" : "(x: Term, y: Term): TypFamilyMap[H, F, C, Index, IF, IDF, IDFT]", "member" : "provingground.induction.TypFamilyMap.subs", "link" : "provingground\/induction\/TypFamilyMap.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.induction.TypFamilyMap[H,F,C,Index,IF,IDF,IDFT]", "kind" : "abstract def"}, {"label" : "typRestrict", "tail" : "(xs: IDFT, ind: Index): Func[H, Typ[C]]", "member" : "provingground.induction.TypFamilyMap.typRestrict", "link" : "provingground\/induction\/TypFamilyMap.html#typRestrict(xs:IDFT,ind:Index):provingground.HoTT.Func[H,provingground.HoTT.Typ[C]]", "kind" : "abstract def"}, {"label" : "depRestrict", "tail" : "(f: IDF, ind: Index): FuncLike[H, C]", "member" : "provingground.induction.TypFamilyMap.depRestrict", "link" : "provingground\/induction\/TypFamilyMap.html#depRestrict(f:IDF,ind:Index):provingground.HoTT.FuncLike[H,C]", "kind" : "abstract def"}, {"label" : "restrict", "tail" : "(f: IF, ind: Index): Func[H, C]", "member" : "provingground.induction.TypFamilyMap.restrict", "link" : "provingground\/induction\/TypFamilyMap.html#restrict(f:IF,ind:Index):provingground.HoTT.Func[H,C]", "kind" : "abstract def"}, {"label" : "iterDepFunc", "tail" : "(funcs: (Index) ⇒ FuncLike[H, C]): IDF", "member" : "provingground.induction.TypFamilyMap.iterDepFunc", "link" : "provingground\/induction\/TypFamilyMap.html#iterDepFunc(funcs:Index=>provingground.HoTT.FuncLike[H,C]):IDF", "kind" : "abstract def"}, {"label" : "iterFunc", "tail" : "(funcs: (Index) ⇒ Func[H, C]): IF", "member" : "provingground.induction.TypFamilyMap.iterFunc", "link" : "provingground\/induction\/TypFamilyMap.html#iterFunc(funcs:Index=>provingground.HoTT.Func[H,C]):IF", "kind" : "abstract def"}, {"label" : "iterDepFuncTyp", "tail" : "(w: Typ[H], xs: IDFT): Typ[IDF]", "member" : "provingground.induction.TypFamilyMap.iterDepFuncTyp", "link" : "provingground\/induction\/TypFamilyMap.html#iterDepFuncTyp(w:provingground.HoTT.Typ[H],xs:IDFT):provingground.HoTT.Typ[IDF]", "kind" : "abstract def"}, {"label" : "iterFuncTyp", "tail" : "(w: Typ[H], x: Typ[C]): Typ[IF]", "member" : "provingground.induction.TypFamilyMap.iterFuncTyp", "link" : "provingground\/induction\/TypFamilyMap.html#iterFuncTyp(w:provingground.HoTT.Typ[H],x:provingground.HoTT.Typ[C]):provingground.HoTT.Typ[IF]", "kind" : "abstract def"}, {"label" : "pattern", "tail" : ": TypFamilyPtn[H, F, Index]", "member" : "provingground.induction.TypFamilyMap.pattern", "link" : "provingground\/induction\/TypFamilyMap.html#pattern:provingground.induction.TypFamilyPtn[H,F,Index]", "kind" : "abstract val"}], "shortDescription" : "shape of a type family, together with the type of a codomain;fixing scala types of functions and dependent functions on the type family", "object" : "provingground\/induction\/TypFamilyMap$.html", "members_object" : [{"label" : "DepFuncTypFamilyMap", "tail" : "", "member" : "provingground.induction.TypFamilyMap.DepFuncTypFamilyMap", "link" : "provingground\/induction\/TypFamilyMap$.html#DepFuncTypFamilyMap[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],TF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TF],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],TIndex<:shapeless.HList,TIF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TIF],TIDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TIDF],TIDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TIDFT]]extendsTypFamilyMap[H,provingground.HoTT.FuncLike[U,TF],C,U::TIndex,provingground.HoTT.FuncLike[U,TIF],provingground.HoTT.FuncLike[U,TIDF],provingground.HoTT.FuncLike[U,TIDFT]]withProductwithSerializable", "kind" : "case class"}, {"label" : "FuncTypFamilyMap", "tail" : "", "member" : "provingground.induction.TypFamilyMap.FuncTypFamilyMap", "link" : "provingground\/induction\/TypFamilyMap$.html#FuncTypFamilyMap[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],TF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TF],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],TIndex<:shapeless.HList,TIF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TIF],TIDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TIDF],TIDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TIDFT]]extendsTypFamilyMap[H,provingground.HoTT.Func[U,TF],C,U::TIndex,provingground.HoTT.FuncLike[U,TIF],provingground.HoTT.FuncLike[U,TIDF],provingground.HoTT.FuncLike[U,TIDFT]]withProductwithSerializable", "kind" : "case class"}, {"label" : "IdSubTypFamilyMap", "tail" : "", "member" : "provingground.induction.TypFamilyMap.IdSubTypFamilyMap", "link" : "provingground\/induction\/TypFamilyMap$.html#IdSubTypFamilyMap[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],TC<:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[TC],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C]]extendsTypFamilyMap[H,provingground.HoTT.Typ[H],C,shapeless.HNil,provingground.HoTT.Func[H,C],provingground.HoTT.FuncLike[H,C],provingground.HoTT.Func[H,TC]]withProductwithSerializable", "kind" : "case class"}, {"label" : "IdTypFamilyMap", "tail" : "", "member" : "provingground.induction.TypFamilyMap.IdTypFamilyMap", "link" : "provingground\/induction\/TypFamilyMap$.html#IdTypFamilyMap[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C]]extendsTypFamilyMap[H,provingground.HoTT.Typ[H],C,shapeless.HNil,provingground.HoTT.Func[H,C],provingground.HoTT.FuncLike[H,C],provingground.HoTT.Func[H,provingground.HoTT.Typ[C]]]withProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/TypFamilyMap$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/TypFamilyMap$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/TypFamilyMap$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/TypFamilyMap$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/TypFamilyMap$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/TypFamilyMap$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/TypFamilyMap$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TypFamilyMap$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TypFamilyMap$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TypFamilyMap$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/TypFamilyMap$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/TypFamilyMap$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/TypFamilyMap$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/TypFamilyMap$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/TypFamilyMap$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/TypFamilyMap$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/TypFamilyMap$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/TypFamilyMap$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/TypFamilyMap$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/induction\/TypFamilyMap.html", "kind" : "trait"}, {"name" : "provingground.induction.TypFamilyMapper", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/TypFamilyMapper.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/TypFamilyMapper.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/TypFamilyMapper.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/TypFamilyMapper.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/TypFamilyMapper.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/TypFamilyMapper.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/TypFamilyMapper.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TypFamilyMapper.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TypFamilyMapper.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TypFamilyMapper.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/TypFamilyMapper.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/TypFamilyMapper.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/TypFamilyMapper.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/TypFamilyMapper.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/TypFamilyMapper.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/TypFamilyMapper.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/TypFamilyMapper.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/TypFamilyMapper.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/TypFamilyMapper.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "mapper", "tail" : ": (TypFamilyPtn[H, F, Index]) ⇒ TypFamilyMap[H, F, C, Index, IF, IDF, IDFT]", "member" : "provingground.induction.TypFamilyMapper.mapper", "link" : "provingground\/induction\/TypFamilyMapper.html#mapper:provingground.induction.TypFamilyPtn[H,F,Index]=>provingground.induction.TypFamilyMap[H,F,C,Index,IF,IDF,IDFT]", "kind" : "abstract val"}], "shortDescription" : "bridge between TypFamilyPtn and TypFamilyMap", "object" : "provingground\/induction\/TypFamilyMapper$.html", "members_object" : [{"label" : "depFuncTypFamilyMapper", "tail" : "(tail: TypFamilyMapper[H, TF, C, TIndex, TIF, TIDF, TIDFT], subst: TermList[TIndex]): TypFamilyMapper[H, FuncLike[U, TF], C, ::[U, TIndex], FuncLike[U, TIF], FuncLike[U, TIDF], FuncLike[U, TIDFT]]", "member" : "provingground.induction.TypFamilyMapper.depFuncTypFamilyMapper", "link" : "provingground\/induction\/TypFamilyMapper$.html#depFuncTypFamilyMapper[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],TF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TF],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],TIndex<:shapeless.HList,TIF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TIF],TIDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TIDF],TIDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TIDFT]](implicittail:provingground.induction.TypFamilyMapper[H,TF,C,TIndex,TIF,TIDF,TIDFT],implicitsubst:provingground.TermList[TIndex]):provingground.induction.TypFamilyMapper[H,provingground.HoTT.FuncLike[U,TF],C,U::TIndex,provingground.HoTT.FuncLike[U,TIF],provingground.HoTT.FuncLike[U,TIDF],provingground.HoTT.FuncLike[U,TIDFT]]", "kind" : "implicit def"}, {"label" : "funcTypFamilyMapper", "tail" : "(tail: TypFamilyMapper[H, TF, C, TIndex, TIF, TIDF, TIDFT], subst: TermList[TIndex]): TypFamilyMapper[H, Func[U, TF], C, ::[U, TIndex], FuncLike[U, TIF], FuncLike[U, TIDF], FuncLike[U, TIDFT]]", "member" : "provingground.induction.TypFamilyMapper.funcTypFamilyMapper", "link" : "provingground\/induction\/TypFamilyMapper$.html#funcTypFamilyMapper[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],TF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TF],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],TIndex<:shapeless.HList,TIF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TIF],TIDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TIDF],TIDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TIDFT]](implicittail:provingground.induction.TypFamilyMapper[H,TF,C,TIndex,TIF,TIDF,TIDFT],implicitsubst:provingground.TermList[TIndex]):provingground.induction.TypFamilyMapper[H,provingground.HoTT.Func[U,TF],C,U::TIndex,provingground.HoTT.FuncLike[U,TIF],provingground.HoTT.FuncLike[U,TIDF],provingground.HoTT.FuncLike[U,TIDFT]]", "kind" : "implicit def"}, {"label" : "idTypFamilyMapper", "tail" : "(): TypFamilyMapper[H, Typ[H], C, HNil, Func[H, C], FuncLike[H, C], Func[H, Typ[C]]]", "member" : "provingground.induction.TypFamilyMapper.idTypFamilyMapper", "link" : "provingground\/induction\/TypFamilyMapper$.html#idTypFamilyMapper[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C]]:provingground.induction.TypFamilyMapper[H,provingground.HoTT.Typ[H],C,shapeless.HNil,provingground.HoTT.Func[H,C],provingground.HoTT.FuncLike[H,C],provingground.HoTT.Func[H,provingground.HoTT.Typ[C]]]", "kind" : "implicit def"}, {"label" : "idSubTypFamilyMapper", "tail" : "(subEv: TypObj[TC, C]): TypFamilyMapper[H, Typ[H], C, HNil, Func[H, C], FuncLike[H, C], Func[H, TC]]", "member" : "provingground.induction.WeakImplicit.idSubTypFamilyMapper", "link" : "provingground\/induction\/TypFamilyMapper$.html#idSubTypFamilyMapper[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],TC<:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[TC],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C]](implicitsubEv:provingground.induction.TypObj[TC,C]):provingground.induction.TypFamilyMapper[H,provingground.HoTT.Typ[H],C,shapeless.HNil,provingground.HoTT.Func[H,C],provingground.HoTT.FuncLike[H,C],provingground.HoTT.Func[H,TC]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/TypFamilyMapper$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/TypFamilyMapper$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/TypFamilyMapper$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/TypFamilyMapper$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/TypFamilyMapper$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/TypFamilyMapper$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/TypFamilyMapper$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TypFamilyMapper$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TypFamilyMapper$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TypFamilyMapper$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/TypFamilyMapper$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/TypFamilyMapper$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/TypFamilyMapper$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/TypFamilyMapper$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/TypFamilyMapper$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/TypFamilyMapper$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/TypFamilyMapper$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/TypFamilyMapper$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/TypFamilyMapper$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/induction\/TypFamilyMapper.html", "kind" : "trait"}, {"name" : "provingground.induction.TypFamilyPtn", "shortDescription" : "the shape of a type family.", "object" : "provingground\/induction\/TypFamilyPtn$.html", "members_class" : [{"label" : "mapped", "tail" : "(): TypFamilyMap[H, F, C, Index, IF, IDF, IDFT] forSome {type IF <: Term with Subs[IF], type IDF <: Term with Subs[IDF], type IDFT <: Term with Subs[IDFT]}", "member" : "provingground.induction.TypFamilyPtn.mapped", "link" : "provingground\/induction\/TypFamilyPtn.html#mapped[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C]]:provingground.induction.TypFamilyMap[H,F,C,Index,IF,IDF,IDFT]forSome{typeIF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IF];typeIDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDF];typeIDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT]}", "kind" : "def"}, {"label" : "getMapper", "tail" : "(cod: Typ[C])(mpr: TypFamilyMapper[H, F, C, Index, IF, IDF, IDFT]): TypFamilyMapper[H, F, C, Index, IF, IDF, IDFT]", "member" : "provingground.induction.TypFamilyPtn.getMapper", "link" : "provingground\/induction\/TypFamilyPtn.html#getMapper[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],IF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IF],IDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDF],IDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT]](cod:provingground.HoTT.Typ[C])(implicitmpr:provingground.induction.TypFamilyMapper[H,F,C,Index,IF,IDF,IDFT]):provingground.induction.TypFamilyMapper[H,F,C,Index,IF,IDF,IDFT]", "kind" : "def"}, {"label" : "~>:", "tail" : "(variable: TT): DepFuncTypFamily[TT, H, F, Index]", "member" : "provingground.induction.TypFamilyPtn.~>:", "link" : "provingground\/induction\/TypFamilyPtn.html#~>:[TT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TT]](variable:TT):provingground.induction.TypFamilyPtn.DepFuncTypFamily[TT,H,F,Index]", "kind" : "def"}, {"label" : "tlEvidence", "tail" : ": TermList[Index]", "member" : "provingground.induction.TypFamilyPtn.tlEvidence", "link" : "provingground\/induction\/TypFamilyPtn.html#tlEvidence:provingground.TermList[Index]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/TypFamilyPtn.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/TypFamilyPtn.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/TypFamilyPtn.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/TypFamilyPtn.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/TypFamilyPtn.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/TypFamilyPtn.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/TypFamilyPtn.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TypFamilyPtn.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TypFamilyPtn.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TypFamilyPtn.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/TypFamilyPtn.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/TypFamilyPtn.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/TypFamilyPtn.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/TypFamilyPtn.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/TypFamilyPtn.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/TypFamilyPtn.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/TypFamilyPtn.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/TypFamilyPtn.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/TypFamilyPtn.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "domFromRecType", "tail" : "(typ: Typ[Term]): Option[Typ[Term]]", "member" : "provingground.induction.TypFamilyPtn.domFromRecType", "link" : "provingground\/induction\/TypFamilyPtn.html#domFromRecType(typ:provingground.HoTT.Typ[provingground.HoTT.Term]):Option[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "abstract def"}, {"label" : "codFromRecType", "tail" : "(typ: Typ[Term]): Option[Typ[Term]]", "member" : "provingground.induction.TypFamilyPtn.codFromRecType", "link" : "provingground\/induction\/TypFamilyPtn.html#codFromRecType(typ:provingground.HoTT.Typ[provingground.HoTT.Term]):Option[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "abstract def"}, {"label" : "codFamily", "tail" : "(typ: Typ[Term]): Term", "member" : "provingground.induction.TypFamilyPtn.codFamily", "link" : "provingground\/induction\/TypFamilyPtn.html#codFamily(typ:provingground.HoTT.Typ[provingground.HoTT.Term]):provingground.HoTT.Term", "kind" : "abstract def"}, {"label" : "constFinalCod", "tail" : "(depCod: IDFT): OptTyp", "member" : "provingground.induction.TypFamilyPtn.constFinalCod", "link" : "provingground\/induction\/TypFamilyPtn.html#constFinalCod[IDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT]](depCod:IDFT):provingground.induction.TypFamilyPtn.OptTyp", "kind" : "abstract def"}, {"label" : "finalCod", "tail" : "(depCod: IDFT): Typ[_]", "member" : "provingground.induction.TypFamilyPtn.finalCod", "link" : "provingground\/induction\/TypFamilyPtn.html#finalCod[IDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT]](depCod:IDFT):provingground.HoTT.Typ[_]", "kind" : "abstract def"}, {"label" : "mapper", "tail" : "(): TypFamilyMapper[H, F, C, Index, IF, IDF, IDFT] forSome {type IF <: Term with Subs[IF], type IDF <: Term with Subs[IDF], type IDFT <: Term with Subs[IDFT]}", "member" : "provingground.induction.TypFamilyPtn.mapper", "link" : "provingground\/induction\/TypFamilyPtn.html#mapper[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C]]:provingground.induction.TypFamilyMapper[H,F,C,Index,IF,IDF,IDFT]forSome{typeIF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IF];typeIDF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDF];typeIDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT]}", "kind" : "abstract def"}, {"label" : "subs", "tail" : "(x: Term, y: Term): TypFamilyPtn[H, F, Index]", "member" : "provingground.induction.TypFamilyPtn.subs", "link" : "provingground\/induction\/TypFamilyPtn.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.induction.TypFamilyPtn[H,F,Index]", "kind" : "abstract def"}, {"label" : "someTyp", "tail" : "(w: F): Typ[H]", "member" : "provingground.induction.TypFamilyPtn.someTyp", "link" : "provingground\/induction\/TypFamilyPtn.html#someTyp(w:F):provingground.HoTT.Typ[H]", "kind" : "abstract def"}, {"label" : "typ", "tail" : "(w: F, index: Index): Typ[H]", "member" : "provingground.induction.TypFamilyPtn.typ", "link" : "provingground\/induction\/TypFamilyPtn.html#typ(w:F,index:Index):provingground.HoTT.Typ[H]", "kind" : "abstract def"}, {"label" : "getIndex", "tail" : "(w: F, typ: Typ[H]): Option[Index]", "member" : "provingground.induction.TypFamilyPtn.getIndex", "link" : "provingground\/induction\/TypFamilyPtn.html#getIndex(w:F,typ:provingground.HoTT.Typ[H]):Option[Index]", "kind" : "abstract def"}], "members_object" : [{"label" : "getExst", "tail" : "(w: F): Exst", "member" : "provingground.induction.TypFamilyPtn.getExst", "link" : "provingground\/induction\/TypFamilyPtn$.html#getExst[F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F]](w:F):provingground.induction.TypFamilyPtn.Exst", "kind" : "def"}, {"label" : "Exst", "tail" : "", "member" : "provingground.induction.TypFamilyPtn.Exst", "link" : "provingground\/induction\/TypFamilyPtn$.html#Exst", "kind" : "object"}, {"label" : "Exst", "tail" : "", "member" : "provingground.induction.TypFamilyPtn.Exst", "link" : "provingground\/induction\/TypFamilyPtn$.html#ExstextendsAnyRef", "kind" : "sealed trait"}, {"label" : "DepFuncTypFamily", "tail" : "", "member" : "provingground.induction.TypFamilyPtn.DepFuncTypFamily", "link" : "provingground\/induction\/TypFamilyPtn$.html#DepFuncTypFamily[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],TF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TF],TI<:shapeless.HList]extendsTypFamilyPtn[H,provingground.HoTT.FuncLike[U,TF],U::TI]withProductwithSerializable", "kind" : "case class"}, {"label" : "FuncTypFamily", "tail" : "", "member" : "provingground.induction.TypFamilyPtn.FuncTypFamily", "link" : "provingground\/induction\/TypFamilyPtn$.html#FuncTypFamily[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],TF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TF],TI<:shapeless.HList]extendsTypFamilyPtn[H,provingground.HoTT.Func[U,TF],U::TI]withProductwithSerializable", "kind" : "case class"}, {"label" : "OptTyp", "tail" : "", "member" : "provingground.induction.TypFamilyPtn.OptTyp", "link" : "provingground\/induction\/TypFamilyPtn$.html#OptTyp=Option[provingground.HoTT.Typ[u]forSome{typeu<:provingground.HoTT.Termwithprovingground.HoTT.Subs[u]}]", "kind" : "type"}, {"label" : "IdTypFamily", "tail" : "", "member" : "provingground.induction.TypFamilyPtn.IdTypFamily", "link" : "provingground\/induction\/TypFamilyPtn$.html#IdTypFamily[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H]]extendsTypFamilyPtn[H,provingground.HoTT.Typ[H],shapeless.HNil]withProductwithSerializable", "kind" : "case class"}, {"label" : "IdTypFamily", "tail" : "", "member" : "provingground.induction.TypFamilyPtn.IdTypFamily", "link" : "provingground\/induction\/TypFamilyPtn$.html#IdTypFamily", "kind" : "object"}, {"label" : "apply", "tail" : "(w: F)(arg0: TermList[Index], g: TypFamilyPtnGetter[F, H, Index]): TypFamilyPtn[H, F, Index]", "member" : "provingground.induction.TypFamilyPtn.apply", "link" : "provingground\/induction\/TypFamilyPtn$.html#apply[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],Index<:shapeless.HList](w:F)(implicitevidence$2:provingground.TermList[Index],implicitg:provingground.induction.TypFamilyPtnGetter[F,H,Index]):provingground.induction.TypFamilyPtn[H,F,Index]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/TypFamilyPtn$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/TypFamilyPtn$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/TypFamilyPtn$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/TypFamilyPtn$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/TypFamilyPtn$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/TypFamilyPtn$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/TypFamilyPtn$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TypFamilyPtn$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TypFamilyPtn$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TypFamilyPtn$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/TypFamilyPtn$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/TypFamilyPtn$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/TypFamilyPtn$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/TypFamilyPtn$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/TypFamilyPtn$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/TypFamilyPtn$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/TypFamilyPtn$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/TypFamilyPtn$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/TypFamilyPtn$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/induction\/TypFamilyPtn.html", "kind" : "class"}, {"name" : "provingground.induction.TypFamilyPtnGetter", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/TypFamilyPtnGetter.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/TypFamilyPtnGetter.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/TypFamilyPtnGetter.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/TypFamilyPtnGetter.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/TypFamilyPtnGetter.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/TypFamilyPtnGetter.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/TypFamilyPtnGetter.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TypFamilyPtnGetter.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TypFamilyPtnGetter.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TypFamilyPtnGetter.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/TypFamilyPtnGetter.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/TypFamilyPtnGetter.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/TypFamilyPtnGetter.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/TypFamilyPtnGetter.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/TypFamilyPtnGetter.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/TypFamilyPtnGetter.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/TypFamilyPtnGetter.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/TypFamilyPtnGetter.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/TypFamilyPtnGetter.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "subst", "tail" : ": TermList[Index]", "member" : "provingground.induction.TypFamilyPtnGetter.subst", "link" : "provingground\/induction\/TypFamilyPtnGetter.html#subst:provingground.TermList[Index]", "kind" : "implicit abstract val"}, {"label" : "get", "tail" : "(w: F): TypFamilyPtn[H, F, Index]", "member" : "provingground.induction.TypFamilyPtnGetter.get", "link" : "provingground\/induction\/TypFamilyPtnGetter.html#get(w:F):provingground.induction.TypFamilyPtn[H,F,Index]", "kind" : "abstract def"}], "shortDescription" : "", "object" : "provingground\/induction\/TypFamilyPtnGetter$.html", "members_object" : [{"label" : "depFuncTypFamilyGetter", "tail" : "(tail: TypFamilyPtnGetter[TF, H, TI]): TypFamilyPtnGetter[FuncLike[U, TF], H, ::[U, TI]]", "member" : "provingground.induction.TypFamilyPtnGetter.depFuncTypFamilyGetter", "link" : "provingground\/induction\/TypFamilyPtnGetter$.html#depFuncTypFamilyGetter[TF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TF],U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],TI<:shapeless.HList](implicittail:provingground.induction.TypFamilyPtnGetter[TF,H,TI]):provingground.induction.TypFamilyPtnGetter[provingground.HoTT.FuncLike[U,TF],H,U::TI]", "kind" : "implicit def"}, {"label" : "funcTypFamilyGetter", "tail" : "(tail: TypFamilyPtnGetter[TF, H, TI]): TypFamilyPtnGetter[Func[U, TF], H, ::[U, TI]]", "member" : "provingground.induction.TypFamilyPtnGetter.funcTypFamilyGetter", "link" : "provingground\/induction\/TypFamilyPtnGetter$.html#funcTypFamilyGetter[TF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TF],U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],TI<:shapeless.HList](implicittail:provingground.induction.TypFamilyPtnGetter[TF,H,TI]):provingground.induction.TypFamilyPtnGetter[provingground.HoTT.Func[U,TF],H,U::TI]", "kind" : "implicit def"}, {"label" : "idGetter", "tail" : "(): TypFamilyPtnGetter[Typ[H], H, HNil]", "member" : "provingground.induction.TypFamilyPtnGetter.idGetter", "link" : "provingground\/induction\/TypFamilyPtnGetter$.html#idGetter[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H]]:provingground.induction.TypFamilyPtnGetter[provingground.HoTT.Typ[H],H,shapeless.HNil]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/TypFamilyPtnGetter$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/TypFamilyPtnGetter$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/TypFamilyPtnGetter$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/TypFamilyPtnGetter$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/TypFamilyPtnGetter$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/TypFamilyPtnGetter$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/TypFamilyPtnGetter$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TypFamilyPtnGetter$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TypFamilyPtnGetter$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TypFamilyPtnGetter$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/TypFamilyPtnGetter$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/TypFamilyPtnGetter$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/TypFamilyPtnGetter$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/TypFamilyPtnGetter$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/TypFamilyPtnGetter$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/TypFamilyPtnGetter$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/TypFamilyPtnGetter$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/TypFamilyPtnGetter$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/TypFamilyPtnGetter$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/induction\/TypFamilyPtnGetter.html", "kind" : "trait"}, {"name" : "provingground.induction.TypObj", "shortDescription" : "aid for implicit calculations:given a scala type that is a subtype of Typ[C], recovers C,eg shows that FuncTyp[A, B] is a subtype of Typ[Func[A, B]]", "object" : "provingground\/induction\/TypObj$.html", "members_class" : [{"label" : "me", "tail" : "(t: T): Typ[C]", "member" : "provingground.induction.TypObj.me", "link" : "provingground\/induction\/TypObj.html#me(t:T):provingground.HoTT.Typ[C]", "kind" : "def"}, {"member" : "provingground.induction.TypObj#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/TypObj.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/TypObj.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/TypObj.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/TypObj.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/TypObj.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/TypObj.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/TypObj.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TypObj.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TypObj.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TypObj.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/TypObj.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/TypObj.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/TypObj.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/TypObj.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/TypObj.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/TypObj.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/TypObj.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/TypObj.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/TypObj.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "solve", "tail" : "(fmly: TC)(tpObj: TypObj[TC, C]): Typ[C]", "member" : "provingground.induction.TypObj.solve", "link" : "provingground\/induction\/TypObj$.html#solve[TC<:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[TC],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C]](fmly:TC)(implicittpObj:provingground.induction.TypObj[TC,C]):provingground.HoTT.Typ[C]", "kind" : "def"}, {"label" : "pair", "tail" : "(): TypObj[ProdTyp[U, V], PairTerm[U, V]]", "member" : "provingground.induction.TypObj.pair", "link" : "provingground\/induction\/TypObj$.html#pair[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]]:provingground.induction.TypObj[provingground.HoTT.ProdTyp[U,V],provingground.HoTT.PairTerm[U,V]]", "kind" : "implicit def"}, {"label" : "pi", "tail" : "(): TypObj[PiDefn[U, V], FuncLike[U, V]]", "member" : "provingground.induction.TypObj.pi", "link" : "provingground\/induction\/TypObj$.html#pi[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]]:provingground.induction.TypObj[provingground.HoTT.PiDefn[U,V],provingground.HoTT.FuncLike[U,V]]", "kind" : "implicit def"}, {"label" : "funclike", "tail" : "(): TypObj[GenFuncTyp[U, V], FuncLike[U, V]]", "member" : "provingground.induction.TypObj.funclike", "link" : "provingground\/induction\/TypObj$.html#funclike[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]]:provingground.induction.TypObj[provingground.HoTT.GenFuncTyp[U,V],provingground.HoTT.FuncLike[U,V]]", "kind" : "implicit def"}, {"label" : "func", "tail" : "(): TypObj[FuncTyp[U, V], Func[U, V]]", "member" : "provingground.induction.TypObj.func", "link" : "provingground\/induction\/TypObj$.html#func[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]]:provingground.induction.TypObj[provingground.HoTT.FuncTyp[U,V],provingground.HoTT.Func[U,V]]", "kind" : "implicit def"}, {"label" : "tautology", "tail" : "(): TypObj[Typ[U], U]", "member" : "provingground.induction.TypObj.tautology", "link" : "provingground\/induction\/TypObj$.html#tautology[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]:provingground.induction.TypObj[provingground.HoTT.Typ[U],U]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/TypObj$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/TypObj$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/TypObj$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/TypObj$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/TypObj$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/TypObj$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/TypObj$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TypObj$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TypObj$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/TypObj$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/TypObj$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/TypObj$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/TypObj$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/TypObj$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/TypObj$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/TypObj$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/TypObj$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/TypObj$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/TypObj$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/induction\/TypObj.html", "kind" : "class"}, {"name" : "provingground.induction.WeakImplicit", "members_trait" : [{"label" : "idSubTypFamilyMapper", "tail" : "(subEv: TypObj[TC, C]): TypFamilyMapper[H, Typ[H], C, HNil, Func[H, C], FuncLike[H, C], Func[H, TC]]", "member" : "provingground.induction.WeakImplicit.idSubTypFamilyMapper", "link" : "provingground\/induction\/WeakImplicit.html#idSubTypFamilyMapper[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],TC<:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[TC],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C]](implicitsubEv:provingground.induction.TypObj[TC,C]):provingground.induction.TypFamilyMapper[H,provingground.HoTT.Typ[H],C,shapeless.HNil,provingground.HoTT.Func[H,C],provingground.HoTT.FuncLike[H,C],provingground.HoTT.Func[H,TC]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/WeakImplicit.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/WeakImplicit.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/WeakImplicit.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/WeakImplicit.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/WeakImplicit.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/WeakImplicit.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/WeakImplicit.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/WeakImplicit.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/WeakImplicit.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/WeakImplicit.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/WeakImplicit.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/WeakImplicit.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/WeakImplicit.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/WeakImplicit.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/WeakImplicit.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/WeakImplicit.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/WeakImplicit.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/WeakImplicit.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/WeakImplicit.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "provingground\/induction\/WeakImplicit.html", "kind" : "trait"}], "akka.pattern" : [], "provingground" : [{"name" : "provingground.Base", "shortDescription" : "", "object" : "provingground\/Base$.html", "members_object" : [{"label" : "switch", "tail" : ": FuncLike[PairTerm[Term with Subs[Term], Term with Subs[Term]], PairTerm[Term with Subs[Term], Term with Subs[Term]]]", "member" : "provingground.Base.switch", "link" : "provingground\/Base$.html#switch:provingground.HoTT.FuncLike[provingground.HoTT.PairTerm[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]],provingground.HoTT.PairTerm[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "fmly", "tail" : ": GenFuncTyp[Term, Func[Term, Term]]", "member" : "provingground.Base.fmly", "link" : "provingground\/Base$.html#fmly:provingground.HoTT.GenFuncTyp[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "mp", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Term, FuncLike[Func[Term, Term], Term]]]]", "member" : "provingground.Base.mp", "link" : "provingground\/Base$.html#mp:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term],provingground.HoTT.Term]]]]", "kind" : "val"}, {"label" : "AimplB", "tail" : ": Func[Term, Term] with Subs[Func[Term, Term]]", "member" : "provingground.Base.AimplB", "link" : "provingground\/Base$.html#AimplB:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "gdep", "tail" : ": FuncLike[Term, Term] with Subs[FuncLike[Term, Term]]", "member" : "provingground.Base.gdep", "link" : "provingground\/Base$.html#gdep:provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "fdep", "tail" : ": FuncLike[Term, Term] with Subs[FuncLike[Term, Term]]", "member" : "provingground.Base.fdep", "link" : "provingground\/Base$.html#fdep:provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "Bs", "tail" : ": Func[Term, Typ[Term]] with Subs[Func[Term, Typ[Term]]]", "member" : "provingground.Base.Bs", "link" : "provingground\/Base$.html#Bs:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "id", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Term with Subs[Term], Term with Subs[Term]]]", "member" : "provingground.Base.id", "link" : "provingground\/Base$.html#id:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "hB", "tail" : ": Func[Term, Term] with Subs[Func[Term, Term]]", "member" : "provingground.Base.hB", "link" : "provingground\/Base$.html#hB:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "hA", "tail" : ": Func[Term, Term] with Subs[Func[Term, Term]]", "member" : "provingground.Base.hA", "link" : "provingground\/Base$.html#hA:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "g", "tail" : ": Func[Term, Term] with Subs[Func[Term, Term]]", "member" : "provingground.Base.g", "link" : "provingground\/Base$.html#g:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "f", "tail" : ": Func[Term, Term] with Subs[Func[Term, Term]]", "member" : "provingground.Base.f", "link" : "provingground\/Base$.html#f:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "b", "tail" : ": Term with Subs[Term]", "member" : "provingground.Base.b", "link" : "provingground\/Base$.html#b:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "B", "tail" : ": Typ[Term] with Subs[Typ[Term]]", "member" : "provingground.Base.B", "link" : "provingground\/Base$.html#B:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "a", "tail" : ": Term with Subs[Term]", "member" : "provingground.Base.a", "link" : "provingground\/Base$.html#a:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "A", "tail" : ": Typ[Term] with Subs[Typ[Term]]", "member" : "provingground.Base.A", "link" : "provingground\/Base$.html#A:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/Base$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/Base$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/Base$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/Base$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/Base$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/Base$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/Base$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/Base$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/Base$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/Base$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/Base$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/Base$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/Base$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/Base$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/Base$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/Base$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/Base$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/Base$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/Base$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.Context", "members_trait" : [{"label" : "namedTerms", "tail" : ": Map[AnySym, Term]", "member" : "provingground.Context.namedTerms", "link" : "provingground\/Context.html#namedTerms:Map[provingground.HoTT.AnySym,provingground.HoTT.Term]", "kind" : "lazy val"}, {"label" : "introduce", "tail" : "(t: U, role: Role): AppendTerm[U]", "member" : "provingground.Context.introduce", "link" : "provingground\/Context.html#introduce[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](t:U,role:provingground.Context.Role):provingground.Context.AppendTerm[U]", "kind" : "def"}, {"label" : "given", "tail" : "(v: Term): AppendConstant[Term]", "member" : "provingground.Context.given", "link" : "provingground\/Context.html#given[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](v:provingground.HoTT.Term):provingground.Context.AppendConstant[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "assert", "tail" : "(tp: Typ[Term]): AppendTerm[Typ[Term]]", "member" : "provingground.Context.assert", "link" : "provingground\/Context.html#assert(tp:provingground.HoTT.Typ[provingground.HoTT.Term]):provingground.Context.AppendTerm[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "assume", "tail" : "(tp: Typ[Term], text: String): AppendConstant[Term with Subs[Term]]", "member" : "provingground.Context.assume", "link" : "provingground\/Context.html#assume(tp:provingground.HoTT.Typ[provingground.HoTT.Term],text:String):provingground.Context.AppendConstant[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "addVariable", "tail" : "(variable: U): AppendConstant[U]", "member" : "provingground.Context.addVariable", "link" : "provingground\/Context.html#addVariable[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](variable:U):provingground.Context.AppendConstant[U]", "kind" : "def"}, {"label" : "addConstant", "tail" : "(const: U): AppendConstant[U]", "member" : "provingground.Context.addConstant", "link" : "provingground\/Context.html#addConstant[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](const:U):provingground.Context.AppendConstant[U]", "kind" : "def"}, {"label" : "let", "tail" : "(name: Term, value: U): AppendDefn[U]", "member" : "provingground.Context.let", "link" : "provingground\/Context.html#let[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](name:provingground.HoTT.Term,value:U):provingground.Context.AppendDefn[U]", "kind" : "def"}, {"label" : "defineSym", "tail" : "(name: AnySym, value: U): AppendDefn[U]", "member" : "provingground.Context.defineSym", "link" : "provingground\/Context.html#defineSym[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](name:provingground.HoTT.AnySym,value:U):provingground.Context.AppendDefn[U]", "kind" : "def"}, {"label" : "define", "tail" : "(name: Term, value: U): AppendDefn[U]", "member" : "provingground.Context.define", "link" : "provingground\/Context.html#define[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](name:provingground.HoTT.Term,value:U):provingground.Context.AppendDefn[U]", "kind" : "def"}, {"label" : "inducStruct", "tail" : ": ExstInducStruc", "member" : "provingground.Context.inducStruct", "link" : "provingground\/Context.html#inducStruct:provingground.induction.ExstInducStruc", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/Context.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/Context.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/Context.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/Context.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/Context.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/Context.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/Context.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/Context.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/Context.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/Context.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/Context.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/Context.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/Context.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/Context.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/Context.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/Context.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/Context.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/Context.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/Context.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "valueOpt", "tail" : ": Option[Term]", "member" : "provingground.Context.valueOpt", "link" : "provingground\/Context.html#valueOpt:Option[provingground.HoTT.Term]", "kind" : "abstract val"}, {"label" : "exportTyp", "tail" : "(typ: Typ[Term]): Typ[Term]", "member" : "provingground.Context.exportTyp", "link" : "provingground\/Context.html#exportTyp(typ:provingground.HoTT.Typ[provingground.HoTT.Term]):provingground.HoTT.Typ[provingground.HoTT.Term]", "kind" : "abstract def"}, {"label" : "export", "tail" : "(t: Term): Term", "member" : "provingground.Context.export", "link" : "provingground\/Context.html#export(t:provingground.HoTT.Term):provingground.HoTT.Term", "kind" : "abstract def"}, {"label" : "inductiveDefns", "tail" : ": Vector[ExstInducStruc]", "member" : "provingground.Context.inductiveDefns", "link" : "provingground\/Context.html#inductiveDefns:Vector[provingground.induction.ExstInducStruc]", "kind" : "abstract val"}, {"label" : "definitions", "tail" : ": Vector[Defn[Term]]", "member" : "provingground.Context.definitions", "link" : "provingground\/Context.html#definitions:Vector[provingground.Context.Defn[provingground.HoTT.Term]]", "kind" : "abstract val"}, {"label" : "terms", "tail" : ": Vector[Term]", "member" : "provingground.Context.terms", "link" : "provingground\/Context.html#terms:Vector[provingground.HoTT.Term]", "kind" : "abstract val"}, {"label" : "variables", "tail" : ": Vector[Term]", "member" : "provingground.Context.variables", "link" : "provingground\/Context.html#variables:Vector[provingground.HoTT.Term]", "kind" : "abstract val"}, {"label" : "constants", "tail" : ": Vector[Term]", "member" : "provingground.Context.constants", "link" : "provingground\/Context.html#constants:Vector[provingground.HoTT.Term]", "kind" : "abstract val"}], "shortDescription" : "", "object" : "provingground\/Context$.html", "members_object" : [{"label" : "AppendVariable", "tail" : "", "member" : "provingground.Context.AppendVariable", "link" : "provingground\/Context$.html#AppendVariable[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsContextwithProductwithSerializable", "kind" : "case class"}, {"label" : "AppendTerm", "tail" : "", "member" : "provingground.Context.AppendTerm", "link" : "provingground\/Context$.html#AppendTerm[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsContextwithProductwithSerializable", "kind" : "case class"}, {"label" : "Consider", "tail" : "", "member" : "provingground.Context.Consider", "link" : "provingground\/Context$.html#Consider", "kind" : "object"}, {"label" : "Assert", "tail" : "", "member" : "provingground.Context.Assert", "link" : "provingground\/Context$.html#Assert", "kind" : "object"}, {"label" : "Role", "tail" : "", "member" : "provingground.Context.Role", "link" : "provingground\/Context$.html#RoleextendsAnyRef", "kind" : "sealed trait"}, {"label" : "AppendIndDef", "tail" : "", "member" : "provingground.Context.AppendIndDef", "link" : "provingground\/Context$.html#AppendIndDefextendsContextwithProductwithSerializable", "kind" : "case class"}, {"label" : "AppendConstant", "tail" : "", "member" : "provingground.Context.AppendConstant", "link" : "provingground\/Context$.html#AppendConstant[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsContextwithProductwithSerializable", "kind" : "case class"}, {"label" : "AppendDefn", "tail" : "", "member" : "provingground.Context.AppendDefn", "link" : "provingground\/Context$.html#AppendDefn[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsContextwithProductwithSerializable", "kind" : "case class"}, {"label" : "Defn", "tail" : "", "member" : "provingground.Context.Defn", "link" : "provingground\/Context$.html#Defn[+U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsProductwithSerializable", "kind" : "case class"}, {"label" : "Empty", "tail" : "", "member" : "provingground.Context.Empty", "link" : "provingground\/Context$.html#Empty", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/Context$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/Context$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/Context$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/Context$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/Context$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/Context$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/Context$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/Context$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/Context$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/Context$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/Context$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/Context$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/Context$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/Context$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/Context$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/Context$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/Context$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/Context$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/Context$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/Context.html", "kind" : "object"}, {"name" : "provingground.FiniteDistribution", "shortDescription" : "", "object" : "provingground\/FiniteDistribution$.html", "members_object" : [{"label" : "invFlatMap", "tail" : "(f: (S) ⇒ FiniteDistribution[T], support: Traversable[S]): FiniteDistribution[T]", "member" : "provingground.FiniteDistribution.invFlatMap", "link" : "provingground\/FiniteDistribution$.html#invFlatMap[S,T](f:S=>provingground.FiniteDistribution[T],support:Traversable[S]):provingground.FiniteDistribution[T]", "kind" : "def"}, {"label" : "linearCombination", "tail" : "(terms: Seq[(Double, FiniteDistribution[T])]): FiniteDistribution[T]", "member" : "provingground.FiniteDistribution.linearCombination", "link" : "provingground\/FiniteDistribution$.html#linearCombination[T](terms:Seq[(Double,provingground.FiniteDistribution[T])]):provingground.FiniteDistribution[T]", "kind" : "def"}, {"label" : "empty", "tail" : "(): FiniteDistribution[T]", "member" : "provingground.FiniteDistribution.empty", "link" : "provingground\/FiniteDistribution$.html#empty[T]:provingground.FiniteDistribution[T]", "kind" : "def"}, {"label" : "unif", "tail" : "(as: A*): FiniteDistribution[A]", "member" : "provingground.FiniteDistribution.unif", "link" : "provingground\/FiniteDistribution$.html#unif[A](as:A*):provingground.FiniteDistribution[A]", "kind" : "def"}, {"label" : "rawUnif", "tail" : "(s: Traversable[A]): FiniteDistribution[A]", "member" : "provingground.FiniteDistribution.rawUnif", "link" : "provingground\/FiniteDistribution$.html#rawUnif[A](s:Traversable[A]):provingground.FiniteDistribution[A]", "kind" : "def"}, {"label" : "uniform", "tail" : "(s: Traversable[A]): FiniteDistribution[A]", "member" : "provingground.FiniteDistribution.uniform", "link" : "provingground\/FiniteDistribution$.html#uniform[A](s:Traversable[A]):provingground.FiniteDistribution[A]", "kind" : "def"}, {"label" : "collect", "tail" : "(fd: FiniteDistribution[Option[T]]): FiniteDistribution[T]", "member" : "provingground.FiniteDistribution.collect", "link" : "provingground\/FiniteDistribution$.html#collect[T](fd:provingground.FiniteDistribution[Option[T]]):provingground.FiniteDistribution[T]", "kind" : "def"}, {"label" : "entropy", "tail" : "(fd: FiniteDistribution[T]): Double", "member" : "provingground.FiniteDistribution.entropy", "link" : "provingground\/FiniteDistribution$.html#entropy[T](fd:provingground.FiniteDistribution[T]):Double", "kind" : "def"}, {"label" : "apply", "tail" : "(pmf: Traversable[Weighted[T]]): FiniteDistribution[T]", "member" : "provingground.FiniteDistribution.apply", "link" : "provingground\/FiniteDistribution$.html#apply[T](pmf:Traversable[provingground.Weighted[T]]):provingground.FiniteDistribution[T]", "kind" : "def"}, {"label" : "rw", "tail" : "(arg0: upickle.default.ReadWriter[A]): upickle.default.ReadWriter[FiniteDistribution[A]]", "member" : "provingground.FiniteDistribution.rw", "link" : "provingground\/FiniteDistribution$.html#rw[A](implicitevidence$1:upickle.default.ReadWriter[A]):upickle.default.ReadWriter[provingground.FiniteDistribution[A]]", "kind" : "implicit def"}, {"label" : "random", "tail" : ": Random", "member" : "provingground.FiniteDistribution.random", "link" : "provingground\/FiniteDistribution$.html#random:scala.util.Random", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/FiniteDistribution$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/FiniteDistribution$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/FiniteDistribution$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/FiniteDistribution$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/FiniteDistribution$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/FiniteDistribution$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/FiniteDistribution$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/FiniteDistribution$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/FiniteDistribution$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/FiniteDistribution$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/FiniteDistribution$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/FiniteDistribution$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/FiniteDistribution$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/FiniteDistribution$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/FiniteDistribution$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/FiniteDistribution$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/FiniteDistribution$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/FiniteDistribution$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/FiniteDistribution$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "KLfeedback", "tail" : "(baseweights: (T) ⇒ Double, strictness: Double): FiniteDistribution[T]", "member" : "provingground.FiniteDistribution.KLfeedback", "link" : "provingground\/FiniteDistribution.html#KLfeedback(baseweights:T=>Double,strictness:Double):provingground.FiniteDistribution[T]", "kind" : "def"}, {"label" : "smoothedFeedback", "tail" : "(baseweights: (T) ⇒ Double, damp: Double, strictness: Double): FiniteDistribution[T]", "member" : "provingground.FiniteDistribution.smoothedFeedback", "link" : "provingground\/FiniteDistribution.html#smoothedFeedback(baseweights:T=>Double,damp:Double,strictness:Double):provingground.FiniteDistribution[T]", "kind" : "def"}, {"label" : "rawfeedback", "tail" : "(baseweights: (T) ⇒ Double, damp: Double, strictness: Double): FiniteDistribution[T]", "member" : "provingground.FiniteDistribution.rawfeedback", "link" : "provingground\/FiniteDistribution.html#rawfeedback(baseweights:T=>Double,damp:Double,strictness:Double):provingground.FiniteDistribution[T]", "kind" : "def"}, {"label" : "integral", "tail" : "(f: (T) ⇒ Double): Double", "member" : "provingground.FiniteDistribution.integral", "link" : "provingground\/FiniteDistribution.html#integral(f:T=>Double):Double", "kind" : "def"}, {"label" : "expectation", "tail" : "(ls: VectorSpace[T, Double]): T", "member" : "provingground.FiniteDistribution.expectation", "link" : "provingground\/FiniteDistribution.html#expectation(implicitls:spire.algebra.VectorSpace[T,Double]):T", "kind" : "def"}, {"label" : "split", "tail" : "(groups: Int): Map[Int, FiniteDistribution[T]]", "member" : "provingground.FiniteDistribution.split", "link" : "provingground\/FiniteDistribution.html#split(groups:Int):Map[Int,provingground.FiniteDistribution[T]]", "kind" : "def"}, {"label" : "entropyVec", "tail" : "(): Vector[Weighted[T]]", "member" : "provingground.FiniteDistribution.entropyVec", "link" : "provingground\/FiniteDistribution.html#entropyVec:Vector[provingground.Weighted[T]]", "kind" : "def"}, {"label" : "entropyView", "tail" : "(): Vector[Weighted[String]]", "member" : "provingground.FiniteDistribution.entropyView", "link" : "provingground\/FiniteDistribution.html#entropyView:Vector[provingground.Weighted[String]]", "kind" : "def"}, {"label" : "entropy", "tail" : "(elem: T): Double", "member" : "provingground.FiniteDistribution.entropy", "link" : "provingground\/FiniteDistribution.html#entropy(elem:T):Double", "kind" : "def"}, {"label" : "condMap", "tail" : "(f: (T) ⇒ Option[S]): FiniteDistribution[S]", "member" : "provingground.FiniteDistribution.condMap", "link" : "provingground\/FiniteDistribution.html#condMap[S](f:T=>Option[S]):provingground.FiniteDistribution[S]", "kind" : "def"}, {"label" : "conditioned", "tail" : "(p: (T) ⇒ Boolean): FiniteDistribution[T]", "member" : "provingground.FiniteDistribution.conditioned", "link" : "provingground\/FiniteDistribution.html#conditioned(p:T=>Boolean):provingground.FiniteDistribution[T]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "provingground.FiniteDistribution.toString", "link" : "provingground\/FiniteDistribution.html#toString():String", "kind" : "def"}, {"label" : "next", "tail" : "(): T", "member" : "provingground.FiniteDistribution.next", "link" : "provingground\/FiniteDistribution.html#next:T", "kind" : "def"}, {"label" : "safeNormalized", "tail" : "(): FiniteDistribution[T]", "member" : "provingground.FiniteDistribution.safeNormalized", "link" : "provingground\/FiniteDistribution.html#safeNormalized:provingground.FiniteDistribution[T]", "kind" : "def"}, {"label" : "total", "tail" : "(): Double", "member" : "provingground.FiniteDistribution.total", "link" : "provingground\/FiniteDistribution.html#total:Double", "kind" : "def"}, {"label" : "memo", "tail" : "(): Map[T, Double]", "member" : "provingground.FiniteDistribution.memo", "link" : "provingground\/FiniteDistribution.html#memo:Map[T,Double]", "kind" : "def"}, {"label" : "dot", "tail" : "(that: FiniteDistribution[T]): Double", "member" : "provingground.FiniteDistribution.dot", "link" : "provingground\/FiniteDistribution.html#dot(that:provingground.FiniteDistribution[T]):Double", "kind" : "def"}, {"label" : "innerProduct", "tail" : "(that: FiniteDistribution[T]): Double", "member" : "provingground.FiniteDistribution.innerProduct", "link" : "provingground\/FiniteDistribution.html#innerProduct(that:provingground.FiniteDistribution[T]):Double", "kind" : "def"}, {"label" : "pickle", "tail" : "(): List[(String, Double)]", "member" : "provingground.FiniteDistribution.pickle", "link" : "provingground\/FiniteDistribution.html#pickle:List[(String,Double)]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (T) ⇒ FiniteDistribution[S]): FiniteDistribution[S]", "member" : "provingground.FiniteDistribution.flatMap", "link" : "provingground\/FiniteDistribution.html#flatMap[S](f:T=>provingground.FiniteDistribution[S]):provingground.FiniteDistribution[S]", "kind" : "def"}, {"label" : "invmapOpt", "tail" : "(f: (S) ⇒ Option[T], support: Traversable[S]): FiniteDistribution[S]", "member" : "provingground.FiniteDistribution.invmapOpt", "link" : "provingground\/FiniteDistribution.html#invmapOpt[S](f:S=>Option[T],support:Traversable[S]):provingground.FiniteDistribution[S]", "kind" : "def"}, {"label" : "invmap", "tail" : "(f: (S) ⇒ T, support: Traversable[S]): FiniteDistribution[S]", "member" : "provingground.FiniteDistribution.invmap", "link" : "provingground\/FiniteDistribution.html#invmap[S](f:S=>T,support:Traversable[S]):provingground.FiniteDistribution[S]", "kind" : "def"}, {"label" : "zip", "tail" : "(that: FiniteDistribution[S]): FiniteDistribution[(T, S)]", "member" : "provingground.FiniteDistribution.zip", "link" : "provingground\/FiniteDistribution.html#zip[S](that:provingground.FiniteDistribution[S]):provingground.FiniteDistribution[(T,S)]", "kind" : "def"}, {"label" : "mapOpt", "tail" : "(f: (T) ⇒ Option[S]): FiniteDistribution[S]", "member" : "provingground.FiniteDistribution.mapOpt", "link" : "provingground\/FiniteDistribution.html#mapOpt[S](f:T=>Option[S]):provingground.FiniteDistribution[S]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (T) ⇒ S): FiniteDistribution[S]", "member" : "provingground.FiniteDistribution.map", "link" : "provingground\/FiniteDistribution.html#map[S](f:T=>S):provingground.FiniteDistribution[S]", "kind" : "def"}, {"label" : "+", "tail" : "(elem: T, prob: Double): FiniteDistribution[T]", "member" : "provingground.FiniteDistribution.+", "link" : "provingground\/FiniteDistribution.html#+(elem:T,prob:Double):provingground.FiniteDistribution[T]", "kind" : "def"}, {"label" : "--", "tail" : "(that: FiniteDistribution[T]): FiniteDistribution[T]", "member" : "provingground.FiniteDistribution.--", "link" : "provingground\/FiniteDistribution.html#--(that:provingground.FiniteDistribution[T]):provingground.FiniteDistribution[T]", "kind" : "def"}, {"label" : "++", "tail" : "(that: FiniteDistribution[T]): FiniteDistribution[T]", "member" : "provingground.FiniteDistribution.++", "link" : "provingground\/FiniteDistribution.html#++(that:provingground.FiniteDistribution[T]):provingground.FiniteDistribution[T]", "kind" : "def"}, {"label" : "*", "tail" : "(sc: Double): FiniteDistribution[T]", "member" : "provingground.FiniteDistribution.*", "link" : "provingground\/FiniteDistribution.html#*(sc:Double):provingground.FiniteDistribution[T]", "kind" : "def"}, {"label" : "purge", "tail" : "(epsilon: Double): FiniteDistribution[T]", "member" : "provingground.FiniteDistribution.purge", "link" : "provingground\/FiniteDistribution.html#purge(epsilon:Double):provingground.FiniteDistribution[T]", "kind" : "def"}, {"label" : "filter", "tail" : "(p: (T) ⇒ Boolean): FiniteDistribution[T]", "member" : "provingground.FiniteDistribution.filter", "link" : "provingground\/FiniteDistribution.html#filter(p:T=>Boolean):provingground.FiniteDistribution[T]", "kind" : "def"}, {"label" : "pruneMap", "tail" : "(f: ⇒ (T) ⇒ S, epsilon: Double): FiniteDistribution[S]", "member" : "provingground.FiniteDistribution.pruneMap", "link" : "provingground\/FiniteDistribution.html#pruneMap[S](f:=>T=>S,epsilon:Double):provingground.FiniteDistribution[S]", "kind" : "def"}, {"label" : "prunedPMF", "tail" : "(epsilon: Double): Vector[Weighted[T]]", "member" : "provingground.FiniteDistribution.prunedPMF", "link" : "provingground\/FiniteDistribution.html#prunedPMF(epsilon:Double):Vector[provingground.Weighted[T]]", "kind" : "def"}, {"label" : "normalized", "tail" : "(t: Double): FiniteDistribution[T]", "member" : "provingground.FiniteDistribution.normalized", "link" : "provingground\/FiniteDistribution.html#normalized(t:Double):provingground.FiniteDistribution[T]", "kind" : "def"}, {"label" : "getsum", "tail" : "(label: T): Double", "member" : "provingground.FiniteDistribution.getsum", "link" : "provingground\/FiniteDistribution.html#getsum(label:T):Double", "kind" : "def"}, {"label" : "support", "tail" : "(): Set[T]", "member" : "provingground.FiniteDistribution.support", "link" : "provingground\/FiniteDistribution.html#support:Set[T]", "kind" : "def"}, {"label" : "supp", "tail" : "(): Vector[T]", "member" : "provingground.FiniteDistribution.supp", "link" : "provingground\/FiniteDistribution.html#supp:Vector[T]", "kind" : "def"}, {"label" : "sort", "tail" : "(): FiniteDistribution[T]", "member" : "provingground.FiniteDistribution.sort", "link" : "provingground\/FiniteDistribution.html#sort:provingground.FiniteDistribution[T]", "kind" : "def"}, {"label" : "flatten", "tail" : "(): FiniteDistribution[T]", "member" : "provingground.FiniteDistribution.flatten", "link" : "provingground\/FiniteDistribution.html#flatten:provingground.FiniteDistribution[T]", "kind" : "def"}, {"label" : "norm", "tail" : "(): Double", "member" : "provingground.FiniteDistribution.norm", "link" : "provingground\/FiniteDistribution.html#norm:Double", "kind" : "def"}, {"label" : "apply", "tail" : "(label: T): Double", "member" : "provingground.FiniteDistribution.apply", "link" : "provingground\/FiniteDistribution.html#apply(label:T):Double", "kind" : "def"}, {"label" : "postotal", "tail" : "(t: Double): Double", "member" : "provingground.FiniteDistribution.postotal", "link" : "provingground\/FiniteDistribution.html#postotal(t:Double):Double", "kind" : "def"}, {"label" : "posmf", "tail" : "(t: Double): Vector[Weighted[T]]", "member" : "provingground.FiniteDistribution.posmf", "link" : "provingground\/FiniteDistribution.html#posmf(t:Double):Vector[provingground.Weighted[T]]", "kind" : "def"}, {"member" : "provingground.FiniteDistribution#<init>", "error" : "unsupported entity"}, {"label" : "pmf", "tail" : ": Vector[Weighted[T]]", "member" : "provingground.FiniteDistribution.pmf", "link" : "provingground\/FiniteDistribution.html#pmf:Vector[provingground.Weighted[T]]", "kind" : "val"}, {"label" : "<+?>", "tail" : "(mixin: ⇒ ProbabilityDistribution[Option[T]], weight: Double): MixinOpt[T]", "member" : "provingground.ProbabilityDistribution.<+?>", "link" : "provingground\/FiniteDistribution.html#<+?>(mixin:=>provingground.ProbabilityDistribution[Option[A]],weight:Double):provingground.ProbabilityDistribution.MixinOpt[A]", "kind" : "def"}, {"label" : "<+>", "tail" : "(mixin: ⇒ ProbabilityDistribution[T], weight: Double): Mixin[T]", "member" : "provingground.ProbabilityDistribution.<+>", "link" : "provingground\/FiniteDistribution.html#<+>(mixin:=>provingground.ProbabilityDistribution[A],weight:Double):provingground.ProbabilityDistribution.Mixin[A]", "kind" : "def"}, {"label" : "<++>", "tail" : "(components: ⇒ Vector[Weighted[ProbabilityDistribution[T]]]): Mixture[T]", "member" : "provingground.ProbabilityDistribution.<++>", "link" : "provingground\/FiniteDistribution.html#<++>(components:=>Vector[provingground.Weighted[provingground.ProbabilityDistribution[A]]]):provingground.ProbabilityDistribution.Mixture[A]", "kind" : "def"}, {"label" : "findFut", "tail" : "(p: (T) ⇒ Boolean, maxloops: Long): Future[Option[T]]", "member" : "provingground.ProbabilityDistribution.findFut", "link" : "provingground\/FiniteDistribution.html#findFut(p:A=>Boolean,maxloops:Long):scala.concurrent.Future[Option[A]]", "kind" : "def"}, {"label" : "randomVariable", "tail" : "(): Iterator[T]", "member" : "provingground.ProbabilityDistribution.randomVariable", "link" : "provingground\/FiniteDistribution.html#randomVariable:Iterator[A]", "kind" : "def"}, {"label" : "fibProduct", "tail" : "(quot: (T) ⇒ Q, fibers: (Q) ⇒ ProbabilityDistribution[B]): FiberProduct[T, Q, B]", "member" : "provingground.ProbabilityDistribution.fibProduct", "link" : "provingground\/FiniteDistribution.html#fibProduct[Q,B](quot:A=>Q,fibers:Q=>provingground.ProbabilityDistribution[B]):provingground.ProbabilityDistribution.FiberProduct[A,Q,B]", "kind" : "def"}, {"label" : "product", "tail" : "(that: ProbabilityDistribution[B]): Product[T, B]", "member" : "provingground.ProbabilityDistribution.product", "link" : "provingground\/FiniteDistribution.html#product[B](that:provingground.ProbabilityDistribution[B]):provingground.ProbabilityDistribution.Product[A,B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (T) ⇒ ProbabilityDistribution[B]): ProbabilityDistribution[B]", "member" : "provingground.ProbabilityDistribution.flatMap", "link" : "provingground\/FiniteDistribution.html#flatMap[B](f:A=>provingground.ProbabilityDistribution[B]):provingground.ProbabilityDistribution[B]", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "provingground\/FiniteDistribution.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "provingground\/FiniteDistribution.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/FiniteDistribution.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/FiniteDistribution.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "provingground\/FiniteDistribution.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "provingground\/FiniteDistribution.html#==(x$1:Any):Boolean", "kind" : "final def"}], "case class" : "provingground\/FiniteDistribution.html", "kind" : "object"}, {"name" : "provingground.Frankl", "shortDescription" : "", "object" : "provingground\/Frankl$.html", "members_object" : [{"label" : "SetSystem", "tail" : "", "member" : "provingground.Frankl.SetSystem", "link" : "provingground\/Frankl$.html#SetSystem", "kind" : "object"}, {"label" : "SetSystem", "tail" : "", "member" : "provingground.Frankl.SetSystem", "link" : "provingground\/Frankl$.html#SetSystemextendsAnyValwithProductwithSerializable", "kind" : "final case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/Frankl$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/Frankl$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/Frankl$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/Frankl$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/Frankl$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/Frankl$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/Frankl$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/Frankl$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/Frankl$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/Frankl$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/Frankl$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/Frankl$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/Frankl$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/Frankl$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/Frankl$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/Frankl$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/Frankl$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/Frankl$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/Frankl$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.HoTT", "shortDescription" : "Core of Homotopy Type Theory (HoTT) implementation.", "object" : "provingground\/HoTT$.html", "members_object" : [{"label" : "Deprec", "tail" : "", "member" : "provingground.HoTT.Deprec", "link" : "provingground\/HoTT$.html#Deprec", "kind" : "object"}, {"label" : "CnstFuncLike", "tail" : "", "member" : "provingground.HoTT.CnstFuncLike", "link" : "provingground\/HoTT$.html#CnstFuncLike[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]]extendsHoTT.CnstwithHoTT.FuncLike[U,V]", "kind" : "class"}, {"label" : "CnstFunc", "tail" : "", "member" : "provingground.HoTT.CnstFunc", "link" : "provingground\/HoTT$.html#CnstFunc[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]]extendsHoTT.CnstwithHoTT.Func[U,V]", "kind" : "class"}, {"label" : "Cnst", "tail" : "", "member" : "provingground.HoTT.Cnst", "link" : "provingground\/HoTT$.html#CnstextendsHoTT.Term", "kind" : "class"}, {"label" : "getTypVariables", "tail" : "(n: Int)(t: Term): List[Typ[Term]]", "member" : "provingground.HoTT.getTypVariables", "link" : "provingground\/HoTT$.html#getTypVariables(n:Int)(t:provingground.HoTT.Term):List[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "getVariables", "tail" : "(n: Int)(t: Term): List[Term]", "member" : "provingground.HoTT.getVariables", "link" : "provingground\/HoTT$.html#getVariables(n:Int)(t:provingground.HoTT.Term):List[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "getArg", "tail" : "(func: FuncLike[D, U]): (Term) ⇒ Option[D]", "member" : "provingground.HoTT.getArg", "link" : "provingground\/HoTT$.html#getArg[D<:provingground.HoTT.Termwithprovingground.HoTT.Subs[D],U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](func:provingground.HoTT.FuncLike[D,U]):provingground.HoTT.Term=>Option[D]", "kind" : "def"}, {"label" : "asLambdas", "tail" : "(term: U): Option[U]", "member" : "provingground.HoTT.asLambdas", "link" : "provingground\/HoTT$.html#asLambdas[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](term:U):Option[U]", "kind" : "def"}, {"label" : "funcToLambda", "tail" : "(fn: FuncLike[U, V]): LambdaLike[U, V]", "member" : "provingground.HoTT.funcToLambda", "link" : "provingground\/HoTT$.html#funcToLambda[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](fn:provingground.HoTT.FuncLike[U,V]):provingground.HoTT.LambdaLike[U,V]", "kind" : "def"}, {"label" : "isUniv", "tail" : "(x: Term): Boolean", "member" : "provingground.HoTT.isUniv", "link" : "provingground\/HoTT$.html#isUniv(x:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "typFamilyDepth", "tail" : "(): (Term) ⇒ Option[Int]", "member" : "provingground.HoTT.typFamilyDepth", "link" : "provingground\/HoTT$.html#typFamilyDepth:provingground.HoTT.Term=>Option[Int]", "kind" : "def"}, {"label" : "isTypFamily", "tail" : "(): (Term) ⇒ Boolean", "member" : "provingground.HoTT.isTypFamily", "link" : "provingground\/HoTT$.html#isTypFamily:provingground.HoTT.Term=>Boolean", "kind" : "def"}, {"label" : "isTyp", "tail" : "(): (Term) ⇒ Boolean", "member" : "provingground.HoTT.isTyp", "link" : "provingground\/HoTT$.html#isTyp:provingground.HoTT.Term=>Boolean", "kind" : "def"}, {"label" : "isFunc", "tail" : "(): (Term) ⇒ Boolean", "member" : "provingground.HoTT.isFunc", "link" : "provingground\/HoTT$.html#isFunc:provingground.HoTT.Term=>Boolean", "kind" : "def"}, {"label" : "isVar", "tail" : "(t: Term): Boolean", "member" : "provingground.HoTT.isVar", "link" : "provingground\/HoTT$.html#isVar(t:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "getTypedVar", "tail" : "(typ: Typ[U])(factory: NameFactory): TypedTerm[U]", "member" : "provingground.HoTT.getTypedVar", "link" : "provingground\/HoTT$.html#getTypedVar[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](typ:provingground.HoTT.Typ[U])(implicitfactory:provingground.HoTT.NameFactory):provingground.HoTT.TypedTerm[U]", "kind" : "def"}, {"label" : "getVar", "tail" : "(typ: Typ[U])(factory: NameFactory): U with Subs[U]", "member" : "provingground.HoTT.getVar", "link" : "provingground\/HoTT$.html#getVar[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](typ:provingground.HoTT.Typ[U])(implicitfactory:provingground.HoTT.NameFactory):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "prefixedNextName", "tail" : "(fullname: String): String", "member" : "provingground.HoTT.prefixedNextName", "link" : "provingground\/HoTT$.html#prefixedNextName(fullname:String):String", "kind" : "def"}, {"label" : "nextName", "tail" : "(name: String): String", "member" : "provingground.HoTT.nextName", "link" : "provingground\/HoTT$.html#nextName(name:String):String", "kind" : "def"}, {"label" : "nextVar", "tail" : "(s: Traversable[Term])(typ: Typ[Term]): Term with Subs[Term]", "member" : "provingground.HoTT.nextVar", "link" : "provingground\/HoTT$.html#nextVar(s:Traversable[provingground.HoTT.Term])(typ:provingground.HoTT.Typ[provingground.HoTT.Term]):provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "usedChars", "tail" : "(s: Traversable[Term]): Traversable[Char]", "member" : "provingground.HoTT.usedChars", "link" : "provingground\/HoTT$.html#usedChars(s:Traversable[provingground.HoTT.Term]):Traversable[Char]", "kind" : "def"}, {"label" : "nextChar", "tail" : "(s: Traversable[Char]): Char", "member" : "provingground.HoTT.nextChar", "link" : "provingground\/HoTT$.html#nextChar(s:Traversable[Char]):Char", "kind" : "def"}, {"label" : "polyLambda", "tail" : "(variables: List[Term], value: Term): Term", "member" : "provingground.HoTT.polyLambda", "link" : "provingground\/HoTT$.html#polyLambda(variables:List[provingground.HoTT.Term],value:provingground.HoTT.Term):provingground.HoTT.Term", "kind" : "def"}, {"label" : "foldnames", "tail" : "(): (Term, List[AnySym]) ⇒ Term", "member" : "provingground.HoTT.foldnames", "link" : "provingground\/HoTT$.html#foldnames:(provingground.HoTT.Term,List[provingground.HoTT.AnySym])=>provingground.HoTT.Term", "kind" : "def"}, {"label" : "Fold", "tail" : "", "member" : "provingground.HoTT.Fold", "link" : "provingground\/HoTT$.html#Fold", "kind" : "object"}, {"label" : "fold", "tail" : "(fn: Term)(args: Term*): Term", "member" : "provingground.HoTT.fold", "link" : "provingground\/HoTT$.html#fold(fn:provingground.HoTT.Term)(args:provingground.HoTT.Term*):provingground.HoTT.Term", "kind" : "def"}, {"label" : "foldterms", "tail" : "(): (Term, List[Term]) ⇒ Term", "member" : "provingground.HoTT.foldterms", "link" : "provingground\/HoTT$.html#foldterms:(provingground.HoTT.Term,List[provingground.HoTT.Term])=>provingground.HoTT.Term", "kind" : "def"}, {"label" : "PlusTyp", "tail" : "", "member" : "provingground.HoTT.PlusTyp", "link" : "provingground\/HoTT$.html#PlusTyp[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]]extendsHoTT.Typ[provingground.HoTT.Term]withHoTT.Subs[provingground.HoTT.PlusTyp[U,V]]withProductwithSerializable", "kind" : "case class"}, {"label" : "PlusTyp", "tail" : "", "member" : "provingground.HoTT.PlusTyp", "link" : "provingground\/HoTT$.html#PlusTyp", "kind" : "object"}, {"label" : "RichTerm", "tail" : "", "member" : "provingground.HoTT.RichTerm", "link" : "provingground\/HoTT$.html#RichTerm[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsAnyRef", "kind" : "implicit class"}, {"label" : "Refl", "tail" : "", "member" : "provingground.HoTT.Refl", "link" : "provingground\/HoTT$.html#Refl[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsHoTT.Equality[U]withHoTT.Subs[provingground.HoTT.Refl[U]]withProductwithSerializable", "kind" : "case class"}, {"label" : "IdentityTyp", "tail" : "", "member" : "provingground.HoTT.IdentityTyp", "link" : "provingground\/HoTT$.html#IdentityTyp", "kind" : "object"}, {"label" : "IdentityTyp", "tail" : "", "member" : "provingground.HoTT.IdentityTyp", "link" : "provingground\/HoTT$.html#IdentityTyp[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsHoTT.Typ[provingground.HoTT.Equality[U]]withHoTT.Subs[provingground.HoTT.IdentityTyp[U]]withProductwithSerializable", "kind" : "case class"}, {"label" : "Equality", "tail" : "", "member" : "provingground.HoTT.Equality", "link" : "provingground\/HoTT$.html#Equality[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsHoTT.TermwithHoTT.Subs[provingground.HoTT.Equality[U]]", "kind" : "trait"}, {"label" : "SymbEquality", "tail" : "", "member" : "provingground.HoTT.SymbEquality", "link" : "provingground\/HoTT$.html#SymbEquality[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsHoTT.Equality[U]withHoTT.SymbolicwithProductwithSerializable", "kind" : "case class"}, {"label" : "DepPair", "tail" : "", "member" : "provingground.HoTT.DepPair", "link" : "provingground\/HoTT$.html#DepPair[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsHoTT.TermwithHoTT.Subs[provingground.HoTT.DepPair[W,U]]withHoTT.AbsPair[W,U]withProductwithSerializable", "kind" : "case class"}, {"label" : "Sgma", "tail" : "", "member" : "provingground.HoTT.Sgma", "link" : "provingground\/HoTT$.html#Sgma", "kind" : "object"}, {"label" : "SigmaTyp", "tail" : "", "member" : "provingground.HoTT.SigmaTyp", "link" : "provingground\/HoTT$.html#SigmaTyp[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsHoTT.Typ[provingground.HoTT.DepPair[W,U]]withProductwithSerializable", "kind" : "case class"}, {"label" : "RightProjSym", "tail" : "", "member" : "provingground.HoTT.RightProjSym", "link" : "provingground\/HoTT$.html#RightProjSymextendsHoTT.AnySymwithProductwithSerializable", "kind" : "case class"}, {"label" : "LeftProjSym", "tail" : "", "member" : "provingground.HoTT.LeftProjSym", "link" : "provingground\/HoTT$.html#LeftProjSymextendsHoTT.AnySymwithProductwithSerializable", "kind" : "case class"}, {"label" : "OptDepFuncDefn", "tail" : "", "member" : "provingground.HoTT.OptDepFuncDefn", "link" : "provingground\/HoTT$.html#OptDepFuncDefn[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W]]extendsHoTT.DepFunc[W,provingground.HoTT.Term]withHoTT.Subs[provingground.HoTT.OptDepFuncDefn[W]]withProductwithSerializable", "kind" : "case class"}, {"label" : "DepFuncDefn", "tail" : "", "member" : "provingground.HoTT.DepFuncDefn", "link" : "provingground\/HoTT$.html#DepFuncDefn[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsHoTT.DepFunc[W,U]", "kind" : "class"}, {"label" : "DepSymbolicFunc", "tail" : "", "member" : "provingground.HoTT.DepSymbolicFunc", "link" : "provingground\/HoTT$.html#DepSymbolicFunc[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsHoTT.FuncLike[W,U]withHoTT.SymbolicwithProductwithSerializable", "kind" : "case class"}, {"label" : "PiSymbolicFunc", "tail" : "", "member" : "provingground.HoTT.PiSymbolicFunc", "link" : "provingground\/HoTT$.html#PiSymbolicFunc[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsHoTT.FuncLike[W,U]withHoTT.SymbolicwithProductwithSerializable", "kind" : "case class"}, {"label" : "DepFunc", "tail" : "", "member" : "provingground.HoTT.DepFunc", "link" : "provingground\/HoTT$.html#DepFunc[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsHoTT.FuncLike[W,U]", "kind" : "trait"}, {"label" : "PiTyp", "tail" : "", "member" : "provingground.HoTT.PiTyp", "link" : "provingground\/HoTT$.html#PiTyp[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsHoTT.GenFuncTyp[W,U]withHoTT.Typ[provingground.HoTT.FuncLike[W,U]]withHoTT.Subs[provingground.HoTT.PiTyp[W,U]]withProductwithSerializable", "kind" : "case class"}, {"label" : "PiDefn", "tail" : "", "member" : "provingground.HoTT.PiDefn", "link" : "provingground\/HoTT$.html#PiDefn[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsHoTT.GenFuncTyp[W,U]withHoTT.Typ[provingground.HoTT.FuncLike[W,U]]withHoTT.Subs[provingground.HoTT.PiDefn[W,U]]withProductwithSerializable", "kind" : "case class"}, {"label" : "PiDefn", "tail" : "", "member" : "provingground.HoTT.PiDefn", "link" : "provingground\/HoTT$.html#PiDefn", "kind" : "object"}, {"label" : "TypFamily", "tail" : "", "member" : "provingground.HoTT.TypFamily", "link" : "provingground\/HoTT$.html#TypFamily[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],+U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]=provingground.HoTT.Func[W,provingground.HoTT.Typ[U]]", "kind" : "type"}, {"label" : "sigma", "tail" : "(variable: U)(value: Typ[V]): Typ[AbsPair[U, V]]", "member" : "provingground.HoTT.sigma", "link" : "provingground\/HoTT$.html#sigma[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](variable:U)(value:provingground.HoTT.Typ[V]):provingground.HoTT.Typ[provingground.HoTT.AbsPair[U,V]]", "kind" : "def"}, {"label" : "Composition", "tail" : "", "member" : "provingground.HoTT.Composition", "link" : "provingground\/HoTT$.html#Composition[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V],W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W]]extendsHoTT.Func[U,W]withHoTT.Subs[provingground.HoTT.Composition[U,V,W]]withProductwithSerializable", "kind" : "case class"}, {"label" : "composition", "tail" : "(f: Func[V, W], g: Func[U, V]): Composition[U, V, W]", "member" : "provingground.HoTT.composition", "link" : "provingground\/HoTT$.html#composition[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V],W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W]](f:provingground.HoTT.Func[V,W],g:provingground.HoTT.Func[U,V]):provingground.HoTT.Composition[U,V,W]", "kind" : "def"}, {"label" : "lambdaPair", "tail" : "(variable: U)(value: V): DepPair[U, V]", "member" : "provingground.HoTT.lambdaPair", "link" : "provingground\/HoTT$.html#lambdaPair[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](variable:U)(value:V):provingground.HoTT.DepPair[U,V]", "kind" : "def"}, {"label" : "optlambda", "tail" : "(variable: Term): (Term) ⇒ Term", "member" : "provingground.HoTT.optlambda", "link" : "provingground\/HoTT$.html#optlambda(variable:provingground.HoTT.Term):provingground.HoTT.Term=>provingground.HoTT.Term", "kind" : "def"}, {"label" : "pi", "tail" : "(variable: U)(value: Typ[V]): Typ[FuncLike[U, V]]", "member" : "provingground.HoTT.pi", "link" : "provingground\/HoTT$.html#pi[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](variable:U)(value:provingground.HoTT.Typ[V]):provingground.HoTT.Typ[provingground.HoTT.FuncLike[U,V]]", "kind" : "def"}, {"label" : "id", "tail" : "(typ: Typ[U]): Func[U with Subs[U], U with Subs[U]]", "member" : "provingground.HoTT.id", "link" : "provingground\/HoTT$.html#id[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](typ:provingground.HoTT.Typ[U]):provingground.HoTT.Func[Uwithprovingground.HoTT.Subs[U],Uwithprovingground.HoTT.Subs[U]]", "kind" : "def"}, {"label" : "lmbda", "tail" : "(variable: U)(value: V): Func[U, V]", "member" : "provingground.HoTT.lmbda", "link" : "provingground\/HoTT$.html#lmbda[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](variable:U)(value:V):provingground.HoTT.Func[U,V]", "kind" : "def"}, {"label" : "piClosure", "tail" : "(vars: Vector[Term])(t: Typ[Term]): Typ[Term]", "member" : "provingground.HoTT.piClosure", "link" : "provingground\/HoTT$.html#piClosure(vars:Vector[provingground.HoTT.Term])(t:provingground.HoTT.Typ[provingground.HoTT.Term]):provingground.HoTT.Typ[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "partialLambdaClosures", "tail" : "(vars: Vector[Term])(t: Term): Vector[Term]", "member" : "provingground.HoTT.partialLambdaClosures", "link" : "provingground\/HoTT$.html#partialLambdaClosures(vars:Vector[provingground.HoTT.Term])(t:provingground.HoTT.Term):Vector[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "lambdaClosure", "tail" : "(vars: Vector[Term])(t: Term): Term", "member" : "provingground.HoTT.lambdaClosure", "link" : "provingground\/HoTT$.html#lambdaClosure(vars:Vector[provingground.HoTT.Term])(t:provingground.HoTT.Term):provingground.HoTT.Term", "kind" : "def"}, {"label" : "piDefn", "tail" : "(variable: U)(value: Typ[V]): PiDefn[U, V]", "member" : "provingground.HoTT.piDefn", "link" : "provingground\/HoTT$.html#piDefn[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](variable:U)(value:provingground.HoTT.Typ[V]):provingground.HoTT.PiDefn[U,V]", "kind" : "def"}, {"label" : "lmbdaTyped", "tail" : "(variable: TypedTerm[U])(value: TypedTerm[V]): Func[U, V]", "member" : "provingground.HoTT.lmbdaTyped", "link" : "provingground\/HoTT$.html#lmbdaTyped[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](variable:provingground.HoTT.TypedTerm[U])(value:provingground.HoTT.TypedTerm[V]):provingground.HoTT.Func[U,V]", "kind" : "def"}, {"label" : "lambdaTyped", "tail" : "(variable: TypedTerm[U])(value: TypedTerm[V]): FuncLike[U, V]", "member" : "provingground.HoTT.lambdaTyped", "link" : "provingground\/HoTT$.html#lambdaTyped[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](variable:provingground.HoTT.TypedTerm[U])(value:provingground.HoTT.TypedTerm[V]):provingground.HoTT.FuncLike[U,V]", "kind" : "def"}, {"label" : "lambda", "tail" : "(variable: U)(value: V): FuncLike[U, V]", "member" : "provingground.HoTT.lambda", "link" : "provingground\/HoTT$.html#lambda[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](variable:U)(value:V):provingground.HoTT.FuncLike[U,V]", "kind" : "def"}, {"label" : "outerSym", "tail" : "(sym: Symbolic): Symbolic", "member" : "provingground.HoTT.outerSym", "link" : "provingground\/HoTT$.html#outerSym(sym:provingground.HoTT.Symbolic):provingground.HoTT.Symbolic", "kind" : "def"}, {"label" : "InnerSym", "tail" : "", "member" : "provingground.HoTT.InnerSym", "link" : "provingground\/HoTT$.html#InnerSym", "kind" : "object"}, {"label" : "InnerSym", "tail" : "", "member" : "provingground.HoTT.InnerSym", "link" : "provingground\/HoTT$.html#InnerSym[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsHoTT.AnySym", "kind" : "class"}, {"label" : "instantiate", "tail" : "(substitutions: (Term) ⇒ Option[Term], target: Typ[Term]): (Term) ⇒ Option[Term]", "member" : "provingground.HoTT.instantiate", "link" : "provingground\/HoTT$.html#instantiate(substitutions:provingground.HoTT.Term=>Option[provingground.HoTT.Term],target:provingground.HoTT.Typ[provingground.HoTT.Term]):provingground.HoTT.Term=>Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "termSymbol", "tail" : "(term: Term): AnySym", "member" : "provingground.HoTT.termSymbol", "link" : "provingground\/HoTT$.html#termSymbol(term:provingground.HoTT.Term):provingground.HoTT.AnySym", "kind" : "def"}, {"label" : "TermSymbol", "tail" : "", "member" : "provingground.HoTT.TermSymbol", "link" : "provingground\/HoTT$.html#TermSymbolextendsHoTT.AnySymwithProductwithSerializable", "kind" : "case class"}, {"label" : "LambdaTypedFixed", "tail" : "", "member" : "provingground.HoTT.LambdaTypedFixed", "link" : "provingground\/HoTT$.html#LambdaTypedFixed[X<:provingground.HoTT.Termwithprovingground.HoTT.Subs[X],Y<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Y]]extendsHoTT.LambdaLike[X,Y]withHoTT.Func[X,Y]withHoTT.Subs[provingground.HoTT.LambdaTypedFixed[X,Y]]withProductwithSerializable", "kind" : "case class"}, {"label" : "LambdaFixed", "tail" : "", "member" : "provingground.HoTT.LambdaFixed", "link" : "provingground\/HoTT$.html#LambdaFixed[X<:provingground.HoTT.Termwithprovingground.HoTT.Subs[X],Y<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Y]]extendsHoTT.LambdaLike[X,Y]withHoTT.Func[X,Y]withHoTT.Subs[provingground.HoTT.LambdaFixed[X,Y]]withProductwithSerializable", "kind" : "case class"}, {"label" : "LambdaTyped", "tail" : "", "member" : "provingground.HoTT.LambdaTyped", "link" : "provingground\/HoTT$.html#LambdaTyped[X<:provingground.HoTT.Termwithprovingground.HoTT.Subs[X],Y<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Y]]extendsHoTT.LambdaLike[X,Y]withProductwithSerializable", "kind" : "case class"}, {"label" : "LambdaTerm", "tail" : "", "member" : "provingground.HoTT.LambdaTerm", "link" : "provingground\/HoTT$.html#LambdaTerm[X<:provingground.HoTT.Termwithprovingground.HoTT.Subs[X],Y<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Y]]extendsHoTT.LambdaLike[X,Y]withProductwithSerializable", "kind" : "case class"}, {"label" : "LambdaLike", "tail" : "", "member" : "provingground.HoTT.LambdaLike", "link" : "provingground\/HoTT$.html#LambdaLike[X<:provingground.HoTT.Termwithprovingground.HoTT.Subs[X],Y<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Y]]extendsHoTT.FuncLike[X,Y]", "kind" : "sealed trait"}, {"label" : "replaceVar", "tail" : "(variable: U)(x: Term, y: Term): U with Subs[U]", "member" : "provingground.HoTT.replaceVar", "link" : "provingground\/HoTT$.html#replaceVar[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](variable:U)(x:provingground.HoTT.Term,y:provingground.HoTT.Term):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "FuncDefn", "tail" : "", "member" : "provingground.HoTT.FuncDefn", "link" : "provingground\/HoTT$.html#FuncDefn[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsHoTT.Func[W,U]", "kind" : "class"}, {"label" : "SymbolicFunc", "tail" : "", "member" : "provingground.HoTT.SymbolicFunc", "link" : "provingground\/HoTT$.html#SymbolicFunc[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsHoTT.Func[W,U]withHoTT.Subs[provingground.HoTT.Func[W,U]]withHoTT.SymbolicwithProductwithSerializable", "kind" : "case class"}, {"label" : "NamedDepFunc", "tail" : "", "member" : "provingground.HoTT.NamedDepFunc", "link" : "provingground\/HoTT$.html#NamedDepFunc[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],+U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsHoTT.FuncLike[W,U]withProductwithSerializable", "kind" : "case class"}, {"label" : "NamedFunc", "tail" : "", "member" : "provingground.HoTT.NamedFunc", "link" : "provingground\/HoTT$.html#NamedFunc[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],+U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsHoTT.Func[W,U]withProductwithSerializable", "kind" : "case class"}, {"label" : "Func", "tail" : "", "member" : "provingground.HoTT.Func", "link" : "provingground\/HoTT$.html#Func[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],+U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsHoTT.FuncLike[W,U]withHoTT.Subs[provingground.HoTT.Func[W,U]]", "kind" : "trait"}, {"label" : "IndRecFunc", "tail" : "", "member" : "provingground.HoTT.IndRecFunc", "link" : "provingground\/HoTT$.html#IndRecFunc[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],+U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F]]extendsHoTT.RecFunc[W,U]", "kind" : "trait"}, {"label" : "RecFunc", "tail" : "", "member" : "provingground.HoTT.RecFunc", "link" : "provingground\/HoTT$.html#RecFunc[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],+U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsHoTT.Func[W,U]", "kind" : "trait"}, {"label" : "FormalAppln", "tail" : "", "member" : "provingground.HoTT.FormalAppln", "link" : "provingground\/HoTT$.html#FormalAppln", "kind" : "object"}, {"label" : "ApplnSym", "tail" : "", "member" : "provingground.HoTT.ApplnSym", "link" : "provingground\/HoTT$.html#ApplnSym[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsHoTT.AnySymwithProductwithSerializable", "kind" : "case class"}, {"label" : "FuncLike", "tail" : "", "member" : "provingground.HoTT.FuncLike", "link" : "provingground\/HoTT$.html#FuncLike[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],+U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsHoTT.TermwithW=>UwithHoTT.Subs[provingground.HoTT.FuncLike[W,U]]", "kind" : "trait"}, {"label" : "skipApply", "tail" : "(f: Term, x: Term, n: Int): Option[Term]", "member" : "provingground.HoTT.skipApply", "link" : "provingground\/HoTT$.html#skipApply(f:provingground.HoTT.Term,x:provingground.HoTT.Term,n:Int):Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "skipVars", "tail" : "(t: Term, n: Int): Option[Term]", "member" : "provingground.HoTT.skipVars", "link" : "provingground\/HoTT$.html#skipVars(t:provingground.HoTT.Term,n:Int):Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "ExstFunc", "tail" : "", "member" : "provingground.HoTT.ExstFunc", "link" : "provingground\/HoTT$.html#ExstFunc", "kind" : "object"}, {"label" : "ExstFunc", "tail" : "", "member" : "provingground.HoTT.ExstFunc", "link" : "provingground\/HoTT$.html#ExstFuncextendsAnyRef", "kind" : "trait"}, {"label" : "typOpt", "tail" : "(x: Term): Option[Typ[Term]]", "member" : "provingground.HoTT.typOpt", "link" : "provingground\/HoTT$.html#typOpt(x:provingground.HoTT.Term):Option[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "toTypOpt", "tail" : "(t: Term): Option[Typ[U] forSome {type U <: Term with Subs[U]}]", "member" : "provingground.HoTT.toTypOpt", "link" : "provingground\/HoTT$.html#toTypOpt(t:provingground.HoTT.Term):Option[provingground.HoTT.Typ[U]forSome{typeU<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]}]", "kind" : "def"}, {"label" : "toTyp", "tail" : "(t: Term): Typ[U] forSome {type U <: Term with Subs[U]}", "member" : "provingground.HoTT.toTyp", "link" : "provingground\/HoTT$.html#toTyp(t:provingground.HoTT.Term):provingground.HoTT.Typ[U]forSome{typeU<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]}", "kind" : "def"}, {"label" : "applyFuncOpt", "tail" : "(func: Term, arg: Term): Option[Term]", "member" : "provingground.HoTT.applyFuncOpt", "link" : "provingground\/HoTT$.html#applyFuncOpt(func:provingground.HoTT.Term,arg:provingground.HoTT.Term):Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "applyFunc", "tail" : "(func: Term, arg: Term): Term", "member" : "provingground.HoTT.applyFunc", "link" : "provingground\/HoTT$.html#applyFunc(func:provingground.HoTT.Term,arg:provingground.HoTT.Term):provingground.HoTT.Term", "kind" : "def"}, {"label" : "NotTypeException", "tail" : "", "member" : "provingground.HoTT.NotTypeException", "link" : "provingground\/HoTT$.html#NotTypeExceptionextendsIllegalArgumentExceptionwithProductwithSerializable", "kind" : "case class"}, {"label" : "ApplnFailException", "tail" : "", "member" : "provingground.HoTT.ApplnFailException", "link" : "provingground\/HoTT$.html#ApplnFailException", "kind" : "object"}, {"label" : "ApplnFailException", "tail" : "", "member" : "provingground.HoTT.ApplnFailException", "link" : "provingground\/HoTT$.html#ApplnFailExceptionextendsIllegalArgumentException", "kind" : "class"}, {"label" : "IndInducFuncLike", "tail" : "", "member" : "provingground.HoTT.IndInducFuncLike", "link" : "provingground\/HoTT$.html#IndInducFuncLike[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],+U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],IDFT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IDFT]]extendsHoTT.InducFuncLike[W,U]", "kind" : "trait"}, {"label" : "InducFuncLike", "tail" : "", "member" : "provingground.HoTT.InducFuncLike", "link" : "provingground\/HoTT$.html#InducFuncLike[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],+U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsHoTT.FuncLike[W,U]", "kind" : "trait"}, {"label" : "CodomSym", "tail" : "", "member" : "provingground.HoTT.CodomSym", "link" : "provingground\/HoTT$.html#CodomSymextendsHoTT.AnySymwithProductwithSerializable", "kind" : "case class"}, {"label" : "DomSym", "tail" : "", "member" : "provingground.HoTT.DomSym", "link" : "provingground\/HoTT$.html#DomSymextendsHoTT.AnySymwithProductwithSerializable", "kind" : "case class"}, {"label" : "FuncTyp", "tail" : "", "member" : "provingground.HoTT.FuncTyp", "link" : "provingground\/HoTT$.html#FuncTyp[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsHoTT.GenFuncTyp[W,U]withHoTT.Typ[provingground.HoTT.Func[W,U]]withHoTT.Subs[provingground.HoTT.FuncTyp[W,U]]withProductwithSerializable", "kind" : "case class"}, {"label" : "GenFuncTyp", "tail" : "", "member" : "provingground.HoTT.GenFuncTyp", "link" : "provingground\/HoTT$.html#GenFuncTyp[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsHoTT.Typ[provingground.HoTT.FuncLike[W,U]]withHoTT.Subs[provingground.HoTT.GenFuncTyp[W,U]]", "kind" : "abstract class"}, {"label" : "HashSym", "tail" : "", "member" : "provingground.HoTT.HashSym", "link" : "provingground\/HoTT$.html#HashSym", "kind" : "object"}, {"label" : "mkPair", "tail" : ": (Term, Term) ⇒ AbsPair[Term, Term]", "member" : "provingground.HoTT.mkPair", "link" : "provingground\/HoTT$.html#mkPair:(provingground.HoTT.Term,provingground.HoTT.Term)=>provingground.HoTT.AbsPair[provingground.HoTT.Term,provingground.HoTT.Term]", "kind" : "lazy val"}, {"label" : "pair", "tail" : "(first: Typ[U] with Subs[Typ[U]], second: Typ[V] with Subs[Typ[V]]): ProdTyp[U, V]", "member" : "provingground.HoTT.pair", "link" : "provingground\/HoTT$.html#pair[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](first:provingground.HoTT.Typ[U]withprovingground.HoTT.Subs[provingground.HoTT.Typ[U]],second:provingground.HoTT.Typ[V]withprovingground.HoTT.Subs[provingground.HoTT.Typ[V]]):provingground.HoTT.ProdTyp[U,V]", "kind" : "def"}, {"label" : "pair", "tail" : "(first: U, second: V): PairTerm[U, V]", "member" : "provingground.HoTT.pair", "link" : "provingground\/HoTT$.html#pair[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](first:U,second:V):provingground.HoTT.PairTerm[U,V]", "kind" : "def"}, {"label" : "Tuple", "tail" : "", "member" : "provingground.HoTT.Tuple", "link" : "provingground\/HoTT$.html#Tuple", "kind" : "object"}, {"label" : "AbsPair", "tail" : "", "member" : "provingground.HoTT.AbsPair", "link" : "provingground\/HoTT$.html#AbsPair", "kind" : "object"}, {"label" : "AbsPair", "tail" : "", "member" : "provingground.HoTT.AbsPair", "link" : "provingground\/HoTT$.html#AbsPair[+U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],+V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]]extendsHoTT.TermwithHoTT.Subs[provingground.HoTT.AbsPair[U,V]]", "kind" : "trait"}, {"label" : "PairTerm", "tail" : "", "member" : "provingground.HoTT.PairTerm", "link" : "provingground\/HoTT$.html#PairTerm[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]]extendsHoTT.AbsPair[U,V]withHoTT.Subs[provingground.HoTT.PairTerm[U,V]]withProductwithSerializable", "kind" : "case class"}, {"label" : "ProdTyp", "tail" : "", "member" : "provingground.HoTT.ProdTyp", "link" : "provingground\/HoTT$.html#ProdTyp[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]]extendsHoTT.Typ[provingground.HoTT.PairTerm[U,V]]withHoTT.AbsPair[provingground.HoTT.Typ[U],provingground.HoTT.Typ[V]]withHoTT.Subs[provingground.HoTT.ProdTyp[U,V]]withProductwithSerializable", "kind" : "case class"}, {"label" : "Type", "tail" : ": Universe", "member" : "provingground.HoTT.Type", "link" : "provingground\/HoTT$.html#Type:provingground.HoTT.Universe", "kind" : "val"}, {"label" : "univlevel", "tail" : "(): (Typ[Typ[Term]]) ⇒ Int", "member" : "provingground.HoTT.univlevel", "link" : "provingground\/HoTT$.html#univlevel:provingground.HoTT.Typ[provingground.HoTT.Typ[provingground.HoTT.Term]]=>Int", "kind" : "def"}, {"label" : "isPropFmly", "tail" : "(t: Typ[Term]): Boolean", "member" : "provingground.HoTT.isPropFmly", "link" : "provingground\/HoTT$.html#isPropFmly(t:provingground.HoTT.Typ[provingground.HoTT.Term]):Boolean", "kind" : "def"}, {"label" : "isProp", "tail" : "(x: Typ[Term]): Boolean", "member" : "provingground.HoTT.isProp", "link" : "provingground\/HoTT$.html#isProp(x:provingground.HoTT.Typ[provingground.HoTT.Term]):Boolean", "kind" : "def"}, {"label" : "Prop", "tail" : "", "member" : "provingground.HoTT.Prop", "link" : "provingground\/HoTT$.html#Prop", "kind" : "object"}, {"label" : "Universe", "tail" : "", "member" : "provingground.HoTT.Universe", "link" : "provingground\/HoTT$.html#UniverseextendsHoTT.UnivwithHoTT.Subs[provingground.HoTT.Universe]withProductwithSerializable", "kind" : "case class"}, {"label" : "ignoreLevels", "tail" : ": Boolean", "member" : "provingground.HoTT.ignoreLevels", "link" : "provingground\/HoTT$.html#ignoreLevels:Boolean", "kind" : "var"}, {"label" : "BaseUniv", "tail" : "", "member" : "provingground.HoTT.BaseUniv", "link" : "provingground\/HoTT$.html#BaseUnivextendsAnyRef", "kind" : "trait"}, {"label" : "Univ", "tail" : "", "member" : "provingground.HoTT.Univ", "link" : "provingground\/HoTT$.html#Univ=provingground.HoTT.Typ[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "type"}, {"label" : "vacuous", "tail" : "(codom: Typ[U]): Func[Term, U] with Subs[Func[Term, U]]", "member" : "provingground.HoTT.vacuous", "link" : "provingground\/HoTT$.html#vacuous[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](codom:provingground.HoTT.Typ[U]):provingground.HoTT.Func[provingground.HoTT.Term,U]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,U]]", "kind" : "def"}, {"label" : "vacuousSym", "tail" : "", "member" : "provingground.HoTT.vacuousSym", "link" : "provingground\/HoTT$.html#vacuousSym", "kind" : "object"}, {"label" : "One", "tail" : ": Unit.type", "member" : "provingground.HoTT.One", "link" : "provingground\/HoTT$.html#One:provingground.HoTT.Unit.type", "kind" : "val"}, {"label" : "Star", "tail" : "", "member" : "provingground.HoTT.Star", "link" : "provingground\/HoTT$.html#Star", "kind" : "object"}, {"label" : "Unit", "tail" : "", "member" : "provingground.HoTT.Unit", "link" : "provingground\/HoTT$.html#Unit", "kind" : "object"}, {"label" : "Zero", "tail" : "", "member" : "provingground.HoTT.Zero", "link" : "provingground\/HoTT$.html#Zero", "kind" : "object"}, {"label" : "SmallTyp", "tail" : "", "member" : "provingground.HoTT.SmallTyp", "link" : "provingground\/HoTT$.html#SmallTypextendsHoTT.Typ[provingground.HoTT.Term]", "kind" : "trait"}, {"label" : "witVar", "tail" : "(t: U): U", "member" : "provingground.HoTT.witVar", "link" : "provingground\/HoTT$.html#witVar[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](t:U):U", "kind" : "def"}, {"label" : "isWitness", "tail" : "(t: Term): Boolean", "member" : "provingground.HoTT.isWitness", "link" : "provingground\/HoTT$.html#isWitness(t:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "SymbProp", "tail" : "", "member" : "provingground.HoTT.SymbProp", "link" : "provingground\/HoTT$.html#SymbPropextendsHoTT.Typ[provingground.HoTT.Term]withHoTT.SymbolicwithProductwithSerializable", "kind" : "case class"}, {"label" : "SymbTyp", "tail" : "", "member" : "provingground.HoTT.SymbTyp", "link" : "provingground\/HoTT$.html#SymbTypextendsHoTT.Typ[provingground.HoTT.Term]withHoTT.SymbolicwithProductwithSerializable", "kind" : "case class"}, {"label" : "symSubs", "tail" : "(symbobj: (AnySym) ⇒ U)(x: Term, y: Term): (AnySym) ⇒ U", "member" : "provingground.HoTT.symSubs", "link" : "provingground\/HoTT$.html#symSubs[U<:provingground.HoTT.Term](symbobj:provingground.HoTT.AnySym=>U)(x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.HoTT.AnySym=>U", "kind" : "def"}, {"label" : "evalSym", "tail" : "(symbobj: (AnySym) ⇒ Term)(x: Term, y: Term): (AnySym) ⇒ Option[Term]", "member" : "provingground.HoTT.evalSym", "link" : "provingground\/HoTT$.html#evalSym(symbobj:provingground.HoTT.AnySym=>provingground.HoTT.Term)(x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.HoTT.AnySym=>Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "SymbObj", "tail" : "", "member" : "provingground.HoTT.SymbObj", "link" : "provingground\/HoTT$.html#SymbObj[+U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsHoTT.TermwithHoTT.SymbolicwithProductwithSerializable", "kind" : "case class"}, {"label" : "hasName", "tail" : "(sym: AnySym): (Term) ⇒ Boolean", "member" : "provingground.HoTT.hasName", "link" : "provingground\/HoTT$.html#hasName(sym:provingground.HoTT.AnySym):provingground.HoTT.Term=>Boolean", "kind" : "def"}, {"label" : "vartyp", "tail" : "(t: U)(arg0: Variable[U]): Typ[U]", "member" : "provingground.HoTT.vartyp", "link" : "provingground\/HoTT$.html#vartyp[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](t:U)(implicitevidence$1:provingground.HoTT.Variable[U]):provingground.HoTT.Typ[U]", "kind" : "def"}, {"label" : "Variable", "tail" : "", "member" : "provingground.HoTT.Variable", "link" : "provingground\/HoTT$.html#Variable", "kind" : "object"}, {"label" : "Variable", "tail" : "", "member" : "provingground.HoTT.Variable", "link" : "provingground\/HoTT$.html#Variable[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsAnyRef", "kind" : "trait"}, {"label" : "Symbolic", "tail" : "", "member" : "provingground.HoTT.Symbolic", "link" : "provingground\/HoTT$.html#SymbolicextendsHoTT.Term", "kind" : "trait"}, {"label" : "UnicodeSyms", "tail" : "", "member" : "provingground.HoTT.UnicodeSyms", "link" : "provingground\/HoTT$.html#UnicodeSyms", "kind" : "object"}, {"label" : "SimpleSyms", "tail" : "", "member" : "provingground.HoTT.SimpleSyms", "link" : "provingground\/HoTT$.html#SimpleSyms", "kind" : "object"}, {"label" : "TermSyms", "tail" : "", "member" : "provingground.HoTT.TermSyms", "link" : "provingground\/HoTT$.html#TermSymsextendsAnyRef", "kind" : "trait"}, {"label" : "Typ", "tail" : "", "member" : "provingground.HoTT.Typ", "link" : "provingground\/HoTT$.html#Typ[+U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsHoTT.TermwithHoTT.Subs[provingground.HoTT.Typ[U]]", "kind" : "trait"}, {"label" : "ConstantTyp", "tail" : "", "member" : "provingground.HoTT.ConstantTyp", "link" : "provingground\/HoTT$.html#ConstantTypextendsHoTT.Typ[provingground.HoTT.Term]", "kind" : "trait"}, {"label" : "ConstantTerm", "tail" : "", "member" : "provingground.HoTT.ConstantTerm", "link" : "provingground\/HoTT$.html#ConstantTermextendsHoTT.Term", "kind" : "trait"}, {"label" : "AtomicTerm", "tail" : "", "member" : "provingground.HoTT.AtomicTerm", "link" : "provingground\/HoTT$.html#AtomicTermextendsHoTT.TermwithHoTT.Subs[provingground.HoTT.AtomicTerm]", "kind" : "trait"}, {"label" : "avoidVar", "tail" : "(t: Term, x: U): U", "member" : "provingground.HoTT.avoidVar", "link" : "provingground\/HoTT$.html#avoidVar[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](t:provingground.HoTT.Term,x:U):U", "kind" : "def"}, {"label" : "Subs", "tail" : "", "member" : "provingground.HoTT.Subs", "link" : "provingground\/HoTT$.html#Subs[+U<:provingground.HoTT.Term]extendsAnyRef", "kind" : "trait"}, {"label" : "Subs", "tail" : "", "member" : "provingground.HoTT.Subs", "link" : "provingground\/HoTT$.html#Subs", "kind" : "object"}, {"label" : "Term", "tail" : "", "member" : "provingground.HoTT.Term", "link" : "provingground\/HoTT$.html#TermextendsHoTT.Subs[provingground.HoTT.Term]", "kind" : "trait"}, {"label" : "TypedTerm", "tail" : "", "member" : "provingground.HoTT.TypedTerm", "link" : "provingground\/HoTT$.html#TypedTerm[+U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsProductwithSerializable", "kind" : "case class"}, {"label" : "DefaultNameFactory", "tail" : "", "member" : "provingground.HoTT.DefaultNameFactory", "link" : "provingground\/HoTT$.html#DefaultNameFactory", "kind" : "implicit object"}, {"label" : "NameFactory", "tail" : "", "member" : "provingground.HoTT.NameFactory", "link" : "provingground\/HoTT$.html#NameFactoryextendsAnyRef", "kind" : "trait"}, {"label" : "Name", "tail" : "", "member" : "provingground.HoTT.Name", "link" : "provingground\/HoTT$.html#NameextendsHoTT.AtomicSymwithProductwithSerializable", "kind" : "case class"}, {"label" : "AtomicSym", "tail" : "", "member" : "provingground.HoTT.AtomicSym", "link" : "provingground\/HoTT$.html#AtomicSymextendsHoTT.AnySym", "kind" : "class"}, {"label" : "AnySym", "tail" : "", "member" : "provingground.HoTT.AnySym", "link" : "provingground\/HoTT$.html#AnySymextendsAnyRef", "kind" : "trait"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/HoTT$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/HoTT$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/HoTT$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/HoTT$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/HoTT$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/HoTT$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/HoTT$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/HoTT$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/HoTT$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/HoTT$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/HoTT$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/HoTT$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/HoTT$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/HoTT$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/HoTT$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/HoTT$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/HoTT$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/HoTT$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/HoTT$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.LinearStructure", "shortDescription" : "", "object" : "provingground\/LinearStructure$.html", "members_object" : [{"label" : "FiniteDistVec", "tail" : "(): LinearStructure[FiniteDistribution[T]]", "member" : "provingground.LinearStructure.FiniteDistVec", "link" : "provingground\/LinearStructure$.html#FiniteDistVec[T]:provingground.LinearStructure[provingground.FiniteDistribution[T]]", "kind" : "implicit def"}, {"label" : "FuncLinearStructure", "tail" : "(lsB: LinearStructure[B]): LinearStructure[(A) ⇒ B]", "member" : "provingground.LinearStructure.FuncLinearStructure", "link" : "provingground\/LinearStructure$.html#FuncLinearStructure[A,B](implicitlsB:provingground.LinearStructure[B]):provingground.LinearStructure[A=>B]", "kind" : "implicit def"}, {"label" : "VectorPairs", "tail" : "(lsa: LinearStructure[A], lsb: LinearStructure[B]): LinearStructure[(A, B)]", "member" : "provingground.LinearStructure.VectorPairs", "link" : "provingground\/LinearStructure$.html#VectorPairs[A,B](implicitlsa:provingground.LinearStructure[A],implicitlsb:provingground.LinearStructure[B]):provingground.LinearStructure[(A,B)]", "kind" : "implicit def"}, {"label" : "RealsAsLinearStructure", "tail" : ": LinearStructure[Double]", "member" : "provingground.LinearStructure.RealsAsLinearStructure", "link" : "provingground\/LinearStructure$.html#RealsAsLinearStructure:provingground.LinearStructure[Double]", "kind" : "implicit val"}, {"label" : "VectorOps", "tail" : "", "member" : "provingground.LinearStructure.VectorOps", "link" : "provingground\/LinearStructure$.html#VectorOps[A]extendsAnyRef", "kind" : "implicit class"}, {"label" : "nrec", "tail" : "(base: X, ind: (Int) ⇒ (X) ⇒ X)(ls: LinearStructure[X]): (Int) ⇒ X", "member" : "provingground.LinearStructure.nrec", "link" : "provingground\/LinearStructure$.html#nrec[X](base:X,ind:Int=>(X=>X))(implicitls:provingground.LinearStructure[X]):Int=>X", "kind" : "def"}, {"label" : "vAverage", "tail" : "(xs: Traversable[T])(ls: LinearStructure[T]): T", "member" : "provingground.LinearStructure.vAverage", "link" : "provingground\/LinearStructure$.html#vAverage[T](xs:Traversable[T])(implicitls:provingground.LinearStructure[T]):T", "kind" : "def"}, {"label" : "vBigSum", "tail" : "(xs: Traversable[T])(ls: LinearStructure[T]): T", "member" : "provingground.LinearStructure.vBigSum", "link" : "provingground\/LinearStructure$.html#vBigSum[T](xs:Traversable[T])(implicitls:provingground.LinearStructure[T]):T", "kind" : "def"}, {"label" : "vdiff", "tail" : "(ls: LinearStructure[T]): (T, T) ⇒ T", "member" : "provingground.LinearStructure.vdiff", "link" : "provingground\/LinearStructure$.html#vdiff[T](implicitls:provingground.LinearStructure[T]):(T,T)=>T", "kind" : "def"}, {"label" : "vprod", "tail" : "(ls: LinearStructure[T]): (Double, T) ⇒ T", "member" : "provingground.LinearStructure.vprod", "link" : "provingground\/LinearStructure$.html#vprod[T](implicitls:provingground.LinearStructure[T]):(Double,T)=>T", "kind" : "def"}, {"label" : "vsum", "tail" : "(ls: LinearStructure[T]): (T, T) ⇒ T", "member" : "provingground.LinearStructure.vsum", "link" : "provingground\/LinearStructure$.html#vsum[T](implicitls:provingground.LinearStructure[T]):(T,T)=>T", "kind" : "def"}, {"label" : "vzero", "tail" : "(ls: LinearStructure[T]): T", "member" : "provingground.LinearStructure.vzero", "link" : "provingground\/LinearStructure$.html#vzero[T](implicitls:provingground.LinearStructure[T]):T", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/LinearStructure$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/LinearStructure$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/LinearStructure$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/LinearStructure$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/LinearStructure$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/LinearStructure$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/LinearStructure$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/LinearStructure$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/LinearStructure$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/LinearStructure$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/LinearStructure$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/LinearStructure$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/LinearStructure$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/LinearStructure$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/LinearStructure$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/LinearStructure$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/LinearStructure$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/LinearStructure$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/LinearStructure$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "diff", "tail" : "(frm: A, remove: A): A", "member" : "provingground.LinearStructure.diff", "link" : "provingground\/LinearStructure.html#diff(frm:A,remove:A):A", "kind" : "def"}, {"member" : "provingground.LinearStructure#<init>", "error" : "unsupported entity"}, {"label" : "mult", "tail" : ": (Double, A) ⇒ A", "member" : "provingground.LinearStructure.mult", "link" : "provingground\/LinearStructure.html#mult:(Double,A)=>A", "kind" : "val"}, {"label" : "sum", "tail" : ": (A, A) ⇒ A", "member" : "provingground.LinearStructure.sum", "link" : "provingground\/LinearStructure.html#sum:(A,A)=>A", "kind" : "val"}, {"label" : "zero", "tail" : ": A", "member" : "provingground.LinearStructure.zero", "link" : "provingground\/LinearStructure.html#zero:A", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/LinearStructure.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/LinearStructure.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/LinearStructure.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/LinearStructure.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/LinearStructure.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/LinearStructure.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/LinearStructure.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/LinearStructure.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/LinearStructure.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/LinearStructure.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/LinearStructure.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/LinearStructure.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/LinearStructure.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/LinearStructure.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/LinearStructure.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/LinearStructure.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/LinearStructure.html", "kind" : "case class"}, {"name" : "provingground.MereProposition", "shortDescription" : "", "object" : "provingground\/MereProposition$.html", "members_object" : [{"label" : "mere", "tail" : "(fn: Func[U, V]): Func[Term, Term]", "member" : "provingground.MereProposition.mere", "link" : "provingground\/MereProposition$.html#mere[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](fn:provingground.HoTT.Func[U,V]):provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]", "kind" : "def"}, {"label" : "Factorize", "tail" : "", "member" : "provingground.MereProposition.Factorize", "link" : "provingground\/MereProposition$.html#Factorize[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]]extendsHoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Func[U,V],provingground.HoTT.Func[provingground.HoTT.Term,V]]]withHoTT.Subs[provingground.MereProposition.Factorize[U,V]]withProductwithSerializable", "kind" : "case class"}, {"label" : "Quotient", "tail" : "", "member" : "provingground.MereProposition.Quotient", "link" : "provingground\/MereProposition$.html#Quotient[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsHoTT.Func[U,provingground.HoTT.Term]withProductwithSerializable", "kind" : "case class"}, {"label" : "Truncation", "tail" : "", "member" : "provingground.MereProposition.Truncation", "link" : "provingground\/MereProposition$.html#Truncation[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsHoTT.Typ[provingground.HoTT.Term]withProductwithSerializable", "kind" : "case class"}, {"label" : "isPropn", "tail" : "(typ: Typ[U]): Typ[FuncLike[U with Subs[U], FuncLike[U with Subs[U], Equality[U with Subs[U]]]]]", "member" : "provingground.MereProposition.isPropn", "link" : "provingground\/MereProposition$.html#isPropn[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](typ:provingground.HoTT.Typ[U]):provingground.HoTT.Typ[provingground.HoTT.FuncLike[Uwithprovingground.HoTT.Subs[U],provingground.HoTT.FuncLike[Uwithprovingground.HoTT.Subs[U],provingground.HoTT.Equality[Uwithprovingground.HoTT.Subs[U]]]]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/MereProposition$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/MereProposition$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/MereProposition$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/MereProposition$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/MereProposition$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/MereProposition$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/MereProposition$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/MereProposition$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/MereProposition$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/MereProposition$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/MereProposition$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/MereProposition$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/MereProposition$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/MereProposition$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/MereProposition$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/MereProposition$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/MereProposition$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/MereProposition$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/MereProposition$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.PickledWeighted", "shortDescription" : "", "object" : "provingground\/PickledWeighted$.html", "members_object" : [{"label" : "rw", "tail" : "(): upickle.default.ReadWriter[PickledWeighted]", "member" : "provingground.PickledWeighted.rw", "link" : "provingground\/PickledWeighted$.html#rw:upickle.default.ReadWriter[provingground.PickledWeighted]", "kind" : "implicit def"}, {"label" : "pickle", "tail" : "(wtd: Weighted[T]): PickledWeighted", "member" : "provingground.PickledWeighted.pickle", "link" : "provingground\/PickledWeighted$.html#pickle[T](wtd:provingground.Weighted[T]):provingground.PickledWeighted", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/PickledWeighted$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/PickledWeighted$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/PickledWeighted$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/PickledWeighted$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/PickledWeighted$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/PickledWeighted$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/PickledWeighted$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/PickledWeighted$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/PickledWeighted$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/PickledWeighted$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/PickledWeighted$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/PickledWeighted$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/PickledWeighted$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/PickledWeighted$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/PickledWeighted$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/PickledWeighted$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/PickledWeighted$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/PickledWeighted$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/PickledWeighted$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "map", "tail" : "(f: (String) ⇒ S): Weighted[S]", "member" : "provingground.PickledWeighted.map", "link" : "provingground\/PickledWeighted.html#map[S](f:String=>S):provingground.Weighted[S]", "kind" : "def"}, {"member" : "provingground.PickledWeighted#<init>", "error" : "unsupported entity"}, {"label" : "weight", "tail" : ": Double", "member" : "provingground.PickledWeighted.weight", "link" : "provingground\/PickledWeighted.html#weight:Double", "kind" : "val"}, {"label" : "elem", "tail" : ": String", "member" : "provingground.PickledWeighted.elem", "link" : "provingground\/PickledWeighted.html#elem:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/PickledWeighted.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/PickledWeighted.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/PickledWeighted.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/PickledWeighted.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/PickledWeighted.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/PickledWeighted.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/PickledWeighted.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/PickledWeighted.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/PickledWeighted.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/PickledWeighted.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/PickledWeighted.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/PickledWeighted.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/PickledWeighted.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/PickledWeighted.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/PickledWeighted.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/PickledWeighted.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/PickledWeighted.html", "kind" : "case class"}, {"name" : "provingground.ProbabilityDistribution", "members_trait" : [{"label" : "condMap", "tail" : "(f: (A) ⇒ Option[B]): ProbabilityDistribution[B]", "member" : "provingground.ProbabilityDistribution.condMap", "link" : "provingground\/ProbabilityDistribution.html#condMap[B](f:A=>Option[B]):provingground.ProbabilityDistribution[B]", "kind" : "def"}, {"label" : "conditioned", "tail" : "(p: (A) ⇒ Boolean): ProbabilityDistribution[A]", "member" : "provingground.ProbabilityDistribution.conditioned", "link" : "provingground\/ProbabilityDistribution.html#conditioned(p:A=>Boolean):provingground.ProbabilityDistribution[A]", "kind" : "def"}, {"label" : "<+?>", "tail" : "(mixin: ⇒ ProbabilityDistribution[Option[A]], weight: Double): MixinOpt[A]", "member" : "provingground.ProbabilityDistribution.<+?>", "link" : "provingground\/ProbabilityDistribution.html#<+?>(mixin:=>provingground.ProbabilityDistribution[Option[A]],weight:Double):provingground.ProbabilityDistribution.MixinOpt[A]", "kind" : "def"}, {"label" : "<+>", "tail" : "(mixin: ⇒ ProbabilityDistribution[A], weight: Double): Mixin[A]", "member" : "provingground.ProbabilityDistribution.<+>", "link" : "provingground\/ProbabilityDistribution.html#<+>(mixin:=>provingground.ProbabilityDistribution[A],weight:Double):provingground.ProbabilityDistribution.Mixin[A]", "kind" : "def"}, {"label" : "<++>", "tail" : "(components: ⇒ Vector[Weighted[ProbabilityDistribution[A]]]): Mixture[A]", "member" : "provingground.ProbabilityDistribution.<++>", "link" : "provingground\/ProbabilityDistribution.html#<++>(components:=>Vector[provingground.Weighted[provingground.ProbabilityDistribution[A]]]):provingground.ProbabilityDistribution.Mixture[A]", "kind" : "def"}, {"label" : "findFut", "tail" : "(p: (A) ⇒ Boolean, maxloops: Long): Future[Option[A]]", "member" : "provingground.ProbabilityDistribution.findFut", "link" : "provingground\/ProbabilityDistribution.html#findFut(p:A=>Boolean,maxloops:Long):scala.concurrent.Future[Option[A]]", "kind" : "def"}, {"label" : "randomVariable", "tail" : "(): Iterator[A]", "member" : "provingground.ProbabilityDistribution.randomVariable", "link" : "provingground\/ProbabilityDistribution.html#randomVariable:Iterator[A]", "kind" : "def"}, {"label" : "fibProduct", "tail" : "(quot: (A) ⇒ Q, fibers: (Q) ⇒ ProbabilityDistribution[B]): FiberProduct[A, Q, B]", "member" : "provingground.ProbabilityDistribution.fibProduct", "link" : "provingground\/ProbabilityDistribution.html#fibProduct[Q,B](quot:A=>Q,fibers:Q=>provingground.ProbabilityDistribution[B]):provingground.ProbabilityDistribution.FiberProduct[A,Q,B]", "kind" : "def"}, {"label" : "product", "tail" : "(that: ProbabilityDistribution[B]): Product[A, B]", "member" : "provingground.ProbabilityDistribution.product", "link" : "provingground\/ProbabilityDistribution.html#product[B](that:provingground.ProbabilityDistribution[B]):provingground.ProbabilityDistribution.Product[A,B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (A) ⇒ ProbabilityDistribution[B]): ProbabilityDistribution[B]", "member" : "provingground.ProbabilityDistribution.flatMap", "link" : "provingground\/ProbabilityDistribution.html#flatMap[B](f:A=>provingground.ProbabilityDistribution[B]):provingground.ProbabilityDistribution[B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (A) ⇒ B): ProbabilityDistribution[B]", "member" : "provingground.ProbabilityDistribution.map", "link" : "provingground\/ProbabilityDistribution.html#map[B](f:A=>B):provingground.ProbabilityDistribution[B]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "provingground\/ProbabilityDistribution.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/ProbabilityDistribution.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/ProbabilityDistribution.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "provingground\/ProbabilityDistribution.html#toString():String", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.Any.hashCode", "link" : "provingground\/ProbabilityDistribution.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.equals", "link" : "provingground\/ProbabilityDistribution.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "provingground\/ProbabilityDistribution.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "provingground\/ProbabilityDistribution.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "next", "tail" : "(): A", "member" : "provingground.ProbabilityDistribution.next", "link" : "provingground\/ProbabilityDistribution.html#next:A", "kind" : "abstract def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.Any.getClass", "link" : "provingground\/ProbabilityDistribution.html#getClass():Class[_]", "kind" : "abstract def"}], "shortDescription" : "A probability distribution, from which we can pick values at random (the only abstract method).", "object" : "provingground\/ProbabilityDistribution$.html", "members_object" : [{"label" : "vs", "tail" : "(): VectorSpace[ProbabilityDistribution[T], Double]", "member" : "provingground.ProbabilityDistribution.vs", "link" : "provingground\/ProbabilityDistribution$.html#vs[T]:spire.algebra.VectorSpace[provingground.ProbabilityDistribution[T],Double]", "kind" : "implicit def"}, {"label" : "Flattened", "tail" : "", "member" : "provingground.ProbabilityDistribution.Flattened", "link" : "provingground\/ProbabilityDistribution$.html#Flattened[A]extendsProbabilityDistribution[A]withProductwithSerializable", "kind" : "case class"}, {"label" : "Sum", "tail" : "", "member" : "provingground.ProbabilityDistribution.Sum", "link" : "provingground\/ProbabilityDistribution$.html#Sum[A]extendsProbabilityDistribution[A]withProductwithSerializable", "kind" : "case class"}, {"label" : "Scaled", "tail" : "", "member" : "provingground.ProbabilityDistribution.Scaled", "link" : "provingground\/ProbabilityDistribution$.html#Scaled[A]extendsProbabilityDistribution[A]withProductwithSerializable", "kind" : "case class"}, {"label" : "CondMapped", "tail" : "", "member" : "provingground.ProbabilityDistribution.CondMapped", "link" : "provingground\/ProbabilityDistribution$.html#CondMapped[A,B]extendsProbabilityDistribution[B]withProductwithSerializable", "kind" : "case class"}, {"label" : "Conditioned", "tail" : "", "member" : "provingground.ProbabilityDistribution.Conditioned", "link" : "provingground\/ProbabilityDistribution$.html#Conditioned[A]extendsProbabilityDistribution[A]withProductwithSerializable", "kind" : "case class"}, {"label" : "Product", "tail" : "", "member" : "provingground.ProbabilityDistribution.Product", "link" : "provingground\/ProbabilityDistribution$.html#Product[A,B]extendsProbabilityDistribution[(A,B)]withProductwithSerializable", "kind" : "case class"}, {"label" : "FiberProduct", "tail" : "", "member" : "provingground.ProbabilityDistribution.FiberProduct", "link" : "provingground\/ProbabilityDistribution$.html#FiberProduct[A,Q,B]extendsProbabilityDistribution[(A,B)]withProductwithSerializable", "kind" : "case class"}, {"label" : "FlatMapped", "tail" : "", "member" : "provingground.ProbabilityDistribution.FlatMapped", "link" : "provingground\/ProbabilityDistribution$.html#FlatMapped[A,B]extendsProbabilityDistribution[B]withProductwithSerializable", "kind" : "case class"}, {"label" : "Mapped", "tail" : "", "member" : "provingground.ProbabilityDistribution.Mapped", "link" : "provingground\/ProbabilityDistribution$.html#Mapped[A,B]extendsProbabilityDistribution[B]withProductwithSerializable", "kind" : "case class"}, {"label" : "MixinOpt", "tail" : "", "member" : "provingground.ProbabilityDistribution.MixinOpt", "link" : "provingground\/ProbabilityDistribution$.html#MixinOpt[A]extendsProbabilityDistribution[A]", "kind" : "class"}, {"label" : "Mixin", "tail" : "", "member" : "provingground.ProbabilityDistribution.Mixin", "link" : "provingground\/ProbabilityDistribution$.html#Mixin[A]extendsProbabilityDistribution[A]", "kind" : "class"}, {"label" : "Mixture", "tail" : "", "member" : "provingground.ProbabilityDistribution.Mixture", "link" : "provingground\/ProbabilityDistribution$.html#Mixture[A]extendsProbabilityDistribution[A]", "kind" : "class"}, {"label" : "chooseOpt", "tail" : "(value: Double, pmf: Traversable[Weighted[A]]): Option[A]", "member" : "provingground.ProbabilityDistribution.chooseOpt", "link" : "provingground\/ProbabilityDistribution$.html#chooseOpt[A](value:Double,pmf:Traversable[provingground.Weighted[A]]):Option[A]", "kind" : "def"}, {"label" : "rand", "tail" : ": Random", "member" : "provingground.ProbabilityDistribution.rand", "link" : "provingground\/ProbabilityDistribution$.html#rand:scala.util.Random", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/ProbabilityDistribution$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/ProbabilityDistribution$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/ProbabilityDistribution$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/ProbabilityDistribution$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/ProbabilityDistribution$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/ProbabilityDistribution$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/ProbabilityDistribution$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/ProbabilityDistribution$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/ProbabilityDistribution$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/ProbabilityDistribution$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/ProbabilityDistribution$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/ProbabilityDistribution$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/ProbabilityDistribution$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/ProbabilityDistribution$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/ProbabilityDistribution$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/ProbabilityDistribution$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/ProbabilityDistribution$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/ProbabilityDistribution$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/ProbabilityDistribution$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/ProbabilityDistribution.html", "kind" : "trait"}, {"name" : "provingground.Subst", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/Subst.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/Subst.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/Subst.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/Subst.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/Subst.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/Subst.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/Subst.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/Subst.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/Subst.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/Subst.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/Subst.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/Subst.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/Subst.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/Subst.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/Subst.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/Subst.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/Subst.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/Subst.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/Subst.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "subst", "tail" : "(a: A)(x: Term, y: Term): A", "member" : "provingground.Subst.subst", "link" : "provingground\/Subst.html#subst(a:A)(x:provingground.HoTT.Term,y:provingground.HoTT.Term):A", "kind" : "abstract def"}], "shortDescription" : "allows substitution of a Term by another.", "object" : "provingground\/Subst$.html", "members_object" : [{"label" : "Lambda", "tail" : "", "member" : "provingground.Subst.Lambda", "link" : "provingground\/Subst$.html#Lambda", "kind" : "object"}, {"label" : "Lambda", "tail" : "", "member" : "provingground.Subst.Lambda", "link" : "provingground\/Subst$.html#Lambda[T<:provingground.HoTT.Termwithprovingground.HoTT.Subs[T],A]extendsT=>AwithProductwithSerializable", "kind" : "case class"}, {"label" : "funcSubst", "tail" : "(arg0: Subst[A]): Subst[(Term) ⇒ A]", "member" : "provingground.Subst.funcSubst", "link" : "provingground\/Subst$.html#funcSubst[A](implicitevidence$3:provingground.Subst[A]):provingground.Subst[provingground.HoTT.Term=>A]", "kind" : "implicit def"}, {"label" : "apply", "tail" : "(arg0: Subst[A]): Subst[A]", "member" : "provingground.Subst.apply", "link" : "provingground\/Subst$.html#apply[A](implicitevidence$2:provingground.Subst[A]):provingground.Subst[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/Subst$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/Subst$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/Subst$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/Subst$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/Subst$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/Subst$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/Subst$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/Subst$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/Subst$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/Subst$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/Subst$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/Subst$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/Subst$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/Subst$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/Subst$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/Subst$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/Subst$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/Subst$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/Subst$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/Subst.html", "kind" : "trait"}, {"name" : "provingground.SubstImplicits", "members_trait" : [{"label" : "SubstOp", "tail" : "", "member" : "provingground.SubstImplicits.SubstOp", "link" : "provingground\/SubstImplicits.html#SubstOp[A]extendsAnyRef", "kind" : "implicit class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/SubstImplicits.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/SubstImplicits.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/SubstImplicits.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/SubstImplicits.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/SubstImplicits.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/SubstImplicits.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/SubstImplicits.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/SubstImplicits.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/SubstImplicits.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/SubstImplicits.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/SubstImplicits.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/SubstImplicits.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/SubstImplicits.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/SubstImplicits.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/SubstImplicits.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/SubstImplicits.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/SubstImplicits.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/SubstImplicits.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/SubstImplicits.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "provingground\/SubstImplicits.html", "kind" : "trait"}, {"name" : "provingground.TermList", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/TermList.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/TermList.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/TermList.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/TermList.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/TermList.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/TermList.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/TermList.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/TermList.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/TermList.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/TermList.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/TermList.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/TermList.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/TermList.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/TermList.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/TermList.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/TermList.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/TermList.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/TermList.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/TermList.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "terms", "tail" : "(a: A): Vector[Term]", "member" : "provingground.TermList.terms", "link" : "provingground\/TermList.html#terms(a:A):Vector[provingground.HoTT.Term]", "kind" : "abstract def"}, {"label" : "subst", "tail" : "(a: A)(x: Term, y: Term): A", "member" : "provingground.Subst.subst", "link" : "provingground\/TermList.html#subst(a:A)(x:provingground.HoTT.Term,y:provingground.HoTT.Term):A", "kind" : "abstract def"}], "shortDescription" : "allows substitution of a Term by another, as well as mapping to a vector of termschiefly subtypes of Term and HLists of these;", "object" : "provingground\/TermList$.html", "members_object" : [{"label" : "TermListOp", "tail" : "", "member" : "provingground.TermListImplicits.TermListOp", "link" : "provingground\/TermListImplicits.html#TermListOp[A]extendsTermListImplicits.this.SubstOp[A]", "kind" : "implicit class"}, {"label" : "SubstOp", "tail" : "", "member" : "provingground.SubstImplicits.SubstOp", "link" : "provingground\/SubstImplicits.html#SubstOp[A]extendsAnyRef", "kind" : "implicit class"}, {"label" : "hConsTermList", "tail" : "(arg0: TermList[U], arg1: TermList[V]): TermList[::[U, V]]", "member" : "provingground.TermList.hConsTermList", "link" : "provingground\/TermList$.html#hConsTermList[U,V<:shapeless.HList](implicitevidence$5:provingground.TermList[U],implicitevidence$6:provingground.TermList[V]):provingground.TermList[U::V]", "kind" : "implicit def"}, {"label" : "HNilTermList", "tail" : "", "member" : "provingground.TermList.HNilTermList", "link" : "provingground\/TermList$.html#HNilTermList", "kind" : "implicit object"}, {"label" : "termTermList", "tail" : "(): TermList[U]", "member" : "provingground.TermList.termTermList", "link" : "provingground\/TermList$.html#termTermList[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]:provingground.TermList[U]", "kind" : "implicit def"}, {"label" : "apply", "tail" : "(arg0: TermList[A]): TermList[A]", "member" : "provingground.TermList.apply", "link" : "provingground\/TermList$.html#apply[A](implicitevidence$4:provingground.TermList[A]):provingground.TermList[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/TermList$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/TermList$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/TermList$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/TermList$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/TermList$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/TermList$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/TermList$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/TermList$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/TermList$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/TermList$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/TermList$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/TermList$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/TermList$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/TermList$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/TermList$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/TermList$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/TermList$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/TermList$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/TermList$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/TermList.html", "kind" : "trait"}, {"name" : "provingground.TermListImplicits", "members_trait" : [{"label" : "SubstOp", "tail" : "", "member" : "provingground.SubstImplicits.SubstOp", "link" : "provingground\/SubstImplicits.html#SubstOp[A]extendsAnyRef", "kind" : "implicit class"}, {"label" : "TermListOp", "tail" : "", "member" : "provingground.TermListImplicits.TermListOp", "link" : "provingground\/TermListImplicits.html#TermListOp[A]extendsTermListImplicits.this.SubstOp[A]", "kind" : "implicit class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/TermListImplicits.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/TermListImplicits.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/TermListImplicits.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/TermListImplicits.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/TermListImplicits.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/TermListImplicits.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/TermListImplicits.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/TermListImplicits.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/TermListImplicits.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/TermListImplicits.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/TermListImplicits.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/TermListImplicits.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/TermListImplicits.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/TermListImplicits.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/TermListImplicits.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/TermListImplicits.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/TermListImplicits.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/TermListImplicits.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/TermListImplicits.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "provingground\/TermListImplicits.html", "kind" : "trait"}, {"name" : "provingground.Weighted", "shortDescription" : "", "object" : "provingground\/Weighted$.html", "members_object" : [{"label" : "weights", "tail" : "(tws: (T, Double)*): Seq[Weighted[T]]", "member" : "provingground.Weighted.weights", "link" : "provingground\/Weighted$.html#weights[T](tws:(T,Double)*):Seq[provingground.Weighted[T]]", "kind" : "implicit def"}, {"label" : "combine", "tail" : "(seqs: Seq[Weighted[T]]*): Iterable[Weighted[T]]", "member" : "provingground.Weighted.combine", "link" : "provingground\/Weighted$.html#combine[T](seqs:Seq[provingground.Weighted[T]]*):scala.collection.immutable.Iterable[provingground.Weighted[T]]", "kind" : "def"}, {"label" : "flatten", "tail" : "(seq: Vector[Weighted[T]]): Iterable[Weighted[T]]", "member" : "provingground.Weighted.flatten", "link" : "provingground\/Weighted$.html#flatten[T](seq:Vector[provingground.Weighted[T]]):scala.collection.immutable.Iterable[provingground.Weighted[T]]", "kind" : "def"}, {"label" : "flatten", "tail" : "(seq: Seq[Weighted[T]]): Iterable[Weighted[T]]", "member" : "provingground.Weighted.flatten", "link" : "provingground\/Weighted$.html#flatten[T](seq:Seq[provingground.Weighted[T]]):scala.collection.immutable.Iterable[provingground.Weighted[T]]", "kind" : "def"}, {"label" : "sumWeigths", "tail" : "(seq: Seq[Weighted[T]]): Double", "member" : "provingground.Weighted.sumWeigths", "link" : "provingground\/Weighted$.html#sumWeigths[T](seq:Seq[provingground.Weighted[T]]):Double", "kind" : "def"}, {"label" : "rw", "tail" : "(arg0: upickle.default.ReadWriter[A]): upickle.default.ReadWriter[Weighted[A]]", "member" : "provingground.Weighted.rw", "link" : "provingground\/Weighted$.html#rw[A](implicitevidence$1:upickle.default.ReadWriter[A]):upickle.default.ReadWriter[provingground.Weighted[A]]", "kind" : "implicit def"}, {"label" : "pick", "tail" : "(dist: Traversable[Weighted[T]], t: Double): T", "member" : "provingground.Weighted.pick", "link" : "provingground\/Weighted$.html#pick[T](dist:Traversable[provingground.Weighted[T]],t:Double):T", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/Weighted$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/Weighted$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/Weighted$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/Weighted$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/Weighted$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/Weighted$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/Weighted$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/Weighted$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/Weighted$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/Weighted$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/Weighted$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/Weighted$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/Weighted$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/Weighted$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/Weighted$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/Weighted$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/Weighted$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/Weighted$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/Weighted$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "map", "tail" : "(f: (T) ⇒ S): Weighted[S]", "member" : "provingground.Weighted.map", "link" : "provingground\/Weighted.html#map[S](f:T=>S):provingground.Weighted[S]", "kind" : "def"}, {"label" : "scale", "tail" : "(s: Double): Weighted[T]", "member" : "provingground.Weighted.scale", "link" : "provingground\/Weighted.html#scale(s:Double):provingground.Weighted[T]", "kind" : "def"}, {"member" : "provingground.Weighted#<init>", "error" : "unsupported entity"}, {"label" : "weight", "tail" : ": Double", "member" : "provingground.Weighted.weight", "link" : "provingground\/Weighted.html#weight:Double", "kind" : "val"}, {"label" : "elem", "tail" : ": T", "member" : "provingground.Weighted.elem", "link" : "provingground\/Weighted.html#elem:T", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/Weighted.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/Weighted.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/Weighted.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/Weighted.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/Weighted.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/Weighted.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/Weighted.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/Weighted.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/Weighted.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/Weighted.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/Weighted.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/Weighted.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/Weighted.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/Weighted.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/Weighted.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/Weighted.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/Weighted.html", "kind" : "case class"}], "akka" : [], "ammonite.ops" : [], "provingground.scalahott" : [{"name" : "provingground.scalahott.BigOps", "shortDescription" : "", "object" : "provingground\/scalahott\/BigOps$.html", "members_object" : [{"label" : "BigSum", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Term with Subs[Term], FuncLike[Func[Term, Term] with Subs[Func[Term, Term]], Func[Func[Term, Func[Term, Term]], Term]]]]", "member" : "provingground.scalahott.BigOps.BigSum", "link" : "provingground\/scalahott\/BigOps$.html#BigSum:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]],provingground.HoTT.Func[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]],provingground.HoTT.Term]]]]", "kind" : "val"}, {"label" : "en", "tail" : ": Term with Subs[Term]", "member" : "provingground.scalahott.BigOps.en", "link" : "provingground\/scalahott\/BigOps$.html#en:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "f", "tail" : ": Func[Term, Term] with Subs[Func[Term, Term]]", "member" : "provingground.scalahott.BigOps.f", "link" : "provingground\/scalahott\/BigOps$.html#f:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "A", "tail" : ": Typ[Term] with Subs[Typ[Term]]", "member" : "provingground.scalahott.BigOps.A", "link" : "provingground\/scalahott\/BigOps$.html#A:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/scalahott\/BigOps$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/scalahott\/BigOps$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/scalahott\/BigOps$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/scalahott\/BigOps$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/scalahott\/BigOps$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/scalahott\/BigOps$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/scalahott\/BigOps$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/BigOps$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/BigOps$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/BigOps$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/scalahott\/BigOps$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/scalahott\/BigOps$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/scalahott\/BigOps$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/scalahott\/BigOps$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/scalahott\/BigOps$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/scalahott\/BigOps$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/scalahott\/BigOps$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/scalahott\/BigOps$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/scalahott\/BigOps$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.scalahott.Bool", "shortDescription" : "", "object" : "provingground\/scalahott\/Bool$.html", "members_object" : [{"label" : "Elem", "tail" : "", "member" : "provingground.HoTT.Typ.Elem", "link" : "provingground\/HoTT$$Typ.html#Elem", "kind" : "object"}, {"label" : "isTrue", "tail" : ": Func[RepTerm[Boolean], Typ[Term]]", "member" : "provingground.scalahott.Bool.isTrue", "link" : "provingground\/scalahott\/Bool$.html#isTrue:provingground.HoTT.Func[provingground.scalahott.RepTerm[Boolean],provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "ifThenElse", "tail" : "(pos: X, neg: X)(xrep: ScalaRep[U, X]): Func[RepTerm[Boolean], U]", "member" : "provingground.scalahott.Bool.ifThenElse", "link" : "provingground\/scalahott\/Bool$.html#ifThenElse[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],X](pos:X,neg:X)(implicitxrep:provingground.scalahott.ScalaRep[U,X]):provingground.HoTT.Func[provingground.scalahott.RepTerm[Boolean],U]", "kind" : "def"}, {"label" : "or", "tail" : ": Func[RepTerm[Boolean], Func[RepTerm[Boolean], RepTerm[Boolean]]]", "member" : "provingground.scalahott.Bool.or", "link" : "provingground\/scalahott\/Bool$.html#or:provingground.HoTT.Func[provingground.scalahott.RepTerm[Boolean],provingground.HoTT.Func[provingground.scalahott.RepTerm[Boolean],provingground.scalahott.RepTerm[Boolean]]]", "kind" : "val"}, {"label" : "and", "tail" : ": Func[RepTerm[Boolean], Func[RepTerm[Boolean], RepTerm[Boolean]]]", "member" : "provingground.scalahott.Bool.and", "link" : "provingground\/scalahott\/Bool$.html#and:provingground.HoTT.Func[provingground.scalahott.RepTerm[Boolean],provingground.HoTT.Func[provingground.scalahott.RepTerm[Boolean],provingground.scalahott.RepTerm[Boolean]]]", "kind" : "val"}, {"label" : "not", "tail" : ": Func[RepTerm[Boolean], RepTerm[Boolean]]", "member" : "provingground.scalahott.Bool.not", "link" : "provingground\/scalahott\/Bool$.html#not:provingground.HoTT.Func[provingground.scalahott.RepTerm[Boolean],provingground.scalahott.RepTerm[Boolean]]", "kind" : "val"}, {"label" : "rep", "tail" : ": ScalaRep[RepTerm[Boolean], Boolean]", "member" : "provingground.scalahott.ScalaTyp.rep", "link" : "provingground\/scalahott\/Bool$.html#rep:provingground.scalahott.ScalaRep[provingground.scalahott.RepTerm[A],A]", "kind" : "implicit val"}, {"label" : "subs", "tail" : "(x: Term, y: Term): Typ[RepTerm[Boolean]] with Subs[Typ[RepTerm[Boolean]]]", "member" : "provingground.scalahott.ScalaTyp.subs", "link" : "provingground\/scalahott\/Bool$.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.HoTT.Typ[provingground.scalahott.RepTerm[A]]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.scalahott.RepTerm[A]]]", "kind" : "def"}, {"label" : "newobj", "tail" : "(): Nothing", "member" : "provingground.scalahott.ScalaTyp.newobj", "link" : "provingground\/scalahott\/Bool$.html#newobj:Nothing", "kind" : "def"}, {"label" : "variable", "tail" : "(name: AnySym): RepTerm[Boolean]", "member" : "provingground.scalahott.ScalaTyp.variable", "link" : "provingground\/scalahott\/Bool$.html#variable(name:provingground.HoTT.AnySym):provingground.scalahott.RepTerm[A]", "kind" : "def"}, {"label" : "typ", "tail" : ": ScalaTypUniv[Boolean]", "member" : "provingground.scalahott.ScalaTyp.typ", "link" : "provingground\/scalahott\/Bool$.html#typ:provingground.scalahott.ScalaTypUniv[A]", "kind" : "val"}, {"label" : "Obj", "tail" : "", "member" : "provingground.scalahott.ScalaTyp.Obj", "link" : "provingground\/scalahott\/Bool$.html#Obj=provingground.scalahott.RepTerm[A]", "kind" : "type"}, {"label" : "++", "tail" : "(those: V): SigmaTyp[UU, VV]", "member" : "provingground.HoTT.Typ.++", "link" : "provingground\/scalahott\/Bool$.html#++[UU>:provingground.HoTT.Typ[U]<:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[UU],VV<:provingground.HoTT.Termwithprovingground.HoTT.Subs[VV],V<:provingground.HoTT.Typ[VV]withprovingground.HoTT.Subs[V]](those:V):provingground.HoTT.SigmaTyp[UU,VV]", "kind" : "def"}, {"label" : "||", "tail" : "(that: Typ[V]): PlusTyp[UU, V]", "member" : "provingground.HoTT.Typ.||", "link" : "provingground\/scalahott\/Bool$.html#||[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](that:provingground.HoTT.Typ[V]):provingground.HoTT.PlusTyp[UU,V]", "kind" : "def"}, {"label" : "&&", "tail" : "(that: Typ[V]): ProdTyp[UU, V]", "member" : "provingground.HoTT.Typ.&&", "link" : "provingground\/scalahott\/Bool$.html#&&[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](that:provingground.HoTT.Typ[V]):provingground.HoTT.ProdTyp[UU,V]", "kind" : "def"}, {"label" : "~>:", "tail" : "(variable: V): GenFuncTyp[V, UU]", "member" : "provingground.HoTT.Typ.~>:", "link" : "provingground\/scalahott\/Bool$.html#~>:[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](variable:V):provingground.HoTT.GenFuncTyp[V,UU]", "kind" : "def"}, {"label" : "->:", "tail" : "(that: Typ[W]): FuncTyp[W, UU]", "member" : "provingground.HoTT.Typ.->:", "link" : "provingground\/scalahott\/Bool$.html#->:[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU]](that:provingground.HoTT.Typ[W]):provingground.HoTT.FuncTyp[W,UU]", "kind" : "def"}, {"label" : "typedVar", "tail" : "(factory: NameFactory): TypedTerm[RepTerm[Boolean]]", "member" : "provingground.HoTT.Typ.typedVar", "link" : "provingground\/scalahott\/Bool$.html#typedVar(implicitfactory:provingground.HoTT.NameFactory):provingground.HoTT.TypedTerm[U]", "kind" : "def"}, {"label" : "Var", "tail" : "(factory: NameFactory): RepTerm[Boolean] with Subs[RepTerm[Boolean]]", "member" : "provingground.HoTT.Typ.Var", "link" : "provingground\/scalahott\/Bool$.html#Var(implicitfactory:provingground.HoTT.NameFactory):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "sym", "tail" : "(name: Name): RepTerm[Boolean] with Subs[RepTerm[Boolean]]", "member" : "provingground.HoTT.Typ.sym", "link" : "provingground\/scalahott\/Bool$.html#sym(implicitname:sourcecode.Name):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "::", "tail" : "(name: String): RepTerm[Boolean] with Subs[RepTerm[Boolean]]", "member" : "provingground.HoTT.Typ.::", "link" : "provingground\/scalahott\/Bool$.html#::(name:String):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "typedVar", "tail" : "(name: AnySym): TypedTerm[RepTerm[Boolean]]", "member" : "provingground.HoTT.Typ.typedVar", "link" : "provingground\/scalahott\/Bool$.html#typedVar(name:provingground.HoTT.AnySym):provingground.HoTT.TypedTerm[U]", "kind" : "def"}, {"label" : "symbObj", "tail" : "(name: AnySym): RepTerm[Boolean] with Subs[RepTerm[Boolean]]", "member" : "provingground.HoTT.Typ.symbObj", "link" : "provingground\/scalahott\/Bool$.html#symbObj(name:provingground.HoTT.AnySym):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "typlevel", "tail" : ": Int", "member" : "provingground.HoTT.Typ.typlevel", "link" : "provingground\/scalahott\/Bool$.html#typlevel:Int", "kind" : "lazy val"}, {"label" : "typed", "tail" : ": TypedTerm[Typ[Term]]", "member" : "provingground.HoTT.Typ.typed", "link" : "provingground\/scalahott\/Bool$.html#typed:provingground.HoTT.TypedTerm[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "!:", "tail" : "(term: Term): RepTerm[Boolean]", "member" : "provingground.HoTT.Typ.!:", "link" : "provingground\/scalahott\/Bool$.html#!:(term:provingground.HoTT.Term):U", "kind" : "def"}, {"label" : "obj", "tail" : "(): RepTerm[Boolean]", "member" : "provingground.HoTT.Typ.obj", "link" : "provingground\/scalahott\/Bool$.html#obj:U", "kind" : "def"}, {"label" : "usesVar", "tail" : "(t: Term): Boolean", "member" : "provingground.HoTT.Term.usesVar", "link" : "provingground\/scalahott\/Bool$.html#usesVar(t:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "indepOf", "tail" : "(that: Term): Boolean", "member" : "provingground.HoTT.Term.indepOf", "link" : "provingground\/scalahott\/Bool$.html#indepOf(that:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "dependsOn", "tail" : "(that: Term): Boolean", "member" : "provingground.HoTT.Term.dependsOn", "link" : "provingground\/scalahott\/Bool$.html#dependsOn(that:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "replace", "tail" : "(x: Term, y: Term): Typ[RepTerm[Boolean]] with Subs[Typ[RepTerm[Boolean]]]", "member" : "provingground.HoTT.Subs.replace", "link" : "provingground\/scalahott\/Bool$.html#replace(x:provingground.HoTT.Term,y:provingground.HoTT.Term):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/scalahott\/Bool$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/scalahott\/Bool$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/scalahott\/Bool$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/scalahott\/Bool$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/scalahott\/Bool$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/scalahott\/Bool$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/scalahott\/Bool$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/Bool$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/Bool$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/Bool$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/scalahott\/Bool$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/scalahott\/Bool$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/scalahott\/Bool$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/scalahott\/Bool$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/scalahott\/Bool$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/scalahott\/Bool$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/scalahott\/Bool$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/scalahott\/Bool$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/scalahott\/Bool$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.scalahott.BoolType", "shortDescription" : "", "object" : "provingground\/scalahott\/BoolType$.html", "members_object" : [{"label" : "itedep", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Term with Subs[Term], Term]]]", "member" : "provingground.scalahott.BoolType.itedep", "link" : "provingground\/scalahott\/BoolType$.html#itedep:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]]]", "kind" : "lazy val"}, {"label" : "iteDepFunc", "tail" : "(u: Typ[Term], v: Typ[Term]): FuncLike[Term with Subs[Term], Term]", "member" : "provingground.scalahott.BoolType.iteDepFunc", "link" : "provingground\/scalahott\/BoolType$.html#iteDepFunc(u:provingground.HoTT.Typ[provingground.HoTT.Term],v:provingground.HoTT.Typ[provingground.HoTT.Term]):provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]", "kind" : "def"}, {"label" : "ite", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], Func[Term, Func[Term, Func[Term, Term]]]]", "member" : "provingground.scalahott.BoolType.ite", "link" : "provingground\/scalahott\/BoolType$.html#ite:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]]", "kind" : "lazy val"}, {"label" : "iteFunc", "tail" : "(u: Typ[U]): Func[Term, Func[U, Func[U, U]]]", "member" : "provingground.scalahott.BoolType.iteFunc", "link" : "provingground\/scalahott\/BoolType$.html#iteFunc[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](u:provingground.HoTT.Typ[U]):provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[U,provingground.HoTT.Func[U,U]]]", "kind" : "def"}, {"label" : "yes", "tail" : "", "member" : "provingground.scalahott.BoolType.yes", "link" : "provingground\/scalahott\/BoolType$.html#yes", "kind" : "object"}, {"label" : "isTrueTyp", "tail" : "", "member" : "provingground.scalahott.BoolType.isTrueTyp", "link" : "provingground\/scalahott\/BoolType$.html#isTrueTypextendsHoTT.SmallTypwithProductwithSerializable", "kind" : "case class"}, {"label" : "isTrue", "tail" : ": Func[Term, Typ[Term]]", "member" : "provingground.scalahott.BoolType.isTrue", "link" : "provingground\/scalahott\/BoolType$.html#isTrue:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "boolFmly", "tail" : ": FuncRep[Term, Boolean, Typ[Term], Typ[Term]]", "member" : "provingground.scalahott.BoolType.boolFmly", "link" : "provingground\/scalahott\/BoolType$.html#boolFmly:provingground.scalahott.ScalaRep.FuncRep[provingground.HoTT.Term,Boolean,provingground.HoTT.Typ[provingground.HoTT.Term],provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "or", "tail" : ": Func[Term, Func[Term, Term]]", "member" : "provingground.scalahott.BoolType.or", "link" : "provingground\/scalahott\/BoolType$.html#or:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "and", "tail" : ": Func[Term, Func[Term, Term]]", "member" : "provingground.scalahott.BoolType.and", "link" : "provingground\/scalahott\/BoolType$.html#and:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "not", "tail" : ": Func[Term, Term]", "member" : "provingground.scalahott.BoolType.not", "link" : "provingground\/scalahott\/BoolType$.html#not:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]", "kind" : "lazy val"}, {"label" : "boolrep", "tail" : ": SimpleRep[Term, Boolean]", "member" : "provingground.scalahott.BoolType.boolrep", "link" : "provingground\/scalahott\/BoolType$.html#boolrep:provingground.scalahott.ScalaRep.SimpleRep[provingground.HoTT.Term,Boolean]", "kind" : "lazy val"}, {"label" : "Bool", "tail" : "", "member" : "provingground.scalahott.BoolType.Bool", "link" : "provingground\/scalahott\/BoolType$.html#Bool", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/scalahott\/BoolType$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/scalahott\/BoolType$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/scalahott\/BoolType$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/scalahott\/BoolType$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/scalahott\/BoolType$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/scalahott\/BoolType$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/scalahott\/BoolType$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/BoolType$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/BoolType$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/BoolType$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/scalahott\/BoolType$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/scalahott\/BoolType$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/scalahott\/BoolType$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/scalahott\/BoolType$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/scalahott\/BoolType$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/scalahott\/BoolType$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/scalahott\/BoolType$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/scalahott\/BoolType$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/scalahott\/BoolType$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.scalahott.EnumFin", "shortDescription" : "", "object" : "provingground\/scalahott\/EnumFin$.html", "members_object" : [{"label" : "enumFin", "tail" : ": FuncLike[Term with Subs[Term], Term]", "member" : "provingground.scalahott.EnumFin.enumFin", "link" : "provingground\/scalahott\/EnumFin$.html#enumFin:provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]", "kind" : "val"}, {"label" : "enumFinFn", "tail" : "(n: Long): EnumTerm[Term]", "member" : "provingground.scalahott.EnumFin.enumFinFn", "link" : "provingground\/scalahott\/EnumFin$.html#enumFinFn(n:Long):provingground.scalahott.EnumType.EnumTerm[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "enumFinList", "tail" : "(n: Long): List[Term with Subs[Term]]", "member" : "provingground.scalahott.EnumFin.enumFinList", "link" : "provingground\/scalahott\/EnumFin$.html#enumFinList(n:Long):List[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/scalahott\/EnumFin$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/scalahott\/EnumFin$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/scalahott\/EnumFin$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/scalahott\/EnumFin$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/scalahott\/EnumFin$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/scalahott\/EnumFin$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/scalahott\/EnumFin$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/EnumFin$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/EnumFin$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/EnumFin$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/scalahott\/EnumFin$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/scalahott\/EnumFin$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/scalahott\/EnumFin$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/scalahott\/EnumFin$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/scalahott\/EnumFin$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/scalahott\/EnumFin$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/scalahott\/EnumFin$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/scalahott\/EnumFin$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/scalahott\/EnumFin$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.scalahott.EnumFuncs", "shortDescription" : "", "object" : "provingground\/scalahott\/EnumFuncs$.html", "members_object" : [{"label" : "enumSec", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Func[Term, Typ[Term]] with Subs[Func[Term, Typ[Term]]], Func[Term, Func[FuncLike[Term with Subs[Term], Term], Term]]]]", "member" : "provingground.scalahott.EnumFuncs.enumSec", "link" : "provingground\/scalahott\/EnumFuncs$.html#enumSec:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term],provingground.HoTT.Term]]]]", "kind" : "val"}, {"label" : "EnumSec", "tail" : "(dom: Typ[U], codoms: (U) ⇒ Typ[V])(su: ScalaUniv[U], sv: ScalaUniv[V]): Func[Term, Func[FuncLike[U with Subs[U], Term], Term]]", "member" : "provingground.scalahott.EnumFuncs.EnumSec", "link" : "provingground\/scalahott\/EnumFuncs$.html#EnumSec[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](dom:provingground.HoTT.Typ[U],codoms:U=>provingground.HoTT.Typ[V])(implicitsu:provingground.scalahott.ScalaUniv[U],implicitsv:provingground.scalahott.ScalaUniv[V]):provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.FuncLike[Uwithprovingground.HoTT.Subs[U],provingground.HoTT.Term],provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "allSec", "tail" : "(domenum: EnumTerm[U])(codomenums: (U) ⇒ EnumTerm[V])(sv: ScalaUniv[V]): EnumTerm[FuncLike[U, V]]", "member" : "provingground.scalahott.EnumFuncs.allSec", "link" : "provingground\/scalahott\/EnumFuncs$.html#allSec[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](domenum:provingground.scalahott.EnumType.EnumTerm[U])(codomenums:U=>provingground.scalahott.EnumType.EnumTerm[V])(implicitsv:provingground.scalahott.ScalaUniv[V]):provingground.scalahott.EnumType.EnumTerm[provingground.HoTT.FuncLike[U,V]]", "kind" : "def"}, {"label" : "enumFn", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Typ[Term] with Subs[Typ[Term]], Func[Term, Func[Term, Term]]]]", "member" : "provingground.scalahott.EnumFuncs.enumFn", "link" : "provingground\/scalahott\/EnumFuncs$.html#enumFn:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]]", "kind" : "val"}, {"label" : "EnumFunc", "tail" : "(dom: Typ[U], codom: Typ[V]): Func[Term, Func[Term, Term]]", "member" : "provingground.scalahott.EnumFuncs.EnumFunc", "link" : "provingground\/scalahott\/EnumFuncs$.html#EnumFunc[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](dom:provingground.HoTT.Typ[U],codom:provingground.HoTT.Typ[V]):provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "allFunc", "tail" : "(domenum: EnumTerm[U])(codomenum: EnumTerm[V]): EnumTerm[Func[U, V]]", "member" : "provingground.scalahott.EnumFuncs.allFunc", "link" : "provingground\/scalahott\/EnumFuncs$.html#allFunc[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](domenum:provingground.scalahott.EnumType.EnumTerm[U])(codomenum:provingground.scalahott.EnumType.EnumTerm[V]):provingground.scalahott.EnumType.EnumTerm[provingground.HoTT.Func[U,V]]", "kind" : "def"}, {"label" : "allPairs", "tail" : "(dom: List[U], cods: (U) ⇒ Option[List[V]]): Option[List[AbsPair[U, V]]]", "member" : "provingground.scalahott.EnumFuncs.allPairs", "link" : "provingground\/scalahott\/EnumFuncs$.html#allPairs[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](dom:List[U],cods:U=>Option[List[V]]):Option[List[provingground.HoTT.AbsPair[U,V]]]", "kind" : "def"}, {"label" : "pairs", "tail" : "(first: List[U], second: List[V]): List[PairTerm[U, V]]", "member" : "provingground.scalahott.EnumFuncs.pairs", "link" : "provingground\/scalahott\/EnumFuncs$.html#pairs[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](first:List[U],second:List[V]):List[provingground.HoTT.PairTerm[U,V]]", "kind" : "def"}, {"label" : "allSecMapsOpt", "tail" : "(dom: List[U], codoms: (U) ⇒ Option[List[V]]): Option[List[Map[U, V]]]", "member" : "provingground.scalahott.EnumFuncs.allSecMapsOpt", "link" : "provingground\/scalahott\/EnumFuncs$.html#allSecMapsOpt[U,V](dom:List[U],codoms:U=>Option[List[V]]):Option[List[Map[U,V]]]", "kind" : "def"}, {"label" : "allSecMaps", "tail" : "(dom: List[U], codoms: (U) ⇒ List[V]): List[Map[U, V]]", "member" : "provingground.scalahott.EnumFuncs.allSecMaps", "link" : "provingground\/scalahott\/EnumFuncs$.html#allSecMaps[U,V](dom:List[U],codoms:U=>List[V]):List[Map[U,V]]", "kind" : "def"}, {"label" : "allMaps", "tail" : "(dom: List[U], codom: List[V]): List[Map[U, V]]", "member" : "provingground.scalahott.EnumFuncs.allMaps", "link" : "provingground\/scalahott\/EnumFuncs$.html#allMaps[U,V](dom:List[U],codom:List[V]):List[Map[U,V]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/scalahott\/EnumFuncs$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/scalahott\/EnumFuncs$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/scalahott\/EnumFuncs$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/scalahott\/EnumFuncs$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/scalahott\/EnumFuncs$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/scalahott\/EnumFuncs$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/scalahott\/EnumFuncs$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/EnumFuncs$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/EnumFuncs$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/EnumFuncs$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/scalahott\/EnumFuncs$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/scalahott\/EnumFuncs$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/scalahott\/EnumFuncs$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/scalahott\/EnumFuncs$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/scalahott\/EnumFuncs$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/scalahott\/EnumFuncs$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/scalahott\/EnumFuncs$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/scalahott\/EnumFuncs$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/scalahott\/EnumFuncs$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.scalahott.EnumType", "shortDescription" : "", "object" : "provingground\/scalahott\/EnumType$.html", "members_object" : [{"label" : "enumlist", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], Func[Term, Term]]", "member" : "provingground.scalahott.EnumType.enumlist", "link" : "provingground\/scalahott\/EnumType$.html#enumlist:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "enumList", "tail" : "(elemTyp: Typ[U]): Func[Term, Term]", "member" : "provingground.scalahott.EnumType.enumList", "link" : "provingground\/scalahott\/EnumType$.html#enumList[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](elemTyp:provingground.HoTT.Typ[U]):provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]", "kind" : "def"}, {"label" : "EnumRep", "tail" : "", "member" : "provingground.scalahott.EnumType.EnumRep", "link" : "provingground\/scalahott\/EnumType$.html#EnumRep[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsScalaRep[provingground.HoTT.Term,provingground.scalahott.EnumType.EnumTerm[U]]withProductwithSerializable", "kind" : "case class"}, {"label" : "EnumTerm", "tail" : "", "member" : "provingground.scalahott.EnumType.EnumTerm", "link" : "provingground\/scalahott\/EnumType$.html#EnumTerm[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsScalaRep.ConstTerm[List[U]]withProductwithSerializable", "kind" : "case class"}, {"label" : "EnumTyp", "tail" : "", "member" : "provingground.scalahott.EnumType.EnumTyp", "link" : "provingground\/scalahott\/EnumType$.html#EnumTyp[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsHoTT.SmallTypwithProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/scalahott\/EnumType$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/scalahott\/EnumType$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/scalahott\/EnumType$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/scalahott\/EnumType$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/scalahott\/EnumType$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/scalahott\/EnumType$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/scalahott\/EnumType$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/EnumType$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/EnumType$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/EnumType$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/scalahott\/EnumType$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/scalahott\/EnumType$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/scalahott\/EnumType$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/scalahott\/EnumType$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/scalahott\/EnumType$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/scalahott\/EnumType$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/scalahott\/EnumType$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/scalahott\/EnumType$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/scalahott\/EnumType$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.scalahott.FreeGroup", "shortDescription" : "", "object" : "provingground\/scalahott\/FreeGroup$.html", "members_object" : [{"label" : "Theorems", "tail" : "", "member" : "provingground.scalahott.SymbolicGroup.Theorems", "link" : "provingground\/scalahott\/SymbolicGroup.html#Theorems", "kind" : "object"}, {"label" : "mul", "tail" : "", "member" : "provingground.scalahott.SymbolicGroup.mul", "link" : "provingground\/scalahott\/SymbolicGroup.html#mul", "kind" : "object"}, {"label" : "MultTerm", "tail" : "", "member" : "provingground.scalahott.SymbolicGroup.MultTerm", "link" : "provingground\/scalahott\/SymbolicGroup.html#MultTermextendsHoTT.Func[SymbolicGroup.this.LocalTerm,SymbolicGroup.this.LocalTerm]withProductwithSerializable", "kind" : "case class"}, {"label" : "MultLiteral", "tail" : "", "member" : "provingground.scalahott.SymbolicGroup.MultLiteral", "link" : "provingground\/scalahott\/SymbolicGroup.html#MultLiteralextendsHoTT.Func[SymbolicGroup.this.LocalTerm,SymbolicGroup.this.LocalTerm]withProductwithSerializable", "kind" : "case class"}, {"label" : "inv", "tail" : "", "member" : "provingground.scalahott.SymbolicGroup.inv", "link" : "provingground\/scalahott\/SymbolicGroup.html#inv", "kind" : "object"}, {"label" : "Literal", "tail" : "", "member" : "provingground.scalahott.SymbolicGroup.Literal", "link" : "provingground\/scalahott\/SymbolicGroup.html#Literal", "kind" : "object"}, {"label" : "Comb", "tail" : "", "member" : "provingground.scalahott.SymbolicGroup.Comb", "link" : "provingground\/scalahott\/SymbolicGroup.html#Comb", "kind" : "object"}, {"label" : "Elem", "tail" : "", "member" : "provingground.HoTT.Typ.Elem", "link" : "provingground\/HoTT$$Typ.html#Elem", "kind" : "object"}, {"label" : "toString", "tail" : "(): String", "member" : "provingground.scalahott.FreeGroup.toString", "link" : "provingground\/scalahott\/FreeGroup$.html#toString():String", "kind" : "def"}, {"label" : "word", "tail" : "(s: String): LocalTerm with Subs[LocalTerm]", "member" : "provingground.scalahott.FreeGroup.word", "link" : "provingground\/scalahott\/FreeGroup$.html#word(s:String):provingground.scalahott.FreeGroup.LocalTermwithprovingground.HoTT.Subs[provingground.scalahott.FreeGroup.LocalTerm]", "kind" : "def"}, {"label" : "power", "tail" : ": Func[RepTerm[Word] with Subs[RepTerm[Word]], Func[NatRing.LocalTerm, RepTerm[Word]]]", "member" : "provingground.scalahott.SymbolicGroup.power", "link" : "provingground\/scalahott\/FreeGroup$.html#power:provingground.HoTT.Func[provingground.scalahott.RepTerm[A]withprovingground.HoTT.Subs[provingground.scalahott.RepTerm[A]],provingground.HoTT.Func[provingground.scalahott.NatRing.LocalTerm,provingground.scalahott.RepTerm[A]]]", "kind" : "val"}, {"label" : "rm", "tail" : ": Func[RepTerm[Word] with Subs[RepTerm[Word]], Func[RepTerm[Word] with Subs[RepTerm[Word]], LocalTerm]]", "member" : "provingground.scalahott.SymbolicGroup.rm", "link" : "provingground\/scalahott\/FreeGroup$.html#rm:provingground.HoTT.Func[provingground.scalahott.RepTerm[A]withprovingground.HoTT.Subs[provingground.scalahott.RepTerm[A]],provingground.HoTT.Func[provingground.scalahott.RepTerm[A]withprovingground.HoTT.Subs[provingground.scalahott.RepTerm[A]],SymbolicGroup.this.LocalTerm]]", "kind" : "val"}, {"label" : "lm", "tail" : ": Func[RepTerm[Word] with Subs[RepTerm[Word]], Func[RepTerm[Word] with Subs[RepTerm[Word]], LocalTerm]]", "member" : "provingground.scalahott.SymbolicGroup.lm", "link" : "provingground\/scalahott\/FreeGroup$.html#lm:provingground.HoTT.Func[provingground.scalahott.RepTerm[A]withprovingground.HoTT.Subs[provingground.scalahott.RepTerm[A]],provingground.HoTT.Func[provingground.scalahott.RepTerm[A]withprovingground.HoTT.Subs[provingground.scalahott.RepTerm[A]],SymbolicGroup.this.LocalTerm]]", "kind" : "val"}, {"label" : "h", "tail" : ": RepTerm[Word] with Subs[RepTerm[Word]]", "member" : "provingground.scalahott.SymbolicGroup.h", "link" : "provingground\/scalahott\/FreeGroup$.html#h:provingground.scalahott.RepTerm[A]withprovingground.HoTT.Subs[provingground.scalahott.RepTerm[A]]", "kind" : "val"}, {"label" : "g", "tail" : ": RepTerm[Word] with Subs[RepTerm[Word]]", "member" : "provingground.scalahott.SymbolicGroup.g", "link" : "provingground\/scalahott\/FreeGroup$.html#g:provingground.scalahott.RepTerm[A]withprovingground.HoTT.Subs[provingground.scalahott.RepTerm[A]]", "kind" : "val"}, {"label" : "groupStructure", "tail" : ": Group[LocalTerm]", "member" : "provingground.scalahott.SymbolicGroup.groupStructure", "link" : "provingground\/scalahott\/FreeGroup$.html#groupStructure:cats.kernel.Group[SymbolicGroup.this.LocalTerm]", "kind" : "implicit val"}, {"label" : "e", "tail" : ": RepTerm[Word]", "member" : "provingground.scalahott.SymbolicGroup.e", "link" : "provingground\/scalahott\/FreeGroup$.html#e:provingground.scalahott.RepTerm[A]", "kind" : "val"}, {"label" : "Op", "tail" : "", "member" : "provingground.scalahott.SymbolicGroup.Op", "link" : "provingground\/scalahott\/FreeGroup$.html#Op=provingground.HoTT.Func[SymbolicGroup.this.LocalTerm,provingground.HoTT.Func[SymbolicGroup.this.LocalTerm,SymbolicGroup.this.LocalTerm]]", "kind" : "type"}, {"label" : "LocalTerm", "tail" : "", "member" : "provingground.scalahott.SymbolicGroup.LocalTerm", "link" : "provingground\/scalahott\/FreeGroup$.html#LocalTerm=provingground.scalahott.RepTerm[A]", "kind" : "type"}, {"label" : "group", "tail" : ": Group[Word]", "member" : "provingground.scalahott.SymbolicGroup.group", "link" : "provingground\/scalahott\/FreeGroup$.html#group:cats.kernel.Group[A]", "kind" : "val"}, {"label" : "rep", "tail" : ": ScalaRep[RepTerm[Word], Word]", "member" : "provingground.scalahott.ScalaTyp.rep", "link" : "provingground\/scalahott\/FreeGroup$.html#rep:provingground.scalahott.ScalaRep[provingground.scalahott.RepTerm[A],A]", "kind" : "implicit val"}, {"label" : "subs", "tail" : "(x: Term, y: Term): Typ[RepTerm[Word]] with Subs[Typ[RepTerm[Word]]]", "member" : "provingground.scalahott.ScalaTyp.subs", "link" : "provingground\/scalahott\/FreeGroup$.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.HoTT.Typ[provingground.scalahott.RepTerm[A]]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.scalahott.RepTerm[A]]]", "kind" : "def"}, {"label" : "newobj", "tail" : "(): Nothing", "member" : "provingground.scalahott.ScalaTyp.newobj", "link" : "provingground\/scalahott\/FreeGroup$.html#newobj:Nothing", "kind" : "def"}, {"label" : "variable", "tail" : "(name: AnySym): RepTerm[Word]", "member" : "provingground.scalahott.ScalaTyp.variable", "link" : "provingground\/scalahott\/FreeGroup$.html#variable(name:provingground.HoTT.AnySym):provingground.scalahott.RepTerm[A]", "kind" : "def"}, {"label" : "typ", "tail" : ": ScalaTypUniv[Word]", "member" : "provingground.scalahott.ScalaTyp.typ", "link" : "provingground\/scalahott\/FreeGroup$.html#typ:provingground.scalahott.ScalaTypUniv[A]", "kind" : "val"}, {"label" : "Obj", "tail" : "", "member" : "provingground.scalahott.ScalaTyp.Obj", "link" : "provingground\/scalahott\/FreeGroup$.html#Obj=provingground.scalahott.RepTerm[A]", "kind" : "type"}, {"label" : "++", "tail" : "(those: V): SigmaTyp[UU, VV]", "member" : "provingground.HoTT.Typ.++", "link" : "provingground\/scalahott\/FreeGroup$.html#++[UU>:provingground.HoTT.Typ[U]<:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[UU],VV<:provingground.HoTT.Termwithprovingground.HoTT.Subs[VV],V<:provingground.HoTT.Typ[VV]withprovingground.HoTT.Subs[V]](those:V):provingground.HoTT.SigmaTyp[UU,VV]", "kind" : "def"}, {"label" : "||", "tail" : "(that: Typ[V]): PlusTyp[UU, V]", "member" : "provingground.HoTT.Typ.||", "link" : "provingground\/scalahott\/FreeGroup$.html#||[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](that:provingground.HoTT.Typ[V]):provingground.HoTT.PlusTyp[UU,V]", "kind" : "def"}, {"label" : "&&", "tail" : "(that: Typ[V]): ProdTyp[UU, V]", "member" : "provingground.HoTT.Typ.&&", "link" : "provingground\/scalahott\/FreeGroup$.html#&&[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](that:provingground.HoTT.Typ[V]):provingground.HoTT.ProdTyp[UU,V]", "kind" : "def"}, {"label" : "~>:", "tail" : "(variable: V): GenFuncTyp[V, UU]", "member" : "provingground.HoTT.Typ.~>:", "link" : "provingground\/scalahott\/FreeGroup$.html#~>:[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](variable:V):provingground.HoTT.GenFuncTyp[V,UU]", "kind" : "def"}, {"label" : "->:", "tail" : "(that: Typ[W]): FuncTyp[W, UU]", "member" : "provingground.HoTT.Typ.->:", "link" : "provingground\/scalahott\/FreeGroup$.html#->:[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU]](that:provingground.HoTT.Typ[W]):provingground.HoTT.FuncTyp[W,UU]", "kind" : "def"}, {"label" : "typedVar", "tail" : "(factory: NameFactory): TypedTerm[RepTerm[Word]]", "member" : "provingground.HoTT.Typ.typedVar", "link" : "provingground\/scalahott\/FreeGroup$.html#typedVar(implicitfactory:provingground.HoTT.NameFactory):provingground.HoTT.TypedTerm[U]", "kind" : "def"}, {"label" : "Var", "tail" : "(factory: NameFactory): RepTerm[Word] with Subs[RepTerm[Word]]", "member" : "provingground.HoTT.Typ.Var", "link" : "provingground\/scalahott\/FreeGroup$.html#Var(implicitfactory:provingground.HoTT.NameFactory):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "sym", "tail" : "(name: Name): RepTerm[Word] with Subs[RepTerm[Word]]", "member" : "provingground.HoTT.Typ.sym", "link" : "provingground\/scalahott\/FreeGroup$.html#sym(implicitname:sourcecode.Name):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "::", "tail" : "(name: String): RepTerm[Word] with Subs[RepTerm[Word]]", "member" : "provingground.HoTT.Typ.::", "link" : "provingground\/scalahott\/FreeGroup$.html#::(name:String):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "typedVar", "tail" : "(name: AnySym): TypedTerm[RepTerm[Word]]", "member" : "provingground.HoTT.Typ.typedVar", "link" : "provingground\/scalahott\/FreeGroup$.html#typedVar(name:provingground.HoTT.AnySym):provingground.HoTT.TypedTerm[U]", "kind" : "def"}, {"label" : "symbObj", "tail" : "(name: AnySym): RepTerm[Word] with Subs[RepTerm[Word]]", "member" : "provingground.HoTT.Typ.symbObj", "link" : "provingground\/scalahott\/FreeGroup$.html#symbObj(name:provingground.HoTT.AnySym):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "typlevel", "tail" : ": Int", "member" : "provingground.HoTT.Typ.typlevel", "link" : "provingground\/scalahott\/FreeGroup$.html#typlevel:Int", "kind" : "lazy val"}, {"label" : "typed", "tail" : ": TypedTerm[Typ[Term]]", "member" : "provingground.HoTT.Typ.typed", "link" : "provingground\/scalahott\/FreeGroup$.html#typed:provingground.HoTT.TypedTerm[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "!:", "tail" : "(term: Term): RepTerm[Word]", "member" : "provingground.HoTT.Typ.!:", "link" : "provingground\/scalahott\/FreeGroup$.html#!:(term:provingground.HoTT.Term):U", "kind" : "def"}, {"label" : "obj", "tail" : "(): RepTerm[Word]", "member" : "provingground.HoTT.Typ.obj", "link" : "provingground\/scalahott\/FreeGroup$.html#obj:U", "kind" : "def"}, {"label" : "usesVar", "tail" : "(t: Term): Boolean", "member" : "provingground.HoTT.Term.usesVar", "link" : "provingground\/scalahott\/FreeGroup$.html#usesVar(t:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "indepOf", "tail" : "(that: Term): Boolean", "member" : "provingground.HoTT.Term.indepOf", "link" : "provingground\/scalahott\/FreeGroup$.html#indepOf(that:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "dependsOn", "tail" : "(that: Term): Boolean", "member" : "provingground.HoTT.Term.dependsOn", "link" : "provingground\/scalahott\/FreeGroup$.html#dependsOn(that:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "replace", "tail" : "(x: Term, y: Term): Typ[RepTerm[Word]] with Subs[Typ[RepTerm[Word]]]", "member" : "provingground.HoTT.Subs.replace", "link" : "provingground\/scalahott\/FreeGroup$.html#replace(x:provingground.HoTT.Term,y:provingground.HoTT.Term):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/scalahott\/FreeGroup$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/scalahott\/FreeGroup$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/scalahott\/FreeGroup$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/scalahott\/FreeGroup$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/scalahott\/FreeGroup$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/scalahott\/FreeGroup$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/scalahott\/FreeGroup$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/FreeGroup$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/FreeGroup$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/FreeGroup$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/scalahott\/FreeGroup$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/scalahott\/FreeGroup$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/scalahott\/FreeGroup$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/scalahott\/FreeGroup$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/scalahott\/FreeGroup$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/scalahott\/FreeGroup$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/scalahott\/FreeGroup$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/scalahott\/FreeGroup$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.scalahott.FunctionFeedback", "shortDescription" : "", "object" : "provingground\/scalahott\/FunctionFeedback$.html", "members_object" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/scalahott\/FunctionFeedback$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/scalahott\/FunctionFeedback$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/scalahott\/FunctionFeedback$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/scalahott\/FunctionFeedback$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/scalahott\/FunctionFeedback$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/scalahott\/FunctionFeedback$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/scalahott\/FunctionFeedback$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/FunctionFeedback$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/FunctionFeedback$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/FunctionFeedback$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/scalahott\/FunctionFeedback$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/scalahott\/FunctionFeedback$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/scalahott\/FunctionFeedback$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/scalahott\/FunctionFeedback$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/scalahott\/FunctionFeedback$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/scalahott\/FunctionFeedback$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/scalahott\/FunctionFeedback$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/scalahott\/FunctionFeedback$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/scalahott\/FunctionFeedback$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.scalahott.IndexedVecTyp", "shortDescription" : "", "object" : "provingground\/scalahott\/IndexedVecTyp$.html", "members_object" : [{"label" : "n", "tail" : ": RepTerm[SafeLong] with Subs[RepTerm[SafeLong]]", "member" : "provingground.scalahott.IndexedVecTyp.n", "link" : "provingground\/scalahott\/IndexedVecTyp$.html#n:provingground.scalahott.RepTerm[spire.math.SafeLong]withprovingground.HoTT.Subs[provingground.scalahott.RepTerm[spire.math.SafeLong]]", "kind" : "val"}, {"label" : "vecRep", "tail" : "(baserep: ScalaPolyRep[U, X]): ScalaPolyRep[RepTerm[Vector[X]], Vector[X]]", "member" : "provingground.scalahott.IndexedVecTyp.vecRep", "link" : "provingground\/scalahott\/IndexedVecTyp$.html#vecRep[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],X](implicitbaserep:provingground.scalahott.ScalaPolyRep[U,X]):provingground.scalahott.ScalaPolyRep[provingground.scalahott.RepTerm[Vector[X]],Vector[X]]", "kind" : "implicit def"}, {"label" : "VecPolyRep", "tail" : "", "member" : "provingground.scalahott.IndexedVecTyp.VecPolyRep", "link" : "provingground\/scalahott\/IndexedVecTyp$.html#VecPolyRep[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],X]extendsScalaPolyRep[provingground.scalahott.RepTerm[Vector[X]],Vector[X]]withProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/scalahott\/IndexedVecTyp$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/scalahott\/IndexedVecTyp$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/scalahott\/IndexedVecTyp$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/scalahott\/IndexedVecTyp$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/scalahott\/IndexedVecTyp$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/scalahott\/IndexedVecTyp$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/scalahott\/IndexedVecTyp$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/IndexedVecTyp$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/IndexedVecTyp$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/IndexedVecTyp$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/scalahott\/IndexedVecTyp$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/scalahott\/IndexedVecTyp$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/scalahott\/IndexedVecTyp$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/scalahott\/IndexedVecTyp$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/scalahott\/IndexedVecTyp$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/scalahott\/IndexedVecTyp$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/scalahott\/IndexedVecTyp$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/scalahott\/IndexedVecTyp$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/scalahott\/IndexedVecTyp$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "Elem", "tail" : "", "member" : "provingground.HoTT.Typ.Elem", "link" : "provingground\/HoTT$$Typ.html#Elem", "kind" : "object"}, {"label" : "subs", "tail" : "(x: Term, y: Term): Typ[RepTerm[Vector[X]]] with Subs[Typ[RepTerm[Vector[X]]]]", "member" : "provingground.scalahott.IndexedVecTyp.subs", "link" : "provingground\/scalahott\/IndexedVecTyp.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.HoTT.Typ[provingground.scalahott.RepTerm[Vector[X]]]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.scalahott.RepTerm[Vector[X]]]]", "kind" : "def"}, {"label" : "newobj", "tail" : "(): Nothing", "member" : "provingground.scalahott.IndexedVecTyp.newobj", "link" : "provingground\/scalahott\/IndexedVecTyp.html#newobj:Nothing", "kind" : "def"}, {"label" : "variable", "tail" : "(name: AnySym): RepTerm[Vector[X]]", "member" : "provingground.scalahott.IndexedVecTyp.variable", "link" : "provingground\/scalahott\/IndexedVecTyp.html#variable(name:provingground.HoTT.AnySym):provingground.scalahott.RepTerm[Vector[X]]", "kind" : "def"}, {"label" : "typ", "tail" : ": Universe", "member" : "provingground.scalahott.IndexedVecTyp.typ", "link" : "provingground\/scalahott\/IndexedVecTyp.html#typ:provingground.HoTT.Universe", "kind" : "val"}, {"label" : "Obj", "tail" : "", "member" : "provingground.scalahott.IndexedVecTyp.Obj", "link" : "provingground\/scalahott\/IndexedVecTyp.html#Obj=provingground.scalahott.RepTerm[Vector[X]]", "kind" : "type"}, {"member" : "provingground.scalahott.IndexedVecTyp#<init>", "error" : "unsupported entity"}, {"label" : "dim", "tail" : ": SafeLong", "member" : "provingground.scalahott.IndexedVecTyp.dim", "link" : "provingground\/scalahott\/IndexedVecTyp.html#dim:spire.math.SafeLong", "kind" : "val"}, {"label" : "basetyp", "tail" : ": Typ[U]", "member" : "provingground.scalahott.IndexedVecTyp.basetyp", "link" : "provingground\/scalahott\/IndexedVecTyp.html#basetyp:provingground.HoTT.Typ[U]", "kind" : "val"}, {"label" : "++", "tail" : "(those: V): SigmaTyp[UU, VV]", "member" : "provingground.HoTT.Typ.++", "link" : "provingground\/scalahott\/IndexedVecTyp.html#++[UU>:provingground.HoTT.Typ[U]<:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[UU],VV<:provingground.HoTT.Termwithprovingground.HoTT.Subs[VV],V<:provingground.HoTT.Typ[VV]withprovingground.HoTT.Subs[V]](those:V):provingground.HoTT.SigmaTyp[UU,VV]", "kind" : "def"}, {"label" : "||", "tail" : "(that: Typ[V]): PlusTyp[UU, V]", "member" : "provingground.HoTT.Typ.||", "link" : "provingground\/scalahott\/IndexedVecTyp.html#||[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](that:provingground.HoTT.Typ[V]):provingground.HoTT.PlusTyp[UU,V]", "kind" : "def"}, {"label" : "&&", "tail" : "(that: Typ[V]): ProdTyp[UU, V]", "member" : "provingground.HoTT.Typ.&&", "link" : "provingground\/scalahott\/IndexedVecTyp.html#&&[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](that:provingground.HoTT.Typ[V]):provingground.HoTT.ProdTyp[UU,V]", "kind" : "def"}, {"label" : "~>:", "tail" : "(variable: V): GenFuncTyp[V, UU]", "member" : "provingground.HoTT.Typ.~>:", "link" : "provingground\/scalahott\/IndexedVecTyp.html#~>:[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](variable:V):provingground.HoTT.GenFuncTyp[V,UU]", "kind" : "def"}, {"label" : "->:", "tail" : "(that: Typ[W]): FuncTyp[W, UU]", "member" : "provingground.HoTT.Typ.->:", "link" : "provingground\/scalahott\/IndexedVecTyp.html#->:[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU]](that:provingground.HoTT.Typ[W]):provingground.HoTT.FuncTyp[W,UU]", "kind" : "def"}, {"label" : "typedVar", "tail" : "(factory: NameFactory): TypedTerm[RepTerm[Vector[X]]]", "member" : "provingground.HoTT.Typ.typedVar", "link" : "provingground\/scalahott\/IndexedVecTyp.html#typedVar(implicitfactory:provingground.HoTT.NameFactory):provingground.HoTT.TypedTerm[U]", "kind" : "def"}, {"label" : "Var", "tail" : "(factory: NameFactory): RepTerm[Vector[X]] with Subs[RepTerm[Vector[X]]]", "member" : "provingground.HoTT.Typ.Var", "link" : "provingground\/scalahott\/IndexedVecTyp.html#Var(implicitfactory:provingground.HoTT.NameFactory):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "sym", "tail" : "(name: Name): RepTerm[Vector[X]] with Subs[RepTerm[Vector[X]]]", "member" : "provingground.HoTT.Typ.sym", "link" : "provingground\/scalahott\/IndexedVecTyp.html#sym(implicitname:sourcecode.Name):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "::", "tail" : "(name: String): RepTerm[Vector[X]] with Subs[RepTerm[Vector[X]]]", "member" : "provingground.HoTT.Typ.::", "link" : "provingground\/scalahott\/IndexedVecTyp.html#::(name:String):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "typedVar", "tail" : "(name: AnySym): TypedTerm[RepTerm[Vector[X]]]", "member" : "provingground.HoTT.Typ.typedVar", "link" : "provingground\/scalahott\/IndexedVecTyp.html#typedVar(name:provingground.HoTT.AnySym):provingground.HoTT.TypedTerm[U]", "kind" : "def"}, {"label" : "symbObj", "tail" : "(name: AnySym): RepTerm[Vector[X]] with Subs[RepTerm[Vector[X]]]", "member" : "provingground.HoTT.Typ.symbObj", "link" : "provingground\/scalahott\/IndexedVecTyp.html#symbObj(name:provingground.HoTT.AnySym):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "typlevel", "tail" : ": Int", "member" : "provingground.HoTT.Typ.typlevel", "link" : "provingground\/scalahott\/IndexedVecTyp.html#typlevel:Int", "kind" : "lazy val"}, {"label" : "typed", "tail" : ": TypedTerm[Typ[Term]]", "member" : "provingground.HoTT.Typ.typed", "link" : "provingground\/scalahott\/IndexedVecTyp.html#typed:provingground.HoTT.TypedTerm[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "!:", "tail" : "(term: Term): RepTerm[Vector[X]]", "member" : "provingground.HoTT.Typ.!:", "link" : "provingground\/scalahott\/IndexedVecTyp.html#!:(term:provingground.HoTT.Term):U", "kind" : "def"}, {"label" : "obj", "tail" : "(): RepTerm[Vector[X]]", "member" : "provingground.HoTT.Typ.obj", "link" : "provingground\/scalahott\/IndexedVecTyp.html#obj:U", "kind" : "def"}, {"label" : "usesVar", "tail" : "(t: Term): Boolean", "member" : "provingground.HoTT.Term.usesVar", "link" : "provingground\/scalahott\/IndexedVecTyp.html#usesVar(t:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "indepOf", "tail" : "(that: Term): Boolean", "member" : "provingground.HoTT.Term.indepOf", "link" : "provingground\/scalahott\/IndexedVecTyp.html#indepOf(that:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "dependsOn", "tail" : "(that: Term): Boolean", "member" : "provingground.HoTT.Term.dependsOn", "link" : "provingground\/scalahott\/IndexedVecTyp.html#dependsOn(that:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "replace", "tail" : "(x: Term, y: Term): Typ[RepTerm[Vector[X]]] with Subs[Typ[RepTerm[Vector[X]]]]", "member" : "provingground.HoTT.Subs.replace", "link" : "provingground\/scalahott\/IndexedVecTyp.html#replace(x:provingground.HoTT.Term,y:provingground.HoTT.Term):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/scalahott\/IndexedVecTyp.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/scalahott\/IndexedVecTyp.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/scalahott\/IndexedVecTyp.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/scalahott\/IndexedVecTyp.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/scalahott\/IndexedVecTyp.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/scalahott\/IndexedVecTyp.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/scalahott\/IndexedVecTyp.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/IndexedVecTyp.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/IndexedVecTyp.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/IndexedVecTyp.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/scalahott\/IndexedVecTyp.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/scalahott\/IndexedVecTyp.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/scalahott\/IndexedVecTyp.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/scalahott\/IndexedVecTyp.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/scalahott\/IndexedVecTyp.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/scalahott\/IndexedVecTyp.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/scalahott\/IndexedVecTyp.html", "kind" : "case class"}, {"name" : "provingground.scalahott.InducPairs", "shortDescription" : "Recursion and induction for (dependent) pairs.", "object" : "provingground\/scalahott\/InducPairs$.html", "members_object" : [{"label" : "InducSigma", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Func[Term, Typ[Term]] with Subs[Func[Term, Typ[Term]]], FuncLike[Func[Term, Func[Term, Typ[Term]]] with Subs[Func[Term, Func[Term, Typ[Term]]]], FuncLike[FuncLike[Term, FuncLike[Term, Term]] with Subs[FuncLike[Term, FuncLike[Term, Term]]], FuncLike[DepPair[Term, Term], Term]]]]]", "member" : "provingground.scalahott.InducPairs.InducSigma", "link" : "provingground\/scalahott\/InducPairs$.html#InducSigma:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]],provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]]],provingground.HoTT.FuncLike[provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term]]],provingground.HoTT.FuncLike[provingground.HoTT.DepPair[provingground.HoTT.Term,provingground.HoTT.Term],provingground.HoTT.Term]]]]]", "kind" : "val"}, {"label" : "hDep", "tail" : ": FuncLike[Term, FuncLike[Term, Term]] with Subs[FuncLike[Term, FuncLike[Term, Term]]]", "member" : "provingground.scalahott.InducPairs.hDep", "link" : "provingground\/scalahott\/InducPairs$.html#hDep:provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "toCsDep", "tail" : ": GenFuncTyp[Term, FuncLike[Term, Term]]", "member" : "provingground.scalahott.InducPairs.toCsDep", "link" : "provingground\/scalahott\/InducPairs$.html#toCsDep:provingground.HoTT.GenFuncTyp[provingground.HoTT.Term,provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "inducPair", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Func[Term, Func[Term, Typ[Term]]] with Subs[Func[Term, Func[Term, Typ[Term]]]], FuncLike[FuncLike[Term, FuncLike[Term, Term]] with Subs[FuncLike[Term, FuncLike[Term, Term]]], FuncLike[PairTerm[Term with Subs[Term], Term with Subs[Term]], Term]]]]]", "member" : "provingground.scalahott.InducPairs.inducPair", "link" : "provingground\/scalahott\/InducPairs$.html#inducPair:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]]],provingground.HoTT.FuncLike[provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term]]],provingground.HoTT.FuncLike[provingground.HoTT.PairTerm[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]],provingground.HoTT.Term]]]]]", "kind" : "val"}, {"label" : "h", "tail" : ": FuncLike[Term, FuncLike[Term, Term]] with Subs[FuncLike[Term, FuncLike[Term, Term]]]", "member" : "provingground.scalahott.InducPairs.h", "link" : "provingground\/scalahott\/InducPairs$.html#h:provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "toCs", "tail" : ": GenFuncTyp[Term, FuncLike[Term, Term]]", "member" : "provingground.scalahott.InducPairs.toCs", "link" : "provingground\/scalahott\/InducPairs$.html#toCs:provingground.HoTT.GenFuncTyp[provingground.HoTT.Term,provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "Cs", "tail" : ": Func[Term, Func[Term, Typ[Term]]] with Subs[Func[Term, Func[Term, Typ[Term]]]]", "member" : "provingground.scalahott.InducPairs.Cs", "link" : "provingground\/scalahott\/InducPairs$.html#Cs:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]]]", "kind" : "val"}, {"label" : "recSigma", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[FuncLike[Term with Subs[Term], Func[Term, Term]] with Subs[FuncLike[Term with Subs[Term], Func[Term, Term]]], FuncLike[DepPair[Term, Term], Term]]]]]", "member" : "provingground.scalahott.InducPairs.recSigma", "link" : "provingground\/scalahott\/InducPairs$.html#recSigma:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]],provingground.HoTT.FuncLike[provingground.HoTT.DepPair[provingground.HoTT.Term,provingground.HoTT.Term],provingground.HoTT.Term]]]]]", "kind" : "val"}, {"label" : "abDep", "tail" : ": DepPair[Term, Term]", "member" : "provingground.scalahott.InducPairs.abDep", "link" : "provingground\/scalahott\/InducPairs$.html#abDep:provingground.HoTT.DepPair[provingground.HoTT.Term,provingground.HoTT.Term]", "kind" : "val"}, {"label" : "g", "tail" : ": FuncLike[Term with Subs[Term], Func[Term, Term]] with Subs[FuncLike[Term with Subs[Term], Func[Term, Term]]]", "member" : "provingground.scalahott.InducPairs.g", "link" : "provingground\/scalahott\/InducPairs$.html#g:provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "toC", "tail" : ": GenFuncTyp[Term with Subs[Term], Func[Term, Term]]", "member" : "provingground.scalahott.InducPairs.toC", "link" : "provingground\/scalahott\/InducPairs$.html#toC:provingground.HoTT.GenFuncTyp[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "bs", "tail" : ": FuncLike[Term, Term] with Subs[FuncLike[Term, Term]]", "member" : "provingground.scalahott.InducPairs.bs", "link" : "provingground\/scalahott\/InducPairs$.html#bs:provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "Btype", "tail" : ": PiDefn[Term, Term]", "member" : "provingground.scalahott.InducPairs.Btype", "link" : "provingground\/scalahott\/InducPairs$.html#Btype:provingground.HoTT.PiDefn[provingground.HoTT.Term,provingground.HoTT.Term]", "kind" : "val"}, {"label" : "Bs", "tail" : ": Func[Term, Typ[Term]] with Subs[Func[Term, Typ[Term]]]", "member" : "provingground.scalahott.InducPairs.Bs", "link" : "provingground\/scalahott\/InducPairs$.html#Bs:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "recPair", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Func[Term, Func[Term, Term]] with Subs[Func[Term, Func[Term, Term]]], FuncLike[PairTerm[Term with Subs[Term], Term with Subs[Term]], Term]]]]]", "member" : "provingground.scalahott.InducPairs.recPair", "link" : "provingground\/scalahott\/InducPairs$.html#recPair:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]],provingground.HoTT.FuncLike[provingground.HoTT.PairTerm[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]],provingground.HoTT.Term]]]]]", "kind" : "val"}, {"label" : "ab", "tail" : ": PairTerm[Term with Subs[Term], Term with Subs[Term]]", "member" : "provingground.scalahott.InducPairs.ab", "link" : "provingground\/scalahott\/InducPairs$.html#ab:provingground.HoTT.PairTerm[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "b", "tail" : ": Term with Subs[Term]", "member" : "provingground.scalahott.InducPairs.b", "link" : "provingground\/scalahott\/InducPairs$.html#b:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "a", "tail" : ": Term with Subs[Term]", "member" : "provingground.scalahott.InducPairs.a", "link" : "provingground\/scalahott\/InducPairs$.html#a:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "f", "tail" : ": Func[Term, Func[Term, Term]] with Subs[Func[Term, Func[Term, Term]]]", "member" : "provingground.scalahott.InducPairs.f", "link" : "provingground\/scalahott\/InducPairs$.html#f:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "C", "tail" : ": Typ[Term] with Subs[Typ[Term]]", "member" : "provingground.scalahott.InducPairs.C", "link" : "provingground\/scalahott\/InducPairs$.html#C:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "B", "tail" : ": Typ[Term] with Subs[Typ[Term]]", "member" : "provingground.scalahott.InducPairs.B", "link" : "provingground\/scalahott\/InducPairs$.html#B:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "A", "tail" : ": Typ[Term] with Subs[Typ[Term]]", "member" : "provingground.scalahott.InducPairs.A", "link" : "provingground\/scalahott\/InducPairs$.html#A:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/scalahott\/InducPairs$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/scalahott\/InducPairs$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/scalahott\/InducPairs$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/scalahott\/InducPairs$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/scalahott\/InducPairs$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/scalahott\/InducPairs$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/scalahott\/InducPairs$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/InducPairs$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/InducPairs$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/InducPairs$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/scalahott\/InducPairs$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/scalahott\/InducPairs$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/scalahott\/InducPairs$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/scalahott\/InducPairs$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/scalahott\/InducPairs$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/scalahott\/InducPairs$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/scalahott\/InducPairs$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/scalahott\/InducPairs$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/scalahott\/InducPairs$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.scalahott.IntTypes", "shortDescription" : "", "object" : "provingground\/scalahott\/IntTypes$.html", "members_object" : [{"label" : "kmodn", "tail" : ": Func[Term, FuncLike[Term with Subs[Term], Term]]", "member" : "provingground.scalahott.IntTypes.kmodn", "link" : "provingground\/scalahott\/IntTypes$.html#kmodn:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "NFinRep", "tail" : ": FuncRep[Term, Long, FuncLike[Term with Subs[Term], Term], (Long) ⇒ Term]", "member" : "provingground.scalahott.IntTypes.NFinRep", "link" : "provingground\/scalahott\/IntTypes$.html#NFinRep:provingground.scalahott.ScalaRep.FuncRep[provingground.HoTT.Term,Long,provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term],Long=>provingground.HoTT.Term]", "kind" : "val"}, {"label" : "FinRep", "tail" : ": DepFuncRep[Term with Subs[Term], Long, Term, Term]", "member" : "provingground.scalahott.IntTypes.FinRep", "link" : "provingground\/scalahott\/IntTypes$.html#FinRep:provingground.scalahott.ScalaRep.DepFuncRep[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],Long,provingground.HoTT.Term,provingground.HoTT.Term]", "kind" : "val"}, {"label" : "finrep", "tail" : ": RepSection[Long, Term, Term]", "member" : "provingground.scalahott.IntTypes.finrep", "link" : "provingground\/scalahott\/IntTypes$.html#finrep:provingground.scalahott.ScalaRep.RepSection[Long,provingground.HoTT.Term,provingground.HoTT.Term]", "kind" : "val"}, {"label" : "SimpleFinRep", "tail" : ": DepFuncRep[Term, Long, Term, Term]", "member" : "provingground.scalahott.IntTypes.SimpleFinRep", "link" : "provingground\/scalahott\/IntTypes$.html#SimpleFinRep:provingground.scalahott.ScalaRep.DepFuncRep[provingground.HoTT.Term,Long,provingground.HoTT.Term,provingground.HoTT.Term]", "kind" : "val"}, {"label" : "FinFn", "tail" : ": Func[Term, Typ[Term]]", "member" : "provingground.scalahott.IntTypes.FinFn", "link" : "provingground\/scalahott\/IntTypes$.html#FinFn:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "Nfmly", "tail" : ": FuncRep[Term, Long, Typ[Term], Typ[Term]]", "member" : "provingground.scalahott.IntTypes.Nfmly", "link" : "provingground\/scalahott\/IntTypes$.html#Nfmly:provingground.scalahott.ScalaRep.FuncRep[provingground.HoTT.Term,Long,provingground.HoTT.Typ[provingground.HoTT.Term],provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "Fin", "tail" : "", "member" : "provingground.scalahott.IntTypes.Fin", "link" : "provingground\/scalahott\/IntTypes$.html#FinextendsIntTypes.IntTypwithProductwithSerializable", "kind" : "case class"}, {"label" : "induction", "tail" : "(us: Func[Term, Typ[U]]): Func[U, Func[FuncLike[Term with Subs[Term], Term], FuncLike[Term, U]]]", "member" : "provingground.scalahott.IntTypes.induction", "link" : "provingground\/scalahott\/IntTypes$.html#induction[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](us:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[U]]):provingground.HoTT.Func[U,provingground.HoTT.Func[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Term,U]]]", "kind" : "def"}, {"label" : "recursion", "tail" : "(u: Typ[U]): Func[U, Func[Func[Term, Func[U, U]], Func[Term, U]]]", "member" : "provingground.scalahott.IntTypes.recursion", "link" : "provingground\/scalahott\/IntTypes$.html#recursion[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](u:provingground.HoTT.Typ[U]):provingground.HoTT.Func[U,provingground.HoTT.Func[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[U,U]],provingground.HoTT.Func[provingground.HoTT.Term,U]]]", "kind" : "def"}, {"label" : "induccurry", "tail" : "(): (U) ⇒ ((Long) ⇒ (U) ⇒ U) ⇒ (Long) ⇒ U", "member" : "provingground.scalahott.IntTypes.induccurry", "link" : "provingground\/scalahott\/IntTypes$.html#induccurry[U<:provingground.HoTT.Term]:U=>((Long=>(U=>U))=>(Long=>U))", "kind" : "def"}, {"label" : "inducN", "tail" : ": FuncLike[Func[Term, Typ[Term]] with Subs[Func[Term, Typ[Term]]], Func[Term with Subs[Term], Func[FuncLike[Term with Subs[Term], Func[Term, Term]] with Subs[FuncLike[Term with Subs[Term], Func[Term, Term]]], FuncLike[Term, Term]]]]", "member" : "provingground.scalahott.IntTypes.inducN", "link" : "provingground\/scalahott\/IntTypes$.html#inducN:provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]],provingground.HoTT.Func[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]],provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term]]]]", "kind" : "val"}, {"label" : "recN", "tail" : ": LambdaTerm[Typ[Term] with Subs[Typ[Term]], LambdaFixed[Term with Subs[Term], LambdaFixed[Func[Term, Func[Term, Term]] with Subs[Func[Term, Func[Term, Term]]], Func[Term, Term]]]]", "member" : "provingground.scalahott.IntTypes.recN", "link" : "provingground\/scalahott\/IntTypes$.html#recN:provingground.HoTT.LambdaTerm[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.LambdaFixed[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.LambdaFixed[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]]", "kind" : "val"}, {"label" : "inducFn", "tail" : "(f0: U, g: (Long) ⇒ (U) ⇒ U, n: Long, thenApply: (U) ⇒ U): U", "member" : "provingground.scalahott.IntTypes.inducFn", "link" : "provingground\/scalahott\/IntTypes$.html#inducFn[U<:provingground.HoTT.Term](f0:U,g:Long=>(U=>U),n:Long,thenApply:U=>U):U", "kind" : "def"}, {"label" : "Z", "tail" : "", "member" : "provingground.scalahott.IntTypes.Z", "link" : "provingground\/scalahott\/IntTypes$.html#Z", "kind" : "object"}, {"label" : "N", "tail" : "", "member" : "provingground.scalahott.IntTypes.N", "link" : "provingground\/scalahott\/IntTypes$.html#N", "kind" : "object"}, {"label" : "IntTyp", "tail" : "", "member" : "provingground.scalahott.IntTypes.IntTyp", "link" : "provingground\/scalahott\/IntTypes$.html#IntTypextendsHoTT.SmallTyp", "kind" : "trait"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/scalahott\/IntTypes$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/scalahott\/IntTypes$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/scalahott\/IntTypes$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/scalahott\/IntTypes$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/scalahott\/IntTypes$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/scalahott\/IntTypes$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/scalahott\/IntTypes$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/IntTypes$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/IntTypes$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/IntTypes$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/scalahott\/IntTypes$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/scalahott\/IntTypes$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/scalahott\/IntTypes$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/scalahott\/IntTypes$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/scalahott\/IntTypes$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/scalahott\/IntTypes$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/scalahott\/IntTypes$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/scalahott\/IntTypes$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/scalahott\/IntTypes$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.scalahott.IntVector", "shortDescription" : "", "object" : "provingground\/scalahott\/IntVector$.html", "members_object" : [{"label" : "Vec", "tail" : ": ScalaPolyTerm[FuncLike[RepTerm[Long], Typ[Term]], (Long) ⇒ Typ[Term]]", "member" : "provingground.scalahott.IntVector.Vec", "link" : "provingground\/scalahott\/IntVector$.html#Vec:provingground.scalahott.ScalaPolyRep.ScalaPolyTerm[provingground.HoTT.FuncLike[provingground.scalahott.RepTerm[Long],provingground.HoTT.Typ[provingground.HoTT.Term]],Long=>provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "IntVecRep", "tail" : "", "member" : "provingground.scalahott.IntVector.IntVecRep", "link" : "provingground\/scalahott\/IntVector$.html#IntVecRep", "kind" : "implicit object"}, {"label" : "u", "tail" : ": ScalaRep[Typ[Term], Typ[Term]]", "member" : "provingground.scalahott.IntVector.u", "link" : "provingground\/scalahott\/IntVector$.html#u:provingground.scalahott.ScalaRep[provingground.HoTT.Typ[provingground.HoTT.Term],provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/scalahott\/IntVector$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/scalahott\/IntVector$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/scalahott\/IntVector$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/scalahott\/IntVector$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/scalahott\/IntVector$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/scalahott\/IntVector$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/scalahott\/IntVector$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/IntVector$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/IntVector$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/IntVector$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/scalahott\/IntVector$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/scalahott\/IntVector$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/scalahott\/IntVector$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/scalahott\/IntVector$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/scalahott\/IntVector$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/scalahott\/IntVector$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/scalahott\/IntVector$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/scalahott\/IntVector$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/scalahott\/IntVector$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "Elem", "tail" : "", "member" : "provingground.HoTT.Typ.Elem", "link" : "provingground\/HoTT$$Typ.html#Elem", "kind" : "object"}, {"member" : "provingground.scalahott.IntVector#<init>", "error" : "unsupported entity"}, {"label" : "dim", "tail" : ": Int", "member" : "provingground.scalahott.IntVector.dim", "link" : "provingground\/scalahott\/IntVector.html#dim:Int", "kind" : "val"}, {"label" : "rep", "tail" : ": ScalaRep[RepTerm[Vector[Int]], Vector[Int]]", "member" : "provingground.scalahott.ScalaTyp.rep", "link" : "provingground\/scalahott\/IntVector.html#rep:provingground.scalahott.ScalaRep[provingground.scalahott.RepTerm[A],A]", "kind" : "implicit val"}, {"label" : "subs", "tail" : "(x: Term, y: Term): Typ[RepTerm[Vector[Int]]] with Subs[Typ[RepTerm[Vector[Int]]]]", "member" : "provingground.scalahott.ScalaTyp.subs", "link" : "provingground\/scalahott\/IntVector.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.HoTT.Typ[provingground.scalahott.RepTerm[A]]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.scalahott.RepTerm[A]]]", "kind" : "def"}, {"label" : "newobj", "tail" : "(): Nothing", "member" : "provingground.scalahott.ScalaTyp.newobj", "link" : "provingground\/scalahott\/IntVector.html#newobj:Nothing", "kind" : "def"}, {"label" : "variable", "tail" : "(name: AnySym): RepTerm[Vector[Int]]", "member" : "provingground.scalahott.ScalaTyp.variable", "link" : "provingground\/scalahott\/IntVector.html#variable(name:provingground.HoTT.AnySym):provingground.scalahott.RepTerm[A]", "kind" : "def"}, {"label" : "typ", "tail" : ": ScalaTypUniv[Vector[Int]]", "member" : "provingground.scalahott.ScalaTyp.typ", "link" : "provingground\/scalahott\/IntVector.html#typ:provingground.scalahott.ScalaTypUniv[A]", "kind" : "val"}, {"label" : "Obj", "tail" : "", "member" : "provingground.scalahott.ScalaTyp.Obj", "link" : "provingground\/scalahott\/IntVector.html#Obj=provingground.scalahott.RepTerm[A]", "kind" : "type"}, {"label" : "++", "tail" : "(those: V): SigmaTyp[UU, VV]", "member" : "provingground.HoTT.Typ.++", "link" : "provingground\/scalahott\/IntVector.html#++[UU>:provingground.HoTT.Typ[U]<:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[UU],VV<:provingground.HoTT.Termwithprovingground.HoTT.Subs[VV],V<:provingground.HoTT.Typ[VV]withprovingground.HoTT.Subs[V]](those:V):provingground.HoTT.SigmaTyp[UU,VV]", "kind" : "def"}, {"label" : "||", "tail" : "(that: Typ[V]): PlusTyp[UU, V]", "member" : "provingground.HoTT.Typ.||", "link" : "provingground\/scalahott\/IntVector.html#||[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](that:provingground.HoTT.Typ[V]):provingground.HoTT.PlusTyp[UU,V]", "kind" : "def"}, {"label" : "&&", "tail" : "(that: Typ[V]): ProdTyp[UU, V]", "member" : "provingground.HoTT.Typ.&&", "link" : "provingground\/scalahott\/IntVector.html#&&[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](that:provingground.HoTT.Typ[V]):provingground.HoTT.ProdTyp[UU,V]", "kind" : "def"}, {"label" : "~>:", "tail" : "(variable: V): GenFuncTyp[V, UU]", "member" : "provingground.HoTT.Typ.~>:", "link" : "provingground\/scalahott\/IntVector.html#~>:[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](variable:V):provingground.HoTT.GenFuncTyp[V,UU]", "kind" : "def"}, {"label" : "->:", "tail" : "(that: Typ[W]): FuncTyp[W, UU]", "member" : "provingground.HoTT.Typ.->:", "link" : "provingground\/scalahott\/IntVector.html#->:[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU]](that:provingground.HoTT.Typ[W]):provingground.HoTT.FuncTyp[W,UU]", "kind" : "def"}, {"label" : "typedVar", "tail" : "(factory: NameFactory): TypedTerm[RepTerm[Vector[Int]]]", "member" : "provingground.HoTT.Typ.typedVar", "link" : "provingground\/scalahott\/IntVector.html#typedVar(implicitfactory:provingground.HoTT.NameFactory):provingground.HoTT.TypedTerm[U]", "kind" : "def"}, {"label" : "Var", "tail" : "(factory: NameFactory): RepTerm[Vector[Int]] with Subs[RepTerm[Vector[Int]]]", "member" : "provingground.HoTT.Typ.Var", "link" : "provingground\/scalahott\/IntVector.html#Var(implicitfactory:provingground.HoTT.NameFactory):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "sym", "tail" : "(name: Name): RepTerm[Vector[Int]] with Subs[RepTerm[Vector[Int]]]", "member" : "provingground.HoTT.Typ.sym", "link" : "provingground\/scalahott\/IntVector.html#sym(implicitname:sourcecode.Name):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "::", "tail" : "(name: String): RepTerm[Vector[Int]] with Subs[RepTerm[Vector[Int]]]", "member" : "provingground.HoTT.Typ.::", "link" : "provingground\/scalahott\/IntVector.html#::(name:String):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "typedVar", "tail" : "(name: AnySym): TypedTerm[RepTerm[Vector[Int]]]", "member" : "provingground.HoTT.Typ.typedVar", "link" : "provingground\/scalahott\/IntVector.html#typedVar(name:provingground.HoTT.AnySym):provingground.HoTT.TypedTerm[U]", "kind" : "def"}, {"label" : "symbObj", "tail" : "(name: AnySym): RepTerm[Vector[Int]] with Subs[RepTerm[Vector[Int]]]", "member" : "provingground.HoTT.Typ.symbObj", "link" : "provingground\/scalahott\/IntVector.html#symbObj(name:provingground.HoTT.AnySym):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "typlevel", "tail" : ": Int", "member" : "provingground.HoTT.Typ.typlevel", "link" : "provingground\/scalahott\/IntVector.html#typlevel:Int", "kind" : "lazy val"}, {"label" : "typed", "tail" : ": TypedTerm[Typ[Term]]", "member" : "provingground.HoTT.Typ.typed", "link" : "provingground\/scalahott\/IntVector.html#typed:provingground.HoTT.TypedTerm[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "!:", "tail" : "(term: Term): RepTerm[Vector[Int]]", "member" : "provingground.HoTT.Typ.!:", "link" : "provingground\/scalahott\/IntVector.html#!:(term:provingground.HoTT.Term):U", "kind" : "def"}, {"label" : "obj", "tail" : "(): RepTerm[Vector[Int]]", "member" : "provingground.HoTT.Typ.obj", "link" : "provingground\/scalahott\/IntVector.html#obj:U", "kind" : "def"}, {"label" : "usesVar", "tail" : "(t: Term): Boolean", "member" : "provingground.HoTT.Term.usesVar", "link" : "provingground\/scalahott\/IntVector.html#usesVar(t:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "indepOf", "tail" : "(that: Term): Boolean", "member" : "provingground.HoTT.Term.indepOf", "link" : "provingground\/scalahott\/IntVector.html#indepOf(that:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "dependsOn", "tail" : "(that: Term): Boolean", "member" : "provingground.HoTT.Term.dependsOn", "link" : "provingground\/scalahott\/IntVector.html#dependsOn(that:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "replace", "tail" : "(x: Term, y: Term): Typ[RepTerm[Vector[Int]]] with Subs[Typ[RepTerm[Vector[Int]]]]", "member" : "provingground.HoTT.Subs.replace", "link" : "provingground\/scalahott\/IntVector.html#replace(x:provingground.HoTT.Term,y:provingground.HoTT.Term):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/scalahott\/IntVector.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/scalahott\/IntVector.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/scalahott\/IntVector.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/scalahott\/IntVector.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/scalahott\/IntVector.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/scalahott\/IntVector.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/scalahott\/IntVector.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/IntVector.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/IntVector.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/IntVector.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/scalahott\/IntVector.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/scalahott\/IntVector.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/scalahott\/IntVector.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/scalahott\/IntVector.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/scalahott\/IntVector.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/scalahott\/IntVector.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/scalahott\/IntVector.html", "kind" : "case class"}, {"name" : "provingground.scalahott.LinNormBound", "shortDescription" : "", "object" : "provingground\/scalahott\/LinNormBound$.html", "members_class" : [{"label" : "+:", "tail" : "(n: Int): Triang", "member" : "provingground.scalahott.LinNormBound.+:", "link" : "provingground\/scalahott\/LinNormBound.html#+:(n:Int):provingground.scalahott.LinNormBound.Triang", "kind" : "def"}, {"label" : "*:", "tail" : "(n: Int): ConjGen", "member" : "provingground.scalahott.LinNormBound.*:", "link" : "provingground\/scalahott\/LinNormBound.html#*:(n:Int):provingground.scalahott.LinNormBound.ConjGen", "kind" : "def"}, {"label" : "++", "tail" : "(that: LinNormBound): Triang", "member" : "provingground.scalahott.LinNormBound.++", "link" : "provingground\/scalahott\/LinNormBound.html#++(that:provingground.scalahott.LinNormBound):provingground.scalahott.LinNormBound.Triang", "kind" : "def"}, {"label" : "fullTheorem", "tail" : ": Typ[U] forSome {type U >: fullProof.type <: Term with Subs[U]}", "member" : "provingground.scalahott.LinNormBound.fullTheorem", "link" : "provingground\/scalahott\/LinNormBound.html#fullTheorem:provingground.HoTT.Typ[U]forSome{typeU>:LinNormBound.this.fullProof.type<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]}", "kind" : "lazy val"}, {"label" : "fullProof", "tail" : ": Term", "member" : "provingground.scalahott.LinNormBound.fullProof", "link" : "provingground\/scalahott\/LinNormBound.html#fullProof:provingground.HoTT.Term", "kind" : "lazy val"}, {"label" : "proof", "tail" : ": PosWit", "member" : "provingground.scalahott.LinNormBound.proof", "link" : "provingground\/scalahott\/LinNormBound.html#proof:provingground.scalahott.QField.PosWit", "kind" : "lazy val"}, {"label" : "el", "tail" : ": FreeGroup.LocalTerm with Subs[FreeGroup.LocalTerm]", "member" : "provingground.scalahott.LinNormBound.el", "link" : "provingground\/scalahott\/LinNormBound.html#el:provingground.scalahott.FreeGroup.LocalTermwithprovingground.HoTT.Subs[provingground.scalahott.FreeGroup.LocalTerm]", "kind" : "val"}, {"label" : "bnd", "tail" : ": QField.LocalTerm with Subs[QField.LocalTerm]", "member" : "provingground.scalahott.LinNormBound.bnd", "link" : "provingground\/scalahott\/LinNormBound.html#bnd:provingground.scalahott.QField.LocalTermwithprovingground.HoTT.Subs[provingground.scalahott.QField.LocalTerm]", "kind" : "val"}, {"label" : "theorem", "tail" : ": Pos", "member" : "provingground.scalahott.LinNormBound.theorem", "link" : "provingground\/scalahott\/LinNormBound.html#theorem:provingground.scalahott.QField.Pos", "kind" : "lazy val"}, {"label" : "bound", "tail" : ": Rational", "member" : "provingground.scalahott.LinNormBound.bound", "link" : "provingground\/scalahott\/LinNormBound.html#bound:spire.math.Rational", "kind" : "val"}, {"label" : "word", "tail" : ": Word", "member" : "provingground.scalahott.LinNormBound.word", "link" : "provingground\/scalahott\/LinNormBound.html#word:provingground.andrewscurtis.FreeGroups.Word", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/scalahott\/LinNormBound.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/scalahott\/LinNormBound.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/scalahott\/LinNormBound.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/scalahott\/LinNormBound.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/scalahott\/LinNormBound.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/scalahott\/LinNormBound.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/scalahott\/LinNormBound.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/LinNormBound.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/LinNormBound.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/LinNormBound.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/scalahott\/LinNormBound.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/scalahott\/LinNormBound.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/scalahott\/LinNormBound.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/scalahott\/LinNormBound.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/scalahott\/LinNormBound.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/scalahott\/LinNormBound.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/scalahott\/LinNormBound.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/scalahott\/LinNormBound.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/scalahott\/LinNormBound.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "wit", "tail" : ": Term", "member" : "provingground.scalahott.LinNormBound.wit", "link" : "provingground\/scalahott\/LinNormBound.html#wit:provingground.HoTT.Term", "kind" : "abstract val"}], "members_object" : [{"label" : "PowerBound", "tail" : "", "member" : "provingground.scalahott.LinNormBound.PowerBound", "link" : "provingground\/scalahott\/LinNormBound$.html#PowerBoundextendsLinNormBoundwithProductwithSerializable", "kind" : "case class"}, {"label" : "Triang", "tail" : "", "member" : "provingground.scalahott.LinNormBound.Triang", "link" : "provingground\/scalahott\/LinNormBound$.html#TriangextendsLinNormBoundwithProductwithSerializable", "kind" : "case class"}, {"label" : "ConjGen", "tail" : "", "member" : "provingground.scalahott.LinNormBound.ConjGen", "link" : "provingground\/scalahott\/LinNormBound$.html#ConjGenextendsLinNormBoundwithProductwithSerializable", "kind" : "case class"}, {"label" : "Gen", "tail" : "", "member" : "provingground.scalahott.LinNormBound.Gen", "link" : "provingground\/scalahott\/LinNormBound$.html#GenextendsLinNormBoundwithProductwithSerializable", "kind" : "case class"}, {"label" : "invBound", "tail" : ": FuncLike[RepTerm[Word] with Subs[RepTerm[Word]], FuncLike[RepTerm[Rational] with Subs[RepTerm[Rational]], FuncLike[PosWit with Subs[PosWit], PosWit]]]", "member" : "provingground.scalahott.LinNormBound.invBound", "link" : "provingground\/scalahott\/LinNormBound$.html#invBound:provingground.HoTT.FuncLike[provingground.scalahott.RepTerm[provingground.andrewscurtis.FreeGroups.Word]withprovingground.HoTT.Subs[provingground.scalahott.RepTerm[provingground.andrewscurtis.FreeGroups.Word]],provingground.HoTT.FuncLike[provingground.scalahott.RepTerm[spire.math.Rational]withprovingground.HoTT.Subs[provingground.scalahott.RepTerm[spire.math.Rational]],provingground.HoTT.FuncLike[provingground.scalahott.QField.PosWitwithprovingground.HoTT.Subs[provingground.scalahott.QField.PosWit],provingground.scalahott.QField.PosWit]]]", "kind" : "lazy val"}, {"label" : "triangBound", "tail" : ": FuncLike[RepTerm[Word] with Subs[RepTerm[Word]], FuncLike[RepTerm[Word] with Subs[RepTerm[Word]], FuncLike[RepTerm[Rational] with Subs[RepTerm[Rational]], FuncLike[RepTerm[Rational] with Subs[RepTerm[Rational]], FuncLike[PosWit with Subs[PosWit], FuncLike[PosWit with Subs[PosWit], PosWit]]]]]]", "member" : "provingground.scalahott.LinNormBound.triangBound", "link" : "provingground\/scalahott\/LinNormBound$.html#triangBound:provingground.HoTT.FuncLike[provingground.scalahott.RepTerm[provingground.andrewscurtis.FreeGroups.Word]withprovingground.HoTT.Subs[provingground.scalahott.RepTerm[provingground.andrewscurtis.FreeGroups.Word]],provingground.HoTT.FuncLike[provingground.scalahott.RepTerm[provingground.andrewscurtis.FreeGroups.Word]withprovingground.HoTT.Subs[provingground.scalahott.RepTerm[provingground.andrewscurtis.FreeGroups.Word]],provingground.HoTT.FuncLike[provingground.scalahott.RepTerm[spire.math.Rational]withprovingground.HoTT.Subs[provingground.scalahott.RepTerm[spire.math.Rational]],provingground.HoTT.FuncLike[provingground.scalahott.RepTerm[spire.math.Rational]withprovingground.HoTT.Subs[provingground.scalahott.RepTerm[spire.math.Rational]],provingground.HoTT.FuncLike[provingground.scalahott.QField.PosWitwithprovingground.HoTT.Subs[provingground.scalahott.QField.PosWit],provingground.HoTT.FuncLike[provingground.scalahott.QField.PosWitwithprovingground.HoTT.Subs[provingground.scalahott.QField.PosWit],provingground.scalahott.QField.PosWit]]]]]]", "kind" : "lazy val"}, {"label" : "expvars", "tail" : ": Vector[FuncLike[_ >: RepTerm[SafeLong] with Subs[RepTerm[SafeLong]] with RepTerm[Word] with Subs[RepTerm[Word]] <: RepTerm[_ >: SafeLong with Word <: Serializable], Term]]", "member" : "provingground.scalahott.LinNormBound.expvars", "link" : "provingground\/scalahott\/LinNormBound$.html#expvars:scala.collection.immutable.Vector[provingground.HoTT.FuncLike[_>:provingground.scalahott.RepTerm[spire.math.SafeLong]withprovingground.HoTT.Subs[provingground.scalahott.RepTerm[spire.math.SafeLong]]withprovingground.scalahott.RepTerm[provingground.andrewscurtis.FreeGroups.Word]withprovingground.HoTT.Subs[provingground.scalahott.RepTerm[provingground.andrewscurtis.FreeGroups.Word]]<:provingground.scalahott.RepTerm[_>:spire.math.SafeLongwithprovingground.andrewscurtis.FreeGroups.Word<:java.io.Serializable],provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "genBound", "tail" : ": FuncLike[RepTerm[SafeLong] with Subs[RepTerm[SafeLong]], PosWit] with Subs[FuncLike[RepTerm[SafeLong] with Subs[RepTerm[SafeLong]], PosWit]]", "member" : "provingground.scalahott.LinNormBound.genBound", "link" : "provingground\/scalahott\/LinNormBound$.html#genBound:provingground.HoTT.FuncLike[provingground.scalahott.RepTerm[spire.math.SafeLong]withprovingground.HoTT.Subs[provingground.scalahott.RepTerm[spire.math.SafeLong]],provingground.scalahott.QField.PosWit]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.scalahott.RepTerm[spire.math.SafeLong]withprovingground.HoTT.Subs[provingground.scalahott.RepTerm[spire.math.SafeLong]],provingground.scalahott.QField.PosWit]]", "kind" : "lazy val"}, {"label" : "nr", "tail" : ": QField.LocalTerm", "member" : "provingground.scalahott.LinNormBound.nr", "link" : "provingground\/scalahott\/LinNormBound$.html#nr:provingground.scalahott.QField.LocalTerm", "kind" : "val"}, {"label" : "NtoQ", "tail" : ": Rec[QField.LocalTerm]", "member" : "provingground.scalahott.LinNormBound.NtoQ", "link" : "provingground\/scalahott\/LinNormBound$.html#NtoQ:provingground.scalahott.NatRing.Rec[provingground.scalahott.QField.LocalTerm]", "kind" : "val"}, {"label" : "gen", "tail" : ": Func[RepTerm[SafeLong], RepTerm[Word]]", "member" : "provingground.scalahott.LinNormBound.gen", "link" : "provingground\/scalahott\/LinNormBound$.html#gen:provingground.HoTT.Func[provingground.scalahott.RepTerm[spire.math.SafeLong],provingground.scalahott.RepTerm[provingground.andrewscurtis.FreeGroups.Word]]", "kind" : "lazy val"}, {"label" : "powerBound", "tail" : ": FuncLike[RepTerm[Word] with Subs[RepTerm[Word]], FuncLike[RepTerm[Rational] with Subs[RepTerm[Rational]], FuncLike[RepTerm[SafeLong] with Subs[RepTerm[SafeLong]], FuncLike[PosWit with Subs[PosWit], PosWit]]]] with Subs[FuncLike[RepTerm[Word] with Subs[RepTerm[Word]], FuncLike[RepTerm[Rational] with Subs[RepTerm[Rational]], FuncLike[RepTerm[SafeLong] with Subs[RepTerm[SafeLong]], FuncLike[PosWit with Subs[PosWit], PosWit]]]]]", "member" : "provingground.scalahott.LinNormBound.powerBound", "link" : "provingground\/scalahott\/LinNormBound$.html#powerBound:provingground.HoTT.FuncLike[provingground.scalahott.RepTerm[provingground.andrewscurtis.FreeGroups.Word]withprovingground.HoTT.Subs[provingground.scalahott.RepTerm[provingground.andrewscurtis.FreeGroups.Word]],provingground.HoTT.FuncLike[provingground.scalahott.RepTerm[spire.math.Rational]withprovingground.HoTT.Subs[provingground.scalahott.RepTerm[spire.math.Rational]],provingground.HoTT.FuncLike[provingground.scalahott.RepTerm[spire.math.SafeLong]withprovingground.HoTT.Subs[provingground.scalahott.RepTerm[spire.math.SafeLong]],provingground.HoTT.FuncLike[provingground.scalahott.QField.PosWitwithprovingground.HoTT.Subs[provingground.scalahott.QField.PosWit],provingground.scalahott.QField.PosWit]]]]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.scalahott.RepTerm[provingground.andrewscurtis.FreeGroups.Word]withprovingground.HoTT.Subs[provingground.scalahott.RepTerm[provingground.andrewscurtis.FreeGroups.Word]],provingground.HoTT.FuncLike[provingground.scalahott.RepTerm[spire.math.Rational]withprovingground.HoTT.Subs[provingground.scalahott.RepTerm[spire.math.Rational]],provingground.HoTT.FuncLike[provingground.scalahott.RepTerm[spire.math.SafeLong]withprovingground.HoTT.Subs[provingground.scalahott.RepTerm[spire.math.SafeLong]],provingground.HoTT.FuncLike[provingground.scalahott.QField.PosWitwithprovingground.HoTT.Subs[provingground.scalahott.QField.PosWit],provingground.scalahott.QField.PosWit]]]]]", "kind" : "lazy val"}, {"label" : "symmetry", "tail" : ": FuncLike[RepTerm[Word] with Subs[RepTerm[Word]], Equality[RepTerm[Rational]]] with Subs[FuncLike[RepTerm[Word] with Subs[RepTerm[Word]], Equality[RepTerm[Rational]]]]", "member" : "provingground.scalahott.LinNormBound.symmetry", "link" : "provingground\/scalahott\/LinNormBound$.html#symmetry:provingground.HoTT.FuncLike[provingground.scalahott.RepTerm[provingground.andrewscurtis.FreeGroups.Word]withprovingground.HoTT.Subs[provingground.scalahott.RepTerm[provingground.andrewscurtis.FreeGroups.Word]],provingground.HoTT.Equality[provingground.scalahott.RepTerm[spire.math.Rational]]]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.scalahott.RepTerm[provingground.andrewscurtis.FreeGroups.Word]withprovingground.HoTT.Subs[provingground.scalahott.RepTerm[provingground.andrewscurtis.FreeGroups.Word]],provingground.HoTT.Equality[provingground.scalahott.RepTerm[spire.math.Rational]]]]", "kind" : "lazy val"}, {"label" : "conjInv", "tail" : ": FuncLike[RepTerm[Word] with Subs[RepTerm[Word]], FuncLike[RepTerm[Word] with Subs[RepTerm[Word]], Equality[RepTerm[Rational]]]] with Subs[FuncLike[RepTerm[Word] with Subs[RepTerm[Word]], FuncLike[RepTerm[Word] with Subs[RepTerm[Word]], Equality[RepTerm[Rational]]]]]", "member" : "provingground.scalahott.LinNormBound.conjInv", "link" : "provingground\/scalahott\/LinNormBound$.html#conjInv:provingground.HoTT.FuncLike[provingground.scalahott.RepTerm[provingground.andrewscurtis.FreeGroups.Word]withprovingground.HoTT.Subs[provingground.scalahott.RepTerm[provingground.andrewscurtis.FreeGroups.Word]],provingground.HoTT.FuncLike[provingground.scalahott.RepTerm[provingground.andrewscurtis.FreeGroups.Word]withprovingground.HoTT.Subs[provingground.scalahott.RepTerm[provingground.andrewscurtis.FreeGroups.Word]],provingground.HoTT.Equality[provingground.scalahott.RepTerm[spire.math.Rational]]]]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.scalahott.RepTerm[provingground.andrewscurtis.FreeGroups.Word]withprovingground.HoTT.Subs[provingground.scalahott.RepTerm[provingground.andrewscurtis.FreeGroups.Word]],provingground.HoTT.FuncLike[provingground.scalahott.RepTerm[provingground.andrewscurtis.FreeGroups.Word]withprovingground.HoTT.Subs[provingground.scalahott.RepTerm[provingground.andrewscurtis.FreeGroups.Word]],provingground.HoTT.Equality[provingground.scalahott.RepTerm[spire.math.Rational]]]]]", "kind" : "lazy val"}, {"label" : "triang", "tail" : ": FuncLike[RepTerm[Word] with Subs[RepTerm[Word]], FuncLike[RepTerm[Word] with Subs[RepTerm[Word]], PosWit]] with Subs[FuncLike[RepTerm[Word] with Subs[RepTerm[Word]], FuncLike[RepTerm[Word] with Subs[RepTerm[Word]], PosWit]]]", "member" : "provingground.scalahott.LinNormBound.triang", "link" : "provingground\/scalahott\/LinNormBound$.html#triang:provingground.HoTT.FuncLike[provingground.scalahott.RepTerm[provingground.andrewscurtis.FreeGroups.Word]withprovingground.HoTT.Subs[provingground.scalahott.RepTerm[provingground.andrewscurtis.FreeGroups.Word]],provingground.HoTT.FuncLike[provingground.scalahott.RepTerm[provingground.andrewscurtis.FreeGroups.Word]withprovingground.HoTT.Subs[provingground.scalahott.RepTerm[provingground.andrewscurtis.FreeGroups.Word]],provingground.scalahott.QField.PosWit]]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.scalahott.RepTerm[provingground.andrewscurtis.FreeGroups.Word]withprovingground.HoTT.Subs[provingground.scalahott.RepTerm[provingground.andrewscurtis.FreeGroups.Word]],provingground.HoTT.FuncLike[provingground.scalahott.RepTerm[provingground.andrewscurtis.FreeGroups.Word]withprovingground.HoTT.Subs[provingground.scalahott.RepTerm[provingground.andrewscurtis.FreeGroups.Word]],provingground.scalahott.QField.PosWit]]]", "kind" : "lazy val"}, {"label" : "pos", "tail" : ": Pos", "member" : "provingground.scalahott.LinNormBound.pos", "link" : "provingground\/scalahott\/LinNormBound$.html#pos:provingground.scalahott.QField.Pos", "kind" : "val"}, {"label" : "upbound", "tail" : ": FuncLike[RepTerm[Word] with Subs[RepTerm[Word]], FuncLike[RepTerm[Rational] with Subs[RepTerm[Rational]], Pos]]", "member" : "provingground.scalahott.LinNormBound.upbound", "link" : "provingground\/scalahott\/LinNormBound$.html#upbound:provingground.HoTT.FuncLike[provingground.scalahott.RepTerm[provingground.andrewscurtis.FreeGroups.Word]withprovingground.HoTT.Subs[provingground.scalahott.RepTerm[provingground.andrewscurtis.FreeGroups.Word]],provingground.HoTT.FuncLike[provingground.scalahott.RepTerm[spire.math.Rational]withprovingground.HoTT.Subs[provingground.scalahott.RepTerm[spire.math.Rational]],provingground.scalahott.QField.Pos]]", "kind" : "val"}, {"label" : "l", "tail" : ": Func[RepTerm[Word], RepTerm[Rational]] with Subs[Func[RepTerm[Word], RepTerm[Rational]]]", "member" : "provingground.scalahott.LinNormBound.l", "link" : "provingground\/scalahott\/LinNormBound$.html#l:provingground.HoTT.Func[provingground.scalahott.RepTerm[provingground.andrewscurtis.FreeGroups.Word],provingground.scalahott.RepTerm[spire.math.Rational]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.scalahott.RepTerm[provingground.andrewscurtis.FreeGroups.Word],provingground.scalahott.RepTerm[spire.math.Rational]]]", "kind" : "val"}, {"label" : "y", "tail" : ": RepTerm[Rational] with Subs[RepTerm[Rational]]", "member" : "provingground.scalahott.LinNormBound.y", "link" : "provingground\/scalahott\/LinNormBound$.html#y:provingground.scalahott.RepTerm[spire.math.Rational]withprovingground.HoTT.Subs[provingground.scalahott.RepTerm[spire.math.Rational]]", "kind" : "val"}, {"label" : "x", "tail" : ": RepTerm[Rational] with Subs[RepTerm[Rational]]", "member" : "provingground.scalahott.LinNormBound.x", "link" : "provingground\/scalahott\/LinNormBound$.html#x:provingground.scalahott.RepTerm[spire.math.Rational]withprovingground.HoTT.Subs[provingground.scalahott.RepTerm[spire.math.Rational]]", "kind" : "val"}, {"label" : "n", "tail" : ": RepTerm[SafeLong] with Subs[RepTerm[SafeLong]]", "member" : "provingground.scalahott.LinNormBound.n", "link" : "provingground\/scalahott\/LinNormBound$.html#n:provingground.scalahott.RepTerm[spire.math.SafeLong]withprovingground.HoTT.Subs[provingground.scalahott.RepTerm[spire.math.SafeLong]]", "kind" : "val"}, {"label" : "h", "tail" : ": RepTerm[Word] with Subs[RepTerm[Word]]", "member" : "provingground.scalahott.LinNormBound.h", "link" : "provingground\/scalahott\/LinNormBound$.html#h:provingground.scalahott.RepTerm[provingground.andrewscurtis.FreeGroups.Word]withprovingground.HoTT.Subs[provingground.scalahott.RepTerm[provingground.andrewscurtis.FreeGroups.Word]]", "kind" : "val"}, {"label" : "g", "tail" : ": RepTerm[Word] with Subs[RepTerm[Word]]", "member" : "provingground.scalahott.LinNormBound.g", "link" : "provingground\/scalahott\/LinNormBound$.html#g:provingground.scalahott.RepTerm[provingground.andrewscurtis.FreeGroups.Word]withprovingground.HoTT.Subs[provingground.scalahott.RepTerm[provingground.andrewscurtis.FreeGroups.Word]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/scalahott\/LinNormBound$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/scalahott\/LinNormBound$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/scalahott\/LinNormBound$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/scalahott\/LinNormBound$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/scalahott\/LinNormBound$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/scalahott\/LinNormBound$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/scalahott\/LinNormBound$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/LinNormBound$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/LinNormBound$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/LinNormBound$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/scalahott\/LinNormBound$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/scalahott\/LinNormBound$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/scalahott\/LinNormBound$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/scalahott\/LinNormBound$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/scalahott\/LinNormBound$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/scalahott\/LinNormBound$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/scalahott\/LinNormBound$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/scalahott\/LinNormBound$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/scalahott\/LinNormBound$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/scalahott\/LinNormBound.html", "kind" : "class"}, {"name" : "provingground.scalahott.ListTyp", "shortDescription" : "", "members_case class" : [{"label" : "Elem", "tail" : "", "member" : "provingground.HoTT.Typ.Elem", "link" : "provingground\/HoTT$$Typ.html#Elem", "kind" : "object"}, {"label" : "cons", "tail" : ": Func[U, Func[RepTerm[List[X]], RepTerm[List[X]]]]", "member" : "provingground.scalahott.ListTyp.cons", "link" : "provingground\/scalahott\/ListTyp.html#cons:provingground.HoTT.Func[U,provingground.HoTT.Func[provingground.scalahott.RepTerm[List[X]],provingground.scalahott.RepTerm[List[X]]]]", "kind" : "val"}, {"label" : "empty", "tail" : ": RepTerm[List[X]]", "member" : "provingground.scalahott.ListTyp.empty", "link" : "provingground\/scalahott\/ListTyp.html#empty:provingground.scalahott.RepTerm[List[X]]", "kind" : "val"}, {"member" : "provingground.scalahott.ListTyp#<init>", "error" : "unsupported entity"}, {"label" : "rep", "tail" : ": ScalaRep[RepTerm[List[X]], List[X]]", "member" : "provingground.scalahott.ScalaTyp.rep", "link" : "provingground\/scalahott\/ListTyp.html#rep:provingground.scalahott.ScalaRep[provingground.scalahott.RepTerm[A],A]", "kind" : "implicit val"}, {"label" : "subs", "tail" : "(x: Term, y: Term): Typ[RepTerm[List[X]]] with Subs[Typ[RepTerm[List[X]]]]", "member" : "provingground.scalahott.ScalaTyp.subs", "link" : "provingground\/scalahott\/ListTyp.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.HoTT.Typ[provingground.scalahott.RepTerm[A]]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.scalahott.RepTerm[A]]]", "kind" : "def"}, {"label" : "newobj", "tail" : "(): Nothing", "member" : "provingground.scalahott.ScalaTyp.newobj", "link" : "provingground\/scalahott\/ListTyp.html#newobj:Nothing", "kind" : "def"}, {"label" : "variable", "tail" : "(name: AnySym): RepTerm[List[X]]", "member" : "provingground.scalahott.ScalaTyp.variable", "link" : "provingground\/scalahott\/ListTyp.html#variable(name:provingground.HoTT.AnySym):provingground.scalahott.RepTerm[A]", "kind" : "def"}, {"label" : "typ", "tail" : ": ScalaTypUniv[List[X]]", "member" : "provingground.scalahott.ScalaTyp.typ", "link" : "provingground\/scalahott\/ListTyp.html#typ:provingground.scalahott.ScalaTypUniv[A]", "kind" : "val"}, {"label" : "Obj", "tail" : "", "member" : "provingground.scalahott.ScalaTyp.Obj", "link" : "provingground\/scalahott\/ListTyp.html#Obj=provingground.scalahott.RepTerm[A]", "kind" : "type"}, {"label" : "++", "tail" : "(those: V): SigmaTyp[UU, VV]", "member" : "provingground.HoTT.Typ.++", "link" : "provingground\/scalahott\/ListTyp.html#++[UU>:provingground.HoTT.Typ[U]<:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[UU],VV<:provingground.HoTT.Termwithprovingground.HoTT.Subs[VV],V<:provingground.HoTT.Typ[VV]withprovingground.HoTT.Subs[V]](those:V):provingground.HoTT.SigmaTyp[UU,VV]", "kind" : "def"}, {"label" : "||", "tail" : "(that: Typ[V]): PlusTyp[UU, V]", "member" : "provingground.HoTT.Typ.||", "link" : "provingground\/scalahott\/ListTyp.html#||[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](that:provingground.HoTT.Typ[V]):provingground.HoTT.PlusTyp[UU,V]", "kind" : "def"}, {"label" : "&&", "tail" : "(that: Typ[V]): ProdTyp[UU, V]", "member" : "provingground.HoTT.Typ.&&", "link" : "provingground\/scalahott\/ListTyp.html#&&[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](that:provingground.HoTT.Typ[V]):provingground.HoTT.ProdTyp[UU,V]", "kind" : "def"}, {"label" : "~>:", "tail" : "(variable: V): GenFuncTyp[V, UU]", "member" : "provingground.HoTT.Typ.~>:", "link" : "provingground\/scalahott\/ListTyp.html#~>:[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](variable:V):provingground.HoTT.GenFuncTyp[V,UU]", "kind" : "def"}, {"label" : "->:", "tail" : "(that: Typ[W]): FuncTyp[W, UU]", "member" : "provingground.HoTT.Typ.->:", "link" : "provingground\/scalahott\/ListTyp.html#->:[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU]](that:provingground.HoTT.Typ[W]):provingground.HoTT.FuncTyp[W,UU]", "kind" : "def"}, {"label" : "typedVar", "tail" : "(factory: NameFactory): TypedTerm[RepTerm[List[X]]]", "member" : "provingground.HoTT.Typ.typedVar", "link" : "provingground\/scalahott\/ListTyp.html#typedVar(implicitfactory:provingground.HoTT.NameFactory):provingground.HoTT.TypedTerm[U]", "kind" : "def"}, {"label" : "Var", "tail" : "(factory: NameFactory): RepTerm[List[X]] with Subs[RepTerm[List[X]]]", "member" : "provingground.HoTT.Typ.Var", "link" : "provingground\/scalahott\/ListTyp.html#Var(implicitfactory:provingground.HoTT.NameFactory):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "sym", "tail" : "(name: Name): RepTerm[List[X]] with Subs[RepTerm[List[X]]]", "member" : "provingground.HoTT.Typ.sym", "link" : "provingground\/scalahott\/ListTyp.html#sym(implicitname:sourcecode.Name):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "::", "tail" : "(name: String): RepTerm[List[X]] with Subs[RepTerm[List[X]]]", "member" : "provingground.HoTT.Typ.::", "link" : "provingground\/scalahott\/ListTyp.html#::(name:String):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "typedVar", "tail" : "(name: AnySym): TypedTerm[RepTerm[List[X]]]", "member" : "provingground.HoTT.Typ.typedVar", "link" : "provingground\/scalahott\/ListTyp.html#typedVar(name:provingground.HoTT.AnySym):provingground.HoTT.TypedTerm[U]", "kind" : "def"}, {"label" : "symbObj", "tail" : "(name: AnySym): RepTerm[List[X]] with Subs[RepTerm[List[X]]]", "member" : "provingground.HoTT.Typ.symbObj", "link" : "provingground\/scalahott\/ListTyp.html#symbObj(name:provingground.HoTT.AnySym):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "typlevel", "tail" : ": Int", "member" : "provingground.HoTT.Typ.typlevel", "link" : "provingground\/scalahott\/ListTyp.html#typlevel:Int", "kind" : "lazy val"}, {"label" : "typed", "tail" : ": TypedTerm[Typ[Term]]", "member" : "provingground.HoTT.Typ.typed", "link" : "provingground\/scalahott\/ListTyp.html#typed:provingground.HoTT.TypedTerm[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "!:", "tail" : "(term: Term): RepTerm[List[X]]", "member" : "provingground.HoTT.Typ.!:", "link" : "provingground\/scalahott\/ListTyp.html#!:(term:provingground.HoTT.Term):U", "kind" : "def"}, {"label" : "obj", "tail" : "(): RepTerm[List[X]]", "member" : "provingground.HoTT.Typ.obj", "link" : "provingground\/scalahott\/ListTyp.html#obj:U", "kind" : "def"}, {"label" : "usesVar", "tail" : "(t: Term): Boolean", "member" : "provingground.HoTT.Term.usesVar", "link" : "provingground\/scalahott\/ListTyp.html#usesVar(t:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "indepOf", "tail" : "(that: Term): Boolean", "member" : "provingground.HoTT.Term.indepOf", "link" : "provingground\/scalahott\/ListTyp.html#indepOf(that:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "dependsOn", "tail" : "(that: Term): Boolean", "member" : "provingground.HoTT.Term.dependsOn", "link" : "provingground\/scalahott\/ListTyp.html#dependsOn(that:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "replace", "tail" : "(x: Term, y: Term): Typ[RepTerm[List[X]]] with Subs[Typ[RepTerm[List[X]]]]", "member" : "provingground.HoTT.Subs.replace", "link" : "provingground\/scalahott\/ListTyp.html#replace(x:provingground.HoTT.Term,y:provingground.HoTT.Term):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/scalahott\/ListTyp.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/scalahott\/ListTyp.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/scalahott\/ListTyp.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/scalahott\/ListTyp.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/scalahott\/ListTyp.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/scalahott\/ListTyp.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/scalahott\/ListTyp.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/ListTyp.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/ListTyp.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/ListTyp.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/scalahott\/ListTyp.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/scalahott\/ListTyp.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/scalahott\/ListTyp.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/scalahott\/ListTyp.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/scalahott\/ListTyp.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/scalahott\/ListTyp.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/scalahott\/ListTyp.html", "kind" : "case class"}, {"name" : "provingground.scalahott.ListType", "shortDescription" : "", "object" : "provingground\/scalahott\/ListType$.html", "members_object" : [{"label" : "tail", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], Func[Term, Term]]", "member" : "provingground.scalahott.ListType.tail", "link" : "provingground\/scalahott\/ListType$.html#tail:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "headOpt", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], OptDepFuncDefn[Term]]", "member" : "provingground.scalahott.ListType.headOpt", "link" : "provingground\/scalahott\/ListType$.html#headOpt:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.OptDepFuncDefn[provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "tailFn", "tail" : "(typ: Typ[U]): Func[Term, Term]", "member" : "provingground.scalahott.ListType.tailFn", "link" : "provingground\/scalahott\/ListType$.html#tailFn[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](typ:provingground.HoTT.Typ[U]):provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]", "kind" : "def"}, {"label" : "headOptFn", "tail" : "(typ: Typ[U]): OptDepFuncDefn[Term]", "member" : "provingground.scalahott.ListType.headOptFn", "link" : "provingground\/scalahott\/ListType$.html#headOptFn[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](typ:provingground.HoTT.Typ[U]):provingground.HoTT.OptDepFuncDefn[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "foldLeft", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Typ[Term] with Subs[Typ[Term]], Func[Term, Func[Term, Func[Func[Term, Func[Term, Term]], Term]]]]]", "member" : "provingground.scalahott.ListType.foldLeft", "link" : "provingground\/scalahott\/ListType$.html#foldLeft:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]],provingground.HoTT.Term]]]]]", "kind" : "lazy val"}, {"label" : "lmap", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Typ[Term] with Subs[Typ[Term]], Func[Func[Term, Term], Func[Term, Term]]]]", "member" : "provingground.scalahott.ListType.lmap", "link" : "provingground\/scalahott\/ListType$.html#lmap:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.Func[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]]", "kind" : "lazy val"}, {"label" : "lmapFunc", "tail" : "(u: Typ[U], v: Typ[V]): Func[Func[U, V], Func[Term, Term]]", "member" : "provingground.scalahott.ListType.lmapFunc", "link" : "provingground\/scalahott\/ListType$.html#lmapFunc[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](u:provingground.HoTT.Typ[U],v:provingground.HoTT.Typ[V]):provingground.HoTT.Func[provingground.HoTT.Func[U,V],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "foldFunction", "tail" : "(u: Typ[U], v: Typ[V]): Func[Term, Func[V, Func[Func[U, Func[V, V]], V]]]", "member" : "provingground.scalahott.ListType.foldFunction", "link" : "provingground\/scalahott\/ListType$.html#foldFunction[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](u:provingground.HoTT.Typ[U],v:provingground.HoTT.Typ[V]):provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[V,provingground.HoTT.Func[provingground.HoTT.Func[U,provingground.HoTT.Func[V,V]],V]]]", "kind" : "def"}, {"label" : "ListRep", "tail" : "", "member" : "provingground.scalahott.ListType.ListRep", "link" : "provingground\/scalahott\/ListType$.html#ListRep[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsScalaRep[provingground.HoTT.Term,List[U]]withProductwithSerializable", "kind" : "case class"}, {"label" : "ListTerm", "tail" : "", "member" : "provingground.scalahott.ListType.ListTerm", "link" : "provingground\/scalahott\/ListType$.html#ListTerm[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsScalaRep.ConstTerm[List[U]]withProductwithSerializable", "kind" : "case class"}, {"label" : "ListTyp", "tail" : "", "member" : "provingground.scalahott.ListType.ListTyp", "link" : "provingground\/scalahott\/ListType$.html#ListTyp[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsHoTT.SmallTypwithProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/scalahott\/ListType$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/scalahott\/ListType$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/scalahott\/ListType$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/scalahott\/ListType$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/scalahott\/ListType$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/scalahott\/ListType$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/scalahott\/ListType$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/ListType$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/ListType$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/ListType$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/scalahott\/ListType$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/scalahott\/ListType$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/scalahott\/ListType$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/scalahott\/ListType$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/scalahott\/ListType$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/scalahott\/ListType$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/scalahott\/ListType$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/scalahott\/ListType$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/scalahott\/ListType$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.scalahott.MatrixTypes", "shortDescription" : "", "object" : "provingground\/scalahott\/MatrixTypes$.html", "members_object" : [{"label" : "ZmatEql", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Func[Term, Func[Term, Term]] with Subs[Func[Term, Func[Term, Term]]], FuncLike[Func[Term, Func[Term, Term]] with Subs[Func[Term, Func[Term, Term]]], FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], Term]]]]]]", "member" : "provingground.scalahott.MatrixTypes.ZmatEql", "link" : "provingground\/scalahott\/MatrixTypes$.html#ZmatEql:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]],provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]]]]]]", "kind" : "val"}, {"label" : "ZmatProd", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Term with Subs[Term], FuncLike[Func[Term, Func[Term, Term]] with Subs[Func[Term, Func[Term, Term]]], FuncLike[Func[Term, Func[Term, Term]] with Subs[Func[Term, Func[Term, Term]]], FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], Func[Func[Term, Func[Term, Term]], Term]]]]]]]]]", "member" : "provingground.scalahott.MatrixTypes.ZmatProd", "link" : "provingground\/scalahott\/MatrixTypes$.html#ZmatProd:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]],provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]],provingground.HoTT.Term]]]]]]]]]", "kind" : "val"}, {"label" : "w", "tail" : ": Term with Subs[Term]", "member" : "provingground.scalahott.MatrixTypes.w", "link" : "provingground\/scalahott\/MatrixTypes$.html#w:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "ZmatSum", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Func[Term, Func[Term, Term]] with Subs[Func[Term, Func[Term, Term]]], FuncLike[Func[Term, Func[Term, Term]] with Subs[Func[Term, Func[Term, Term]]], FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], Term]]]]]]", "member" : "provingground.scalahott.MatrixTypes.ZmatSum", "link" : "provingground\/scalahott\/MatrixTypes$.html#ZmatSum:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]],provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]]]]]]", "kind" : "val"}, {"label" : "Matrix", "tail" : "", "member" : "provingground.scalahott.MatrixTypes.Matrix", "link" : "provingground\/scalahott\/MatrixTypes$.html#MatrixextendsAnyRef", "kind" : "implicit class"}, {"label" : "y", "tail" : ": Term with Subs[Term]", "member" : "provingground.scalahott.MatrixTypes.y", "link" : "provingground\/scalahott\/MatrixTypes$.html#y:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "x", "tail" : ": Term with Subs[Term]", "member" : "provingground.scalahott.MatrixTypes.x", "link" : "provingground\/scalahott\/MatrixTypes$.html#x:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "basis", "tail" : ": Term with Subs[Term]", "member" : "provingground.scalahott.MatrixTypes.basis", "link" : "provingground\/scalahott\/MatrixTypes$.html#basis:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "C", "tail" : ": Func[Term, Func[Term, Term]] with Subs[Func[Term, Func[Term, Term]]]", "member" : "provingground.scalahott.MatrixTypes.C", "link" : "provingground\/scalahott\/MatrixTypes$.html#C:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "B", "tail" : ": Func[Term, Func[Term, Term]] with Subs[Func[Term, Func[Term, Term]]]", "member" : "provingground.scalahott.MatrixTypes.B", "link" : "provingground\/scalahott\/MatrixTypes$.html#B:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "A", "tail" : ": Func[Term, Func[Term, Term]] with Subs[Func[Term, Func[Term, Term]]]", "member" : "provingground.scalahott.MatrixTypes.A", "link" : "provingground\/scalahott\/MatrixTypes$.html#A:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "Zmat", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Typ[Term] with Subs[Typ[Term]], FuncTyp[Term, Func[Term, Term]]]]", "member" : "provingground.scalahott.MatrixTypes.Zmat", "link" : "provingground\/scalahott\/MatrixTypes$.html#Zmat:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncTyp[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]]", "kind" : "val"}, {"label" : "W", "tail" : ": Typ[Term] with Subs[Typ[Term]]", "member" : "provingground.scalahott.MatrixTypes.W", "link" : "provingground\/scalahott\/MatrixTypes$.html#W:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "Y", "tail" : ": Typ[Term] with Subs[Typ[Term]]", "member" : "provingground.scalahott.MatrixTypes.Y", "link" : "provingground\/scalahott\/MatrixTypes$.html#Y:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "X", "tail" : ": Typ[Term] with Subs[Typ[Term]]", "member" : "provingground.scalahott.MatrixTypes.X", "link" : "provingground\/scalahott\/MatrixTypes$.html#X:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/scalahott\/MatrixTypes$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/scalahott\/MatrixTypes$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/scalahott\/MatrixTypes$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/scalahott\/MatrixTypes$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/scalahott\/MatrixTypes$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/scalahott\/MatrixTypes$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/scalahott\/MatrixTypes$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/MatrixTypes$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/MatrixTypes$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/MatrixTypes$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/scalahott\/MatrixTypes$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/scalahott\/MatrixTypes$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/scalahott\/MatrixTypes$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/scalahott\/MatrixTypes$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/scalahott\/MatrixTypes$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/scalahott\/MatrixTypes$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/scalahott\/MatrixTypes$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/scalahott\/MatrixTypes$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/scalahott\/MatrixTypes$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.scalahott.NatRing", "shortDescription" : "", "object" : "provingground\/scalahott\/NatRing$.html", "members_object" : [{"label" : "multTerm", "tail" : "", "member" : "provingground.scalahott.SymbolicCRing.multTerm", "link" : "provingground\/scalahott\/SymbolicCRing.html#multTermextendsHoTT.Func[SymbolicCRing.this.LocalTerm,SymbolicCRing.this.LocalTerm]withProductwithSerializable", "kind" : "case class"}, {"label" : "multLiteral", "tail" : "", "member" : "provingground.scalahott.SymbolicCRing.multLiteral", "link" : "provingground\/scalahott\/SymbolicCRing.html#multLiteralextendsHoTT.Func[SymbolicCRing.this.LocalTerm,SymbolicCRing.this.LocalTerm]withProductwithSerializable", "kind" : "case class"}, {"label" : "prod", "tail" : "", "member" : "provingground.scalahott.SymbolicCRing.prod", "link" : "provingground\/scalahott\/SymbolicCRing.html#prod", "kind" : "object"}, {"label" : "AdditiveMorphism", "tail" : "", "member" : "provingground.scalahott.SymbolicCRing.AdditiveMorphism", "link" : "provingground\/scalahott\/SymbolicCRing.html#AdditiveMorphism[U<:SymbolicCRing.this.LocalTermwithprovingground.HoTT.Subs[U]]extendsHoTT.Func[SymbolicCRing.this.LocalTerm,SymbolicCRing.this.LocalTerm]withProductwithSerializable", "kind" : "case class"}, {"label" : "AddTerm", "tail" : "", "member" : "provingground.scalahott.SymbolicCRing.AddTerm", "link" : "provingground\/scalahott\/SymbolicCRing.html#AddTermextendsHoTT.Func[SymbolicCRing.this.LocalTerm,SymbolicCRing.this.LocalTerm]withProductwithSerializable", "kind" : "case class"}, {"label" : "AddLiteral", "tail" : "", "member" : "provingground.scalahott.SymbolicCRing.AddLiteral", "link" : "provingground\/scalahott\/SymbolicCRing.html#AddLiteralextendsHoTT.Func[SymbolicCRing.this.LocalTerm,SymbolicCRing.this.LocalTerm]withProductwithSerializable", "kind" : "case class"}, {"label" : "LiteralSum", "tail" : "", "member" : "provingground.scalahott.SymbolicCRing.LiteralSum", "link" : "provingground\/scalahott\/SymbolicCRing.html#LiteralSum", "kind" : "object"}, {"label" : "sum", "tail" : "", "member" : "provingground.scalahott.SymbolicCRing.sum", "link" : "provingground\/scalahott\/SymbolicCRing.html#sum", "kind" : "object"}, {"label" : "Reciprocal", "tail" : "", "member" : "provingground.scalahott.SymbolicCRing.Reciprocal", "link" : "provingground\/scalahott\/SymbolicCRing.html#Reciprocal", "kind" : "object"}, {"label" : "PiTerm", "tail" : "", "member" : "provingground.scalahott.SymbolicCRing.PiTerm", "link" : "provingground\/scalahott\/SymbolicCRing.html#PiTerm", "kind" : "object"}, {"label" : "PiTerm", "tail" : "", "member" : "provingground.scalahott.SymbolicCRing.PiTerm", "link" : "provingground\/scalahott\/SymbolicCRing.html#PiTermextendsSymbolicCRing.this.LocalTermwithFoldedTerm[SymbolicCRing.this.LocalTerm]withProductwithSerializable", "kind" : "case class"}, {"label" : "LitProd", "tail" : "", "member" : "provingground.scalahott.SymbolicCRing.LitProd", "link" : "provingground\/scalahott\/SymbolicCRing.html#LitProd", "kind" : "object"}, {"label" : "SigmaTerm", "tail" : "", "member" : "provingground.scalahott.SymbolicCRing.SigmaTerm", "link" : "provingground\/scalahott\/SymbolicCRing.html#SigmaTerm", "kind" : "object"}, {"label" : "SigmaTerm", "tail" : "", "member" : "provingground.scalahott.SymbolicCRing.SigmaTerm", "link" : "provingground\/scalahott\/SymbolicCRing.html#SigmaTermextendsSymbolicCRing.this.LocalTermwithFoldedTerm[SymbolicCRing.this.LocalTerm]withProductwithSerializable", "kind" : "case class"}, {"label" : "Comb", "tail" : "", "member" : "provingground.scalahott.SymbolicCRing.Comb", "link" : "provingground\/scalahott\/SymbolicCRing.html#Comb", "kind" : "object"}, {"label" : "Literal", "tail" : "", "member" : "provingground.scalahott.SymbolicCRing.Literal", "link" : "provingground\/scalahott\/SymbolicCRing.html#Literal", "kind" : "object"}, {"label" : "LocalTyp", "tail" : "", "member" : "provingground.scalahott.SymbolicCRing.LocalTyp", "link" : "provingground\/scalahott\/SymbolicCRing.html#LocalTyp", "kind" : "object"}, {"label" : "incl", "tail" : "(r: SymbolicCRing[A])(arg0: CRing[A]): Rec[LocalTerm]", "member" : "provingground.scalahott.NatRing.incl", "link" : "provingground\/scalahott\/NatRing$.html#incl[A](r:provingground.scalahott.SymbolicCRing[A])(implicitevidence$1:spire.algebra.CRing[A]):provingground.scalahott.NatRing.Rec[r.LocalTerm]", "kind" : "def"}, {"label" : "Induc", "tail" : "", "member" : "provingground.scalahott.NatRing.Induc", "link" : "provingground\/scalahott\/NatRing$.html#Induc", "kind" : "object"}, {"label" : "Induc", "tail" : "", "member" : "provingground.scalahott.NatRing.Induc", "link" : "provingground\/scalahott\/NatRing$.html#Induc[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsHoTT.FuncLike[provingground.scalahott.NatRing.Nat,U]withHoTT.Subs[provingground.scalahott.NatRing.Induc[U]]withProductwithSerializable", "kind" : "case class"}, {"label" : "Rec", "tail" : "", "member" : "provingground.scalahott.NatRing.Rec", "link" : "provingground\/scalahott\/NatRing$.html#Rec[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsHoTT.Func[provingground.scalahott.NatRing.Nat,U]withProductwithSerializable", "kind" : "case class"}, {"label" : "recDefn", "tail" : "(n: SafeLong, formal: U, h: (SafeLong) ⇒ (U) ⇒ U): U", "member" : "provingground.scalahott.NatRing.recDefn", "link" : "provingground\/scalahott\/NatRing$.html#recDefn[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](n:spire.math.SafeLong,formal:U,h:spire.math.SafeLong=>(U=>U)):U", "kind" : "def"}, {"label" : "intLiteral", "tail" : "(n: Int): Nat", "member" : "provingground.scalahott.NatRing.intLiteral", "link" : "provingground\/scalahott\/NatRing$.html#intLiteral(n:Int):provingground.scalahott.NatRing.Nat", "kind" : "implicit def"}, {"label" : "Nat", "tail" : "", "member" : "provingground.scalahott.NatRing.Nat", "link" : "provingground\/scalahott\/NatRing$.html#Nat=provingground.scalahott.NatRing.LocalTerm", "kind" : "type"}, {"label" : "NatTyp", "tail" : ": LocalTyp.type", "member" : "provingground.scalahott.NatRing.NatTyp", "link" : "provingground\/scalahott\/NatRing$.html#NatTyp:provingground.scalahott.NatRing.LocalTyp.type", "kind" : "val"}, {"label" : "succ", "tail" : ": Func[RepTerm[SafeLong] with Subs[RepTerm[SafeLong]], LocalTerm]", "member" : "provingground.scalahott.NatRing.succ", "link" : "provingground\/scalahott\/NatRing$.html#succ:provingground.HoTT.Func[provingground.scalahott.RepTerm[spire.math.SafeLong]withprovingground.HoTT.Subs[provingground.scalahott.RepTerm[spire.math.SafeLong]],provingground.scalahott.NatRing.LocalTerm]", "kind" : "val"}, {"label" : "x", "tail" : ": RepTerm[SafeLong] with Subs[RepTerm[SafeLong]]", "member" : "provingground.scalahott.NatRing.x", "link" : "provingground\/scalahott\/NatRing$.html#x:provingground.scalahott.RepTerm[spire.math.SafeLong]withprovingground.HoTT.Subs[provingground.scalahott.RepTerm[spire.math.SafeLong]]", "kind" : "val"}, {"label" : "toString", "tail" : "(): String", "member" : "provingground.scalahott.NatRing.toString", "link" : "provingground\/scalahott\/NatRing$.html#toString():String", "kind" : "def"}, {"label" : "cringStructure", "tail" : ": CRing[LocalTerm]", "member" : "provingground.scalahott.SymbolicCRing.cringStructure", "link" : "provingground\/scalahott\/NatRing$.html#cringStructure:spire.algebra.CRing[SymbolicCRing.this.LocalTerm]", "kind" : "implicit val"}, {"label" : "power", "tail" : "(x: LocalTerm, n: Int): LocalTerm", "member" : "provingground.scalahott.SymbolicCRing.power", "link" : "provingground\/scalahott\/NatRing$.html#power(x:SymbolicCRing.this.LocalTerm,n:Int):SymbolicCRing.this.LocalTerm", "kind" : "def"}, {"label" : "posPower", "tail" : "(x: LocalTerm, n: Int, accum: LocalTerm): LocalTerm", "member" : "provingground.scalahott.SymbolicCRing.posPower", "link" : "provingground\/scalahott\/NatRing$.html#posPower(x:SymbolicCRing.this.LocalTerm,n:Int,accum:SymbolicCRing.this.LocalTerm):SymbolicCRing.this.LocalTerm", "kind" : "final def"}, {"label" : "funcSum", "tail" : "(f: (LocalTerm) ⇒ LocalTerm, g: (LocalTerm) ⇒ LocalTerm): Func[RepTerm[SafeLong], LocalTerm]", "member" : "provingground.scalahott.SymbolicCRing.funcSum", "link" : "provingground\/scalahott\/NatRing$.html#funcSum(f:SymbolicCRing.this.LocalTerm=>SymbolicCRing.this.LocalTerm,g:SymbolicCRing.this.LocalTerm=>SymbolicCRing.this.LocalTerm):provingground.HoTT.Func[provingground.scalahott.RepTerm[A],SymbolicCRing.this.LocalTerm]", "kind" : "def"}, {"label" : "reciprocal", "tail" : ": Func[LocalTerm, LocalTerm]", "member" : "provingground.scalahott.SymbolicCRing.reciprocal", "link" : "provingground\/scalahott\/NatRing$.html#reciprocal:provingground.HoTT.Func[SymbolicCRing.this.LocalTerm,SymbolicCRing.this.LocalTerm]", "kind" : "lazy val"}, {"label" : "reciprocalOpt", "tail" : ": Option[Func[LocalTerm, LocalTerm]]", "member" : "provingground.scalahott.SymbolicCRing.reciprocalOpt", "link" : "provingground\/scalahott\/NatRing$.html#reciprocalOpt:Option[provingground.HoTT.Func[SymbolicCRing.this.LocalTerm,SymbolicCRing.this.LocalTerm]]", "kind" : "val"}, {"label" : "Op", "tail" : "", "member" : "provingground.scalahott.SymbolicCRing.Op", "link" : "provingground\/scalahott\/NatRing$.html#Op=provingground.HoTT.Func[SymbolicCRing.this.LocalTerm,provingground.HoTT.Func[SymbolicCRing.this.LocalTerm,SymbolicCRing.this.LocalTerm]]", "kind" : "type"}, {"label" : "LocalTerm", "tail" : "", "member" : "provingground.scalahott.SymbolicCRing.LocalTerm", "link" : "provingground\/scalahott\/NatRing$.html#LocalTerm=provingground.scalahott.RepTerm[A]", "kind" : "type"}, {"label" : "negate", "tail" : "(x: LocalTerm): LocalTerm", "member" : "provingground.scalahott.SymbolicCRing.negate", "link" : "provingground\/scalahott\/NatRing$.html#negate(x:SymbolicCRing.this.LocalTerm):SymbolicCRing.this.LocalTerm", "kind" : "def"}, {"label" : "minusone", "tail" : ": LocalTerm with Subs[LocalTerm]", "member" : "provingground.scalahott.SymbolicCRing.minusone", "link" : "provingground\/scalahott\/NatRing$.html#minusone:SymbolicCRing.this.LocalTermwithprovingground.HoTT.Subs[SymbolicCRing.this.LocalTerm]", "kind" : "val"}, {"label" : "two", "tail" : ": SafeLong", "member" : "provingground.scalahott.SymbolicCRing.two", "link" : "provingground\/scalahott\/NatRing$.html#two:A", "kind" : "val"}, {"label" : "ring", "tail" : ": Ring[SafeLong]", "member" : "provingground.scalahott.SymbolicCRing.ring", "link" : "provingground\/scalahott\/NatRing$.html#ring:spire.algebra.Ring[A]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/scalahott\/NatRing$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/scalahott\/NatRing$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/scalahott\/NatRing$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/scalahott\/NatRing$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/scalahott\/NatRing$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/scalahott\/NatRing$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/scalahott\/NatRing$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/NatRing$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/NatRing$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/NatRing$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/scalahott\/NatRing$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/scalahott\/NatRing$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/scalahott\/NatRing$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/scalahott\/NatRing$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/scalahott\/NatRing$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/scalahott\/NatRing$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/scalahott\/NatRing$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/scalahott\/NatRing$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.scalahott.NatTypLong", "shortDescription" : "", "object" : "provingground\/scalahott\/NatTypLong$.html", "members_object" : [{"label" : "Elem", "tail" : "", "member" : "provingground.HoTT.Typ.Elem", "link" : "provingground\/HoTT$$Typ.html#Elem", "kind" : "object"}, {"label" : "neg", "tail" : ": Func[RepTerm[Long], RepTerm[Long]]", "member" : "provingground.scalahott.NatTypLong.neg", "link" : "provingground\/scalahott\/NatTypLong$.html#neg:provingground.HoTT.Func[provingground.scalahott.RepTerm[Long],provingground.scalahott.RepTerm[Long]]", "kind" : "val"}, {"label" : "prod", "tail" : ": Func[RepTerm[Long], Func[RepTerm[Long], RepTerm[Long]]]", "member" : "provingground.scalahott.NatTypLong.prod", "link" : "provingground\/scalahott\/NatTypLong$.html#prod:provingground.HoTT.Func[provingground.scalahott.RepTerm[Long],provingground.HoTT.Func[provingground.scalahott.RepTerm[Long],provingground.scalahott.RepTerm[Long]]]", "kind" : "val"}, {"label" : "sum", "tail" : ": Func[RepTerm[Long], Func[RepTerm[Long], RepTerm[Long]]]", "member" : "provingground.scalahott.NatTypLong.sum", "link" : "provingground\/scalahott\/NatTypLong$.html#sum:provingground.HoTT.Func[provingground.scalahott.RepTerm[Long],provingground.HoTT.Func[provingground.scalahott.RepTerm[Long],provingground.scalahott.RepTerm[Long]]]", "kind" : "val"}, {"label" : "succ", "tail" : ": Func[RepTerm[Long], RepTerm[Long]]", "member" : "provingground.scalahott.NatTypLong.succ", "link" : "provingground\/scalahott\/NatTypLong$.html#succ:provingground.HoTT.Func[provingground.scalahott.RepTerm[Long],provingground.scalahott.RepTerm[Long]]", "kind" : "val"}, {"label" : "zero", "tail" : ": RepTerm[Long]", "member" : "provingground.scalahott.NatTypLong.zero", "link" : "provingground\/scalahott\/NatTypLong$.html#zero:provingground.scalahott.RepTerm[Long]", "kind" : "val"}, {"label" : "rep", "tail" : ": ScalaRep[RepTerm[Long], Long]", "member" : "provingground.scalahott.ScalaTyp.rep", "link" : "provingground\/scalahott\/NatTypLong$.html#rep:provingground.scalahott.ScalaRep[provingground.scalahott.RepTerm[A],A]", "kind" : "implicit val"}, {"label" : "subs", "tail" : "(x: Term, y: Term): Typ[RepTerm[Long]] with Subs[Typ[RepTerm[Long]]]", "member" : "provingground.scalahott.ScalaTyp.subs", "link" : "provingground\/scalahott\/NatTypLong$.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.HoTT.Typ[provingground.scalahott.RepTerm[A]]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.scalahott.RepTerm[A]]]", "kind" : "def"}, {"label" : "newobj", "tail" : "(): Nothing", "member" : "provingground.scalahott.ScalaTyp.newobj", "link" : "provingground\/scalahott\/NatTypLong$.html#newobj:Nothing", "kind" : "def"}, {"label" : "variable", "tail" : "(name: AnySym): RepTerm[Long]", "member" : "provingground.scalahott.ScalaTyp.variable", "link" : "provingground\/scalahott\/NatTypLong$.html#variable(name:provingground.HoTT.AnySym):provingground.scalahott.RepTerm[A]", "kind" : "def"}, {"label" : "typ", "tail" : ": ScalaTypUniv[Long]", "member" : "provingground.scalahott.ScalaTyp.typ", "link" : "provingground\/scalahott\/NatTypLong$.html#typ:provingground.scalahott.ScalaTypUniv[A]", "kind" : "val"}, {"label" : "Obj", "tail" : "", "member" : "provingground.scalahott.ScalaTyp.Obj", "link" : "provingground\/scalahott\/NatTypLong$.html#Obj=provingground.scalahott.RepTerm[A]", "kind" : "type"}, {"label" : "++", "tail" : "(those: V): SigmaTyp[UU, VV]", "member" : "provingground.HoTT.Typ.++", "link" : "provingground\/scalahott\/NatTypLong$.html#++[UU>:provingground.HoTT.Typ[U]<:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[UU],VV<:provingground.HoTT.Termwithprovingground.HoTT.Subs[VV],V<:provingground.HoTT.Typ[VV]withprovingground.HoTT.Subs[V]](those:V):provingground.HoTT.SigmaTyp[UU,VV]", "kind" : "def"}, {"label" : "||", "tail" : "(that: Typ[V]): PlusTyp[UU, V]", "member" : "provingground.HoTT.Typ.||", "link" : "provingground\/scalahott\/NatTypLong$.html#||[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](that:provingground.HoTT.Typ[V]):provingground.HoTT.PlusTyp[UU,V]", "kind" : "def"}, {"label" : "&&", "tail" : "(that: Typ[V]): ProdTyp[UU, V]", "member" : "provingground.HoTT.Typ.&&", "link" : "provingground\/scalahott\/NatTypLong$.html#&&[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](that:provingground.HoTT.Typ[V]):provingground.HoTT.ProdTyp[UU,V]", "kind" : "def"}, {"label" : "~>:", "tail" : "(variable: V): GenFuncTyp[V, UU]", "member" : "provingground.HoTT.Typ.~>:", "link" : "provingground\/scalahott\/NatTypLong$.html#~>:[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](variable:V):provingground.HoTT.GenFuncTyp[V,UU]", "kind" : "def"}, {"label" : "->:", "tail" : "(that: Typ[W]): FuncTyp[W, UU]", "member" : "provingground.HoTT.Typ.->:", "link" : "provingground\/scalahott\/NatTypLong$.html#->:[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU]](that:provingground.HoTT.Typ[W]):provingground.HoTT.FuncTyp[W,UU]", "kind" : "def"}, {"label" : "typedVar", "tail" : "(factory: NameFactory): TypedTerm[RepTerm[Long]]", "member" : "provingground.HoTT.Typ.typedVar", "link" : "provingground\/scalahott\/NatTypLong$.html#typedVar(implicitfactory:provingground.HoTT.NameFactory):provingground.HoTT.TypedTerm[U]", "kind" : "def"}, {"label" : "Var", "tail" : "(factory: NameFactory): RepTerm[Long] with Subs[RepTerm[Long]]", "member" : "provingground.HoTT.Typ.Var", "link" : "provingground\/scalahott\/NatTypLong$.html#Var(implicitfactory:provingground.HoTT.NameFactory):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "sym", "tail" : "(name: Name): RepTerm[Long] with Subs[RepTerm[Long]]", "member" : "provingground.HoTT.Typ.sym", "link" : "provingground\/scalahott\/NatTypLong$.html#sym(implicitname:sourcecode.Name):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "::", "tail" : "(name: String): RepTerm[Long] with Subs[RepTerm[Long]]", "member" : "provingground.HoTT.Typ.::", "link" : "provingground\/scalahott\/NatTypLong$.html#::(name:String):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "typedVar", "tail" : "(name: AnySym): TypedTerm[RepTerm[Long]]", "member" : "provingground.HoTT.Typ.typedVar", "link" : "provingground\/scalahott\/NatTypLong$.html#typedVar(name:provingground.HoTT.AnySym):provingground.HoTT.TypedTerm[U]", "kind" : "def"}, {"label" : "symbObj", "tail" : "(name: AnySym): RepTerm[Long] with Subs[RepTerm[Long]]", "member" : "provingground.HoTT.Typ.symbObj", "link" : "provingground\/scalahott\/NatTypLong$.html#symbObj(name:provingground.HoTT.AnySym):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "typlevel", "tail" : ": Int", "member" : "provingground.HoTT.Typ.typlevel", "link" : "provingground\/scalahott\/NatTypLong$.html#typlevel:Int", "kind" : "lazy val"}, {"label" : "typed", "tail" : ": TypedTerm[Typ[Term]]", "member" : "provingground.HoTT.Typ.typed", "link" : "provingground\/scalahott\/NatTypLong$.html#typed:provingground.HoTT.TypedTerm[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "!:", "tail" : "(term: Term): RepTerm[Long]", "member" : "provingground.HoTT.Typ.!:", "link" : "provingground\/scalahott\/NatTypLong$.html#!:(term:provingground.HoTT.Term):U", "kind" : "def"}, {"label" : "obj", "tail" : "(): RepTerm[Long]", "member" : "provingground.HoTT.Typ.obj", "link" : "provingground\/scalahott\/NatTypLong$.html#obj:U", "kind" : "def"}, {"label" : "usesVar", "tail" : "(t: Term): Boolean", "member" : "provingground.HoTT.Term.usesVar", "link" : "provingground\/scalahott\/NatTypLong$.html#usesVar(t:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "indepOf", "tail" : "(that: Term): Boolean", "member" : "provingground.HoTT.Term.indepOf", "link" : "provingground\/scalahott\/NatTypLong$.html#indepOf(that:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "dependsOn", "tail" : "(that: Term): Boolean", "member" : "provingground.HoTT.Term.dependsOn", "link" : "provingground\/scalahott\/NatTypLong$.html#dependsOn(that:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "replace", "tail" : "(x: Term, y: Term): Typ[RepTerm[Long]] with Subs[Typ[RepTerm[Long]]]", "member" : "provingground.HoTT.Subs.replace", "link" : "provingground\/scalahott\/NatTypLong$.html#replace(x:provingground.HoTT.Term,y:provingground.HoTT.Term):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/scalahott\/NatTypLong$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/scalahott\/NatTypLong$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/scalahott\/NatTypLong$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/scalahott\/NatTypLong$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/scalahott\/NatTypLong$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/scalahott\/NatTypLong$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/scalahott\/NatTypLong$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/NatTypLong$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/NatTypLong$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/NatTypLong$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/scalahott\/NatTypLong$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/scalahott\/NatTypLong$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/scalahott\/NatTypLong$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/scalahott\/NatTypLong$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/scalahott\/NatTypLong$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/scalahott\/NatTypLong$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/scalahott\/NatTypLong$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/scalahott\/NatTypLong$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/scalahott\/NatTypLong$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.scalahott.NatVecTyps", "shortDescription" : "", "object" : "provingground\/scalahott\/NatVecTyps$.html", "members_object" : [{"label" : "cons", "tail" : ": FuncLike[Nat, Func[Nat, Func[RepTerm[Vector[SafeLong]], RepTerm[Vector[SafeLong]]]]]", "member" : "provingground.scalahott.VecTyps.cons", "link" : "provingground\/scalahott\/NatVecTyps$.html#cons:provingground.HoTT.FuncLike[provingground.scalahott.NatRing.Nat,provingground.HoTT.Func[U,provingground.HoTT.Func[provingground.scalahott.RepTerm[Vector[X]],provingground.scalahott.RepTerm[Vector[X]]]]]", "kind" : "val"}, {"label" : "consLike", "tail" : ": FuncLike[RepTerm[SafeLong], FuncLike[Nat, FuncLike[RepTerm[Vector[SafeLong]], RepTerm[Vector[SafeLong]]]]]", "member" : "provingground.scalahott.VecTyps.consLike", "link" : "provingground\/scalahott\/NatVecTyps$.html#consLike:provingground.HoTT.FuncLike[provingground.scalahott.RepTerm[spire.math.SafeLong],provingground.HoTT.FuncLike[U,provingground.HoTT.FuncLike[provingground.scalahott.RepTerm[Vector[X]],provingground.scalahott.RepTerm[Vector[X]]]]]", "kind" : "val"}, {"label" : "consRep", "tail" : ": ScalaPolyRep[FuncLike[RepTerm[SafeLong], FuncLike[Nat, FuncLike[RepTerm[Vector[SafeLong]], RepTerm[Vector[SafeLong]]]]], (SafeLong) ⇒ (SafeLong) ⇒ (Vector[SafeLong]) ⇒ Vector[SafeLong]]", "member" : "provingground.scalahott.VecTyps.consRep", "link" : "provingground\/scalahott\/NatVecTyps$.html#consRep:provingground.scalahott.ScalaPolyRep[provingground.HoTT.FuncLike[provingground.scalahott.RepTerm[spire.math.SafeLong],provingground.HoTT.FuncLike[U,provingground.HoTT.FuncLike[provingground.scalahott.RepTerm[Vector[X]],provingground.scalahott.RepTerm[Vector[X]]]]],spire.math.SafeLong=>(X=>(Vector[X]=>Vector[X]))]", "kind" : "val"}, {"label" : "consFn", "tail" : ": (SafeLong) ⇒ (SafeLong) ⇒ (Vector[SafeLong]) ⇒ Vector[SafeLong]", "member" : "provingground.scalahott.VecTyps.consFn", "link" : "provingground\/scalahott\/NatVecTyps$.html#consFn:spire.math.SafeLong=>(X=>(Vector[X]=>scala.collection.immutable.Vector[X]))", "kind" : "val"}, {"label" : "consTyp", "tail" : ": GenFuncTyp[RepTerm[SafeLong] with Subs[RepTerm[SafeLong]], Func[Nat, Func[RepTerm[Vector[SafeLong]], RepTerm[Vector[SafeLong]]]]]", "member" : "provingground.scalahott.VecTyps.consTyp", "link" : "provingground\/scalahott\/NatVecTyps$.html#consTyp:provingground.HoTT.GenFuncTyp[provingground.scalahott.RepTerm[spire.math.SafeLong]withprovingground.HoTT.Subs[provingground.scalahott.RepTerm[spire.math.SafeLong]],provingground.HoTT.Func[U,provingground.HoTT.Func[provingground.scalahott.RepTerm[Vector[X]],provingground.scalahott.RepTerm[Vector[X]]]]]", "kind" : "val"}, {"label" : "NilVec", "tail" : ": RepTerm[Vector[SafeLong]]", "member" : "provingground.scalahott.VecTyps.NilVec", "link" : "provingground\/scalahott\/NatVecTyps$.html#NilVec:provingground.scalahott.RepTerm[Vector[X]]", "kind" : "val"}, {"label" : "Vec", "tail" : ": Func[RepTerm[SafeLong], Typ[RepTerm[Vector[SafeLong]]]]", "member" : "provingground.scalahott.VecTyps.Vec", "link" : "provingground\/scalahott\/NatVecTyps$.html#Vec:provingground.HoTT.Func[provingground.scalahott.RepTerm[spire.math.SafeLong],provingground.HoTT.Typ[provingground.scalahott.RepTerm[Vector[X]]]]", "kind" : "val"}, {"label" : "n", "tail" : ": RepTerm[SafeLong] with Subs[RepTerm[SafeLong]]", "member" : "provingground.scalahott.VecTyps.n", "link" : "provingground\/scalahott\/NatVecTyps$.html#n:provingground.scalahott.RepTerm[spire.math.SafeLong]withprovingground.HoTT.Subs[provingground.scalahott.RepTerm[spire.math.SafeLong]]", "kind" : "val"}, {"label" : "vrep", "tail" : ": ScalaPolyRep[RepTerm[Vector[SafeLong]], Vector[SafeLong]]", "member" : "provingground.scalahott.VecTyps.vrep", "link" : "provingground\/scalahott\/NatVecTyps$.html#vrep:provingground.scalahott.ScalaPolyRep[provingground.scalahott.RepTerm[Vector[X]],Vector[X]]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/scalahott\/NatVecTyps$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/scalahott\/NatVecTyps$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/scalahott\/NatVecTyps$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/scalahott\/NatVecTyps$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/scalahott\/NatVecTyps$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/scalahott\/NatVecTyps$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/scalahott\/NatVecTyps$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/NatVecTyps$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/NatVecTyps$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/NatVecTyps$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/scalahott\/NatVecTyps$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/scalahott\/NatVecTyps$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/scalahott\/NatVecTyps$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/scalahott\/NatVecTyps$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/scalahott\/NatVecTyps$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/scalahott\/NatVecTyps$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/scalahott\/NatVecTyps$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/scalahott\/NatVecTyps$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/scalahott\/NatVecTyps$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.scalahott.Norm", "shortDescription" : "", "object" : "provingground\/scalahott\/Norm$.html", "members_object" : [{"label" : "supWeight", "tail" : "(fn: FuncLike[Term, Term])(x: Term): Double", "member" : "provingground.scalahott.Norm.supWeight", "link" : "provingground\/scalahott\/Norm$.html#supWeight(fn:provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term])(x:provingground.HoTT.Term):Double", "kind" : "def"}, {"label" : "supWeightExp", "tail" : "(fn: FuncLike[Term, Term])(x: Term): Option[Double]", "member" : "provingground.scalahott.Norm.supWeightExp", "link" : "provingground\/scalahott\/Norm$.html#supWeightExp(fn:provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term])(x:provingground.HoTT.Term):Option[Double]", "kind" : "def"}, {"label" : "supnorm", "tail" : "(term: Term): Option[Double]", "member" : "provingground.scalahott.Norm.supnorm", "link" : "provingground\/scalahott\/Norm$.html#supnorm(term:provingground.HoTT.Term):Option[Double]", "kind" : "def"}, {"label" : "maxopt", "tail" : "(l: List[Option[Double]]): Option[Double]", "member" : "provingground.scalahott.Norm.maxopt", "link" : "provingground\/scalahott\/Norm$.html#maxopt(l:List[Option[Double]]):Option[Double]", "kind" : "def"}, {"label" : "foldopt", "tail" : "(op: (U, U) ⇒ U)(l: List[Option[U]]): Option[U]", "member" : "provingground.scalahott.Norm.foldopt", "link" : "provingground\/scalahott\/Norm$.html#foldopt[U](op:(U,U)=>U)(l:List[Option[U]]):Option[U]", "kind" : "def"}, {"label" : "optop", "tail" : "(op: (U, U) ⇒ U)(a: Option[U], b: Option[U]): Option[U]", "member" : "provingground.scalahott.Norm.optop", "link" : "provingground\/scalahott\/Norm$.html#optop[U,V](op:(U,U)=>U)(a:Option[U],b:Option[U]):Option[U]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/scalahott\/Norm$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/scalahott\/Norm$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/scalahott\/Norm$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/scalahott\/Norm$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/scalahott\/Norm$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/scalahott\/Norm$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/scalahott\/Norm$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/Norm$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/Norm$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/Norm$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/scalahott\/Norm$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/scalahott\/Norm$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/scalahott\/Norm$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/scalahott\/Norm$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/scalahott\/Norm$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/scalahott\/Norm$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/scalahott\/Norm$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/scalahott\/Norm$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/scalahott\/Norm$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.scalahott.PlusTypInduc", "shortDescription" : "", "object" : "provingground\/scalahott\/PlusTypInduc$.html", "members_object" : [{"label" : "induc", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Func[Term, Typ[Term]] with Subs[Func[Term, Typ[Term]]], FuncLike[FuncLike[Term, Term] with Subs[FuncLike[Term, Term]], FuncLike[FuncLike[Term, Term] with Subs[FuncLike[Term, Term]], PlusExtendedDepFunction[Term]]]]]]", "member" : "provingground.scalahott.PlusTypInduc.induc", "link" : "provingground\/scalahott\/PlusTypInduc$.html#induc:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]],provingground.HoTT.FuncLike[provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term]],provingground.scalahott.PlusTypInduc.PlusExtendedDepFunction[provingground.HoTT.Term]]]]]]", "kind" : "val"}, {"label" : "gdep", "tail" : ": FuncLike[Term, Term] with Subs[FuncLike[Term, Term]]", "member" : "provingground.scalahott.PlusTypInduc.gdep", "link" : "provingground\/scalahott\/PlusTypInduc$.html#gdep:provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "fdep", "tail" : ": FuncLike[Term, Term] with Subs[FuncLike[Term, Term]]", "member" : "provingground.scalahott.PlusTypInduc.fdep", "link" : "provingground\/scalahott\/PlusTypInduc$.html#fdep:provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "C_b", "tail" : ": FuncLike[Term with Subs[Term], Typ[Term]]", "member" : "provingground.scalahott.PlusTypInduc.C_b", "link" : "provingground\/scalahott\/PlusTypInduc$.html#C_b:provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "C_a", "tail" : ": FuncLike[Term with Subs[Term], Typ[Term]]", "member" : "provingground.scalahott.PlusTypInduc.C_a", "link" : "provingground\/scalahott\/PlusTypInduc$.html#C_a:provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "b", "tail" : ": Term with Subs[Term]", "member" : "provingground.scalahott.PlusTypInduc.b", "link" : "provingground\/scalahott\/PlusTypInduc$.html#b:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "a", "tail" : ": Term with Subs[Term]", "member" : "provingground.scalahott.PlusTypInduc.a", "link" : "provingground\/scalahott\/PlusTypInduc$.html#a:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "Cs", "tail" : ": Func[Term, Typ[Term]] with Subs[Func[Term, Typ[Term]]]", "member" : "provingground.scalahott.PlusTypInduc.Cs", "link" : "provingground\/scalahott\/PlusTypInduc$.html#Cs:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "AplusB", "tail" : ": PlusTyp[Term, Term]", "member" : "provingground.scalahott.PlusTypInduc.AplusB", "link" : "provingground\/scalahott\/PlusTypInduc$.html#AplusB:provingground.HoTT.PlusTyp[provingground.HoTT.Term,provingground.HoTT.Term]", "kind" : "val"}, {"label" : "rec", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Func[Term, Term] with Subs[Func[Term, Term]], FuncLike[Func[Term, Term] with Subs[Func[Term, Term]], PlusExtendedFunction[Term]]]]]]", "member" : "provingground.scalahott.PlusTypInduc.rec", "link" : "provingground\/scalahott\/PlusTypInduc$.html#rec:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]],provingground.scalahott.PlusTypInduc.PlusExtendedFunction[provingground.HoTT.Term]]]]]]", "kind" : "val"}, {"label" : "g", "tail" : ": Func[Term, Term] with Subs[Func[Term, Term]]", "member" : "provingground.scalahott.PlusTypInduc.g", "link" : "provingground\/scalahott\/PlusTypInduc$.html#g:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "f", "tail" : ": Func[Term, Term] with Subs[Func[Term, Term]]", "member" : "provingground.scalahott.PlusTypInduc.f", "link" : "provingground\/scalahott\/PlusTypInduc$.html#f:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "C", "tail" : ": Typ[Term] with Subs[Typ[Term]]", "member" : "provingground.scalahott.PlusTypInduc.C", "link" : "provingground\/scalahott\/PlusTypInduc$.html#C:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "B", "tail" : ": Typ[Term] with Subs[Typ[Term]]", "member" : "provingground.scalahott.PlusTypInduc.B", "link" : "provingground\/scalahott\/PlusTypInduc$.html#B:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "A", "tail" : ": Typ[Term] with Subs[Typ[Term]]", "member" : "provingground.scalahott.PlusTypInduc.A", "link" : "provingground\/scalahott\/PlusTypInduc$.html#A:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "PlusExtendedDepFunction", "tail" : "", "member" : "provingground.scalahott.PlusTypInduc.PlusExtendedDepFunction", "link" : "provingground\/scalahott\/PlusTypInduc$.html#PlusExtendedDepFunction[V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]]extendsHoTT.FuncLike[provingground.HoTT.Term,V]withHoTT.Subs[provingground.scalahott.PlusTypInduc.PlusExtendedDepFunction[V]]withProductwithSerializable", "kind" : "case class"}, {"label" : "PlusExtendedFunction", "tail" : "", "member" : "provingground.scalahott.PlusTypInduc.PlusExtendedFunction", "link" : "provingground\/scalahott\/PlusTypInduc$.html#PlusExtendedFunction[V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]]extendsHoTT.Func[provingground.HoTT.Term,V]withHoTT.Subs[provingground.scalahott.PlusTypInduc.PlusExtendedFunction[V]]withProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/scalahott\/PlusTypInduc$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/scalahott\/PlusTypInduc$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/scalahott\/PlusTypInduc$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/scalahott\/PlusTypInduc$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/scalahott\/PlusTypInduc$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/scalahott\/PlusTypInduc$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/scalahott\/PlusTypInduc$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/PlusTypInduc$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/PlusTypInduc$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/PlusTypInduc$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/scalahott\/PlusTypInduc$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/scalahott\/PlusTypInduc$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/scalahott\/PlusTypInduc$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/scalahott\/PlusTypInduc$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/scalahott\/PlusTypInduc$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/scalahott\/PlusTypInduc$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/scalahott\/PlusTypInduc$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/scalahott\/PlusTypInduc$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/scalahott\/PlusTypInduc$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.scalahott.QField", "shortDescription" : "", "object" : "provingground\/scalahott\/QField$.html", "members_object" : [{"label" : "multTerm", "tail" : "", "member" : "provingground.scalahott.SymbolicCRing.multTerm", "link" : "provingground\/scalahott\/SymbolicCRing.html#multTermextendsHoTT.Func[SymbolicCRing.this.LocalTerm,SymbolicCRing.this.LocalTerm]withProductwithSerializable", "kind" : "case class"}, {"label" : "multLiteral", "tail" : "", "member" : "provingground.scalahott.SymbolicCRing.multLiteral", "link" : "provingground\/scalahott\/SymbolicCRing.html#multLiteralextendsHoTT.Func[SymbolicCRing.this.LocalTerm,SymbolicCRing.this.LocalTerm]withProductwithSerializable", "kind" : "case class"}, {"label" : "prod", "tail" : "", "member" : "provingground.scalahott.SymbolicCRing.prod", "link" : "provingground\/scalahott\/SymbolicCRing.html#prod", "kind" : "object"}, {"label" : "AdditiveMorphism", "tail" : "", "member" : "provingground.scalahott.SymbolicCRing.AdditiveMorphism", "link" : "provingground\/scalahott\/SymbolicCRing.html#AdditiveMorphism[U<:SymbolicCRing.this.LocalTermwithprovingground.HoTT.Subs[U]]extendsHoTT.Func[SymbolicCRing.this.LocalTerm,SymbolicCRing.this.LocalTerm]withProductwithSerializable", "kind" : "case class"}, {"label" : "AddTerm", "tail" : "", "member" : "provingground.scalahott.SymbolicCRing.AddTerm", "link" : "provingground\/scalahott\/SymbolicCRing.html#AddTermextendsHoTT.Func[SymbolicCRing.this.LocalTerm,SymbolicCRing.this.LocalTerm]withProductwithSerializable", "kind" : "case class"}, {"label" : "AddLiteral", "tail" : "", "member" : "provingground.scalahott.SymbolicCRing.AddLiteral", "link" : "provingground\/scalahott\/SymbolicCRing.html#AddLiteralextendsHoTT.Func[SymbolicCRing.this.LocalTerm,SymbolicCRing.this.LocalTerm]withProductwithSerializable", "kind" : "case class"}, {"label" : "LiteralSum", "tail" : "", "member" : "provingground.scalahott.SymbolicCRing.LiteralSum", "link" : "provingground\/scalahott\/SymbolicCRing.html#LiteralSum", "kind" : "object"}, {"label" : "sum", "tail" : "", "member" : "provingground.scalahott.SymbolicCRing.sum", "link" : "provingground\/scalahott\/SymbolicCRing.html#sum", "kind" : "object"}, {"label" : "Reciprocal", "tail" : "", "member" : "provingground.scalahott.SymbolicCRing.Reciprocal", "link" : "provingground\/scalahott\/SymbolicCRing.html#Reciprocal", "kind" : "object"}, {"label" : "PiTerm", "tail" : "", "member" : "provingground.scalahott.SymbolicCRing.PiTerm", "link" : "provingground\/scalahott\/SymbolicCRing.html#PiTerm", "kind" : "object"}, {"label" : "PiTerm", "tail" : "", "member" : "provingground.scalahott.SymbolicCRing.PiTerm", "link" : "provingground\/scalahott\/SymbolicCRing.html#PiTermextendsSymbolicCRing.this.LocalTermwithFoldedTerm[SymbolicCRing.this.LocalTerm]withProductwithSerializable", "kind" : "case class"}, {"label" : "LitProd", "tail" : "", "member" : "provingground.scalahott.SymbolicCRing.LitProd", "link" : "provingground\/scalahott\/SymbolicCRing.html#LitProd", "kind" : "object"}, {"label" : "SigmaTerm", "tail" : "", "member" : "provingground.scalahott.SymbolicCRing.SigmaTerm", "link" : "provingground\/scalahott\/SymbolicCRing.html#SigmaTerm", "kind" : "object"}, {"label" : "SigmaTerm", "tail" : "", "member" : "provingground.scalahott.SymbolicCRing.SigmaTerm", "link" : "provingground\/scalahott\/SymbolicCRing.html#SigmaTermextendsSymbolicCRing.this.LocalTermwithFoldedTerm[SymbolicCRing.this.LocalTerm]withProductwithSerializable", "kind" : "case class"}, {"label" : "Comb", "tail" : "", "member" : "provingground.scalahott.SymbolicCRing.Comb", "link" : "provingground\/scalahott\/SymbolicCRing.html#Comb", "kind" : "object"}, {"label" : "Literal", "tail" : "", "member" : "provingground.scalahott.SymbolicCRing.Literal", "link" : "provingground\/scalahott\/SymbolicCRing.html#Literal", "kind" : "object"}, {"label" : "LocalTyp", "tail" : "", "member" : "provingground.scalahott.SymbolicCRing.LocalTyp", "link" : "provingground\/scalahott\/SymbolicCRing.html#LocalTyp", "kind" : "object"}, {"label" : "transpEqR", "tail" : ": FuncLike[RepTerm[Rational] with Subs[RepTerm[Rational]], FuncLike[RepTerm[Rational] with Subs[RepTerm[Rational]], FuncLike[RepTerm[Rational] with Subs[RepTerm[Rational]], Func[Equality[RepTerm[Rational] with Subs[RepTerm[Rational]]], Func[PosWit, PosWit]]]]]", "member" : "provingground.scalahott.QField.transpEqR", "link" : "provingground\/scalahott\/QField$.html#transpEqR:provingground.HoTT.FuncLike[provingground.scalahott.RepTerm[spire.math.Rational]withprovingground.HoTT.Subs[provingground.scalahott.RepTerm[spire.math.Rational]],provingground.HoTT.FuncLike[provingground.scalahott.RepTerm[spire.math.Rational]withprovingground.HoTT.Subs[provingground.scalahott.RepTerm[spire.math.Rational]],provingground.HoTT.FuncLike[provingground.scalahott.RepTerm[spire.math.Rational]withprovingground.HoTT.Subs[provingground.scalahott.RepTerm[spire.math.Rational]],provingground.HoTT.Func[provingground.HoTT.Equality[provingground.scalahott.RepTerm[spire.math.Rational]withprovingground.HoTT.Subs[provingground.scalahott.RepTerm[spire.math.Rational]]],provingground.HoTT.Func[provingground.scalahott.QField.PosWit,provingground.scalahott.QField.PosWit]]]]]", "kind" : "val"}, {"label" : "transpEqL", "tail" : ": FuncLike[RepTerm[Rational] with Subs[RepTerm[Rational]], FuncLike[RepTerm[Rational] with Subs[RepTerm[Rational]], FuncLike[RepTerm[Rational] with Subs[RepTerm[Rational]], Func[Equality[RepTerm[Rational] with Subs[RepTerm[Rational]]], Func[PosWit, PosWit]]]]]", "member" : "provingground.scalahott.QField.transpEqL", "link" : "provingground\/scalahott\/QField$.html#transpEqL:provingground.HoTT.FuncLike[provingground.scalahott.RepTerm[spire.math.Rational]withprovingground.HoTT.Subs[provingground.scalahott.RepTerm[spire.math.Rational]],provingground.HoTT.FuncLike[provingground.scalahott.RepTerm[spire.math.Rational]withprovingground.HoTT.Subs[provingground.scalahott.RepTerm[spire.math.Rational]],provingground.HoTT.FuncLike[provingground.scalahott.RepTerm[spire.math.Rational]withprovingground.HoTT.Subs[provingground.scalahott.RepTerm[spire.math.Rational]],provingground.HoTT.Func[provingground.HoTT.Equality[provingground.scalahott.RepTerm[spire.math.Rational]withprovingground.HoTT.Subs[provingground.scalahott.RepTerm[spire.math.Rational]]],provingground.HoTT.Func[provingground.scalahott.QField.PosWit,provingground.scalahott.QField.PosWit]]]]]", "kind" : "val"}, {"label" : "w", "tail" : ": RepTerm[Rational] with Subs[RepTerm[Rational]]", "member" : "provingground.scalahott.QField.w", "link" : "provingground\/scalahott\/QField$.html#w:provingground.scalahott.RepTerm[spire.math.Rational]withprovingground.HoTT.Subs[provingground.scalahott.RepTerm[spire.math.Rational]]", "kind" : "val"}, {"label" : "z", "tail" : ": RepTerm[Rational] with Subs[RepTerm[Rational]]", "member" : "provingground.scalahott.QField.z", "link" : "provingground\/scalahott\/QField$.html#z:provingground.scalahott.RepTerm[spire.math.Rational]withprovingground.HoTT.Subs[provingground.scalahott.RepTerm[spire.math.Rational]]", "kind" : "val"}, {"label" : "posAndNegPos", "tail" : ": FuncLike[RepTerm[Rational] with Subs[RepTerm[Rational]], FuncLike[Pos, FuncLike[Pos, Equality[RepTerm[Rational] with Subs[RepTerm[Rational]]]]]] with Subs[FuncLike[RepTerm[Rational] with Subs[RepTerm[Rational]], FuncLike[Pos, FuncLike[Pos, Equality[RepTerm[Rational] with Subs[RepTerm[Rational]]]]]]]", "member" : "provingground.scalahott.QField.posAndNegPos", "link" : "provingground\/scalahott\/QField$.html#posAndNegPos:provingground.HoTT.FuncLike[provingground.scalahott.RepTerm[spire.math.Rational]withprovingground.HoTT.Subs[provingground.scalahott.RepTerm[spire.math.Rational]],provingground.HoTT.FuncLike[provingground.scalahott.QField.Pos,provingground.HoTT.FuncLike[provingground.scalahott.QField.Pos,provingground.HoTT.Equality[provingground.scalahott.RepTerm[spire.math.Rational]withprovingground.HoTT.Subs[provingground.scalahott.RepTerm[spire.math.Rational]]]]]]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.scalahott.RepTerm[spire.math.Rational]withprovingground.HoTT.Subs[provingground.scalahott.RepTerm[spire.math.Rational]],provingground.HoTT.FuncLike[provingground.scalahott.QField.Pos,provingground.HoTT.FuncLike[provingground.scalahott.QField.Pos,provingground.HoTT.Equality[provingground.scalahott.RepTerm[spire.math.Rational]withprovingground.HoTT.Subs[provingground.scalahott.RepTerm[spire.math.Rational]]]]]]]", "kind" : "val"}, {"label" : "dichotomy", "tail" : ": FuncLike[RepTerm[Rational] with Subs[RepTerm[Rational]], Term] with Subs[FuncLike[RepTerm[Rational] with Subs[RepTerm[Rational]], Term]]", "member" : "provingground.scalahott.QField.dichotomy", "link" : "provingground\/scalahott\/QField$.html#dichotomy:provingground.HoTT.FuncLike[provingground.scalahott.RepTerm[spire.math.Rational]withprovingground.HoTT.Subs[provingground.scalahott.RepTerm[spire.math.Rational]],provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.scalahott.RepTerm[spire.math.Rational]withprovingground.HoTT.Subs[provingground.scalahott.RepTerm[spire.math.Rational]],provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "leq", "tail" : ": FuncLike[RepTerm[Rational] with Subs[RepTerm[Rational]], FuncLike[RepTerm[Rational] with Subs[RepTerm[Rational]], Pos]]", "member" : "provingground.scalahott.QField.leq", "link" : "provingground\/scalahott\/QField$.html#leq:provingground.HoTT.FuncLike[provingground.scalahott.RepTerm[spire.math.Rational]withprovingground.HoTT.Subs[provingground.scalahott.RepTerm[spire.math.Rational]],provingground.HoTT.FuncLike[provingground.scalahott.RepTerm[spire.math.Rational]withprovingground.HoTT.Subs[provingground.scalahott.RepTerm[spire.math.Rational]],provingground.scalahott.QField.Pos]]", "kind" : "lazy val"}, {"label" : "y", "tail" : ": RepTerm[Rational] with Subs[RepTerm[Rational]]", "member" : "provingground.scalahott.QField.y", "link" : "provingground\/scalahott\/QField$.html#y:provingground.scalahott.RepTerm[spire.math.Rational]withprovingground.HoTT.Subs[provingground.scalahott.RepTerm[spire.math.Rational]]", "kind" : "val"}, {"label" : "x", "tail" : ": RepTerm[Rational] with Subs[RepTerm[Rational]]", "member" : "provingground.scalahott.QField.x", "link" : "provingground\/scalahott\/QField$.html#x:provingground.scalahott.RepTerm[spire.math.Rational]withprovingground.HoTT.Subs[provingground.scalahott.RepTerm[spire.math.Rational]]", "kind" : "val"}, {"label" : "Pos", "tail" : "", "member" : "provingground.scalahott.QField.Pos", "link" : "provingground\/scalahott\/QField$.html#PosextendsHoTT.Typ[provingground.scalahott.QField.PosWit]withHoTT.Subs[provingground.scalahott.QField.Pos]withProductwithSerializable", "kind" : "case class"}, {"label" : "SymbPosWit", "tail" : "", "member" : "provingground.scalahott.QField.SymbPosWit", "link" : "provingground\/scalahott\/QField$.html#SymbPosWitextendsQField.PosWitwithHoTT.SymbolicwithProductwithSerializable", "kind" : "case class"}, {"label" : "PosZero", "tail" : "", "member" : "provingground.scalahott.QField.PosZero", "link" : "provingground\/scalahott\/QField$.html#PosZero", "kind" : "object"}, {"label" : "PosLiteral", "tail" : "", "member" : "provingground.scalahott.QField.PosLiteral", "link" : "provingground\/scalahott\/QField$.html#PosLiteralextendsQField.PosWitwithProductwithSerializable", "kind" : "case class"}, {"label" : "PosWitProd", "tail" : "", "member" : "provingground.scalahott.QField.PosWitProd", "link" : "provingground\/scalahott\/QField$.html#PosWitProdextendsQField.PosWitwithProductwithSerializable", "kind" : "case class"}, {"label" : "PosWitSum", "tail" : "", "member" : "provingground.scalahott.QField.PosWitSum", "link" : "provingground\/scalahott\/QField$.html#PosWitSumextendsQField.PosWitwithProductwithSerializable", "kind" : "case class"}, {"label" : "PosWit", "tail" : "", "member" : "provingground.scalahott.QField.PosWit", "link" : "provingground\/scalahott\/QField$.html#PosWitextendsHoTT.TermwithHoTT.Subs[provingground.scalahott.QField.PosWit]", "kind" : "sealed trait"}, {"label" : "QTyp", "tail" : ": LocalTyp.type", "member" : "provingground.scalahott.QField.QTyp", "link" : "provingground\/scalahott\/QField$.html#QTyp:provingground.scalahott.QField.LocalTyp.type", "kind" : "val"}, {"label" : "toString", "tail" : "(): String", "member" : "provingground.scalahott.QField.toString", "link" : "provingground\/scalahott\/QField$.html#toString():String", "kind" : "def"}, {"label" : "fieldStructure", "tail" : ": Field[LocalTerm]", "member" : "provingground.scalahott.SymbolicField.fieldStructure", "link" : "provingground\/scalahott\/QField$.html#fieldStructure:spire.algebra.Field[SymbolicField.this.LocalTerm]", "kind" : "implicit val"}, {"label" : "power", "tail" : "(x: LocalTerm, n: Int): LocalTerm", "member" : "provingground.scalahott.SymbolicField.power", "link" : "provingground\/scalahott\/QField$.html#power(x:SymbolicField.this.LocalTerm,n:Int):SymbolicField.this.LocalTerm", "kind" : "def"}, {"label" : "reciprocal", "tail" : ": Func[LocalTerm, LocalTerm]", "member" : "provingground.scalahott.SymbolicField.reciprocal", "link" : "provingground\/scalahott\/QField$.html#reciprocal:provingground.HoTT.Func[SymbolicField.this.LocalTerm,SymbolicField.this.LocalTerm]", "kind" : "lazy val"}, {"label" : "field", "tail" : ": Field[Rational]", "member" : "provingground.scalahott.SymbolicField.field", "link" : "provingground\/scalahott\/QField$.html#field:spire.algebra.Field[A]", "kind" : "val"}, {"label" : "cringStructure", "tail" : ": CRing[LocalTerm]", "member" : "provingground.scalahott.SymbolicCRing.cringStructure", "link" : "provingground\/scalahott\/QField$.html#cringStructure:spire.algebra.CRing[SymbolicCRing.this.LocalTerm]", "kind" : "implicit val"}, {"label" : "posPower", "tail" : "(x: LocalTerm, n: Int, accum: LocalTerm): LocalTerm", "member" : "provingground.scalahott.SymbolicCRing.posPower", "link" : "provingground\/scalahott\/QField$.html#posPower(x:SymbolicCRing.this.LocalTerm,n:Int,accum:SymbolicCRing.this.LocalTerm):SymbolicCRing.this.LocalTerm", "kind" : "final def"}, {"label" : "funcSum", "tail" : "(f: (LocalTerm) ⇒ LocalTerm, g: (LocalTerm) ⇒ LocalTerm): Func[RepTerm[Rational], LocalTerm]", "member" : "provingground.scalahott.SymbolicCRing.funcSum", "link" : "provingground\/scalahott\/QField$.html#funcSum(f:SymbolicCRing.this.LocalTerm=>SymbolicCRing.this.LocalTerm,g:SymbolicCRing.this.LocalTerm=>SymbolicCRing.this.LocalTerm):provingground.HoTT.Func[provingground.scalahott.RepTerm[A],SymbolicCRing.this.LocalTerm]", "kind" : "def"}, {"label" : "reciprocalOpt", "tail" : ": Option[Func[LocalTerm, LocalTerm]]", "member" : "provingground.scalahott.SymbolicCRing.reciprocalOpt", "link" : "provingground\/scalahott\/QField$.html#reciprocalOpt:Option[provingground.HoTT.Func[SymbolicCRing.this.LocalTerm,SymbolicCRing.this.LocalTerm]]", "kind" : "val"}, {"label" : "Op", "tail" : "", "member" : "provingground.scalahott.SymbolicCRing.Op", "link" : "provingground\/scalahott\/QField$.html#Op=provingground.HoTT.Func[SymbolicCRing.this.LocalTerm,provingground.HoTT.Func[SymbolicCRing.this.LocalTerm,SymbolicCRing.this.LocalTerm]]", "kind" : "type"}, {"label" : "LocalTerm", "tail" : "", "member" : "provingground.scalahott.SymbolicCRing.LocalTerm", "link" : "provingground\/scalahott\/QField$.html#LocalTerm=provingground.scalahott.RepTerm[A]", "kind" : "type"}, {"label" : "negate", "tail" : "(x: LocalTerm): LocalTerm", "member" : "provingground.scalahott.SymbolicCRing.negate", "link" : "provingground\/scalahott\/QField$.html#negate(x:SymbolicCRing.this.LocalTerm):SymbolicCRing.this.LocalTerm", "kind" : "def"}, {"label" : "minusone", "tail" : ": LocalTerm with Subs[LocalTerm]", "member" : "provingground.scalahott.SymbolicCRing.minusone", "link" : "provingground\/scalahott\/QField$.html#minusone:SymbolicCRing.this.LocalTermwithprovingground.HoTT.Subs[SymbolicCRing.this.LocalTerm]", "kind" : "val"}, {"label" : "two", "tail" : ": Rational", "member" : "provingground.scalahott.SymbolicCRing.two", "link" : "provingground\/scalahott\/QField$.html#two:A", "kind" : "val"}, {"label" : "ring", "tail" : ": Ring[Rational]", "member" : "provingground.scalahott.SymbolicCRing.ring", "link" : "provingground\/scalahott\/QField$.html#ring:spire.algebra.Ring[A]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/scalahott\/QField$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/scalahott\/QField$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/scalahott\/QField$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/scalahott\/QField$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/scalahott\/QField$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/scalahott\/QField$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/scalahott\/QField$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/QField$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/QField$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/QField$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/scalahott\/QField$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/scalahott\/QField$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/scalahott\/QField$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/scalahott\/QField$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/scalahott\/QField$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/scalahott\/QField$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/scalahott\/QField$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/scalahott\/QField$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.scalahott.RecEnum", "shortDescription" : "", "object" : "provingground\/scalahott\/RecEnum$.html", "members_object" : [{"label" : "recEnumList", "tail" : ": (Typ[Term]) ⇒ Option[List[Term]]", "member" : "provingground.scalahott.RecEnum.recEnumList", "link" : "provingground\/scalahott\/RecEnum$.html#recEnumList:provingground.HoTT.Typ[provingground.HoTT.Term]=>Option[List[provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/scalahott\/RecEnum$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/scalahott\/RecEnum$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/scalahott\/RecEnum$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/scalahott\/RecEnum$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/scalahott\/RecEnum$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/scalahott\/RecEnum$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/scalahott\/RecEnum$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/RecEnum$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/RecEnum$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/RecEnum$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/scalahott\/RecEnum$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/scalahott\/RecEnum$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/scalahott\/RecEnum$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/scalahott\/RecEnum$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/scalahott\/RecEnum$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/scalahott\/RecEnum$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/scalahott\/RecEnum$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/scalahott\/RecEnum$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/scalahott\/RecEnum$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.scalahott.RepTerm", "members_trait" : [{"label" : "usesVar", "tail" : "(t: Term): Boolean", "member" : "provingground.HoTT.Term.usesVar", "link" : "provingground\/scalahott\/RepTerm.html#usesVar(t:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "indepOf", "tail" : "(that: Term): Boolean", "member" : "provingground.HoTT.Term.indepOf", "link" : "provingground\/scalahott\/RepTerm.html#indepOf(that:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "dependsOn", "tail" : "(that: Term): Boolean", "member" : "provingground.HoTT.Term.dependsOn", "link" : "provingground\/scalahott\/RepTerm.html#dependsOn(that:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "typed", "tail" : ": TypedTerm[U] forSome {type U >: RepTerm.this.type <: Term with Subs[U]}", "member" : "provingground.HoTT.Term.typed", "link" : "provingground\/scalahott\/RepTerm.html#typed:provingground.HoTT.TypedTerm[U]forSome{typeU>:Term.this.type<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]}", "kind" : "lazy val"}, {"label" : "replace", "tail" : "(x: Term, y: Term): RepTerm[A] with Subs[RepTerm[A]]", "member" : "provingground.HoTT.Subs.replace", "link" : "provingground\/scalahott\/RepTerm.html#replace(x:provingground.HoTT.Term,y:provingground.HoTT.Term):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/scalahott\/RepTerm.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/scalahott\/RepTerm.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/scalahott\/RepTerm.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/scalahott\/RepTerm.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/scalahott\/RepTerm.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/scalahott\/RepTerm.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/scalahott\/RepTerm.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/RepTerm.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/RepTerm.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/RepTerm.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/scalahott\/RepTerm.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/scalahott\/RepTerm.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/scalahott\/RepTerm.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/scalahott\/RepTerm.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/scalahott\/RepTerm.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/scalahott\/RepTerm.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/scalahott\/RepTerm.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/scalahott\/RepTerm.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/scalahott\/RepTerm.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "typ", "tail" : ": Typ[RepTerm[A]]", "member" : "provingground.scalahott.RepTerm.typ", "link" : "provingground\/scalahott\/RepTerm.html#typ:provingground.HoTT.Typ[provingground.scalahott.RepTerm[A]]", "kind" : "abstract val"}, {"label" : "newobj", "tail" : "(): RepTerm[A] with Subs[RepTerm[A]]", "member" : "provingground.HoTT.Subs.newobj", "link" : "provingground\/scalahott\/RepTerm.html#newobj:Uwithprovingground.HoTT.Subs[U]", "kind" : "abstract def"}, {"label" : "subs", "tail" : "(x: Term, y: Term): RepTerm[A] with Subs[RepTerm[A]]", "member" : "provingground.HoTT.Subs.subs", "link" : "provingground\/scalahott\/RepTerm.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):Uwithprovingground.HoTT.Subs[U]", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "provingground\/scalahott\/RepTerm.html", "kind" : "trait"}, {"name" : "provingground.scalahott.ScalaPolyRep", "members_trait" : [{"label" : "||", "tail" : "(that: ScalaPolyRep[U, W]): OrScalaPolyRep[U, W]", "member" : "provingground.scalahott.ScalaPolyRep.||", "link" : "provingground\/scalahott\/ScalaPolyRep.html#||(that:provingground.scalahott.ScalaPolyRep[U,W]):provingground.scalahott.ScalaPolyRep.OrScalaPolyRep[U,W]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/scalahott\/ScalaPolyRep.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/scalahott\/ScalaPolyRep.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/scalahott\/ScalaPolyRep.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/scalahott\/ScalaPolyRep.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/scalahott\/ScalaPolyRep.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/scalahott\/ScalaPolyRep.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/scalahott\/ScalaPolyRep.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/ScalaPolyRep.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/ScalaPolyRep.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/ScalaPolyRep.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/scalahott\/ScalaPolyRep.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/scalahott\/ScalaPolyRep.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/scalahott\/ScalaPolyRep.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/scalahott\/ScalaPolyRep.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/scalahott\/ScalaPolyRep.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/scalahott\/ScalaPolyRep.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/scalahott\/ScalaPolyRep.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/scalahott\/ScalaPolyRep.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/scalahott\/ScalaPolyRep.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "subs", "tail" : "(x: Term, y: Term): ScalaPolyRep[U, W]", "member" : "provingground.scalahott.ScalaPolyRep.subs", "link" : "provingground\/scalahott\/ScalaPolyRep.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.scalahott.ScalaPolyRep[U,W]", "kind" : "abstract def"}, {"label" : "unapply", "tail" : "(term: U): Option[W]", "member" : "provingground.scalahott.ScalaPolyRep.unapply", "link" : "provingground\/scalahott\/ScalaPolyRep.html#unapply(term:U):Option[W]", "kind" : "abstract def"}, {"label" : "apply", "tail" : "(typ: Typ[Term])(elem: W): Option[U]", "member" : "provingground.scalahott.ScalaPolyRep.apply", "link" : "provingground\/scalahott\/ScalaPolyRep.html#apply(typ:provingground.HoTT.Typ[provingground.HoTT.Term])(elem:W):Option[U]", "kind" : "abstract def"}], "shortDescription" : "", "object" : "provingground\/scalahott\/ScalaPolyRep$.html", "members_object" : [{"label" : "ExtendedDepFunction", "tail" : "", "member" : "provingground.scalahott.ScalaPolyRep.ExtendedDepFunction", "link" : "provingground\/scalahott\/ScalaPolyRep$.html#ExtendedDepFunction[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V,X<:provingground.HoTT.Termwithprovingground.HoTT.Subs[X],Y]extendsHoTT.FuncLike[U,X]withProductwithSerializable", "kind" : "case class"}, {"label" : "ExtendedFunction", "tail" : "", "member" : "provingground.scalahott.ScalaPolyRep.ExtendedFunction", "link" : "provingground\/scalahott\/ScalaPolyRep$.html#ExtendedFunction[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V,X<:provingground.HoTT.Termwithprovingground.HoTT.Subs[X],Y]extendsHoTT.Func[U,X]withProductwithSerializable", "kind" : "case class"}, {"label" : "funcPolyRep", "tail" : "(domrep: ScalaPolyRep[U, W], codrep: ScalaPolyRep[X, Y]): ScalaPolyRep[Func[U, X], (W) ⇒ Y]", "member" : "provingground.scalahott.ScalaPolyRep.funcPolyRep", "link" : "provingground\/scalahott\/ScalaPolyRep$.html#funcPolyRep[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],W,X<:provingground.HoTT.Termwithprovingground.HoTT.Subs[X],Y](implicitdomrep:provingground.scalahott.ScalaPolyRep[U,W],implicitcodrep:provingground.scalahott.ScalaPolyRep[X,Y]):provingground.scalahott.ScalaPolyRep[provingground.HoTT.Func[U,X],W=>Y]", "kind" : "def"}, {"label" : "poly", "tail" : "(rep: ScalaRep[U, W]): ScalaPolyRep[U, W]", "member" : "provingground.scalahott.ScalaPolyRep.poly", "link" : "provingground\/scalahott\/ScalaPolyRep$.html#poly[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],W](implicitrep:provingground.scalahott.ScalaRep[U,W]):provingground.scalahott.ScalaPolyRep[U,W]", "kind" : "implicit def"}, {"label" : "depFuncPolyRep", "tail" : "(domrep: ScalaPolyRep[U, W], codrep: ScalaPolyRep[X, Y]): ScalaPolyRep[FuncLike[U, X], (W) ⇒ Y]", "member" : "provingground.scalahott.ScalaPolyRep.depFuncPolyRep", "link" : "provingground\/scalahott\/ScalaPolyRep$.html#depFuncPolyRep[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],W,X<:provingground.HoTT.Termwithprovingground.HoTT.Subs[X],Y](implicitdomrep:provingground.scalahott.ScalaPolyRep[U,W],implicitcodrep:provingground.scalahott.ScalaPolyRep[X,Y]):provingground.scalahott.ScalaPolyRep[provingground.HoTT.FuncLike[U,X],W=>Y]", "kind" : "implicit def"}, {"label" : "PolyTermScala", "tail" : "", "member" : "provingground.scalahott.ScalaPolyRep.PolyTermScala", "link" : "provingground\/scalahott\/ScalaPolyRep$.html#PolyTermScala[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsAnyRef", "kind" : "implicit class"}, {"label" : "ScalaPolyTerm", "tail" : "", "member" : "provingground.scalahott.ScalaPolyRep.ScalaPolyTerm", "link" : "provingground\/scalahott\/ScalaPolyRep$.html#ScalaPolyTerm[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],W]extendsAnyRef", "kind" : "implicit class"}, {"label" : "PairPolyRep", "tail" : "", "member" : "provingground.scalahott.ScalaPolyRep.PairPolyRep", "link" : "provingground\/scalahott\/ScalaPolyRep$.html#PairPolyRep[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],W,X<:provingground.HoTT.Termwithprovingground.HoTT.Subs[X],Y]extendsScalaPolyRep[provingground.HoTT.AbsPair[U,X],(W,Y)]withProductwithSerializable", "kind" : "case class"}, {"label" : "FuncPolyRep", "tail" : "", "member" : "provingground.scalahott.ScalaPolyRep.FuncPolyRep", "link" : "provingground\/scalahott\/ScalaPolyRep$.html#FuncPolyRep[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],W,X<:provingground.HoTT.Termwithprovingground.HoTT.Subs[X],Y]extendsScalaPolyRep[provingground.HoTT.Func[U,X],W=>Y]withProductwithSerializable", "kind" : "case class"}, {"label" : "DepFuncPolyRep", "tail" : "", "member" : "provingground.scalahott.ScalaPolyRep.DepFuncPolyRep", "link" : "provingground\/scalahott\/ScalaPolyRep$.html#DepFuncPolyRep[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],W,X<:provingground.HoTT.Termwithprovingground.HoTT.Subs[X],Y]extendsScalaPolyRep[provingground.HoTT.FuncLike[U,X],W=>Y]withProductwithSerializable", "kind" : "case class"}, {"label" : "OrScalaPolyRep", "tail" : "", "member" : "provingground.scalahott.ScalaPolyRep.OrScalaPolyRep", "link" : "provingground\/scalahott\/ScalaPolyRep$.html#OrScalaPolyRep[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],W]extendsScalaPolyRep[U,W]withProductwithSerializable", "kind" : "case class"}, {"label" : "ScalaRepWrap", "tail" : "", "member" : "provingground.scalahott.ScalaPolyRep.ScalaRepWrap", "link" : "provingground\/scalahott\/ScalaPolyRep$.html#ScalaRepWrap[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],W]extendsScalaPolyRep[U,W]withProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/scalahott\/ScalaPolyRep$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/scalahott\/ScalaPolyRep$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/scalahott\/ScalaPolyRep$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/scalahott\/ScalaPolyRep$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/scalahott\/ScalaPolyRep$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/scalahott\/ScalaPolyRep$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/scalahott\/ScalaPolyRep$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/ScalaPolyRep$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/ScalaPolyRep$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/ScalaPolyRep$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/scalahott\/ScalaPolyRep$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/scalahott\/ScalaPolyRep$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/scalahott\/ScalaPolyRep$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/scalahott\/ScalaPolyRep$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/scalahott\/ScalaPolyRep$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/scalahott\/ScalaPolyRep$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/scalahott\/ScalaPolyRep$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/scalahott\/ScalaPolyRep$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/scalahott\/ScalaPolyRep$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/scalahott\/ScalaPolyRep.html", "kind" : "trait"}, {"name" : "provingground.scalahott.ScalaRep", "members_trait" : [{"label" : "++", "tail" : "(codrepfmly: (V) ⇒ ScalaRep[X, Y]): SigmaRep[UU, V, X, Y]", "member" : "provingground.scalahott.ScalaRep.++", "link" : "provingground\/scalahott\/ScalaRep.html#++[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],X<:provingground.HoTT.Termwithprovingground.HoTT.Subs[X],Y](codrepfmly:V=>provingground.scalahott.ScalaRep[X,Y]):provingground.scalahott.ScalaRep.SigmaRep[UU,V,X,Y]", "kind" : "def"}, {"label" : ":-->", "tail" : "(that: Typ[W]): FuncRep[UU, V, W, W]", "member" : "provingground.scalahott.ScalaRep.:-->", "link" : "provingground\/scalahott\/ScalaRep.html#:-->[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU]](that:provingground.HoTT.Typ[W]):provingground.scalahott.ScalaRep.FuncRep[UU,V,W,W]", "kind" : "def"}, {"label" : "-->:", "tail" : "(that: ScalaRep[W, X]): FuncRep[W, X, UU, V]", "member" : "provingground.scalahott.ScalaRep.-->:", "link" : "provingground\/scalahott\/ScalaRep.html#-->:[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],X,UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU]](that:provingground.scalahott.ScalaRep[W,X]):provingground.scalahott.ScalaRep.FuncRep[W,X,UU,V]", "kind" : "def"}, {"label" : "tpe", "tail" : "", "member" : "provingground.scalahott.ScalaRep.tpe", "link" : "provingground\/scalahott\/ScalaRep.html#tpe=V", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/scalahott\/ScalaRep.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/scalahott\/ScalaRep.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/scalahott\/ScalaRep.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/scalahott\/ScalaRep.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/scalahott\/ScalaRep.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/scalahott\/ScalaRep.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/scalahott\/ScalaRep.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/ScalaRep.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/ScalaRep.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/ScalaRep.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/scalahott\/ScalaRep.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/scalahott\/ScalaRep.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/scalahott\/ScalaRep.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/scalahott\/ScalaRep.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/scalahott\/ScalaRep.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/scalahott\/ScalaRep.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/scalahott\/ScalaRep.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/scalahott\/ScalaRep.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/scalahott\/ScalaRep.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "subs", "tail" : "(x: Term, y: Term): ScalaRep[U, V]", "member" : "provingground.scalahott.ScalaRep.subs", "link" : "provingground\/scalahott\/ScalaRep.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.scalahott.ScalaRep[U,V]", "kind" : "abstract def"}, {"label" : "unapply", "tail" : "(u: Term): Option[V]", "member" : "provingground.scalahott.ScalaRep.unapply", "link" : "provingground\/scalahott\/ScalaRep.html#unapply(u:provingground.HoTT.Term):Option[V]", "kind" : "abstract def"}, {"label" : "apply", "tail" : "(v: V): U", "member" : "provingground.scalahott.ScalaRep.apply", "link" : "provingground\/scalahott\/ScalaRep.html#apply(v:V):U", "kind" : "abstract def"}, {"label" : "typ", "tail" : ": Typ[U]", "member" : "provingground.scalahott.ScalaRep.typ", "link" : "provingground\/scalahott\/ScalaRep.html#typ:provingground.HoTT.Typ[U]", "kind" : "abstract val"}], "shortDescription" : "Representation by a scala object of a HoTT term", "object" : "provingground\/scalahott\/ScalaRep$.html", "members_object" : [{"label" : "dsl", "tail" : "", "member" : "provingground.scalahott.ScalaRep.dsl", "link" : "provingground\/scalahott\/ScalaRep$.html#dsl", "kind" : "object"}, {"label" : "ExtendedDepFunction", "tail" : "", "member" : "provingground.scalahott.ScalaRep.ExtendedDepFunction", "link" : "provingground\/scalahott\/ScalaRep$.html#ExtendedDepFunction[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V,X<:provingground.HoTT.Termwithprovingground.HoTT.Subs[X],Y]extendsHoTT.FuncLike[U,X]withProductwithSerializable", "kind" : "case class"}, {"label" : "RepSection", "tail" : "", "member" : "provingground.scalahott.ScalaRep.RepSection", "link" : "provingground\/scalahott\/ScalaRep$.html#RepSection[V,X<:provingground.HoTT.Termwithprovingground.HoTT.Subs[X],Y]extendsAnyRef", "kind" : "implicit class"}, {"label" : "FmlyReps", "tail" : "", "member" : "provingground.scalahott.ScalaRep.FmlyReps", "link" : "provingground\/scalahott\/ScalaRep$.html#FmlyReps[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],X<:provingground.HoTT.Termwithprovingground.HoTT.Subs[X]]extendsAnyRef", "kind" : "implicit class"}, {"label" : "SimpleExtendedFunction", "tail" : "", "member" : "provingground.scalahott.ScalaRep.SimpleExtendedFunction", "link" : "provingground\/scalahott\/ScalaRep$.html#SimpleExtendedFunction[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V,X<:provingground.HoTT.Termwithprovingground.HoTT.Subs[X]]extendsHoTT.Func[U,X]withHoTT.Subs[provingground.scalahott.ScalaRep.SimpleExtendedFunction[U,V,X]]withProductwithSerializable", "kind" : "case class"}, {"label" : "ExtendedFunction", "tail" : "", "member" : "provingground.scalahott.ScalaRep.ExtendedFunction", "link" : "provingground\/scalahott\/ScalaRep$.html#ExtendedFunction[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V,X<:provingground.HoTT.Termwithprovingground.HoTT.Subs[X],Y]extendsHoTT.Func[U,X]withProductwithSerializable", "kind" : "case class"}, {"label" : "ScalaSym", "tail" : "", "member" : "provingground.scalahott.ScalaRep.ScalaSym", "link" : "provingground\/scalahott\/ScalaRep$.html#ScalaSym[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V]extendsAnyRef", "kind" : "class"}, {"label" : "SimpleRep", "tail" : "", "member" : "provingground.scalahott.ScalaRep.SimpleRep", "link" : "provingground\/scalahott\/ScalaRep$.html#SimpleRep[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V]extendsScalaRep[U,V]withProductwithSerializable", "kind" : "case class"}, {"label" : "ScalaSymbol", "tail" : "", "member" : "provingground.scalahott.ScalaRep.ScalaSymbol", "link" : "provingground\/scalahott\/ScalaRep$.html#ScalaSymbol[X]extendsHoTT.AtomicSymwithProductwithSerializable", "kind" : "case class"}, {"label" : "SimpleConst", "tail" : "", "member" : "provingground.scalahott.ScalaRep.SimpleConst", "link" : "provingground\/scalahott\/ScalaRep$.html#SimpleConst[V]extendsScalaRep.ConstTerm[V]withProductwithSerializable", "kind" : "case class"}, {"label" : "extend", "tail" : "(fn: (T) ⇒ U, FuncLike: FuncLike[Term, U], codom: Typ[U]): (Term) ⇒ U", "member" : "provingground.scalahott.ScalaRep.extend", "link" : "provingground\/scalahott\/ScalaRep$.html#extend[T,U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](fn:T=>U,FuncLike:provingground.HoTT.FuncLike[provingground.HoTT.Term,U],codom:provingground.HoTT.Typ[U]):provingground.HoTT.Term=>U", "kind" : "def"}, {"label" : "ConstTerm", "tail" : "", "member" : "provingground.scalahott.ScalaRep.ConstTerm", "link" : "provingground\/scalahott\/ScalaRep$.html#ConstTerm[T]extendsHoTT.Term", "kind" : "trait"}, {"label" : "incl", "tail" : "(): (ScalaRep[U, V], ScalaRep[U, W]) ⇒ Option[(V) ⇒ W]", "member" : "provingground.scalahott.ScalaRep.incl", "link" : "provingground\/scalahott\/ScalaRep$.html#incl[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V,W]:(provingground.scalahott.ScalaRep[U,V],provingground.scalahott.ScalaRep[U,W])=>Option[V=>W]", "kind" : "def"}, {"label" : "NatInt", "tail" : "", "member" : "provingground.scalahott.ScalaRep.NatInt", "link" : "provingground\/scalahott\/ScalaRep$.html#NatInt", "kind" : "object"}, {"label" : "RepSymbObj", "tail" : "", "member" : "provingground.scalahott.ScalaRep.RepSymbObj", "link" : "provingground\/scalahott\/ScalaRep$.html#RepSymbObj[A,+U<:provingground.scalahott.RepTerm[A]withprovingground.HoTT.Subs[U]]extendsRepTerm[A]withHoTT.SymbolicwithProductwithSerializable", "kind" : "case class"}, {"label" : "funcRep", "tail" : "(domrep: ScalaRep[U, V], codomrep: ScalaRep[X, Y]): ScalaRep[Func[U, X], (V) ⇒ Y]", "member" : "provingground.scalahott.ScalaRep.funcRep", "link" : "provingground\/scalahott\/ScalaRep$.html#funcRep[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V,X<:provingground.HoTT.Termwithprovingground.HoTT.Subs[X],Y](implicitdomrep:provingground.scalahott.ScalaRep[U,V],implicitcodomrep:provingground.scalahott.ScalaRep[X,Y]):provingground.scalahott.ScalaRep[provingground.HoTT.Func[U,X],V=>Y]", "kind" : "implicit def"}, {"label" : "TermScala", "tail" : "", "member" : "provingground.scalahott.ScalaRep.TermScala", "link" : "provingground\/scalahott\/ScalaRep$.html#TermScala[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsAnyRef", "kind" : "implicit class"}, {"label" : "ScalaTerm", "tail" : "", "member" : "provingground.scalahott.ScalaRep.ScalaTerm", "link" : "provingground\/scalahott\/ScalaRep$.html#ScalaTerm[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],W]extendsAnyRef", "kind" : "implicit class"}, {"label" : "idRep", "tail" : "(typ: Typ[U]): ScalaRep[U, U]", "member" : "provingground.scalahott.ScalaRep.idRep", "link" : "provingground\/scalahott\/ScalaRep$.html#idRep[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](typ:provingground.HoTT.Typ[U]):provingground.scalahott.ScalaRep[U,U]", "kind" : "implicit def"}, {"label" : "scalaUnivRep", "tail" : "(): ScalaRep[Typ[RepTerm[A]], Typ[RepTerm[A]]]", "member" : "provingground.scalahott.ScalaRep.scalaUnivRep", "link" : "provingground\/scalahott\/ScalaRep$.html#scalaUnivRep[A]:provingground.scalahott.ScalaRep[provingground.HoTT.Typ[provingground.scalahott.RepTerm[A]],provingground.HoTT.Typ[provingground.scalahott.RepTerm[A]]]", "kind" : "implicit def"}, {"label" : "UnivRep", "tail" : ": ScalaRep[Typ[Term], Typ[Term]]", "member" : "provingground.scalahott.ScalaRep.UnivRep", "link" : "provingground\/scalahott\/ScalaRep$.html#UnivRep:provingground.scalahott.ScalaRep[provingground.HoTT.Typ[provingground.HoTT.Term],provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "implicit val"}, {"label" : "DepFuncRep", "tail" : "", "member" : "provingground.scalahott.ScalaRep.DepFuncRep", "link" : "provingground\/scalahott\/ScalaRep$.html#DepFuncRep[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V,X<:provingground.HoTT.Termwithprovingground.HoTT.Subs[X],Y]extendsScalaRep[provingground.HoTT.FuncLike[U,X],V=>Y]withProductwithSerializable", "kind" : "case class"}, {"label" : "SigmaRep", "tail" : "", "member" : "provingground.scalahott.ScalaRep.SigmaRep", "link" : "provingground\/scalahott\/ScalaRep$.html#SigmaRep[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V,X<:provingground.HoTT.Termwithprovingground.HoTT.Subs[X],Y]extendsScalaRep[provingground.HoTT.Term,(V,Y)]withProductwithSerializable", "kind" : "case class"}, {"label" : "SmpleFuncRep", "tail" : "", "member" : "provingground.scalahott.ScalaRep.SmpleFuncRep", "link" : "provingground\/scalahott\/ScalaRep$.html#SmpleFuncRep[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V,X<:provingground.HoTT.Termwithprovingground.HoTT.Subs[X]]extendsScalaRep[provingground.HoTT.FuncLike[U,X],V=>X]withProductwithSerializable", "kind" : "case class"}, {"label" : "SimpleFuncRep", "tail" : "", "member" : "provingground.scalahott.ScalaRep.SimpleFuncRep", "link" : "provingground\/scalahott\/ScalaRep$.html#SimpleFuncRep", "kind" : "object"}, {"label" : "FuncRep", "tail" : "", "member" : "provingground.scalahott.ScalaRep.FuncRep", "link" : "provingground\/scalahott\/ScalaRep$.html#FuncRep[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V,X<:provingground.HoTT.Termwithprovingground.HoTT.Subs[X],Y]extendsScalaRep[provingground.HoTT.Func[U,X],V=>Y]withProductwithSerializable", "kind" : "case class"}, {"label" : "IdTypRep", "tail" : "", "member" : "provingground.scalahott.ScalaRep.IdTypRep", "link" : "provingground\/scalahott\/ScalaRep$.html#IdTypRep[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsScalaRep[provingground.HoTT.Typ[U],provingground.HoTT.Typ[U]]withProductwithSerializable", "kind" : "case class"}, {"label" : "IdRep", "tail" : "", "member" : "provingground.scalahott.ScalaRep.IdRep", "link" : "provingground\/scalahott\/ScalaRep$.html#IdRep[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsScalaRep[U,U]withProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/scalahott\/ScalaRep$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/scalahott\/ScalaRep$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/scalahott\/ScalaRep$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/scalahott\/ScalaRep$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/scalahott\/ScalaRep$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/scalahott\/ScalaRep$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/scalahott\/ScalaRep$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/ScalaRep$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/ScalaRep$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/ScalaRep$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/scalahott\/ScalaRep$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/scalahott\/ScalaRep$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/scalahott\/ScalaRep$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/scalahott\/ScalaRep$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/scalahott\/ScalaRep$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/scalahott\/ScalaRep$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/scalahott\/ScalaRep$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/scalahott\/ScalaRep$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/scalahott\/ScalaRep$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/scalahott\/ScalaRep.html", "kind" : "trait"}, {"name" : "provingground.scalahott.ScalaTyp", "shortDescription" : "", "members_class" : [{"label" : "Elem", "tail" : "", "member" : "provingground.HoTT.Typ.Elem", "link" : "provingground\/HoTT$$Typ.html#Elem", "kind" : "object"}, {"label" : "rep", "tail" : ": ScalaRep[RepTerm[A], A]", "member" : "provingground.scalahott.ScalaTyp.rep", "link" : "provingground\/scalahott\/ScalaTyp.html#rep:provingground.scalahott.ScalaRep[provingground.scalahott.RepTerm[A],A]", "kind" : "implicit val"}, {"label" : "subs", "tail" : "(x: Term, y: Term): Typ[RepTerm[A]] with Subs[Typ[RepTerm[A]]]", "member" : "provingground.scalahott.ScalaTyp.subs", "link" : "provingground\/scalahott\/ScalaTyp.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.HoTT.Typ[provingground.scalahott.RepTerm[A]]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.scalahott.RepTerm[A]]]", "kind" : "def"}, {"label" : "newobj", "tail" : "(): Nothing", "member" : "provingground.scalahott.ScalaTyp.newobj", "link" : "provingground\/scalahott\/ScalaTyp.html#newobj:Nothing", "kind" : "def"}, {"label" : "variable", "tail" : "(name: AnySym): RepTerm[A]", "member" : "provingground.scalahott.ScalaTyp.variable", "link" : "provingground\/scalahott\/ScalaTyp.html#variable(name:provingground.HoTT.AnySym):provingground.scalahott.RepTerm[A]", "kind" : "def"}, {"label" : "typ", "tail" : ": ScalaTypUniv[A]", "member" : "provingground.scalahott.ScalaTyp.typ", "link" : "provingground\/scalahott\/ScalaTyp.html#typ:provingground.scalahott.ScalaTypUniv[A]", "kind" : "val"}, {"label" : "Obj", "tail" : "", "member" : "provingground.scalahott.ScalaTyp.Obj", "link" : "provingground\/scalahott\/ScalaTyp.html#Obj=provingground.scalahott.RepTerm[A]", "kind" : "type"}, {"member" : "provingground.scalahott.ScalaTyp#<init>", "error" : "unsupported entity"}, {"label" : "++", "tail" : "(those: V): SigmaTyp[UU, VV]", "member" : "provingground.HoTT.Typ.++", "link" : "provingground\/scalahott\/ScalaTyp.html#++[UU>:provingground.HoTT.Typ[U]<:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[UU],VV<:provingground.HoTT.Termwithprovingground.HoTT.Subs[VV],V<:provingground.HoTT.Typ[VV]withprovingground.HoTT.Subs[V]](those:V):provingground.HoTT.SigmaTyp[UU,VV]", "kind" : "def"}, {"label" : "||", "tail" : "(that: Typ[V]): PlusTyp[UU, V]", "member" : "provingground.HoTT.Typ.||", "link" : "provingground\/scalahott\/ScalaTyp.html#||[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](that:provingground.HoTT.Typ[V]):provingground.HoTT.PlusTyp[UU,V]", "kind" : "def"}, {"label" : "&&", "tail" : "(that: Typ[V]): ProdTyp[UU, V]", "member" : "provingground.HoTT.Typ.&&", "link" : "provingground\/scalahott\/ScalaTyp.html#&&[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](that:provingground.HoTT.Typ[V]):provingground.HoTT.ProdTyp[UU,V]", "kind" : "def"}, {"label" : "~>:", "tail" : "(variable: V): GenFuncTyp[V, UU]", "member" : "provingground.HoTT.Typ.~>:", "link" : "provingground\/scalahott\/ScalaTyp.html#~>:[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](variable:V):provingground.HoTT.GenFuncTyp[V,UU]", "kind" : "def"}, {"label" : "->:", "tail" : "(that: Typ[W]): FuncTyp[W, UU]", "member" : "provingground.HoTT.Typ.->:", "link" : "provingground\/scalahott\/ScalaTyp.html#->:[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU]](that:provingground.HoTT.Typ[W]):provingground.HoTT.FuncTyp[W,UU]", "kind" : "def"}, {"label" : "typedVar", "tail" : "(factory: NameFactory): TypedTerm[RepTerm[A]]", "member" : "provingground.HoTT.Typ.typedVar", "link" : "provingground\/scalahott\/ScalaTyp.html#typedVar(implicitfactory:provingground.HoTT.NameFactory):provingground.HoTT.TypedTerm[U]", "kind" : "def"}, {"label" : "Var", "tail" : "(factory: NameFactory): RepTerm[A] with Subs[RepTerm[A]]", "member" : "provingground.HoTT.Typ.Var", "link" : "provingground\/scalahott\/ScalaTyp.html#Var(implicitfactory:provingground.HoTT.NameFactory):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "sym", "tail" : "(name: Name): RepTerm[A] with Subs[RepTerm[A]]", "member" : "provingground.HoTT.Typ.sym", "link" : "provingground\/scalahott\/ScalaTyp.html#sym(implicitname:sourcecode.Name):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "::", "tail" : "(name: String): RepTerm[A] with Subs[RepTerm[A]]", "member" : "provingground.HoTT.Typ.::", "link" : "provingground\/scalahott\/ScalaTyp.html#::(name:String):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "typedVar", "tail" : "(name: AnySym): TypedTerm[RepTerm[A]]", "member" : "provingground.HoTT.Typ.typedVar", "link" : "provingground\/scalahott\/ScalaTyp.html#typedVar(name:provingground.HoTT.AnySym):provingground.HoTT.TypedTerm[U]", "kind" : "def"}, {"label" : "symbObj", "tail" : "(name: AnySym): RepTerm[A] with Subs[RepTerm[A]]", "member" : "provingground.HoTT.Typ.symbObj", "link" : "provingground\/scalahott\/ScalaTyp.html#symbObj(name:provingground.HoTT.AnySym):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "typlevel", "tail" : ": Int", "member" : "provingground.HoTT.Typ.typlevel", "link" : "provingground\/scalahott\/ScalaTyp.html#typlevel:Int", "kind" : "lazy val"}, {"label" : "typed", "tail" : ": TypedTerm[Typ[Term]]", "member" : "provingground.HoTT.Typ.typed", "link" : "provingground\/scalahott\/ScalaTyp.html#typed:provingground.HoTT.TypedTerm[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "!:", "tail" : "(term: Term): RepTerm[A]", "member" : "provingground.HoTT.Typ.!:", "link" : "provingground\/scalahott\/ScalaTyp.html#!:(term:provingground.HoTT.Term):U", "kind" : "def"}, {"label" : "obj", "tail" : "(): RepTerm[A]", "member" : "provingground.HoTT.Typ.obj", "link" : "provingground\/scalahott\/ScalaTyp.html#obj:U", "kind" : "def"}, {"label" : "usesVar", "tail" : "(t: Term): Boolean", "member" : "provingground.HoTT.Term.usesVar", "link" : "provingground\/scalahott\/ScalaTyp.html#usesVar(t:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "indepOf", "tail" : "(that: Term): Boolean", "member" : "provingground.HoTT.Term.indepOf", "link" : "provingground\/scalahott\/ScalaTyp.html#indepOf(that:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "dependsOn", "tail" : "(that: Term): Boolean", "member" : "provingground.HoTT.Term.dependsOn", "link" : "provingground\/scalahott\/ScalaTyp.html#dependsOn(that:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "replace", "tail" : "(x: Term, y: Term): Typ[RepTerm[A]] with Subs[Typ[RepTerm[A]]]", "member" : "provingground.HoTT.Subs.replace", "link" : "provingground\/scalahott\/ScalaTyp.html#replace(x:provingground.HoTT.Term,y:provingground.HoTT.Term):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/scalahott\/ScalaTyp.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/scalahott\/ScalaTyp.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/scalahott\/ScalaTyp.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/scalahott\/ScalaTyp.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/scalahott\/ScalaTyp.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/scalahott\/ScalaTyp.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/scalahott\/ScalaTyp.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/ScalaTyp.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/ScalaTyp.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/ScalaTyp.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/scalahott\/ScalaTyp.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/scalahott\/ScalaTyp.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/scalahott\/ScalaTyp.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/scalahott\/ScalaTyp.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/scalahott\/ScalaTyp.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/scalahott\/ScalaTyp.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/scalahott\/ScalaTyp.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/scalahott\/ScalaTyp.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/scalahott\/ScalaTyp.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/scalahott\/ScalaTyp.html", "kind" : "class"}, {"name" : "provingground.scalahott.ScalaTypUniv", "shortDescription" : "", "members_case class" : [{"label" : "Elem", "tail" : "", "member" : "provingground.HoTT.Typ.Elem", "link" : "provingground\/HoTT$$Typ.html#Elem", "kind" : "object"}, {"label" : "variable", "tail" : "(name: AnySym): SymbScalaTyp[A]", "member" : "provingground.scalahott.ScalaTypUniv.variable", "link" : "provingground\/scalahott\/ScalaTypUniv.html#variable(name:provingground.HoTT.AnySym):provingground.scalahott.SymbScalaTyp[A]", "kind" : "def"}, {"label" : "newobj", "tail" : "(): Nothing", "member" : "provingground.scalahott.ScalaTypUniv.newobj", "link" : "provingground\/scalahott\/ScalaTypUniv.html#newobj:Nothing", "kind" : "def"}, {"label" : "subs", "tail" : "(x: Term, y: Term): ScalaTypUniv[A]", "member" : "provingground.scalahott.ScalaTypUniv.subs", "link" : "provingground\/scalahott\/ScalaTypUniv.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.scalahott.ScalaTypUniv[A]", "kind" : "def"}, {"label" : "Obj", "tail" : "", "member" : "provingground.scalahott.ScalaTypUniv.Obj", "link" : "provingground\/scalahott\/ScalaTypUniv.html#Obj=provingground.HoTT.Typ[provingground.scalahott.RepTerm[A]]", "kind" : "type"}, {"label" : "typ", "tail" : ": HigherUniv[Typ[RepTerm[A]]]", "member" : "provingground.scalahott.ScalaTypUniv.typ", "link" : "provingground\/scalahott\/ScalaTypUniv.html#typ:provingground.scalahott.ScalaUniv.HigherUniv[provingground.HoTT.Typ[provingground.scalahott.RepTerm[A]]]", "kind" : "lazy val"}, {"member" : "provingground.scalahott.ScalaTypUniv#<init>", "error" : "unsupported entity"}, {"label" : "equals", "tail" : "(a: Any): Boolean", "member" : "provingground.HoTT.BaseUniv.equals", "link" : "provingground\/scalahott\/ScalaTypUniv.html#equals(a:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : ": Int", "member" : "provingground.HoTT.BaseUniv.hashCode", "link" : "provingground\/scalahott\/ScalaTypUniv.html#hashCode:Int", "kind" : "lazy val"}, {"label" : "++", "tail" : "(those: V): SigmaTyp[UU, VV]", "member" : "provingground.HoTT.Typ.++", "link" : "provingground\/scalahott\/ScalaTypUniv.html#++[UU>:provingground.HoTT.Typ[U]<:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[UU],VV<:provingground.HoTT.Termwithprovingground.HoTT.Subs[VV],V<:provingground.HoTT.Typ[VV]withprovingground.HoTT.Subs[V]](those:V):provingground.HoTT.SigmaTyp[UU,VV]", "kind" : "def"}, {"label" : "||", "tail" : "(that: Typ[V]): PlusTyp[UU, V]", "member" : "provingground.HoTT.Typ.||", "link" : "provingground\/scalahott\/ScalaTypUniv.html#||[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](that:provingground.HoTT.Typ[V]):provingground.HoTT.PlusTyp[UU,V]", "kind" : "def"}, {"label" : "&&", "tail" : "(that: Typ[V]): ProdTyp[UU, V]", "member" : "provingground.HoTT.Typ.&&", "link" : "provingground\/scalahott\/ScalaTypUniv.html#&&[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](that:provingground.HoTT.Typ[V]):provingground.HoTT.ProdTyp[UU,V]", "kind" : "def"}, {"label" : "~>:", "tail" : "(variable: V): GenFuncTyp[V, UU]", "member" : "provingground.HoTT.Typ.~>:", "link" : "provingground\/scalahott\/ScalaTypUniv.html#~>:[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](variable:V):provingground.HoTT.GenFuncTyp[V,UU]", "kind" : "def"}, {"label" : "->:", "tail" : "(that: Typ[W]): FuncTyp[W, UU]", "member" : "provingground.HoTT.Typ.->:", "link" : "provingground\/scalahott\/ScalaTypUniv.html#->:[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU]](that:provingground.HoTT.Typ[W]):provingground.HoTT.FuncTyp[W,UU]", "kind" : "def"}, {"label" : "typedVar", "tail" : "(factory: NameFactory): TypedTerm[Typ[RepTerm[A]]]", "member" : "provingground.HoTT.Typ.typedVar", "link" : "provingground\/scalahott\/ScalaTypUniv.html#typedVar(implicitfactory:provingground.HoTT.NameFactory):provingground.HoTT.TypedTerm[U]", "kind" : "def"}, {"label" : "Var", "tail" : "(factory: NameFactory): Typ[RepTerm[A]] with Subs[Typ[RepTerm[A]]]", "member" : "provingground.HoTT.Typ.Var", "link" : "provingground\/scalahott\/ScalaTypUniv.html#Var(implicitfactory:provingground.HoTT.NameFactory):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "sym", "tail" : "(name: Name): Typ[RepTerm[A]] with Subs[Typ[RepTerm[A]]]", "member" : "provingground.HoTT.Typ.sym", "link" : "provingground\/scalahott\/ScalaTypUniv.html#sym(implicitname:sourcecode.Name):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "::", "tail" : "(name: String): Typ[RepTerm[A]] with Subs[Typ[RepTerm[A]]]", "member" : "provingground.HoTT.Typ.::", "link" : "provingground\/scalahott\/ScalaTypUniv.html#::(name:String):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "typedVar", "tail" : "(name: AnySym): TypedTerm[Typ[RepTerm[A]]]", "member" : "provingground.HoTT.Typ.typedVar", "link" : "provingground\/scalahott\/ScalaTypUniv.html#typedVar(name:provingground.HoTT.AnySym):provingground.HoTT.TypedTerm[U]", "kind" : "def"}, {"label" : "symbObj", "tail" : "(name: AnySym): Typ[RepTerm[A]] with Subs[Typ[RepTerm[A]]]", "member" : "provingground.HoTT.Typ.symbObj", "link" : "provingground\/scalahott\/ScalaTypUniv.html#symbObj(name:provingground.HoTT.AnySym):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "typlevel", "tail" : ": Int", "member" : "provingground.HoTT.Typ.typlevel", "link" : "provingground\/scalahott\/ScalaTypUniv.html#typlevel:Int", "kind" : "lazy val"}, {"label" : "typed", "tail" : ": TypedTerm[Typ[Term]]", "member" : "provingground.HoTT.Typ.typed", "link" : "provingground\/scalahott\/ScalaTypUniv.html#typed:provingground.HoTT.TypedTerm[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "!:", "tail" : "(term: Term): Typ[RepTerm[A]]", "member" : "provingground.HoTT.Typ.!:", "link" : "provingground\/scalahott\/ScalaTypUniv.html#!:(term:provingground.HoTT.Term):U", "kind" : "def"}, {"label" : "obj", "tail" : "(): Typ[RepTerm[A]]", "member" : "provingground.HoTT.Typ.obj", "link" : "provingground\/scalahott\/ScalaTypUniv.html#obj:U", "kind" : "def"}, {"label" : "usesVar", "tail" : "(t: Term): Boolean", "member" : "provingground.HoTT.Term.usesVar", "link" : "provingground\/scalahott\/ScalaTypUniv.html#usesVar(t:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "indepOf", "tail" : "(that: Term): Boolean", "member" : "provingground.HoTT.Term.indepOf", "link" : "provingground\/scalahott\/ScalaTypUniv.html#indepOf(that:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "dependsOn", "tail" : "(that: Term): Boolean", "member" : "provingground.HoTT.Term.dependsOn", "link" : "provingground\/scalahott\/ScalaTypUniv.html#dependsOn(that:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "replace", "tail" : "(x: Term, y: Term): Typ[Typ[RepTerm[A]]] with Subs[Typ[Typ[RepTerm[A]]]]", "member" : "provingground.HoTT.Subs.replace", "link" : "provingground\/scalahott\/ScalaTypUniv.html#replace(x:provingground.HoTT.Term,y:provingground.HoTT.Term):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/scalahott\/ScalaTypUniv.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/scalahott\/ScalaTypUniv.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/scalahott\/ScalaTypUniv.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/scalahott\/ScalaTypUniv.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/scalahott\/ScalaTypUniv.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/scalahott\/ScalaTypUniv.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/scalahott\/ScalaTypUniv.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/ScalaTypUniv.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/ScalaTypUniv.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/ScalaTypUniv.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/scalahott\/ScalaTypUniv.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/scalahott\/ScalaTypUniv.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/scalahott\/ScalaTypUniv.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/scalahott\/ScalaTypUniv.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/scalahott\/ScalaTypUniv.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/scalahott\/ScalaTypUniv.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/scalahott\/ScalaTypUniv.html", "kind" : "case class"}, {"name" : "provingground.scalahott.ScalaUniv", "shortDescription" : "Wrapper for universe with refined scala type for objects (i.e., types) in it.", "object" : "provingground\/scalahott\/ScalaUniv$.html", "members_object" : [{"label" : "typFamily", "tail" : "(dom: Typ[W], f: (W) ⇒ Typ[U])(su: ScalaUniv[U]): FuncDefn[W, Typ[U]]", "member" : "provingground.scalahott.ScalaUniv.typFamily", "link" : "provingground\/scalahott\/ScalaUniv$.html#typFamily[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](dom:provingground.HoTT.Typ[W],f:W=>provingground.HoTT.Typ[U])(implicitsu:provingground.scalahott.ScalaUniv[U]):provingground.HoTT.FuncDefn[W,provingground.HoTT.Typ[U]]", "kind" : "def"}, {"label" : "DepFunc", "tail" : "", "member" : "provingground.scalahott.ScalaUniv.DepFunc", "link" : "provingground\/scalahott\/ScalaUniv$.html#DepFunc", "kind" : "object"}, {"label" : "depFunc", "tail" : "(dom: Typ[W], func: (W) ⇒ U)(su: ScalaUniv[U]): FuncLike[W, U]", "member" : "provingground.scalahott.ScalaUniv.depFunc", "link" : "provingground\/scalahott\/ScalaUniv$.html#depFunc[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](dom:provingground.HoTT.Typ[W],func:W=>U)(implicitsu:provingground.scalahott.ScalaUniv[U]):provingground.HoTT.FuncLike[W,U]", "kind" : "def"}, {"label" : "piUniv", "tail" : "(domsc: ScalaUniv[W], codomsc: ScalaUniv[U]): ScalaUniv[FuncLike[W, U]]", "member" : "provingground.scalahott.ScalaUniv.piUniv", "link" : "provingground\/scalahott\/ScalaUniv$.html#piUniv[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](implicitdomsc:provingground.scalahott.ScalaUniv[W],implicitcodomsc:provingground.scalahott.ScalaUniv[U]):provingground.scalahott.ScalaUniv[provingground.HoTT.FuncLike[W,U]]", "kind" : "implicit def"}, {"label" : "funcUniv", "tail" : "(domsc: ScalaUniv[W], codomsc: ScalaUniv[U]): ScalaUniv[Func[W, U]]", "member" : "provingground.scalahott.ScalaUniv.funcUniv", "link" : "provingground\/scalahott\/ScalaUniv$.html#funcUniv[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](implicitdomsc:provingground.scalahott.ScalaUniv[W],implicitcodomsc:provingground.scalahott.ScalaUniv[U]):provingground.scalahott.ScalaUniv[provingground.HoTT.Func[W,U]]", "kind" : "implicit def"}, {"label" : "newobj", "tail" : "(): Nothing", "member" : "provingground.scalahott.ScalaUniv.newobj", "link" : "provingground\/scalahott\/ScalaUniv$.html#newobj:Nothing", "kind" : "def"}, {"label" : "higherUniv", "tail" : "(sc: ScalaUniv[U]): ScalaUniv[Typ[U]]", "member" : "provingground.scalahott.ScalaUniv.higherUniv", "link" : "provingground\/scalahott\/ScalaUniv$.html#higherUniv[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](implicitsc:provingground.scalahott.ScalaUniv[U]):provingground.scalahott.ScalaUniv[provingground.HoTT.Typ[U]]", "kind" : "implicit def"}, {"label" : "baseUniv", "tail" : ": ScalaUniv[Term]", "member" : "provingground.scalahott.ScalaUniv.baseUniv", "link" : "provingground\/scalahott\/ScalaUniv$.html#baseUniv:provingground.scalahott.ScalaUniv[provingground.HoTT.Term]", "kind" : "implicit val"}, {"label" : "FineUniv", "tail" : "", "member" : "provingground.scalahott.ScalaUniv.FineUniv", "link" : "provingground\/scalahott\/ScalaUniv$.html#FineUniv[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsHoTT.Typ[provingground.HoTT.Typ[U]]withHoTT.BaseUnivwithProductwithSerializable", "kind" : "case class"}, {"label" : "FineSymbTyp", "tail" : "", "member" : "provingground.scalahott.ScalaUniv.FineSymbTyp", "link" : "provingground\/scalahott\/ScalaUniv$.html#FineSymbTyp[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsHoTT.Typ[U]withHoTT.SymbolicwithProductwithSerializable", "kind" : "case class"}, {"label" : "PiTypUniv", "tail" : "", "member" : "provingground.scalahott.ScalaUniv.PiTypUniv", "link" : "provingground\/scalahott\/ScalaUniv$.html#PiTypUniv[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsHoTT.Typ[provingground.HoTT.PiTyp[W,U]]withProductwithSerializable", "kind" : "case class"}, {"label" : "FuncTypUniv", "tail" : "", "member" : "provingground.scalahott.ScalaUniv.FuncTypUniv", "link" : "provingground\/scalahott\/ScalaUniv$.html#FuncTypUniv[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsHoTT.Typ[provingground.HoTT.FuncTyp[W,U]]withProductwithSerializable", "kind" : "case class"}, {"label" : "HigherUniv", "tail" : "", "member" : "provingground.scalahott.ScalaUniv.HigherUniv", "link" : "provingground\/scalahott\/ScalaUniv$.html#HigherUniv[U<:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[U]]extendsHoTT.Typ[provingground.HoTT.Typ[U]]withProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/scalahott\/ScalaUniv$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/scalahott\/ScalaUniv$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/scalahott\/ScalaUniv$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/scalahott\/ScalaUniv$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/scalahott\/ScalaUniv$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/scalahott\/ScalaUniv$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/scalahott\/ScalaUniv$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/ScalaUniv$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/ScalaUniv$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/ScalaUniv$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/scalahott\/ScalaUniv$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/scalahott\/ScalaUniv$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/scalahott\/ScalaUniv$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/scalahott\/ScalaUniv$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/scalahott\/ScalaUniv$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/scalahott\/ScalaUniv$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/scalahott\/ScalaUniv$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/scalahott\/ScalaUniv$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/scalahott\/ScalaUniv$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"member" : "provingground.scalahott.ScalaUniv#<init>", "error" : "unsupported entity"}, {"label" : "univ", "tail" : ": Typ[Typ[U]]", "member" : "provingground.scalahott.ScalaUniv.univ", "link" : "provingground\/scalahott\/ScalaUniv.html#univ:provingground.HoTT.Typ[provingground.HoTT.Typ[U]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/scalahott\/ScalaUniv.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/scalahott\/ScalaUniv.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/scalahott\/ScalaUniv.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/scalahott\/ScalaUniv.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/scalahott\/ScalaUniv.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/scalahott\/ScalaUniv.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/scalahott\/ScalaUniv.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/ScalaUniv.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/ScalaUniv.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/ScalaUniv.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/scalahott\/ScalaUniv.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/scalahott\/ScalaUniv.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/scalahott\/ScalaUniv.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/scalahott\/ScalaUniv.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/scalahott\/ScalaUniv.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/scalahott\/ScalaUniv.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/scalahott\/ScalaUniv.html", "kind" : "case class"}, {"name" : "provingground.scalahott.ScalaVec", "shortDescription" : "", "members_class" : [{"label" : "empty", "tail" : ": RepTerm[Vector[X]]", "member" : "provingground.scalahott.ScalaVec.empty", "link" : "provingground\/scalahott\/ScalaVec.html#empty:provingground.scalahott.RepTerm[Vector[X]]", "kind" : "val"}, {"label" : "succ", "tail" : ": FuncLike[RepTerm[Long], FuncLike[RepTerm[X], FuncLike[RepTerm[Vector[X]], RepTerm[Vector[X]]]]]", "member" : "provingground.scalahott.ScalaVec.succ", "link" : "provingground\/scalahott\/ScalaVec.html#succ:provingground.HoTT.FuncLike[provingground.scalahott.RepTerm[Long],provingground.HoTT.FuncLike[provingground.scalahott.RepTerm[X],provingground.HoTT.FuncLike[provingground.scalahott.RepTerm[Vector[X]],provingground.scalahott.RepTerm[Vector[X]]]]]", "kind" : "val"}, {"label" : "r", "tail" : ": ScalaPolyRep[FuncLike[RepTerm[Long], FuncLike[RepTerm[X], FuncLike[RepTerm[Vector[X]], RepTerm[Vector[X]]]]], (Long) ⇒ (X) ⇒ (Vector[X]) ⇒ Vector[X]]", "member" : "provingground.scalahott.ScalaVec.r", "link" : "provingground\/scalahott\/ScalaVec.html#r:provingground.scalahott.ScalaPolyRep[provingground.HoTT.FuncLike[provingground.scalahott.RepTerm[Long],provingground.HoTT.FuncLike[provingground.scalahott.RepTerm[X],provingground.HoTT.FuncLike[provingground.scalahott.RepTerm[Vector[X]],provingground.scalahott.RepTerm[Vector[X]]]]],Long=>(X=>(Vector[X]=>Vector[X]))]", "kind" : "implicit val"}, {"label" : "m", "tail" : ": RepTerm[Long]", "member" : "provingground.scalahott.ScalaVec.m", "link" : "provingground\/scalahott\/ScalaVec.html#m:provingground.scalahott.RepTerm[Long]", "kind" : "val"}, {"label" : "size", "tail" : ": Option[FuncLike[RepTerm[Long], FuncLike[RepTerm[Vector[X]], RepTerm[Long]]]]", "member" : "provingground.scalahott.ScalaVec.size", "link" : "provingground\/scalahott\/ScalaVec.html#size:Option[provingground.HoTT.FuncLike[provingground.scalahott.RepTerm[Long],provingground.HoTT.FuncLike[provingground.scalahott.RepTerm[Vector[X]],provingground.scalahott.RepTerm[Long]]]]", "kind" : "val"}, {"label" : "Vec", "tail" : ": FuncLike[RepTerm[Long], Typ[Term]]", "member" : "provingground.scalahott.ScalaVec.Vec", "link" : "provingground\/scalahott\/ScalaVec.html#Vec:provingground.HoTT.FuncLike[provingground.scalahott.RepTerm[Long],provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "urep", "tail" : ": ScalaPolyRep[Typ[Term], Typ[Term]]", "member" : "provingground.scalahott.ScalaVec.urep", "link" : "provingground\/scalahott\/ScalaVec.html#urep:provingground.scalahott.ScalaPolyRep[provingground.HoTT.Typ[provingground.HoTT.Term],provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "implicit val"}, {"label" : "nrep", "tail" : ": ScalaPolyRep[RepTerm[Long], Long]", "member" : "provingground.scalahott.ScalaVec.nrep", "link" : "provingground\/scalahott\/ScalaVec.html#nrep:provingground.scalahott.ScalaPolyRep[provingground.scalahott.RepTerm[Long],Long]", "kind" : "implicit val"}, {"label" : "Rep", "tail" : "", "member" : "provingground.scalahott.ScalaVec.Rep", "link" : "provingground\/scalahott\/ScalaVec.html#Rep", "kind" : "implicit object"}, {"label" : "VecTyp", "tail" : "", "member" : "provingground.scalahott.ScalaVec.VecTyp", "link" : "provingground\/scalahott\/ScalaVec.html#VecTypextendsScalaTyp[Vector[X]]withProductwithSerializable", "kind" : "case class"}, {"member" : "provingground.scalahott.ScalaVec#<init>", "error" : "unsupported entity"}, {"label" : "basetyp", "tail" : ": Typ[Term]", "member" : "provingground.scalahott.ScalaVec.basetyp", "link" : "provingground\/scalahott\/ScalaVec.html#basetyp:provingground.HoTT.Typ[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/scalahott\/ScalaVec.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/scalahott\/ScalaVec.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/scalahott\/ScalaVec.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/scalahott\/ScalaVec.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/scalahott\/ScalaVec.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/scalahott\/ScalaVec.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/scalahott\/ScalaVec.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/ScalaVec.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/ScalaVec.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/ScalaVec.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/scalahott\/ScalaVec.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/scalahott\/ScalaVec.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/scalahott\/ScalaVec.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/scalahott\/ScalaVec.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/scalahott\/ScalaVec.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/scalahott\/ScalaVec.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/scalahott\/ScalaVec.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/scalahott\/ScalaVec.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/scalahott\/ScalaVec.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/scalahott\/ScalaVec.html", "kind" : "class"}, {"name" : "provingground.scalahott.SigmaPiEnum", "shortDescription" : "", "object" : "provingground\/scalahott\/SigmaPiEnum$.html", "members_object" : [{"label" : "resPi", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Func[Term, Typ[Term]] with Subs[Func[Term, Typ[Term]]], FuncLike[Term with Subs[Term], Typ[Term]]]]", "member" : "provingground.scalahott.SigmaPiEnum.resPi", "link" : "provingground\/scalahott\/SigmaPiEnum$.html#resPi:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Typ[provingground.HoTT.Term]]]]", "kind" : "val"}, {"label" : "resSigma", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Func[Term, Typ[Term]] with Subs[Func[Term, Typ[Term]]], FuncLike[Term with Subs[Term], FuncTyp[Term, DepPair[Term, Term]]]]]", "member" : "provingground.scalahott.SigmaPiEnum.resSigma", "link" : "provingground\/scalahott\/SigmaPiEnum$.html#resSigma:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncTyp[provingground.HoTT.Term,provingground.HoTT.DepPair[provingground.HoTT.Term,provingground.HoTT.Term]]]]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/scalahott\/SigmaPiEnum$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/scalahott\/SigmaPiEnum$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/scalahott\/SigmaPiEnum$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/scalahott\/SigmaPiEnum$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/scalahott\/SigmaPiEnum$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/scalahott\/SigmaPiEnum$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/scalahott\/SigmaPiEnum$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/SigmaPiEnum$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/SigmaPiEnum$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/SigmaPiEnum$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/scalahott\/SigmaPiEnum$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/scalahott\/SigmaPiEnum$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/scalahott\/SigmaPiEnum$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/scalahott\/SigmaPiEnum$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/scalahott\/SigmaPiEnum$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/scalahott\/SigmaPiEnum$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/scalahott\/SigmaPiEnum$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/scalahott\/SigmaPiEnum$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/scalahott\/SigmaPiEnum$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.scalahott.SymbolicCRing", "shortDescription" : "", "object" : "provingground\/scalahott\/SymbolicCRing$.html", "members_class" : [{"label" : "cringStructure", "tail" : ": CRing[LocalTerm]", "member" : "provingground.scalahott.SymbolicCRing.cringStructure", "link" : "provingground\/scalahott\/SymbolicCRing.html#cringStructure:spire.algebra.CRing[SymbolicCRing.this.LocalTerm]", "kind" : "implicit val"}, {"label" : "multTerm", "tail" : "", "member" : "provingground.scalahott.SymbolicCRing.multTerm", "link" : "provingground\/scalahott\/SymbolicCRing.html#multTermextendsHoTT.Func[SymbolicCRing.this.LocalTerm,SymbolicCRing.this.LocalTerm]withProductwithSerializable", "kind" : "case class"}, {"label" : "multLiteral", "tail" : "", "member" : "provingground.scalahott.SymbolicCRing.multLiteral", "link" : "provingground\/scalahott\/SymbolicCRing.html#multLiteralextendsHoTT.Func[SymbolicCRing.this.LocalTerm,SymbolicCRing.this.LocalTerm]withProductwithSerializable", "kind" : "case class"}, {"label" : "prod", "tail" : "", "member" : "provingground.scalahott.SymbolicCRing.prod", "link" : "provingground\/scalahott\/SymbolicCRing.html#prod", "kind" : "object"}, {"label" : "power", "tail" : "(x: LocalTerm, n: Int): LocalTerm", "member" : "provingground.scalahott.SymbolicCRing.power", "link" : "provingground\/scalahott\/SymbolicCRing.html#power(x:SymbolicCRing.this.LocalTerm,n:Int):SymbolicCRing.this.LocalTerm", "kind" : "def"}, {"label" : "posPower", "tail" : "(x: LocalTerm, n: Int, accum: LocalTerm): LocalTerm", "member" : "provingground.scalahott.SymbolicCRing.posPower", "link" : "provingground\/scalahott\/SymbolicCRing.html#posPower(x:SymbolicCRing.this.LocalTerm,n:Int,accum:SymbolicCRing.this.LocalTerm):SymbolicCRing.this.LocalTerm", "kind" : "final def"}, {"label" : "AdditiveMorphism", "tail" : "", "member" : "provingground.scalahott.SymbolicCRing.AdditiveMorphism", "link" : "provingground\/scalahott\/SymbolicCRing.html#AdditiveMorphism[U<:SymbolicCRing.this.LocalTermwithprovingground.HoTT.Subs[U]]extendsHoTT.Func[SymbolicCRing.this.LocalTerm,SymbolicCRing.this.LocalTerm]withProductwithSerializable", "kind" : "case class"}, {"label" : "funcSum", "tail" : "(f: (LocalTerm) ⇒ LocalTerm, g: (LocalTerm) ⇒ LocalTerm): Func[RepTerm[A], LocalTerm]", "member" : "provingground.scalahott.SymbolicCRing.funcSum", "link" : "provingground\/scalahott\/SymbolicCRing.html#funcSum(f:SymbolicCRing.this.LocalTerm=>SymbolicCRing.this.LocalTerm,g:SymbolicCRing.this.LocalTerm=>SymbolicCRing.this.LocalTerm):provingground.HoTT.Func[provingground.scalahott.RepTerm[A],SymbolicCRing.this.LocalTerm]", "kind" : "def"}, {"label" : "AddTerm", "tail" : "", "member" : "provingground.scalahott.SymbolicCRing.AddTerm", "link" : "provingground\/scalahott\/SymbolicCRing.html#AddTermextendsHoTT.Func[SymbolicCRing.this.LocalTerm,SymbolicCRing.this.LocalTerm]withProductwithSerializable", "kind" : "case class"}, {"label" : "AddLiteral", "tail" : "", "member" : "provingground.scalahott.SymbolicCRing.AddLiteral", "link" : "provingground\/scalahott\/SymbolicCRing.html#AddLiteralextendsHoTT.Func[SymbolicCRing.this.LocalTerm,SymbolicCRing.this.LocalTerm]withProductwithSerializable", "kind" : "case class"}, {"label" : "LiteralSum", "tail" : "", "member" : "provingground.scalahott.SymbolicCRing.LiteralSum", "link" : "provingground\/scalahott\/SymbolicCRing.html#LiteralSum", "kind" : "object"}, {"label" : "sum", "tail" : "", "member" : "provingground.scalahott.SymbolicCRing.sum", "link" : "provingground\/scalahott\/SymbolicCRing.html#sum", "kind" : "object"}, {"label" : "Reciprocal", "tail" : "", "member" : "provingground.scalahott.SymbolicCRing.Reciprocal", "link" : "provingground\/scalahott\/SymbolicCRing.html#Reciprocal", "kind" : "object"}, {"label" : "reciprocal", "tail" : ": Func[LocalTerm, LocalTerm]", "member" : "provingground.scalahott.SymbolicCRing.reciprocal", "link" : "provingground\/scalahott\/SymbolicCRing.html#reciprocal:provingground.HoTT.Func[SymbolicCRing.this.LocalTerm,SymbolicCRing.this.LocalTerm]", "kind" : "lazy val"}, {"label" : "reciprocalOpt", "tail" : ": Option[Func[LocalTerm, LocalTerm]]", "member" : "provingground.scalahott.SymbolicCRing.reciprocalOpt", "link" : "provingground\/scalahott\/SymbolicCRing.html#reciprocalOpt:Option[provingground.HoTT.Func[SymbolicCRing.this.LocalTerm,SymbolicCRing.this.LocalTerm]]", "kind" : "val"}, {"label" : "PiTerm", "tail" : "", "member" : "provingground.scalahott.SymbolicCRing.PiTerm", "link" : "provingground\/scalahott\/SymbolicCRing.html#PiTerm", "kind" : "object"}, {"label" : "PiTerm", "tail" : "", "member" : "provingground.scalahott.SymbolicCRing.PiTerm", "link" : "provingground\/scalahott\/SymbolicCRing.html#PiTermextendsSymbolicCRing.this.LocalTermwithFoldedTerm[SymbolicCRing.this.LocalTerm]withProductwithSerializable", "kind" : "case class"}, {"label" : "LitProd", "tail" : "", "member" : "provingground.scalahott.SymbolicCRing.LitProd", "link" : "provingground\/scalahott\/SymbolicCRing.html#LitProd", "kind" : "object"}, {"label" : "SigmaTerm", "tail" : "", "member" : "provingground.scalahott.SymbolicCRing.SigmaTerm", "link" : "provingground\/scalahott\/SymbolicCRing.html#SigmaTerm", "kind" : "object"}, {"label" : "SigmaTerm", "tail" : "", "member" : "provingground.scalahott.SymbolicCRing.SigmaTerm", "link" : "provingground\/scalahott\/SymbolicCRing.html#SigmaTermextendsSymbolicCRing.this.LocalTermwithFoldedTerm[SymbolicCRing.this.LocalTerm]withProductwithSerializable", "kind" : "case class"}, {"label" : "Comb", "tail" : "", "member" : "provingground.scalahott.SymbolicCRing.Comb", "link" : "provingground\/scalahott\/SymbolicCRing.html#Comb", "kind" : "object"}, {"label" : "Literal", "tail" : "", "member" : "provingground.scalahott.SymbolicCRing.Literal", "link" : "provingground\/scalahott\/SymbolicCRing.html#Literal", "kind" : "object"}, {"label" : "LocalTyp", "tail" : "", "member" : "provingground.scalahott.SymbolicCRing.LocalTyp", "link" : "provingground\/scalahott\/SymbolicCRing.html#LocalTyp", "kind" : "object"}, {"label" : "Op", "tail" : "", "member" : "provingground.scalahott.SymbolicCRing.Op", "link" : "provingground\/scalahott\/SymbolicCRing.html#Op=provingground.HoTT.Func[SymbolicCRing.this.LocalTerm,provingground.HoTT.Func[SymbolicCRing.this.LocalTerm,SymbolicCRing.this.LocalTerm]]", "kind" : "type"}, {"label" : "LocalTerm", "tail" : "", "member" : "provingground.scalahott.SymbolicCRing.LocalTerm", "link" : "provingground\/scalahott\/SymbolicCRing.html#LocalTerm=provingground.scalahott.RepTerm[A]", "kind" : "type"}, {"label" : "negate", "tail" : "(x: LocalTerm): LocalTerm", "member" : "provingground.scalahott.SymbolicCRing.negate", "link" : "provingground\/scalahott\/SymbolicCRing.html#negate(x:SymbolicCRing.this.LocalTerm):SymbolicCRing.this.LocalTerm", "kind" : "def"}, {"label" : "minusone", "tail" : ": LocalTerm with Subs[LocalTerm]", "member" : "provingground.scalahott.SymbolicCRing.minusone", "link" : "provingground\/scalahott\/SymbolicCRing.html#minusone:SymbolicCRing.this.LocalTermwithprovingground.HoTT.Subs[SymbolicCRing.this.LocalTerm]", "kind" : "val"}, {"label" : "two", "tail" : ": A", "member" : "provingground.scalahott.SymbolicCRing.two", "link" : "provingground\/scalahott\/SymbolicCRing.html#two:A", "kind" : "val"}, {"label" : "ring", "tail" : ": Ring[A]", "member" : "provingground.scalahott.SymbolicCRing.ring", "link" : "provingground\/scalahott\/SymbolicCRing.html#ring:spire.algebra.Ring[A]", "kind" : "val"}, {"member" : "provingground.scalahott.SymbolicCRing#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/scalahott\/SymbolicCRing.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/scalahott\/SymbolicCRing.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/scalahott\/SymbolicCRing.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/scalahott\/SymbolicCRing.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/scalahott\/SymbolicCRing.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/scalahott\/SymbolicCRing.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/scalahott\/SymbolicCRing.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/SymbolicCRing.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/SymbolicCRing.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/SymbolicCRing.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/scalahott\/SymbolicCRing.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/scalahott\/SymbolicCRing.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/scalahott\/SymbolicCRing.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/scalahott\/SymbolicCRing.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/scalahott\/SymbolicCRing.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/scalahott\/SymbolicCRing.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/scalahott\/SymbolicCRing.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/scalahott\/SymbolicCRing.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/scalahott\/SymbolicCRing.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "literal", "tail" : "(term: Term): Option[String]", "member" : "provingground.scalahott.SymbolicCRing.literal", "link" : "provingground\/scalahott\/SymbolicCRing$.html#literal(term:provingground.HoTT.Term):Option[String]", "kind" : "def"}, {"label" : "parse", "tail" : "(typ: Typ[Term])(str: String): Option[Term]", "member" : "provingground.scalahott.SymbolicCRing.parse", "link" : "provingground\/scalahott\/SymbolicCRing$.html#parse(typ:provingground.HoTT.Typ[provingground.HoTT.Term])(str:String):Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/scalahott\/SymbolicCRing$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/scalahott\/SymbolicCRing$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/scalahott\/SymbolicCRing$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/scalahott\/SymbolicCRing$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/scalahott\/SymbolicCRing$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/scalahott\/SymbolicCRing$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/scalahott\/SymbolicCRing$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/SymbolicCRing$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/SymbolicCRing$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/SymbolicCRing$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/scalahott\/SymbolicCRing$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/scalahott\/SymbolicCRing$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/scalahott\/SymbolicCRing$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/scalahott\/SymbolicCRing$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/scalahott\/SymbolicCRing$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/scalahott\/SymbolicCRing$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/scalahott\/SymbolicCRing$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/scalahott\/SymbolicCRing$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/scalahott\/SymbolicCRing$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/scalahott\/SymbolicCRing.html", "kind" : "class"}, {"name" : "provingground.scalahott.SymbolicField", "shortDescription" : "", "members_class" : [{"label" : "multTerm", "tail" : "", "member" : "provingground.scalahott.SymbolicCRing.multTerm", "link" : "provingground\/scalahott\/SymbolicCRing.html#multTermextendsHoTT.Func[SymbolicCRing.this.LocalTerm,SymbolicCRing.this.LocalTerm]withProductwithSerializable", "kind" : "case class"}, {"label" : "multLiteral", "tail" : "", "member" : "provingground.scalahott.SymbolicCRing.multLiteral", "link" : "provingground\/scalahott\/SymbolicCRing.html#multLiteralextendsHoTT.Func[SymbolicCRing.this.LocalTerm,SymbolicCRing.this.LocalTerm]withProductwithSerializable", "kind" : "case class"}, {"label" : "prod", "tail" : "", "member" : "provingground.scalahott.SymbolicCRing.prod", "link" : "provingground\/scalahott\/SymbolicCRing.html#prod", "kind" : "object"}, {"label" : "AdditiveMorphism", "tail" : "", "member" : "provingground.scalahott.SymbolicCRing.AdditiveMorphism", "link" : "provingground\/scalahott\/SymbolicCRing.html#AdditiveMorphism[U<:SymbolicCRing.this.LocalTermwithprovingground.HoTT.Subs[U]]extendsHoTT.Func[SymbolicCRing.this.LocalTerm,SymbolicCRing.this.LocalTerm]withProductwithSerializable", "kind" : "case class"}, {"label" : "AddTerm", "tail" : "", "member" : "provingground.scalahott.SymbolicCRing.AddTerm", "link" : "provingground\/scalahott\/SymbolicCRing.html#AddTermextendsHoTT.Func[SymbolicCRing.this.LocalTerm,SymbolicCRing.this.LocalTerm]withProductwithSerializable", "kind" : "case class"}, {"label" : "AddLiteral", "tail" : "", "member" : "provingground.scalahott.SymbolicCRing.AddLiteral", "link" : "provingground\/scalahott\/SymbolicCRing.html#AddLiteralextendsHoTT.Func[SymbolicCRing.this.LocalTerm,SymbolicCRing.this.LocalTerm]withProductwithSerializable", "kind" : "case class"}, {"label" : "LiteralSum", "tail" : "", "member" : "provingground.scalahott.SymbolicCRing.LiteralSum", "link" : "provingground\/scalahott\/SymbolicCRing.html#LiteralSum", "kind" : "object"}, {"label" : "sum", "tail" : "", "member" : "provingground.scalahott.SymbolicCRing.sum", "link" : "provingground\/scalahott\/SymbolicCRing.html#sum", "kind" : "object"}, {"label" : "Reciprocal", "tail" : "", "member" : "provingground.scalahott.SymbolicCRing.Reciprocal", "link" : "provingground\/scalahott\/SymbolicCRing.html#Reciprocal", "kind" : "object"}, {"label" : "PiTerm", "tail" : "", "member" : "provingground.scalahott.SymbolicCRing.PiTerm", "link" : "provingground\/scalahott\/SymbolicCRing.html#PiTerm", "kind" : "object"}, {"label" : "PiTerm", "tail" : "", "member" : "provingground.scalahott.SymbolicCRing.PiTerm", "link" : "provingground\/scalahott\/SymbolicCRing.html#PiTermextendsSymbolicCRing.this.LocalTermwithFoldedTerm[SymbolicCRing.this.LocalTerm]withProductwithSerializable", "kind" : "case class"}, {"label" : "LitProd", "tail" : "", "member" : "provingground.scalahott.SymbolicCRing.LitProd", "link" : "provingground\/scalahott\/SymbolicCRing.html#LitProd", "kind" : "object"}, {"label" : "SigmaTerm", "tail" : "", "member" : "provingground.scalahott.SymbolicCRing.SigmaTerm", "link" : "provingground\/scalahott\/SymbolicCRing.html#SigmaTerm", "kind" : "object"}, {"label" : "SigmaTerm", "tail" : "", "member" : "provingground.scalahott.SymbolicCRing.SigmaTerm", "link" : "provingground\/scalahott\/SymbolicCRing.html#SigmaTermextendsSymbolicCRing.this.LocalTermwithFoldedTerm[SymbolicCRing.this.LocalTerm]withProductwithSerializable", "kind" : "case class"}, {"label" : "Comb", "tail" : "", "member" : "provingground.scalahott.SymbolicCRing.Comb", "link" : "provingground\/scalahott\/SymbolicCRing.html#Comb", "kind" : "object"}, {"label" : "Literal", "tail" : "", "member" : "provingground.scalahott.SymbolicCRing.Literal", "link" : "provingground\/scalahott\/SymbolicCRing.html#Literal", "kind" : "object"}, {"label" : "LocalTyp", "tail" : "", "member" : "provingground.scalahott.SymbolicCRing.LocalTyp", "link" : "provingground\/scalahott\/SymbolicCRing.html#LocalTyp", "kind" : "object"}, {"label" : "fieldStructure", "tail" : ": Field[LocalTerm]", "member" : "provingground.scalahott.SymbolicField.fieldStructure", "link" : "provingground\/scalahott\/SymbolicField.html#fieldStructure:spire.algebra.Field[SymbolicField.this.LocalTerm]", "kind" : "implicit val"}, {"label" : "power", "tail" : "(x: LocalTerm, n: Int): LocalTerm", "member" : "provingground.scalahott.SymbolicField.power", "link" : "provingground\/scalahott\/SymbolicField.html#power(x:SymbolicField.this.LocalTerm,n:Int):SymbolicField.this.LocalTerm", "kind" : "def"}, {"label" : "reciprocal", "tail" : ": Func[LocalTerm, LocalTerm]", "member" : "provingground.scalahott.SymbolicField.reciprocal", "link" : "provingground\/scalahott\/SymbolicField.html#reciprocal:provingground.HoTT.Func[SymbolicField.this.LocalTerm,SymbolicField.this.LocalTerm]", "kind" : "lazy val"}, {"label" : "field", "tail" : ": Field[A]", "member" : "provingground.scalahott.SymbolicField.field", "link" : "provingground\/scalahott\/SymbolicField.html#field:spire.algebra.Field[A]", "kind" : "val"}, {"member" : "provingground.scalahott.SymbolicField#<init>", "error" : "unsupported entity"}, {"label" : "cringStructure", "tail" : ": CRing[LocalTerm]", "member" : "provingground.scalahott.SymbolicCRing.cringStructure", "link" : "provingground\/scalahott\/SymbolicField.html#cringStructure:spire.algebra.CRing[SymbolicCRing.this.LocalTerm]", "kind" : "implicit val"}, {"label" : "posPower", "tail" : "(x: LocalTerm, n: Int, accum: LocalTerm): LocalTerm", "member" : "provingground.scalahott.SymbolicCRing.posPower", "link" : "provingground\/scalahott\/SymbolicField.html#posPower(x:SymbolicCRing.this.LocalTerm,n:Int,accum:SymbolicCRing.this.LocalTerm):SymbolicCRing.this.LocalTerm", "kind" : "final def"}, {"label" : "funcSum", "tail" : "(f: (LocalTerm) ⇒ LocalTerm, g: (LocalTerm) ⇒ LocalTerm): Func[RepTerm[A], LocalTerm]", "member" : "provingground.scalahott.SymbolicCRing.funcSum", "link" : "provingground\/scalahott\/SymbolicField.html#funcSum(f:SymbolicCRing.this.LocalTerm=>SymbolicCRing.this.LocalTerm,g:SymbolicCRing.this.LocalTerm=>SymbolicCRing.this.LocalTerm):provingground.HoTT.Func[provingground.scalahott.RepTerm[A],SymbolicCRing.this.LocalTerm]", "kind" : "def"}, {"label" : "reciprocalOpt", "tail" : ": Option[Func[LocalTerm, LocalTerm]]", "member" : "provingground.scalahott.SymbolicCRing.reciprocalOpt", "link" : "provingground\/scalahott\/SymbolicField.html#reciprocalOpt:Option[provingground.HoTT.Func[SymbolicCRing.this.LocalTerm,SymbolicCRing.this.LocalTerm]]", "kind" : "val"}, {"label" : "Op", "tail" : "", "member" : "provingground.scalahott.SymbolicCRing.Op", "link" : "provingground\/scalahott\/SymbolicField.html#Op=provingground.HoTT.Func[SymbolicCRing.this.LocalTerm,provingground.HoTT.Func[SymbolicCRing.this.LocalTerm,SymbolicCRing.this.LocalTerm]]", "kind" : "type"}, {"label" : "LocalTerm", "tail" : "", "member" : "provingground.scalahott.SymbolicCRing.LocalTerm", "link" : "provingground\/scalahott\/SymbolicField.html#LocalTerm=provingground.scalahott.RepTerm[A]", "kind" : "type"}, {"label" : "negate", "tail" : "(x: LocalTerm): LocalTerm", "member" : "provingground.scalahott.SymbolicCRing.negate", "link" : "provingground\/scalahott\/SymbolicField.html#negate(x:SymbolicCRing.this.LocalTerm):SymbolicCRing.this.LocalTerm", "kind" : "def"}, {"label" : "minusone", "tail" : ": LocalTerm with Subs[LocalTerm]", "member" : "provingground.scalahott.SymbolicCRing.minusone", "link" : "provingground\/scalahott\/SymbolicField.html#minusone:SymbolicCRing.this.LocalTermwithprovingground.HoTT.Subs[SymbolicCRing.this.LocalTerm]", "kind" : "val"}, {"label" : "two", "tail" : ": A", "member" : "provingground.scalahott.SymbolicCRing.two", "link" : "provingground\/scalahott\/SymbolicField.html#two:A", "kind" : "val"}, {"label" : "ring", "tail" : ": Ring[A]", "member" : "provingground.scalahott.SymbolicCRing.ring", "link" : "provingground\/scalahott\/SymbolicField.html#ring:spire.algebra.Ring[A]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/scalahott\/SymbolicField.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/scalahott\/SymbolicField.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/scalahott\/SymbolicField.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/scalahott\/SymbolicField.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/scalahott\/SymbolicField.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/scalahott\/SymbolicField.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/scalahott\/SymbolicField.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/SymbolicField.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/SymbolicField.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/SymbolicField.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/scalahott\/SymbolicField.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/scalahott\/SymbolicField.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/scalahott\/SymbolicField.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/scalahott\/SymbolicField.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/scalahott\/SymbolicField.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/scalahott\/SymbolicField.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/scalahott\/SymbolicField.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/scalahott\/SymbolicField.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/scalahott\/SymbolicField.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/scalahott\/SymbolicField.html", "kind" : "class"}, {"name" : "provingground.scalahott.SymbolicGroup", "shortDescription" : "", "members_class" : [{"label" : "Elem", "tail" : "", "member" : "provingground.HoTT.Typ.Elem", "link" : "provingground\/HoTT$$Typ.html#Elem", "kind" : "object"}, {"label" : "Theorems", "tail" : "", "member" : "provingground.scalahott.SymbolicGroup.Theorems", "link" : "provingground\/scalahott\/SymbolicGroup.html#Theorems", "kind" : "object"}, {"label" : "power", "tail" : ": Func[RepTerm[A] with Subs[RepTerm[A]], Func[NatRing.LocalTerm, RepTerm[A]]]", "member" : "provingground.scalahott.SymbolicGroup.power", "link" : "provingground\/scalahott\/SymbolicGroup.html#power:provingground.HoTT.Func[provingground.scalahott.RepTerm[A]withprovingground.HoTT.Subs[provingground.scalahott.RepTerm[A]],provingground.HoTT.Func[provingground.scalahott.NatRing.LocalTerm,provingground.scalahott.RepTerm[A]]]", "kind" : "val"}, {"label" : "rm", "tail" : ": Func[RepTerm[A] with Subs[RepTerm[A]], Func[RepTerm[A] with Subs[RepTerm[A]], LocalTerm]]", "member" : "provingground.scalahott.SymbolicGroup.rm", "link" : "provingground\/scalahott\/SymbolicGroup.html#rm:provingground.HoTT.Func[provingground.scalahott.RepTerm[A]withprovingground.HoTT.Subs[provingground.scalahott.RepTerm[A]],provingground.HoTT.Func[provingground.scalahott.RepTerm[A]withprovingground.HoTT.Subs[provingground.scalahott.RepTerm[A]],SymbolicGroup.this.LocalTerm]]", "kind" : "val"}, {"label" : "lm", "tail" : ": Func[RepTerm[A] with Subs[RepTerm[A]], Func[RepTerm[A] with Subs[RepTerm[A]], LocalTerm]]", "member" : "provingground.scalahott.SymbolicGroup.lm", "link" : "provingground\/scalahott\/SymbolicGroup.html#lm:provingground.HoTT.Func[provingground.scalahott.RepTerm[A]withprovingground.HoTT.Subs[provingground.scalahott.RepTerm[A]],provingground.HoTT.Func[provingground.scalahott.RepTerm[A]withprovingground.HoTT.Subs[provingground.scalahott.RepTerm[A]],SymbolicGroup.this.LocalTerm]]", "kind" : "val"}, {"label" : "h", "tail" : ": RepTerm[A] with Subs[RepTerm[A]]", "member" : "provingground.scalahott.SymbolicGroup.h", "link" : "provingground\/scalahott\/SymbolicGroup.html#h:provingground.scalahott.RepTerm[A]withprovingground.HoTT.Subs[provingground.scalahott.RepTerm[A]]", "kind" : "val"}, {"label" : "g", "tail" : ": RepTerm[A] with Subs[RepTerm[A]]", "member" : "provingground.scalahott.SymbolicGroup.g", "link" : "provingground\/scalahott\/SymbolicGroup.html#g:provingground.scalahott.RepTerm[A]withprovingground.HoTT.Subs[provingground.scalahott.RepTerm[A]]", "kind" : "val"}, {"label" : "groupStructure", "tail" : ": Group[LocalTerm]", "member" : "provingground.scalahott.SymbolicGroup.groupStructure", "link" : "provingground\/scalahott\/SymbolicGroup.html#groupStructure:cats.kernel.Group[SymbolicGroup.this.LocalTerm]", "kind" : "implicit val"}, {"label" : "mul", "tail" : "", "member" : "provingground.scalahott.SymbolicGroup.mul", "link" : "provingground\/scalahott\/SymbolicGroup.html#mul", "kind" : "object"}, {"label" : "MultTerm", "tail" : "", "member" : "provingground.scalahott.SymbolicGroup.MultTerm", "link" : "provingground\/scalahott\/SymbolicGroup.html#MultTermextendsHoTT.Func[SymbolicGroup.this.LocalTerm,SymbolicGroup.this.LocalTerm]withProductwithSerializable", "kind" : "case class"}, {"label" : "MultLiteral", "tail" : "", "member" : "provingground.scalahott.SymbolicGroup.MultLiteral", "link" : "provingground\/scalahott\/SymbolicGroup.html#MultLiteralextendsHoTT.Func[SymbolicGroup.this.LocalTerm,SymbolicGroup.this.LocalTerm]withProductwithSerializable", "kind" : "case class"}, {"label" : "inv", "tail" : "", "member" : "provingground.scalahott.SymbolicGroup.inv", "link" : "provingground\/scalahott\/SymbolicGroup.html#inv", "kind" : "object"}, {"label" : "Literal", "tail" : "", "member" : "provingground.scalahott.SymbolicGroup.Literal", "link" : "provingground\/scalahott\/SymbolicGroup.html#Literal", "kind" : "object"}, {"label" : "Comb", "tail" : "", "member" : "provingground.scalahott.SymbolicGroup.Comb", "link" : "provingground\/scalahott\/SymbolicGroup.html#Comb", "kind" : "object"}, {"label" : "e", "tail" : ": RepTerm[A]", "member" : "provingground.scalahott.SymbolicGroup.e", "link" : "provingground\/scalahott\/SymbolicGroup.html#e:provingground.scalahott.RepTerm[A]", "kind" : "val"}, {"label" : "Op", "tail" : "", "member" : "provingground.scalahott.SymbolicGroup.Op", "link" : "provingground\/scalahott\/SymbolicGroup.html#Op=provingground.HoTT.Func[SymbolicGroup.this.LocalTerm,provingground.HoTT.Func[SymbolicGroup.this.LocalTerm,SymbolicGroup.this.LocalTerm]]", "kind" : "type"}, {"label" : "LocalTerm", "tail" : "", "member" : "provingground.scalahott.SymbolicGroup.LocalTerm", "link" : "provingground\/scalahott\/SymbolicGroup.html#LocalTerm=provingground.scalahott.RepTerm[A]", "kind" : "type"}, {"label" : "group", "tail" : ": Group[A]", "member" : "provingground.scalahott.SymbolicGroup.group", "link" : "provingground\/scalahott\/SymbolicGroup.html#group:cats.kernel.Group[A]", "kind" : "val"}, {"member" : "provingground.scalahott.SymbolicGroup#<init>", "error" : "unsupported entity"}, {"label" : "rep", "tail" : ": ScalaRep[RepTerm[A], A]", "member" : "provingground.scalahott.ScalaTyp.rep", "link" : "provingground\/scalahott\/SymbolicGroup.html#rep:provingground.scalahott.ScalaRep[provingground.scalahott.RepTerm[A],A]", "kind" : "implicit val"}, {"label" : "subs", "tail" : "(x: Term, y: Term): Typ[RepTerm[A]] with Subs[Typ[RepTerm[A]]]", "member" : "provingground.scalahott.ScalaTyp.subs", "link" : "provingground\/scalahott\/SymbolicGroup.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.HoTT.Typ[provingground.scalahott.RepTerm[A]]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.scalahott.RepTerm[A]]]", "kind" : "def"}, {"label" : "newobj", "tail" : "(): Nothing", "member" : "provingground.scalahott.ScalaTyp.newobj", "link" : "provingground\/scalahott\/SymbolicGroup.html#newobj:Nothing", "kind" : "def"}, {"label" : "variable", "tail" : "(name: AnySym): RepTerm[A]", "member" : "provingground.scalahott.ScalaTyp.variable", "link" : "provingground\/scalahott\/SymbolicGroup.html#variable(name:provingground.HoTT.AnySym):provingground.scalahott.RepTerm[A]", "kind" : "def"}, {"label" : "typ", "tail" : ": ScalaTypUniv[A]", "member" : "provingground.scalahott.ScalaTyp.typ", "link" : "provingground\/scalahott\/SymbolicGroup.html#typ:provingground.scalahott.ScalaTypUniv[A]", "kind" : "val"}, {"label" : "Obj", "tail" : "", "member" : "provingground.scalahott.ScalaTyp.Obj", "link" : "provingground\/scalahott\/SymbolicGroup.html#Obj=provingground.scalahott.RepTerm[A]", "kind" : "type"}, {"label" : "++", "tail" : "(those: V): SigmaTyp[UU, VV]", "member" : "provingground.HoTT.Typ.++", "link" : "provingground\/scalahott\/SymbolicGroup.html#++[UU>:provingground.HoTT.Typ[U]<:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[UU],VV<:provingground.HoTT.Termwithprovingground.HoTT.Subs[VV],V<:provingground.HoTT.Typ[VV]withprovingground.HoTT.Subs[V]](those:V):provingground.HoTT.SigmaTyp[UU,VV]", "kind" : "def"}, {"label" : "||", "tail" : "(that: Typ[V]): PlusTyp[UU, V]", "member" : "provingground.HoTT.Typ.||", "link" : "provingground\/scalahott\/SymbolicGroup.html#||[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](that:provingground.HoTT.Typ[V]):provingground.HoTT.PlusTyp[UU,V]", "kind" : "def"}, {"label" : "&&", "tail" : "(that: Typ[V]): ProdTyp[UU, V]", "member" : "provingground.HoTT.Typ.&&", "link" : "provingground\/scalahott\/SymbolicGroup.html#&&[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](that:provingground.HoTT.Typ[V]):provingground.HoTT.ProdTyp[UU,V]", "kind" : "def"}, {"label" : "~>:", "tail" : "(variable: V): GenFuncTyp[V, UU]", "member" : "provingground.HoTT.Typ.~>:", "link" : "provingground\/scalahott\/SymbolicGroup.html#~>:[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](variable:V):provingground.HoTT.GenFuncTyp[V,UU]", "kind" : "def"}, {"label" : "->:", "tail" : "(that: Typ[W]): FuncTyp[W, UU]", "member" : "provingground.HoTT.Typ.->:", "link" : "provingground\/scalahott\/SymbolicGroup.html#->:[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU]](that:provingground.HoTT.Typ[W]):provingground.HoTT.FuncTyp[W,UU]", "kind" : "def"}, {"label" : "typedVar", "tail" : "(factory: NameFactory): TypedTerm[RepTerm[A]]", "member" : "provingground.HoTT.Typ.typedVar", "link" : "provingground\/scalahott\/SymbolicGroup.html#typedVar(implicitfactory:provingground.HoTT.NameFactory):provingground.HoTT.TypedTerm[U]", "kind" : "def"}, {"label" : "Var", "tail" : "(factory: NameFactory): RepTerm[A] with Subs[RepTerm[A]]", "member" : "provingground.HoTT.Typ.Var", "link" : "provingground\/scalahott\/SymbolicGroup.html#Var(implicitfactory:provingground.HoTT.NameFactory):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "sym", "tail" : "(name: Name): RepTerm[A] with Subs[RepTerm[A]]", "member" : "provingground.HoTT.Typ.sym", "link" : "provingground\/scalahott\/SymbolicGroup.html#sym(implicitname:sourcecode.Name):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "::", "tail" : "(name: String): RepTerm[A] with Subs[RepTerm[A]]", "member" : "provingground.HoTT.Typ.::", "link" : "provingground\/scalahott\/SymbolicGroup.html#::(name:String):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "typedVar", "tail" : "(name: AnySym): TypedTerm[RepTerm[A]]", "member" : "provingground.HoTT.Typ.typedVar", "link" : "provingground\/scalahott\/SymbolicGroup.html#typedVar(name:provingground.HoTT.AnySym):provingground.HoTT.TypedTerm[U]", "kind" : "def"}, {"label" : "symbObj", "tail" : "(name: AnySym): RepTerm[A] with Subs[RepTerm[A]]", "member" : "provingground.HoTT.Typ.symbObj", "link" : "provingground\/scalahott\/SymbolicGroup.html#symbObj(name:provingground.HoTT.AnySym):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "typlevel", "tail" : ": Int", "member" : "provingground.HoTT.Typ.typlevel", "link" : "provingground\/scalahott\/SymbolicGroup.html#typlevel:Int", "kind" : "lazy val"}, {"label" : "typed", "tail" : ": TypedTerm[Typ[Term]]", "member" : "provingground.HoTT.Typ.typed", "link" : "provingground\/scalahott\/SymbolicGroup.html#typed:provingground.HoTT.TypedTerm[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "!:", "tail" : "(term: Term): RepTerm[A]", "member" : "provingground.HoTT.Typ.!:", "link" : "provingground\/scalahott\/SymbolicGroup.html#!:(term:provingground.HoTT.Term):U", "kind" : "def"}, {"label" : "obj", "tail" : "(): RepTerm[A]", "member" : "provingground.HoTT.Typ.obj", "link" : "provingground\/scalahott\/SymbolicGroup.html#obj:U", "kind" : "def"}, {"label" : "usesVar", "tail" : "(t: Term): Boolean", "member" : "provingground.HoTT.Term.usesVar", "link" : "provingground\/scalahott\/SymbolicGroup.html#usesVar(t:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "indepOf", "tail" : "(that: Term): Boolean", "member" : "provingground.HoTT.Term.indepOf", "link" : "provingground\/scalahott\/SymbolicGroup.html#indepOf(that:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "dependsOn", "tail" : "(that: Term): Boolean", "member" : "provingground.HoTT.Term.dependsOn", "link" : "provingground\/scalahott\/SymbolicGroup.html#dependsOn(that:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "replace", "tail" : "(x: Term, y: Term): Typ[RepTerm[A]] with Subs[Typ[RepTerm[A]]]", "member" : "provingground.HoTT.Subs.replace", "link" : "provingground\/scalahott\/SymbolicGroup.html#replace(x:provingground.HoTT.Term,y:provingground.HoTT.Term):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/scalahott\/SymbolicGroup.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/scalahott\/SymbolicGroup.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/scalahott\/SymbolicGroup.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/scalahott\/SymbolicGroup.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/scalahott\/SymbolicGroup.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/scalahott\/SymbolicGroup.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/scalahott\/SymbolicGroup.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/SymbolicGroup.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/SymbolicGroup.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/SymbolicGroup.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/scalahott\/SymbolicGroup.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/scalahott\/SymbolicGroup.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/scalahott\/SymbolicGroup.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/scalahott\/SymbolicGroup.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/scalahott\/SymbolicGroup.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/scalahott\/SymbolicGroup.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/scalahott\/SymbolicGroup.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/scalahott\/SymbolicGroup.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/scalahott\/SymbolicGroup.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/scalahott\/SymbolicGroup.html", "kind" : "class"}, {"name" : "provingground.scalahott.SymbScalaTyp", "shortDescription" : "", "members_case class" : [{"label" : "Elem", "tail" : "", "member" : "provingground.HoTT.Typ.Elem", "link" : "provingground\/HoTT$$Typ.html#Elem", "kind" : "object"}, {"label" : "subs", "tail" : "(x: Term, y: Term): Typ[RepTerm[A]] with Subs[Typ[RepTerm[A]]]", "member" : "provingground.scalahott.SymbScalaTyp.subs", "link" : "provingground\/scalahott\/SymbScalaTyp.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.HoTT.Typ[provingground.scalahott.RepTerm[A]]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.scalahott.RepTerm[A]]]", "kind" : "def"}, {"member" : "provingground.scalahott.SymbScalaTyp#<init>", "error" : "unsupported entity"}, {"label" : "name", "tail" : ": AnySym", "member" : "provingground.scalahott.SymbScalaTyp.name", "link" : "provingground\/scalahott\/SymbScalaTyp.html#name:provingground.HoTT.AnySym", "kind" : "val"}, {"label" : "equals", "tail" : "(that: Any): Boolean", "member" : "provingground.HoTT.Symbolic.equals", "link" : "provingground\/scalahott\/SymbScalaTyp.html#equals(that:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : ": Int", "member" : "provingground.HoTT.Symbolic.hashCode", "link" : "provingground\/scalahott\/SymbScalaTyp.html#hashCode:Int", "kind" : "lazy val"}, {"label" : "toString", "tail" : "(): String", "member" : "provingground.HoTT.Symbolic.toString", "link" : "provingground\/scalahott\/SymbScalaTyp.html#toString():String", "kind" : "def"}, {"label" : "rep", "tail" : ": ScalaRep[RepTerm[A], A]", "member" : "provingground.scalahott.ScalaTyp.rep", "link" : "provingground\/scalahott\/SymbScalaTyp.html#rep:provingground.scalahott.ScalaRep[provingground.scalahott.RepTerm[A],A]", "kind" : "implicit val"}, {"label" : "newobj", "tail" : "(): Nothing", "member" : "provingground.scalahott.ScalaTyp.newobj", "link" : "provingground\/scalahott\/SymbScalaTyp.html#newobj:Nothing", "kind" : "def"}, {"label" : "variable", "tail" : "(name: AnySym): RepTerm[A]", "member" : "provingground.scalahott.ScalaTyp.variable", "link" : "provingground\/scalahott\/SymbScalaTyp.html#variable(name:provingground.HoTT.AnySym):provingground.scalahott.RepTerm[A]", "kind" : "def"}, {"label" : "typ", "tail" : ": ScalaTypUniv[A]", "member" : "provingground.scalahott.ScalaTyp.typ", "link" : "provingground\/scalahott\/SymbScalaTyp.html#typ:provingground.scalahott.ScalaTypUniv[A]", "kind" : "val"}, {"label" : "Obj", "tail" : "", "member" : "provingground.scalahott.ScalaTyp.Obj", "link" : "provingground\/scalahott\/SymbScalaTyp.html#Obj=provingground.scalahott.RepTerm[A]", "kind" : "type"}, {"label" : "++", "tail" : "(those: V): SigmaTyp[UU, VV]", "member" : "provingground.HoTT.Typ.++", "link" : "provingground\/scalahott\/SymbScalaTyp.html#++[UU>:provingground.HoTT.Typ[U]<:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[UU],VV<:provingground.HoTT.Termwithprovingground.HoTT.Subs[VV],V<:provingground.HoTT.Typ[VV]withprovingground.HoTT.Subs[V]](those:V):provingground.HoTT.SigmaTyp[UU,VV]", "kind" : "def"}, {"label" : "||", "tail" : "(that: Typ[V]): PlusTyp[UU, V]", "member" : "provingground.HoTT.Typ.||", "link" : "provingground\/scalahott\/SymbScalaTyp.html#||[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](that:provingground.HoTT.Typ[V]):provingground.HoTT.PlusTyp[UU,V]", "kind" : "def"}, {"label" : "&&", "tail" : "(that: Typ[V]): ProdTyp[UU, V]", "member" : "provingground.HoTT.Typ.&&", "link" : "provingground\/scalahott\/SymbScalaTyp.html#&&[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](that:provingground.HoTT.Typ[V]):provingground.HoTT.ProdTyp[UU,V]", "kind" : "def"}, {"label" : "~>:", "tail" : "(variable: V): GenFuncTyp[V, UU]", "member" : "provingground.HoTT.Typ.~>:", "link" : "provingground\/scalahott\/SymbScalaTyp.html#~>:[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](variable:V):provingground.HoTT.GenFuncTyp[V,UU]", "kind" : "def"}, {"label" : "->:", "tail" : "(that: Typ[W]): FuncTyp[W, UU]", "member" : "provingground.HoTT.Typ.->:", "link" : "provingground\/scalahott\/SymbScalaTyp.html#->:[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU]](that:provingground.HoTT.Typ[W]):provingground.HoTT.FuncTyp[W,UU]", "kind" : "def"}, {"label" : "typedVar", "tail" : "(factory: NameFactory): TypedTerm[RepTerm[A]]", "member" : "provingground.HoTT.Typ.typedVar", "link" : "provingground\/scalahott\/SymbScalaTyp.html#typedVar(implicitfactory:provingground.HoTT.NameFactory):provingground.HoTT.TypedTerm[U]", "kind" : "def"}, {"label" : "Var", "tail" : "(factory: NameFactory): RepTerm[A] with Subs[RepTerm[A]]", "member" : "provingground.HoTT.Typ.Var", "link" : "provingground\/scalahott\/SymbScalaTyp.html#Var(implicitfactory:provingground.HoTT.NameFactory):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "sym", "tail" : "(name: Name): RepTerm[A] with Subs[RepTerm[A]]", "member" : "provingground.HoTT.Typ.sym", "link" : "provingground\/scalahott\/SymbScalaTyp.html#sym(implicitname:sourcecode.Name):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "::", "tail" : "(name: String): RepTerm[A] with Subs[RepTerm[A]]", "member" : "provingground.HoTT.Typ.::", "link" : "provingground\/scalahott\/SymbScalaTyp.html#::(name:String):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "typedVar", "tail" : "(name: AnySym): TypedTerm[RepTerm[A]]", "member" : "provingground.HoTT.Typ.typedVar", "link" : "provingground\/scalahott\/SymbScalaTyp.html#typedVar(name:provingground.HoTT.AnySym):provingground.HoTT.TypedTerm[U]", "kind" : "def"}, {"label" : "symbObj", "tail" : "(name: AnySym): RepTerm[A] with Subs[RepTerm[A]]", "member" : "provingground.HoTT.Typ.symbObj", "link" : "provingground\/scalahott\/SymbScalaTyp.html#symbObj(name:provingground.HoTT.AnySym):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "typlevel", "tail" : ": Int", "member" : "provingground.HoTT.Typ.typlevel", "link" : "provingground\/scalahott\/SymbScalaTyp.html#typlevel:Int", "kind" : "lazy val"}, {"label" : "typed", "tail" : ": TypedTerm[Typ[Term]]", "member" : "provingground.HoTT.Typ.typed", "link" : "provingground\/scalahott\/SymbScalaTyp.html#typed:provingground.HoTT.TypedTerm[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "!:", "tail" : "(term: Term): RepTerm[A]", "member" : "provingground.HoTT.Typ.!:", "link" : "provingground\/scalahott\/SymbScalaTyp.html#!:(term:provingground.HoTT.Term):U", "kind" : "def"}, {"label" : "obj", "tail" : "(): RepTerm[A]", "member" : "provingground.HoTT.Typ.obj", "link" : "provingground\/scalahott\/SymbScalaTyp.html#obj:U", "kind" : "def"}, {"label" : "usesVar", "tail" : "(t: Term): Boolean", "member" : "provingground.HoTT.Term.usesVar", "link" : "provingground\/scalahott\/SymbScalaTyp.html#usesVar(t:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "indepOf", "tail" : "(that: Term): Boolean", "member" : "provingground.HoTT.Term.indepOf", "link" : "provingground\/scalahott\/SymbScalaTyp.html#indepOf(that:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "dependsOn", "tail" : "(that: Term): Boolean", "member" : "provingground.HoTT.Term.dependsOn", "link" : "provingground\/scalahott\/SymbScalaTyp.html#dependsOn(that:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "replace", "tail" : "(x: Term, y: Term): Typ[RepTerm[A]] with Subs[Typ[RepTerm[A]]]", "member" : "provingground.HoTT.Subs.replace", "link" : "provingground\/scalahott\/SymbScalaTyp.html#replace(x:provingground.HoTT.Term,y:provingground.HoTT.Term):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/scalahott\/SymbScalaTyp.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/scalahott\/SymbScalaTyp.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/scalahott\/SymbScalaTyp.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/scalahott\/SymbScalaTyp.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/scalahott\/SymbScalaTyp.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/scalahott\/SymbScalaTyp.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/scalahott\/SymbScalaTyp.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/SymbScalaTyp.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/SymbScalaTyp.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/SymbScalaTyp.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/scalahott\/SymbScalaTyp.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/scalahott\/SymbScalaTyp.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/scalahott\/SymbScalaTyp.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/scalahott\/SymbScalaTyp.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/scalahott\/SymbScalaTyp.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/scalahott\/SymbScalaTyp.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/scalahott\/SymbScalaTyp.html", "kind" : "case class"}, {"name" : "provingground.scalahott.VecTyp", "shortDescription" : "", "object" : "provingground\/scalahott\/VecTyp$.html", "members_object" : [{"label" : "nsucc", "tail" : ": Option[FuncLike[RepTerm[Long], FuncLike[RepTerm[Long], FuncLike[RepTerm[Vector[Long]], RepTerm[Vector[Long]]]]]]", "member" : "provingground.scalahott.VecTyp.nsucc", "link" : "provingground\/scalahott\/VecTyp$.html#nsucc:Option[provingground.HoTT.FuncLike[provingground.scalahott.RepTerm[Long],provingground.HoTT.FuncLike[provingground.scalahott.RepTerm[Long],provingground.HoTT.FuncLike[provingground.scalahott.RepTerm[Vector[Long]],provingground.scalahott.RepTerm[Vector[Long]]]]]]", "kind" : "val"}, {"label" : "nsize", "tail" : ": Option[FuncLike[RepTerm[Long], FuncLike[RepTerm[Vector[Long]], RepTerm[Long]]]]", "member" : "provingground.scalahott.VecTyp.nsize", "link" : "provingground\/scalahott\/VecTyp$.html#nsize:Option[provingground.HoTT.FuncLike[provingground.scalahott.RepTerm[Long],provingground.HoTT.FuncLike[provingground.scalahott.RepTerm[Vector[Long]],provingground.scalahott.RepTerm[Long]]]]", "kind" : "val"}, {"label" : "Vec", "tail" : ": FuncLike[RepTerm[Long], Typ[Term]]", "member" : "provingground.scalahott.VecTyp.Vec", "link" : "provingground\/scalahott\/VecTyp$.html#Vec:provingground.HoTT.FuncLike[provingground.scalahott.RepTerm[Long],provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "NatVecRep", "tail" : ": ScalaPolyRep[RepTerm[Vector[Long]], Vector[Long]]", "member" : "provingground.scalahott.VecTyp.NatVecRep", "link" : "provingground\/scalahott\/VecTyp$.html#NatVecRep:provingground.scalahott.ScalaPolyRep[provingground.scalahott.RepTerm[Vector[Long]],Vector[Long]]", "kind" : "implicit val"}, {"label" : "n", "tail" : ": RepTerm[Long] with Subs[RepTerm[Long]]", "member" : "provingground.scalahott.VecTyp.n", "link" : "provingground\/scalahott\/VecTyp$.html#n:provingground.scalahott.RepTerm[Long]withprovingground.HoTT.Subs[provingground.scalahott.RepTerm[Long]]", "kind" : "val"}, {"label" : "vecRep", "tail" : "(baserep: ScalaPolyRep[U, X]): ScalaPolyRep[RepTerm[Vector[X]], Vector[X]]", "member" : "provingground.scalahott.VecTyp.vecRep", "link" : "provingground\/scalahott\/VecTyp$.html#vecRep[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],X](implicitbaserep:provingground.scalahott.ScalaPolyRep[U,X]):provingground.scalahott.ScalaPolyRep[provingground.scalahott.RepTerm[Vector[X]],Vector[X]]", "kind" : "implicit def"}, {"label" : "VecPolyRep", "tail" : "", "member" : "provingground.scalahott.VecTyp.VecPolyRep", "link" : "provingground\/scalahott\/VecTyp$.html#VecPolyRep[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],X]extendsScalaPolyRep[provingground.scalahott.RepTerm[Vector[X]],Vector[X]]withProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/scalahott\/VecTyp$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/scalahott\/VecTyp$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/scalahott\/VecTyp$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/scalahott\/VecTyp$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/scalahott\/VecTyp$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/scalahott\/VecTyp$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/scalahott\/VecTyp$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/VecTyp$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/VecTyp$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/VecTyp$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/scalahott\/VecTyp$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/scalahott\/VecTyp$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/scalahott\/VecTyp$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/scalahott\/VecTyp$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/scalahott\/VecTyp$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/scalahott\/VecTyp$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/scalahott\/VecTyp$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/scalahott\/VecTyp$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/scalahott\/VecTyp$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "Elem", "tail" : "", "member" : "provingground.HoTT.Typ.Elem", "link" : "provingground\/HoTT$$Typ.html#Elem", "kind" : "object"}, {"label" : "subs", "tail" : "(x: Term, y: Term): Typ[RepTerm[Vector[X]]] with Subs[Typ[RepTerm[Vector[X]]]]", "member" : "provingground.scalahott.VecTyp.subs", "link" : "provingground\/scalahott\/VecTyp.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.HoTT.Typ[provingground.scalahott.RepTerm[Vector[X]]]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.scalahott.RepTerm[Vector[X]]]]", "kind" : "def"}, {"label" : "newobj", "tail" : "(): Nothing", "member" : "provingground.scalahott.VecTyp.newobj", "link" : "provingground\/scalahott\/VecTyp.html#newobj:Nothing", "kind" : "def"}, {"label" : "variable", "tail" : "(name: AnySym): RepTerm[Vector[X]]", "member" : "provingground.scalahott.VecTyp.variable", "link" : "provingground\/scalahott\/VecTyp.html#variable(name:provingground.HoTT.AnySym):provingground.scalahott.RepTerm[Vector[X]]", "kind" : "def"}, {"label" : "typ", "tail" : ": Universe", "member" : "provingground.scalahott.VecTyp.typ", "link" : "provingground\/scalahott\/VecTyp.html#typ:provingground.HoTT.Universe", "kind" : "val"}, {"label" : "Obj", "tail" : "", "member" : "provingground.scalahott.VecTyp.Obj", "link" : "provingground\/scalahott\/VecTyp.html#Obj=provingground.scalahott.RepTerm[Vector[X]]", "kind" : "type"}, {"label" : "baserep", "tail" : ": ScalaRep[U, X]", "member" : "provingground.scalahott.VecTyp.baserep", "link" : "provingground\/scalahott\/VecTyp.html#baserep:provingground.scalahott.ScalaRep[U,X]", "kind" : "val"}, {"member" : "provingground.scalahott.VecTyp#<init>", "error" : "unsupported entity"}, {"label" : "dim", "tail" : ": Long", "member" : "provingground.scalahott.VecTyp.dim", "link" : "provingground\/scalahott\/VecTyp.html#dim:Long", "kind" : "val"}, {"label" : "basetyp", "tail" : ": Typ[U]", "member" : "provingground.scalahott.VecTyp.basetyp", "link" : "provingground\/scalahott\/VecTyp.html#basetyp:provingground.HoTT.Typ[U]", "kind" : "val"}, {"label" : "++", "tail" : "(those: V): SigmaTyp[UU, VV]", "member" : "provingground.HoTT.Typ.++", "link" : "provingground\/scalahott\/VecTyp.html#++[UU>:provingground.HoTT.Typ[U]<:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[UU],VV<:provingground.HoTT.Termwithprovingground.HoTT.Subs[VV],V<:provingground.HoTT.Typ[VV]withprovingground.HoTT.Subs[V]](those:V):provingground.HoTT.SigmaTyp[UU,VV]", "kind" : "def"}, {"label" : "||", "tail" : "(that: Typ[V]): PlusTyp[UU, V]", "member" : "provingground.HoTT.Typ.||", "link" : "provingground\/scalahott\/VecTyp.html#||[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](that:provingground.HoTT.Typ[V]):provingground.HoTT.PlusTyp[UU,V]", "kind" : "def"}, {"label" : "&&", "tail" : "(that: Typ[V]): ProdTyp[UU, V]", "member" : "provingground.HoTT.Typ.&&", "link" : "provingground\/scalahott\/VecTyp.html#&&[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](that:provingground.HoTT.Typ[V]):provingground.HoTT.ProdTyp[UU,V]", "kind" : "def"}, {"label" : "~>:", "tail" : "(variable: V): GenFuncTyp[V, UU]", "member" : "provingground.HoTT.Typ.~>:", "link" : "provingground\/scalahott\/VecTyp.html#~>:[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](variable:V):provingground.HoTT.GenFuncTyp[V,UU]", "kind" : "def"}, {"label" : "->:", "tail" : "(that: Typ[W]): FuncTyp[W, UU]", "member" : "provingground.HoTT.Typ.->:", "link" : "provingground\/scalahott\/VecTyp.html#->:[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU]](that:provingground.HoTT.Typ[W]):provingground.HoTT.FuncTyp[W,UU]", "kind" : "def"}, {"label" : "typedVar", "tail" : "(factory: NameFactory): TypedTerm[RepTerm[Vector[X]]]", "member" : "provingground.HoTT.Typ.typedVar", "link" : "provingground\/scalahott\/VecTyp.html#typedVar(implicitfactory:provingground.HoTT.NameFactory):provingground.HoTT.TypedTerm[U]", "kind" : "def"}, {"label" : "Var", "tail" : "(factory: NameFactory): RepTerm[Vector[X]] with Subs[RepTerm[Vector[X]]]", "member" : "provingground.HoTT.Typ.Var", "link" : "provingground\/scalahott\/VecTyp.html#Var(implicitfactory:provingground.HoTT.NameFactory):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "sym", "tail" : "(name: Name): RepTerm[Vector[X]] with Subs[RepTerm[Vector[X]]]", "member" : "provingground.HoTT.Typ.sym", "link" : "provingground\/scalahott\/VecTyp.html#sym(implicitname:sourcecode.Name):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "::", "tail" : "(name: String): RepTerm[Vector[X]] with Subs[RepTerm[Vector[X]]]", "member" : "provingground.HoTT.Typ.::", "link" : "provingground\/scalahott\/VecTyp.html#::(name:String):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "typedVar", "tail" : "(name: AnySym): TypedTerm[RepTerm[Vector[X]]]", "member" : "provingground.HoTT.Typ.typedVar", "link" : "provingground\/scalahott\/VecTyp.html#typedVar(name:provingground.HoTT.AnySym):provingground.HoTT.TypedTerm[U]", "kind" : "def"}, {"label" : "symbObj", "tail" : "(name: AnySym): RepTerm[Vector[X]] with Subs[RepTerm[Vector[X]]]", "member" : "provingground.HoTT.Typ.symbObj", "link" : "provingground\/scalahott\/VecTyp.html#symbObj(name:provingground.HoTT.AnySym):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "typlevel", "tail" : ": Int", "member" : "provingground.HoTT.Typ.typlevel", "link" : "provingground\/scalahott\/VecTyp.html#typlevel:Int", "kind" : "lazy val"}, {"label" : "typed", "tail" : ": TypedTerm[Typ[Term]]", "member" : "provingground.HoTT.Typ.typed", "link" : "provingground\/scalahott\/VecTyp.html#typed:provingground.HoTT.TypedTerm[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "!:", "tail" : "(term: Term): RepTerm[Vector[X]]", "member" : "provingground.HoTT.Typ.!:", "link" : "provingground\/scalahott\/VecTyp.html#!:(term:provingground.HoTT.Term):U", "kind" : "def"}, {"label" : "obj", "tail" : "(): RepTerm[Vector[X]]", "member" : "provingground.HoTT.Typ.obj", "link" : "provingground\/scalahott\/VecTyp.html#obj:U", "kind" : "def"}, {"label" : "usesVar", "tail" : "(t: Term): Boolean", "member" : "provingground.HoTT.Term.usesVar", "link" : "provingground\/scalahott\/VecTyp.html#usesVar(t:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "indepOf", "tail" : "(that: Term): Boolean", "member" : "provingground.HoTT.Term.indepOf", "link" : "provingground\/scalahott\/VecTyp.html#indepOf(that:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "dependsOn", "tail" : "(that: Term): Boolean", "member" : "provingground.HoTT.Term.dependsOn", "link" : "provingground\/scalahott\/VecTyp.html#dependsOn(that:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "replace", "tail" : "(x: Term, y: Term): Typ[RepTerm[Vector[X]]] with Subs[Typ[RepTerm[Vector[X]]]]", "member" : "provingground.HoTT.Subs.replace", "link" : "provingground\/scalahott\/VecTyp.html#replace(x:provingground.HoTT.Term,y:provingground.HoTT.Term):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/scalahott\/VecTyp.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/scalahott\/VecTyp.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/scalahott\/VecTyp.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/scalahott\/VecTyp.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/scalahott\/VecTyp.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/scalahott\/VecTyp.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/scalahott\/VecTyp.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/VecTyp.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/VecTyp.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/VecTyp.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/scalahott\/VecTyp.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/scalahott\/VecTyp.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/scalahott\/VecTyp.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/scalahott\/VecTyp.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/scalahott\/VecTyp.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/scalahott\/VecTyp.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/scalahott\/VecTyp.html", "kind" : "case class"}, {"name" : "provingground.scalahott.VecTyps", "shortDescription" : "", "members_class" : [{"label" : "cons", "tail" : ": FuncLike[Nat, Func[U, Func[RepTerm[Vector[X]], RepTerm[Vector[X]]]]]", "member" : "provingground.scalahott.VecTyps.cons", "link" : "provingground\/scalahott\/VecTyps.html#cons:provingground.HoTT.FuncLike[provingground.scalahott.NatRing.Nat,provingground.HoTT.Func[U,provingground.HoTT.Func[provingground.scalahott.RepTerm[Vector[X]],provingground.scalahott.RepTerm[Vector[X]]]]]", "kind" : "val"}, {"label" : "consLike", "tail" : ": FuncLike[RepTerm[SafeLong], FuncLike[U, FuncLike[RepTerm[Vector[X]], RepTerm[Vector[X]]]]]", "member" : "provingground.scalahott.VecTyps.consLike", "link" : "provingground\/scalahott\/VecTyps.html#consLike:provingground.HoTT.FuncLike[provingground.scalahott.RepTerm[spire.math.SafeLong],provingground.HoTT.FuncLike[U,provingground.HoTT.FuncLike[provingground.scalahott.RepTerm[Vector[X]],provingground.scalahott.RepTerm[Vector[X]]]]]", "kind" : "val"}, {"label" : "consRep", "tail" : ": ScalaPolyRep[FuncLike[RepTerm[SafeLong], FuncLike[U, FuncLike[RepTerm[Vector[X]], RepTerm[Vector[X]]]]], (SafeLong) ⇒ (X) ⇒ (Vector[X]) ⇒ Vector[X]]", "member" : "provingground.scalahott.VecTyps.consRep", "link" : "provingground\/scalahott\/VecTyps.html#consRep:provingground.scalahott.ScalaPolyRep[provingground.HoTT.FuncLike[provingground.scalahott.RepTerm[spire.math.SafeLong],provingground.HoTT.FuncLike[U,provingground.HoTT.FuncLike[provingground.scalahott.RepTerm[Vector[X]],provingground.scalahott.RepTerm[Vector[X]]]]],spire.math.SafeLong=>(X=>(Vector[X]=>Vector[X]))]", "kind" : "val"}, {"label" : "consFn", "tail" : ": (SafeLong) ⇒ (X) ⇒ (Vector[X]) ⇒ Vector[X]", "member" : "provingground.scalahott.VecTyps.consFn", "link" : "provingground\/scalahott\/VecTyps.html#consFn:spire.math.SafeLong=>(X=>(Vector[X]=>scala.collection.immutable.Vector[X]))", "kind" : "val"}, {"label" : "consTyp", "tail" : ": GenFuncTyp[RepTerm[SafeLong] with Subs[RepTerm[SafeLong]], Func[U, Func[RepTerm[Vector[X]], RepTerm[Vector[X]]]]]", "member" : "provingground.scalahott.VecTyps.consTyp", "link" : "provingground\/scalahott\/VecTyps.html#consTyp:provingground.HoTT.GenFuncTyp[provingground.scalahott.RepTerm[spire.math.SafeLong]withprovingground.HoTT.Subs[provingground.scalahott.RepTerm[spire.math.SafeLong]],provingground.HoTT.Func[U,provingground.HoTT.Func[provingground.scalahott.RepTerm[Vector[X]],provingground.scalahott.RepTerm[Vector[X]]]]]", "kind" : "val"}, {"label" : "NilVec", "tail" : ": RepTerm[Vector[X]]", "member" : "provingground.scalahott.VecTyps.NilVec", "link" : "provingground\/scalahott\/VecTyps.html#NilVec:provingground.scalahott.RepTerm[Vector[X]]", "kind" : "val"}, {"label" : "Vec", "tail" : ": Func[RepTerm[SafeLong], Typ[RepTerm[Vector[X]]]]", "member" : "provingground.scalahott.VecTyps.Vec", "link" : "provingground\/scalahott\/VecTyps.html#Vec:provingground.HoTT.Func[provingground.scalahott.RepTerm[spire.math.SafeLong],provingground.HoTT.Typ[provingground.scalahott.RepTerm[Vector[X]]]]", "kind" : "val"}, {"label" : "n", "tail" : ": RepTerm[SafeLong] with Subs[RepTerm[SafeLong]]", "member" : "provingground.scalahott.VecTyps.n", "link" : "provingground\/scalahott\/VecTyps.html#n:provingground.scalahott.RepTerm[spire.math.SafeLong]withprovingground.HoTT.Subs[provingground.scalahott.RepTerm[spire.math.SafeLong]]", "kind" : "val"}, {"label" : "vrep", "tail" : ": ScalaPolyRep[RepTerm[Vector[X]], Vector[X]]", "member" : "provingground.scalahott.VecTyps.vrep", "link" : "provingground\/scalahott\/VecTyps.html#vrep:provingground.scalahott.ScalaPolyRep[provingground.scalahott.RepTerm[Vector[X]],Vector[X]]", "kind" : "implicit val"}, {"member" : "provingground.scalahott.VecTyps#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/scalahott\/VecTyps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/scalahott\/VecTyps.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/scalahott\/VecTyps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/scalahott\/VecTyps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/scalahott\/VecTyps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/scalahott\/VecTyps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/scalahott\/VecTyps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/VecTyps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/VecTyps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scalahott\/VecTyps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/scalahott\/VecTyps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/scalahott\/VecTyps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/scalahott\/VecTyps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/scalahott\/VecTyps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/scalahott\/VecTyps.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/scalahott\/VecTyps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/scalahott\/VecTyps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/scalahott\/VecTyps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/scalahott\/VecTyps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/scalahott\/VecTyps.html", "kind" : "class"}], "provingground.learning" : [{"name" : "provingground.learning.AdjDiffbleFunction", "members_trait" : [{"label" : "oplus", "tail" : "(that: AdjDiffbleFunction[C, D]): Oplus[A, B, C, D]", "member" : "provingground.learning.AdjDiffbleFunction.oplus", "link" : "provingground\/learning\/AdjDiffbleFunction.html#oplus[C,D](that:provingground.learning.AdjDiffbleFunction[C,D]):provingground.learning.AdjDiffbleFunction.Oplus[A,B,C,D]", "kind" : "def"}, {"label" : "**:", "tail" : "(that: (A) ⇒ B): (A) ⇒ A", "member" : "provingground.learning.AdjDiffbleFunction.**:", "link" : "provingground\/learning\/AdjDiffbleFunction.html#**:(that:A=>B):A=>A", "kind" : "def"}, {"label" : "^:", "tail" : "(that: (B) ⇒ B): (A) ⇒ A", "member" : "provingground.learning.AdjDiffbleFunction.^:", "link" : "provingground\/learning\/AdjDiffbleFunction.html#^:(that:B=>B):A=>A", "kind" : "def"}, {"label" : "andthen", "tail" : "(that: ⇒ AdjDiffbleFunction[B, C]): AdjDiffbleFunction[A, C]", "member" : "provingground.learning.AdjDiffbleFunction.andthen", "link" : "provingground\/learning\/AdjDiffbleFunction.html#andthen[C](that:=>provingground.learning.AdjDiffbleFunction[B,C]):provingground.learning.AdjDiffbleFunction[A,C]", "kind" : "def"}, {"label" : "*:", "tail" : "(that: ⇒ AdjDiffbleFunction[B, C]): AdjDiffbleFunction[A, C]", "member" : "provingground.learning.AdjDiffbleFunction.*:", "link" : "provingground\/learning\/AdjDiffbleFunction.html#*:[C](that:=>provingground.learning.AdjDiffbleFunction[B,C]):provingground.learning.AdjDiffbleFunction[A,C]", "kind" : "def"}, {"label" : "apply", "tail" : "(a: A): B", "member" : "provingground.learning.AdjDiffbleFunction.apply", "link" : "provingground\/learning\/AdjDiffbleFunction.html#apply(a:A):B", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/AdjDiffbleFunction.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/AdjDiffbleFunction.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/AdjDiffbleFunction.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/AdjDiffbleFunction.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/AdjDiffbleFunction.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/AdjDiffbleFunction.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/AdjDiffbleFunction.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/AdjDiffbleFunction.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/AdjDiffbleFunction.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/AdjDiffbleFunction.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/AdjDiffbleFunction.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/AdjDiffbleFunction.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/AdjDiffbleFunction.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/AdjDiffbleFunction.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/AdjDiffbleFunction.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/AdjDiffbleFunction.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/AdjDiffbleFunction.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/AdjDiffbleFunction.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/AdjDiffbleFunction.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "adjDer", "tail" : ": (A) ⇒ (B) ⇒ A", "member" : "provingground.learning.AdjDiffbleFunction.adjDer", "link" : "provingground\/learning\/AdjDiffbleFunction.html#adjDer:A=>(B=>A)", "kind" : "abstract val"}, {"label" : "func", "tail" : ": (A) ⇒ B", "member" : "provingground.learning.AdjDiffbleFunction.func", "link" : "provingground\/learning\/AdjDiffbleFunction.html#func:A=>B", "kind" : "abstract val"}], "shortDescription" : "", "object" : "provingground\/learning\/AdjDiffbleFunction$.html", "members_object" : [{"label" : "FormalExtension", "tail" : "", "member" : "provingground.learning.AdjDiffbleFunction.FormalExtension", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#FormalExtension[A]extendsAdjDiffbleFunction[A,A]", "kind" : "trait"}, {"label" : "vecSpaceDiffFn", "tail" : "(vsA: VectorSpace[A, Double], vsB: VectorSpace[B, Double]): VectorSpace[AdjDiffbleFunction[A, B], Double]", "member" : "provingground.learning.AdjDiffbleFunction.vecSpaceDiffFn", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#vecSpaceDiffFn[A,B](implicitvsA:spire.algebra.VectorSpace[A,Double],implicitvsB:spire.algebra.VectorSpace[B,Double]):spire.algebra.VectorSpace[provingground.learning.AdjDiffbleFunction[A,B],Double]", "kind" : "implicit def"}, {"label" : "diffFnLS", "tail" : "(arg0: LinearStructure[A], arg1: LinearStructure[B]): LinearStructure[AdjDiffbleFunction[A, B]]", "member" : "provingground.learning.AdjDiffbleFunction.diffFnLS", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#diffFnLS[A,B](implicitevidence$22:provingground.LinearStructure[A],implicitevidence$23:provingground.LinearStructure[B]):provingground.LinearStructure[provingground.learning.AdjDiffbleFunction[A,B]]", "kind" : "implicit def"}, {"label" : "Zero", "tail" : "", "member" : "provingground.learning.AdjDiffbleFunction.Zero", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#Zero[A,B]extendsAdjDiffbleFunction[A,B]withProductwithSerializable", "kind" : "case class"}, {"label" : "Sum", "tail" : "", "member" : "provingground.learning.AdjDiffbleFunction.Sum", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#Sum[A,B]extendsAdjDiffbleFunction[A,B]withProductwithSerializable", "kind" : "case class"}, {"label" : "DotProd", "tail" : "", "member" : "provingground.learning.AdjDiffbleFunction.DotProd", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#DotProd[A,B]extendsAdjDiffbleFunction[A,B]withProductwithSerializable", "kind" : "case class"}, {"label" : "Diagonal", "tail" : "", "member" : "provingground.learning.AdjDiffbleFunction.Diagonal", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#Diagonal[A]extendsAdjDiffbleFunction[A,(A,A)]withProductwithSerializable", "kind" : "case class"}, {"label" : "BigSum", "tail" : "", "member" : "provingground.learning.AdjDiffbleFunction.BigSum", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#BigSum[A,B]extendsAdjDiffbleFunction[A,B]withProductwithSerializable", "kind" : "case class"}, {"label" : "mixinIsle", "tail" : "(f: AdjDiffbleFunction[A, A], isle: (AdjDiffbleFunction[A, A]) ⇒ AdjDiffbleFunction[A, A], normalize: AdjDiffbleFunction[A, A])(arg0: LinearStructure[A]): (Int) ⇒ AdjDiffbleFunction[A, A]", "member" : "provingground.learning.AdjDiffbleFunction.mixinIsle", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#mixinIsle[A](f:provingground.learning.AdjDiffbleFunction[A,A],isle:provingground.learning.AdjDiffbleFunction[A,A]=>provingground.learning.AdjDiffbleFunction[A,A],normalize:provingground.learning.AdjDiffbleFunction[A,A])(implicitevidence$12:provingground.LinearStructure[A]):Int=>provingground.learning.AdjDiffbleFunction[A,A]", "kind" : "def"}, {"label" : "iterate", "tail" : "(f: AdjDiffbleFunction[A, A]): (Int) ⇒ AdjDiffbleFunction[A, A]", "member" : "provingground.learning.AdjDiffbleFunction.iterate", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#iterate[A](f:provingground.learning.AdjDiffbleFunction[A,A]):Int=>provingground.learning.AdjDiffbleFunction[A,A]", "kind" : "def"}, {"label" : "iterateDiffble", "tail" : "(fn: AdjDiffbleFunction[X, X], n: Int): AdjDiffbleFunction[X, X]", "member" : "provingground.learning.AdjDiffbleFunction.iterateDiffble", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#iterateDiffble[X](fn:provingground.learning.AdjDiffbleFunction[X,X],n:Int):provingground.learning.AdjDiffbleFunction[X,X]", "kind" : "def"}, {"label" : "consIterateDiffble", "tail" : "(fn: AdjDiffbleFunction[X, X], n: Int): AdjDiffbleFunction[X, X]", "member" : "provingground.learning.AdjDiffbleFunction.consIterateDiffble", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#consIterateDiffble[X](fn:provingground.learning.AdjDiffbleFunction[X,X],n:Int):provingground.learning.AdjDiffbleFunction[X,X]", "kind" : "def"}, {"label" : "IteratedDiffble", "tail" : "", "member" : "provingground.learning.AdjDiffbleFunction.IteratedDiffble", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#IteratedDiffble[X]extendsAdjDiffbleFunction[X,X]withProductwithSerializable", "kind" : "case class"}, {"label" : "recIterateDiffble", "tail" : "(fn: AdjDiffbleFunction[X, X], n: Int, accum: AdjDiffbleFunction[X, X]): AdjDiffbleFunction[X, X]", "member" : "provingground.learning.AdjDiffbleFunction.recIterateDiffble", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#recIterateDiffble[X](fn:provingground.learning.AdjDiffbleFunction[X,X],n:Int,accum:provingground.learning.AdjDiffbleFunction[X,X]):provingground.learning.AdjDiffbleFunction[X,X]", "kind" : "def"}, {"label" : "repsquare", "tail" : "(f: AdjDiffbleFunction[A, A])(arg0: LinearStructure[A]): (Int) ⇒ AdjDiffbleFunction[A, A]", "member" : "provingground.learning.AdjDiffbleFunction.repsquare", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#repsquare[A](f:provingground.learning.AdjDiffbleFunction[A,A])(implicitevidence$11:provingground.LinearStructure[A]):Int=>provingground.learning.AdjDiffbleFunction[A,A]", "kind" : "def"}, {"label" : "ScProd", "tail" : "", "member" : "provingground.learning.AdjDiffbleFunction.ScProd", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#ScProd[V]extendsAdjDiffbleFunction[(Double,V),V]withProductwithSerializable", "kind" : "case class"}, {"label" : "block", "tail" : "(f: AdjDiffbleFunction[A, C], g: AdjDiffbleFunction[B, D])(arg0: LinearStructure[A], arg1: LinearStructure[B], arg2: LinearStructure[C], arg3: LinearStructure[D]): AdjDiffbleFunction[(A, B), (C, D)]", "member" : "provingground.learning.AdjDiffbleFunction.block", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#block[A,B,C,D](f:provingground.learning.AdjDiffbleFunction[A,C],g:provingground.learning.AdjDiffbleFunction[B,D])(implicitevidence$5:provingground.LinearStructure[A],implicitevidence$6:provingground.LinearStructure[B],implicitevidence$7:provingground.LinearStructure[C],implicitevidence$8:provingground.LinearStructure[D]):provingground.learning.AdjDiffbleFunction[(A,B),(C,D)]", "kind" : "def"}, {"label" : "Proj2", "tail" : "", "member" : "provingground.learning.AdjDiffbleFunction.Proj2", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#Proj2[A,B]extendsAdjDiffbleFunction[(A,B),B]withProductwithSerializable", "kind" : "case class"}, {"label" : "Proj1", "tail" : "", "member" : "provingground.learning.AdjDiffbleFunction.Proj1", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#Proj1[A,B]extendsAdjDiffbleFunction[(A,B),A]withProductwithSerializable", "kind" : "case class"}, {"label" : "Incl2", "tail" : "", "member" : "provingground.learning.AdjDiffbleFunction.Incl2", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#Incl2[A,B]extendsAdjDiffbleFunction[B,(A,B)]withProductwithSerializable", "kind" : "case class"}, {"label" : "Incl1", "tail" : "", "member" : "provingground.learning.AdjDiffbleFunction.Incl1", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#Incl1[A,B]extendsAdjDiffbleFunction[A,(A,B)]withProductwithSerializable", "kind" : "case class"}, {"label" : "id", "tail" : "(): AdjDiffbleFunction[A, A]", "member" : "provingground.learning.AdjDiffbleFunction.id", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#id[A]:provingground.learning.AdjDiffbleFunction[A,A]", "kind" : "def"}, {"label" : "Id", "tail" : "", "member" : "provingground.learning.AdjDiffbleFunction.Id", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#Id[A]extendsAdjDiffbleFunction[A,A]withProductwithSerializable", "kind" : "case class"}, {"label" : "SelfAdj", "tail" : "", "member" : "provingground.learning.AdjDiffbleFunction.SelfAdj", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#SelfAdj[A]extendsAdjDiffbleFunction[A,A]withProductwithSerializable", "kind" : "case class"}, {"label" : "Oplus", "tail" : "", "member" : "provingground.learning.AdjDiffbleFunction.Oplus", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#Oplus[A,B,C,D]extendsAdjDiffbleFunction[(A,C),(B,D)]withProductwithSerializable", "kind" : "case class"}, {"label" : "Composition", "tail" : "", "member" : "provingground.learning.AdjDiffbleFunction.Composition", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#Composition[A,B,C]extendsAdjDiffbleFunction[A,C]withProductwithSerializable", "kind" : "case class"}, {"label" : "apply", "tail" : "(f: ⇒ (A) ⇒ B)(grd: ⇒ (A) ⇒ (B) ⇒ A): AdjDiffbleFunction[A, B]", "member" : "provingground.learning.AdjDiffbleFunction.apply", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#apply[A,B](f:=>A=>B)(grd:=>A=>(B=>A)):provingground.learning.AdjDiffbleFunction[A,B]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/AdjDiffbleFunction$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/AdjDiffbleFunction$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/learning\/AdjDiffbleFunction.html", "kind" : "trait"}, {"name" : "provingground.learning.ApplnInverse", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/ApplnInverse.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/ApplnInverse.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/ApplnInverse.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/ApplnInverse.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/ApplnInverse.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/ApplnInverse.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/ApplnInverse.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/ApplnInverse.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/ApplnInverse.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/ApplnInverse.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/ApplnInverse.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/ApplnInverse.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/ApplnInverse.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/ApplnInverse.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/ApplnInverse.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/ApplnInverse.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/ApplnInverse.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/ApplnInverse.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/ApplnInverse.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "unAppInv", "tail" : "(term: Term, context: Vector[Term]): Set[(ExstFunc, Term)]", "member" : "provingground.learning.ApplnInverse.unAppInv", "link" : "provingground\/learning\/ApplnInverse.html#unAppInv(term:provingground.HoTT.Term,context:Vector[provingground.HoTT.Term]):Set[(provingground.HoTT.ExstFunc,provingground.HoTT.Term)]", "kind" : "abstract def"}, {"label" : "applInv", "tail" : "(term: Term, context: Vector[Term]): Set[(ExstFunc, Term)]", "member" : "provingground.learning.ApplnInverse.applInv", "link" : "provingground\/learning\/ApplnInverse.html#applInv(term:provingground.HoTT.Term,context:Vector[provingground.HoTT.Term]):Set[(provingground.HoTT.ExstFunc,provingground.HoTT.Term)]", "kind" : "abstract def"}], "shortDescription" : "inverses under application with an without unification", "object" : "provingground\/learning\/ApplnInverse$.html", "members_object" : [{"label" : "Enumerate", "tail" : "", "member" : "provingground.learning.ApplnInverse.Enumerate", "link" : "provingground\/learning\/ApplnInverse$.html#EnumerateextendsApplnInversewithProductwithSerializable", "kind" : "case class"}, {"label" : "OuterFromSupport", "tail" : "", "member" : "provingground.learning.ApplnInverse.OuterFromSupport", "link" : "provingground\/learning\/ApplnInverse$.html#OuterFromSupportextendsProductwithSerializable", "kind" : "case class"}, {"label" : "Formal", "tail" : "", "member" : "provingground.learning.ApplnInverse.Formal", "link" : "provingground\/learning\/ApplnInverse$.html#Formal", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/ApplnInverse$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/ApplnInverse$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/ApplnInverse$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/ApplnInverse$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/ApplnInverse$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/ApplnInverse$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/ApplnInverse$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/ApplnInverse$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/ApplnInverse$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/ApplnInverse$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/ApplnInverse$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/ApplnInverse$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/ApplnInverse$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/ApplnInverse$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/ApplnInverse$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/ApplnInverse$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/ApplnInverse$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/ApplnInverse$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/ApplnInverse$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/learning\/ApplnInverse.html", "kind" : "trait"}, {"name" : "provingground.learning.BaseGeneratorNode", "members_trait" : [{"label" : "|", "tail" : "(condition: Sort[S, T], output: RandomVar[T]): BaseGeneratorNode[I, T]", "member" : "provingground.learning.BaseGeneratorNode.|", "link" : "provingground\/learning\/BaseGeneratorNode.html#|[S>:O,T](condition:provingground.learning.Sort[S,T],output:provingground.learning.RandomVar[T]):provingground.learning.BaseGeneratorNode[I,T]", "kind" : "def"}, {"label" : "outputFamily", "tail" : ": RandomVar[O]", "member" : "provingground.learning.GeneratorNode.outputFamily", "link" : "provingground\/learning\/BaseGeneratorNode.html#outputFamily:provingground.learning.RandomVar[O]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/BaseGeneratorNode.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/BaseGeneratorNode.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/BaseGeneratorNode.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/BaseGeneratorNode.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/BaseGeneratorNode.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/BaseGeneratorNode.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/BaseGeneratorNode.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/BaseGeneratorNode.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/BaseGeneratorNode.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/BaseGeneratorNode.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/BaseGeneratorNode.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/BaseGeneratorNode.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/BaseGeneratorNode.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/BaseGeneratorNode.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/BaseGeneratorNode.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/BaseGeneratorNode.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/BaseGeneratorNode.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/BaseGeneratorNode.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/BaseGeneratorNode.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "inputList", "tail" : ": RandomVarList[I]", "member" : "provingground.learning.BaseGeneratorNode.inputList", "link" : "provingground\/learning\/BaseGeneratorNode.html#inputList:provingground.learning.RandomVarList[I]", "kind" : "abstract val"}, {"label" : "output", "tail" : ": RandomVar[O]", "member" : "provingground.learning.GeneratorNode.output", "link" : "provingground\/learning\/BaseGeneratorNode.html#output:provingground.learning.RandomVar[O]", "kind" : "abstract val"}], "shortDescription" : "", "trait" : "provingground\/learning\/BaseGeneratorNode.html", "kind" : "trait"}, {"name" : "provingground.learning.BaseGeneratorNodeFamily", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/BaseGeneratorNodeFamily.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/BaseGeneratorNodeFamily.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/BaseGeneratorNodeFamily.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/BaseGeneratorNodeFamily.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/BaseGeneratorNodeFamily.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/BaseGeneratorNodeFamily.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/BaseGeneratorNodeFamily.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/BaseGeneratorNodeFamily.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/BaseGeneratorNodeFamily.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/BaseGeneratorNodeFamily.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/BaseGeneratorNodeFamily.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/BaseGeneratorNodeFamily.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/BaseGeneratorNodeFamily.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/BaseGeneratorNodeFamily.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/BaseGeneratorNodeFamily.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/BaseGeneratorNodeFamily.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/BaseGeneratorNodeFamily.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/BaseGeneratorNodeFamily.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/BaseGeneratorNodeFamily.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "outputFamily", "tail" : ": RandomVarFamily[Dom, O]", "member" : "provingground.learning.GeneratorNodeFamily.outputFamily", "link" : "provingground\/learning\/BaseGeneratorNodeFamily.html#outputFamily:provingground.learning.RandomVarFamily[Dom,O]", "kind" : "abstract val"}], "shortDescription" : "", "trait" : "provingground\/learning\/BaseGeneratorNodeFamily.html", "kind" : "trait"}, {"name" : "provingground.learning.BasicDeducer", "shortDescription" : "", "members_case class" : [{"label" : "hDerFunc", "tail" : "(sc: Double)(base: FiniteDistribution[Term])(pd: ProbabilityDistribution[Term]): ProbabilityDistribution[Term]", "member" : "provingground.learning.BasicDeducer.hDerFunc", "link" : "provingground\/learning\/BasicDeducer.html#hDerFunc(sc:Double)(base:provingground.FiniteDistribution[provingground.HoTT.Term])(pd:provingground.ProbabilityDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "derFunc", "tail" : "(base: FiniteDistribution[Term])(pd: ProbabilityDistribution[Term]): ProbabilityDistribution[Term]", "member" : "provingground.learning.BasicDeducer.derFunc", "link" : "provingground\/learning\/BasicDeducer.html#derFunc(base:provingground.FiniteDistribution[provingground.HoTT.Term])(pd:provingground.ProbabilityDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "derPiVar", "tail" : "(varweight: Double)(rec: ⇒ (FiniteDistribution[Term]) ⇒ (ProbabilityDistribution[Term]) ⇒ ProbabilityDistribution[Term])(p: ProbabilityDistribution[Term]): (FiniteDistribution[Term]) ⇒ ProbabilityDistribution[Option[Term]]", "member" : "provingground.learning.BasicDeducer.derPiVar", "link" : "provingground\/learning\/BasicDeducer.html#derPiVar(varweight:Double)(rec:=>provingground.FiniteDistribution[provingground.HoTT.Term]=>(provingground.ProbabilityDistribution[provingground.HoTT.Term]=>provingground.ProbabilityDistribution[provingground.HoTT.Term]))(p:provingground.ProbabilityDistribution[provingground.HoTT.Term]):provingground.FiniteDistribution[provingground.HoTT.Term]=>provingground.ProbabilityDistribution[Option[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "derLambdaVar", "tail" : "(varweight: Double)(rec: ⇒ (FiniteDistribution[Term]) ⇒ (ProbabilityDistribution[Term]) ⇒ ProbabilityDistribution[Term])(p: ProbabilityDistribution[Term]): (FiniteDistribution[Term]) ⇒ ProbabilityDistribution[Option[Term]]", "member" : "provingground.learning.BasicDeducer.derLambdaVar", "link" : "provingground\/learning\/BasicDeducer.html#derLambdaVar(varweight:Double)(rec:=>provingground.FiniteDistribution[provingground.HoTT.Term]=>(provingground.ProbabilityDistribution[provingground.HoTT.Term]=>provingground.ProbabilityDistribution[provingground.HoTT.Term]))(p:provingground.ProbabilityDistribution[provingground.HoTT.Term]):provingground.FiniteDistribution[provingground.HoTT.Term]=>provingground.ProbabilityDistribution[Option[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "piDistOpt", "tail" : "(base: FiniteDistribution[Term])(x: Term): Option[FiniteDistribution[Term]]", "member" : "provingground.learning.BasicDeducer.piDistOpt", "link" : "provingground\/learning\/BasicDeducer.html#piDistOpt(base:provingground.FiniteDistribution[provingground.HoTT.Term])(x:provingground.HoTT.Term):Option[provingground.FiniteDistribution[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "lambdaDistOpt", "tail" : "(base: FiniteDistribution[Term])(x: Term): Option[FiniteDistribution[Term with Subs[Term]]]", "member" : "provingground.learning.BasicDeducer.lambdaDistOpt", "link" : "provingground\/learning\/BasicDeducer.html#lambdaDistOpt(base:provingground.FiniteDistribution[provingground.HoTT.Term])(x:provingground.HoTT.Term):Option[provingground.FiniteDistribution[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]]", "kind" : "def"}, {"label" : "derPiVal", "tail" : "(varweight: Double)(rec: ⇒ (FiniteDistribution[Term]) ⇒ (ProbabilityDistribution[Term]) ⇒ ProbabilityDistribution[Term])(p: ProbabilityDistribution[Term]): (FiniteDistribution[Term]) ⇒ ProbabilityDistribution[Option[Term]]", "member" : "provingground.learning.BasicDeducer.derPiVal", "link" : "provingground\/learning\/BasicDeducer.html#derPiVal(varweight:Double)(rec:=>provingground.FiniteDistribution[provingground.HoTT.Term]=>(provingground.ProbabilityDistribution[provingground.HoTT.Term]=>provingground.ProbabilityDistribution[provingground.HoTT.Term]))(p:provingground.ProbabilityDistribution[provingground.HoTT.Term]):provingground.FiniteDistribution[provingground.HoTT.Term]=>provingground.ProbabilityDistribution[Option[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "derLambdaVal", "tail" : "(varweight: Double)(rec: ⇒ (FiniteDistribution[Term]) ⇒ (ProbabilityDistribution[Term]) ⇒ ProbabilityDistribution[Term])(p: ProbabilityDistribution[Term]): (FiniteDistribution[Term]) ⇒ ProbabilityDistribution[Option[Term]]", "member" : "provingground.learning.BasicDeducer.derLambdaVal", "link" : "provingground\/learning\/BasicDeducer.html#derLambdaVal(varweight:Double)(rec:=>provingground.FiniteDistribution[provingground.HoTT.Term]=>(provingground.ProbabilityDistribution[provingground.HoTT.Term]=>provingground.ProbabilityDistribution[provingground.HoTT.Term]))(p:provingground.ProbabilityDistribution[provingground.HoTT.Term]):provingground.FiniteDistribution[provingground.HoTT.Term]=>provingground.ProbabilityDistribution[Option[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "derApplnFunc", "tail" : "(rec: ⇒ (FiniteDistribution[Term]) ⇒ (ProbabilityDistribution[Term]) ⇒ ProbabilityDistribution[Term])(p: ProbabilityDistribution[Term]): (FiniteDistribution[Term]) ⇒ ProbabilityDistribution[Option[Term]]", "member" : "provingground.learning.BasicDeducer.derApplnFunc", "link" : "provingground\/learning\/BasicDeducer.html#derApplnFunc(rec:=>provingground.FiniteDistribution[provingground.HoTT.Term]=>(provingground.ProbabilityDistribution[provingground.HoTT.Term]=>provingground.ProbabilityDistribution[provingground.HoTT.Term]))(p:provingground.ProbabilityDistribution[provingground.HoTT.Term]):provingground.FiniteDistribution[provingground.HoTT.Term]=>provingground.ProbabilityDistribution[Option[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "derApplnArg", "tail" : "(rec: ⇒ (FiniteDistribution[Term]) ⇒ (ProbabilityDistribution[Term]) ⇒ ProbabilityDistribution[Term])(p: ProbabilityDistribution[Term]): (FiniteDistribution[Term]) ⇒ ProbabilityDistribution[Option[Term]]", "member" : "provingground.learning.BasicDeducer.derApplnArg", "link" : "provingground\/learning\/BasicDeducer.html#derApplnArg(rec:=>provingground.FiniteDistribution[provingground.HoTT.Term]=>(provingground.ProbabilityDistribution[provingground.HoTT.Term]=>provingground.ProbabilityDistribution[provingground.HoTT.Term]))(p:provingground.ProbabilityDistribution[provingground.HoTT.Term]):provingground.FiniteDistribution[provingground.HoTT.Term]=>provingground.ProbabilityDistribution[Option[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "hFunc", "tail" : "(sc: Double)(pd: ProbabilityDistribution[Term]): ProbabilityDistribution[Term]", "member" : "provingground.learning.BasicDeducer.hFunc", "link" : "provingground\/learning\/BasicDeducer.html#hFunc(sc:Double)(pd:provingground.ProbabilityDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "hSc", "tail" : "(sc: Double): BasicDeducer", "member" : "provingground.learning.BasicDeducer.hSc", "link" : "provingground\/learning\/BasicDeducer.html#hSc(sc:Double):provingground.learning.BasicDeducer", "kind" : "def"}, {"label" : "func", "tail" : "(pd: ProbabilityDistribution[Term]): ProbabilityDistribution[Term]", "member" : "provingground.learning.BasicDeducer.func", "link" : "provingground\/learning\/BasicDeducer.html#func(pd:provingground.ProbabilityDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"member" : "provingground.learning.BasicDeducer#<init>", "error" : "unsupported entity"}, {"label" : "vars", "tail" : ": Vector[Term]", "member" : "provingground.learning.BasicDeducer.vars", "link" : "provingground\/learning\/BasicDeducer.html#vars:Vector[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "varWeight", "tail" : ": Double", "member" : "provingground.learning.BasicDeducer.varWeight", "link" : "provingground\/learning\/BasicDeducer.html#varWeight:Double", "kind" : "val"}, {"label" : "piWeight", "tail" : ": Double", "member" : "provingground.learning.BasicDeducer.piWeight", "link" : "provingground\/learning\/BasicDeducer.html#piWeight:Double", "kind" : "val"}, {"label" : "lambdaWeight", "tail" : ": Double", "member" : "provingground.learning.BasicDeducer.lambdaWeight", "link" : "provingground\/learning\/BasicDeducer.html#lambdaWeight:Double", "kind" : "val"}, {"label" : "applnWeight", "tail" : ": Double", "member" : "provingground.learning.BasicDeducer.applnWeight", "link" : "provingground\/learning\/BasicDeducer.html#applnWeight:Double", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/BasicDeducer.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/BasicDeducer.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/BasicDeducer.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/BasicDeducer.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/BasicDeducer.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/BasicDeducer.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/BasicDeducer.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/BasicDeducer.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/BasicDeducer.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/BasicDeducer.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/BasicDeducer.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/BasicDeducer.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/BasicDeducer.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/BasicDeducer.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/BasicDeducer.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/BasicDeducer.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/learning\/BasicDeducer.html", "kind" : "case class"}, {"name" : "provingground.learning.BufferedRun", "shortDescription" : "", "members_case class" : [{"label" : "timeseries", "tail" : ": ArrayBuffer[A]", "member" : "provingground.learning.BufferedRun.timeseries", "link" : "provingground\/learning\/BufferedRun.html#timeseries:scala.collection.mutable.ArrayBuffer[A]", "kind" : "val"}, {"label" : "it", "tail" : ": Iterator[A]", "member" : "provingground.learning.BufferedRun.it", "link" : "provingground\/learning\/BufferedRun.html#it:Iterator[A]", "kind" : "val"}, {"label" : "stop", "tail" : "(): Unit", "member" : "provingground.learning.BufferedRun.stop", "link" : "provingground\/learning\/BufferedRun.html#stop():Unit", "kind" : "def"}, {"label" : "live", "tail" : ": Boolean", "member" : "provingground.learning.BufferedRun.live", "link" : "provingground\/learning\/BufferedRun.html#live:Boolean", "kind" : "var"}, {"member" : "provingground.learning.BufferedRun#<init>", "error" : "unsupported entity"}, {"label" : "iter", "tail" : ": Iterator[A]", "member" : "provingground.learning.BufferedRun.iter", "link" : "provingground\/learning\/BufferedRun.html#iter:Iterator[A]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/BufferedRun.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/BufferedRun.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/BufferedRun.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/BufferedRun.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/BufferedRun.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/BufferedRun.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/BufferedRun.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/BufferedRun.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/BufferedRun.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/BufferedRun.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/BufferedRun.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/BufferedRun.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/BufferedRun.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/BufferedRun.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/BufferedRun.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/BufferedRun.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/learning\/BufferedRun.html", "kind" : "case class"}, {"name" : "provingground.learning.Collections", "shortDescription" : "", "object" : "provingground\/learning\/Collections$.html", "members_object" : [{"label" : "transversal", "tail" : "(arg: List[A], equiv: (A, A) ⇒ Boolean, accum: List[A]): List[A]", "member" : "provingground.learning.Collections.transversal", "link" : "provingground\/learning\/Collections$.html#transversal[A](arg:List[A],equiv:(A,A)=>Boolean,accum:List[A]):List[A]", "kind" : "def"}, {"label" : "MultiSet", "tail" : "", "member" : "provingground.learning.Collections.MultiSet", "link" : "provingground\/learning\/Collections$.html#MultiSet", "kind" : "object"}, {"label" : "MultiSet", "tail" : "", "member" : "provingground.learning.Collections.MultiSet", "link" : "provingground\/learning\/Collections$.html#MultiSet[A]extendsSet[A]withProductwithSerializable", "kind" : "case class"}, {"label" : "update", "tail" : "(init: B, tangent: B, epsilon: Double)(s: Shift[B]): B", "member" : "provingground.learning.Collections.update", "link" : "provingground\/learning\/Collections$.html#update[B](init:B,tangent:B,epsilon:Double)(implicits:provingground.learning.Collections.Shift[B]):B", "kind" : "def"}, {"label" : "shiftFromVS", "tail" : "(ls: LinearStructure[V]): Shift[V]", "member" : "provingground.learning.Collections.shiftFromVS", "link" : "provingground\/learning\/Collections$.html#shiftFromVS[V](implicitls:provingground.LinearStructure[V]):provingground.learning.Collections.Shift[V]", "kind" : "implicit def"}, {"label" : "Shift", "tail" : "", "member" : "provingground.learning.Collections.Shift", "link" : "provingground\/learning\/Collections$.html#Shift[B]extendsAnyRef", "kind" : "implicit class"}, {"label" : "VectorArray", "tail" : "(zero: T, ls: LinearStructure[T]): LinearStructure[ArrayMap[L, T]]", "member" : "provingground.learning.Collections.VectorArray", "link" : "provingground\/learning\/Collections$.html#VectorArray[L,T](implicitzero:T,implicitls:provingground.LinearStructure[T]):provingground.LinearStructure[provingground.learning.Collections.ArrayMap[L,T]]", "kind" : "implicit def"}, {"label" : "ZeroMap", "tail" : "(): ArrayMap[L, T]", "member" : "provingground.learning.Collections.ZeroMap", "link" : "provingground\/learning\/Collections$.html#ZeroMap[L,T]:provingground.learning.Collections.ArrayMap[L,T]", "kind" : "implicit def"}, {"label" : "ArrayMap", "tail" : "", "member" : "provingground.learning.Collections.ArrayMap", "link" : "provingground\/learning\/Collections$.html#ArrayMap[L,T]extendsCollections.LabelledArray[L,T]withProductwithSerializable", "kind" : "case class"}, {"label" : "LabelledVector", "tail" : "", "member" : "provingground.learning.Collections.LabelledVector", "link" : "provingground\/learning\/Collections$.html#LabelledVector[L]extendsAnywithCollections.LabelledArray[L,Double]", "kind" : "trait"}, {"label" : "LabelledArray", "tail" : "", "member" : "provingground.learning.Collections.LabelledArray", "link" : "provingground\/learning\/Collections$.html#LabelledArray[L,T]extendsAny", "kind" : "trait"}, {"label" : "InnerProduct", "tail" : "", "member" : "provingground.learning.Collections.InnerProduct", "link" : "provingground\/learning\/Collections$.html#InnerProduct", "kind" : "object"}, {"label" : "InnerProduct", "tail" : "", "member" : "provingground.learning.Collections.InnerProduct", "link" : "provingground\/learning\/Collections$.html#InnerProduct[V]extendsProductwithSerializable", "kind" : "case class"}, {"label" : "ApproxSeq", "tail" : "", "member" : "provingground.learning.Collections.ApproxSeq", "link" : "provingground\/learning\/Collections$.html#ApproxSeq", "kind" : "object"}, {"label" : "ApproxSeq", "tail" : "", "member" : "provingground.learning.Collections.ApproxSeq", "link" : "provingground\/learning\/Collections$.html#ApproxSeq[T]extendsCollections.InfSeq[T]", "kind" : "trait"}, {"label" : "InfSeq", "tail" : "", "member" : "provingground.learning.Collections.InfSeq", "link" : "provingground\/learning\/Collections$.html#InfSeq", "kind" : "object"}, {"label" : "InfSeq", "tail" : "", "member" : "provingground.learning.Collections.InfSeq", "link" : "provingground\/learning\/Collections$.html#InfSeq[T]extendsAnyRef", "kind" : "trait"}, {"label" : "ZeroPair", "tail" : "(za: A, zb: B): (A, B)", "member" : "provingground.learning.Collections.ZeroPair", "link" : "provingground\/learning\/Collections$.html#ZeroPair[A,B](za:A,zb:B):(A,B)", "kind" : "implicit def"}, {"label" : "ZeroReal", "tail" : ": Double", "member" : "provingground.learning.Collections.ZeroReal", "link" : "provingground\/learning\/Collections$.html#ZeroReal:Double", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/Collections$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/Collections$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/Collections$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/Collections$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/Collections$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/Collections$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/Collections$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/Collections$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/Collections$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/Collections$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/Collections$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/Collections$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/Collections$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/Collections$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/Collections$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/Collections$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/Collections$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/Collections$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/Collections$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.learning.Conditioning", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/Conditioning.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/Conditioning.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/Conditioning.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/Conditioning.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/Conditioning.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/Conditioning.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/Conditioning.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/Conditioning.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/Conditioning.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/Conditioning.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/Conditioning.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/Conditioning.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/Conditioning.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/Conditioning.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/Conditioning.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/Conditioning.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/Conditioning.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/Conditioning.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/Conditioning.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "condition", "tail" : "(sort: Sort[S, T]): (D[S]) ⇒ D[T]", "member" : "provingground.learning.Conditioning.condition", "link" : "provingground\/learning\/Conditioning.html#condition[S,T](sort:provingground.learning.Sort[S,T]):D[S]=>D[T]", "kind" : "abstract def"}], "shortDescription" : "typeclass for being able to condition", "object" : "provingground\/learning\/Conditioning$.html", "members_object" : [{"label" : "flatten", "tail" : "(cd: Conditioning[D]): (D[Option[S]]) ⇒ D[S]", "member" : "provingground.learning.Conditioning.flatten", "link" : "provingground\/learning\/Conditioning$.html#flatten[S,D[_]](implicitcd:provingground.learning.Conditioning[D]):D[Option[S]]=>D[S]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/Conditioning$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/Conditioning$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/Conditioning$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/Conditioning$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/Conditioning$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/Conditioning$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/Conditioning$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/Conditioning$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/Conditioning$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/Conditioning$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/Conditioning$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/Conditioning$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/Conditioning$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/Conditioning$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/Conditioning$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/Conditioning$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/Conditioning$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/learning\/Conditioning.html", "kind" : "trait"}, {"name" : "provingground.learning.ContextExport", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/ContextExport.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/ContextExport.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/ContextExport.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/ContextExport.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/ContextExport.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/ContextExport.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/ContextExport.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/ContextExport.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/ContextExport.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/ContextExport.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/ContextExport.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/ContextExport.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/ContextExport.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/ContextExport.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/ContextExport.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/ContextExport.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/ContextExport.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/ContextExport.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/ContextExport.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "export", "tail" : "(): (Boat, D[A]) ⇒ D[A]", "member" : "provingground.learning.ContextExport.export", "link" : "provingground\/learning\/ContextExport.html#export[A]:(Boat,D[A])=>D[A]", "kind" : "abstract def"}], "shortDescription" : "changes in the distribution-like object other than those induced by object level map while exporting from an islandtypically a change in context for variables representing terms in a context", "object" : "provingground\/learning\/ContextExport$.html", "members_object" : [{"label" : "dblCtxShift", "tail" : ": ContextExport[Term, CtxDbl]", "member" : "provingground.learning.ContextExport.dblCtxShift", "link" : "provingground\/learning\/ContextExport$.html#dblCtxShift:provingground.learning.ContextExport[provingground.HoTT.Term,provingground.learning.ContextExport.CtxDbl]", "kind" : "val"}, {"label" : "CtxDbl", "tail" : "", "member" : "provingground.learning.ContextExport.CtxDbl", "link" : "provingground\/learning\/ContextExport$.html#CtxDbl[A]=Map[(A,Vector[provingground.HoTT.Term]),Double]", "kind" : "type"}, {"label" : "ctxMapExport", "tail" : "(): ContextExport[Term, [A]Map[(A, Vector[Term]), F]]", "member" : "provingground.learning.ContextExport.ctxMapExport", "link" : "provingground\/learning\/ContextExport$.html#ctxMapExport[F]:provingground.learning.ContextExport[provingground.HoTT.Term,[A]scala.collection.immutable.Map[(A,scala.collection.immutable.Vector[provingground.HoTT.Term]),F]]", "kind" : "implicit def"}, {"label" : "pdTerm", "tail" : ": ContextExport[Term, ProbabilityDistribution]", "member" : "provingground.learning.ContextExport.pdTerm", "link" : "provingground\/learning\/ContextExport$.html#pdTerm:provingground.learning.ContextExport[provingground.HoTT.Term,provingground.ProbabilityDistribution]", "kind" : "implicit val"}, {"label" : "fdTerm", "tail" : ": ContextExport[Term, FiniteDistribution]", "member" : "provingground.learning.ContextExport.fdTerm", "link" : "provingground\/learning\/ContextExport$.html#fdTerm:provingground.learning.ContextExport[provingground.HoTT.Term,provingground.FiniteDistribution]", "kind" : "implicit val"}, {"label" : "id", "tail" : "(): ContextExport[Boat, D] { def export[A]: (Boat, D[A]) => D[A] }", "member" : "provingground.learning.ContextExport.id", "link" : "provingground\/learning\/ContextExport$.html#id[Boat,D[_]]:provingground.learning.ContextExport[Boat,D]{defexport[A]:(Boat,D[A])=>D[A]}", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/ContextExport$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/ContextExport$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/ContextExport$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/ContextExport$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/ContextExport$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/ContextExport$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/ContextExport$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/ContextExport$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/ContextExport$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/ContextExport$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/ContextExport$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/ContextExport$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/ContextExport$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/ContextExport$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/ContextExport$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/ContextExport$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/ContextExport$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/ContextExport$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/ContextExport$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/learning\/ContextExport.html", "kind" : "trait"}, {"name" : "provingground.learning.Deducer", "shortDescription" : "Generating terms from given ones using the main HoTT operations, and the adjoint of this generation.", "object" : "provingground\/learning\/Deducer$.html", "members_object" : [{"label" : "flow", "tail" : "(fd: FiniteDistribution[Term], shifts: FiniteDistribution[Term]): FiniteDistribution[Term]", "member" : "provingground.learning.Deducer.flow", "link" : "provingground\/learning\/Deducer$.html#flow(fd:provingground.FiniteDistribution[provingground.HoTT.Term],shifts:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.FiniteDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "HashedUnifInv", "tail" : "", "member" : "provingground.learning.Deducer.HashedUnifInv", "link" : "provingground\/learning\/Deducer$.html#HashedUnifInv[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsprovingground.HoTT.Term=>Set[(U,provingground.HoTT.Term)]", "kind" : "class"}, {"label" : "hashedUnifInv", "tail" : "(term: Term, hashedInvMap: Map[ShapeTree, Vector[(Term, Set[(U, Term)])]]): Set[(U, Term)]", "member" : "provingground.learning.Deducer.hashedUnifInv", "link" : "provingground\/learning\/Deducer$.html#hashedUnifInv[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](term:provingground.HoTT.Term,hashedInvMap:Map[provingground.translation.ShapeTree,Vector[(provingground.HoTT.Term,Set[(U,provingground.HoTT.Term)])]]):scala.collection.immutable.Set[(U,provingground.HoTT.Term)]", "kind" : "def"}, {"label" : "unifInv", "tail" : "(term: Term, invMap: Vector[(Term, Set[(U, Term)])]): Set[(U, Term)]", "member" : "provingground.learning.Deducer.unifInv", "link" : "provingground\/learning\/Deducer$.html#unifInv[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](term:provingground.HoTT.Term,invMap:Vector[(provingground.HoTT.Term,Set[(U,provingground.HoTT.Term)])]):scala.collection.immutable.Set[(U,provingground.HoTT.Term)]", "kind" : "def"}, {"label" : "unpickle", "tail" : "(str: String): TermPopulation", "member" : "provingground.learning.Deducer.unpickle", "link" : "provingground\/learning\/Deducer$.html#unpickle(str:String):provingground.learning.TermPopulation", "kind" : "def"}, {"label" : "feedback", "tail" : "(absTheorems: FiniteDistribution[Typ[Term]], absThmsByProofs: FiniteDistribution[Typ[Term]], proofs: Map[Typ[Term], FiniteDistribution[Term]], vars: Vector[Weighted[Term]], lambdaWeight: Double, piWeight: Double): FiniteDistribution[Term]", "member" : "provingground.learning.Deducer.feedback", "link" : "provingground\/learning\/Deducer$.html#feedback(absTheorems:provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]],absThmsByProofs:provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]],proofs:Map[provingground.HoTT.Typ[provingground.HoTT.Term],provingground.FiniteDistribution[provingground.HoTT.Term]],vars:Vector[provingground.Weighted[provingground.HoTT.Term]],lambdaWeight:Double,piWeight:Double):provingground.FiniteDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "proofEntropies", "tail" : "(fd: FiniteDistribution[Term]): Vector[Weighted[Typ[U] forSome {type U >: x$2.type <: Term with Subs[U], val x$2: Term}]]", "member" : "provingground.learning.Deducer.proofEntropies", "link" : "provingground\/learning\/Deducer$.html#proofEntropies(fd:provingground.FiniteDistribution[provingground.HoTT.Term]):scala.collection.immutable.Vector[provingground.Weighted[provingground.HoTT.Typ[U]forSome{typeU>:x$2.type<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U];valx$2:provingground.HoTT.Term}]]", "kind" : "def"}, {"label" : "piValue", "tail" : "(variable: U): (Term) ⇒ Option[Term]", "member" : "provingground.learning.Deducer.piValue", "link" : "provingground\/learning\/Deducer$.html#piValue[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](variable:U):provingground.HoTT.Term=>Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "lambdaValue", "tail" : "(variable: U): (Term) ⇒ Option[Term]", "member" : "provingground.learning.Deducer.lambdaValue", "link" : "provingground\/learning\/Deducer$.html#lambdaValue[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](variable:U):provingground.HoTT.Term=>Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "pi", "tail" : "(varweight: Double)(rec: ⇒ (ProbabilityDistribution[Term]) ⇒ ProbabilityDistribution[Term])(p: ProbabilityDistribution[Term]): ProbabilityDistribution[Option[Term]]", "member" : "provingground.learning.Deducer.pi", "link" : "provingground\/learning\/Deducer$.html#pi(varweight:Double)(rec:=>provingground.ProbabilityDistribution[provingground.HoTT.Term]=>provingground.ProbabilityDistribution[provingground.HoTT.Term])(p:provingground.ProbabilityDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[Option[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "lambda", "tail" : "(varweight: Double)(rec: ⇒ (ProbabilityDistribution[Term]) ⇒ ProbabilityDistribution[Term])(p: ProbabilityDistribution[Term]): ProbabilityDistribution[Option[Term]]", "member" : "provingground.learning.Deducer.lambda", "link" : "provingground\/learning\/Deducer$.html#lambda(varweight:Double)(rec:=>provingground.ProbabilityDistribution[provingground.HoTT.Term]=>provingground.ProbabilityDistribution[provingground.HoTT.Term])(p:provingground.ProbabilityDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[Option[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "eqSubs", "tail" : "(rec: ⇒ (ProbabilityDistribution[Term]) ⇒ ProbabilityDistribution[Term])(p: ProbabilityDistribution[Term])(save: (Term, IdentityTyp[Term], Term) ⇒ Unit): ProbabilityDistribution[Option[Term with Subs[Term]]]", "member" : "provingground.learning.Deducer.eqSubs", "link" : "provingground\/learning\/Deducer$.html#eqSubs(rec:=>provingground.ProbabilityDistribution[provingground.HoTT.Term]=>provingground.ProbabilityDistribution[provingground.HoTT.Term])(p:provingground.ProbabilityDistribution[provingground.HoTT.Term])(save:(provingground.HoTT.Term,provingground.HoTT.IdentityTyp[provingground.HoTT.Term],provingground.HoTT.Term)=>Unit):provingground.ProbabilityDistribution[Option[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]]", "kind" : "def"}, {"label" : "memAppln", "tail" : "(rec: ⇒ (ProbabilityDistribution[Term]) ⇒ ProbabilityDistribution[Term])(p: ProbabilityDistribution[Term])(save: (Term, Term, Term) ⇒ Unit): ProbabilityDistribution[Option[Term]]", "member" : "provingground.learning.Deducer.memAppln", "link" : "provingground\/learning\/Deducer$.html#memAppln(rec:=>provingground.ProbabilityDistribution[provingground.HoTT.Term]=>provingground.ProbabilityDistribution[provingground.HoTT.Term])(p:provingground.ProbabilityDistribution[provingground.HoTT.Term])(save:(provingground.HoTT.Term,provingground.HoTT.Term,provingground.HoTT.Term)=>Unit):provingground.ProbabilityDistribution[Option[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "appln", "tail" : "(rec: ⇒ (ProbabilityDistribution[Term]) ⇒ ProbabilityDistribution[Term])(p: ProbabilityDistribution[Term]): ProbabilityDistribution[Option[Term]]", "member" : "provingground.learning.Deducer.appln", "link" : "provingground\/learning\/Deducer$.html#appln(rec:=>provingground.ProbabilityDistribution[provingground.HoTT.Term]=>provingground.ProbabilityDistribution[provingground.HoTT.Term])(p:provingground.ProbabilityDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[Option[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "InvMap", "tail" : "", "member" : "provingground.learning.Deducer.InvMap", "link" : "provingground\/learning\/Deducer$.html#InvMap=Vector[(provingground.HoTT.Term,Set[(provingground.HoTT.Term,provingground.HoTT.Term)])]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/Deducer$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/Deducer$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/Deducer$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/Deducer$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/Deducer$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/Deducer$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/Deducer$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/Deducer$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/Deducer$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/Deducer$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/Deducer$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/Deducer$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/Deducer$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/Deducer$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/Deducer$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/Deducer$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/Deducer$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/Deducer$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/Deducer$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "getFeedback", "tail" : "(): FiniteDistribution[Term]", "member" : "provingground.learning.Deducer.getFeedback", "link" : "provingground\/learning\/Deducer.html#getFeedback:provingground.FiniteDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "getProofs", "tail" : "(absTyp: Typ[Term]): FiniteDistribution[Term]", "member" : "provingground.learning.Deducer.getProofs", "link" : "provingground\/learning\/Deducer.html#getProofs(absTyp:provingground.HoTT.Typ[provingground.HoTT.Term]):provingground.FiniteDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "getLoops", "tail" : "(): Int", "member" : "provingground.learning.Deducer.getLoops", "link" : "provingground\/learning\/Deducer.html#getLoops:Int", "kind" : "def"}, {"label" : "getElapsedTime", "tail" : "(): Long", "member" : "provingground.learning.Deducer.getElapsedTime", "link" : "provingground\/learning\/Deducer.html#getElapsedTime:Long", "kind" : "def"}, {"label" : "abstractTyps", "tail" : "(typ: Typ[Term]): Typ[Term]", "member" : "provingground.learning.Deducer.abstractTyps", "link" : "provingground\/learning\/Deducer.html#abstractTyps(typ:provingground.HoTT.Typ[provingground.HoTT.Term]):provingground.HoTT.Typ[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "getAbstractTheoremsByProofs", "tail" : "(): FiniteDistribution[Typ[Term]]", "member" : "provingground.learning.Deducer.getAbstractTheoremsByProofs", "link" : "provingground\/learning\/Deducer.html#getAbstractTheoremsByProofs:provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "getAbstractTheorems", "tail" : "(): FiniteDistribution[Typ[Term]]", "member" : "provingground.learning.Deducer.getAbstractTheorems", "link" : "provingground\/learning\/Deducer.html#getAbstractTheorems:provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "backProp", "tail" : "(epsilon: Double, invImage: (Term) ⇒ Set[(Term, Term)])(fd: Prob): (TruncatedDistribution[Term]) ⇒ TruncatedDistribution[Term]", "member" : "provingground.learning.Deducer.backProp", "link" : "provingground\/learning\/Deducer.html#backProp(epsilon:Double,invImage:provingground.HoTT.Term=>Set[(provingground.HoTT.Term,provingground.HoTT.Term)])(fd:Deducer.this.Prob):provingground.learning.TruncatedDistribution[provingground.HoTT.Term]=>provingground.learning.TruncatedDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "piPropValues", "tail" : "(backProp: ⇒ (Prob) ⇒ (TruncatedDistribution[Term]) ⇒ TruncatedDistribution[Term])(fd: Prob)(td: TruncatedDistribution[Term]): TruncatedDistribution[Term]", "member" : "provingground.learning.Deducer.piPropValues", "link" : "provingground\/learning\/Deducer.html#piPropValues(backProp:=>Deducer.this.Prob=>(provingground.learning.TruncatedDistribution[provingground.HoTT.Term]=>provingground.learning.TruncatedDistribution[provingground.HoTT.Term]))(fd:Deducer.this.Prob)(td:provingground.learning.TruncatedDistribution[provingground.HoTT.Term]):provingground.learning.TruncatedDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "piPropValuesTerm", "tail" : "(backProp: ⇒ (Prob) ⇒ (TruncatedDistribution[Term]) ⇒ TruncatedDistribution[Term])(fd: Prob): (Term) ⇒ TruncatedDistribution[Term]", "member" : "provingground.learning.Deducer.piPropValuesTerm", "link" : "provingground\/learning\/Deducer.html#piPropValuesTerm(backProp:=>Deducer.this.Prob=>(provingground.learning.TruncatedDistribution[provingground.HoTT.Term]=>provingground.learning.TruncatedDistribution[provingground.HoTT.Term]))(fd:Deducer.this.Prob):provingground.HoTT.Term=>provingground.learning.TruncatedDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "piPropVar", "tail" : "(backProp: ⇒ (Prob) ⇒ (TruncatedDistribution[Term]) ⇒ TruncatedDistribution[Term])(fd: Prob)(td: TruncatedDistribution[Term]): TruncatedDistribution[Term]", "member" : "provingground.learning.Deducer.piPropVar", "link" : "provingground\/learning\/Deducer.html#piPropVar(backProp:=>Deducer.this.Prob=>(provingground.learning.TruncatedDistribution[provingground.HoTT.Term]=>provingground.learning.TruncatedDistribution[provingground.HoTT.Term]))(fd:Deducer.this.Prob)(td:provingground.learning.TruncatedDistribution[provingground.HoTT.Term]):provingground.learning.TruncatedDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "piPropVarTerm", "tail" : "(backProp: ⇒ (Prob) ⇒ (TruncatedDistribution[Term]) ⇒ TruncatedDistribution[Term])(fd: Prob): (Term) ⇒ TruncatedDistribution[Term]", "member" : "provingground.learning.Deducer.piPropVarTerm", "link" : "provingground\/learning\/Deducer.html#piPropVarTerm(backProp:=>Deducer.this.Prob=>(provingground.learning.TruncatedDistribution[provingground.HoTT.Term]=>provingground.learning.TruncatedDistribution[provingground.HoTT.Term]))(fd:Deducer.this.Prob):provingground.HoTT.Term=>provingground.learning.TruncatedDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "lambdaPropValues", "tail" : "(backProp: ⇒ (Prob) ⇒ (TruncatedDistribution[Term]) ⇒ TruncatedDistribution[Term])(fd: Prob)(td: TruncatedDistribution[Term]): TruncatedDistribution[Term]", "member" : "provingground.learning.Deducer.lambdaPropValues", "link" : "provingground\/learning\/Deducer.html#lambdaPropValues(backProp:=>Deducer.this.Prob=>(provingground.learning.TruncatedDistribution[provingground.HoTT.Term]=>provingground.learning.TruncatedDistribution[provingground.HoTT.Term]))(fd:Deducer.this.Prob)(td:provingground.learning.TruncatedDistribution[provingground.HoTT.Term]):provingground.learning.TruncatedDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "lambdaPropValuesTerm", "tail" : "(backProp: ⇒ (Prob) ⇒ (TruncatedDistribution[Term]) ⇒ TruncatedDistribution[Term])(fd: Prob): (Term) ⇒ TruncatedDistribution[Term]", "member" : "provingground.learning.Deducer.lambdaPropValuesTerm", "link" : "provingground\/learning\/Deducer.html#lambdaPropValuesTerm(backProp:=>Deducer.this.Prob=>(provingground.learning.TruncatedDistribution[provingground.HoTT.Term]=>provingground.learning.TruncatedDistribution[provingground.HoTT.Term]))(fd:Deducer.this.Prob):provingground.HoTT.Term=>provingground.learning.TruncatedDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "lambdaPropVar", "tail" : "(backProp: ⇒ (Prob) ⇒ (TruncatedDistribution[Term]) ⇒ TruncatedDistribution[Term])(fd: Prob)(td: TruncatedDistribution[Term]): TruncatedDistribution[Term]", "member" : "provingground.learning.Deducer.lambdaPropVar", "link" : "provingground\/learning\/Deducer.html#lambdaPropVar(backProp:=>Deducer.this.Prob=>(provingground.learning.TruncatedDistribution[provingground.HoTT.Term]=>provingground.learning.TruncatedDistribution[provingground.HoTT.Term]))(fd:Deducer.this.Prob)(td:provingground.learning.TruncatedDistribution[provingground.HoTT.Term]):provingground.learning.TruncatedDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "lambdaPropVarTerm", "tail" : "(backProp: ⇒ (Prob) ⇒ (TruncatedDistribution[Term]) ⇒ TruncatedDistribution[Term])(fd: Prob): (Term) ⇒ TruncatedDistribution[Term]", "member" : "provingground.learning.Deducer.lambdaPropVarTerm", "link" : "provingground\/learning\/Deducer.html#lambdaPropVarTerm(backProp:=>Deducer.this.Prob=>(provingground.learning.TruncatedDistribution[provingground.HoTT.Term]=>provingground.learning.TruncatedDistribution[provingground.HoTT.Term]))(fd:Deducer.this.Prob):provingground.HoTT.Term=>provingground.learning.TruncatedDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "funcUniProp", "tail" : "(backProp: ⇒ (Prob) ⇒ (TruncatedDistribution[Term]) ⇒ TruncatedDistribution[Term])(fd: Prob, invImage: (Term) ⇒ Set[(Term, Term)])(td: TruncatedDistribution[Term]): TruncatedDistribution[Term]", "member" : "provingground.learning.Deducer.funcUniProp", "link" : "provingground\/learning\/Deducer.html#funcUniProp(backProp:=>Deducer.this.Prob=>(provingground.learning.TruncatedDistribution[provingground.HoTT.Term]=>provingground.learning.TruncatedDistribution[provingground.HoTT.Term]))(fd:Deducer.this.Prob,invImage:provingground.HoTT.Term=>Set[(provingground.HoTT.Term,provingground.HoTT.Term)])(td:provingground.learning.TruncatedDistribution[provingground.HoTT.Term]):provingground.learning.TruncatedDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "funcUniPropTerm", "tail" : "(backProp: ⇒ (Prob) ⇒ (TruncatedDistribution[Term]) ⇒ TruncatedDistribution[Term])(fd: Prob, invImage: (Term) ⇒ Set[(Term, Term)]): (Term) ⇒ TruncatedDistribution[Term]", "member" : "provingground.learning.Deducer.funcUniPropTerm", "link" : "provingground\/learning\/Deducer.html#funcUniPropTerm(backProp:=>Deducer.this.Prob=>(provingground.learning.TruncatedDistribution[provingground.HoTT.Term]=>provingground.learning.TruncatedDistribution[provingground.HoTT.Term]))(fd:Deducer.this.Prob,invImage:provingground.HoTT.Term=>Set[(provingground.HoTT.Term,provingground.HoTT.Term)]):provingground.HoTT.Term=>provingground.learning.TruncatedDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "BufferedRun", "tail" : "", "member" : "provingground.learning.Deducer.BufferedRun", "link" : "provingground\/learning\/Deducer.html#BufferedRunextendsAnyRef", "kind" : "class"}, {"label" : "learnerNextDistribution", "tail" : "(fd: FiniteDistribution[Term], theorems: FiniteDistribution[Typ[Term]], n: Int, memory: Boolean, accum: InvMap, smooth: (FiniteDistribution[Term]) ⇒ FiniteDistribution[Term]): (FiniteDistribution[Term], InvMap)", "member" : "provingground.learning.Deducer.learnerNextDistribution", "link" : "provingground\/learning\/Deducer.html#learnerNextDistribution(fd:provingground.FiniteDistribution[provingground.HoTT.Term],theorems:provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]],n:Int,memory:Boolean,accum:provingground.learning.Deducer.InvMap,smooth:provingground.FiniteDistribution[provingground.HoTT.Term]=>provingground.FiniteDistribution[provingground.HoTT.Term]):(provingground.FiniteDistribution[provingground.HoTT.Term],provingground.learning.Deducer.InvMap)", "kind" : "def"}, {"label" : "nextDistribution", "tail" : "(fd: FiniteDistribution[Term], n: Int, memory: Boolean, accum: InvMap, smooth: (FiniteDistribution[Term]) ⇒ FiniteDistribution[Term]): (FiniteDistribution[Term], InvMap)", "member" : "provingground.learning.Deducer.nextDistribution", "link" : "provingground\/learning\/Deducer.html#nextDistribution(fd:provingground.FiniteDistribution[provingground.HoTT.Term],n:Int,memory:Boolean,accum:provingground.learning.Deducer.InvMap,smooth:provingground.FiniteDistribution[provingground.HoTT.Term]=>provingground.FiniteDistribution[provingground.HoTT.Term]):(provingground.FiniteDistribution[provingground.HoTT.Term],provingground.learning.Deducer.InvMap)", "kind" : "def"}, {"label" : "shiftFD", "tail" : "(popln: TermPopulation, cumApplnInv: InvMap): FiniteDistribution[Term]", "member" : "provingground.learning.Deducer.shiftFD", "link" : "provingground\/learning\/Deducer.html#shiftFD(popln:provingground.learning.TermPopulation,cumApplnInv:provingground.learning.Deducer.InvMap):provingground.FiniteDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "absFD", "tail" : "(fd: FiniteDistribution[Term]): FiniteDistribution[Term]", "member" : "provingground.learning.Deducer.absFD", "link" : "provingground\/learning\/Deducer.html#absFD(fd:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.FiniteDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "getSample", "tail" : "(pd: ProbabilityDistribution[Term], n: Int, accum: InvMap): TermPopulation", "member" : "provingground.learning.Deducer.getSample", "link" : "provingground\/learning\/Deducer.html#getSample(pd:provingground.ProbabilityDistribution[provingground.HoTT.Term],n:Int,accum:provingground.learning.Deducer.InvMap):provingground.learning.TermPopulation", "kind" : "def"}, {"label" : "Sampler", "tail" : "", "member" : "provingground.learning.Deducer.Sampler", "link" : "provingground\/learning\/Deducer.html#SamplerextendsAnyRef", "kind" : "class"}, {"label" : "piFD", "tail" : "(fd: Prob)(variable: Term): Prob", "member" : "provingground.learning.Deducer.piFD", "link" : "provingground\/learning\/Deducer.html#piFD(fd:Deducer.this.Prob)(variable:provingground.HoTT.Term):Deducer.this.Prob", "kind" : "def"}, {"label" : "lambdaProb", "tail" : "(prob: Prob)(variable: Term): Prob", "member" : "provingground.learning.Deducer.lambdaProb", "link" : "provingground\/learning\/Deducer.html#lambdaProb(prob:Deducer.this.Prob)(variable:provingground.HoTT.Term):Deducer.this.Prob", "kind" : "def"}, {"label" : "lambdaFD", "tail" : "(fd: Prob)(variable: Term): (Term) ⇒ Double", "member" : "provingground.learning.Deducer.lambdaFD", "link" : "provingground\/learning\/Deducer.html#lambdaFD(fd:Deducer.this.Prob)(variable:provingground.HoTT.Term):provingground.HoTT.Term=>Double", "kind" : "def"}, {"label" : "shifted", "tail" : "(fd: FiniteDistribution[Term], td: TruncatedDistribution[Term]): FiniteDistribution[Term]", "member" : "provingground.learning.Deducer.shifted", "link" : "provingground\/learning\/Deducer.html#shifted(fd:provingground.FiniteDistribution[provingground.HoTT.Term],td:provingground.learning.TruncatedDistribution[provingground.HoTT.Term]):provingground.FiniteDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "Prob", "tail" : "", "member" : "provingground.learning.Deducer.Prob", "link" : "provingground\/learning\/Deducer.html#Prob=provingground.HoTT.Term=>Double", "kind" : "type"}, {"label" : "absBucket", "tail" : "", "member" : "provingground.learning.Deducer.absBucket", "link" : "provingground\/learning\/Deducer.html#absBucket", "kind" : "object"}, {"label" : "bucket", "tail" : "", "member" : "provingground.learning.Deducer.bucket", "link" : "provingground\/learning\/Deducer.html#bucket", "kind" : "object"}, {"member" : "provingground.learning.Deducer#<init>", "error" : "unsupported entity"}, {"label" : "genMemory", "tail" : ": Double", "member" : "provingground.learning.Deducer.genMemory", "link" : "provingground\/learning\/Deducer.html#genMemory:Double", "kind" : "val"}, {"label" : "abstractionWeight", "tail" : ": Double", "member" : "provingground.learning.Deducer.abstractionWeight", "link" : "provingground\/learning\/Deducer.html#abstractionWeight:Double", "kind" : "val"}, {"label" : "feedbackScale", "tail" : ": Double", "member" : "provingground.learning.Deducer.feedbackScale", "link" : "provingground\/learning\/Deducer.html#feedbackScale:Double", "kind" : "val"}, {"label" : "cutoff", "tail" : ": Double", "member" : "provingground.learning.Deducer.cutoff", "link" : "provingground\/learning\/Deducer.html#cutoff:Double", "kind" : "val"}, {"label" : "propDecay", "tail" : ": Double", "member" : "provingground.learning.Deducer.propDecay", "link" : "provingground\/learning\/Deducer.html#propDecay:Double", "kind" : "val"}, {"label" : "vars", "tail" : ": Vector[Weighted[Term]]", "member" : "provingground.learning.Deducer.vars", "link" : "provingground\/learning\/Deducer.html#vars:Vector[provingground.Weighted[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "varWeight", "tail" : ": Double", "member" : "provingground.learning.Deducer.varWeight", "link" : "provingground\/learning\/Deducer.html#varWeight:Double", "kind" : "val"}, {"label" : "piWeight", "tail" : ": Double", "member" : "provingground.learning.Deducer.piWeight", "link" : "provingground\/learning\/Deducer.html#piWeight:Double", "kind" : "val"}, {"label" : "lambdaWeight", "tail" : ": Double", "member" : "provingground.learning.Deducer.lambdaWeight", "link" : "provingground\/learning\/Deducer.html#lambdaWeight:Double", "kind" : "val"}, {"label" : "applnWeight", "tail" : ": Double", "member" : "provingground.learning.Deducer.applnWeight", "link" : "provingground\/learning\/Deducer.html#applnWeight:Double", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/Deducer.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/Deducer.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/Deducer.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/Deducer.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/Deducer.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/Deducer.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/Deducer.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/Deducer.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/Deducer.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/Deducer.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/Deducer.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/Deducer.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/Deducer.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/Deducer.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/Deducer.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/Deducer.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/learning\/Deducer.html", "kind" : "object"}, {"name" : "provingground.learning.DeducerBuffer", "shortDescription" : "", "members_class" : [{"label" : "sink", "tail" : "(): Sink[FiniteDistribution[Term], Future[Done]]", "member" : "provingground.learning.DeducerBuffer.sink", "link" : "provingground\/learning\/DeducerBuffer.html#sink:akka.stream.scaladsl.Sink[provingground.FiniteDistribution[provingground.HoTT.Term],scala.concurrent.Future[akka.Done]]", "kind" : "def"}, {"label" : "save", "tail" : "(fd: FiniteDistribution[Term]): Unit", "member" : "provingground.learning.DeducerBuffer.save", "link" : "provingground\/learning\/DeducerBuffer.html#save(fd:provingground.FiniteDistribution[provingground.HoTT.Term]):Unit", "kind" : "def"}, {"label" : "timeSeries", "tail" : ": Map[Term, Vector[Double]]", "member" : "provingground.learning.DeducerBuffer.timeSeries", "link" : "provingground\/learning\/DeducerBuffer.html#timeSeries:scala.collection.mutable.Map[provingground.HoTT.Term,Vector[Double]]", "kind" : "val"}, {"label" : "dist", "tail" : ": FiniteDistribution[Term]", "member" : "provingground.learning.DeducerBuffer.dist", "link" : "provingground\/learning\/DeducerBuffer.html#dist:provingground.FiniteDistribution[provingground.HoTT.Term]", "kind" : "var"}, {"label" : "loops", "tail" : ": Int", "member" : "provingground.learning.DeducerBuffer.loops", "link" : "provingground\/learning\/DeducerBuffer.html#loops:Int", "kind" : "var"}, {"member" : "provingground.learning.DeducerBuffer#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/DeducerBuffer.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/DeducerBuffer.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/DeducerBuffer.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/DeducerBuffer.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/DeducerBuffer.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/DeducerBuffer.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/DeducerBuffer.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/DeducerBuffer.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/DeducerBuffer.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/DeducerBuffer.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/DeducerBuffer.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/DeducerBuffer.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/DeducerBuffer.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/DeducerBuffer.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/DeducerBuffer.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/DeducerBuffer.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/DeducerBuffer.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/DeducerBuffer.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/DeducerBuffer.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/learning\/DeducerBuffer.html", "kind" : "class"}, {"name" : "provingground.learning.DeducerSource", "shortDescription" : "", "object" : "provingground\/learning\/DeducerSource$.html", "members_class" : [{"label" : "timedRunConc", "tail" : "(dedTime: FiniteDuration, learnTime: FiniteDuration, name: String, threads: Int): Future[Done]", "member" : "provingground.learning.DeducerSource.timedRunConc", "link" : "provingground\/learning\/DeducerSource.html#timedRunConc(dedTime:scala.concurrent.duration.FiniteDuration,learnTime:scala.concurrent.duration.FiniteDuration,name:String,threads:Int):scala.concurrent.Future[akka.Done]", "kind" : "def"}, {"label" : "timedRun", "tail" : "(dedTime: FiniteDuration, learnTime: FiniteDuration, name: String): Future[Done]", "member" : "provingground.learning.DeducerSource.timedRun", "link" : "provingground\/learning\/DeducerSource.html#timedRun(dedTime:scala.concurrent.duration.FiniteDuration,learnTime:scala.concurrent.duration.FiniteDuration,name:String):scala.concurrent.Future[akka.Done]", "kind" : "def"}, {"label" : "loopySaved", "tail" : "(dedLoops: Long, learnLoops: Long, name: String): Future[Done]", "member" : "provingground.learning.DeducerSource.loopySaved", "link" : "provingground\/learning\/DeducerSource.html#loopySaved(dedLoops:Long,learnLoops:Long,name:String):scala.concurrent.Future[akka.Done]", "kind" : "def"}, {"label" : "loopyConc", "tail" : "(dedLoops: Long, learnLoops: Long, threads: Int): NotUsed", "member" : "provingground.learning.DeducerSource.loopyConc", "link" : "provingground\/learning\/DeducerSource.html#loopyConc(dedLoops:Long,learnLoops:Long,threads:Int):akka.NotUsed", "kind" : "def"}, {"label" : "loopy", "tail" : "(dedLoops: Long, learnLoops: Long): NotUsed", "member" : "provingground.learning.DeducerSource.loopy", "link" : "provingground\/learning\/DeducerSource.html#loopy(dedLoops:Long,learnLoops:Long):akka.NotUsed", "kind" : "def"}, {"label" : "learnFlowConc", "tail" : "(threads: Int): Flow[FiniteDistribution[Term], FiniteDistribution[Term], NotUsed]", "member" : "provingground.learning.DeducerSource.learnFlowConc", "link" : "provingground\/learning\/DeducerSource.html#learnFlowConc(threads:Int):akka.stream.scaladsl.Flow[provingground.FiniteDistribution[provingground.HoTT.Term],provingground.FiniteDistribution[provingground.HoTT.Term],akka.NotUsed]", "kind" : "def"}, {"label" : "learnFlow", "tail" : "(): Flow[FiniteDistribution[Term], FiniteDistribution[Term], NotUsed]", "member" : "provingground.learning.DeducerSource.learnFlow", "link" : "provingground\/learning\/DeducerSource.html#learnFlow:akka.stream.scaladsl.Flow[provingground.FiniteDistribution[provingground.HoTT.Term],provingground.FiniteDistribution[provingground.HoTT.Term],akka.NotUsed]", "kind" : "def"}, {"label" : "learnBatchesConc", "tail" : "(threads: Int)(fdInit: FiniteDistribution[Term], invMap: InvMap): Source[FiniteDistribution[Term], NotUsed]", "member" : "provingground.learning.DeducerSource.learnBatchesConc", "link" : "provingground\/learning\/DeducerSource.html#learnBatchesConc(threads:Int)(fdInit:provingground.FiniteDistribution[provingground.HoTT.Term],invMap:provingground.learning.Deducer.InvMap):akka.stream.scaladsl.Source[provingground.FiniteDistribution[provingground.HoTT.Term],akka.NotUsed]", "kind" : "def"}, {"label" : "learnBatches", "tail" : "(fdInit: FiniteDistribution[Term], invMap: InvMap): Source[FiniteDistribution[Term], NotUsed]", "member" : "provingground.learning.DeducerSource.learnBatches", "link" : "provingground\/learning\/DeducerSource.html#learnBatches(fdInit:provingground.FiniteDistribution[provingground.HoTT.Term],invMap:provingground.learning.Deducer.InvMap):akka.stream.scaladsl.Source[provingground.FiniteDistribution[provingground.HoTT.Term],akka.NotUsed]", "kind" : "def"}, {"label" : "deducResult", "tail" : "(): Source[FiniteDistribution[Term], NotUsed]", "member" : "provingground.learning.DeducerSource.deducResult", "link" : "provingground\/learning\/DeducerSource.html#deducResult:akka.stream.scaladsl.Source[provingground.FiniteDistribution[provingground.HoTT.Term],akka.NotUsed]", "kind" : "def"}, {"label" : "deducConc", "tail" : "(threads: Int): Source[FiniteDistribution[Term], NotUsed]", "member" : "provingground.learning.DeducerSource.deducConc", "link" : "provingground\/learning\/DeducerSource.html#deducConc(threads:Int):akka.stream.scaladsl.Source[provingground.FiniteDistribution[provingground.HoTT.Term],akka.NotUsed]", "kind" : "def"}, {"label" : "deduc", "tail" : "(): Source[FiniteDistribution[Term], NotUsed]", "member" : "provingground.learning.DeducerSource.deduc", "link" : "provingground\/learning\/DeducerSource.html#deduc:akka.stream.scaladsl.Source[provingground.FiniteDistribution[provingground.HoTT.Term],akka.NotUsed]", "kind" : "def"}, {"label" : "deducBatchesConc", "tail" : "(threads: Int)(fdInit: FiniteDistribution[Term], invMap: InvMap): Source[FiniteDistribution[Term], NotUsed]", "member" : "provingground.learning.DeducerSource.deducBatchesConc", "link" : "provingground\/learning\/DeducerSource.html#deducBatchesConc(threads:Int)(fdInit:provingground.FiniteDistribution[provingground.HoTT.Term],invMap:provingground.learning.Deducer.InvMap):akka.stream.scaladsl.Source[provingground.FiniteDistribution[provingground.HoTT.Term],akka.NotUsed]", "kind" : "def"}, {"label" : "deducBatches", "tail" : "(fdInit: FiniteDistribution[Term], invMap: InvMap): Source[FiniteDistribution[Term], NotUsed]", "member" : "provingground.learning.DeducerSource.deducBatches", "link" : "provingground\/learning\/DeducerSource.html#deducBatches(fdInit:provingground.FiniteDistribution[provingground.HoTT.Term],invMap:provingground.learning.Deducer.InvMap):akka.stream.scaladsl.Source[provingground.FiniteDistribution[provingground.HoTT.Term],akka.NotUsed]", "kind" : "def"}, {"label" : "initSourceConc", "tail" : "(threads: Int): Source[(FiniteDistribution[Term], InvMap), NotUsed]", "member" : "provingground.learning.DeducerSource.initSourceConc", "link" : "provingground\/learning\/DeducerSource.html#initSourceConc(threads:Int):akka.stream.scaladsl.Source[(provingground.FiniteDistribution[provingground.HoTT.Term],provingground.learning.Deducer.InvMap),akka.NotUsed]", "kind" : "def"}, {"label" : "initSource", "tail" : "(): Source[(FiniteDistribution[Term], InvMap), NotUsed]", "member" : "provingground.learning.DeducerSource.initSource", "link" : "provingground\/learning\/DeducerSource.html#initSource:akka.stream.scaladsl.Source[(provingground.FiniteDistribution[provingground.HoTT.Term],provingground.learning.Deducer.InvMap),akka.NotUsed]", "kind" : "def"}, {"label" : "firstBatchConc", "tail" : "(threads: Int): Future[(FiniteDistribution[Term], InvMap)]", "member" : "provingground.learning.DeducerSource.firstBatchConc", "link" : "provingground\/learning\/DeducerSource.html#firstBatchConc(threads:Int):scala.concurrent.Future[(provingground.FiniteDistribution[provingground.HoTT.Term],provingground.learning.Deducer.InvMap)]", "kind" : "def"}, {"label" : "firstBatchFut", "tail" : "(): Future[(FiniteDistribution[Term], InvMap)]", "member" : "provingground.learning.DeducerSource.firstBatchFut", "link" : "provingground\/learning\/DeducerSource.html#firstBatchFut:scala.concurrent.Future[(provingground.FiniteDistribution[provingground.HoTT.Term],provingground.learning.Deducer.InvMap)]", "kind" : "def"}, {"member" : "provingground.learning.DeducerSource#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/DeducerSource.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/DeducerSource.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/DeducerSource.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/DeducerSource.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/DeducerSource.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/DeducerSource.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/DeducerSource.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/DeducerSource.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/DeducerSource.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/DeducerSource.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/DeducerSource.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/DeducerSource.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/DeducerSource.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/DeducerSource.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/DeducerSource.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/DeducerSource.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/DeducerSource.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/DeducerSource.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/DeducerSource.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "loadLearn", "tail" : "(name: String, names: Vector[(Term, String)]): Source[FiniteDistribution[Term], NotUsed]", "member" : "provingground.learning.DeducerSource.loadLearn", "link" : "provingground\/learning\/DeducerSource$.html#loadLearn(name:String,names:Vector[(provingground.HoTT.Term,String)]):akka.stream.scaladsl.Source[provingground.FiniteDistribution[provingground.HoTT.Term],akka.NotUsed]", "kind" : "def"}, {"label" : "loadDeduc", "tail" : "(name: String, names: Vector[(Term, String)]): Source[FiniteDistribution[Term], NotUsed]", "member" : "provingground.learning.DeducerSource.loadDeduc", "link" : "provingground\/learning\/DeducerSource$.html#loadDeduc(name:String,names:Vector[(provingground.HoTT.Term,String)]):akka.stream.scaladsl.Source[provingground.FiniteDistribution[provingground.HoTT.Term],akka.NotUsed]", "kind" : "def"}, {"label" : "saveLearn", "tail" : "(name: String, names: Vector[(Term, String)]): Sink[FiniteDistribution[Term], Future[Done]]", "member" : "provingground.learning.DeducerSource.saveLearn", "link" : "provingground\/learning\/DeducerSource$.html#saveLearn(name:String,names:Vector[(provingground.HoTT.Term,String)]):akka.stream.scaladsl.Sink[provingground.FiniteDistribution[provingground.HoTT.Term],scala.concurrent.Future[akka.Done]]", "kind" : "def"}, {"label" : "saveDeduc", "tail" : "(name: String, names: Vector[(Term, String)]): Sink[FiniteDistribution[Term], Future[Done]]", "member" : "provingground.learning.DeducerSource.saveDeduc", "link" : "provingground\/learning\/DeducerSource$.html#saveDeduc(name:String,names:Vector[(provingground.HoTT.Term,String)]):akka.stream.scaladsl.Sink[provingground.FiniteDistribution[provingground.HoTT.Term],scala.concurrent.Future[akka.Done]]", "kind" : "def"}, {"label" : "display", "tail" : "(names: Vector[(Term, String)]): Sink[FiniteDistribution[Term], NotUsed]", "member" : "provingground.learning.DeducerSource.display", "link" : "provingground\/learning\/DeducerSource$.html#display(names:Vector[(provingground.HoTT.Term,String)]):akka.stream.scaladsl.Sink[provingground.FiniteDistribution[provingground.HoTT.Term],akka.NotUsed]", "kind" : "def"}, {"label" : "withTimeSeries", "tail" : "(terms: ⇒ Traversable[Term]): Flow[FiniteDistribution[Term], (FiniteDistribution[Term], Map[Term, Vector[Double]]), NotUsed]", "member" : "provingground.learning.DeducerSource.withTimeSeries", "link" : "provingground\/learning\/DeducerSource$.html#withTimeSeries(terms:=>Traversable[provingground.HoTT.Term]):akka.stream.scaladsl.Flow[provingground.FiniteDistribution[provingground.HoTT.Term],(provingground.FiniteDistribution[provingground.HoTT.Term],Map[provingground.HoTT.Term,Vector[Double]]),akka.NotUsed]", "kind" : "def"}, {"label" : "lastResult", "tail" : "(): Flow[FiniteDistribution[Term], FiniteDistribution[Term], NotUsed]", "member" : "provingground.learning.DeducerSource.lastResult", "link" : "provingground\/learning\/DeducerSource$.html#lastResult:akka.stream.scaladsl.Flow[provingground.FiniteDistribution[provingground.HoTT.Term],provingground.FiniteDistribution[provingground.HoTT.Term],akka.NotUsed]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/DeducerSource$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/DeducerSource$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/DeducerSource$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/DeducerSource$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/DeducerSource$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/DeducerSource$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/DeducerSource$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/DeducerSource$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/DeducerSource$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/DeducerSource$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/DeducerSource$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/DeducerSource$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/DeducerSource$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/DeducerSource$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/DeducerSource$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/DeducerSource$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/DeducerSource$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/DeducerSource$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/DeducerSource$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/learning\/DeducerSource.html", "kind" : "class"}, {"name" : "provingground.learning.DiffbleFunction", "members_trait" : [{"label" : "apply", "tail" : "(av: TangVec[A]): TangVec[B]", "member" : "provingground.learning.DiffbleFunction.apply", "link" : "provingground\/learning\/DiffbleFunction.html#apply(av:provingground.learning.TangVec[A]):provingground.learning.TangVec[B]", "kind" : "def"}, {"label" : "total", "tail" : "(a: A, t: A): (B, B)", "member" : "provingground.learning.DiffbleFunction.total", "link" : "provingground\/learning\/DiffbleFunction.html#total(a:A,t:A):(B,B)", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Function1.toString", "link" : "provingground\/learning\/DiffbleFunction.html#toString():String", "kind" : "def"}, {"label" : "andThen", "tail" : "(g: (B) ⇒ A): (A) ⇒ A", "member" : "scala.Function1.andThen", "link" : "provingground\/learning\/DiffbleFunction.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) ⇒ A): (A) ⇒ B", "member" : "scala.Function1.compose", "link" : "provingground\/learning\/DiffbleFunction.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/DiffbleFunction.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/DiffbleFunction.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/DiffbleFunction.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/DiffbleFunction.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/DiffbleFunction.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/DiffbleFunction.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/DiffbleFunction.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/DiffbleFunction.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/DiffbleFunction.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/DiffbleFunction.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/DiffbleFunction.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/DiffbleFunction.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/DiffbleFunction.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/DiffbleFunction.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/DiffbleFunction.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/DiffbleFunction.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/DiffbleFunction.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/DiffbleFunction.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(a: A): B", "member" : "provingground.learning.DiffbleFunction.apply", "link" : "provingground\/learning\/DiffbleFunction.html#apply(a:A):B", "kind" : "abstract def"}, {"label" : "derv", "tail" : "(a: A, t: A): B", "member" : "provingground.learning.DiffbleFunction.derv", "link" : "provingground\/learning\/DiffbleFunction.html#derv(a:A,t:A):B", "kind" : "abstract def"}], "shortDescription" : "", "object" : "provingground\/learning\/DiffbleFunction$.html", "members_object" : [{"label" : "LoopyDiffFunc", "tail" : "", "member" : "provingground.learning.DiffbleFunction.LoopyDiffFunc", "link" : "provingground\/learning\/DiffbleFunction$.html#LoopyDiffFunc[A,B]extendsDiffbleFunction.LoopyFunc[A,B]withDiffbleFunction[A,cats.Eval[B]]", "kind" : "class"}, {"label" : "LoopyFunc", "tail" : "", "member" : "provingground.learning.DiffbleFunction.LoopyFunc", "link" : "provingground\/learning\/DiffbleFunction$.html#LoopyFunc[A,B]extendsA=>cats.Eval[B]", "kind" : "class"}, {"label" : "Quadratic", "tail" : "", "member" : "provingground.learning.DiffbleFunction.Quadratic", "link" : "provingground\/learning\/DiffbleFunction$.html#Quadratic[A,B]extendsProductwithSerializable", "kind" : "case class"}, {"label" : "Linear", "tail" : "", "member" : "provingground.learning.DiffbleFunction.Linear", "link" : "provingground\/learning\/DiffbleFunction$.html#Linear[A,B]extendsDiffbleFunction[A,B]withProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/DiffbleFunction$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/DiffbleFunction$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/DiffbleFunction$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/DiffbleFunction$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/DiffbleFunction$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/DiffbleFunction$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/DiffbleFunction$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/DiffbleFunction$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/DiffbleFunction$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/DiffbleFunction$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/DiffbleFunction$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/DiffbleFunction$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/DiffbleFunction$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/DiffbleFunction$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/DiffbleFunction$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/DiffbleFunction$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/DiffbleFunction$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/DiffbleFunction$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/DiffbleFunction$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/learning\/DiffbleFunction.html", "kind" : "trait"}, {"name" : "provingground.learning.DistributionState", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/DistributionState.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/DistributionState.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/DistributionState.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/DistributionState.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/DistributionState.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/DistributionState.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/DistributionState.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/DistributionState.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/DistributionState.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/DistributionState.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/DistributionState.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/DistributionState.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/DistributionState.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/DistributionState.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/DistributionState.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/DistributionState.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/DistributionState.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/DistributionState.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/DistributionState.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "update", "tail" : "(values: RandomVarValues[D])(init: State): State", "member" : "provingground.learning.DistributionState.update", "link" : "provingground\/learning\/DistributionState.html#update(values:provingground.learning.RandomVarValues[D])(init:State):State", "kind" : "abstract def"}, {"label" : "valueAt", "tail" : "(state: State)(randomVarFmly: RandomVarFamily[Dom, T], fullArg: Dom): D[T]", "member" : "provingground.learning.StateDistribution.valueAt", "link" : "provingground\/learning\/DistributionState.html#valueAt[Dom<:shapeless.HList,T](state:State)(randomVarFmly:provingground.learning.RandomVarFamily[Dom,T],fullArg:Dom):D[T]", "kind" : "abstract def"}, {"label" : "value", "tail" : "(state: State)(randomVar: RandomVar[T]): D[T]", "member" : "provingground.learning.StateDistribution.value", "link" : "provingground\/learning\/DistributionState.html#value[T](state:State)(randomVar:provingground.learning.RandomVar[T]):D[T]", "kind" : "abstract def"}], "shortDescription" : "typeclass for providing distributions from a state andmodifying a state from distributions", "object" : "provingground\/learning\/DistributionState$.html", "members_object" : [{"label" : "fdVar", "tail" : "(randVar: RandomVar[O]): DistributionState[FiniteDistribution[O], FiniteDistribution]", "member" : "provingground.learning.DistributionState.fdVar", "link" : "provingground\/learning\/DistributionState$.html#fdVar[O](randVar:provingground.learning.RandomVar[O]):provingground.learning.DistributionState[provingground.FiniteDistribution[O],provingground.FiniteDistribution]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/DistributionState$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/DistributionState$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/DistributionState$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/DistributionState$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/DistributionState$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/DistributionState$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/DistributionState$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/DistributionState$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/DistributionState$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/DistributionState$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/DistributionState$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/DistributionState$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/DistributionState$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/DistributionState$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/DistributionState$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/DistributionState$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/DistributionState$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/DistributionState$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/DistributionState$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/learning\/DistributionState.html", "kind" : "trait"}, {"name" : "provingground.learning.DistributionStateEvolver", "shortDescription" : "", "members_class" : [{"label" : "next", "tail" : "(init: State): State", "member" : "provingground.learning.DistributionStateEvolver.next", "link" : "provingground\/learning\/DistributionStateEvolver.html#next(init:State):State", "kind" : "def"}, {"member" : "provingground.learning.DistributionStateEvolver#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/DistributionStateEvolver.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/DistributionStateEvolver.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/DistributionStateEvolver.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/DistributionStateEvolver.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/DistributionStateEvolver.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/DistributionStateEvolver.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/DistributionStateEvolver.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/DistributionStateEvolver.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/DistributionStateEvolver.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/DistributionStateEvolver.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/DistributionStateEvolver.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/DistributionStateEvolver.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/DistributionStateEvolver.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/DistributionStateEvolver.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/DistributionStateEvolver.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/DistributionStateEvolver.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/DistributionStateEvolver.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/DistributionStateEvolver.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/DistributionStateEvolver.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/learning\/DistributionStateEvolver.html", "kind" : "class"}, {"name" : "provingground.learning.Empty", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/Empty.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/Empty.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/Empty.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/Empty.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/Empty.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/Empty.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/Empty.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/Empty.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/Empty.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/Empty.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/Empty.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/Empty.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/Empty.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/Empty.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/Empty.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/Empty.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/Empty.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/Empty.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/Empty.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "empty", "tail" : "(): D[A]", "member" : "provingground.learning.Empty.empty", "link" : "provingground\/learning\/Empty.html#empty[A]:D[A]", "kind" : "abstract def"}], "shortDescription" : "", "object" : "provingground\/learning\/Empty$.html", "members_object" : [{"label" : "fdEmpty", "tail" : "(): Empty[FiniteDistribution] { def empty[A]: provingground.FiniteDistribution[A] }", "member" : "provingground.learning.Empty.fdEmpty", "link" : "provingground\/learning\/Empty$.html#fdEmpty:provingground.learning.Empty[provingground.FiniteDistribution]{defempty[A]:provingground.FiniteDistribution[A]}", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/Empty$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/Empty$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/Empty$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/Empty$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/Empty$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/Empty$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/Empty$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/Empty$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/Empty$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/Empty$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/Empty$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/Empty$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/Empty$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/Empty$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/Empty$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/Empty$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/Empty$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/Empty$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/Empty$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/learning\/Empty.html", "kind" : "trait"}, {"name" : "provingground.learning.EvolverEquations", "shortDescription" : "", "object" : "provingground\/learning\/EvolverEquations$.html", "members_class" : [{"label" : "genEntropy", "tail" : ": F", "member" : "provingground.learning.EvolverEquations.genEntropy", "link" : "provingground\/learning\/EvolverEquations.html#genEntropy:F", "kind" : "lazy val"}, {"label" : "kullbackLeibler", "tail" : ": F", "member" : "provingground.learning.EvolverEquations.kullbackLeibler", "link" : "provingground\/learning\/EvolverEquations.html#kullbackLeibler:F", "kind" : "lazy val"}, {"label" : "thmProb", "tail" : "(thm: Typ[Term]): F", "member" : "provingground.learning.EvolverEquations.thmProb", "link" : "provingground\/learning\/EvolverEquations.html#thmProb(thm:provingground.HoTT.Typ[provingground.HoTT.Term]):F", "kind" : "def"}, {"label" : "totThmProb", "tail" : ": F", "member" : "provingground.learning.EvolverEquations.totThmProb", "link" : "provingground\/learning\/EvolverEquations.html#totThmProb:F", "kind" : "lazy val"}, {"label" : "proofProb", "tail" : "(thm: Typ[Term]): F", "member" : "provingground.learning.EvolverEquations.proofProb", "link" : "provingground\/learning\/EvolverEquations.html#proofProb(thm:provingground.HoTT.Typ[provingground.HoTT.Term]):F", "kind" : "def"}, {"label" : "consistencyCost", "tail" : ": F", "member" : "provingground.learning.EvolverEquations.consistencyCost", "link" : "provingground\/learning\/EvolverEquations.html#consistencyCost:F", "kind" : "lazy val"}, {"label" : "consistencyEquations", "tail" : ": Vector[(F, F)]", "member" : "provingground.learning.EvolverEquations.consistencyEquations", "link" : "provingground\/learning\/EvolverEquations.html#consistencyEquations:Vector[(F,F)]", "kind" : "lazy val"}, {"label" : "contextConsistency", "tail" : "(context: Vector[Term]): Vector[(F, F)]", "member" : "provingground.learning.EvolverEquations.contextConsistency", "link" : "provingground\/learning\/EvolverEquations.html#contextConsistency(context:Vector[provingground.HoTT.Term]):scala.collection.immutable.Vector[(F,F)]", "kind" : "def"}, {"label" : "isTypProb", "tail" : "(context: Vector[Term]): (F, F)", "member" : "provingground.learning.EvolverEquations.isTypProb", "link" : "provingground\/learning\/EvolverEquations.html#isTypProb(context:Vector[provingground.HoTT.Term]):(F,F)", "kind" : "def"}, {"label" : "isFuncProb", "tail" : "(context: Vector[Term]): (F, F)", "member" : "provingground.learning.EvolverEquations.isFuncProb", "link" : "provingground\/learning\/EvolverEquations.html#isFuncProb(context:Vector[provingground.HoTT.Term]):(F,F)", "kind" : "def"}, {"label" : "hasTypProb", "tail" : "(typ: Typ[Term], context: Vector[Term]): (F, F)", "member" : "provingground.learning.EvolverEquations.hasTypProb", "link" : "provingground\/learning\/EvolverEquations.html#hasTypProb(typ:provingground.HoTT.Typ[provingground.HoTT.Term],context:Vector[provingground.HoTT.Term]):(F,F)", "kind" : "def"}, {"label" : "totInitProbOne", "tail" : ": (F, F)", "member" : "provingground.learning.EvolverEquations.totInitProbOne", "link" : "provingground\/learning\/EvolverEquations.html#totInitProbOne:(F,F)", "kind" : "lazy val"}, {"label" : "totProbOne", "tail" : "(context: Vector[Term]): (F, F)", "member" : "provingground.learning.EvolverEquations.totProbOne", "link" : "provingground\/learning\/EvolverEquations.html#totProbOne(context:Vector[provingground.HoTT.Term]):(F,F)", "kind" : "def"}, {"label" : "totFinalProb", "tail" : "(terms: Set[Term], context: Vector[Term]): F", "member" : "provingground.learning.EvolverEquations.totFinalProb", "link" : "provingground\/learning\/EvolverEquations.html#totFinalProb(terms:Set[provingground.HoTT.Term],context:Vector[provingground.HoTT.Term]):F", "kind" : "def"}, {"label" : "isTypP", "tail" : "(context: Vector[Term]): F", "member" : "provingground.learning.EvolverEquations.isTypP", "link" : "provingground\/learning\/EvolverEquations.html#isTypP(context:Vector[provingground.HoTT.Term]):F", "kind" : "def"}, {"label" : "isFuncP", "tail" : "(context: Vector[Term]): F", "member" : "provingground.learning.EvolverEquations.isFuncP", "link" : "provingground\/learning\/EvolverEquations.html#isFuncP(context:Vector[provingground.HoTT.Term]):F", "kind" : "def"}, {"label" : "hasTyp", "tail" : "(typ: Typ[Term], context: Vector[Term]): F", "member" : "provingground.learning.EvolverEquations.hasTyp", "link" : "provingground\/learning\/EvolverEquations.html#hasTyp(typ:provingground.HoTT.Typ[provingground.HoTT.Term],context:Vector[provingground.HoTT.Term]):F", "kind" : "def"}, {"label" : "finalProb", "tail" : "(t: Term, context: Vector[Term]): F", "member" : "provingground.learning.EvolverEquations.finalProb", "link" : "provingground\/learning\/EvolverEquations.html#finalProb(t:provingground.HoTT.Term,context:Vector[provingground.HoTT.Term]):F", "kind" : "def"}, {"label" : "initProb", "tail" : "(t: Term): F", "member" : "provingground.learning.EvolverEquations.initProb", "link" : "provingground\/learning\/EvolverEquations.html#initProb(t:provingground.HoTT.Term):F", "kind" : "def"}, {"member" : "provingground.learning.EvolverEquations#<init>", "error" : "unsupported entity"}, {"label" : "field", "tail" : ": Field[F]", "member" : "provingground.learning.EvolverEquations.field", "link" : "provingground\/learning\/EvolverEquations.html#field:spire.algebra.Field[F]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/EvolverEquations.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/EvolverEquations.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/EvolverEquations.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/EvolverEquations.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/EvolverEquations.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/EvolverEquations.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/EvolverEquations.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/EvolverEquations.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/EvolverEquations.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/EvolverEquations.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/EvolverEquations.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/EvolverEquations.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/EvolverEquations.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/EvolverEquations.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/EvolverEquations.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/EvolverEquations.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/EvolverEquations.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/EvolverEquations.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/EvolverEquations.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "sum", "tail" : "(seq: Iterable[F])(field: Field[F]): F", "member" : "provingground.learning.EvolverEquations.sum", "link" : "provingground\/learning\/EvolverEquations$.html#sum[F](seq:Iterable[F])(implicitfield:spire.algebra.Field[F]):F", "kind" : "def"}, {"label" : "projectSomeContext", "tail" : "(toCtxs: Vector[Vector[Term]])(term: Term, fromCtx: Vector[Term]): Option[(Term, Vector[Term])]", "member" : "provingground.learning.EvolverEquations.projectSomeContext", "link" : "provingground\/learning\/EvolverEquations$.html#projectSomeContext(toCtxs:Vector[Vector[provingground.HoTT.Term]])(term:provingground.HoTT.Term,fromCtx:Vector[provingground.HoTT.Term]):Option[(provingground.HoTT.Term,Vector[provingground.HoTT.Term])]", "kind" : "def"}, {"label" : "projectContext", "tail" : "(fromCtx: Vector[Term], toCtx: Vector[Term])(term: Term): Option[Term]", "member" : "provingground.learning.EvolverEquations.projectContext", "link" : "provingground\/learning\/EvolverEquations$.html#projectContext(fromCtx:Vector[provingground.HoTT.Term],toCtx:Vector[provingground.HoTT.Term])(term:provingground.HoTT.Term):Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "appendContext", "tail" : "(ctxs: Vector[Vector[Term]], context: Vector[Term]): Vector[Vector[Term]]", "member" : "provingground.learning.EvolverEquations.appendContext", "link" : "provingground\/learning\/EvolverEquations$.html#appendContext(ctxs:Vector[Vector[provingground.HoTT.Term]],context:Vector[provingground.HoTT.Term]):Vector[Vector[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "equalContexts", "tail" : "(ctx1: Vector[Term], ctx2: Vector[Term]): Boolean", "member" : "provingground.learning.EvolverEquations.equalContexts", "link" : "provingground\/learning\/EvolverEquations$.html#equalContexts(ctx1:Vector[provingground.HoTT.Term],ctx2:Vector[provingground.HoTT.Term]):Boolean", "kind" : "def"}, {"label" : "contextsOfTerm", "tail" : "(term: Term): Vector[Vector[Term]]", "member" : "provingground.learning.EvolverEquations.contextsOfTerm", "link" : "provingground\/learning\/EvolverEquations$.html#contextsOfTerm(term:provingground.HoTT.Term):Vector[Vector[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "typsInContext", "tail" : "(typs: Set[Typ[Term]], context: Vector[Term]): Set[Typ[Term]]", "member" : "provingground.learning.EvolverEquations.typsInContext", "link" : "provingground\/learning\/EvolverEquations$.html#typsInContext(typs:Set[provingground.HoTT.Typ[provingground.HoTT.Term]],context:Vector[provingground.HoTT.Term]):Set[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "termInSomeContext", "tail" : "(term: Term, contexts: Vector[Vector[Term]], accum: Option[(Term, Vector[Term])]): Option[(Term, Vector[Term])]", "member" : "provingground.learning.EvolverEquations.termInSomeContext", "link" : "provingground\/learning\/EvolverEquations$.html#termInSomeContext(term:provingground.HoTT.Term,contexts:Vector[Vector[provingground.HoTT.Term]],accum:Option[(provingground.HoTT.Term,Vector[provingground.HoTT.Term])]):Option[(provingground.HoTT.Term,Vector[provingground.HoTT.Term])]", "kind" : "def"}, {"label" : "termOptContext", "tail" : "(term: Term, context: Vector[Term]): Option[Term]", "member" : "provingground.learning.EvolverEquations.termOptContext", "link" : "provingground\/learning\/EvolverEquations$.html#termOptContext(term:provingground.HoTT.Term,context:Vector[provingground.HoTT.Term]):Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "termsInContext", "tail" : "(terms: Set[Term], context: Vector[Term]): Set[Term]", "member" : "provingground.learning.EvolverEquations.termsInContext", "link" : "provingground\/learning\/EvolverEquations$.html#termsInContext(terms:Set[provingground.HoTT.Term],context:Vector[provingground.HoTT.Term]):Set[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "klDiff", "tail" : "(p: F, q: F)(arg0: Field[F], arg1: Trig[F]): F", "member" : "provingground.learning.EvolverEquations.klDiff", "link" : "provingground\/learning\/EvolverEquations$.html#klDiff[F](p:F,q:F)(implicitevidence$1:spire.algebra.Field[F],implicitevidence$2:spire.algebra.Trig[F]):F", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/EvolverEquations$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/EvolverEquations$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/EvolverEquations$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/EvolverEquations$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/EvolverEquations$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/EvolverEquations$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/EvolverEquations$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/EvolverEquations$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/EvolverEquations$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/EvolverEquations$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/EvolverEquations$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/EvolverEquations$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/EvolverEquations$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/EvolverEquations$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/EvolverEquations$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/EvolverEquations$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/EvolverEquations$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/EvolverEquations$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/EvolverEquations$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/learning\/EvolverEquations.html", "kind" : "object"}, {"name" : "provingground.learning.EvolverSupport", "members_trait" : [{"label" : "spireGradShifted", "tail" : "(p: Map[EvolverVariables, Double], cost: Jet[Double], epsilon: Double): Map[EvolverVariables, Double]", "member" : "provingground.learning.EvolverSupport.spireGradShifted", "link" : "provingground\/learning\/EvolverSupport.html#spireGradShifted(p:Map[provingground.learning.EvolverVariables,Double],cost:spire.math.Jet[Double],epsilon:Double):scala.collection.immutable.Map[provingground.learning.EvolverVariables,Double]", "kind" : "def"}, {"label" : "spireUpdate", "tail" : "(p: Map[EvolverVariables, Double], tang: Vector[Double]): Map[EvolverVariables, Double]", "member" : "provingground.learning.EvolverSupport.spireUpdate", "link" : "provingground\/learning\/EvolverSupport.html#spireUpdate(p:Map[provingground.learning.EvolverVariables,Double],tang:Vector[Double]):scala.collection.immutable.Map[provingground.learning.EvolverVariables,Double]", "kind" : "def"}, {"label" : "spireLearner", "tail" : "(p: Map[EvolverVariables, Double], apIn: ApplnInverse): TermLearner[Jet[Double]]", "member" : "provingground.learning.EvolverSupport.spireLearner", "link" : "provingground\/learning\/EvolverSupport.html#spireLearner(p:Map[provingground.learning.EvolverVariables,Double],apIn:provingground.learning.ApplnInverse):provingground.learning.TermLearner[spire.math.Jet[Double]]", "kind" : "def"}, {"label" : "spireProb", "tail" : "(p: Map[EvolverVariables, Double]): Map[EvolverVariables, Jet[Double]]", "member" : "provingground.learning.EvolverSupport.spireProb", "link" : "provingground\/learning\/EvolverSupport.html#spireProb(p:Map[provingground.learning.EvolverVariables,Double]):Map[provingground.learning.EvolverVariables,spire.math.Jet[Double]]", "kind" : "def"}, {"label" : "jetField", "tail" : ": Field[Jet[Double]]", "member" : "provingground.learning.EvolverSupport.jetField", "link" : "provingground\/learning\/EvolverSupport.html#jetField:spire.algebra.Field[spire.math.Jet[Double]]", "kind" : "implicit val"}, {"label" : "dim", "tail" : ": JetDim", "member" : "provingground.learning.EvolverSupport.dim", "link" : "provingground\/learning\/EvolverSupport.html#dim:spire.math.JetDim", "kind" : "implicit val"}, {"label" : "variableIndex", "tail" : ": Map[EvolverVariables, Int]", "member" : "provingground.learning.EvolverSupport.variableIndex", "link" : "provingground\/learning\/EvolverSupport.html#variableIndex:Map[provingground.learning.EvolverVariables,Int]", "kind" : "lazy val"}, {"label" : "variablesVector", "tail" : ": Vector[EvolverVariables]", "member" : "provingground.learning.EvolverSupport.variablesVector", "link" : "provingground\/learning\/EvolverSupport.html#variablesVector:Vector[provingground.learning.EvolverVariables]", "kind" : "lazy val"}, {"label" : "contextTermVec", "tail" : ": Vector[(Term, Vector[Term])]", "member" : "provingground.learning.EvolverSupport.contextTermVec", "link" : "provingground\/learning\/EvolverSupport.html#contextTermVec:Vector[(provingground.HoTT.Term,Vector[provingground.HoTT.Term])]", "kind" : "lazy val"}, {"label" : "typSetInContext", "tail" : "(context: Vector[Term]): Set[Typ[Term]]", "member" : "provingground.learning.EvolverSupport.typSetInContext", "link" : "provingground\/learning\/EvolverSupport.html#typSetInContext(context:Vector[provingground.HoTT.Term]):Set[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "termSetInContext", "tail" : "(context: Vector[Term]): Set[Term]", "member" : "provingground.learning.EvolverSupport.termSetInContext", "link" : "provingground\/learning\/EvolverSupport.html#termSetInContext(context:Vector[provingground.HoTT.Term]):Set[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "inBaseContext", "tail" : "(term: Term, context: Vector[Term]): Option[(Term, Vector[Term])]", "member" : "provingground.learning.EvolverSupport.inBaseContext", "link" : "provingground\/learning\/EvolverSupport.html#inBaseContext(term:provingground.HoTT.Term,context:Vector[provingground.HoTT.Term]):Option[(provingground.HoTT.Term,Vector[provingground.HoTT.Term])]", "kind" : "def"}, {"label" : "baseContexts", "tail" : ": Vector[Vector[Term]]", "member" : "provingground.learning.EvolverSupport.baseContexts", "link" : "provingground\/learning\/EvolverSupport.html#baseContexts:Vector[Vector[provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "thmSet", "tail" : ": Set[Typ[Term]]", "member" : "provingground.learning.EvolverSupport.thmSet", "link" : "provingground\/learning\/EvolverSupport.html#thmSet:Set[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/EvolverSupport.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/EvolverSupport.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/EvolverSupport.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/EvolverSupport.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/EvolverSupport.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/EvolverSupport.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/EvolverSupport.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/EvolverSupport.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/EvolverSupport.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/EvolverSupport.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/EvolverSupport.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/EvolverSupport.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/EvolverSupport.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/EvolverSupport.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/EvolverSupport.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/EvolverSupport.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/EvolverSupport.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/EvolverSupport.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/EvolverSupport.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "genTermSet", "tail" : ": Set[Term]", "member" : "provingground.learning.EvolverSupport.genTermSet", "link" : "provingground\/learning\/EvolverSupport.html#genTermSet:Set[provingground.HoTT.Term]", "kind" : "abstract val"}, {"label" : "typSet", "tail" : ": Set[Typ[Term]]", "member" : "provingground.learning.EvolverSupport.typSet", "link" : "provingground\/learning\/EvolverSupport.html#typSet:Set[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "abstract val"}, {"label" : "termSet", "tail" : ": Set[Term]", "member" : "provingground.learning.EvolverSupport.termSet", "link" : "provingground\/learning\/EvolverSupport.html#termSet:Set[provingground.HoTT.Term]", "kind" : "abstract val"}], "shortDescription" : "Support of the final distribution of an evolver, i.e., a generative model for terms", "trait" : "provingground\/learning\/EvolverSupport.html", "kind" : "trait"}, {"name" : "provingground.learning.EvolverVariables", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/EvolverVariables.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/EvolverVariables.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/EvolverVariables.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/EvolverVariables.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/EvolverVariables.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/EvolverVariables.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/EvolverVariables.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/EvolverVariables.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/EvolverVariables.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/EvolverVariables.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/EvolverVariables.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/EvolverVariables.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/EvolverVariables.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/EvolverVariables.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/EvolverVariables.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/EvolverVariables.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/EvolverVariables.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/EvolverVariables.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/EvolverVariables.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Variables in an evolver; not all need to be used in a give case", "object" : "provingground\/learning\/EvolverVariables$.html", "members_object" : [{"label" : "VarWeight", "tail" : "", "member" : "provingground.learning.EvolverVariables.VarWeight", "link" : "provingground\/learning\/EvolverVariables$.html#VarWeight", "kind" : "object"}, {"label" : "PiWeight", "tail" : "", "member" : "provingground.learning.EvolverVariables.PiWeight", "link" : "provingground\/learning\/EvolverVariables$.html#PiWeight", "kind" : "object"}, {"label" : "LambdaWeight", "tail" : "", "member" : "provingground.learning.EvolverVariables.LambdaWeight", "link" : "provingground\/learning\/EvolverVariables$.html#LambdaWeight", "kind" : "object"}, {"label" : "Appl", "tail" : "", "member" : "provingground.learning.EvolverVariables.Appl", "link" : "provingground\/learning\/EvolverVariables$.html#Appl", "kind" : "object"}, {"label" : "UnApp", "tail" : "", "member" : "provingground.learning.EvolverVariables.UnApp", "link" : "provingground\/learning\/EvolverVariables$.html#UnApp", "kind" : "object"}, {"label" : "InitWeight", "tail" : "", "member" : "provingground.learning.EvolverVariables.InitWeight", "link" : "provingground\/learning\/EvolverVariables$.html#InitWeight", "kind" : "object"}, {"label" : "IsTypP", "tail" : "", "member" : "provingground.learning.EvolverVariables.IsTypP", "link" : "provingground\/learning\/EvolverVariables$.html#IsTypPextendsEvolverVariableswithProductwithSerializable", "kind" : "case class"}, {"label" : "IsFuncP", "tail" : "", "member" : "provingground.learning.EvolverVariables.IsFuncP", "link" : "provingground\/learning\/EvolverVariables$.html#IsFuncPextendsEvolverVariableswithProductwithSerializable", "kind" : "case class"}, {"label" : "HasTyp", "tail" : "", "member" : "provingground.learning.EvolverVariables.HasTyp", "link" : "provingground\/learning\/EvolverVariables$.html#HasTypextendsEvolverVariableswithProductwithSerializable", "kind" : "case class"}, {"label" : "FinalProb", "tail" : "", "member" : "provingground.learning.EvolverVariables.FinalProb", "link" : "provingground\/learning\/EvolverVariables$.html#FinalProbextendsEvolverVariableswithProductwithSerializable", "kind" : "case class"}, {"label" : "InitProb", "tail" : "", "member" : "provingground.learning.EvolverVariables.InitProb", "link" : "provingground\/learning\/EvolverVariables$.html#InitProbextendsEvolverVariableswithProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/EvolverVariables$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/EvolverVariables$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/EvolverVariables$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/EvolverVariables$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/EvolverVariables$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/EvolverVariables$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/EvolverVariables$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/EvolverVariables$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/EvolverVariables$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/EvolverVariables$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/EvolverVariables$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/EvolverVariables$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/EvolverVariables$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/EvolverVariables$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/EvolverVariables$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/EvolverVariables$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/EvolverVariables$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/EvolverVariables$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/EvolverVariables$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/learning\/EvolverVariables.html", "kind" : "trait"}, {"name" : "provingground.learning.FineDeducer", "shortDescription" : "A refined deducer, i.e., evolution of terms and derivatives of evolution.", "object" : "provingground\/learning\/FineDeducer$.html", "members_object" : [{"label" : "piEv", "tail" : "(varweight: Double)(typEvolve: ⇒ (FiniteDistribution[Term]) ⇒ ProbabilityDistribution[Term], valueEvolve: ⇒ (Term) ⇒ (FiniteDistribution[Term]) ⇒ ProbabilityDistribution[Term])(p: FiniteDistribution[Term]): ProbabilityDistribution[Option[Term]]", "member" : "provingground.learning.FineDeducer.piEv", "link" : "provingground\/learning\/FineDeducer$.html#piEv(varweight:Double)(typEvolve:=>provingground.FiniteDistribution[provingground.HoTT.Term]=>provingground.ProbabilityDistribution[provingground.HoTT.Term],valueEvolve:=>provingground.HoTT.Term=>(provingground.FiniteDistribution[provingground.HoTT.Term]=>provingground.ProbabilityDistribution[provingground.HoTT.Term]))(p:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[Option[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "lambdaEv", "tail" : "(varweight: Double)(typEvolve: ⇒ (FiniteDistribution[Term]) ⇒ ProbabilityDistribution[Term], valueEvolve: ⇒ (Term) ⇒ (FiniteDistribution[Term]) ⇒ ProbabilityDistribution[Term])(p: FiniteDistribution[Term]): ProbabilityDistribution[Option[Term]]", "member" : "provingground.learning.FineDeducer.lambdaEv", "link" : "provingground\/learning\/FineDeducer$.html#lambdaEv(varweight:Double)(typEvolve:=>provingground.FiniteDistribution[provingground.HoTT.Term]=>provingground.ProbabilityDistribution[provingground.HoTT.Term],valueEvolve:=>provingground.HoTT.Term=>(provingground.FiniteDistribution[provingground.HoTT.Term]=>provingground.ProbabilityDistribution[provingground.HoTT.Term]))(p:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[Option[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "simpleApplnEv", "tail" : "(funcEvolve: ⇒ (FiniteDistribution[Term]) ⇒ ProbabilityDistribution[SomeFunc], argEvolve: ⇒ (Typ[Term]) ⇒ (FiniteDistribution[Term]) ⇒ ProbabilityDistribution[Term])(p: FiniteDistribution[Term]): ProbabilityDistribution[v forSome {type v <: Term with Subs[v]}]", "member" : "provingground.learning.FineDeducer.simpleApplnEv", "link" : "provingground\/learning\/FineDeducer$.html#simpleApplnEv(funcEvolve:=>provingground.FiniteDistribution[provingground.HoTT.Term]=>provingground.ProbabilityDistribution[provingground.learning.FineDeducer.SomeFunc],argEvolve:=>provingground.HoTT.Typ[provingground.HoTT.Term]=>(provingground.FiniteDistribution[provingground.HoTT.Term]=>provingground.ProbabilityDistribution[provingground.HoTT.Term]))(p:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[vforSome{typev<:provingground.HoTT.Termwithprovingground.HoTT.Subs[v]}]", "kind" : "def"}, {"label" : "unifApplnEv", "tail" : "(funcEvolve: ⇒ (FiniteDistribution[Term]) ⇒ ProbabilityDistribution[SomeFunc], argEvolve: ⇒ (FiniteDistribution[Term]) ⇒ ProbabilityDistribution[Term])(p: FiniteDistribution[Term]): ProbabilityDistribution[Option[Term]]", "member" : "provingground.learning.FineDeducer.unifApplnEv", "link" : "provingground\/learning\/FineDeducer$.html#unifApplnEv(funcEvolve:=>provingground.FiniteDistribution[provingground.HoTT.Term]=>provingground.ProbabilityDistribution[provingground.learning.FineDeducer.SomeFunc],argEvolve:=>provingground.FiniteDistribution[provingground.HoTT.Term]=>provingground.ProbabilityDistribution[provingground.HoTT.Term])(p:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[Option[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "unif", "tail" : "(vars: Term*)(terms: Term*)(axioms: Typ[Term]*): FiniteDistribution[Term]", "member" : "provingground.learning.FineDeducer.unif", "link" : "provingground\/learning\/FineDeducer$.html#unif(vars:provingground.HoTT.Term*)(terms:provingground.HoTT.Term*)(axioms:provingground.HoTT.Typ[provingground.HoTT.Term]*):provingground.FiniteDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "asTyps", "tail" : "(pd: ProbabilityDistribution[Term]): ProbabilityDistribution[Typ[Term]]", "member" : "provingground.learning.FineDeducer.asTyps", "link" : "provingground\/learning\/FineDeducer$.html#asTyps(pd:provingground.ProbabilityDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "asFuncs", "tail" : "(pd: ProbabilityDistribution[Term]): ProbabilityDistribution[SomeFunc]", "member" : "provingground.learning.FineDeducer.asFuncs", "link" : "provingground\/learning\/FineDeducer$.html#asFuncs(pd:provingground.ProbabilityDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[provingground.learning.FineDeducer.SomeFunc]", "kind" : "def"}, {"label" : "typClosure", "tail" : "(vars: Vector[Term])(fd: FiniteDistribution[Typ[Term]]): FiniteDistribution[Typ[Term]]", "member" : "provingground.learning.FineDeducer.typClosure", "link" : "provingground\/learning\/FineDeducer$.html#typClosure(vars:Vector[provingground.HoTT.Term])(fd:provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]):provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "termClosure", "tail" : "(vars: Vector[Term])(fd: FiniteDistribution[Term]): FiniteDistribution[Term]", "member" : "provingground.learning.FineDeducer.termClosure", "link" : "provingground\/learning\/FineDeducer$.html#termClosure(vars:Vector[provingground.HoTT.Term])(fd:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.FiniteDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "SomeFunc", "tail" : "", "member" : "provingground.learning.FineDeducer.SomeFunc", "link" : "provingground\/learning\/FineDeducer$.html#SomeFunc=provingground.HoTT.FuncLike[u,v]forSome{typeu<:provingground.HoTT.Termwithprovingground.HoTT.Subs[u];typev<:provingground.HoTT.Termwithprovingground.HoTT.Subs[v]}", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/FineDeducer$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/FineDeducer$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/FineDeducer$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/FineDeducer$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/FineDeducer$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/FineDeducer$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/FineDeducer$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/FineDeducer$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/FineDeducer$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/FineDeducer$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/FineDeducer$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/FineDeducer$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/FineDeducer$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/FineDeducer$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/FineDeducer$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/FineDeducer$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/FineDeducer$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/FineDeducer$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/FineDeducer$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "DevolveTyp", "tail" : "(fd: FiniteDistribution[Term], tang: FiniteDistribution[Term]): ProbabilityDistribution[Term]", "member" : "provingground.learning.FineDeducer.DevolveTyp", "link" : "provingground\/learning\/FineDeducer.html#DevolveTyp(fd:provingground.FiniteDistribution[provingground.HoTT.Term],tang:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "DevolveWithType", "tail" : "(tp: Typ[Term])(fd: FiniteDistribution[Term], tang: FiniteDistribution[Term]): ProbabilityDistribution[Term]", "member" : "provingground.learning.FineDeducer.DevolveWithType", "link" : "provingground\/learning\/FineDeducer.html#DevolveWithType(tp:provingground.HoTT.Typ[provingground.HoTT.Term])(fd:provingground.FiniteDistribution[provingground.HoTT.Term],tang:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "DevolvTypFamilies", "tail" : "(fd: FiniteDistribution[Term], tang: FiniteDistribution[Term]): ProbabilityDistribution[SomeFunc]", "member" : "provingground.learning.FineDeducer.DevolvTypFamilies", "link" : "provingground\/learning\/FineDeducer.html#DevolvTypFamilies(fd:provingground.FiniteDistribution[provingground.HoTT.Term],tang:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[provingground.learning.FineDeducer.SomeFunc]", "kind" : "def"}, {"label" : "DevolvFuncs", "tail" : "(fd: FiniteDistribution[Term], tang: FiniteDistribution[Term]): ProbabilityDistribution[SomeFunc]", "member" : "provingground.learning.FineDeducer.DevolvFuncs", "link" : "provingground\/learning\/FineDeducer.html#DevolvFuncs(fd:provingground.FiniteDistribution[provingground.HoTT.Term],tang:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[provingground.learning.FineDeducer.SomeFunc]", "kind" : "def"}, {"label" : "DpiVal", "tail" : "(fd: FiniteDistribution[Term], tang: FiniteDistribution[Term]): ProbabilityDistribution[Option[Term]]", "member" : "provingground.learning.FineDeducer.DpiVal", "link" : "provingground\/learning\/FineDeducer.html#DpiVal(fd:provingground.FiniteDistribution[provingground.HoTT.Term],tang:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[Option[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "DpiVar", "tail" : "(fd: FiniteDistribution[Term], tang: FiniteDistribution[Term]): ProbabilityDistribution[Option[Term]]", "member" : "provingground.learning.FineDeducer.DpiVar", "link" : "provingground\/learning\/FineDeducer.html#DpiVar(fd:provingground.FiniteDistribution[provingground.HoTT.Term],tang:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[Option[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "DlambdaTypVal", "tail" : "(fd: FiniteDistribution[Term], tang: FiniteDistribution[Term]): ProbabilityDistribution[Option[Term]]", "member" : "provingground.learning.FineDeducer.DlambdaTypVal", "link" : "provingground\/learning\/FineDeducer.html#DlambdaTypVal(fd:provingground.FiniteDistribution[provingground.HoTT.Term],tang:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[Option[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "DlambdaVal", "tail" : "(fd: FiniteDistribution[Term], tang: FiniteDistribution[Term]): ProbabilityDistribution[Option[Term]]", "member" : "provingground.learning.FineDeducer.DlambdaVal", "link" : "provingground\/learning\/FineDeducer.html#DlambdaVal(fd:provingground.FiniteDistribution[provingground.HoTT.Term],tang:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[Option[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "DlambdaTypVar", "tail" : "(fd: FiniteDistribution[Term], tang: FiniteDistribution[Term]): ProbabilityDistribution[Option[Term]]", "member" : "provingground.learning.FineDeducer.DlambdaTypVar", "link" : "provingground\/learning\/FineDeducer.html#DlambdaTypVar(fd:provingground.FiniteDistribution[provingground.HoTT.Term],tang:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[Option[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "DlambdaVar", "tail" : "(fd: FiniteDistribution[Term], tang: FiniteDistribution[Term]): ProbabilityDistribution[Option[Term]]", "member" : "provingground.learning.FineDeducer.DlambdaVar", "link" : "provingground\/learning\/FineDeducer.html#DlambdaVar(fd:provingground.FiniteDistribution[provingground.HoTT.Term],tang:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[Option[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "DsimpleApplnTypArg", "tail" : "(fd: FiniteDistribution[Term], tang: FiniteDistribution[Term]): ProbabilityDistribution[Term]", "member" : "provingground.learning.FineDeducer.DsimpleApplnTypArg", "link" : "provingground\/learning\/FineDeducer.html#DsimpleApplnTypArg(fd:provingground.FiniteDistribution[provingground.HoTT.Term],tang:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "DsimpleApplnTypFamilies", "tail" : "(fd: FiniteDistribution[Term], tang: FiniteDistribution[Term]): ProbabilityDistribution[Term]", "member" : "provingground.learning.FineDeducer.DsimpleApplnTypFamilies", "link" : "provingground\/learning\/FineDeducer.html#DsimpleApplnTypFamilies(fd:provingground.FiniteDistribution[provingground.HoTT.Term],tang:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "DunifApplnTypArg", "tail" : "(fd: FiniteDistribution[Term], tang: FiniteDistribution[Term]): ProbabilityDistribution[Option[Term]]", "member" : "provingground.learning.FineDeducer.DunifApplnTypArg", "link" : "provingground\/learning\/FineDeducer.html#DunifApplnTypArg(fd:provingground.FiniteDistribution[provingground.HoTT.Term],tang:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[Option[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "DunifApplnTypFamilies", "tail" : "(fd: FiniteDistribution[Term], tang: FiniteDistribution[Term]): ProbabilityDistribution[Option[Term]]", "member" : "provingground.learning.FineDeducer.DunifApplnTypFamilies", "link" : "provingground\/learning\/FineDeducer.html#DunifApplnTypFamilies(fd:provingground.FiniteDistribution[provingground.HoTT.Term],tang:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[Option[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "DsimpleApplnArg", "tail" : "(fd: FiniteDistribution[Term], tang: FiniteDistribution[Term]): ProbabilityDistribution[Term]", "member" : "provingground.learning.FineDeducer.DsimpleApplnArg", "link" : "provingground\/learning\/FineDeducer.html#DsimpleApplnArg(fd:provingground.FiniteDistribution[provingground.HoTT.Term],tang:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "DsimpleApplnFunc", "tail" : "(fd: FiniteDistribution[Term], tang: FiniteDistribution[Term]): ProbabilityDistribution[Term]", "member" : "provingground.learning.FineDeducer.DsimpleApplnFunc", "link" : "provingground\/learning\/FineDeducer.html#DsimpleApplnFunc(fd:provingground.FiniteDistribution[provingground.HoTT.Term],tang:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "DunifApplnArg", "tail" : "(fd: FiniteDistribution[Term], tang: FiniteDistribution[Term]): ProbabilityDistribution[Option[Term]]", "member" : "provingground.learning.FineDeducer.DunifApplnArg", "link" : "provingground\/learning\/FineDeducer.html#DunifApplnArg(fd:provingground.FiniteDistribution[provingground.HoTT.Term],tang:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[Option[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "DunifApplnFunc", "tail" : "(fd: FiniteDistribution[Term], tang: FiniteDistribution[Term]): ProbabilityDistribution[Option[Term]]", "member" : "provingground.learning.FineDeducer.DunifApplnFunc", "link" : "provingground\/learning\/FineDeducer.html#DunifApplnFunc(fd:provingground.FiniteDistribution[provingground.HoTT.Term],tang:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[Option[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "Devolve", "tail" : "(fd: FiniteDistribution[Term], tang: FiniteDistribution[Term]): ProbabilityDistribution[Term]", "member" : "provingground.learning.FineDeducer.Devolve", "link" : "provingground\/learning\/FineDeducer.html#Devolve(fd:provingground.FiniteDistribution[provingground.HoTT.Term],tang:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "varScaled", "tail" : ": FineDeducer", "member" : "provingground.learning.FineDeducer.varScaled", "link" : "provingground\/learning\/FineDeducer.html#varScaled:provingground.learning.FineDeducer", "kind" : "lazy val"}, {"member" : "provingground.learning.FineDeducer#<init>", "error" : "unsupported entity"}, {"label" : "unifyWeight", "tail" : ": Double", "member" : "provingground.learning.FineDeducer.unifyWeight", "link" : "provingground\/learning\/FineDeducer.html#unifyWeight:Double", "kind" : "val"}, {"label" : "varWeight", "tail" : ": Double", "member" : "provingground.learning.FineDeducer.varWeight", "link" : "provingground\/learning\/FineDeducer.html#varWeight:Double", "kind" : "val"}, {"label" : "piWeight", "tail" : ": Double", "member" : "provingground.learning.FineDeducer.piWeight", "link" : "provingground\/learning\/FineDeducer.html#piWeight:Double", "kind" : "val"}, {"label" : "lambdaWeight", "tail" : ": Double", "member" : "provingground.learning.FineDeducer.lambdaWeight", "link" : "provingground\/learning\/FineDeducer.html#lambdaWeight:Double", "kind" : "val"}, {"label" : "applnWeight", "tail" : ": Double", "member" : "provingground.learning.FineDeducer.applnWeight", "link" : "provingground\/learning\/FineDeducer.html#applnWeight:Double", "kind" : "val"}, {"label" : "evolveTyp", "tail" : "(fd: FiniteDistribution[Term]): ProbabilityDistribution[Term]", "member" : "provingground.learning.FineEvolver.evolveTyp", "link" : "provingground\/learning\/FineDeducer.html#evolveTyp(fd:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "evolveWithTyp", "tail" : "(tp: Typ[Term])(fd: FiniteDistribution[Term]): ProbabilityDistribution[Term]", "member" : "provingground.learning.FineEvolver.evolveWithTyp", "link" : "provingground\/learning\/FineDeducer.html#evolveWithTyp(tp:provingground.HoTT.Typ[provingground.HoTT.Term])(fd:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "evolvTypFamilies", "tail" : "(fd: FiniteDistribution[Term]): ProbabilityDistribution[SomeFunc]", "member" : "provingground.learning.FineEvolver.evolvTypFamilies", "link" : "provingground\/learning\/FineDeducer.html#evolvTypFamilies(fd:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[provingground.learning.FineDeducer.SomeFunc]", "kind" : "def"}, {"label" : "evolvFuncs", "tail" : "(fd: FiniteDistribution[Term]): ProbabilityDistribution[SomeFunc]", "member" : "provingground.learning.FineEvolver.evolvFuncs", "link" : "provingground\/learning\/FineDeducer.html#evolvFuncs(fd:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[provingground.learning.FineDeducer.SomeFunc]", "kind" : "def"}, {"label" : "evolve", "tail" : "(fd: FiniteDistribution[Term]): ProbabilityDistribution[Term]", "member" : "provingground.learning.FineEvolver.evolve", "link" : "provingground\/learning\/FineDeducer.html#evolve(fd:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/FineDeducer.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/FineDeducer.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/FineDeducer.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/FineDeducer.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/FineDeducer.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/FineDeducer.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/FineDeducer.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/FineDeducer.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/FineDeducer.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/FineDeducer.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/FineDeducer.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/FineDeducer.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/FineDeducer.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/FineDeducer.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/FineDeducer.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/FineDeducer.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/learning\/FineDeducer.html", "kind" : "object"}, {"name" : "provingground.learning.FineDeducerStep", "shortDescription" : "", "object" : "provingground\/learning\/FineDeducerStep$.html", "members_class" : [{"label" : "next", "tail" : "(): X[FineDeducerStep[X]]", "member" : "provingground.learning.FineDeducerStep.next", "link" : "provingground\/learning\/FineDeducerStep.html#next:X[provingground.learning.FineDeducerStep[X]]", "kind" : "def"}, {"label" : "succ", "tail" : ": X[FineDeducerStep[X]]", "member" : "provingground.learning.FineDeducerStep.succ", "link" : "provingground\/learning\/FineDeducerStep.html#succ:X[provingground.learning.FineDeducerStep[X]]", "kind" : "lazy val"}, {"label" : "newp", "tail" : "(np: FiniteDistribution[Term]): FineDeducerStep[X]", "member" : "provingground.learning.FineDeducerStep.newp", "link" : "provingground\/learning\/FineDeducerStep.html#newp(np:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.learning.FineDeducerStep[X]", "kind" : "def"}, {"label" : "succFD", "tail" : ": X[FiniteDistribution[Term]]", "member" : "provingground.learning.FineDeducerStep.succFD", "link" : "provingground\/learning\/FineDeducerStep.html#succFD:X[provingground.FiniteDistribution[provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "feedBacks", "tail" : ": X[Vector[(FiniteDistribution[Term], Double)]]", "member" : "provingground.learning.FineDeducerStep.feedBacks", "link" : "provingground\/learning\/FineDeducerStep.html#feedBacks:X[Vector[(provingground.FiniteDistribution[provingground.HoTT.Term],Double)]]", "kind" : "lazy val"}, {"label" : "derivativeFDs", "tail" : ": X[Vector[(FiniteDistribution[Term], (FiniteDistribution[Term], FiniteDistribution[Typ[Term]]))]]", "member" : "provingground.learning.FineDeducerStep.derivativeFDs", "link" : "provingground\/learning\/FineDeducerStep.html#derivativeFDs:X[Vector[(provingground.FiniteDistribution[provingground.HoTT.Term],(provingground.FiniteDistribution[provingground.HoTT.Term],provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]))]]", "kind" : "lazy val"}, {"label" : "derFDX", "tail" : "(vec: Vector[(FiniteDistribution[Term], Int)]): X[Vector[(FiniteDistribution[Term], (FiniteDistribution[Term], FiniteDistribution[Typ[Term]]))]]", "member" : "provingground.learning.FineDeducerStep.derFDX", "link" : "provingground\/learning\/FineDeducerStep.html#derFDX(vec:Vector[(provingground.FiniteDistribution[provingground.HoTT.Term],Int)]):X[Vector[(provingground.FiniteDistribution[provingground.HoTT.Term],(provingground.FiniteDistribution[provingground.HoTT.Term],provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]))]]", "kind" : "def"}, {"label" : "tangSamples", "tail" : ": X[Vector[(FiniteDistribution[Term], Int)]]", "member" : "provingground.learning.FineDeducerStep.tangSamples", "link" : "provingground\/learning\/FineDeducerStep.html#tangSamples:X[Vector[(provingground.FiniteDistribution[provingground.HoTT.Term],Int)]]", "kind" : "lazy val"}, {"label" : "derivativeTypsFD", "tail" : "(tang: FiniteDistribution[Term], n: Int): X[FiniteDistribution[Typ[Term]]]", "member" : "provingground.learning.FineDeducerStep.derivativeTypsFD", "link" : "provingground\/learning\/FineDeducerStep.html#derivativeTypsFD(tang:provingground.FiniteDistribution[provingground.HoTT.Term],n:Int):X[provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]]", "kind" : "def"}, {"label" : "derivativeFD", "tail" : "(tang: FiniteDistribution[Term], n: Int): X[FiniteDistribution[Term]]", "member" : "provingground.learning.FineDeducerStep.derivativeFD", "link" : "provingground\/learning\/FineDeducerStep.html#derivativeFD(tang:provingground.FiniteDistribution[provingground.HoTT.Term],n:Int):X[provingground.FiniteDistribution[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "derivativePD", "tail" : "(tang: FiniteDistribution[Term]): ProbabilityDistribution[Term]", "member" : "provingground.learning.FineDeducerStep.derivativePD", "link" : "provingground\/learning\/FineDeducerStep.html#derivativePD(tang:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "thmFeedback", "tail" : ": X[TheoremFeedback]", "member" : "provingground.learning.FineDeducerStep.thmFeedback", "link" : "provingground\/learning\/FineDeducerStep.html#thmFeedback:X[provingground.learning.TheoremFeedback]", "kind" : "lazy val"}, {"label" : "nextTypFD", "tail" : ": X[FiniteDistribution[Typ[Term]]]", "member" : "provingground.learning.FineDeducerStep.nextTypFD", "link" : "provingground\/learning\/FineDeducerStep.html#nextTypFD:X[provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]]", "kind" : "lazy val"}, {"label" : "nextFD", "tail" : ": X[FiniteDistribution[Term]]", "member" : "provingground.learning.FineDeducerStep.nextFD", "link" : "provingground\/learning\/FineDeducerStep.html#nextFD:X[provingground.FiniteDistribution[provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "init", "tail" : ": ProbabilityDistribution[Term]", "member" : "provingground.learning.FineDeducerStep.init", "link" : "provingground\/learning\/FineDeducerStep.html#init:provingground.ProbabilityDistribution[provingground.HoTT.Term]", "kind" : "lazy val"}, {"member" : "provingground.learning.FineDeducerStep#<init>", "error" : "unsupported entity"}, {"label" : "samp", "tail" : ": TangSamples[X]", "member" : "provingground.learning.FineDeducerStep.samp", "link" : "provingground\/learning\/FineDeducerStep.html#samp:provingground.learning.TangSamples[X]", "kind" : "implicit val"}, {"label" : "param", "tail" : ": Param", "member" : "provingground.learning.FineDeducerStep.param", "link" : "provingground\/learning\/FineDeducerStep.html#param:provingground.learning.FineDeducerStep.Param", "kind" : "val"}, {"label" : "p", "tail" : ": FiniteDistribution[Term]", "member" : "provingground.learning.FineDeducerStep.p", "link" : "provingground\/learning\/FineDeducerStep.html#p:provingground.FiniteDistribution[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/FineDeducerStep.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/FineDeducerStep.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/FineDeducerStep.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/FineDeducerStep.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/FineDeducerStep.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/FineDeducerStep.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/FineDeducerStep.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/FineDeducerStep.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/FineDeducerStep.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/FineDeducerStep.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/FineDeducerStep.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/FineDeducerStep.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/FineDeducerStep.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/FineDeducerStep.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/FineDeducerStep.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/FineDeducerStep.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/FineDeducerStep.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/FineDeducerStep.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/FineDeducerStep.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "observable", "tail" : "(p: FiniteDistribution[Term], fd: FineDeducer, param: Param)(ms: MonixSamples): Observable[FiniteDistribution[Term]]", "member" : "provingground.learning.FineDeducerStep.observable", "link" : "provingground\/learning\/FineDeducerStep$.html#observable(p:provingground.FiniteDistribution[provingground.HoTT.Term],fd:provingground.learning.FineDeducer,param:provingground.learning.FineDeducerStep.Param)(implicitms:provingground.learning.MonixSamples):monix.reactive.Observable[provingground.FiniteDistribution[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "obserEv", "tail" : "(p: FiniteDistribution[Term], fd: FineDeducer, param: Param)(ms: MonixSamples): Observable[FineDeducerStep[Task]]", "member" : "provingground.learning.FineDeducerStep.obserEv", "link" : "provingground\/learning\/FineDeducerStep$.html#obserEv(p:provingground.FiniteDistribution[provingground.HoTT.Term],fd:provingground.learning.FineDeducer,param:provingground.learning.FineDeducerStep.Param)(implicitms:provingground.learning.MonixSamples):monix.reactive.Observable[provingground.learning.FineDeducerStep[monix.eval.Task]]", "kind" : "def"}, {"label" : "Param", "tail" : "", "member" : "provingground.learning.FineDeducerStep.Param", "link" : "provingground\/learning\/FineDeducerStep$.html#ParamextendsProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/FineDeducerStep$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/FineDeducerStep$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/FineDeducerStep$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/FineDeducerStep$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/FineDeducerStep$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/FineDeducerStep$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/FineDeducerStep$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/FineDeducerStep$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/FineDeducerStep$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/FineDeducerStep$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/FineDeducerStep$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/FineDeducerStep$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/FineDeducerStep$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/FineDeducerStep$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/FineDeducerStep$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/FineDeducerStep$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/FineDeducerStep$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/FineDeducerStep$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/FineDeducerStep$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/learning\/FineDeducerStep.html", "kind" : "object"}, {"name" : "provingground.learning.FineEvolver", "shortDescription" : "A refined evolver, i.e., evolution of terms and subclasses such as types.", "members_class" : [{"label" : "evolveTyp", "tail" : "(fd: FiniteDistribution[Term]): ProbabilityDistribution[Term]", "member" : "provingground.learning.FineEvolver.evolveTyp", "link" : "provingground\/learning\/FineEvolver.html#evolveTyp(fd:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "evolveWithTyp", "tail" : "(tp: Typ[Term])(fd: FiniteDistribution[Term]): ProbabilityDistribution[Term]", "member" : "provingground.learning.FineEvolver.evolveWithTyp", "link" : "provingground\/learning\/FineEvolver.html#evolveWithTyp(tp:provingground.HoTT.Typ[provingground.HoTT.Term])(fd:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "evolvTypFamilies", "tail" : "(fd: FiniteDistribution[Term]): ProbabilityDistribution[SomeFunc]", "member" : "provingground.learning.FineEvolver.evolvTypFamilies", "link" : "provingground\/learning\/FineEvolver.html#evolvTypFamilies(fd:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[provingground.learning.FineDeducer.SomeFunc]", "kind" : "def"}, {"label" : "evolvFuncs", "tail" : "(fd: FiniteDistribution[Term]): ProbabilityDistribution[SomeFunc]", "member" : "provingground.learning.FineEvolver.evolvFuncs", "link" : "provingground\/learning\/FineEvolver.html#evolvFuncs(fd:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[provingground.learning.FineDeducer.SomeFunc]", "kind" : "def"}, {"label" : "evolve", "tail" : "(fd: FiniteDistribution[Term]): ProbabilityDistribution[Term]", "member" : "provingground.learning.FineEvolver.evolve", "link" : "provingground\/learning\/FineEvolver.html#evolve(fd:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "varScaled", "tail" : ": FineEvolver", "member" : "provingground.learning.FineEvolver.varScaled", "link" : "provingground\/learning\/FineEvolver.html#varScaled:provingground.learning.FineEvolver", "kind" : "lazy val"}, {"member" : "provingground.learning.FineEvolver#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/FineEvolver.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/FineEvolver.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/FineEvolver.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/FineEvolver.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/FineEvolver.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/FineEvolver.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/FineEvolver.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/FineEvolver.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/FineEvolver.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/FineEvolver.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/FineEvolver.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/FineEvolver.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/FineEvolver.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/FineEvolver.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/FineEvolver.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/FineEvolver.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/FineEvolver.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/FineEvolver.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/FineEvolver.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/learning\/FineEvolver.html", "kind" : "class"}, {"name" : "provingground.learning.FineProverTasks", "shortDescription" : "A collection of functions to build provers;some are abstract methods for exploring, searching etc., while others generate terms and types, sometimes as derivatives.", "object" : "provingground\/learning\/FineProverTasks$.html", "members_object" : [{"label" : "theoremsExploreTraceTask", "tail" : "(fd: FiniteDistribution[Term], tv: TermEvolver, cutoff: Double, maxtime: FiniteDuration, decay: Double, scale: Double, vars: Vector[Term]): Task[(Vector[(Term, Vector[(Term, Double)], (Int, Double))], FiniteDistribution[Term], FiniteDistribution[Typ[Term]])]", "member" : "provingground.learning.FineProverTasks.theoremsExploreTraceTask", "link" : "provingground\/learning\/FineProverTasks$.html#theoremsExploreTraceTask(fd:provingground.FiniteDistribution[provingground.HoTT.Term],tv:provingground.learning.TermEvolver,cutoff:Double,maxtime:scala.concurrent.duration.FiniteDuration,decay:Double,scale:Double,vars:Vector[provingground.HoTT.Term]):monix.eval.Task[(Vector[(provingground.HoTT.Term,Vector[(provingground.HoTT.Term,Double)],(Int,Double))],provingground.FiniteDistribution[provingground.HoTT.Term],provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]])]", "kind" : "def"}, {"label" : "theoremSearchMemoTask", "tail" : "(fd: FiniteDistribution[Term], tv: TermEvolver, cutoff: Double, maxtime: FiniteDuration, goal: Typ[Term], termSet: Set[Term], typSet: Set[Typ[Term]], decay: Double, scale: Double, vars: Vector[Term]): Task[Option[(Term, Vector[Term], Set[Term], Set[Typ[Term]])]]", "member" : "provingground.learning.FineProverTasks.theoremSearchMemoTask", "link" : "provingground\/learning\/FineProverTasks$.html#theoremSearchMemoTask(fd:provingground.FiniteDistribution[provingground.HoTT.Term],tv:provingground.learning.TermEvolver,cutoff:Double,maxtime:scala.concurrent.duration.FiniteDuration,goal:provingground.HoTT.Typ[provingground.HoTT.Term],termSet:Set[provingground.HoTT.Term],typSet:Set[provingground.HoTT.Typ[provingground.HoTT.Term]],decay:Double,scale:Double,vars:Vector[provingground.HoTT.Term]):monix.eval.Task[Option[(provingground.HoTT.Term,Vector[provingground.HoTT.Term],Set[provingground.HoTT.Term],Set[provingground.HoTT.Typ[provingground.HoTT.Term]])]]", "kind" : "def"}, {"label" : "theoremSearchTraceTask", "tail" : "(fd: FiniteDistribution[Term], tv: TermEvolver, cutoff: Double, maxtime: FiniteDuration, goal: Typ[Term], decay: Double, scale: Double, vars: Vector[Term]): Task[Option[(Term, Vector[Term])]]", "member" : "provingground.learning.FineProverTasks.theoremSearchTraceTask", "link" : "provingground\/learning\/FineProverTasks$.html#theoremSearchTraceTask(fd:provingground.FiniteDistribution[provingground.HoTT.Term],tv:provingground.learning.TermEvolver,cutoff:Double,maxtime:scala.concurrent.duration.FiniteDuration,goal:provingground.HoTT.Typ[provingground.HoTT.Term],decay:Double,scale:Double,vars:Vector[provingground.HoTT.Term]):monix.eval.Task[Option[(provingground.HoTT.Term,Vector[provingground.HoTT.Term])]]", "kind" : "def"}, {"label" : "theoremsExploreTask", "tail" : "(fd: FiniteDistribution[Term], tv: TermEvolver, cutoff: Double, maxtime: FiniteDuration, decay: Double, scale: Double, vars: Vector[Term]): Task[Map[Typ[Term], Vector[(Term, (Int, Double))]]]", "member" : "provingground.learning.FineProverTasks.theoremsExploreTask", "link" : "provingground\/learning\/FineProverTasks$.html#theoremsExploreTask(fd:provingground.FiniteDistribution[provingground.HoTT.Term],tv:provingground.learning.TermEvolver,cutoff:Double,maxtime:scala.concurrent.duration.FiniteDuration,decay:Double,scale:Double,vars:Vector[provingground.HoTT.Term]):monix.eval.Task[Map[provingground.HoTT.Typ[provingground.HoTT.Term],Vector[(provingground.HoTT.Term,(Int,Double))]]]", "kind" : "def"}, {"label" : "theoremSearchTask", "tail" : "(fd: FiniteDistribution[Term], tv: TermEvolver, cutoff: Double, maxtime: FiniteDuration, goal: Typ[Term], decay: Double, scale: Double, vars: Vector[Term]): Task[Option[Term]]", "member" : "provingground.learning.FineProverTasks.theoremSearchTask", "link" : "provingground\/learning\/FineProverTasks$.html#theoremSearchTask(fd:provingground.FiniteDistribution[provingground.HoTT.Term],tv:provingground.learning.TermEvolver,cutoff:Double,maxtime:scala.concurrent.duration.FiniteDuration,goal:provingground.HoTT.Typ[provingground.HoTT.Term],decay:Double,scale:Double,vars:Vector[provingground.HoTT.Term]):monix.eval.Task[Option[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "dervecWeightedTraceTasks", "tail" : "(base: FiniteDistribution[Term], tv: TermEvolver, termsTask: Task[FiniteDistribution[Term]], typsTask: Task[FiniteDistribution[Typ[Term]]], maxtime: FiniteDuration, cutoff: Double, scale: Double, trace: Vector[(Term, Double)], vars: Vector[Term]): Task[Vector[Task[(FiniteDistribution[Term], Vector[(Term, Double)])]]]", "member" : "provingground.learning.FineProverTasks.dervecWeightedTraceTasks", "link" : "provingground\/learning\/FineProverTasks$.html#dervecWeightedTraceTasks(base:provingground.FiniteDistribution[provingground.HoTT.Term],tv:provingground.learning.TermEvolver,termsTask:monix.eval.Task[provingground.FiniteDistribution[provingground.HoTT.Term]],typsTask:monix.eval.Task[provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]],maxtime:scala.concurrent.duration.FiniteDuration,cutoff:Double,scale:Double,trace:Vector[(provingground.HoTT.Term,Double)],vars:Vector[provingground.HoTT.Term]):monix.eval.Task[Vector[monix.eval.Task[(provingground.FiniteDistribution[provingground.HoTT.Term],Vector[(provingground.HoTT.Term,Double)])]]]", "kind" : "def"}, {"label" : "dervecMemoTasks", "tail" : "(base: FiniteDistribution[Term], tv: TermEvolver, termsTask: Task[FiniteDistribution[Term]], typsTask: Task[FiniteDistribution[Typ[Term]]], maxtime: FiniteDuration, cutoff: Double, scale: Double, trace: Vector[Term], termSet: Set[Term], typSet: Set[Typ[Term]], vars: Vector[Term]): Task[Vector[Task[(FiniteDistribution[Term], Vector[Term], Set[Term], Set[Typ[Term]])]]]", "member" : "provingground.learning.FineProverTasks.dervecMemoTasks", "link" : "provingground\/learning\/FineProverTasks$.html#dervecMemoTasks(base:provingground.FiniteDistribution[provingground.HoTT.Term],tv:provingground.learning.TermEvolver,termsTask:monix.eval.Task[provingground.FiniteDistribution[provingground.HoTT.Term]],typsTask:monix.eval.Task[provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]],maxtime:scala.concurrent.duration.FiniteDuration,cutoff:Double,scale:Double,trace:Vector[provingground.HoTT.Term],termSet:Set[provingground.HoTT.Term],typSet:Set[provingground.HoTT.Typ[provingground.HoTT.Term]],vars:Vector[provingground.HoTT.Term]):monix.eval.Task[Vector[monix.eval.Task[(provingground.FiniteDistribution[provingground.HoTT.Term],Vector[provingground.HoTT.Term],Set[provingground.HoTT.Term],Set[provingground.HoTT.Typ[provingground.HoTT.Term]])]]]", "kind" : "def"}, {"label" : "dervecTraceTasks", "tail" : "(base: FiniteDistribution[Term], tv: TermEvolver, termsTask: Task[FiniteDistribution[Term]], typsTask: Task[FiniteDistribution[Typ[Term]]], maxtime: FiniteDuration, cutoff: Double, scale: Double, trace: Vector[Term], vars: Vector[Term]): Task[Vector[Task[(FiniteDistribution[Term], Vector[Term])]]]", "member" : "provingground.learning.FineProverTasks.dervecTraceTasks", "link" : "provingground\/learning\/FineProverTasks$.html#dervecTraceTasks(base:provingground.FiniteDistribution[provingground.HoTT.Term],tv:provingground.learning.TermEvolver,termsTask:monix.eval.Task[provingground.FiniteDistribution[provingground.HoTT.Term]],typsTask:monix.eval.Task[provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]],maxtime:scala.concurrent.duration.FiniteDuration,cutoff:Double,scale:Double,trace:Vector[provingground.HoTT.Term],vars:Vector[provingground.HoTT.Term]):monix.eval.Task[Vector[monix.eval.Task[(provingground.FiniteDistribution[provingground.HoTT.Term],Vector[provingground.HoTT.Term])]]]", "kind" : "def"}, {"label" : "dervecTasks", "tail" : "(base: FiniteDistribution[Term], tv: TermEvolver, termsTask: Task[FiniteDistribution[Term]], typsTask: Task[FiniteDistribution[Typ[Term]]], maxtime: FiniteDuration, cutoff: Double, scale: Double, vars: Vector[Term]): Task[Vector[Task[FiniteDistribution[Term]]]]", "member" : "provingground.learning.FineProverTasks.dervecTasks", "link" : "provingground\/learning\/FineProverTasks$.html#dervecTasks(base:provingground.FiniteDistribution[provingground.HoTT.Term],tv:provingground.learning.TermEvolver,termsTask:monix.eval.Task[provingground.FiniteDistribution[provingground.HoTT.Term]],typsTask:monix.eval.Task[provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]],maxtime:scala.concurrent.duration.FiniteDuration,cutoff:Double,scale:Double,vars:Vector[provingground.HoTT.Term]):monix.eval.Task[Vector[monix.eval.Task[provingground.FiniteDistribution[provingground.HoTT.Term]]]]", "kind" : "def"}, {"label" : "termdistDerTask", "tail" : "(fd: FiniteDistribution[Term], tfd: FiniteDistribution[Term], tv: TermEvolver, cutoff: Double, maxtime: FiniteDuration, vars: Vector[Term]): Task[FiniteDistribution[Term]]", "member" : "provingground.learning.FineProverTasks.termdistDerTask", "link" : "provingground\/learning\/FineProverTasks$.html#termdistDerTask(fd:provingground.FiniteDistribution[provingground.HoTT.Term],tfd:provingground.FiniteDistribution[provingground.HoTT.Term],tv:provingground.learning.TermEvolver,cutoff:Double,maxtime:scala.concurrent.duration.FiniteDuration,vars:Vector[provingground.HoTT.Term]):monix.eval.Task[provingground.FiniteDistribution[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "termdistTask", "tail" : "(fd: FiniteDistribution[Term], tv: TermEvolver, cutoff: Double, maxtime: FiniteDuration, vars: Vector[Term]): Task[FiniteDistribution[Term]]", "member" : "provingground.learning.FineProverTasks.termdistTask", "link" : "provingground\/learning\/FineProverTasks$.html#termdistTask(fd:provingground.FiniteDistribution[provingground.HoTT.Term],tv:provingground.learning.TermEvolver,cutoff:Double,maxtime:scala.concurrent.duration.FiniteDuration,vars:Vector[provingground.HoTT.Term]):monix.eval.Task[provingground.FiniteDistribution[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "typdistTask", "tail" : "(fd: FiniteDistribution[Term], tv: TermEvolver, cutoff: Double, maxtime: FiniteDuration, vars: Vector[Term]): Task[FiniteDistribution[Typ[Term]]]", "member" : "provingground.learning.FineProverTasks.typdistTask", "link" : "provingground\/learning\/FineProverTasks$.html#typdistTask(fd:provingground.FiniteDistribution[provingground.HoTT.Term],tv:provingground.learning.TermEvolver,cutoff:Double,maxtime:scala.concurrent.duration.FiniteDuration,vars:Vector[provingground.HoTT.Term]):monix.eval.Task[provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/FineProverTasks$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/FineProverTasks$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/FineProverTasks$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/FineProverTasks$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/FineProverTasks$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/FineProverTasks$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/FineProverTasks$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/FineProverTasks$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/FineProverTasks$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/FineProverTasks$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/FineProverTasks$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/FineProverTasks$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/FineProverTasks$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/FineProverTasks$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/FineProverTasks$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/FineProverTasks$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/FineProverTasks$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/FineProverTasks$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/FineProverTasks$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.learning.FiniteDistributionLearner", "shortDescription" : "A combinator for learning systems with state finite distributions on vertices.", "object" : "provingground\/learning\/FiniteDistributionLearner$.html", "members_object" : [{"label" : "sampleV", "tail" : "(N: Double): AdjDiffbleFunction[(FiniteDistribution[M], FiniteDistribution[V]), (FiniteDistribution[M], FiniteDistribution[V])]", "member" : "provingground.learning.FiniteDistributionLearner.sampleV", "link" : "provingground\/learning\/FiniteDistributionLearner$.html#sampleV[M,V](N:Double):provingground.learning.AdjDiffbleFunction[(provingground.FiniteDistribution[M],provingground.FiniteDistribution[V]),(provingground.FiniteDistribution[M],provingground.FiniteDistribution[V])]", "kind" : "def"}, {"label" : "projectV", "tail" : "(): AdjDiffbleFunction[(FiniteDistribution[M], X), X]", "member" : "provingground.learning.FiniteDistributionLearner.projectV", "link" : "provingground\/learning\/FiniteDistributionLearner$.html#projectV[M,X]:provingground.learning.AdjDiffbleFunction[(provingground.FiniteDistribution[M],X),X]", "kind" : "def"}, {"label" : "ProjectV", "tail" : "", "member" : "provingground.learning.FiniteDistributionLearner.ProjectV", "link" : "provingground\/learning\/FiniteDistributionLearner$.html#ProjectV[M,X]extendsAdjDiffbleFunction[(provingground.FiniteDistribution[M],X),X]withProductwithSerializable", "kind" : "case class"}, {"label" : "extendM", "tail" : "(fn: AdjDiffbleFunction[(FiniteDistribution[M], X), X]): AdjDiffbleFunction[(FiniteDistribution[M], X), (FiniteDistribution[M], X)]", "member" : "provingground.learning.FiniteDistributionLearner.extendM", "link" : "provingground\/learning\/FiniteDistributionLearner$.html#extendM[M,X](fn:provingground.learning.AdjDiffbleFunction[(provingground.FiniteDistribution[M],X),X]):provingground.learning.AdjDiffbleFunction[(provingground.FiniteDistribution[M],X),(provingground.FiniteDistribution[M],X)]", "kind" : "def"}, {"label" : "ExtendM", "tail" : "", "member" : "provingground.learning.FiniteDistributionLearner.ExtendM", "link" : "provingground\/learning\/FiniteDistributionLearner$.html#ExtendM[M,X]extendsAdjDiffbleFunction[(provingground.FiniteDistribution[M],X),(provingground.FiniteDistribution[M],X)]withProductwithSerializable", "kind" : "case class"}, {"label" : "weightedDyn", "tail" : "(arg0: LinearStructure[X], arg1: InnerProduct[X]): (M, AdjDiffbleFunction[X, X]) ⇒ AdjDiffbleFunction[(FiniteDistribution[M], X), X]", "member" : "provingground.learning.FiniteDistributionLearner.weightedDyn", "link" : "provingground\/learning\/FiniteDistributionLearner$.html#weightedDyn[M,X](implicitevidence$1:provingground.LinearStructure[X],implicitevidence$2:provingground.learning.Collections.InnerProduct[X]):(M,provingground.learning.AdjDiffbleFunction[X,X])=>provingground.learning.AdjDiffbleFunction[(provingground.FiniteDistribution[M],X),X]", "kind" : "def"}, {"label" : "NewVertex", "tail" : "", "member" : "provingground.learning.FiniteDistributionLearner.NewVertex", "link" : "provingground\/learning\/FiniteDistributionLearner$.html#NewVertex[V]extendsAdjDiffbleFunction[(Double,provingground.FiniteDistribution[V]),provingground.FiniteDistribution[V]]withProductwithSerializable", "kind" : "case class"}, {"label" : "CombinationFn", "tail" : "", "member" : "provingground.learning.FiniteDistributionLearner.CombinationFn", "link" : "provingground\/learning\/FiniteDistributionLearner$.html#CombinationFn[V]extendsAdjDiffbleFunction[provingground.FiniteDistribution[V],provingground.FiniteDistribution[V]]withProductwithSerializable", "kind" : "case class"}, {"label" : "MoveFn", "tail" : "", "member" : "provingground.learning.FiniteDistributionLearner.MoveFn", "link" : "provingground\/learning\/FiniteDistributionLearner$.html#MoveFn[V,W]extendsAdjDiffbleFunction[provingground.FiniteDistribution[V],provingground.FiniteDistribution[W]]withProductwithSerializable", "kind" : "case class"}, {"label" : "purgeFD", "tail" : "(size: Int)(fd: FiniteDistribution[V]): FiniteDistribution[V]", "member" : "provingground.learning.FiniteDistributionLearner.purgeFD", "link" : "provingground\/learning\/FiniteDistributionLearner$.html#purgeFD[V](size:Int)(fd:provingground.FiniteDistribution[V]):provingground.FiniteDistribution[V]", "kind" : "def"}, {"label" : "NormalizeFD", "tail" : "", "member" : "provingground.learning.FiniteDistributionLearner.NormalizeFD", "link" : "provingground\/learning\/FiniteDistributionLearner$.html#NormalizeFD[V]extendsAdjDiffbleFunction[provingground.FiniteDistribution[V],provingground.FiniteDistribution[V]]withProductwithSerializable", "kind" : "case class"}, {"label" : "sample", "tail" : "(N: Double): AdjDiffbleFunction[FiniteDistribution[X], FiniteDistribution[X]]", "member" : "provingground.learning.FiniteDistributionLearner.sample", "link" : "provingground\/learning\/FiniteDistributionLearner$.html#sample[X](N:Double):provingground.learning.AdjDiffbleFunction[provingground.FiniteDistribution[X],provingground.FiniteDistribution[X]]", "kind" : "def"}, {"label" : "Sample", "tail" : "", "member" : "provingground.learning.FiniteDistributionLearner.Sample", "link" : "provingground\/learning\/FiniteDistributionLearner$.html#Sample[X]extendsAdjDiffbleFunction.FormalExtension[provingground.FiniteDistribution[X]]withProductwithSerializable", "kind" : "case class"}, {"label" : "PtwiseProd", "tail" : "", "member" : "provingground.learning.FiniteDistributionLearner.PtwiseProd", "link" : "provingground\/learning\/FiniteDistributionLearner$.html#PtwiseProd[V]extendsAdjDiffbleFunction[provingground.FiniteDistribution[V],provingground.FiniteDistribution[V]]withProductwithSerializable", "kind" : "case class"}, {"label" : "Evaluate", "tail" : "", "member" : "provingground.learning.FiniteDistributionLearner.Evaluate", "link" : "provingground\/learning\/FiniteDistributionLearner$.html#Evaluate[V]extendsAdjDiffbleFunction[provingground.FiniteDistribution[V],Double]withProductwithSerializable", "kind" : "case class"}, {"label" : "Atom", "tail" : "", "member" : "provingground.learning.FiniteDistributionLearner.Atom", "link" : "provingground\/learning\/FiniteDistributionLearner$.html#Atom[V]extendsAdjDiffbleFunction[Double,provingground.FiniteDistribution[V]]withProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/FiniteDistributionLearner$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/FiniteDistributionLearner$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/FiniteDistributionLearner$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/FiniteDistributionLearner$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/FiniteDistributionLearner$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/FiniteDistributionLearner$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/FiniteDistributionLearner$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/FiniteDistributionLearner$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/FiniteDistributionLearner$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/FiniteDistributionLearner$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/FiniteDistributionLearner$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/FiniteDistributionLearner$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/FiniteDistributionLearner$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/FiniteDistributionLearner$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/FiniteDistributionLearner$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/FiniteDistributionLearner$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/FiniteDistributionLearner$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/FiniteDistributionLearner$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/FiniteDistributionLearner$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.learning.GeneratorData", "shortDescription" : "", "members_case class" : [{"member" : "provingground.learning.GeneratorData#<init>", "error" : "unsupported entity"}, {"label" : "varsToResolve", "tail" : ": Vector[RandomVar[_]]", "member" : "provingground.learning.GeneratorData.varsToResolve", "link" : "provingground\/learning\/GeneratorData.html#varsToResolve:Vector[provingground.learning.RandomVar[_]]", "kind" : "val"}, {"label" : "nodeCoeffs", "tail" : ": Vector[(GeneratorNodeFamily[_ <: HList, _], V)]", "member" : "provingground.learning.GeneratorData.nodeCoeffs", "link" : "provingground\/learning\/GeneratorData.html#nodeCoeffs:Vector[(provingground.learning.GeneratorNodeFamily[_<:shapeless.HList,_],V)]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/GeneratorData.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/GeneratorData.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/GeneratorData.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/GeneratorData.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/GeneratorData.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/GeneratorData.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/GeneratorData.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/GeneratorData.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/GeneratorData.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/GeneratorData.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/GeneratorData.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/GeneratorData.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/GeneratorData.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/GeneratorData.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/GeneratorData.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/GeneratorData.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/learning\/GeneratorData.html", "kind" : "case class"}, {"name" : "provingground.learning.GeneratorEquations", "shortDescription" : "", "members_case class" : [{"label" : "pairEventEquations", "tail" : ": Set[Equation]", "member" : "provingground.learning.GeneratorEquations.pairEventEquations", "link" : "provingground\/learning\/GeneratorEquations.html#pairEventEquations:Set[provingground.learning.GeneratorVariables.Equation]", "kind" : "val"}, {"label" : "eventEquations", "tail" : ": Set[Equation]", "member" : "provingground.learning.GeneratorEquations.eventEquations", "link" : "provingground\/learning\/GeneratorEquations.html#eventEquations:Set[provingground.learning.GeneratorVariables.Equation]", "kind" : "val"}, {"label" : "pairEventTotal", "tail" : "(ev: PairEvent[X1, X2, Y]): Expression", "member" : "provingground.learning.GeneratorEquations.pairEventTotal", "link" : "provingground\/learning\/GeneratorEquations.html#pairEventTotal[X1,X2,Y](ev:provingground.learning.GeneratorVariables.PairEvent[X1,X2,Y]):provingground.learning.GeneratorVariables.Expression", "kind" : "def"}, {"label" : "eventTotal", "tail" : "(ev: Event[X, Y]): Expression", "member" : "provingground.learning.GeneratorEquations.eventTotal", "link" : "provingground\/learning\/GeneratorEquations.html#eventTotal[X,Y](ev:provingground.learning.GeneratorVariables.Event[X,Y]):provingground.learning.GeneratorVariables.Expression", "kind" : "def"}, {"label" : "totalProbEquations", "tail" : ": Set[Equation]", "member" : "provingground.learning.GeneratorEquations.totalProbEquations", "link" : "provingground\/learning\/GeneratorEquations.html#totalProbEquations:Set[provingground.learning.GeneratorVariables.Equation]", "kind" : "val"}, {"label" : "finalProbTotals", "tail" : ": Set[Expression]", "member" : "provingground.learning.GeneratorEquations.finalProbTotals", "link" : "provingground\/learning\/GeneratorEquations.html#finalProbTotals:Set[provingground.learning.GeneratorVariables.Expression]", "kind" : "val"}, {"label" : "finalProbVars", "tail" : ": Map[RandomVar[Any], Set[Expression]]", "member" : "provingground.learning.GeneratorEquations.finalProbVars", "link" : "provingground\/learning\/GeneratorEquations.html#finalProbVars:Map[provingground.learning.RandomVar[Any],Set[provingground.learning.GeneratorVariables.Expression]]", "kind" : "val"}, {"label" : "nodeEquationTerms", "tail" : "(node: GeneratorNode[Y]): (Set[EquationTerm], Set[Equation])", "member" : "provingground.learning.GeneratorEquations.nodeEquationTerms", "link" : "provingground\/learning\/GeneratorEquations.html#nodeEquationTerms[Y](node:provingground.learning.GeneratorNode[Y]):(Set[provingground.learning.GeneratorVariables.EquationTerm],Set[provingground.learning.GeneratorVariables.Equation])", "kind" : "def"}, {"label" : "nodeCoeffsEquationTerms", "tail" : "(nodeCoeffs: NodeCoeffs[State, Boat, Double, Dom, Y]): (Set[EquationTerm], Set[Equation])", "member" : "provingground.learning.GeneratorEquations.nodeCoeffsEquationTerms", "link" : "provingground\/learning\/GeneratorEquations.html#nodeCoeffsEquationTerms[Dom<:shapeless.HList,Y](nodeCoeffs:provingground.learning.NodeCoeffs[State,Boat,Double,Dom,Y]):(Set[provingground.learning.GeneratorVariables.EquationTerm],Set[provingground.learning.GeneratorVariables.Equation])", "kind" : "def"}, {"label" : "nodeCoeffsEquations", "tail" : "(nodeCoeffs: NodeCoeffs[State, Boat, Double, Dom, Y]): Set[Equation]", "member" : "provingground.learning.GeneratorEquations.nodeCoeffsEquations", "link" : "provingground\/learning\/GeneratorEquations.html#nodeCoeffsEquations[Dom<:shapeless.HList,Y](nodeCoeffs:provingground.learning.NodeCoeffs[State,Boat,Double,Dom,Y]):Set[provingground.learning.GeneratorVariables.Equation]", "kind" : "def"}, {"label" : "nodeCoeffSeqEquations", "tail" : "(ncs: NodeCoeffSeq[State, Boat, Double]): Set[Equation]", "member" : "provingground.learning.GeneratorEquations.nodeCoeffSeqEquations", "link" : "provingground\/learning\/GeneratorEquations.html#nodeCoeffSeqEquations(ncs:provingground.learning.NodeCoeffSeq[State,Boat,Double]):Set[provingground.learning.GeneratorVariables.Equation]", "kind" : "def"}, {"label" : "equations", "tail" : ": Set[Equation]", "member" : "provingground.learning.GeneratorEquations.equations", "link" : "provingground\/learning\/GeneratorEquations.html#equations:Set[provingground.learning.GeneratorVariables.Equation]", "kind" : "lazy val"}, {"label" : "recurrenceEquations", "tail" : ": Set[Equation]", "member" : "provingground.learning.GeneratorEquations.recurrenceEquations", "link" : "provingground\/learning\/GeneratorEquations.html#recurrenceEquations:Set[provingground.learning.GeneratorVariables.Equation]", "kind" : "lazy val"}, {"label" : "finalListProb", "tail" : "(rvl: RandomVarList[Dom]): Set[(Dom, Expression)]", "member" : "provingground.learning.GeneratorEquations.finalListProb", "link" : "provingground\/learning\/GeneratorEquations.html#finalListProb[Dom<:shapeless.HList](rvl:provingground.learning.RandomVarList[Dom]):Set[(Dom,provingground.learning.GeneratorVariables.Expression)]", "kind" : "def"}, {"label" : "initProbs", "tail" : "(rv: RandomVar[Y]): Set[(Y, InitialVal[_])]", "member" : "provingground.learning.GeneratorEquations.initProbs", "link" : "provingground\/learning\/GeneratorEquations.html#initProbs[Y](rv:provingground.learning.RandomVar[Y]):Set[(Y,provingground.learning.GeneratorVariables.InitialVal[_])]", "kind" : "def"}, {"label" : "finalProbs", "tail" : "(rv: RandomVar[Y]): Set[(Y, FinalVal[_])]", "member" : "provingground.learning.GeneratorEquations.finalProbs", "link" : "provingground\/learning\/GeneratorEquations.html#finalProbs[Y](rv:provingground.learning.RandomVar[Y]):Set[(Y,provingground.learning.GeneratorVariables.FinalVal[_])]", "kind" : "def"}, {"label" : "elemVars", "tail" : ": Map[RandomVar[_], Set[Elem[_]]]", "member" : "provingground.learning.GeneratorEquations.elemVars", "link" : "provingground\/learning\/GeneratorEquations.html#elemVars:Map[provingground.learning.RandomVar[_],Set[provingground.learning.GeneratorVariables.Elem[_]]]", "kind" : "val"}, {"label" : "vars", "tail" : ": Set[Variable[_]]", "member" : "provingground.learning.GeneratorEquations.vars", "link" : "provingground\/learning\/GeneratorEquations.html#vars:Set[provingground.learning.GeneratorVariables.Variable[_]]", "kind" : "val"}, {"member" : "provingground.learning.GeneratorEquations#<init>", "error" : "unsupported entity"}, {"label" : "initState", "tail" : ": State", "member" : "provingground.learning.GeneratorEquations.initState", "link" : "provingground\/learning\/GeneratorEquations.html#initState:State", "kind" : "val"}, {"label" : "nodeCoeffSeq", "tail" : ": NodeCoeffSeq[State, Boat, Double]", "member" : "provingground.learning.GeneratorEquations.nodeCoeffSeq", "link" : "provingground\/learning\/GeneratorEquations.html#nodeCoeffSeq:provingground.learning.NodeCoeffSeq[State,Boat,Double]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/GeneratorEquations.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/GeneratorEquations.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/GeneratorEquations.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/GeneratorEquations.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/GeneratorEquations.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/GeneratorEquations.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/GeneratorEquations.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/GeneratorEquations.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/GeneratorEquations.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/GeneratorEquations.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/GeneratorEquations.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/GeneratorEquations.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/GeneratorEquations.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/GeneratorEquations.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/GeneratorEquations.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/GeneratorEquations.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/learning\/GeneratorEquations.html", "kind" : "case class"}, {"name" : "provingground.learning.GeneratorNode", "members_trait" : [{"label" : "outputFamily", "tail" : ": RandomVar[O]", "member" : "provingground.learning.GeneratorNode.outputFamily", "link" : "provingground\/learning\/GeneratorNode.html#outputFamily:provingground.learning.RandomVar[O]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/GeneratorNode.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/GeneratorNode.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/GeneratorNode.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/GeneratorNode.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/GeneratorNode.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/GeneratorNode.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/GeneratorNode.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/GeneratorNode.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/GeneratorNode.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/GeneratorNode.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/GeneratorNode.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/GeneratorNode.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/GeneratorNode.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/GeneratorNode.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/GeneratorNode.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/GeneratorNode.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/GeneratorNode.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/GeneratorNode.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/GeneratorNode.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "|", "tail" : "(condition: Sort[S, T], output: RandomVar[T]): GeneratorNode[T]", "member" : "provingground.learning.GeneratorNode.|", "link" : "provingground\/learning\/GeneratorNode.html#|[S>:O,T](condition:provingground.learning.Sort[S,T],output:provingground.learning.RandomVar[T]):provingground.learning.GeneratorNode[T]", "kind" : "abstract def"}, {"label" : "output", "tail" : ": RandomVar[O]", "member" : "provingground.learning.GeneratorNode.output", "link" : "provingground\/learning\/GeneratorNode.html#output:provingground.learning.RandomVar[O]", "kind" : "abstract val"}], "shortDescription" : "A formal node for describing recursive generation.", "object" : "provingground\/learning\/GeneratorNode$.html", "members_object" : [{"label" : "ComplexIsland", "tail" : "", "member" : "provingground.learning.GeneratorNode.ComplexIsland", "link" : "provingground\/learning\/GeneratorNode$.html#ComplexIsland[O,+Y,InitState,Boat,V]extendsRecursiveGeneratorNode[InitState,Boat,Y]withProductwithSerializable", "kind" : "case class"}, {"label" : "Island", "tail" : "", "member" : "provingground.learning.GeneratorNode.Island", "link" : "provingground\/learning\/GeneratorNode$.html#Island[+Y,InitState,O,Boat]extendsRecursiveGeneratorNode[InitState,Boat,Y]withProductwithSerializable", "kind" : "case class"}, {"label" : "RecursiveThenCondition", "tail" : "", "member" : "provingground.learning.GeneratorNode.RecursiveThenCondition", "link" : "provingground\/learning\/GeneratorNode$.html#RecursiveThenCondition[State,Boat,O,Y]extendsRecursiveGeneratorNode[State,Boat,Y]withGeneratorNode.ThenCondition[O,Y]withProductwithSerializable", "kind" : "case class"}, {"label" : "BaseThenCondition", "tail" : "", "member" : "provingground.learning.GeneratorNode.BaseThenCondition", "link" : "provingground\/learning\/GeneratorNode$.html#BaseThenCondition[V<:shapeless.HList,O,Y]extendsBaseGeneratorNode[V,Y]withGeneratorNode.ThenCondition[O,Y]withProductwithSerializable", "kind" : "case class"}, {"label" : "ThenCondition", "tail" : "", "member" : "provingground.learning.GeneratorNode.ThenCondition", "link" : "provingground\/learning\/GeneratorNode$.html#ThenCondition[O,Y]extendsGeneratorNode[Y]", "kind" : "sealed trait"}, {"label" : "FlatMapOpt", "tail" : "", "member" : "provingground.learning.GeneratorNode.FlatMapOpt", "link" : "provingground\/learning\/GeneratorNode$.html#FlatMapOpt[X,Y]extendsBaseGeneratorNode[X::shapeless.HNil,Y]withProductwithSerializable", "kind" : "case class"}, {"label" : "FlatMap", "tail" : "", "member" : "provingground.learning.GeneratorNode.FlatMap", "link" : "provingground\/learning\/GeneratorNode$.html#FlatMap[X,Y]extendsBaseGeneratorNode[X::shapeless.HNil,Y]withProductwithSerializable", "kind" : "case class"}, {"label" : "ZipFlatMap", "tail" : "", "member" : "provingground.learning.GeneratorNode.ZipFlatMap", "link" : "provingground\/learning\/GeneratorNode$.html#ZipFlatMap[X1,X2,Y]extendsBaseGeneratorNode[X1::shapeless.HNil,Y]withProductwithSerializable", "kind" : "case class"}, {"label" : "FiberProductMap", "tail" : "", "member" : "provingground.learning.GeneratorNode.FiberProductMap", "link" : "provingground\/learning\/GeneratorNode$.html#FiberProductMap[X1,X2,Z,Y]extendsBaseGeneratorNode[X1::shapeless.HNil,Y]withProductwithSerializable", "kind" : "case class"}, {"label" : "ZipMapOpt", "tail" : "", "member" : "provingground.learning.GeneratorNode.ZipMapOpt", "link" : "provingground\/learning\/GeneratorNode$.html#ZipMapOpt[X1,X2,Y]extendsBaseGeneratorNode[X1::X2::shapeless.HNil,Y]withProductwithSerializable", "kind" : "case class"}, {"label" : "ZipMap", "tail" : "", "member" : "provingground.learning.GeneratorNode.ZipMap", "link" : "provingground\/learning\/GeneratorNode$.html#ZipMap[X1,X2,Y]extendsBaseGeneratorNode[X1::X2::shapeless.HNil,Y]withProductwithSerializable", "kind" : "case class"}, {"label" : "MapOpt", "tail" : "", "member" : "provingground.learning.GeneratorNode.MapOpt", "link" : "provingground\/learning\/GeneratorNode$.html#MapOpt[X,Y]extendsBaseGeneratorNode[X::shapeless.HNil,Y]withProductwithSerializable", "kind" : "case class"}, {"label" : "Map", "tail" : "", "member" : "provingground.learning.GeneratorNode.Map", "link" : "provingground\/learning\/GeneratorNode$.html#Map[X,Y]extendsBaseGeneratorNode[X::shapeless.HNil,Y]withProductwithSerializable", "kind" : "case class"}, {"label" : "Atom", "tail" : "", "member" : "provingground.learning.GeneratorNode.Atom", "link" : "provingground\/learning\/GeneratorNode$.html#Atom[X]extendsBaseGeneratorNode[X::shapeless.HNil,X]withProductwithSerializable", "kind" : "case class"}, {"label" : "Init", "tail" : "", "member" : "provingground.learning.GeneratorNode.Init", "link" : "provingground\/learning\/GeneratorNode$.html#Init[X]extendsBaseGeneratorNode[X::shapeless.HNil,X]withProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/GeneratorNode$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/GeneratorNode$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/GeneratorNode$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/GeneratorNode$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/GeneratorNode$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/GeneratorNode$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/GeneratorNode$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/GeneratorNode$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/GeneratorNode$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/GeneratorNode$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/GeneratorNode$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/GeneratorNode$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/GeneratorNode$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/GeneratorNode$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/GeneratorNode$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/GeneratorNode$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/GeneratorNode$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/GeneratorNode$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/GeneratorNode$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/learning\/GeneratorNode.html", "kind" : "trait"}, {"name" : "provingground.learning.GeneratorNodeFamily", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/GeneratorNodeFamily.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/GeneratorNodeFamily.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/GeneratorNodeFamily.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/GeneratorNodeFamily.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/GeneratorNodeFamily.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/GeneratorNodeFamily.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/GeneratorNodeFamily.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/GeneratorNodeFamily.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/GeneratorNodeFamily.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/GeneratorNodeFamily.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/GeneratorNodeFamily.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/GeneratorNodeFamily.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/GeneratorNodeFamily.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/GeneratorNodeFamily.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/GeneratorNodeFamily.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/GeneratorNodeFamily.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/GeneratorNodeFamily.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/GeneratorNodeFamily.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/GeneratorNodeFamily.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "outputFamily", "tail" : ": RandomVarFamily[Dom, O]", "member" : "provingground.learning.GeneratorNodeFamily.outputFamily", "link" : "provingground\/learning\/GeneratorNodeFamily.html#outputFamily:provingground.learning.RandomVarFamily[Dom,O]", "kind" : "abstract val"}], "shortDescription" : "Family of (recursive) generation functions, either a function giving a familyor a single {{GeneratorNode}}, which is the interesting case.", "object" : "provingground\/learning\/GeneratorNodeFamily$.html", "members_object" : [{"label" : "BasePiOpt", "tail" : "", "member" : "provingground.learning.GeneratorNodeFamily.BasePiOpt", "link" : "provingground\/learning\/GeneratorNodeFamily$.html#BasePiOpt[Dom<:shapeless.HList,I<:shapeless.HList,+O]extendsBaseGeneratorNodeFamily[Dom,O]withGeneratorNodeFamily.PiOpt[Dom,O]withProductwithSerializable", "kind" : "case class"}, {"label" : "RecPiOpt", "tail" : "", "member" : "provingground.learning.GeneratorNodeFamily.RecPiOpt", "link" : "provingground\/learning\/GeneratorNodeFamily$.html#RecPiOpt[State,Boat,Dom<:shapeless.HList,+O]extendsRecursiveGeneratorNodeFamily[Dom,State,Boat,O]withGeneratorNodeFamily.PiOpt[Dom,O]withProductwithSerializable", "kind" : "case class"}, {"label" : "PiOpt", "tail" : "", "member" : "provingground.learning.GeneratorNodeFamily.PiOpt", "link" : "provingground\/learning\/GeneratorNodeFamily$.html#PiOpt[Dom<:shapeless.HList,+O]extendsGeneratorNodeFamily[Dom,O]", "kind" : "sealed trait"}, {"label" : "BasePi", "tail" : "", "member" : "provingground.learning.GeneratorNodeFamily.BasePi", "link" : "provingground\/learning\/GeneratorNodeFamily$.html#BasePi[Dom<:shapeless.HList,I<:shapeless.HList,+O]extendsBaseGeneratorNodeFamily[Dom,O]withGeneratorNodeFamily.Pi[Dom,O]withProductwithSerializable", "kind" : "case class"}, {"label" : "RecPi", "tail" : "", "member" : "provingground.learning.GeneratorNodeFamily.RecPi", "link" : "provingground\/learning\/GeneratorNodeFamily$.html#RecPi[State,Boat,Dom<:shapeless.HList,+O]extendsRecursiveGeneratorNodeFamily[Dom,State,Boat,O]withGeneratorNodeFamily.Pi[Dom,O]withProductwithSerializable", "kind" : "case class"}, {"label" : "Pi", "tail" : "", "member" : "provingground.learning.GeneratorNodeFamily.Pi", "link" : "provingground\/learning\/GeneratorNodeFamily$.html#Pi[Dom<:shapeless.HList,+O]extendsGeneratorNodeFamily[Dom,O]", "kind" : "sealed trait"}, {"label" : "Value", "tail" : "", "member" : "provingground.learning.GeneratorNodeFamily.Value", "link" : "provingground\/learning\/GeneratorNodeFamily$.html#Value[Dom<:shapeless.HList,O,V]extendsProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/GeneratorNodeFamily$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/GeneratorNodeFamily$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/GeneratorNodeFamily$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/GeneratorNodeFamily$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/GeneratorNodeFamily$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/GeneratorNodeFamily$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/GeneratorNodeFamily$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/GeneratorNodeFamily$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/GeneratorNodeFamily$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/GeneratorNodeFamily$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/GeneratorNodeFamily$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/GeneratorNodeFamily$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/GeneratorNodeFamily$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/GeneratorNodeFamily$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/GeneratorNodeFamily$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/GeneratorNodeFamily$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/GeneratorNodeFamily$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/GeneratorNodeFamily$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/GeneratorNodeFamily$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/learning\/GeneratorNodeFamily.html", "kind" : "trait"}, {"name" : "provingground.learning.GeneratorVariables", "shortDescription" : "resolving a general specification of a recursive generative model as finite distributions, depending on truncation;the coefficients of the various generator nodes should be Double", "object" : "provingground\/learning\/GeneratorVariables$.html", "members_object" : [{"label" : "groupEquations", "tail" : "(ts: Set[EquationTerm]): Set[Equation]", "member" : "provingground.learning.GeneratorVariables.groupEquations", "link" : "provingground\/learning\/GeneratorVariables$.html#groupEquations(ts:Set[provingground.learning.GeneratorVariables.EquationTerm]):Set[provingground.learning.GeneratorVariables.Equation]", "kind" : "def"}, {"label" : "EquationTerm", "tail" : "", "member" : "provingground.learning.GeneratorVariables.EquationTerm", "link" : "provingground\/learning\/GeneratorVariables$.html#EquationTermextendsProductwithSerializable", "kind" : "case class"}, {"label" : "Equation", "tail" : "", "member" : "provingground.learning.GeneratorVariables.Equation", "link" : "provingground\/learning\/GeneratorVariables$.html#EquationextendsProductwithSerializable", "kind" : "case class"}, {"label" : "Quotient", "tail" : "", "member" : "provingground.learning.GeneratorVariables.Quotient", "link" : "provingground\/learning\/GeneratorVariables$.html#QuotientextendsGeneratorVariables.ExpressionwithProductwithSerializable", "kind" : "case class"}, {"label" : "Literal", "tail" : "", "member" : "provingground.learning.GeneratorVariables.Literal", "link" : "provingground\/learning\/GeneratorVariables$.html#LiteralextendsGeneratorVariables.ExpressionwithProductwithSerializable", "kind" : "case class"}, {"label" : "Product", "tail" : "", "member" : "provingground.learning.GeneratorVariables.Product", "link" : "provingground\/learning\/GeneratorVariables$.html#ProductextendsGeneratorVariables.ExpressionwithProductwithSerializable", "kind" : "case class"}, {"label" : "Sum", "tail" : "", "member" : "provingground.learning.GeneratorVariables.Sum", "link" : "provingground\/learning\/GeneratorVariables$.html#SumextendsGeneratorVariables.ExpressionwithProductwithSerializable", "kind" : "case class"}, {"label" : "Log", "tail" : "", "member" : "provingground.learning.GeneratorVariables.Log", "link" : "provingground\/learning\/GeneratorVariables$.html#LogextendsGeneratorVariables.ExpressionwithProductwithSerializable", "kind" : "case class"}, {"label" : "Expectation", "tail" : "", "member" : "provingground.learning.GeneratorVariables.Expectation", "link" : "provingground\/learning\/GeneratorVariables$.html#Expectation[Y]extendsGeneratorVariables.ExpressionwithProductwithSerializable", "kind" : "case class"}, {"label" : "InitialVal", "tail" : "", "member" : "provingground.learning.GeneratorVariables.InitialVal", "link" : "provingground\/learning\/GeneratorVariables$.html#InitialVal[+Y]extendsGeneratorVariables.VarVal[Y]withProductwithSerializable", "kind" : "case class"}, {"label" : "FinalVal", "tail" : "", "member" : "provingground.learning.GeneratorVariables.FinalVal", "link" : "provingground\/learning\/GeneratorVariables$.html#FinalVal[+Y]extendsGeneratorVariables.VarVal[Y]withProductwithSerializable", "kind" : "case class"}, {"label" : "VarVal", "tail" : "", "member" : "provingground.learning.GeneratorVariables.VarVal", "link" : "provingground\/learning\/GeneratorVariables$.html#VarVal[+Y]extendsGeneratorVariables.Expression", "kind" : "sealed trait"}, {"label" : "Expression", "tail" : "", "member" : "provingground.learning.GeneratorVariables.Expression", "link" : "provingground\/learning\/GeneratorVariables$.html#ExpressionextendsAnyRef", "kind" : "sealed trait"}, {"label" : "NodeCoeff", "tail" : "", "member" : "provingground.learning.GeneratorVariables.NodeCoeff", "link" : "provingground\/learning\/GeneratorVariables$.html#NodeCoeff[RDom<:shapeless.HList,Y]extendsGeneratorVariables.Variable[Unit]withProductwithSerializable", "kind" : "case class"}, {"label" : "InIsle", "tail" : "", "member" : "provingground.learning.GeneratorVariables.InIsle", "link" : "provingground\/learning\/GeneratorVariables$.html#InIsle[Y,Boat]extendsGeneratorVariables.Variable[Y]withProductwithSerializable", "kind" : "case class"}, {"label" : "PairEvent", "tail" : "", "member" : "provingground.learning.GeneratorVariables.PairEvent", "link" : "provingground\/learning\/GeneratorVariables$.html#PairEvent[X1,X2,Y]extendsGeneratorVariables.Variable[Y]withProductwithSerializable", "kind" : "case class"}, {"label" : "Event", "tail" : "", "member" : "provingground.learning.GeneratorVariables.Event", "link" : "provingground\/learning\/GeneratorVariables$.html#Event[X,Y]extendsGeneratorVariables.Variable[Y]withProductwithSerializable", "kind" : "case class"}, {"label" : "Elem", "tail" : "", "member" : "provingground.learning.GeneratorVariables.Elem", "link" : "provingground\/learning\/GeneratorVariables$.html#Elem[Y]extendsGeneratorVariables.Variable[Y]withProductwithSerializable", "kind" : "case class"}, {"label" : "Variable", "tail" : "", "member" : "provingground.learning.GeneratorVariables.Variable", "link" : "provingground\/learning\/GeneratorVariables$.html#Variable[+Y]extendsAnyRef", "kind" : "sealed trait"}, {"label" : "variableValue", "tail" : "(boatMap: (Boat, State) ⇒ State, state: State)(sd: StateDistribution[State, FiniteDistribution]): (Variable[Y]) ⇒ Double", "member" : "provingground.learning.GeneratorVariables.variableValue", "link" : "provingground\/learning\/GeneratorVariables$.html#variableValue[Y,State,Boat](boatMap:(Boat,State)=>State,state:State)(implicitsd:provingground.learning.StateDistribution[State,provingground.FiniteDistribution]):provingground.learning.GeneratorVariables.Variable[Y]=>Double", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/GeneratorVariables$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/GeneratorVariables$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/GeneratorVariables$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/GeneratorVariables$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/GeneratorVariables$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/GeneratorVariables$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/GeneratorVariables$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/GeneratorVariables$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/GeneratorVariables$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/GeneratorVariables$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/GeneratorVariables$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/GeneratorVariables$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/GeneratorVariables$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/GeneratorVariables$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/GeneratorVariables$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/GeneratorVariables$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/GeneratorVariables$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/GeneratorVariables$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/GeneratorVariables$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "allVars", "tail" : ": Set[Variable[_]]", "member" : "provingground.learning.GeneratorVariables.allVars", "link" : "provingground\/learning\/GeneratorVariables.html#allVars:Set[provingground.learning.GeneratorVariables.Variable[_]]", "kind" : "lazy val"}, {"label" : "nodeSeqVars", "tail" : "(nc: NodeCoeffSeq[State, Boat, Double]): Set[Variable[_]]", "member" : "provingground.learning.GeneratorVariables.nodeSeqVars", "link" : "provingground\/learning\/GeneratorVariables.html#nodeSeqVars(nc:provingground.learning.NodeCoeffSeq[State,Boat,Double]):Set[provingground.learning.GeneratorVariables.Variable[_]]", "kind" : "def"}, {"label" : "generatorFamilyVars", "tail" : "(generatorNodeFamily: GeneratorNodeFamily[Dom, O], output: RandomVarFamily[Dom, O]): Set[Variable[_]]", "member" : "provingground.learning.GeneratorVariables.generatorFamilyVars", "link" : "provingground\/learning\/GeneratorVariables.html#generatorFamilyVars[Dom<:shapeless.HList,O](generatorNodeFamily:provingground.learning.GeneratorNodeFamily[Dom,O],output:provingground.learning.RandomVarFamily[Dom,O]):Set[provingground.learning.GeneratorVariables.Variable[_]]", "kind" : "def"}, {"label" : "generatorVars", "tail" : "(generatorNode: GeneratorNode[Y]): Set[Variable[_]]", "member" : "provingground.learning.GeneratorVariables.generatorVars", "link" : "provingground\/learning\/GeneratorVariables.html#generatorVars[Y](generatorNode:provingground.learning.GeneratorNode[Y]):Set[provingground.learning.GeneratorVariables.Variable[_]]", "kind" : "def"}, {"label" : "outputVars", "tail" : ": Set[Variable[_]]", "member" : "provingground.learning.GeneratorVariables.outputVars", "link" : "provingground\/learning\/GeneratorVariables.html#outputVars:Set[provingground.learning.GeneratorVariables.Variable[_]]", "kind" : "lazy val"}, {"label" : "varFamilyVars", "tail" : "(rvF: RandomVarFamily[Dom, Y]): Set[Variable[_]]", "member" : "provingground.learning.GeneratorVariables.varFamilyVars", "link" : "provingground\/learning\/GeneratorVariables.html#varFamilyVars[Dom<:shapeless.HList,Y](rvF:provingground.learning.RandomVarFamily[Dom,Y]):Set[provingground.learning.GeneratorVariables.Variable[_]]", "kind" : "def"}, {"label" : "varListSupport", "tail" : "(rvs: RandomVarList[Dom]): Set[Dom]", "member" : "provingground.learning.GeneratorVariables.varListSupport", "link" : "provingground\/learning\/GeneratorVariables.html#varListSupport[Dom<:shapeless.HList](rvs:provingground.learning.RandomVarList[Dom]):Set[Dom]", "kind" : "def"}, {"label" : "varSupport", "tail" : "(rv: RandomVar[Y]): Set[Y]", "member" : "provingground.learning.GeneratorVariables.varSupport", "link" : "provingground\/learning\/GeneratorVariables.html#varSupport[Y](rv:provingground.learning.RandomVar[Y]):Set[Y]", "kind" : "def"}, {"member" : "provingground.learning.GeneratorVariables#<init>", "error" : "unsupported entity"}, {"label" : "initState", "tail" : ": State", "member" : "provingground.learning.GeneratorVariables.initState", "link" : "provingground\/learning\/GeneratorVariables.html#initState:State", "kind" : "val"}, {"label" : "nodeCoeffSeq", "tail" : ": NodeCoeffSeq[State, Boat, Double]", "member" : "provingground.learning.GeneratorVariables.nodeCoeffSeq", "link" : "provingground\/learning\/GeneratorVariables.html#nodeCoeffSeq:provingground.learning.NodeCoeffSeq[State,Boat,Double]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/GeneratorVariables.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/GeneratorVariables.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/GeneratorVariables.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/GeneratorVariables.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/GeneratorVariables.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/GeneratorVariables.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/GeneratorVariables.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/GeneratorVariables.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/GeneratorVariables.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/GeneratorVariables.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/GeneratorVariables.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/GeneratorVariables.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/GeneratorVariables.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/GeneratorVariables.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/GeneratorVariables.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/GeneratorVariables.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/learning\/GeneratorVariables.html", "kind" : "case class"}, {"name" : "provingground.learning.GenMonixFiniteDistribution", "shortDescription" : "", "members_class" : [{"label" : "nodeFamilyDist", "tail" : "(initState: State)(generatorNodeFamily: GeneratorNodeFamily[Dom, Y], baseDist: Task[FiniteDistribution[Dom]], epsilon: Double): Task[Map[Dom, FiniteDistribution[Y]]]", "member" : "provingground.learning.GenMonixFiniteDistribution.nodeFamilyDist", "link" : "provingground\/learning\/GenMonixFiniteDistribution.html#nodeFamilyDist[Dom<:shapeless.HList,Y](initState:State)(generatorNodeFamily:provingground.learning.GeneratorNodeFamily[Dom,Y],baseDist:monix.eval.Task[provingground.FiniteDistribution[Dom]],epsilon:Double):monix.eval.Task[Map[Dom,provingground.FiniteDistribution[Y]]]", "kind" : "def"}, {"label" : "varFamilyDist", "tail" : "(initState: State)(randomVarFmly: RandomVarFamily[RDom, Y], epsilon: Double): Task[Map[RDom, FiniteDistribution[Y]]]", "member" : "provingground.learning.GenMonixFiniteDistribution.varFamilyDist", "link" : "provingground\/learning\/GenMonixFiniteDistribution.html#varFamilyDist[RDom<:shapeless.HList,Y](initState:State)(randomVarFmly:provingground.learning.RandomVarFamily[RDom,Y],epsilon:Double):monix.eval.Task[Map[RDom,provingground.FiniteDistribution[Y]]]", "kind" : "def"}, {"label" : "nodeCoeffFamilyMap", "tail" : "(initState: State)(nodeCoeffs: NodeCoeffs[State, Boat, Double, Dom, Y], baseDist: Task[FiniteDistribution[Dom]], epsilon: Double): Task[Map[Dom, FiniteDistribution[Y]]]", "member" : "provingground.learning.GenMonixFiniteDistribution.nodeCoeffFamilyMap", "link" : "provingground\/learning\/GenMonixFiniteDistribution.html#nodeCoeffFamilyMap[Dom<:shapeless.HList,Y](initState:State)(nodeCoeffs:provingground.learning.NodeCoeffs[State,Boat,Double,Dom,Y],baseDist:monix.eval.Task[provingground.FiniteDistribution[Dom]],epsilon:Double):monix.eval.Task[Map[Dom,provingground.FiniteDistribution[Y]]]", "kind" : "def"}, {"label" : "mapsSum", "tail" : "(first: Map[X, FiniteDistribution[Y]], second: Map[X, FiniteDistribution[Y]]): Map[X, FiniteDistribution[Y]]", "member" : "provingground.learning.GenMonixFiniteDistribution.mapsSum", "link" : "provingground\/learning\/GenMonixFiniteDistribution.html#mapsSum[X,Y](first:Map[X,provingground.FiniteDistribution[Y]],second:Map[X,provingground.FiniteDistribution[Y]]):Map[X,provingground.FiniteDistribution[Y]]", "kind" : "def"}, {"label" : "nodeCoeffDist", "tail" : "(initState: State)(nodeCoeffs: NodeCoeffs[State, Boat, Double, HNil, Y], epsilon: Double): Task[FiniteDistribution[Y]]", "member" : "provingground.learning.GenMonixFiniteDistribution.nodeCoeffDist", "link" : "provingground\/learning\/GenMonixFiniteDistribution.html#nodeCoeffDist[Y](initState:State)(nodeCoeffs:provingground.learning.NodeCoeffs[State,Boat,Double,shapeless.HNil,Y],epsilon:Double):monix.eval.Task[provingground.FiniteDistribution[Y]]", "kind" : "def"}, {"label" : "varListDist", "tail" : "(initState: State)(vl: RandomVarList[Dom], epsilon: Double): Task[FiniteDistribution[Dom]]", "member" : "provingground.learning.GenMonixFiniteDistribution.varListDist", "link" : "provingground\/learning\/GenMonixFiniteDistribution.html#varListDist[Dom<:shapeless.HList](initState:State)(vl:provingground.learning.RandomVarList[Dom],epsilon:Double):monix.eval.Task[provingground.FiniteDistribution[Dom]]", "kind" : "def"}, {"label" : "varDist", "tail" : "(initState: State)(randomVar: RandomVar[Y], epsilon: Double): Task[FiniteDistribution[Y]]", "member" : "provingground.learning.GenMonixFiniteDistribution.varDist", "link" : "provingground\/learning\/GenMonixFiniteDistribution.html#varDist[Y](initState:State)(randomVar:provingground.learning.RandomVar[Y],epsilon:Double):monix.eval.Task[provingground.FiniteDistribution[Y]]", "kind" : "def"}, {"member" : "provingground.learning.GenMonixFiniteDistribution#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/GenMonixFiniteDistribution.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/GenMonixFiniteDistribution.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/GenMonixFiniteDistribution.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/GenMonixFiniteDistribution.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/GenMonixFiniteDistribution.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/GenMonixFiniteDistribution.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/GenMonixFiniteDistribution.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/GenMonixFiniteDistribution.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/GenMonixFiniteDistribution.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/GenMonixFiniteDistribution.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/GenMonixFiniteDistribution.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/GenMonixFiniteDistribution.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/GenMonixFiniteDistribution.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/GenMonixFiniteDistribution.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/GenMonixFiniteDistribution.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/GenMonixFiniteDistribution.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/GenMonixFiniteDistribution.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/GenMonixFiniteDistribution.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/GenMonixFiniteDistribution.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "nodeDist", "tail" : "(initState: State)(generatorNode: GeneratorNode[Y], epsilon: Double): Task[FiniteDistribution[Y]]", "member" : "provingground.learning.GenMonixFiniteDistribution.nodeDist", "link" : "provingground\/learning\/GenMonixFiniteDistribution.html#nodeDist[Y](initState:State)(generatorNode:provingground.learning.GeneratorNode[Y],epsilon:Double):monix.eval.Task[provingground.FiniteDistribution[Y]]", "kind" : "abstract def"}], "class" : "provingground\/learning\/GenMonixFiniteDistribution.html", "kind" : "class"}, {"name" : "provingground.learning.GenTruncatedFiniteDistribution", "shortDescription" : "", "members_class" : [{"label" : "nodeFamilyDist", "tail" : "(initState: State)(generatorNodeFamily: GeneratorNodeFamily[Dom, Y], baseDist: FiniteDistribution[Dom], epsilon: Double): Map[Dom, FiniteDistribution[Y]]", "member" : "provingground.learning.GenTruncatedFiniteDistribution.nodeFamilyDist", "link" : "provingground\/learning\/GenTruncatedFiniteDistribution.html#nodeFamilyDist[Dom<:shapeless.HList,Y](initState:State)(generatorNodeFamily:provingground.learning.GeneratorNodeFamily[Dom,Y],baseDist:provingground.FiniteDistribution[Dom],epsilon:Double):Map[Dom,provingground.FiniteDistribution[Y]]", "kind" : "def"}, {"label" : "varFamilyDist", "tail" : "(initState: State)(randomVarFmly: RandomVarFamily[RDom, Y], epsilon: Double): Map[RDom, FiniteDistribution[Y]]", "member" : "provingground.learning.GenTruncatedFiniteDistribution.varFamilyDist", "link" : "provingground\/learning\/GenTruncatedFiniteDistribution.html#varFamilyDist[RDom<:shapeless.HList,Y](initState:State)(randomVarFmly:provingground.learning.RandomVarFamily[RDom,Y],epsilon:Double):Map[RDom,provingground.FiniteDistribution[Y]]", "kind" : "def"}, {"label" : "nodeCoeffFamilyMap", "tail" : "(initState: State)(nodeCoeffs: NodeCoeffs[State, Boat, Double, Dom, Y], baseDist: FiniteDistribution[Dom], epsilon: Double): Map[Dom, FiniteDistribution[Y]]", "member" : "provingground.learning.GenTruncatedFiniteDistribution.nodeCoeffFamilyMap", "link" : "provingground\/learning\/GenTruncatedFiniteDistribution.html#nodeCoeffFamilyMap[Dom<:shapeless.HList,Y](initState:State)(nodeCoeffs:provingground.learning.NodeCoeffs[State,Boat,Double,Dom,Y],baseDist:provingground.FiniteDistribution[Dom],epsilon:Double):Map[Dom,provingground.FiniteDistribution[Y]]", "kind" : "def"}, {"label" : "mapsSum", "tail" : "(first: Map[X, FiniteDistribution[Y]], second: Map[X, FiniteDistribution[Y]]): Map[X, FiniteDistribution[Y]]", "member" : "provingground.learning.GenTruncatedFiniteDistribution.mapsSum", "link" : "provingground\/learning\/GenTruncatedFiniteDistribution.html#mapsSum[X,Y](first:Map[X,provingground.FiniteDistribution[Y]],second:Map[X,provingground.FiniteDistribution[Y]]):Map[X,provingground.FiniteDistribution[Y]]", "kind" : "def"}, {"label" : "nodeCoeffDist", "tail" : "(initState: State)(nodeCoeffs: NodeCoeffs[State, Boat, Double, HNil, Y], epsilon: Double): FiniteDistribution[Y]", "member" : "provingground.learning.GenTruncatedFiniteDistribution.nodeCoeffDist", "link" : "provingground\/learning\/GenTruncatedFiniteDistribution.html#nodeCoeffDist[Y](initState:State)(nodeCoeffs:provingground.learning.NodeCoeffs[State,Boat,Double,shapeless.HNil,Y],epsilon:Double):provingground.FiniteDistribution[Y]", "kind" : "def"}, {"label" : "varListDist", "tail" : "(initState: State)(vl: RandomVarList[Dom], epsilon: Double): FiniteDistribution[Dom]", "member" : "provingground.learning.GenTruncatedFiniteDistribution.varListDist", "link" : "provingground\/learning\/GenTruncatedFiniteDistribution.html#varListDist[Dom<:shapeless.HList](initState:State)(vl:provingground.learning.RandomVarList[Dom],epsilon:Double):provingground.FiniteDistribution[Dom]", "kind" : "def"}, {"label" : "varDist", "tail" : "(initState: State)(randomVar: RandomVar[Y], epsilon: Double): FiniteDistribution[Y]", "member" : "provingground.learning.GenTruncatedFiniteDistribution.varDist", "link" : "provingground\/learning\/GenTruncatedFiniteDistribution.html#varDist[Y](initState:State)(randomVar:provingground.learning.RandomVar[Y],epsilon:Double):provingground.FiniteDistribution[Y]", "kind" : "def"}, {"member" : "provingground.learning.GenTruncatedFiniteDistribution#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/GenTruncatedFiniteDistribution.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/GenTruncatedFiniteDistribution.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/GenTruncatedFiniteDistribution.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/GenTruncatedFiniteDistribution.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/GenTruncatedFiniteDistribution.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/GenTruncatedFiniteDistribution.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/GenTruncatedFiniteDistribution.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/GenTruncatedFiniteDistribution.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/GenTruncatedFiniteDistribution.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/GenTruncatedFiniteDistribution.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/GenTruncatedFiniteDistribution.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/GenTruncatedFiniteDistribution.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/GenTruncatedFiniteDistribution.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/GenTruncatedFiniteDistribution.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/GenTruncatedFiniteDistribution.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/GenTruncatedFiniteDistribution.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/GenTruncatedFiniteDistribution.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/GenTruncatedFiniteDistribution.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/GenTruncatedFiniteDistribution.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "nodeDist", "tail" : "(initState: State)(generatorNode: GeneratorNode[Y], epsilon: Double): FiniteDistribution[Y]", "member" : "provingground.learning.GenTruncatedFiniteDistribution.nodeDist", "link" : "provingground\/learning\/GenTruncatedFiniteDistribution.html#nodeDist[Y](initState:State)(generatorNode:provingground.learning.GeneratorNode[Y],epsilon:Double):provingground.FiniteDistribution[Y]", "kind" : "abstract def"}], "class" : "provingground\/learning\/GenTruncatedFiniteDistribution.html", "kind" : "class"}, {"name" : "provingground.learning.GeometricDistribution", "shortDescription" : "An example, the geometric distribution in an abstract form", "object" : "provingground\/learning\/GeometricDistribution$.html", "members_object" : [{"label" : "initState", "tail" : ": VarValueSet[FiniteDistribution]", "member" : "provingground.learning.GeometricDistribution.initState", "link" : "provingground\/learning\/GeometricDistribution$.html#initState:provingground.learning.VarValueSet[provingground.FiniteDistribution]", "kind" : "val"}, {"label" : "nodeCoeffSeq", "tail" : ": Cons[VarValueSet[FiniteDistribution], Unit, Double, HNil, Int]", "member" : "provingground.learning.GeometricDistribution.nodeCoeffSeq", "link" : "provingground\/learning\/GeometricDistribution$.html#nodeCoeffSeq:provingground.learning.NodeCoeffSeq.Cons[provingground.learning.VarValueSet[provingground.FiniteDistribution],Unit,Double,shapeless.HNil,Int]", "kind" : "val"}, {"label" : "nodeCoeffs", "tail" : ": NodeCoeffs[VarValueSet[FiniteDistribution], Unit, Double, HNil, Int]", "member" : "provingground.learning.GeometricDistribution.nodeCoeffs", "link" : "provingground\/learning\/GeometricDistribution$.html#nodeCoeffs:provingground.learning.NodeCoeffs[provingground.learning.VarValueSet[provingground.FiniteDistribution],Unit,Double,shapeless.HNil,Int]", "kind" : "val"}, {"label" : "shift", "tail" : ": Map[Int, Int]", "member" : "provingground.learning.GeometricDistribution.shift", "link" : "provingground\/learning\/GeometricDistribution$.html#shift:provingground.learning.GeneratorNode.Map[Int,Int]", "kind" : "val"}, {"label" : "init", "tail" : ": Init[Int]", "member" : "provingground.learning.GeometricDistribution.init", "link" : "provingground\/learning\/GeometricDistribution$.html#init:provingground.learning.GeneratorNode.Init[Int]", "kind" : "val"}, {"label" : "GeomVar", "tail" : "", "member" : "provingground.learning.GeometricDistribution.GeomVar", "link" : "provingground\/learning\/GeometricDistribution$.html#GeomVar", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/GeometricDistribution$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/GeometricDistribution$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/GeometricDistribution$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/GeometricDistribution$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/GeometricDistribution$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/GeometricDistribution$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/GeometricDistribution$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/GeometricDistribution$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/GeometricDistribution$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/GeometricDistribution$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/GeometricDistribution$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/GeometricDistribution$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/GeometricDistribution$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/GeometricDistribution$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/GeometricDistribution$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/GeometricDistribution$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/GeometricDistribution$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/GeometricDistribution$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/GeometricDistribution$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.learning.HoTTgen", "shortDescription" : "", "object" : "provingground\/learning\/HoTTgen$.html", "members_object" : [{"label" : "dynTypFlow", "tail" : "(dyn: AdjDiffbleFunction[FiniteDistribution[Term], FiniteDistribution[Term]]): (FiniteDistribution[Term]) ⇒ FiniteDistribution[Term]", "member" : "provingground.learning.HoTTgen.dynTypFlow", "link" : "provingground\/learning\/HoTTgen$.html#dynTypFlow(dyn:provingground.learning.AdjDiffbleFunction[provingground.FiniteDistribution[provingground.HoTT.Term],provingground.FiniteDistribution[provingground.HoTT.Term]]):provingground.FiniteDistribution[provingground.HoTT.Term]=>provingground.FiniteDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "typFlow", "tail" : ": (FiniteDistribution[Term]) ⇒ FiniteDistribution[Term]", "member" : "provingground.learning.HoTTgen.typFlow", "link" : "provingground\/learning\/HoTTgen$.html#typFlow:provingground.FiniteDistribution[provingground.HoTT.Term]=>provingground.FiniteDistribution[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "getTyps", "tail" : "(d: FiniteDistribution[Term]): FiniteDistribution[Typ[Term]]", "member" : "provingground.learning.HoTTgen.getTyps", "link" : "provingground\/learning\/HoTTgen$.html#getTyps(d:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "mapTyp", "tail" : ": MoveFn[Term, Typ[Term]]", "member" : "provingground.learning.HoTTgen.mapTyp", "link" : "provingground\/learning\/HoTTgen$.html#mapTyp:provingground.learning.FiniteDistributionLearner.MoveFn[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "hottDyn", "tail" : ": (Int) ⇒ AdjDiffbleFunction[(FiniteDistribution[Move], FiniteDistribution[Term]), (FiniteDistribution[Move], FiniteDistribution[Term])]", "member" : "provingground.learning.HoTTgen.hottDyn", "link" : "provingground\/learning\/HoTTgen$.html#hottDyn:Int=>provingground.learning.AdjDiffbleFunction[(provingground.FiniteDistribution[provingground.learning.HoTTgen.Move],provingground.FiniteDistribution[provingground.HoTT.Term]),(provingground.FiniteDistribution[provingground.learning.HoTTgen.Move],provingground.FiniteDistribution[provingground.HoTT.Term])]", "kind" : "val"}, {"label" : "lambdaSum", "tail" : "(l: M)(f: AdjDiffbleFunction[(FiniteDistribution[M], FiniteDistribution[Term]), (FiniteDistribution[M], FiniteDistribution[Term])]): BigSum[(FiniteDistribution[M], FiniteDistribution[Term with Subs[Term]]), (FiniteDistribution[M], FiniteDistribution[Term])]", "member" : "provingground.learning.HoTTgen.lambdaSum", "link" : "provingground\/learning\/HoTTgen$.html#lambdaSum[M](l:M)(f:provingground.learning.AdjDiffbleFunction[(provingground.FiniteDistribution[M],provingground.FiniteDistribution[provingground.HoTT.Term]),(provingground.FiniteDistribution[M],provingground.FiniteDistribution[provingground.HoTT.Term])]):provingground.learning.AdjDiffbleFunction.BigSum[(provingground.FiniteDistribution[M],provingground.FiniteDistribution[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]),(provingground.FiniteDistribution[M],provingground.FiniteDistribution[provingground.HoTT.Term])]", "kind" : "def"}, {"label" : "lambdaFn", "tail" : "(l: M, f: AdjDiffbleFunction[(FiniteDistribution[M], FiniteDistribution[Term]), (FiniteDistribution[M], FiniteDistribution[Term])])(typ: Typ[Term]): AdjDiffbleFunction[(FiniteDistribution[M], FiniteDistribution[Term with Subs[Term]]), (FiniteDistribution[M], FiniteDistribution[Term])]", "member" : "provingground.learning.HoTTgen.lambdaFn", "link" : "provingground\/learning\/HoTTgen$.html#lambdaFn[M](l:M,f:provingground.learning.AdjDiffbleFunction[(provingground.FiniteDistribution[M],provingground.FiniteDistribution[provingground.HoTT.Term]),(provingground.FiniteDistribution[M],provingground.FiniteDistribution[provingground.HoTT.Term])])(typ:provingground.HoTT.Typ[provingground.HoTT.Term]):provingground.learning.AdjDiffbleFunction[(provingground.FiniteDistribution[M],provingground.FiniteDistribution[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]),(provingground.FiniteDistribution[M],provingground.FiniteDistribution[provingground.HoTT.Term])]", "kind" : "def"}, {"label" : "wtdMoveSum", "tail" : ": AdjDiffbleFunction[(FiniteDistribution[Move], FiniteDistribution[Term]), (FiniteDistribution[Move], FiniteDistribution[Term])]", "member" : "provingground.learning.HoTTgen.wtdMoveSum", "link" : "provingground\/learning\/HoTTgen$.html#wtdMoveSum:provingground.learning.AdjDiffbleFunction[(provingground.FiniteDistribution[provingground.learning.HoTTgen.Move],provingground.FiniteDistribution[provingground.HoTT.Term]),(provingground.FiniteDistribution[provingground.learning.HoTTgen.Move],provingground.FiniteDistribution[provingground.HoTT.Term])]", "kind" : "val"}, {"label" : "wtdMoveList", "tail" : ": List[AdjDiffbleFunction[(FiniteDistribution[Move], FiniteDistribution[Term]), (FiniteDistribution[Move], FiniteDistribution[Term])]]", "member" : "provingground.learning.HoTTgen.wtdMoveList", "link" : "provingground\/learning\/HoTTgen$.html#wtdMoveList:List[provingground.learning.AdjDiffbleFunction[(provingground.FiniteDistribution[provingground.learning.HoTTgen.Move],provingground.FiniteDistribution[provingground.HoTT.Term]),(provingground.FiniteDistribution[provingground.learning.HoTTgen.Move],provingground.FiniteDistribution[provingground.HoTT.Term])]]", "kind" : "val"}, {"label" : "wtdDyn", "tail" : ": (Move, AdjDiffbleFunction[FiniteDistribution[Term], FiniteDistribution[Term]]) ⇒ AdjDiffbleFunction[(FiniteDistribution[Move], FiniteDistribution[Term]), FiniteDistribution[Term]]", "member" : "provingground.learning.HoTTgen.wtdDyn", "link" : "provingground\/learning\/HoTTgen$.html#wtdDyn:(provingground.learning.HoTTgen.Move,provingground.learning.AdjDiffbleFunction[provingground.FiniteDistribution[provingground.HoTT.Term],provingground.FiniteDistribution[provingground.HoTT.Term]])=>provingground.learning.AdjDiffbleFunction[(provingground.FiniteDistribution[provingground.learning.HoTTgen.Move],provingground.FiniteDistribution[provingground.HoTT.Term]),provingground.FiniteDistribution[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "Move", "tail" : "", "member" : "provingground.learning.HoTTgen.Move", "link" : "provingground\/learning\/HoTTgen$.html#MoveextendsAnyRef", "kind" : "sealed trait"}, {"label" : "Move", "tail" : "", "member" : "provingground.learning.HoTTgen.Move", "link" : "provingground\/learning\/HoTTgen$.html#Move", "kind" : "object"}, {"label" : "moves", "tail" : ": List[(Move, AdjDiffbleFunction[FiniteDistribution[Term], FiniteDistribution[Term]])]", "member" : "provingground.learning.HoTTgen.moves", "link" : "provingground\/learning\/HoTTgen$.html#moves:List[(provingground.learning.HoTTgen.Move,provingground.learning.AdjDiffbleFunction[provingground.FiniteDistribution[provingground.HoTT.Term],provingground.FiniteDistribution[provingground.HoTT.Term]])]", "kind" : "lazy val"}, {"label" : "jcons", "tail" : ": (Term) ⇒ Option[Term]", "member" : "provingground.learning.HoTTgen.jcons", "link" : "provingground\/learning\/HoTTgen$.html#jcons:provingground.HoTT.Term=>Option[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "icons", "tail" : ": (Term) ⇒ Option[Term]", "member" : "provingground.learning.HoTTgen.icons", "link" : "provingground\/learning\/HoTTgen$.html#icons:provingground.HoTT.Term=>Option[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "paircons", "tail" : ": (Term) ⇒ Option[Term]", "member" : "provingground.learning.HoTTgen.paircons", "link" : "provingground\/learning\/HoTTgen$.html#paircons:provingground.HoTT.Term=>Option[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "PairTerm", "tail" : ": (Term, Term) ⇒ Option[Term]", "member" : "provingground.learning.HoTTgen.PairTerm", "link" : "provingground\/learning\/HoTTgen$.html#PairTerm:(provingground.HoTT.Term,provingground.HoTT.Term)=>Option[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "pairtyp", "tail" : ": (Term, Term) ⇒ Option[Term]", "member" : "provingground.learning.HoTTgen.pairtyp", "link" : "provingground\/learning\/HoTTgen$.html#pairtyp:(provingground.HoTT.Term,provingground.HoTT.Term)=>Option[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "sigmatyp", "tail" : ": (Term) ⇒ Option[Term]", "member" : "provingground.learning.HoTTgen.sigmatyp", "link" : "provingground\/learning\/HoTTgen$.html#sigmatyp:provingground.HoTT.Term=>Option[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "pityp", "tail" : ": (Term) ⇒ Option[Term]", "member" : "provingground.learning.HoTTgen.pityp", "link" : "provingground\/learning\/HoTTgen$.html#pityp:provingground.HoTT.Term=>Option[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "functyp", "tail" : ": (Term, Term) ⇒ Option[Term]", "member" : "provingground.learning.HoTTgen.functyp", "link" : "provingground\/learning\/HoTTgen$.html#functyp:(provingground.HoTT.Term,provingground.HoTT.Term)=>Option[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "funcappl", "tail" : ": (Term, Term) ⇒ Option[Term]", "member" : "provingground.learning.HoTTgen.funcappl", "link" : "provingground\/learning\/HoTTgen$.html#funcappl:(provingground.HoTT.Term,provingground.HoTT.Term)=>Option[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "inDomain", "tail" : "(): (Term) ⇒ (Term) ⇒ Boolean", "member" : "provingground.learning.HoTTgen.inDomain", "link" : "provingground\/learning\/HoTTgen$.html#inDomain:provingground.HoTT.Term=>(provingground.HoTT.Term=>Boolean)", "kind" : "def"}, {"label" : "isTyp", "tail" : "(t: Term): Boolean", "member" : "provingground.learning.HoTTgen.isTyp", "link" : "provingground\/learning\/HoTTgen$.html#isTyp(t:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "isFunc", "tail" : "(t: Term): Boolean", "member" : "provingground.learning.HoTTgen.isFunc", "link" : "provingground\/learning\/HoTTgen$.html#isFunc(t:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/HoTTgen$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/HoTTgen$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/HoTTgen$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/HoTTgen$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/HoTTgen$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/HoTTgen$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/HoTTgen$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/HoTTgen$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/HoTTgen$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/HoTTgen$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/HoTTgen$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/HoTTgen$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/HoTTgen$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/HoTTgen$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/HoTTgen$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/HoTTgen$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/HoTTgen$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/HoTTgen$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/HoTTgen$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.learning.Hub", "shortDescription" : "", "object" : "provingground\/learning\/Hub$.html", "members_object" : [{"label" : "executionContext", "tail" : ": ExecutionContextExecutor", "member" : "provingground.learning.Hub.executionContext", "link" : "provingground\/learning\/Hub$.html#executionContext:scala.concurrent.ExecutionContextExecutor", "kind" : "implicit val"}, {"label" : "materializer", "tail" : ": ActorMaterializer", "member" : "provingground.learning.Hub.materializer", "link" : "provingground\/learning\/Hub$.html#materializer:akka.stream.ActorMaterializer", "kind" : "implicit val"}, {"label" : "system", "tail" : ": ActorSystem", "member" : "provingground.learning.Hub.system", "link" : "provingground\/learning\/Hub$.html#system:akka.actor.ActorSystem", "kind" : "implicit val"}, {"label" : "ReactiveMongo", "tail" : "", "member" : "provingground.learning.Hub.ReactiveMongo", "link" : "provingground\/learning\/Hub$.html#ReactiveMongo", "kind" : "object"}, {"label" : "cnf", "tail" : ": Config", "member" : "provingground.learning.Hub.cnf", "link" : "provingground\/learning\/Hub$.html#cnf:com.typesafe.config.Config", "kind" : "val"}, {"label" : "conf", "tail" : ": Config", "member" : "provingground.learning.Hub.conf", "link" : "provingground\/learning\/Hub$.html#conf:com.typesafe.config.Config", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/Hub$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/Hub$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/Hub$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/Hub$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/Hub$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/Hub$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/Hub$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/Hub$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/Hub$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/Hub$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/Hub$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/Hub$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/Hub$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/Hub$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/Hub$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/Hub$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/Hub$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/Hub$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/Hub$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.learning.IterateDyn", "shortDescription" : "", "object" : "provingground\/learning\/IterateDyn$.html", "members_object" : [{"label" : "apply", "tail" : "(init: A, step: (A) ⇒ A, n: Int): A", "member" : "provingground.learning.IterateDyn.apply", "link" : "provingground\/learning\/IterateDyn$.html#apply[A](init:A,step:A=>A,n:Int):A", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/IterateDyn$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/IterateDyn$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/IterateDyn$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/IterateDyn$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/IterateDyn$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/IterateDyn$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/IterateDyn$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/IterateDyn$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/IterateDyn$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/IterateDyn$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/IterateDyn$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/IterateDyn$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/IterateDyn$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/IterateDyn$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/IterateDyn$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/IterateDyn$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/IterateDyn$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/IterateDyn$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/IterateDyn$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.learning.MemoState", "shortDescription" : "", "object" : "provingground\/learning\/MemoState$.html", "members_object" : [{"label" : "safeMemoDistState", "tail" : "(emp: Empty[D]): DistributionState[MemoState[D, V, P], D]", "member" : "provingground.learning.MemoState.safeMemoDistState", "link" : "provingground\/learning\/MemoState$.html#safeMemoDistState[D[_],V,P](implicitemp:provingground.learning.Empty[D]):provingground.learning.DistributionState[provingground.learning.MemoState[D,V,P],D]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/MemoState$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/MemoState$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/MemoState$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/MemoState$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/MemoState$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/MemoState$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/MemoState$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/MemoState$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/MemoState$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/MemoState$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/MemoState$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/MemoState$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/MemoState$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/MemoState$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/MemoState$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/MemoState$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/MemoState$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/MemoState$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/MemoState$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"member" : "provingground.learning.MemoState#<init>", "error" : "unsupported entity"}, {"label" : "context", "tail" : ": C", "member" : "provingground.learning.MemoState.context", "link" : "provingground\/learning\/MemoState.html#context:C", "kind" : "val"}, {"label" : "genData", "tail" : ": GeneratorData[V]", "member" : "provingground.learning.MemoState.genData", "link" : "provingground\/learning\/MemoState.html#genData:provingground.learning.GeneratorData[V]", "kind" : "val"}, {"label" : "randVarVals", "tail" : ": Set[Value[_, D]]", "member" : "provingground.learning.MemoState.randVarVals", "link" : "provingground\/learning\/MemoState.html#randVarVals:Set[provingground.learning.RandomVar.Value[_,D]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/MemoState.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/MemoState.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/MemoState.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/MemoState.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/MemoState.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/MemoState.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/MemoState.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/MemoState.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/MemoState.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/MemoState.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/MemoState.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/MemoState.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/MemoState.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/MemoState.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/MemoState.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/MemoState.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/learning\/MemoState.html", "kind" : "case class"}, {"name" : "provingground.learning.MonixFiniteDistribution", "shortDescription" : "resolving a general specification of a recursive generative model as finite distributions, depending on truncation;the coefficients of the various generator nodes should be Double", "members_case class" : [{"label" : "nodeDist", "tail" : "(initState: State)(generatorNode: GeneratorNode[Y], epsilon: Double): Task[FiniteDistribution[Y]]", "member" : "provingground.learning.MonixFiniteDistribution.nodeDist", "link" : "provingground\/learning\/MonixFiniteDistribution.html#nodeDist[Y](initState:State)(generatorNode:provingground.learning.GeneratorNode[Y],epsilon:Double):monix.eval.Task[provingground.FiniteDistribution[Y]]", "kind" : "def"}, {"label" : "updateAll", "tail" : "(dataSeq: Seq[Value[_ <: HList, _, Double]]): MonixFiniteDistribution[State, Boat]", "member" : "provingground.learning.MonixFiniteDistribution.updateAll", "link" : "provingground\/learning\/MonixFiniteDistribution.html#updateAll(dataSeq:Seq[provingground.learning.GeneratorNodeFamily.Value[_<:shapeless.HList,_,Double]]):provingground.learning.MonixFiniteDistribution[State,Boat]", "kind" : "def"}, {"member" : "provingground.learning.MonixFiniteDistribution#<init>", "error" : "unsupported entity"}, {"label" : "nodeCoeffSeq", "tail" : ": NodeCoeffSeq[State, Boat, Double]", "member" : "provingground.learning.MonixFiniteDistribution.nodeCoeffSeq", "link" : "provingground\/learning\/MonixFiniteDistribution.html#nodeCoeffSeq:provingground.learning.NodeCoeffSeq[State,Boat,Double]", "kind" : "val"}, {"label" : "nodeFamilyDist", "tail" : "(initState: State)(generatorNodeFamily: GeneratorNodeFamily[Dom, Y], baseDist: Task[FiniteDistribution[Dom]], epsilon: Double): Task[Map[Dom, FiniteDistribution[Y]]]", "member" : "provingground.learning.GenMonixFiniteDistribution.nodeFamilyDist", "link" : "provingground\/learning\/MonixFiniteDistribution.html#nodeFamilyDist[Dom<:shapeless.HList,Y](initState:State)(generatorNodeFamily:provingground.learning.GeneratorNodeFamily[Dom,Y],baseDist:monix.eval.Task[provingground.FiniteDistribution[Dom]],epsilon:Double):monix.eval.Task[Map[Dom,provingground.FiniteDistribution[Y]]]", "kind" : "def"}, {"label" : "varFamilyDist", "tail" : "(initState: State)(randomVarFmly: RandomVarFamily[RDom, Y], epsilon: Double): Task[Map[RDom, FiniteDistribution[Y]]]", "member" : "provingground.learning.GenMonixFiniteDistribution.varFamilyDist", "link" : "provingground\/learning\/MonixFiniteDistribution.html#varFamilyDist[RDom<:shapeless.HList,Y](initState:State)(randomVarFmly:provingground.learning.RandomVarFamily[RDom,Y],epsilon:Double):monix.eval.Task[Map[RDom,provingground.FiniteDistribution[Y]]]", "kind" : "def"}, {"label" : "nodeCoeffFamilyMap", "tail" : "(initState: State)(nodeCoeffs: NodeCoeffs[State, Boat, Double, Dom, Y], baseDist: Task[FiniteDistribution[Dom]], epsilon: Double): Task[Map[Dom, FiniteDistribution[Y]]]", "member" : "provingground.learning.GenMonixFiniteDistribution.nodeCoeffFamilyMap", "link" : "provingground\/learning\/MonixFiniteDistribution.html#nodeCoeffFamilyMap[Dom<:shapeless.HList,Y](initState:State)(nodeCoeffs:provingground.learning.NodeCoeffs[State,Boat,Double,Dom,Y],baseDist:monix.eval.Task[provingground.FiniteDistribution[Dom]],epsilon:Double):monix.eval.Task[Map[Dom,provingground.FiniteDistribution[Y]]]", "kind" : "def"}, {"label" : "mapsSum", "tail" : "(first: Map[X, FiniteDistribution[Y]], second: Map[X, FiniteDistribution[Y]]): Map[X, FiniteDistribution[Y]]", "member" : "provingground.learning.GenMonixFiniteDistribution.mapsSum", "link" : "provingground\/learning\/MonixFiniteDistribution.html#mapsSum[X,Y](first:Map[X,provingground.FiniteDistribution[Y]],second:Map[X,provingground.FiniteDistribution[Y]]):Map[X,provingground.FiniteDistribution[Y]]", "kind" : "def"}, {"label" : "nodeCoeffDist", "tail" : "(initState: State)(nodeCoeffs: NodeCoeffs[State, Boat, Double, HNil, Y], epsilon: Double): Task[FiniteDistribution[Y]]", "member" : "provingground.learning.GenMonixFiniteDistribution.nodeCoeffDist", "link" : "provingground\/learning\/MonixFiniteDistribution.html#nodeCoeffDist[Y](initState:State)(nodeCoeffs:provingground.learning.NodeCoeffs[State,Boat,Double,shapeless.HNil,Y],epsilon:Double):monix.eval.Task[provingground.FiniteDistribution[Y]]", "kind" : "def"}, {"label" : "varListDist", "tail" : "(initState: State)(vl: RandomVarList[Dom], epsilon: Double): Task[FiniteDistribution[Dom]]", "member" : "provingground.learning.GenMonixFiniteDistribution.varListDist", "link" : "provingground\/learning\/MonixFiniteDistribution.html#varListDist[Dom<:shapeless.HList](initState:State)(vl:provingground.learning.RandomVarList[Dom],epsilon:Double):monix.eval.Task[provingground.FiniteDistribution[Dom]]", "kind" : "def"}, {"label" : "varDist", "tail" : "(initState: State)(randomVar: RandomVar[Y], epsilon: Double): Task[FiniteDistribution[Y]]", "member" : "provingground.learning.GenMonixFiniteDistribution.varDist", "link" : "provingground\/learning\/MonixFiniteDistribution.html#varDist[Y](initState:State)(randomVar:provingground.learning.RandomVar[Y],epsilon:Double):monix.eval.Task[provingground.FiniteDistribution[Y]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/MonixFiniteDistribution.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/MonixFiniteDistribution.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/MonixFiniteDistribution.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/MonixFiniteDistribution.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/MonixFiniteDistribution.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/MonixFiniteDistribution.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/MonixFiniteDistribution.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/MonixFiniteDistribution.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/MonixFiniteDistribution.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/MonixFiniteDistribution.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/MonixFiniteDistribution.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/MonixFiniteDistribution.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/MonixFiniteDistribution.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/MonixFiniteDistribution.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/MonixFiniteDistribution.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/MonixFiniteDistribution.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/learning\/MonixFiniteDistribution.html", "kind" : "case class"}, {"name" : "provingground.learning.MonixSamples", "members_trait" : [{"label" : "sequence", "tail" : "(v: Vector[Task[A]]): Task[Vector[A]]", "member" : "provingground.learning.MonixSamples.sequence", "link" : "provingground\/learning\/MonixSamples.html#sequence[A](v:Vector[monix.eval.Task[A]]):monix.eval.Task[Vector[A]]", "kind" : "def"}, {"label" : "monad", "tail" : ": Monad[Task]", "member" : "provingground.learning.MonixSamples.monad", "link" : "provingground\/learning\/MonixSamples.html#monad:cats.Monad[monix.eval.Task]", "kind" : "implicit val"}, {"label" : "tangSizes", "tail" : "(n: Int)(base: FiniteDistribution[A]): Task[Vector[(FiniteDistribution[A], Int)]]", "member" : "provingground.learning.Samples.tangSizes", "link" : "provingground\/learning\/MonixSamples.html#tangSizes[A](n:Int)(base:provingground.FiniteDistribution[A]):X[Vector[(provingground.FiniteDistribution[A],Int)]]", "kind" : "def"}, {"label" : "batchSampFD", "tail" : "(pd: ProbabilityDistribution[A], batches: Int, n: Int): Task[FiniteDistribution[A]]", "member" : "provingground.learning.TangSamples.batchSampFD", "link" : "provingground\/learning\/MonixSamples.html#batchSampFD[A](pd:provingground.ProbabilityDistribution[A],batches:Int,n:Int):X[provingground.FiniteDistribution[A]]", "kind" : "def"}, {"label" : "sampFD", "tail" : "(pd: ProbabilityDistribution[A], n: Int): Task[FiniteDistribution[A]]", "member" : "provingground.learning.TangSamples.sampFD", "link" : "provingground\/learning\/MonixSamples.html#sampFD[A](pd:provingground.ProbabilityDistribution[A],n:Int):X[provingground.FiniteDistribution[A]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/MonixSamples.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/MonixSamples.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/MonixSamples.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/MonixSamples.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/MonixSamples.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/MonixSamples.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/MonixSamples.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/MonixSamples.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/MonixSamples.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/MonixSamples.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/MonixSamples.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/MonixSamples.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/MonixSamples.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/MonixSamples.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/MonixSamples.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/MonixSamples.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/MonixSamples.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/MonixSamples.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/MonixSamples.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "sample", "tail" : "(pd: ProbabilityDistribution[A], n: Int): Task[Map[A, Int]]", "member" : "provingground.learning.TangSamples.sample", "link" : "provingground\/learning\/MonixSamples.html#sample[A](pd:provingground.ProbabilityDistribution[A],n:Int):X[Map[A,Int]]", "kind" : "abstract def"}], "shortDescription" : "", "object" : "provingground\/learning\/MonixSamples$.html", "members_object" : [{"label" : "monad", "tail" : ": Monad[Task]", "member" : "provingground.learning.MonixSamples.monad", "link" : "provingground\/learning\/MonixSamples$.html#monad:cats.Monad[monix.eval.Task]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/MonixSamples$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/MonixSamples$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/MonixSamples$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/MonixSamples$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/MonixSamples$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/MonixSamples$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/MonixSamples$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/MonixSamples$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/MonixSamples$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/MonixSamples$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/MonixSamples$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/MonixSamples$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/MonixSamples$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/MonixSamples$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/MonixSamples$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/MonixSamples$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/MonixSamples$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/MonixSamples$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/MonixSamples$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/learning\/MonixSamples.html", "kind" : "trait"}, {"name" : "provingground.learning.MonixTangentFiniteDistribution", "shortDescription" : "", "object" : "provingground\/learning\/MonixTangentFiniteDistribution$.html", "members_object" : [{"label" : "average", "tail" : "(x: Task[FiniteDistribution[V]], y: Task[FiniteDistribution[V]]): Task[FiniteDistribution[V]]", "member" : "provingground.learning.MonixTangentFiniteDistribution.average", "link" : "provingground\/learning\/MonixTangentFiniteDistribution$.html#average[V](x:monix.eval.Task[provingground.FiniteDistribution[V]],y:monix.eval.Task[provingground.FiniteDistribution[V]]):monix.eval.Task[provingground.FiniteDistribution[V]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/MonixTangentFiniteDistribution$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/MonixTangentFiniteDistribution$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/MonixTangentFiniteDistribution$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/MonixTangentFiniteDistribution$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/MonixTangentFiniteDistribution$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/MonixTangentFiniteDistribution$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/MonixTangentFiniteDistribution$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/MonixTangentFiniteDistribution$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/MonixTangentFiniteDistribution$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/MonixTangentFiniteDistribution$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/MonixTangentFiniteDistribution$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/MonixTangentFiniteDistribution$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/MonixTangentFiniteDistribution$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/MonixTangentFiniteDistribution$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/MonixTangentFiniteDistribution$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/MonixTangentFiniteDistribution$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/MonixTangentFiniteDistribution$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/MonixTangentFiniteDistribution$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/MonixTangentFiniteDistribution$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "nodeDist", "tail" : "(tangentState: State)(generatorNode: GeneratorNode[Y], epsilon: Double): Task[FiniteDistribution[Y]]", "member" : "provingground.learning.MonixTangentFiniteDistribution.nodeDist", "link" : "provingground\/learning\/MonixTangentFiniteDistribution.html#nodeDist[Y](tangentState:State)(generatorNode:provingground.learning.GeneratorNode[Y],epsilon:Double):monix.eval.Task[provingground.FiniteDistribution[Y]]", "kind" : "def"}, {"label" : "baseVal", "tail" : "(rd: RandomVar[Y]): Task[FiniteDistribution[Y]]", "member" : "provingground.learning.MonixTangentFiniteDistribution.baseVal", "link" : "provingground\/learning\/MonixTangentFiniteDistribution.html#baseVal[Y](rd:provingground.learning.RandomVar[Y]):monix.eval.Task[provingground.FiniteDistribution[Y]]", "kind" : "def"}, {"label" : "updateAll", "tail" : "(dataSeq: Seq[Value[_ <: HList, _, Double]]): MonixFiniteDistribution[State, Boat]", "member" : "provingground.learning.MonixTangentFiniteDistribution.updateAll", "link" : "provingground\/learning\/MonixTangentFiniteDistribution.html#updateAll(dataSeq:Seq[provingground.learning.GeneratorNodeFamily.Value[_<:shapeless.HList,_,Double]]):provingground.learning.MonixFiniteDistribution[State,Boat]", "kind" : "def"}, {"member" : "provingground.learning.MonixTangentFiniteDistribution#<init>", "error" : "unsupported entity"}, {"label" : "baseState", "tail" : ": State", "member" : "provingground.learning.MonixTangentFiniteDistribution.baseState", "link" : "provingground\/learning\/MonixTangentFiniteDistribution.html#baseState:State", "kind" : "val"}, {"label" : "nodeCoeffSeq", "tail" : ": NodeCoeffSeq[State, Boat, Double]", "member" : "provingground.learning.MonixTangentFiniteDistribution.nodeCoeffSeq", "link" : "provingground\/learning\/MonixTangentFiniteDistribution.html#nodeCoeffSeq:provingground.learning.NodeCoeffSeq[State,Boat,Double]", "kind" : "val"}, {"label" : "nodeFamilyDist", "tail" : "(initState: State)(generatorNodeFamily: GeneratorNodeFamily[Dom, Y], baseDist: Task[FiniteDistribution[Dom]], epsilon: Double): Task[Map[Dom, FiniteDistribution[Y]]]", "member" : "provingground.learning.GenMonixFiniteDistribution.nodeFamilyDist", "link" : "provingground\/learning\/MonixTangentFiniteDistribution.html#nodeFamilyDist[Dom<:shapeless.HList,Y](initState:State)(generatorNodeFamily:provingground.learning.GeneratorNodeFamily[Dom,Y],baseDist:monix.eval.Task[provingground.FiniteDistribution[Dom]],epsilon:Double):monix.eval.Task[Map[Dom,provingground.FiniteDistribution[Y]]]", "kind" : "def"}, {"label" : "varFamilyDist", "tail" : "(initState: State)(randomVarFmly: RandomVarFamily[RDom, Y], epsilon: Double): Task[Map[RDom, FiniteDistribution[Y]]]", "member" : "provingground.learning.GenMonixFiniteDistribution.varFamilyDist", "link" : "provingground\/learning\/MonixTangentFiniteDistribution.html#varFamilyDist[RDom<:shapeless.HList,Y](initState:State)(randomVarFmly:provingground.learning.RandomVarFamily[RDom,Y],epsilon:Double):monix.eval.Task[Map[RDom,provingground.FiniteDistribution[Y]]]", "kind" : "def"}, {"label" : "nodeCoeffFamilyMap", "tail" : "(initState: State)(nodeCoeffs: NodeCoeffs[State, Boat, Double, Dom, Y], baseDist: Task[FiniteDistribution[Dom]], epsilon: Double): Task[Map[Dom, FiniteDistribution[Y]]]", "member" : "provingground.learning.GenMonixFiniteDistribution.nodeCoeffFamilyMap", "link" : "provingground\/learning\/MonixTangentFiniteDistribution.html#nodeCoeffFamilyMap[Dom<:shapeless.HList,Y](initState:State)(nodeCoeffs:provingground.learning.NodeCoeffs[State,Boat,Double,Dom,Y],baseDist:monix.eval.Task[provingground.FiniteDistribution[Dom]],epsilon:Double):monix.eval.Task[Map[Dom,provingground.FiniteDistribution[Y]]]", "kind" : "def"}, {"label" : "mapsSum", "tail" : "(first: Map[X, FiniteDistribution[Y]], second: Map[X, FiniteDistribution[Y]]): Map[X, FiniteDistribution[Y]]", "member" : "provingground.learning.GenMonixFiniteDistribution.mapsSum", "link" : "provingground\/learning\/MonixTangentFiniteDistribution.html#mapsSum[X,Y](first:Map[X,provingground.FiniteDistribution[Y]],second:Map[X,provingground.FiniteDistribution[Y]]):Map[X,provingground.FiniteDistribution[Y]]", "kind" : "def"}, {"label" : "nodeCoeffDist", "tail" : "(initState: State)(nodeCoeffs: NodeCoeffs[State, Boat, Double, HNil, Y], epsilon: Double): Task[FiniteDistribution[Y]]", "member" : "provingground.learning.GenMonixFiniteDistribution.nodeCoeffDist", "link" : "provingground\/learning\/MonixTangentFiniteDistribution.html#nodeCoeffDist[Y](initState:State)(nodeCoeffs:provingground.learning.NodeCoeffs[State,Boat,Double,shapeless.HNil,Y],epsilon:Double):monix.eval.Task[provingground.FiniteDistribution[Y]]", "kind" : "def"}, {"label" : "varListDist", "tail" : "(initState: State)(vl: RandomVarList[Dom], epsilon: Double): Task[FiniteDistribution[Dom]]", "member" : "provingground.learning.GenMonixFiniteDistribution.varListDist", "link" : "provingground\/learning\/MonixTangentFiniteDistribution.html#varListDist[Dom<:shapeless.HList](initState:State)(vl:provingground.learning.RandomVarList[Dom],epsilon:Double):monix.eval.Task[provingground.FiniteDistribution[Dom]]", "kind" : "def"}, {"label" : "varDist", "tail" : "(initState: State)(randomVar: RandomVar[Y], epsilon: Double): Task[FiniteDistribution[Y]]", "member" : "provingground.learning.GenMonixFiniteDistribution.varDist", "link" : "provingground\/learning\/MonixTangentFiniteDistribution.html#varDist[Y](initState:State)(randomVar:provingground.learning.RandomVar[Y],epsilon:Double):monix.eval.Task[provingground.FiniteDistribution[Y]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/MonixTangentFiniteDistribution.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/MonixTangentFiniteDistribution.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/MonixTangentFiniteDistribution.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/MonixTangentFiniteDistribution.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/MonixTangentFiniteDistribution.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/MonixTangentFiniteDistribution.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/MonixTangentFiniteDistribution.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/MonixTangentFiniteDistribution.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/MonixTangentFiniteDistribution.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/MonixTangentFiniteDistribution.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/MonixTangentFiniteDistribution.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/MonixTangentFiniteDistribution.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/MonixTangentFiniteDistribution.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/MonixTangentFiniteDistribution.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/MonixTangentFiniteDistribution.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/MonixTangentFiniteDistribution.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/learning\/MonixTangentFiniteDistribution.html", "kind" : "object"}, {"name" : "provingground.learning.NextSample", "shortDescription" : "", "members_case class" : [{"label" : "buf", "tail" : "(): BufferedRun[NextSample]", "member" : "provingground.learning.NextSample.buf", "link" : "provingground\/learning\/NextSample.html#buf:provingground.learning.BufferedRun[provingground.learning.NextSample]", "kind" : "def"}, {"label" : "iter", "tail" : "(): Iterator[NextSample]", "member" : "provingground.learning.NextSample.iter", "link" : "provingground\/learning\/NextSample.html#iter:Iterator[provingground.learning.NextSample]", "kind" : "def"}, {"label" : "succ", "tail" : ": NextSample", "member" : "provingground.learning.NextSample.succ", "link" : "provingground\/learning\/NextSample.html#succ:provingground.learning.NextSample", "kind" : "lazy val"}, {"label" : "succFD", "tail" : ": FiniteDistribution[Term]", "member" : "provingground.learning.NextSample.succFD", "link" : "provingground\/learning\/NextSample.html#succFD:provingground.FiniteDistribution[provingground.HoTT.Term]", "kind" : "lazy val"}, {"label" : "shiftedFD", "tail" : "(epsilon: Double): FiniteDistribution[Term]", "member" : "provingground.learning.NextSample.shiftedFD", "link" : "provingground\/learning\/NextSample.html#shiftedFD(epsilon:Double):provingground.FiniteDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "derivativeFD", "tail" : "(p: FiniteDistribution[Term], n: Int): FiniteDistribution[Term]", "member" : "provingground.learning.NextSample.derivativeFD", "link" : "provingground\/learning\/NextSample.html#derivativeFD(p:provingground.FiniteDistribution[provingground.HoTT.Term],n:Int):provingground.FiniteDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "feedBacks", "tail" : ": Map[Term, Double]", "member" : "provingground.learning.NextSample.feedBacks", "link" : "provingground\/learning\/NextSample.html#feedBacks:scala.collection.immutable.Map[provingground.HoTT.Term,Double]", "kind" : "lazy val"}, {"label" : "derFDs", "tail" : ": Map[Term, (FiniteDistribution[Term], FiniteDistribution[Typ[Term]])]", "member" : "provingground.learning.NextSample.derFDs", "link" : "provingground\/learning\/NextSample.html#derFDs:scala.collection.immutable.Map[provingground.HoTT.Term,(provingground.FiniteDistribution[provingground.HoTT.Term],provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]])]", "kind" : "lazy val"}, {"label" : "derSamplesSizes", "tail" : ": Map[Term, Int]", "member" : "provingground.learning.NextSample.derSamplesSizes", "link" : "provingground\/learning\/NextSample.html#derSamplesSizes:Map[provingground.HoTT.Term,Int]", "kind" : "lazy val"}, {"label" : "derivativePD", "tail" : "(tang: FiniteDistribution[Term]): ProbabilityDistribution[Term]", "member" : "provingground.learning.NextSample.derivativePD", "link" : "provingground\/learning\/NextSample.html#derivativePD(tang:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "thmFeedback", "tail" : ": TheoremFeedback", "member" : "provingground.learning.NextSample.thmFeedback", "link" : "provingground\/learning\/NextSample.html#thmFeedback:provingground.learning.TheoremFeedback", "kind" : "lazy val"}, {"label" : "nextTypFD", "tail" : ": FiniteDistribution[Typ[Term]]", "member" : "provingground.learning.NextSample.nextTypFD", "link" : "provingground\/learning\/NextSample.html#nextTypFD:provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "nextTypSamp", "tail" : ": Map[Term, Int]", "member" : "provingground.learning.NextSample.nextTypSamp", "link" : "provingground\/learning\/NextSample.html#nextTypSamp:Map[provingground.HoTT.Term,Int]", "kind" : "lazy val"}, {"label" : "nextFD", "tail" : ": FiniteDistribution[Term]", "member" : "provingground.learning.NextSample.nextFD", "link" : "provingground\/learning\/NextSample.html#nextFD:provingground.FiniteDistribution[provingground.HoTT.Term]", "kind" : "lazy val"}, {"label" : "nextSamp", "tail" : ": Map[Term, Int]", "member" : "provingground.learning.NextSample.nextSamp", "link" : "provingground\/learning\/NextSample.html#nextSamp:Map[provingground.HoTT.Term,Int]", "kind" : "lazy val"}, {"label" : "init", "tail" : ": ProbabilityDistribution[Term]", "member" : "provingground.learning.NextSample.init", "link" : "provingground\/learning\/NextSample.html#init:provingground.ProbabilityDistribution[provingground.HoTT.Term]", "kind" : "lazy val"}, {"member" : "provingground.learning.NextSample#<init>", "error" : "unsupported entity"}, {"label" : "inertia", "tail" : ": Double", "member" : "provingground.learning.NextSample.inertia", "link" : "provingground\/learning\/NextSample.html#inertia:Double", "kind" : "val"}, {"label" : "epsilon", "tail" : ": Double", "member" : "provingground.learning.NextSample.epsilon", "link" : "provingground\/learning\/NextSample.html#epsilon:Double", "kind" : "val"}, {"label" : "derTotalSize", "tail" : ": Int", "member" : "provingground.learning.NextSample.derTotalSize", "link" : "provingground\/learning\/NextSample.html#derTotalSize:Int", "kind" : "val"}, {"label" : "size", "tail" : ": Int", "member" : "provingground.learning.NextSample.size", "link" : "provingground\/learning\/NextSample.html#size:Int", "kind" : "val"}, {"label" : "vars", "tail" : ": Vector[Term]", "member" : "provingground.learning.NextSample.vars", "link" : "provingground\/learning\/NextSample.html#vars:Vector[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "ded", "tail" : ": FineDeducer", "member" : "provingground.learning.NextSample.ded", "link" : "provingground\/learning\/NextSample.html#ded:provingground.learning.FineDeducer", "kind" : "val"}, {"label" : "p", "tail" : ": FiniteDistribution[Term]", "member" : "provingground.learning.NextSample.p", "link" : "provingground\/learning\/NextSample.html#p:provingground.FiniteDistribution[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/NextSample.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/NextSample.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/NextSample.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/NextSample.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/NextSample.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/NextSample.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/NextSample.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/NextSample.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/NextSample.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/NextSample.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/NextSample.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/NextSample.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/NextSample.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/NextSample.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/NextSample.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/NextSample.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/learning\/NextSample.html", "kind" : "case class"}, {"name" : "provingground.learning.NodeCoeffs", "members_trait" : [{"label" : "::", "tail" : "(head: (RecursiveGeneratorNodeFamily[RDom, State, Boat, Y], V)): RecCons[State, Boat, V, RDom, Y]", "member" : "provingground.learning.NodeCoeffs.::", "link" : "provingground\/learning\/NodeCoeffs.html#::(head:(provingground.learning.RecursiveGeneratorNodeFamily[RDom,State,Boat,Y],V)):provingground.learning.NodeCoeffs.RecCons[State,Boat,V,RDom,Y]", "kind" : "def"}, {"label" : "::", "tail" : "(head: (BaseGeneratorNodeFamily[RDom, Y], V)): BaseCons[State, Boat, V, RDom, Y]", "member" : "provingground.learning.NodeCoeffs.::", "link" : "provingground\/learning\/NodeCoeffs.html#::(head:(provingground.learning.BaseGeneratorNodeFamily[RDom,Y],V)):provingground.learning.NodeCoeffs.BaseCons[State,Boat,V,RDom,Y]", "kind" : "def"}, {"label" : "updateAll", "tail" : "(dataSeq: Seq[Value[_ <: HList, _, V]]): NodeCoeffs[State, Boat, V, RDom, Y]", "member" : "provingground.learning.NodeCoeffs.updateAll", "link" : "provingground\/learning\/NodeCoeffs.html#updateAll(dataSeq:Seq[provingground.learning.GeneratorNodeFamily.Value[_<:shapeless.HList,_,V]]):provingground.learning.NodeCoeffs[State,Boat,V,RDom,Y]", "kind" : "def"}, {"label" : "update", "tail" : "(data: Value[D, O, V]): NodeCoeffs[State, Boat, V, RDom, Y]", "member" : "provingground.learning.NodeCoeffs.update", "link" : "provingground\/learning\/NodeCoeffs.html#update[D<:shapeless.HList,O](data:provingground.learning.GeneratorNodeFamily.Value[D,O,V]):provingground.learning.NodeCoeffs[State,Boat,V,RDom,Y]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/NodeCoeffs.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/NodeCoeffs.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/NodeCoeffs.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/NodeCoeffs.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/NodeCoeffs.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/NodeCoeffs.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/NodeCoeffs.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/NodeCoeffs.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/NodeCoeffs.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/NodeCoeffs.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/NodeCoeffs.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/NodeCoeffs.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/NodeCoeffs.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/NodeCoeffs.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/NodeCoeffs.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/NodeCoeffs.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/NodeCoeffs.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/NodeCoeffs.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/NodeCoeffs.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "updateOpt", "tail" : "(data: Value[RDom, Y, V]): Option[NodeCoeffs[State, Boat, V, RDom, Y]]", "member" : "provingground.learning.NodeCoeffs.updateOpt", "link" : "provingground\/learning\/NodeCoeffs.html#updateOpt(data:provingground.learning.GeneratorNodeFamily.Value[RDom,Y,V]):Option[provingground.learning.NodeCoeffs[State,Boat,V,RDom,Y]]", "kind" : "abstract def"}, {"label" : "nodeFamilies", "tail" : ": Set[GeneratorNodeFamily[RDom, Y]]", "member" : "provingground.learning.NodeCoeffs.nodeFamilies", "link" : "provingground\/learning\/NodeCoeffs.html#nodeFamilies:Set[provingground.learning.GeneratorNodeFamily[RDom,Y]]", "kind" : "abstract val"}, {"label" : "output", "tail" : ": RandomVarFamily[RDom, Y]", "member" : "provingground.learning.NodeCoeffs.output", "link" : "provingground\/learning\/NodeCoeffs.html#output:provingground.learning.RandomVarFamily[RDom,Y]", "kind" : "abstract val"}], "shortDescription" : "", "object" : "provingground\/learning\/NodeCoeffs$.html", "members_object" : [{"label" : "RecCons", "tail" : "", "member" : "provingground.learning.NodeCoeffs.RecCons", "link" : "provingground\/learning\/NodeCoeffs$.html#RecCons[State,Boat,V,RDom<:shapeless.HList,Y]extendsNodeCoeffs.Cons[State,Boat,V,RDom,Y]withProductwithSerializable", "kind" : "case class"}, {"label" : "BaseCons", "tail" : "", "member" : "provingground.learning.NodeCoeffs.BaseCons", "link" : "provingground\/learning\/NodeCoeffs$.html#BaseCons[State,Boat,V,RDom<:shapeless.HList,Y]extendsNodeCoeffs.Cons[State,Boat,V,RDom,Y]withProductwithSerializable", "kind" : "case class"}, {"label" : "Cons", "tail" : "", "member" : "provingground.learning.NodeCoeffs.Cons", "link" : "provingground\/learning\/NodeCoeffs$.html#Cons[State,Boat,V,RDom<:shapeless.HList,Y]extendsNodeCoeffs[State,Boat,V,RDom,Y]", "kind" : "sealed trait"}, {"label" : "Target", "tail" : "", "member" : "provingground.learning.NodeCoeffs.Target", "link" : "provingground\/learning\/NodeCoeffs$.html#Target[State,Boat,V,RDom<:shapeless.HList,Y]extendsNodeCoeffs[State,Boat,V,RDom,Y]withProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/NodeCoeffs$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/NodeCoeffs$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/NodeCoeffs$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/NodeCoeffs$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/NodeCoeffs$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/NodeCoeffs$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/NodeCoeffs$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/NodeCoeffs$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/NodeCoeffs$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/NodeCoeffs$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/NodeCoeffs$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/NodeCoeffs$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/NodeCoeffs$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/NodeCoeffs$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/NodeCoeffs$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/NodeCoeffs$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/NodeCoeffs$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/NodeCoeffs$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/NodeCoeffs$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/learning\/NodeCoeffs.html", "kind" : "trait"}, {"name" : "provingground.learning.NodeCoeffSeq", "members_trait" : [{"label" : "updateAll", "tail" : "(dataSeq: Seq[Value[_ <: HList, _, V]]): NodeCoeffSeq[State, Boat, V]", "member" : "provingground.learning.NodeCoeffSeq.updateAll", "link" : "provingground\/learning\/NodeCoeffSeq.html#updateAll(dataSeq:Seq[provingground.learning.GeneratorNodeFamily.Value[_<:shapeless.HList,_,V]]):provingground.learning.NodeCoeffSeq[State,Boat,V]", "kind" : "def"}, {"label" : "+:", "tail" : "(head: NodeCoeffs[State, Boat, V, RDom, Y]): Cons[State, Boat, V, RDom, Y]", "member" : "provingground.learning.NodeCoeffSeq.+:", "link" : "provingground\/learning\/NodeCoeffSeq.html#+:[RDom<:shapeless.HList,Y](head:provingground.learning.NodeCoeffs[State,Boat,V,RDom,Y]):provingground.learning.NodeCoeffSeq.Cons[State,Boat,V,RDom,Y]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/NodeCoeffSeq.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/NodeCoeffSeq.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/NodeCoeffSeq.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/NodeCoeffSeq.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/NodeCoeffSeq.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/NodeCoeffSeq.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/NodeCoeffSeq.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/NodeCoeffSeq.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/NodeCoeffSeq.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/NodeCoeffSeq.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/NodeCoeffSeq.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/NodeCoeffSeq.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/NodeCoeffSeq.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/NodeCoeffSeq.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/NodeCoeffSeq.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/NodeCoeffSeq.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/NodeCoeffSeq.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/NodeCoeffSeq.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/NodeCoeffSeq.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "update", "tail" : "(data: Value[RDom, Y, V]): NodeCoeffSeq[State, Boat, V]", "member" : "provingground.learning.NodeCoeffSeq.update", "link" : "provingground\/learning\/NodeCoeffSeq.html#update[RDom<:shapeless.HList,Y](data:provingground.learning.GeneratorNodeFamily.Value[RDom,Y,V]):provingground.learning.NodeCoeffSeq[State,Boat,V]", "kind" : "abstract def"}, {"label" : "outputs", "tail" : ": Vector[RandomVarFamily[_ <: HList, _]]", "member" : "provingground.learning.NodeCoeffSeq.outputs", "link" : "provingground\/learning\/NodeCoeffSeq.html#outputs:Vector[provingground.learning.RandomVarFamily[_<:shapeless.HList,_]]", "kind" : "abstract val"}, {"label" : "find", "tail" : "(randomVar: RandomVarFamily[RDom, Y]): Option[NodeCoeffs[State, Boat, V, RDom, Y]]", "member" : "provingground.learning.NodeCoeffSeq.find", "link" : "provingground\/learning\/NodeCoeffSeq.html#find[RDom<:shapeless.HList,Y](randomVar:provingground.learning.RandomVarFamily[RDom,Y]):Option[provingground.learning.NodeCoeffs[State,Boat,V,RDom,Y]]", "kind" : "abstract def"}, {"label" : "nodeFamilies", "tail" : ": Set[GeneratorNodeFamily[_ <: HList, _]]", "member" : "provingground.learning.NodeCoeffSeq.nodeFamilies", "link" : "provingground\/learning\/NodeCoeffSeq.html#nodeFamilies:Set[provingground.learning.GeneratorNodeFamily[_<:shapeless.HList,_]]", "kind" : "abstract val"}], "shortDescription" : "", "object" : "provingground\/learning\/NodeCoeffSeq$.html", "members_object" : [{"label" : "Cons", "tail" : "", "member" : "provingground.learning.NodeCoeffSeq.Cons", "link" : "provingground\/learning\/NodeCoeffSeq$.html#Cons[State,Boat,V,RDom<:shapeless.HList,Y]extendsNodeCoeffSeq[State,Boat,V]withProductwithSerializable", "kind" : "case class"}, {"label" : "Empty", "tail" : "", "member" : "provingground.learning.NodeCoeffSeq.Empty", "link" : "provingground\/learning\/NodeCoeffSeq$.html#Empty[State,Boat,V]extendsNodeCoeffSeq[State,Boat,V]withProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/NodeCoeffSeq$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/NodeCoeffSeq$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/NodeCoeffSeq$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/NodeCoeffSeq$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/NodeCoeffSeq$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/NodeCoeffSeq$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/NodeCoeffSeq$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/NodeCoeffSeq$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/NodeCoeffSeq$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/NodeCoeffSeq$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/NodeCoeffSeq$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/NodeCoeffSeq$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/NodeCoeffSeq$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/NodeCoeffSeq$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/NodeCoeffSeq$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/NodeCoeffSeq$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/NodeCoeffSeq$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/NodeCoeffSeq$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/NodeCoeffSeq$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/learning\/NodeCoeffSeq.html", "kind" : "trait"}, {"name" : "provingground.learning.PickledTermPopulation", "shortDescription" : "", "object" : "provingground\/learning\/PickledTermPopulation$.html", "members_object" : [{"label" : "rw", "tail" : "(): upickle.default.ReadWriter[PickledTermPopulation]", "member" : "provingground.learning.PickledTermPopulation.rw", "link" : "provingground\/learning\/PickledTermPopulation$.html#rw:upickle.default.ReadWriter[provingground.learning.PickledTermPopulation]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/PickledTermPopulation$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/PickledTermPopulation$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/PickledTermPopulation$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/PickledTermPopulation$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/PickledTermPopulation$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/PickledTermPopulation$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/PickledTermPopulation$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/PickledTermPopulation$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/PickledTermPopulation$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/PickledTermPopulation$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/PickledTermPopulation$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/PickledTermPopulation$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/PickledTermPopulation$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/PickledTermPopulation$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/PickledTermPopulation$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/PickledTermPopulation$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/PickledTermPopulation$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/PickledTermPopulation$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/PickledTermPopulation$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "unpickle", "tail" : "(): TermPopulation", "member" : "provingground.learning.PickledTermPopulation.unpickle", "link" : "provingground\/learning\/PickledTermPopulation.html#unpickle:provingground.learning.TermPopulation", "kind" : "def"}, {"member" : "provingground.learning.PickledTermPopulation#<init>", "error" : "unsupported entity"}, {"label" : "piWeight", "tail" : ": Double", "member" : "provingground.learning.PickledTermPopulation.piWeight", "link" : "provingground\/learning\/PickledTermPopulation.html#piWeight:Double", "kind" : "val"}, {"label" : "lambdaWeight", "tail" : ": Double", "member" : "provingground.learning.PickledTermPopulation.lambdaWeight", "link" : "provingground\/learning\/PickledTermPopulation.html#lambdaWeight:Double", "kind" : "val"}, {"label" : "vars", "tail" : ": Vector[PickledWeighted]", "member" : "provingground.learning.PickledTermPopulation.vars", "link" : "provingground\/learning\/PickledTermPopulation.html#vars:Vector[provingground.PickledWeighted]", "kind" : "val"}, {"label" : "thmsByProofs", "tail" : ": Vector[PickledWeighted]", "member" : "provingground.learning.PickledTermPopulation.thmsByProofs", "link" : "provingground\/learning\/PickledTermPopulation.html#thmsByProofs:Vector[provingground.PickledWeighted]", "kind" : "val"}, {"label" : "types", "tail" : ": Vector[PickledWeighted]", "member" : "provingground.learning.PickledTermPopulation.types", "link" : "provingground\/learning\/PickledTermPopulation.html#types:Vector[provingground.PickledWeighted]", "kind" : "val"}, {"label" : "termsByType", "tail" : ": Map[String, Vector[PickledWeighted]]", "member" : "provingground.learning.PickledTermPopulation.termsByType", "link" : "provingground\/learning\/PickledTermPopulation.html#termsByType:Map[String,Vector[provingground.PickledWeighted]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/PickledTermPopulation.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/PickledTermPopulation.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/PickledTermPopulation.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/PickledTermPopulation.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/PickledTermPopulation.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/PickledTermPopulation.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/PickledTermPopulation.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/PickledTermPopulation.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/PickledTermPopulation.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/PickledTermPopulation.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/PickledTermPopulation.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/PickledTermPopulation.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/PickledTermPopulation.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/PickledTermPopulation.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/PickledTermPopulation.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/PickledTermPopulation.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/learning\/PickledTermPopulation.html", "kind" : "object"}, {"name" : "provingground.learning.ProverTasks", "shortDescription" : "", "object" : "provingground\/learning\/ProverTasks$.html", "members_object" : [{"label" : "stabHalt", "tail" : "(x: FiniteDistribution[Term], y: FiniteDistribution[Term], level: Double): Boolean", "member" : "provingground.learning.ProverTasks.stabHalt", "link" : "provingground\/learning\/ProverTasks$.html#stabHalt(x:provingground.FiniteDistribution[provingground.HoTT.Term],y:provingground.FiniteDistribution[provingground.HoTT.Term],level:Double):Boolean", "kind" : "def"}, {"label" : "newNeighbours", "tail" : "(fd: FiniteDistribution[A], pert: Vector[A], epsilon: Double): Vector[FiniteDistribution[A]]", "member" : "provingground.learning.ProverTasks.newNeighbours", "link" : "provingground\/learning\/ProverTasks$.html#newNeighbours[A](fd:provingground.FiniteDistribution[A],pert:Vector[A],epsilon:Double):scala.collection.immutable.Vector[provingground.FiniteDistribution[A]]", "kind" : "def"}, {"label" : "selfNeighbours", "tail" : "(fd: FiniteDistribution[A], epsilon: Double): Vector[FiniteDistribution[A]]", "member" : "provingground.learning.ProverTasks.selfNeighbours", "link" : "provingground\/learning\/ProverTasks$.html#selfNeighbours[A](fd:provingground.FiniteDistribution[A],epsilon:Double):scala.collection.immutable.Vector[provingground.FiniteDistribution[A]]", "kind" : "def"}, {"label" : "quasiGradFlowTask", "tail" : "(base: A, neighMap: (A) ⇒ Vector[A], derTask: (A, A) ⇒ Task[Double], halt: (A, A) ⇒ Boolean)(ls: VectorSpace[A, Double]): Task[A]", "member" : "provingground.learning.ProverTasks.quasiGradFlowTask", "link" : "provingground\/learning\/ProverTasks$.html#quasiGradFlowTask[A](base:A,neighMap:A=>Vector[A],derTask:(A,A)=>monix.eval.Task[Double],halt:(A,A)=>Boolean)(implicitls:spire.algebra.VectorSpace[A,Double]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "quasiGradShift", "tail" : "(base: A, neighbours: Vector[A], derTask: (A, A) ⇒ Task[Double])(ls: VectorSpace[A, Double]): Task[A]", "member" : "provingground.learning.ProverTasks.quasiGradShift", "link" : "provingground\/learning\/ProverTasks$.html#quasiGradShift[A](base:A,neighbours:Vector[A],derTask:(A,A)=>monix.eval.Task[Double])(implicitls:spire.algebra.VectorSpace[A,Double]):monix.eval.Task[A]", "kind" : "def"}, {"label" : "pfMatchDiff", "tail" : "(ev: (FiniteDistribution[Term]) ⇒ Task[FiniteDistribution[Term]], typs: Task[FiniteDistribution[Typ[Term]]], cutoff: Double, wt: Double)(gen0: FiniteDistribution[Term], gen1: FiniteDistribution[Term]): Task[Double]", "member" : "provingground.learning.ProverTasks.pfMatchDiff", "link" : "provingground\/learning\/ProverTasks$.html#pfMatchDiff(ev:provingground.FiniteDistribution[provingground.HoTT.Term]=>monix.eval.Task[provingground.FiniteDistribution[provingground.HoTT.Term]],typs:monix.eval.Task[provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]],cutoff:Double,wt:Double)(gen0:provingground.FiniteDistribution[provingground.HoTT.Term],gen1:provingground.FiniteDistribution[provingground.HoTT.Term]):monix.eval.Task[Double]", "kind" : "def"}, {"label" : "pfMatch", "tail" : "(ev: (FiniteDistribution[Term]) ⇒ Task[FiniteDistribution[Term]], typs: Task[FiniteDistribution[Typ[Term]]], wt: Double)(gen: FiniteDistribution[Term]): Task[Double]", "member" : "provingground.learning.ProverTasks.pfMatch", "link" : "provingground\/learning\/ProverTasks$.html#pfMatch(ev:provingground.FiniteDistribution[provingground.HoTT.Term]=>monix.eval.Task[provingground.FiniteDistribution[provingground.HoTT.Term]],typs:monix.eval.Task[provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]],wt:Double)(gen:provingground.FiniteDistribution[provingground.HoTT.Term]):monix.eval.Task[Double]", "kind" : "def"}, {"label" : "minOn", "tail" : "(fd: FiniteDistribution[A], minValue: Double, supp: Set[A]): FiniteDistribution[A]", "member" : "provingground.learning.ProverTasks.minOn", "link" : "provingground\/learning\/ProverTasks$.html#minOn[A](fd:provingground.FiniteDistribution[A],minValue:Double,supp:Set[A]):provingground.FiniteDistribution[A]", "kind" : "def"}, {"label" : "kl", "tail" : "(p: FiniteDistribution[A], q: FiniteDistribution[A]): Double", "member" : "provingground.learning.ProverTasks.kl", "link" : "provingground\/learning\/ProverTasks$.html#kl[A](p:provingground.FiniteDistribution[A],q:provingground.FiniteDistribution[A]):Double", "kind" : "def"}, {"label" : "h", "tail" : "(fd: FiniteDistribution[A]): Double", "member" : "provingground.learning.ProverTasks.h", "link" : "provingground\/learning\/ProverTasks$.html#h[A](fd:provingground.FiniteDistribution[A]):Double", "kind" : "def"}, {"label" : "branchedGatherTask", "tail" : "(tsk: Task[X], results: (Int) ⇒ (X) ⇒ Task[Y], combine: (Y, Y) ⇒ Y, spawn: (Int) ⇒ (X) ⇒ Task[Vector[Task[X]]], depth: Int): Task[Y]", "member" : "provingground.learning.ProverTasks.branchedGatherTask", "link" : "provingground\/learning\/ProverTasks$.html#branchedGatherTask[X,Y](tsk:monix.eval.Task[X],results:Int=>(X=>monix.eval.Task[Y]),combine:(Y,Y)=>Y,spawn:Int=>(X=>monix.eval.Task[Vector[monix.eval.Task[X]]]),depth:Int):monix.eval.Task[Y]", "kind" : "def"}, {"label" : "breadthFirstTask", "tail" : "(tv: Task[Vector[Task[X]]], p: (X) ⇒ Option[Y], spawn: (Int) ⇒ (X) ⇒ Task[Vector[Task[X]]], depth: Int): Task[Option[Y]]", "member" : "provingground.learning.ProverTasks.breadthFirstTask", "link" : "provingground\/learning\/ProverTasks$.html#breadthFirstTask[X,Y](tv:monix.eval.Task[Vector[monix.eval.Task[X]]],p:X=>Option[Y],spawn:Int=>(X=>monix.eval.Task[Vector[monix.eval.Task[X]]]),depth:Int):monix.eval.Task[Option[Y]]", "kind" : "def"}, {"label" : "inTaskVecTask", "tail" : "(tv: Task[Vector[Task[X]]], p: (X) ⇒ Option[Y]): Task[Option[Y]]", "member" : "provingground.learning.ProverTasks.inTaskVecTask", "link" : "provingground\/learning\/ProverTasks$.html#inTaskVecTask[X,Y](tv:monix.eval.Task[Vector[monix.eval.Task[X]]],p:X=>Option[Y]):monix.eval.Task[Option[Y]]", "kind" : "def"}, {"label" : "prsmEntMemoTask", "tail" : "(termsTask: Task[FiniteDistribution[Term]], typsTask: Task[FiniteDistribution[Typ[Term]]], scale: Double, vars: Vector[Term]): Task[(Vector[(Term, Double)], Set[Term], Set[Typ[Term]])]", "member" : "provingground.learning.ProverTasks.prsmEntMemoTask", "link" : "provingground\/learning\/ProverTasks$.html#prsmEntMemoTask(termsTask:monix.eval.Task[provingground.FiniteDistribution[provingground.HoTT.Term]],typsTask:monix.eval.Task[provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]],scale:Double,vars:Vector[provingground.HoTT.Term]):monix.eval.Task[(Vector[(provingground.HoTT.Term,Double)],Set[provingground.HoTT.Term],Set[provingground.HoTT.Typ[provingground.HoTT.Term]])]", "kind" : "def"}, {"label" : "prsmEntTask", "tail" : "(termsTask: Task[FiniteDistribution[Term]], typsTask: Task[FiniteDistribution[Typ[Term]]], scale: Double, vars: Vector[Term]): Task[Vector[(Term, Double)]]", "member" : "provingground.learning.ProverTasks.prsmEntTask", "link" : "provingground\/learning\/ProverTasks$.html#prsmEntTask(termsTask:monix.eval.Task[provingground.FiniteDistribution[provingground.HoTT.Term]],typsTask:monix.eval.Task[provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]],scale:Double,vars:Vector[provingground.HoTT.Term]):monix.eval.Task[Vector[(provingground.HoTT.Term,Double)]]", "kind" : "def"}, {"label" : "hExp", "tail" : "(p: Double, q: Double, scale: Double): Double", "member" : "provingground.learning.ProverTasks.hExp", "link" : "provingground\/learning\/ProverTasks$.html#hExp(p:Double,q:Double,scale:Double):Double", "kind" : "def"}, {"label" : "h0", "tail" : "(p: Double, q: Double): Double", "member" : "provingground.learning.ProverTasks.h0", "link" : "provingground\/learning\/ProverTasks$.html#h0(p:Double,q:Double):Double", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/ProverTasks$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/ProverTasks$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/ProverTasks$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/ProverTasks$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/ProverTasks$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/ProverTasks$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/ProverTasks$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/ProverTasks$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/ProverTasks$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/ProverTasks$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/ProverTasks$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/ProverTasks$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/ProverTasks$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/ProverTasks$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/ProverTasks$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/ProverTasks$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/ProverTasks$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/ProverTasks$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/ProverTasks$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.learning.RandomVar", "shortDescription" : "A formal Random Variable up to equality of distribution.", "object" : "provingground\/learning\/RandomVar$.html", "members_class" : [{"member" : "provingground.learning.RandomVar#<init>", "error" : "unsupported entity"}, {"label" : "range", "tail" : ": Sort[_, O]", "member" : "provingground.learning.RandomVar.range", "link" : "provingground\/learning\/RandomVar.html#range:provingground.learning.Sort[_,O]", "kind" : "val"}, {"label" : "at", "tail" : "(x: HNil): AtCoord[HNil, O]", "member" : "provingground.learning.RandomVarFamily.at", "link" : "provingground\/learning\/RandomVar.html#at(x:Dom):provingground.learning.RandomVar.AtCoord[Dom,O]", "kind" : "def"}, {"label" : "target", "tail" : "(): Target[State, Boat, V, HNil, Y]", "member" : "provingground.learning.RandomVarFamily.target", "link" : "provingground\/learning\/RandomVar.html#target[State,Boat,V,Y>:O]:provingground.learning.NodeCoeffs.Target[State,Boat,V,Dom,Y]", "kind" : "def"}, {"label" : "rangeFamily", "tail" : ": (HNil) ⇒ Sort[_, O]", "member" : "provingground.learning.RandomVarFamily.rangeFamily", "link" : "provingground\/learning\/RandomVar.html#rangeFamily:Dom=>provingground.learning.Sort[_,O]", "kind" : "val"}, {"label" : "polyDomain", "tail" : ": RandomVarList[HNil]", "member" : "provingground.learning.RandomVarFamily.polyDomain", "link" : "provingground\/learning\/RandomVar.html#polyDomain:provingground.learning.RandomVarList[Dom]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/RandomVar.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/RandomVar.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/RandomVar.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/RandomVar.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/RandomVar.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/RandomVar.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/RandomVar.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/RandomVar.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/RandomVar.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/RandomVar.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/RandomVar.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/RandomVar.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/RandomVar.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/RandomVar.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/RandomVar.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/RandomVar.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/RandomVar.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/RandomVar.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/RandomVar.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "Value", "tail" : "", "member" : "provingground.learning.RandomVar.Value", "link" : "provingground\/learning\/RandomVar$.html#Value[O,D[_]]extendsProductwithSerializable", "kind" : "case class"}, {"label" : "AtCoord", "tail" : "", "member" : "provingground.learning.RandomVar.AtCoord", "link" : "provingground\/learning\/RandomVar$.html#AtCoord[Dom<:shapeless.HList,+O]extendsRandomVar[O]withProductwithSerializable", "kind" : "case class"}, {"label" : "SimpleFamily", "tail" : "", "member" : "provingground.learning.RandomVar.SimpleFamily", "link" : "provingground\/learning\/RandomVar$.html#SimpleFamily[U,O]extendsRandomVarFamily[U::shapeless.HNil,O]", "kind" : "class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/RandomVar$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/RandomVar$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/RandomVar$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/RandomVar$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/RandomVar$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/RandomVar$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/RandomVar$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/RandomVar$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/RandomVar$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/RandomVar$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/RandomVar$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/RandomVar$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/RandomVar$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/RandomVar$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/RandomVar$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/RandomVar$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/RandomVar$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/RandomVar$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/RandomVar$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/learning\/RandomVar.html", "kind" : "class"}, {"name" : "provingground.learning.RandomVarFamily", "shortDescription" : "A formal family of Random Variables up to equality of distribution.", "object" : "provingground\/learning\/RandomVarFamily$.html", "members_class" : [{"label" : "at", "tail" : "(x: Dom): AtCoord[Dom, O]", "member" : "provingground.learning.RandomVarFamily.at", "link" : "provingground\/learning\/RandomVarFamily.html#at(x:Dom):provingground.learning.RandomVar.AtCoord[Dom,O]", "kind" : "def"}, {"label" : "target", "tail" : "(): Target[State, Boat, V, Dom, Y]", "member" : "provingground.learning.RandomVarFamily.target", "link" : "provingground\/learning\/RandomVarFamily.html#target[State,Boat,V,Y>:O]:provingground.learning.NodeCoeffs.Target[State,Boat,V,Dom,Y]", "kind" : "def"}, {"member" : "provingground.learning.RandomVarFamily#<init>", "error" : "unsupported entity"}, {"label" : "rangeFamily", "tail" : ": (Dom) ⇒ Sort[_, O]", "member" : "provingground.learning.RandomVarFamily.rangeFamily", "link" : "provingground\/learning\/RandomVarFamily.html#rangeFamily:Dom=>provingground.learning.Sort[_,O]", "kind" : "val"}, {"label" : "polyDomain", "tail" : ": RandomVarList[Dom]", "member" : "provingground.learning.RandomVarFamily.polyDomain", "link" : "provingground\/learning\/RandomVarFamily.html#polyDomain:provingground.learning.RandomVarList[Dom]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/RandomVarFamily.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/RandomVarFamily.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/RandomVarFamily.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/RandomVarFamily.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/RandomVarFamily.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/RandomVarFamily.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/RandomVarFamily.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/RandomVarFamily.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/RandomVarFamily.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/RandomVarFamily.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/RandomVarFamily.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/RandomVarFamily.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/RandomVarFamily.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/RandomVarFamily.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/RandomVarFamily.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/RandomVarFamily.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/RandomVarFamily.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/RandomVarFamily.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/RandomVarFamily.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "Value", "tail" : "", "member" : "provingground.learning.RandomVarFamily.Value", "link" : "provingground\/learning\/RandomVarFamily$.html#Value[Dom<:shapeless.HList,O,D[_]]extendsProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/RandomVarFamily$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/RandomVarFamily$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/RandomVarFamily$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/RandomVarFamily$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/RandomVarFamily$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/RandomVarFamily$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/RandomVarFamily$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/RandomVarFamily$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/RandomVarFamily$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/RandomVarFamily$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/RandomVarFamily$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/RandomVarFamily$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/RandomVarFamily$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/RandomVarFamily$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/RandomVarFamily$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/RandomVarFamily$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/RandomVarFamily$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/RandomVarFamily$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/RandomVarFamily$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/learning\/RandomVarFamily.html", "kind" : "class"}, {"name" : "provingground.learning.RandomVarList", "members_trait" : [{"label" : "::", "tail" : "(that: RandomVar[X]): Cons[X, U]", "member" : "provingground.learning.RandomVarList.::", "link" : "provingground\/learning\/RandomVarList.html#::[X](that:provingground.learning.RandomVar[X]):provingground.learning.RandomVarList.Cons[X,U]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/RandomVarList.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/RandomVarList.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/RandomVarList.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/RandomVarList.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/RandomVarList.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/RandomVarList.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/RandomVarList.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/RandomVarList.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/RandomVarList.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/RandomVarList.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/RandomVarList.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/RandomVarList.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/RandomVarList.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/RandomVarList.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/RandomVarList.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/RandomVarList.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/RandomVarList.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/RandomVarList.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/RandomVarList.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "List of random variables, e.g.", "object" : "provingground\/learning\/RandomVarList$.html", "members_object" : [{"label" : "Cons", "tail" : "", "member" : "provingground.learning.RandomVarList.Cons", "link" : "provingground\/learning\/RandomVarList$.html#Cons[X,U<:shapeless.HList]extendsRandomVarList[X::U]withProductwithSerializable", "kind" : "case class"}, {"label" : "Nil", "tail" : "", "member" : "provingground.learning.RandomVarList.Nil", "link" : "provingground\/learning\/RandomVarList$.html#Nil", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/RandomVarList$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/RandomVarList$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/RandomVarList$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/RandomVarList$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/RandomVarList$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/RandomVarList$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/RandomVarList$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/RandomVarList$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/RandomVarList$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/RandomVarList$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/RandomVarList$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/RandomVarList$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/RandomVarList$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/RandomVarList$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/RandomVarList$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/RandomVarList$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/RandomVarList$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/RandomVarList$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/RandomVarList$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/learning\/RandomVarList.html", "kind" : "trait"}, {"name" : "provingground.learning.RandomVarMemo", "shortDescription" : "", "members_class" : [{"label" : "valueAt", "tail" : "(randomVarFmly: RandomVarFamily[Dom, T], fullArg: Dom): D[T]", "member" : "provingground.learning.RandomVarMemo.valueAt", "link" : "provingground\/learning\/RandomVarMemo.html#valueAt[Dom<:shapeless.HList,T](randomVarFmly:provingground.learning.RandomVarFamily[Dom,T],fullArg:Dom):D[T]", "kind" : "def"}, {"label" : "value", "tail" : "(randomVar: RandomVar[T]): D[T]", "member" : "provingground.learning.RandomVarMemo.value", "link" : "provingground\/learning\/RandomVarMemo.html#value[T](randomVar:provingground.learning.RandomVar[T]):D[T]", "kind" : "def"}, {"member" : "provingground.learning.RandomVarMemo#<init>", "error" : "unsupported entity"}, {"label" : "randomVarVals", "tail" : ": Set[Value[_, D]]", "member" : "provingground.learning.RandomVarMemo.randomVarVals", "link" : "provingground\/learning\/RandomVarMemo.html#randomVarVals:Set[provingground.learning.RandomVar.Value[_,D]]", "kind" : "val"}, {"label" : "fullArgSet", "tail" : "(l: SortList[U], varGroups: Map[Sort[_, _], Set[RandomVar[_]]])(supp: Support[D]): Set[U]", "member" : "provingground.learning.RandomVarValues.fullArgSet", "link" : "provingground\/learning\/RandomVarMemo.html#fullArgSet[U<:shapeless.HList](l:provingground.learning.SortList[U],varGroups:Map[provingground.learning.Sort[_,_],Set[provingground.learning.RandomVar[_]]])(implicitsupp:provingground.learning.Support[D]):Set[U]", "kind" : "def"}, {"label" : "support", "tail" : "(randomVar: RandomVar[T])(supp: Support[D]): Set[T]", "member" : "provingground.learning.RandomVarValues.support", "link" : "provingground\/learning\/RandomVarMemo.html#support[T](randomVar:provingground.learning.RandomVar[T])(implicitsupp:provingground.learning.Support[D]):Set[T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/RandomVarMemo.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/RandomVarMemo.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/RandomVarMemo.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/RandomVarMemo.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/RandomVarMemo.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/RandomVarMemo.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/RandomVarMemo.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/RandomVarMemo.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/RandomVarMemo.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/RandomVarMemo.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/RandomVarMemo.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/RandomVarMemo.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/RandomVarMemo.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/RandomVarMemo.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/RandomVarMemo.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/RandomVarMemo.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/RandomVarMemo.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/RandomVarMemo.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/RandomVarMemo.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/learning\/RandomVarMemo.html", "kind" : "class"}, {"name" : "provingground.learning.RandomVarValues", "members_trait" : [{"label" : "fullArgSet", "tail" : "(l: SortList[U], varGroups: Map[Sort[_, _], Set[RandomVar[_]]])(supp: Support[D]): Set[U]", "member" : "provingground.learning.RandomVarValues.fullArgSet", "link" : "provingground\/learning\/RandomVarValues.html#fullArgSet[U<:shapeless.HList](l:provingground.learning.SortList[U],varGroups:Map[provingground.learning.Sort[_,_],Set[provingground.learning.RandomVar[_]]])(implicitsupp:provingground.learning.Support[D]):Set[U]", "kind" : "def"}, {"label" : "support", "tail" : "(randomVar: RandomVar[T])(supp: Support[D]): Set[T]", "member" : "provingground.learning.RandomVarValues.support", "link" : "provingground\/learning\/RandomVarValues.html#support[T](randomVar:provingground.learning.RandomVar[T])(implicitsupp:provingground.learning.Support[D]):Set[T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/RandomVarValues.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/RandomVarValues.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/RandomVarValues.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/RandomVarValues.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/RandomVarValues.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/RandomVarValues.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/RandomVarValues.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/RandomVarValues.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/RandomVarValues.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/RandomVarValues.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/RandomVarValues.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/RandomVarValues.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/RandomVarValues.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/RandomVarValues.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/RandomVarValues.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/RandomVarValues.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/RandomVarValues.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/RandomVarValues.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/RandomVarValues.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "value", "tail" : "(randomVar: RandomVar[T]): D[T]", "member" : "provingground.learning.RandomVarValues.value", "link" : "provingground\/learning\/RandomVarValues.html#value[T](randomVar:provingground.learning.RandomVar[T]):D[T]", "kind" : "abstract def"}, {"label" : "valueAt", "tail" : "(randomVarFmly: RandomVarFamily[Dom, T], fullArg: Dom): D[T]", "member" : "provingground.learning.RandomVarValues.valueAt", "link" : "provingground\/learning\/RandomVarValues.html#valueAt[Dom<:shapeless.HList,T](randomVarFmly:provingground.learning.RandomVarFamily[Dom,T],fullArg:Dom):D[T]", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "provingground\/learning\/RandomVarValues.html", "kind" : "trait"}, {"name" : "provingground.learning.RandomVector", "shortDescription" : "distributions of vectors from a base distribution", "members_case class" : [{"label" : "cons", "tail" : "(): ZipMap[X, Vector[X], Vector[X]]", "member" : "provingground.learning.RandomVector.cons", "link" : "provingground\/learning\/RandomVector.html#cons:provingground.learning.GeneratorNode.ZipMap[X,Vector[X],Vector[X]]", "kind" : "def"}, {"label" : "empty", "tail" : "(): Atom[Vector[X]]", "member" : "provingground.learning.RandomVector.empty", "link" : "provingground\/learning\/RandomVector.html#empty:provingground.learning.GeneratorNode.Atom[Vector[X]]", "kind" : "def"}, {"member" : "provingground.learning.RandomVector#<init>", "error" : "unsupported entity"}, {"label" : "base", "tail" : ": RandomVar[X]", "member" : "provingground.learning.RandomVector.base", "link" : "provingground\/learning\/RandomVector.html#base:provingground.learning.RandomVar[X]", "kind" : "val"}, {"label" : "range", "tail" : ": Sort[_, Vector[X]]", "member" : "provingground.learning.RandomVar.range", "link" : "provingground\/learning\/RandomVector.html#range:provingground.learning.Sort[_,O]", "kind" : "val"}, {"label" : "at", "tail" : "(x: HNil): AtCoord[HNil, Vector[X]]", "member" : "provingground.learning.RandomVarFamily.at", "link" : "provingground\/learning\/RandomVector.html#at(x:Dom):provingground.learning.RandomVar.AtCoord[Dom,O]", "kind" : "def"}, {"label" : "target", "tail" : "(): Target[State, Boat, V, HNil, Y]", "member" : "provingground.learning.RandomVarFamily.target", "link" : "provingground\/learning\/RandomVector.html#target[State,Boat,V,Y>:O]:provingground.learning.NodeCoeffs.Target[State,Boat,V,Dom,Y]", "kind" : "def"}, {"label" : "rangeFamily", "tail" : ": (HNil) ⇒ Sort[_, Vector[X]]", "member" : "provingground.learning.RandomVarFamily.rangeFamily", "link" : "provingground\/learning\/RandomVector.html#rangeFamily:Dom=>provingground.learning.Sort[_,O]", "kind" : "val"}, {"label" : "polyDomain", "tail" : ": RandomVarList[HNil]", "member" : "provingground.learning.RandomVarFamily.polyDomain", "link" : "provingground\/learning\/RandomVector.html#polyDomain:provingground.learning.RandomVarList[Dom]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/RandomVector.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/RandomVector.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/RandomVector.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/RandomVector.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/RandomVector.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/RandomVector.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/RandomVector.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/RandomVector.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/RandomVector.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/RandomVector.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/RandomVector.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/RandomVector.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/RandomVector.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/RandomVector.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/RandomVector.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/RandomVector.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/learning\/RandomVector.html", "kind" : "case class"}, {"name" : "provingground.learning.RecursiveGeneratorNode", "members_trait" : [{"label" : "|", "tail" : "(condition: Sort[S, T], output: RandomVar[T]): RecursiveGeneratorNode[State, Boat, T]", "member" : "provingground.learning.RecursiveGeneratorNode.|", "link" : "provingground\/learning\/RecursiveGeneratorNode.html#|[S>:O,T](condition:provingground.learning.Sort[S,T],output:provingground.learning.RandomVar[T]):provingground.learning.RecursiveGeneratorNode[State,Boat,T]", "kind" : "def"}, {"label" : "outputFamily", "tail" : ": RandomVar[O]", "member" : "provingground.learning.GeneratorNode.outputFamily", "link" : "provingground\/learning\/RecursiveGeneratorNode.html#outputFamily:provingground.learning.RandomVar[O]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/RecursiveGeneratorNode.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/RecursiveGeneratorNode.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/RecursiveGeneratorNode.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/RecursiveGeneratorNode.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/RecursiveGeneratorNode.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/RecursiveGeneratorNode.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/RecursiveGeneratorNode.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/RecursiveGeneratorNode.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/RecursiveGeneratorNode.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/RecursiveGeneratorNode.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/RecursiveGeneratorNode.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/RecursiveGeneratorNode.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/RecursiveGeneratorNode.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/RecursiveGeneratorNode.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/RecursiveGeneratorNode.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/RecursiveGeneratorNode.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/RecursiveGeneratorNode.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/RecursiveGeneratorNode.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/RecursiveGeneratorNode.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "output", "tail" : ": RandomVar[O]", "member" : "provingground.learning.GeneratorNode.output", "link" : "provingground\/learning\/RecursiveGeneratorNode.html#output:provingground.learning.RandomVar[O]", "kind" : "abstract val"}], "shortDescription" : "", "trait" : "provingground\/learning\/RecursiveGeneratorNode.html", "kind" : "trait"}, {"name" : "provingground.learning.RecursiveGeneratorNodeFamily", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/RecursiveGeneratorNodeFamily.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/RecursiveGeneratorNodeFamily.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/RecursiveGeneratorNodeFamily.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/RecursiveGeneratorNodeFamily.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/RecursiveGeneratorNodeFamily.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/RecursiveGeneratorNodeFamily.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/RecursiveGeneratorNodeFamily.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/RecursiveGeneratorNodeFamily.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/RecursiveGeneratorNodeFamily.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/RecursiveGeneratorNodeFamily.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/RecursiveGeneratorNodeFamily.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/RecursiveGeneratorNodeFamily.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/RecursiveGeneratorNodeFamily.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/RecursiveGeneratorNodeFamily.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/RecursiveGeneratorNodeFamily.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/RecursiveGeneratorNodeFamily.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/RecursiveGeneratorNodeFamily.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/RecursiveGeneratorNodeFamily.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/RecursiveGeneratorNodeFamily.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "outputFamily", "tail" : ": RandomVarFamily[Dom, O]", "member" : "provingground.learning.GeneratorNodeFamily.outputFamily", "link" : "provingground\/learning\/RecursiveGeneratorNodeFamily.html#outputFamily:provingground.learning.RandomVarFamily[Dom,O]", "kind" : "abstract val"}], "shortDescription" : "", "trait" : "provingground\/learning\/RecursiveGeneratorNodeFamily.html", "kind" : "trait"}, {"name" : "provingground.learning.Representation", "shortDescription" : "", "object" : "provingground\/learning\/Representation$.html", "members_object" : [{"label" : "VecRepVec", "tail" : "(): LinearStructure[Representation[T]]", "member" : "provingground.learning.Representation.VecRepVec", "link" : "provingground\/learning\/Representation$.html#VecRepVec[T]:provingground.LinearStructure[provingground.learning.Representation[T]]", "kind" : "implicit def"}, {"label" : "empty", "tail" : "(): Representation[T]", "member" : "provingground.learning.Representation.empty", "link" : "provingground\/learning\/Representation$.html#empty[T]:provingground.learning.Representation[T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/Representation$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/Representation$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/Representation$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/Representation$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/Representation$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/Representation$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/Representation$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/Representation$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/Representation$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/Representation$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/Representation$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/Representation$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/Representation$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/Representation$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/Representation$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/Representation$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/Representation$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/Representation$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/Representation$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "toString", "tail" : "(): String", "member" : "provingground.learning.Representation.toString", "link" : "provingground\/learning\/Representation.html#toString():String", "kind" : "def"}, {"label" : "feedback", "tail" : "(baseweights: (T) ⇒ Double, damp: Double): FiniteDistribution[T]", "member" : "provingground.learning.Representation.feedback", "link" : "provingground\/learning\/Representation.html#feedback(baseweights:T=>Double,damp:Double):provingground.FiniteDistribution[T]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (T) ⇒ S): Representation[S]", "member" : "provingground.learning.Representation.map", "link" : "provingground\/learning\/Representation.html#map[S](f:T=>S):provingground.learning.Representation[S]", "kind" : "def"}, {"label" : "++", "tail" : "(that: Representation[T]): Representation[T]", "member" : "provingground.learning.Representation.++", "link" : "provingground\/learning\/Representation.html#++(that:provingground.learning.Representation[T]):provingground.learning.Representation[T]", "kind" : "def"}, {"label" : "+", "tail" : "(elem: T, vect: Vector[Double]): Representation[T]", "member" : "provingground.learning.Representation.+", "link" : "provingground\/learning\/Representation.html#+(elem:T,vect:Vector[Double]):provingground.learning.Representation[T]", "kind" : "def"}, {"label" : "*", "tail" : "(sc: Double): Representation[T]", "member" : "provingground.learning.Representation.*", "link" : "provingground\/learning\/Representation.html#*(sc:Double):provingground.learning.Representation[T]", "kind" : "def"}, {"label" : "normalized", "tail" : "(t: Double): Representation[T]", "member" : "provingground.learning.Representation.normalized", "link" : "provingground\/learning\/Representation.html#normalized(t:Double):provingground.learning.Representation[T]", "kind" : "def"}, {"label" : "flatten", "tail" : "(): Representation[T]", "member" : "provingground.learning.Representation.flatten", "link" : "provingground\/learning\/Representation.html#flatten:provingground.learning.Representation[T]", "kind" : "def"}, {"label" : "flatdist", "tail" : "(): Vector[WeightVect[T]]", "member" : "provingground.learning.Representation.flatdist", "link" : "provingground\/learning\/Representation.html#flatdist:scala.collection.immutable.Vector[provingground.learning.WeightVect[T]]", "kind" : "def"}, {"label" : "apply", "tail" : "(label: T): Vector[Double]", "member" : "provingground.learning.Representation.apply", "link" : "provingground\/learning\/Representation.html#apply(label:T):Vector[Double]", "kind" : "def"}, {"label" : "getsum", "tail" : "(label: T): Vector[Double]", "member" : "provingground.learning.Representation.getsum", "link" : "provingground\/learning\/Representation.html#getsum(label:T):Vector[Double]", "kind" : "def"}, {"label" : "get", "tail" : "(label: T): Option[Vector[Double]]", "member" : "provingground.learning.Representation.get", "link" : "provingground\/learning\/Representation.html#get(label:T):Option[Vector[Double]]", "kind" : "def"}, {"label" : "next", "tail" : "(): T", "member" : "provingground.learning.Representation.next", "link" : "provingground\/learning\/Representation.html#next:T", "kind" : "def"}, {"label" : "norm", "tail" : "(): Double", "member" : "provingground.learning.Representation.norm", "link" : "provingground\/learning\/Representation.html#norm:Double", "kind" : "def"}, {"label" : "support", "tail" : "(): Vector[T]", "member" : "provingground.learning.Representation.support", "link" : "provingground\/learning\/Representation.html#support:Vector[T]", "kind" : "def"}, {"label" : "pmf", "tail" : "(): Vector[Weighted[T]]", "member" : "provingground.learning.Representation.pmf", "link" : "provingground\/learning\/Representation.html#pmf:scala.collection.immutable.Vector[provingground.Weighted[T]]", "kind" : "def"}, {"member" : "provingground.learning.Representation#<init>", "error" : "unsupported entity"}, {"label" : "rep", "tail" : ": Vector[WeightVect[T]]", "member" : "provingground.learning.Representation.rep", "link" : "provingground\/learning\/Representation.html#rep:Vector[provingground.learning.WeightVect[T]]", "kind" : "val"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "provingground\/learning\/Representation.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "provingground\/learning\/Representation.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/Representation.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/Representation.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "provingground\/learning\/Representation.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "provingground\/learning\/Representation.html#==(x$1:Any):Boolean", "kind" : "final def"}], "case class" : "provingground\/learning\/Representation.html", "kind" : "case class"}, {"name" : "provingground.learning.Samples", "members_trait" : [{"label" : "tangSizes", "tail" : "(n: Int)(base: FiniteDistribution[A]): X[Vector[(FiniteDistribution[A], Int)]]", "member" : "provingground.learning.Samples.tangSizes", "link" : "provingground\/learning\/Samples.html#tangSizes[A](n:Int)(base:provingground.FiniteDistribution[A]):X[Vector[(provingground.FiniteDistribution[A],Int)]]", "kind" : "def"}, {"label" : "batchSampFD", "tail" : "(pd: ProbabilityDistribution[A], batches: Int, n: Int): X[FiniteDistribution[A]]", "member" : "provingground.learning.TangSamples.batchSampFD", "link" : "provingground\/learning\/Samples.html#batchSampFD[A](pd:provingground.ProbabilityDistribution[A],batches:Int,n:Int):X[provingground.FiniteDistribution[A]]", "kind" : "def"}, {"label" : "sampFD", "tail" : "(pd: ProbabilityDistribution[A], n: Int): X[FiniteDistribution[A]]", "member" : "provingground.learning.TangSamples.sampFD", "link" : "provingground\/learning\/Samples.html#sampFD[A](pd:provingground.ProbabilityDistribution[A],n:Int):X[provingground.FiniteDistribution[A]]", "kind" : "def"}, {"label" : "sequence", "tail" : "(v: Vector[X[A]]): X[Vector[A]]", "member" : "provingground.learning.TangSamples.sequence", "link" : "provingground\/learning\/Samples.html#sequence[A](v:Vector[X[A]]):X[Vector[A]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/Samples.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/Samples.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/Samples.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/Samples.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/Samples.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/Samples.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/Samples.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/Samples.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/Samples.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/Samples.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/Samples.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/Samples.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/Samples.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/Samples.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/Samples.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/Samples.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/Samples.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/Samples.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/Samples.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "sample", "tail" : "(pd: ProbabilityDistribution[A], n: Int): X[Map[A, Int]]", "member" : "provingground.learning.TangSamples.sample", "link" : "provingground\/learning\/Samples.html#sample[A](pd:provingground.ProbabilityDistribution[A],n:Int):X[Map[A,Int]]", "kind" : "abstract def"}, {"label" : "monad", "tail" : ": Monad[X]", "member" : "provingground.learning.TangSamples.monad", "link" : "provingground\/learning\/Samples.html#monad:cats.Monad[X]", "kind" : "implicit abstract val"}], "shortDescription" : "", "object" : "provingground\/learning\/Samples$.html", "members_object" : [{"label" : "batchSample", "tail" : "(pd: ProbabilityDistribution[A], batches: Int, n: Int)(s: TangSamples[X]): X[FiniteDistribution[A]]", "member" : "provingground.learning.Samples.batchSample", "link" : "provingground\/learning\/Samples$.html#batchSample[A,X[_]](pd:provingground.ProbabilityDistribution[A],batches:Int,n:Int)(implicits:provingground.learning.TangSamples[X]):X[provingground.FiniteDistribution[A]]", "kind" : "def"}, {"label" : "sampleFD", "tail" : "(p: ProbabilityDistribution[A], n: Int)(s: TangSamples[X]): X[FiniteDistribution[A]]", "member" : "provingground.learning.Samples.sampleFD", "link" : "provingground\/learning\/Samples$.html#sampleFD[A,X[_]](p:provingground.ProbabilityDistribution[A],n:Int)(implicits:provingground.learning.TangSamples[X]):X[provingground.FiniteDistribution[A]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/Samples$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/Samples$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/Samples$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/Samples$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/Samples$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/Samples$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/Samples$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/Samples$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/Samples$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/Samples$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/Samples$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/Samples$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/Samples$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/Samples$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/Samples$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/Samples$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/Samples$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/Samples$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/Samples$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/learning\/Samples.html", "kind" : "object"}, {"name" : "provingground.learning.SnapShot", "shortDescription" : "", "members_case class" : [{"member" : "provingground.learning.SnapShot#<init>", "error" : "unsupported entity"}, {"label" : "param", "tail" : ": P", "member" : "provingground.learning.SnapShot.param", "link" : "provingground\/learning\/SnapShot.html#param:P", "kind" : "val"}, {"label" : "loops", "tail" : ": Int", "member" : "provingground.learning.SnapShot.loops", "link" : "provingground\/learning\/SnapShot.html#loops:Int", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "provingground.learning.SnapShot.name", "link" : "provingground\/learning\/SnapShot.html#name:String", "kind" : "val"}, {"label" : "state", "tail" : ": X", "member" : "provingground.learning.SnapShot.state", "link" : "provingground\/learning\/SnapShot.html#state:X", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/SnapShot.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/SnapShot.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/SnapShot.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/SnapShot.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/SnapShot.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/SnapShot.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/SnapShot.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/SnapShot.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/SnapShot.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/SnapShot.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/SnapShot.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/SnapShot.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/SnapShot.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/SnapShot.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/SnapShot.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/SnapShot.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/learning\/SnapShot.html", "kind" : "case class"}, {"name" : "provingground.learning.Sort", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/Sort.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/Sort.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/Sort.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/Sort.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/Sort.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/Sort.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/Sort.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/Sort.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/Sort.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/Sort.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/Sort.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/Sort.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/Sort.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/Sort.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/Sort.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/Sort.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/Sort.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/Sort.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/Sort.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "pred", "tail" : ": (S) ⇒ Boolean", "member" : "provingground.learning.Sort.pred", "link" : "provingground\/learning\/Sort.html#pred:S=>Boolean", "kind" : "abstract val"}], "shortDescription" : "A sort, i.e.", "object" : "provingground\/learning\/Sort$.html", "members_object" : [{"label" : "AllTerms", "tail" : ": Sort[Term, Term]", "member" : "provingground.learning.Sort.AllTerms", "link" : "provingground\/learning\/Sort$.html#AllTerms:provingground.learning.Sort[provingground.HoTT.Term,provingground.HoTT.Term]", "kind" : "val"}, {"label" : "Restrict", "tail" : "", "member" : "provingground.learning.Sort.Restrict", "link" : "provingground\/learning\/Sort$.html#Restrict[S,T]extendsSort[S,T]withProductwithSerializable", "kind" : "case class"}, {"label" : "Filter", "tail" : "", "member" : "provingground.learning.Sort.Filter", "link" : "provingground\/learning\/Sort$.html#Filter[S]extendsSort[S,S]withProductwithSerializable", "kind" : "case class"}, {"label" : "All", "tail" : "", "member" : "provingground.learning.Sort.All", "link" : "provingground\/learning\/Sort$.html#All[S]extendsSort[S,S]withProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/Sort$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/Sort$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/Sort$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/Sort$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/Sort$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/Sort$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/Sort$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/Sort$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/Sort$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/Sort$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/Sort$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/Sort$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/Sort$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/Sort$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/Sort$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/Sort$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/Sort$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/Sort$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/Sort$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/learning\/Sort.html", "kind" : "trait"}, {"name" : "provingground.learning.SortList", "members_trait" : [{"label" : "::", "tail" : "(that: Sort[Z, X]): Cons[Z, X, U]", "member" : "provingground.learning.SortList.::", "link" : "provingground\/learning\/SortList.html#::[Z,X](that:provingground.learning.Sort[Z,X]):provingground.learning.SortList.Cons[Z,X,U]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/SortList.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/SortList.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/SortList.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/SortList.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/SortList.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/SortList.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/SortList.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/SortList.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/SortList.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/SortList.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/SortList.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/SortList.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/SortList.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/SortList.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/SortList.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/SortList.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/SortList.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/SortList.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/SortList.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "List of Sorts, used as domains for families.", "object" : "provingground\/learning\/SortList$.html", "members_object" : [{"label" : "Cons", "tail" : "", "member" : "provingground.learning.SortList.Cons", "link" : "provingground\/learning\/SortList$.html#Cons[Z,X,U<:shapeless.HList]extendsSortList[X::U]withProductwithSerializable", "kind" : "case class"}, {"label" : "Nil", "tail" : "", "member" : "provingground.learning.SortList.Nil", "link" : "provingground\/learning\/SortList$.html#Nil", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/SortList$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/SortList$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/SortList$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/SortList$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/SortList$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/SortList$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/SortList$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/SortList$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/SortList$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/SortList$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/SortList$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/SortList$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/SortList$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/SortList$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/SortList$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/SortList$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/SortList$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/SortList$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/SortList$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/learning\/SortList.html", "kind" : "trait"}, {"name" : "provingground.learning.StateDistribution", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/StateDistribution.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/StateDistribution.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/StateDistribution.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/StateDistribution.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/StateDistribution.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/StateDistribution.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/StateDistribution.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/StateDistribution.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/StateDistribution.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/StateDistribution.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/StateDistribution.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/StateDistribution.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/StateDistribution.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/StateDistribution.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/StateDistribution.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/StateDistribution.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/StateDistribution.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/StateDistribution.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/StateDistribution.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "valueAt", "tail" : "(state: State)(randomVarFmly: RandomVarFamily[Dom, T], fullArg: Dom): D[T]", "member" : "provingground.learning.StateDistribution.valueAt", "link" : "provingground\/learning\/StateDistribution.html#valueAt[Dom<:shapeless.HList,T](state:State)(randomVarFmly:provingground.learning.RandomVarFamily[Dom,T],fullArg:Dom):D[T]", "kind" : "abstract def"}, {"label" : "value", "tail" : "(state: State)(randomVar: RandomVar[T]): D[T]", "member" : "provingground.learning.StateDistribution.value", "link" : "provingground\/learning\/StateDistribution.html#value[T](state:State)(randomVar:provingground.learning.RandomVar[T]):D[T]", "kind" : "abstract def"}], "shortDescription" : "typeclass for providing distributions from a state", "object" : "provingground\/learning\/StateDistribution$.html", "members_object" : [{"label" : "valueAt", "tail" : "(state: State)(randomVarFmly: RandomVarFamily[Dom, T], fullArg: Dom)(sd: StateDistribution[State, D]): D[T]", "member" : "provingground.learning.StateDistribution.valueAt", "link" : "provingground\/learning\/StateDistribution$.html#valueAt[Dom<:shapeless.HList,State,T,D[_]](state:State)(randomVarFmly:provingground.learning.RandomVarFamily[Dom,T],fullArg:Dom)(implicitsd:provingground.learning.StateDistribution[State,D]):D[T]", "kind" : "def"}, {"label" : "value", "tail" : "(state: State)(randomVar: RandomVar[T])(sd: StateDistribution[State, D]): D[T]", "member" : "provingground.learning.StateDistribution.value", "link" : "provingground\/learning\/StateDistribution$.html#value[State,T,D[_]](state:State)(randomVar:provingground.learning.RandomVar[T])(implicitsd:provingground.learning.StateDistribution[State,D]):D[T]", "kind" : "def"}, {"label" : "varValueStateDist", "tail" : "(emp: Empty[D]): StateDistribution[VarValueSet[D], D]", "member" : "provingground.learning.StateDistribution.varValueStateDist", "link" : "provingground\/learning\/StateDistribution$.html#varValueStateDist[D[_],V](implicitemp:provingground.learning.Empty[D]):provingground.learning.StateDistribution[provingground.learning.VarValueSet[D],D]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/StateDistribution$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/StateDistribution$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/StateDistribution$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/StateDistribution$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/StateDistribution$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/StateDistribution$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/StateDistribution$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/StateDistribution$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/StateDistribution$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/StateDistribution$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/StateDistribution$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/StateDistribution$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/StateDistribution$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/StateDistribution$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/StateDistribution$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/StateDistribution$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/StateDistribution$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/StateDistribution$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/StateDistribution$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/learning\/StateDistribution.html", "kind" : "trait"}, {"name" : "provingground.learning.StateEvolver", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/StateEvolver.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/StateEvolver.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/StateEvolver.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/StateEvolver.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/StateEvolver.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/StateEvolver.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/StateEvolver.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/StateEvolver.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/StateEvolver.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/StateEvolver.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/StateEvolver.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/StateEvolver.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/StateEvolver.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/StateEvolver.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/StateEvolver.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/StateEvolver.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/StateEvolver.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/StateEvolver.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/StateEvolver.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "next", "tail" : "(init: State): State", "member" : "provingground.learning.StateEvolver.next", "link" : "provingground\/learning\/StateEvolver.html#next(init:State):State", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "provingground\/learning\/StateEvolver.html", "kind" : "trait"}, {"name" : "provingground.learning.StochasticLang", "shortDescription" : "", "members_class" : [{"label" : "appln", "tail" : "(func: TruncatedDistribution[E], arg: TruncatedDistribution[E]): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.StochasticLang.appln", "link" : "provingground\/learning\/StochasticLang.html#appln(func:provingground.learning.TruncatedDistribution[E],arg:provingground.learning.TruncatedDistribution[E]):Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"member" : "provingground.learning.StochasticLang#<init>", "error" : "unsupported entity"}, {"label" : "numeral", "tail" : "(n: Int): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.numeral", "link" : "provingground\/learning\/StochasticLang.html#numeral(n:Int):Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "orCases", "tail" : "(first: TruncatedDistribution[E], second: TruncatedDistribution[E]): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.orCases", "link" : "provingground\/learning\/StochasticLang.html#orCases(first:provingground.learning.TruncatedDistribution[E],second:provingground.learning.TruncatedDistribution[E]):Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "ff", "tail" : "(): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.ff", "link" : "provingground\/learning\/StochasticLang.html#ff:Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "qed", "tail" : "(): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.qed", "link" : "provingground\/learning\/StochasticLang.html#qed:Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "tt", "tail" : "(): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.tt", "link" : "provingground\/learning\/StochasticLang.html#tt:Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "incl2", "tail" : "(typ: TruncatedDistribution[E]): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.incl2", "link" : "provingground\/learning\/StochasticLang.html#incl2(typ:provingground.learning.TruncatedDistribution[E]):Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "incl1", "tail" : "(typ: TruncatedDistribution[E]): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.incl1", "link" : "provingground\/learning\/StochasticLang.html#incl1(typ:provingground.learning.TruncatedDistribution[E]):Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "or", "tail" : "(first: TruncatedDistribution[E], second: TruncatedDistribution[E]): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.or", "link" : "provingground\/learning\/StochasticLang.html#or(first:provingground.learning.TruncatedDistribution[E],second:provingground.learning.TruncatedDistribution[E]):Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "proj2", "tail" : "(xy: TruncatedDistribution[E]): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.proj2", "link" : "provingground\/learning\/StochasticLang.html#proj2(xy:provingground.learning.TruncatedDistribution[E]):Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "proj1", "tail" : "(xy: TruncatedDistribution[E]): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.proj1", "link" : "provingground\/learning\/StochasticLang.html#proj1(xy:provingground.learning.TruncatedDistribution[E]):Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "pair", "tail" : "(x: TruncatedDistribution[E], y: TruncatedDistribution[E]): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.pair", "link" : "provingground\/learning\/StochasticLang.html#pair(x:provingground.learning.TruncatedDistribution[E],y:provingground.learning.TruncatedDistribution[E]):Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "sigma", "tail" : "(variable: TruncatedDistribution[E], typ: TruncatedDistribution[E]): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.sigma", "link" : "provingground\/learning\/StochasticLang.html#sigma(variable:provingground.learning.TruncatedDistribution[E],typ:provingground.learning.TruncatedDistribution[E]):Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "equality", "tail" : "(lhs: TruncatedDistribution[E], rhs: TruncatedDistribution[E]): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.equality", "link" : "provingground\/learning\/StochasticLang.html#equality(lhs:provingground.learning.TruncatedDistribution[E],rhs:provingground.learning.TruncatedDistribution[E]):Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "pi", "tail" : "(variable: TruncatedDistribution[E], typ: TruncatedDistribution[E]): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.pi", "link" : "provingground\/learning\/StochasticLang.html#pi(variable:provingground.learning.TruncatedDistribution[E],typ:provingground.learning.TruncatedDistribution[E]):Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "lambda", "tail" : "(variable: TruncatedDistribution[E], value: TruncatedDistribution[E]): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.lambda", "link" : "provingground\/learning\/StochasticLang.html#lambda(variable:provingground.learning.TruncatedDistribution[E],value:provingground.learning.TruncatedDistribution[E]):Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "metaVar", "tail" : "(typ: TruncatedDistribution[E]): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.metaVar", "link" : "provingground\/learning\/StochasticLang.html#metaVar(typ:provingground.learning.TruncatedDistribution[E]):Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "anonVar", "tail" : "(typ: TruncatedDistribution[E]): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.anonVar", "link" : "provingground\/learning\/StochasticLang.html#anonVar(typ:provingground.learning.TruncatedDistribution[E]):Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "typVariable", "tail" : "(name: S, level: Int): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.typVariable", "link" : "provingground\/learning\/StochasticLang.html#typVariable[S](name:S,level:Int):Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "variable", "tail" : "(name: S, typ: TruncatedDistribution[E]): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.variable", "link" : "provingground\/learning\/StochasticLang.html#variable[S](name:S,typ:provingground.learning.TruncatedDistribution[E]):Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "l", "tail" : ": ExprLang[E]", "member" : "provingground.learning.TruncatedDistributionLang.l", "link" : "provingground\/learning\/StochasticLang.html#l:provingground.translation.ExprLang[E]", "kind" : "val"}, {"label" : "applyAll", "tail" : "(funcOpt: Option[TruncatedDistribution[E]], args: Vector[TruncatedDistribution[E]]): Option[TruncatedDistribution[E]]", "member" : "provingground.translation.ExprLang.applyAll", "link" : "provingground\/learning\/StochasticLang.html#applyAll(funcOpt:Option[E],args:Vector[E]):Option[E]", "kind" : "def"}, {"label" : "i2", "tail" : "(typ: TruncatedDistribution[E], value: TruncatedDistribution[E]): Option[TruncatedDistribution[E]]", "member" : "provingground.translation.ExprLang.i2", "link" : "provingground\/learning\/StochasticLang.html#i2(typ:E,value:E):Option[E]", "kind" : "def"}, {"label" : "i1", "tail" : "(typ: TruncatedDistribution[E], value: TruncatedDistribution[E]): Option[TruncatedDistribution[E]]", "member" : "provingground.translation.ExprLang.i1", "link" : "provingground\/learning\/StochasticLang.html#i1(typ:E,value:E):Option[E]", "kind" : "def"}, {"label" : "funcTyp", "tail" : "(dom: TruncatedDistribution[E], codom: TruncatedDistribution[E]): Option[TruncatedDistribution[E]]", "member" : "provingground.translation.ExprLang.funcTyp", "link" : "provingground\/learning\/StochasticLang.html#funcTyp(dom:E,codom:E):Option[E]", "kind" : "def"}, {"label" : "pairTyp", "tail" : "(first: TruncatedDistribution[E], second: TruncatedDistribution[E]): Option[TruncatedDistribution[E]]", "member" : "provingground.translation.ExprLang.pairTyp", "link" : "provingground\/learning\/StochasticLang.html#pairTyp(first:E,second:E):Option[E]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/StochasticLang.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/StochasticLang.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/StochasticLang.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/StochasticLang.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/StochasticLang.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/StochasticLang.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/StochasticLang.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/StochasticLang.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/StochasticLang.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/StochasticLang.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/StochasticLang.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/StochasticLang.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/StochasticLang.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/StochasticLang.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/StochasticLang.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/StochasticLang.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/StochasticLang.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/StochasticLang.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/StochasticLang.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/learning\/StochasticLang.html", "kind" : "class"}, {"name" : "provingground.learning.Support", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/Support.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/Support.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/Support.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/Support.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/Support.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/Support.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/Support.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/Support.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/Support.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/Support.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/Support.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/Support.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/Support.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/Support.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/Support.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/Support.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/Support.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/Support.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/Support.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "support", "tail" : "(dist: D[T]): Set[T]", "member" : "provingground.learning.Support.support", "link" : "provingground\/learning\/Support.html#support[T](dist:D[T]):Set[T]", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "provingground\/learning\/Support.html", "kind" : "trait"}, {"name" : "provingground.learning.TangentFiniteDistribution", "shortDescription" : "", "object" : "provingground\/learning\/TangentFiniteDistribution$.html", "members_object" : [{"label" : "av", "tail" : "(x: FiniteDistribution[X], y: FiniteDistribution[X]): FiniteDistribution[X]", "member" : "provingground.learning.TangentFiniteDistribution.av", "link" : "provingground\/learning\/TangentFiniteDistribution$.html#av[X](x:provingground.FiniteDistribution[X],y:provingground.FiniteDistribution[X]):provingground.FiniteDistribution[X]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/TangentFiniteDistribution$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/TangentFiniteDistribution$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/TangentFiniteDistribution$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/TangentFiniteDistribution$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/TangentFiniteDistribution$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/TangentFiniteDistribution$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/TangentFiniteDistribution$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TangentFiniteDistribution$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TangentFiniteDistribution$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TangentFiniteDistribution$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/TangentFiniteDistribution$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/TangentFiniteDistribution$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/TangentFiniteDistribution$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/TangentFiniteDistribution$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/TangentFiniteDistribution$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/TangentFiniteDistribution$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/TangentFiniteDistribution$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/TangentFiniteDistribution$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/TangentFiniteDistribution$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "nodeDist", "tail" : "(tangentState: State)(generatorNode: GeneratorNode[Y], epsilon: Double): FiniteDistribution[Y]", "member" : "provingground.learning.TangentFiniteDistribution.nodeDist", "link" : "provingground\/learning\/TangentFiniteDistribution.html#nodeDist[Y](tangentState:State)(generatorNode:provingground.learning.GeneratorNode[Y],epsilon:Double):provingground.FiniteDistribution[Y]", "kind" : "def"}, {"label" : "updateAll", "tail" : "(dataSeq: Seq[Value[_ <: HList, _, Double]]): TangentFiniteDistribution[State, Boat]", "member" : "provingground.learning.TangentFiniteDistribution.updateAll", "link" : "provingground\/learning\/TangentFiniteDistribution.html#updateAll(dataSeq:Seq[provingground.learning.GeneratorNodeFamily.Value[_<:shapeless.HList,_,Double]]):provingground.learning.TangentFiniteDistribution[State,Boat]", "kind" : "def"}, {"member" : "provingground.learning.TangentFiniteDistribution#<init>", "error" : "unsupported entity"}, {"label" : "nodeCoeffSeq", "tail" : ": NodeCoeffSeq[State, Boat, Double]", "member" : "provingground.learning.TangentFiniteDistribution.nodeCoeffSeq", "link" : "provingground\/learning\/TangentFiniteDistribution.html#nodeCoeffSeq:provingground.learning.NodeCoeffSeq[State,Boat,Double]", "kind" : "val"}, {"label" : "baseState", "tail" : ": State", "member" : "provingground.learning.TangentFiniteDistribution.baseState", "link" : "provingground\/learning\/TangentFiniteDistribution.html#baseState:State", "kind" : "val"}, {"label" : "nodeFamilyDist", "tail" : "(initState: State)(generatorNodeFamily: GeneratorNodeFamily[Dom, Y], baseDist: FiniteDistribution[Dom], epsilon: Double): Map[Dom, FiniteDistribution[Y]]", "member" : "provingground.learning.GenTruncatedFiniteDistribution.nodeFamilyDist", "link" : "provingground\/learning\/TangentFiniteDistribution.html#nodeFamilyDist[Dom<:shapeless.HList,Y](initState:State)(generatorNodeFamily:provingground.learning.GeneratorNodeFamily[Dom,Y],baseDist:provingground.FiniteDistribution[Dom],epsilon:Double):Map[Dom,provingground.FiniteDistribution[Y]]", "kind" : "def"}, {"label" : "varFamilyDist", "tail" : "(initState: State)(randomVarFmly: RandomVarFamily[RDom, Y], epsilon: Double): Map[RDom, FiniteDistribution[Y]]", "member" : "provingground.learning.GenTruncatedFiniteDistribution.varFamilyDist", "link" : "provingground\/learning\/TangentFiniteDistribution.html#varFamilyDist[RDom<:shapeless.HList,Y](initState:State)(randomVarFmly:provingground.learning.RandomVarFamily[RDom,Y],epsilon:Double):Map[RDom,provingground.FiniteDistribution[Y]]", "kind" : "def"}, {"label" : "nodeCoeffFamilyMap", "tail" : "(initState: State)(nodeCoeffs: NodeCoeffs[State, Boat, Double, Dom, Y], baseDist: FiniteDistribution[Dom], epsilon: Double): Map[Dom, FiniteDistribution[Y]]", "member" : "provingground.learning.GenTruncatedFiniteDistribution.nodeCoeffFamilyMap", "link" : "provingground\/learning\/TangentFiniteDistribution.html#nodeCoeffFamilyMap[Dom<:shapeless.HList,Y](initState:State)(nodeCoeffs:provingground.learning.NodeCoeffs[State,Boat,Double,Dom,Y],baseDist:provingground.FiniteDistribution[Dom],epsilon:Double):Map[Dom,provingground.FiniteDistribution[Y]]", "kind" : "def"}, {"label" : "mapsSum", "tail" : "(first: Map[X, FiniteDistribution[Y]], second: Map[X, FiniteDistribution[Y]]): Map[X, FiniteDistribution[Y]]", "member" : "provingground.learning.GenTruncatedFiniteDistribution.mapsSum", "link" : "provingground\/learning\/TangentFiniteDistribution.html#mapsSum[X,Y](first:Map[X,provingground.FiniteDistribution[Y]],second:Map[X,provingground.FiniteDistribution[Y]]):Map[X,provingground.FiniteDistribution[Y]]", "kind" : "def"}, {"label" : "nodeCoeffDist", "tail" : "(initState: State)(nodeCoeffs: NodeCoeffs[State, Boat, Double, HNil, Y], epsilon: Double): FiniteDistribution[Y]", "member" : "provingground.learning.GenTruncatedFiniteDistribution.nodeCoeffDist", "link" : "provingground\/learning\/TangentFiniteDistribution.html#nodeCoeffDist[Y](initState:State)(nodeCoeffs:provingground.learning.NodeCoeffs[State,Boat,Double,shapeless.HNil,Y],epsilon:Double):provingground.FiniteDistribution[Y]", "kind" : "def"}, {"label" : "varListDist", "tail" : "(initState: State)(vl: RandomVarList[Dom], epsilon: Double): FiniteDistribution[Dom]", "member" : "provingground.learning.GenTruncatedFiniteDistribution.varListDist", "link" : "provingground\/learning\/TangentFiniteDistribution.html#varListDist[Dom<:shapeless.HList](initState:State)(vl:provingground.learning.RandomVarList[Dom],epsilon:Double):provingground.FiniteDistribution[Dom]", "kind" : "def"}, {"label" : "varDist", "tail" : "(initState: State)(randomVar: RandomVar[Y], epsilon: Double): FiniteDistribution[Y]", "member" : "provingground.learning.GenTruncatedFiniteDistribution.varDist", "link" : "provingground\/learning\/TangentFiniteDistribution.html#varDist[Y](initState:State)(randomVar:provingground.learning.RandomVar[Y],epsilon:Double):provingground.FiniteDistribution[Y]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/TangentFiniteDistribution.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/TangentFiniteDistribution.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/TangentFiniteDistribution.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/TangentFiniteDistribution.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/TangentFiniteDistribution.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/TangentFiniteDistribution.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/TangentFiniteDistribution.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TangentFiniteDistribution.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TangentFiniteDistribution.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TangentFiniteDistribution.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/TangentFiniteDistribution.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/TangentFiniteDistribution.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/TangentFiniteDistribution.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/TangentFiniteDistribution.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/TangentFiniteDistribution.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/TangentFiniteDistribution.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/learning\/TangentFiniteDistribution.html", "kind" : "object"}, {"name" : "provingground.learning.TangSamples", "members_trait" : [{"label" : "batchSampFD", "tail" : "(pd: ProbabilityDistribution[A], batches: Int, n: Int): X[FiniteDistribution[A]]", "member" : "provingground.learning.TangSamples.batchSampFD", "link" : "provingground\/learning\/TangSamples.html#batchSampFD[A](pd:provingground.ProbabilityDistribution[A],batches:Int,n:Int):X[provingground.FiniteDistribution[A]]", "kind" : "def"}, {"label" : "sampFD", "tail" : "(pd: ProbabilityDistribution[A], n: Int): X[FiniteDistribution[A]]", "member" : "provingground.learning.TangSamples.sampFD", "link" : "provingground\/learning\/TangSamples.html#sampFD[A](pd:provingground.ProbabilityDistribution[A],n:Int):X[provingground.FiniteDistribution[A]]", "kind" : "def"}, {"label" : "sequence", "tail" : "(v: Vector[X[A]]): X[Vector[A]]", "member" : "provingground.learning.TangSamples.sequence", "link" : "provingground\/learning\/TangSamples.html#sequence[A](v:Vector[X[A]]):X[Vector[A]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/TangSamples.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/TangSamples.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/TangSamples.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/TangSamples.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/TangSamples.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/TangSamples.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/TangSamples.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TangSamples.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TangSamples.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TangSamples.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/TangSamples.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/TangSamples.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/TangSamples.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/TangSamples.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/TangSamples.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/TangSamples.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/TangSamples.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/TangSamples.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/TangSamples.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "tangSizes", "tail" : "(n: Int)(base: FiniteDistribution[A]): X[Vector[(FiniteDistribution[A], Int)]]", "member" : "provingground.learning.TangSamples.tangSizes", "link" : "provingground\/learning\/TangSamples.html#tangSizes[A](n:Int)(base:provingground.FiniteDistribution[A]):X[Vector[(provingground.FiniteDistribution[A],Int)]]", "kind" : "abstract def"}, {"label" : "sample", "tail" : "(pd: ProbabilityDistribution[A], n: Int): X[Map[A, Int]]", "member" : "provingground.learning.TangSamples.sample", "link" : "provingground\/learning\/TangSamples.html#sample[A](pd:provingground.ProbabilityDistribution[A],n:Int):X[Map[A,Int]]", "kind" : "abstract def"}, {"label" : "monad", "tail" : ": Monad[X]", "member" : "provingground.learning.TangSamples.monad", "link" : "provingground\/learning\/TangSamples.html#monad:cats.Monad[X]", "kind" : "implicit abstract val"}], "shortDescription" : "", "trait" : "provingground\/learning\/TangSamples.html", "kind" : "trait"}, {"name" : "provingground.learning.TangVec", "shortDescription" : "", "object" : "provingground\/learning\/TangVec$.html", "members_object" : [{"label" : "OnPoints", "tail" : "", "member" : "provingground.learning.TangVec.OnPoints", "link" : "provingground\/learning\/TangVec$.html#OnPoints[A,B]extendsAnyRef", "kind" : "implicit class"}, {"label" : "vs", "tail" : "(bvs: VectorSpace[T, Double]): VectorSpace[TangVec[T], Double]", "member" : "provingground.learning.TangVec.vs", "link" : "provingground\/learning\/TangVec$.html#vs[T](implicitbvs:spire.algebra.VectorSpace[T,Double]):spire.algebra.VectorSpace[provingground.learning.TangVec[T],Double]", "kind" : "implicit def"}, {"label" : "tProd", "tail" : "(pair: (TangVec[A], TangVec[B])): TangVec[(A, B)]", "member" : "provingground.learning.TangVec.tProd", "link" : "provingground\/learning\/TangVec$.html#tProd[A,B](pair:(provingground.learning.TangVec[A],provingground.learning.TangVec[B])):provingground.learning.TangVec[(A,B)]", "kind" : "def"}, {"label" : "tangProd", "tail" : "(av: TangVec[A], bw: TangVec[B]): TangVec[(A, B)]", "member" : "provingground.learning.TangVec.tangProd", "link" : "provingground\/learning\/TangVec$.html#tangProd[A,B](av:provingground.learning.TangVec[A],bw:provingground.learning.TangVec[B]):provingground.learning.TangVec[(A,B)]", "kind" : "def"}, {"label" : "liftBilinear", "tail" : "(bilinear: (A, B) ⇒ C)(vs: VectorSpace[C, Double]): (TangVec[(A, B)]) ⇒ TangVec[C]", "member" : "provingground.learning.TangVec.liftBilinear", "link" : "provingground\/learning\/TangVec$.html#liftBilinear[A,B,C](bilinear:(A,B)=>C)(implicitvs:spire.algebra.VectorSpace[C,Double]):provingground.learning.TangVec[(A,B)]=>provingground.learning.TangVec[C]", "kind" : "def"}, {"label" : "liftLinear", "tail" : "(func: (A) ⇒ B): (TangVec[A]) ⇒ TangVec[B]", "member" : "provingground.learning.TangVec.liftLinear", "link" : "provingground\/learning\/TangVec$.html#liftLinear[A,B](func:A=>B):provingground.learning.TangVec[A]=>provingground.learning.TangVec[B]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/TangVec$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/TangVec$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/TangVec$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/TangVec$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/TangVec$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/TangVec$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/TangVec$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TangVec$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TangVec$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TangVec$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/TangVec$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/TangVec$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/TangVec$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/TangVec$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/TangVec$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/TangVec$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/TangVec$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/TangVec$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/TangVec$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "&&", "tail" : "(that: TangVec[B]): TangVec[(A, B)]", "member" : "provingground.learning.TangVec.&&", "link" : "provingground\/learning\/TangVec.html#&&[B](that:provingground.learning.TangVec[B]):provingground.learning.TangVec[(A,B)]", "kind" : "def"}, {"member" : "provingground.learning.TangVec#<init>", "error" : "unsupported entity"}, {"label" : "vec", "tail" : ": A", "member" : "provingground.learning.TangVec.vec", "link" : "provingground\/learning\/TangVec.html#vec:A", "kind" : "val"}, {"label" : "point", "tail" : ": A", "member" : "provingground.learning.TangVec.point", "link" : "provingground\/learning\/TangVec.html#point:A", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/TangVec.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/TangVec.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/TangVec.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/TangVec.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/TangVec.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/TangVec.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/TangVec.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TangVec.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TangVec.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TangVec.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/TangVec.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/TangVec.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/TangVec.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/TangVec.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/TangVec.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/TangVec.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/learning\/TangVec.html", "kind" : "case class"}, {"name" : "provingground.learning.TermBucket", "shortDescription" : "", "object" : "provingground\/learning\/TermBucket$.html", "members_class" : [{"label" : "getTheorems", "tail" : "(): FiniteDistribution[Typ[Term]]", "member" : "provingground.learning.TermBucket.getTheorems", "link" : "provingground\/learning\/TermBucket.html#getTheorems:provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "getTypDist", "tail" : "(): FiniteDistribution[Typ[Term]]", "member" : "provingground.learning.TermBucket.getTypDist", "link" : "provingground\/learning\/TermBucket.html#getTypDist:provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "getThmsByProofs", "tail" : "(): FiniteDistribution[Typ[Term]]", "member" : "provingground.learning.TermBucket.getThmsByProofs", "link" : "provingground\/learning\/TermBucket.html#getThmsByProofs:provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "getTermDistMap", "tail" : "(): Map[Typ[Term], FiniteDistribution[Term]]", "member" : "provingground.learning.TermBucket.getTermDistMap", "link" : "provingground\/learning\/TermBucket.html#getTermDistMap:scala.collection.immutable.Map[provingground.HoTT.Typ[provingground.HoTT.Term],provingground.FiniteDistribution[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "append", "tail" : "(t: Term): Unit", "member" : "provingground.learning.TermBucket.append", "link" : "provingground\/learning\/TermBucket.html#append(t:provingground.HoTT.Term):Unit", "kind" : "def"}, {"label" : "clearAll", "tail" : "(): Unit", "member" : "provingground.learning.TermBucket.clearAll", "link" : "provingground\/learning\/TermBucket.html#clearAll():Unit", "kind" : "def"}, {"label" : "clear", "tail" : "(): Unit", "member" : "provingground.learning.TermBucket.clear", "link" : "provingground\/learning\/TermBucket.html#clear():Unit", "kind" : "def"}, {"label" : "types", "tail" : ": Map[Typ[Term], Long]", "member" : "provingground.learning.TermBucket.types", "link" : "provingground\/learning\/TermBucket.html#types:scala.collection.mutable.Map[provingground.HoTT.Typ[provingground.HoTT.Term],Long]", "kind" : "val"}, {"label" : "termTypes", "tail" : ": Map[Typ[Term], Long]", "member" : "provingground.learning.TermBucket.termTypes", "link" : "provingground\/learning\/TermBucket.html#termTypes:scala.collection.mutable.Map[provingground.HoTT.Typ[provingground.HoTT.Term],Long]", "kind" : "val"}, {"label" : "terms", "tail" : ": Map[Typ[Term], Vector[Term]]", "member" : "provingground.learning.TermBucket.terms", "link" : "provingground\/learning\/TermBucket.html#terms:scala.collection.mutable.Map[provingground.HoTT.Typ[provingground.HoTT.Term],Vector[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "elapsedTime", "tail" : "(): Long", "member" : "provingground.learning.TermBucket.elapsedTime", "link" : "provingground\/learning\/TermBucket.html#elapsedTime:Long", "kind" : "def"}, {"label" : "startTime", "tail" : ": Long", "member" : "provingground.learning.TermBucket.startTime", "link" : "provingground\/learning\/TermBucket.html#startTime:Long", "kind" : "var"}, {"label" : "loops", "tail" : ": Int", "member" : "provingground.learning.TermBucket.loops", "link" : "provingground\/learning\/TermBucket.html#loops:Int", "kind" : "var"}, {"label" : "tot", "tail" : ": Long", "member" : "provingground.learning.TermBucket.tot", "link" : "provingground\/learning\/TermBucket.html#tot:Long", "kind" : "var"}, {"member" : "provingground.learning.TermBucket#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/TermBucket.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/TermBucket.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/TermBucket.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/TermBucket.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/TermBucket.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/TermBucket.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/TermBucket.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TermBucket.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TermBucket.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TermBucket.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/TermBucket.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/TermBucket.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/TermBucket.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/TermBucket.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/TermBucket.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/TermBucket.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/TermBucket.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/TermBucket.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/TermBucket.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "piDist", "tail" : "(vars: Vector[Weighted[Term]], scale: Double)(fd: FiniteDistribution[Typ[Term]]): FiniteDistribution[Typ[Term]]", "member" : "provingground.learning.TermBucket.piDist", "link" : "provingground\/learning\/TermBucket$.html#piDist(vars:Vector[provingground.Weighted[provingground.HoTT.Term]],scale:Double)(fd:provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]):provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "mkPi", "tail" : "(vars: Vector[Weighted[Term]], scale: Double)(yp: Weighted[Typ[Term]]): Weighted[Typ[Term]]", "member" : "provingground.learning.TermBucket.mkPi", "link" : "provingground\/learning\/TermBucket$.html#mkPi(vars:Vector[provingground.Weighted[provingground.HoTT.Term]],scale:Double)(yp:provingground.Weighted[provingground.HoTT.Typ[provingground.HoTT.Term]]):provingground.Weighted[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "toPi", "tail" : "(x: Term, scale: Double): (Weighted[Typ[Term]]) ⇒ Weighted[Typ[Term]]", "member" : "provingground.learning.TermBucket.toPi", "link" : "provingground\/learning\/TermBucket$.html#toPi(x:provingground.HoTT.Term,scale:Double):provingground.Weighted[provingground.HoTT.Typ[provingground.HoTT.Term]]=>provingground.Weighted[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "lambdaDist", "tail" : "(vars: Vector[Weighted[Term]], scale: Double)(fd: FiniteDistribution[Term]): FiniteDistribution[Term]", "member" : "provingground.learning.TermBucket.lambdaDist", "link" : "provingground\/learning\/TermBucket$.html#lambdaDist(vars:Vector[provingground.Weighted[provingground.HoTT.Term]],scale:Double)(fd:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.FiniteDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "mkLambda", "tail" : "(vars: Vector[Weighted[Term]], scale: Double)(yp: Weighted[Term]): Weighted[Term]", "member" : "provingground.learning.TermBucket.mkLambda", "link" : "provingground\/learning\/TermBucket$.html#mkLambda(vars:Vector[provingground.Weighted[provingground.HoTT.Term]],scale:Double)(yp:provingground.Weighted[provingground.HoTT.Term]):provingground.Weighted[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "toLambda", "tail" : "(x: Term, scale: Double): (Weighted[Term]) ⇒ Weighted[Term]", "member" : "provingground.learning.TermBucket.toLambda", "link" : "provingground\/learning\/TermBucket$.html#toLambda(x:provingground.HoTT.Term,scale:Double):provingground.Weighted[provingground.HoTT.Term]=>provingground.Weighted[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "fd", "tail" : "(m: Map[Typ[Term], Long], tot: Long): FiniteDistribution[Typ[Term]]", "member" : "provingground.learning.TermBucket.fd", "link" : "provingground\/learning\/TermBucket$.html#fd(m:scala.collection.mutable.Map[provingground.HoTT.Typ[provingground.HoTT.Term],Long],tot:Long):provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "fdMap", "tail" : "(m: Map[A, Vector[Term]], tot: Long): Map[A, FiniteDistribution[Term]]", "member" : "provingground.learning.TermBucket.fdMap", "link" : "provingground\/learning\/TermBucket$.html#fdMap[A](m:scala.collection.mutable.Map[A,Vector[provingground.HoTT.Term]],tot:Long):scala.collection.immutable.Map[A,provingground.FiniteDistribution[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/TermBucket$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/TermBucket$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/TermBucket$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/TermBucket$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/TermBucket$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/TermBucket$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/TermBucket$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TermBucket$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TermBucket$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TermBucket$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/TermBucket$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/TermBucket$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/TermBucket$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/TermBucket$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/TermBucket$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/TermBucket$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/TermBucket$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/TermBucket$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/TermBucket$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/learning\/TermBucket.html", "kind" : "class"}, {"name" : "provingground.learning.TermEvolution", "members_trait" : [{"label" : "tangEvolveTyps", "tail" : "(base: FiniteDistribution[Term])(vec: FiniteDistribution[Term]): ProbabilityDistribution[Typ[Term]]", "member" : "provingground.learning.TermEvolution.tangEvolveTyps", "link" : "provingground\/learning\/TermEvolution.html#tangEvolveTyps(base:provingground.FiniteDistribution[provingground.HoTT.Term])(vec:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "tangEvolve", "tail" : "(base: FiniteDistribution[Term])(vec: FiniteDistribution[Term]): ProbabilityDistribution[Term]", "member" : "provingground.learning.TermEvolution.tangEvolve", "link" : "provingground\/learning\/TermEvolution.html#tangEvolve(base:provingground.FiniteDistribution[provingground.HoTT.Term])(vec:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "baseEvolveTyps", "tail" : "(fd: FiniteDistribution[Term]): ProbabilityDistribution[Typ[Term]]", "member" : "provingground.learning.TermEvolution.baseEvolveTyps", "link" : "provingground\/learning\/TermEvolution.html#baseEvolveTyps(fd:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "baseEvolve", "tail" : "(fd: FiniteDistribution[Term]): ProbabilityDistribution[Term]", "member" : "provingground.learning.TermEvolution.baseEvolve", "link" : "provingground\/learning\/TermEvolution.html#baseEvolve(fd:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/TermEvolution.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/TermEvolution.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/TermEvolution.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/TermEvolution.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/TermEvolution.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/TermEvolution.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/TermEvolution.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TermEvolution.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TermEvolution.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TermEvolution.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/TermEvolution.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/TermEvolution.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/TermEvolution.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/TermEvolution.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/TermEvolution.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/TermEvolution.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/TermEvolution.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/TermEvolution.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/TermEvolution.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "evolveTyps", "tail" : ": (TangVec[FiniteDistribution[Term]]) ⇒ TangVec[ProbabilityDistribution[Typ[Term]]]", "member" : "provingground.learning.TermEvolution.evolveTyps", "link" : "provingground\/learning\/TermEvolution.html#evolveTyps:provingground.learning.TangVec[provingground.FiniteDistribution[provingground.HoTT.Term]]=>provingground.learning.TangVec[provingground.ProbabilityDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]]", "kind" : "abstract val"}, {"label" : "evolve", "tail" : ": (TangVec[FiniteDistribution[Term]]) ⇒ TangVec[ProbabilityDistribution[Term]]", "member" : "provingground.learning.TermEvolution.evolve", "link" : "provingground\/learning\/TermEvolution.html#evolve:provingground.learning.TangVec[provingground.FiniteDistribution[provingground.HoTT.Term]]=>provingground.learning.TangVec[provingground.ProbabilityDistribution[provingground.HoTT.Term]]", "kind" : "abstract val"}], "shortDescription" : "", "trait" : "provingground\/learning\/TermEvolution.html", "kind" : "trait"}, {"name" : "provingground.learning.TermEvolutionStep", "shortDescription" : "", "object" : "provingground\/learning\/TermEvolutionStep$.html", "members_class" : [{"label" : "next", "tail" : "(): X[TermEvolutionStep[X]]", "member" : "provingground.learning.TermEvolutionStep.next", "link" : "provingground\/learning\/TermEvolutionStep.html#next:X[provingground.learning.TermEvolutionStep[X]]", "kind" : "def"}, {"label" : "succ", "tail" : ": X[TermEvolutionStep[X]]", "member" : "provingground.learning.TermEvolutionStep.succ", "link" : "provingground\/learning\/TermEvolutionStep.html#succ:X[provingground.learning.TermEvolutionStep[X]]", "kind" : "lazy val"}, {"label" : "newp", "tail" : "(np: FiniteDistribution[Term]): TermEvolutionStep[X]", "member" : "provingground.learning.TermEvolutionStep.newp", "link" : "provingground\/learning\/TermEvolutionStep.html#newp(np:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.learning.TermEvolutionStep[X]", "kind" : "def"}, {"label" : "succFD", "tail" : ": X[FiniteDistribution[Term]]", "member" : "provingground.learning.TermEvolutionStep.succFD", "link" : "provingground\/learning\/TermEvolutionStep.html#succFD:X[provingground.FiniteDistribution[provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "feedBacks", "tail" : ": X[Vector[(FiniteDistribution[Term], Double)]]", "member" : "provingground.learning.TermEvolutionStep.feedBacks", "link" : "provingground\/learning\/TermEvolutionStep.html#feedBacks:X[Vector[(provingground.FiniteDistribution[provingground.HoTT.Term],Double)]]", "kind" : "lazy val"}, {"label" : "derivativeFDs", "tail" : ": X[Vector[(FiniteDistribution[Term], (FiniteDistribution[Term], FiniteDistribution[Typ[Term]]))]]", "member" : "provingground.learning.TermEvolutionStep.derivativeFDs", "link" : "provingground\/learning\/TermEvolutionStep.html#derivativeFDs:X[Vector[(provingground.FiniteDistribution[provingground.HoTT.Term],(provingground.FiniteDistribution[provingground.HoTT.Term],provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]))]]", "kind" : "lazy val"}, {"label" : "derFDX", "tail" : "(vec: Vector[(FiniteDistribution[Term], Int)]): X[Vector[(FiniteDistribution[Term], (FiniteDistribution[Term], FiniteDistribution[Typ[Term]]))]]", "member" : "provingground.learning.TermEvolutionStep.derFDX", "link" : "provingground\/learning\/TermEvolutionStep.html#derFDX(vec:Vector[(provingground.FiniteDistribution[provingground.HoTT.Term],Int)]):X[Vector[(provingground.FiniteDistribution[provingground.HoTT.Term],(provingground.FiniteDistribution[provingground.HoTT.Term],provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]))]]", "kind" : "def"}, {"label" : "tangSamples", "tail" : ": X[Vector[(FiniteDistribution[Term], Int)]]", "member" : "provingground.learning.TermEvolutionStep.tangSamples", "link" : "provingground\/learning\/TermEvolutionStep.html#tangSamples:X[Vector[(provingground.FiniteDistribution[provingground.HoTT.Term],Int)]]", "kind" : "lazy val"}, {"label" : "derivativeTypsFD", "tail" : "(tang: FiniteDistribution[Term], n: Int): X[FiniteDistribution[Typ[Term]]]", "member" : "provingground.learning.TermEvolutionStep.derivativeTypsFD", "link" : "provingground\/learning\/TermEvolutionStep.html#derivativeTypsFD(tang:provingground.FiniteDistribution[provingground.HoTT.Term],n:Int):X[provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]]", "kind" : "def"}, {"label" : "derivativeFD", "tail" : "(tang: FiniteDistribution[Term], n: Int): X[FiniteDistribution[Term]]", "member" : "provingground.learning.TermEvolutionStep.derivativeFD", "link" : "provingground\/learning\/TermEvolutionStep.html#derivativeFD(tang:provingground.FiniteDistribution[provingground.HoTT.Term],n:Int):X[provingground.FiniteDistribution[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "derivativePD", "tail" : "(tang: FiniteDistribution[Term]): ProbabilityDistribution[Term]", "member" : "provingground.learning.TermEvolutionStep.derivativePD", "link" : "provingground\/learning\/TermEvolutionStep.html#derivativePD(tang:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "thmFeedback", "tail" : ": X[TheoremFeedback]", "member" : "provingground.learning.TermEvolutionStep.thmFeedback", "link" : "provingground\/learning\/TermEvolutionStep.html#thmFeedback:X[provingground.learning.TheoremFeedback]", "kind" : "lazy val"}, {"label" : "nextTypFD", "tail" : ": X[FiniteDistribution[Typ[Term]]]", "member" : "provingground.learning.TermEvolutionStep.nextTypFD", "link" : "provingground\/learning\/TermEvolutionStep.html#nextTypFD:X[provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]]", "kind" : "lazy val"}, {"label" : "nextFD", "tail" : ": X[FiniteDistribution[Term]]", "member" : "provingground.learning.TermEvolutionStep.nextFD", "link" : "provingground\/learning\/TermEvolutionStep.html#nextFD:X[provingground.FiniteDistribution[provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "init", "tail" : ": ProbabilityDistribution[Term]", "member" : "provingground.learning.TermEvolutionStep.init", "link" : "provingground\/learning\/TermEvolutionStep.html#init:provingground.ProbabilityDistribution[provingground.HoTT.Term]", "kind" : "lazy val"}, {"member" : "provingground.learning.TermEvolutionStep#<init>", "error" : "unsupported entity"}, {"label" : "samp", "tail" : ": TangSamples[X]", "member" : "provingground.learning.TermEvolutionStep.samp", "link" : "provingground\/learning\/TermEvolutionStep.html#samp:provingground.learning.TangSamples[X]", "kind" : "implicit val"}, {"label" : "param", "tail" : ": Param", "member" : "provingground.learning.TermEvolutionStep.param", "link" : "provingground\/learning\/TermEvolutionStep.html#param:provingground.learning.TermEvolutionStep.Param", "kind" : "val"}, {"label" : "p", "tail" : ": FiniteDistribution[Term]", "member" : "provingground.learning.TermEvolutionStep.p", "link" : "provingground\/learning\/TermEvolutionStep.html#p:provingground.FiniteDistribution[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/TermEvolutionStep.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/TermEvolutionStep.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/TermEvolutionStep.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/TermEvolutionStep.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/TermEvolutionStep.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/TermEvolutionStep.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/TermEvolutionStep.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TermEvolutionStep.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TermEvolutionStep.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TermEvolutionStep.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/TermEvolutionStep.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/TermEvolutionStep.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/TermEvolutionStep.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/TermEvolutionStep.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/TermEvolutionStep.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/TermEvolutionStep.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/TermEvolutionStep.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/TermEvolutionStep.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/TermEvolutionStep.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "observable", "tail" : "(p: FiniteDistribution[Term], param: Param)(ms: MonixSamples): Observable[FiniteDistribution[Term]]", "member" : "provingground.learning.TermEvolutionStep.observable", "link" : "provingground\/learning\/TermEvolutionStep$.html#observable(p:provingground.FiniteDistribution[provingground.HoTT.Term],param:provingground.learning.TermEvolutionStep.Param)(implicitms:provingground.learning.MonixSamples):monix.reactive.Observable[provingground.FiniteDistribution[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "obserEv", "tail" : "(p: FiniteDistribution[Term], param: Param)(ms: MonixSamples): Observable[TermEvolutionStep[Task]]", "member" : "provingground.learning.TermEvolutionStep.obserEv", "link" : "provingground\/learning\/TermEvolutionStep$.html#obserEv(p:provingground.FiniteDistribution[provingground.HoTT.Term],param:provingground.learning.TermEvolutionStep.Param)(implicitms:provingground.learning.MonixSamples):monix.reactive.Observable[provingground.learning.TermEvolutionStep[monix.eval.Task]]", "kind" : "def"}, {"label" : "Param", "tail" : "", "member" : "provingground.learning.TermEvolutionStep.Param", "link" : "provingground\/learning\/TermEvolutionStep$.html#ParamextendsProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/TermEvolutionStep$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/TermEvolutionStep$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/TermEvolutionStep$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/TermEvolutionStep$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/TermEvolutionStep$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/TermEvolutionStep$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/TermEvolutionStep$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TermEvolutionStep$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TermEvolutionStep$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TermEvolutionStep$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/TermEvolutionStep$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/TermEvolutionStep$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/TermEvolutionStep$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/TermEvolutionStep$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/TermEvolutionStep$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/TermEvolutionStep$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/TermEvolutionStep$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/TermEvolutionStep$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/TermEvolutionStep$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/learning\/TermEvolutionStep.html", "kind" : "object"}, {"name" : "provingground.learning.TermEvolver", "shortDescription" : "", "object" : "provingground\/learning\/TermEvolver$.html", "members_class" : [{"label" : "piMix", "tail" : "(fd: TangVec[FiniteDistribution[Term]]): TangVec[ProbabilityDistribution[Typ[Term]]]", "member" : "provingground.learning.TermEvolver.piMix", "link" : "provingground\/learning\/TermEvolver.html#piMix(fd:provingground.learning.TangVec[provingground.FiniteDistribution[provingground.HoTT.Term]]):provingground.learning.TangVec[provingground.ProbabilityDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]]", "kind" : "def"}, {"label" : "lambdaForTyp", "tail" : "(typ: Typ[Term])(fd: TangVec[FiniteDistribution[Term]]): TangVec[ProbabilityDistribution[Term]]", "member" : "provingground.learning.TermEvolver.lambdaForTyp", "link" : "provingground\/learning\/TermEvolver.html#lambdaForTyp(typ:provingground.HoTT.Typ[provingground.HoTT.Term])(fd:provingground.learning.TangVec[provingground.FiniteDistribution[provingground.HoTT.Term]]):provingground.learning.TangVec[provingground.ProbabilityDistribution[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "lambdaMix", "tail" : "(fd: TangVec[FiniteDistribution[Term]]): TangVec[ProbabilityDistribution[Term]]", "member" : "provingground.learning.TermEvolver.lambdaMix", "link" : "provingground\/learning\/TermEvolver.html#lambdaMix(fd:provingground.learning.TangVec[provingground.FiniteDistribution[provingground.HoTT.Term]]):provingground.learning.TangVec[provingground.ProbabilityDistribution[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "piMixTyp", "tail" : "(typ: Typ[Term], wt: Double, base: ⇒ (TangVec[FiniteDistribution[Term]]) ⇒ TangVec[ProbabilityDistribution[Typ[Term]]]): (TangVec[FiniteDistribution[Term]]) ⇒ TangVec[ProbabilityDistribution[Typ[Term]]]", "member" : "provingground.learning.TermEvolver.piMixTyp", "link" : "provingground\/learning\/TermEvolver.html#piMixTyp(typ:provingground.HoTT.Typ[provingground.HoTT.Term],wt:Double,base:=>provingground.learning.TangVec[provingground.FiniteDistribution[provingground.HoTT.Term]]=>provingground.learning.TangVec[provingground.ProbabilityDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]]):provingground.learning.TangVec[provingground.FiniteDistribution[provingground.HoTT.Term]]=>provingground.learning.TangVec[provingground.ProbabilityDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]]", "kind" : "def"}, {"label" : "lambdaMixTyp", "tail" : "(typ: Typ[Term], wt: Double, base: ⇒ (TangVec[FiniteDistribution[Term]]) ⇒ TangVec[ProbabilityDistribution[Term]]): (TangVec[FiniteDistribution[Term]]) ⇒ TangVec[ProbabilityDistribution[Term]]", "member" : "provingground.learning.TermEvolver.lambdaMixTyp", "link" : "provingground\/learning\/TermEvolver.html#lambdaMixTyp(typ:provingground.HoTT.Typ[provingground.HoTT.Term],wt:Double,base:=>provingground.learning.TangVec[provingground.FiniteDistribution[provingground.HoTT.Term]]=>provingground.learning.TangVec[provingground.ProbabilityDistribution[provingground.HoTT.Term]]):provingground.learning.TangVec[provingground.FiniteDistribution[provingground.HoTT.Term]]=>provingground.learning.TangVec[provingground.ProbabilityDistribution[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "piMixVar", "tail" : "(x: Term, wt: Double, base: ⇒ (TangVec[FiniteDistribution[Term]]) ⇒ TangVec[ProbabilityDistribution[Typ[Term]]]): (TangVec[FiniteDistribution[Term]]) ⇒ TangVec[ProbabilityDistribution[Typ[Term]]]", "member" : "provingground.learning.TermEvolver.piMixVar", "link" : "provingground\/learning\/TermEvolver.html#piMixVar(x:provingground.HoTT.Term,wt:Double,base:=>provingground.learning.TangVec[provingground.FiniteDistribution[provingground.HoTT.Term]]=>provingground.learning.TangVec[provingground.ProbabilityDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]]):provingground.learning.TangVec[provingground.FiniteDistribution[provingground.HoTT.Term]]=>provingground.learning.TangVec[provingground.ProbabilityDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]]", "kind" : "def"}, {"label" : "lambdaMixVar", "tail" : "(x: Term, wt: Double, base: ⇒ (TangVec[FiniteDistribution[Term]]) ⇒ TangVec[ProbabilityDistribution[Term]]): (TangVec[FiniteDistribution[Term]]) ⇒ TangVec[ProbabilityDistribution[Term]]", "member" : "provingground.learning.TermEvolver.lambdaMixVar", "link" : "provingground\/learning\/TermEvolver.html#lambdaMixVar(x:provingground.HoTT.Term,wt:Double,base:=>provingground.learning.TangVec[provingground.FiniteDistribution[provingground.HoTT.Term]]=>provingground.learning.TangVec[provingground.ProbabilityDistribution[provingground.HoTT.Term]]):provingground.learning.TangVec[provingground.FiniteDistribution[provingground.HoTT.Term]]=>provingground.learning.TangVec[provingground.ProbabilityDistribution[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "Tappln", "tail" : ": (TangVec[(ProbabilityDistribution[ExstFunc], (Typ[Term]) ⇒ ProbabilityDistribution[Term])]) ⇒ TangVec[ProbabilityDistribution[Option[Term]]]", "member" : "provingground.learning.TermEvolver.Tappln", "link" : "provingground\/learning\/TermEvolver.html#Tappln:provingground.learning.TangVec[(provingground.ProbabilityDistribution[provingground.HoTT.ExstFunc],provingground.HoTT.Typ[provingground.HoTT.Term]=>provingground.ProbabilityDistribution[provingground.HoTT.Term])]=>provingground.learning.TangVec[provingground.ProbabilityDistribution[Option[provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "simpleAppln", "tail" : "(funcs: ProbabilityDistribution[ExstFunc], args: (Typ[Term]) ⇒ ProbabilityDistribution[Term]): ProbabilityDistribution[Option[Term]]", "member" : "provingground.learning.TermEvolver.simpleAppln", "link" : "provingground\/learning\/TermEvolver.html#simpleAppln(funcs:provingground.ProbabilityDistribution[provingground.HoTT.ExstFunc],args:provingground.HoTT.Typ[provingground.HoTT.Term]=>provingground.ProbabilityDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[Option[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "TunifAppln", "tail" : ": (TangVec[(ProbabilityDistribution[ExstFunc], ProbabilityDistribution[Term])]) ⇒ TangVec[ProbabilityDistribution[Option[Term]]]", "member" : "provingground.learning.TermEvolver.TunifAppln", "link" : "provingground\/learning\/TermEvolver.html#TunifAppln:provingground.learning.TangVec[(provingground.ProbabilityDistribution[provingground.HoTT.ExstFunc],provingground.ProbabilityDistribution[provingground.HoTT.Term])]=>provingground.learning.TangVec[provingground.ProbabilityDistribution[Option[provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "unifAppln", "tail" : "(x: ProbabilityDistribution[ExstFunc], y: ProbabilityDistribution[Term]): ProbabilityDistribution[Option[Term]]", "member" : "provingground.learning.TermEvolver.unifAppln", "link" : "provingground\/learning\/TermEvolver.html#unifAppln(x:provingground.ProbabilityDistribution[provingground.HoTT.ExstFunc],y:provingground.ProbabilityDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[Option[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "evolveAtTyp", "tail" : "(typ: Typ[Term]): (TangVec[FiniteDistribution[Term]]) ⇒ TangVec[ProbabilityDistribution[Term]]", "member" : "provingground.learning.TermEvolver.evolveAtTyp", "link" : "provingground\/learning\/TermEvolver.html#evolveAtTyp(typ:provingground.HoTT.Typ[provingground.HoTT.Term]):provingground.learning.TangVec[provingground.FiniteDistribution[provingground.HoTT.Term]]=>provingground.learning.TangVec[provingground.ProbabilityDistribution[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "evolveTyps", "tail" : ": (TangVec[FiniteDistribution[Term]]) ⇒ TangVec[ProbabilityDistribution[Typ[Term]]]", "member" : "provingground.learning.TermEvolver.evolveTyps", "link" : "provingground\/learning\/TermEvolver.html#evolveTyps:provingground.learning.TangVec[provingground.FiniteDistribution[provingground.HoTT.Term]]=>provingground.learning.TangVec[provingground.ProbabilityDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "evolveWithTyp", "tail" : ": (TangVec[FiniteDistribution[Term]]) ⇒ TangVec[(Typ[Term]) ⇒ ProbabilityDistribution[Term]]", "member" : "provingground.learning.TermEvolver.evolveWithTyp", "link" : "provingground\/learning\/TermEvolver.html#evolveWithTyp:provingground.learning.TangVec[provingground.FiniteDistribution[provingground.HoTT.Term]]=>provingground.learning.TangVec[provingground.HoTT.Typ[provingground.HoTT.Term]=>provingground.ProbabilityDistribution[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "evolveTypFamilies", "tail" : ": (TangVec[FiniteDistribution[Term]]) ⇒ TangVec[ProbabilityDistribution[ExstFunc]]", "member" : "provingground.learning.TermEvolver.evolveTypFamilies", "link" : "provingground\/learning\/TermEvolver.html#evolveTypFamilies:provingground.learning.TangVec[provingground.FiniteDistribution[provingground.HoTT.Term]]=>provingground.learning.TangVec[provingground.ProbabilityDistribution[provingground.HoTT.ExstFunc]]", "kind" : "val"}, {"label" : "evolveFuncs", "tail" : ": (TangVec[FiniteDistribution[Term]]) ⇒ TangVec[ProbabilityDistribution[ExstFunc]]", "member" : "provingground.learning.TermEvolver.evolveFuncs", "link" : "provingground\/learning\/TermEvolver.html#evolveFuncs:provingground.learning.TangVec[provingground.FiniteDistribution[provingground.HoTT.Term]]=>provingground.learning.TangVec[provingground.ProbabilityDistribution[provingground.HoTT.ExstFunc]]", "kind" : "val"}, {"label" : "evolve", "tail" : ": (TangVec[FiniteDistribution[Term]]) ⇒ TangVec[ProbabilityDistribution[Term]]", "member" : "provingground.learning.TermEvolver.evolve", "link" : "provingground\/learning\/TermEvolver.html#evolve:provingground.learning.TangVec[provingground.FiniteDistribution[provingground.HoTT.Term]]=>provingground.learning.TangVec[provingground.ProbabilityDistribution[provingground.HoTT.Term]]", "kind" : "val"}, {"member" : "provingground.learning.TermEvolver#<init>", "error" : "unsupported entity"}, {"label" : "tangEvolveTyps", "tail" : "(base: FiniteDistribution[Term])(vec: FiniteDistribution[Term]): ProbabilityDistribution[Typ[Term]]", "member" : "provingground.learning.TermEvolution.tangEvolveTyps", "link" : "provingground\/learning\/TermEvolver.html#tangEvolveTyps(base:provingground.FiniteDistribution[provingground.HoTT.Term])(vec:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "tangEvolve", "tail" : "(base: FiniteDistribution[Term])(vec: FiniteDistribution[Term]): ProbabilityDistribution[Term]", "member" : "provingground.learning.TermEvolution.tangEvolve", "link" : "provingground\/learning\/TermEvolver.html#tangEvolve(base:provingground.FiniteDistribution[provingground.HoTT.Term])(vec:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "baseEvolveTyps", "tail" : "(fd: FiniteDistribution[Term]): ProbabilityDistribution[Typ[Term]]", "member" : "provingground.learning.TermEvolution.baseEvolveTyps", "link" : "provingground\/learning\/TermEvolver.html#baseEvolveTyps(fd:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "baseEvolve", "tail" : "(fd: FiniteDistribution[Term]): ProbabilityDistribution[Term]", "member" : "provingground.learning.TermEvolution.baseEvolve", "link" : "provingground\/learning\/TermEvolver.html#baseEvolve(fd:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.ProbabilityDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/TermEvolver.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/TermEvolver.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/TermEvolver.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/TermEvolver.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/TermEvolver.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/TermEvolver.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/TermEvolver.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TermEvolver.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TermEvolver.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TermEvolver.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/TermEvolver.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/TermEvolver.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/TermEvolver.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/TermEvolver.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/TermEvolver.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/TermEvolver.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/TermEvolver.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/TermEvolver.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/TermEvolver.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "topTheorems", "tail" : "(fd: FiniteDistribution[Term], n: Int): Vector[Weighted[Typ[Term]]]", "member" : "provingground.learning.TermEvolver.topTheorems", "link" : "provingground\/learning\/TermEvolver$.html#topTheorems(fd:provingground.FiniteDistribution[provingground.HoTT.Term],n:Int):scala.collection.immutable.Vector[provingground.Weighted[provingground.HoTT.Typ[provingground.HoTT.Term]]]", "kind" : "def"}, {"label" : "allTheorems", "tail" : "(fd: FiniteDistribution[Term], n: Int): Vector[Weighted[Typ[Term]]]", "member" : "provingground.learning.TermEvolver.allTheorems", "link" : "provingground\/learning\/TermEvolver$.html#allTheorems(fd:provingground.FiniteDistribution[provingground.HoTT.Term],n:Int):Vector[provingground.Weighted[provingground.HoTT.Typ[provingground.HoTT.Term]]]", "kind" : "def"}, {"label" : "theorems", "tail" : "(fd: FiniteDistribution[Term]): FiniteDistribution[Typ[Term]]", "member" : "provingground.learning.TermEvolver.theorems", "link" : "provingground\/learning\/TermEvolver$.html#theorems(fd:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "justTerm", "tail" : "(x: U): Term", "member" : "provingground.learning.TermEvolver.justTerm", "link" : "provingground\/learning\/TermEvolver$.html#justTerm[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](x:U):provingground.HoTT.Term", "kind" : "def"}, {"label" : "toFD", "tail" : "(sample: Map[A, Int]): FiniteDistribution[A]", "member" : "provingground.learning.TermEvolver.toFD", "link" : "provingground\/learning\/TermEvolver$.html#toFD[A](sample:Map[A,Int]):provingground.FiniteDistribution[A]", "kind" : "def"}, {"label" : "total", "tail" : "(x: Vector[(A, Int)]): Int", "member" : "provingground.learning.TermEvolver.total", "link" : "provingground\/learning\/TermEvolver$.html#total[A](x:Vector[(A,Int)]):Int", "kind" : "def"}, {"label" : "TPOps", "tail" : "", "member" : "provingground.learning.TermEvolver.TPOps", "link" : "provingground\/learning\/TermEvolver$.html#TPOps[A]extendsAnyRef", "kind" : "implicit class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/TermEvolver$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/TermEvolver$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/TermEvolver$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/TermEvolver$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/TermEvolver$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/TermEvolver$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/TermEvolver$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TermEvolver$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TermEvolver$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TermEvolver$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/TermEvolver$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/TermEvolver$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/TermEvolver$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/TermEvolver$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/TermEvolver$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/TermEvolver$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/TermEvolver$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/TermEvolver$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/TermEvolver$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/learning\/TermEvolver.html", "kind" : "object"}, {"name" : "provingground.learning.TermGeneratorNodes", "shortDescription" : "Combining terms and subclasses to get terms, types, functions etc; these are abstract specifications,to be used for generating distributions, obtaining equations etc.", "members_class" : [{"label" : "indexedIterHeadNode", "tail" : "(inductiveTyp: Term): FlatMap[Typ[Term], Typ[Term]]", "member" : "provingground.learning.TermGeneratorNodes.indexedIterHeadNode", "link" : "provingground\/learning\/TermGeneratorNodes.html#indexedIterHeadNode(inductiveTyp:provingground.HoTT.Term):provingground.learning.GeneratorNode.FlatMap[provingground.HoTT.Typ[provingground.HoTT.Term],provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "indexedIterFuncNode", "tail" : "(targetTyp: Term): FlatMap[Typ[Term], Typ[Term]]", "member" : "provingground.learning.TermGeneratorNodes.indexedIterFuncNode", "link" : "provingground\/learning\/TermGeneratorNodes.html#indexedIterFuncNode(targetTyp:provingground.HoTT.Term):provingground.learning.GeneratorNode.FlatMap[provingground.HoTT.Typ[provingground.HoTT.Term],provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "indexedIterFuncIsle", "tail" : "(targetTyp: Term)(typ: Typ[Term]): Island[Typ[Term], InitState, Typ[Term], Term]", "member" : "provingground.learning.TermGeneratorNodes.indexedIterFuncIsle", "link" : "provingground\/learning\/TermGeneratorNodes.html#indexedIterFuncIsle(targetTyp:provingground.HoTT.Term)(typ:provingground.HoTT.Typ[provingground.HoTT.Term]):provingground.learning.GeneratorNode.Island[provingground.HoTT.Typ[provingground.HoTT.Term],InitState,provingground.HoTT.Typ[provingground.HoTT.Term],provingground.HoTT.Term]", "kind" : "def"}, {"label" : "indexedOtherHeadNode", "tail" : "(typF: Term): FlatMap[Typ[Term], Typ[Term]]", "member" : "provingground.learning.TermGeneratorNodes.indexedOtherHeadNode", "link" : "provingground\/learning\/TermGeneratorNodes.html#indexedOtherHeadNode(typF:provingground.HoTT.Term):provingground.learning.GeneratorNode.FlatMap[provingground.HoTT.Typ[provingground.HoTT.Term],provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "indexedSelfHeadNode", "tail" : "(typF: Term): FlatMap[Typ[Term], Typ[Term]]", "member" : "provingground.learning.TermGeneratorNodes.indexedSelfHeadNode", "link" : "provingground\/learning\/TermGeneratorNodes.html#indexedSelfHeadNode(typF:provingground.HoTT.Term):provingground.learning.GeneratorNode.FlatMap[provingground.HoTT.Typ[provingground.HoTT.Term],provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "indexedOtherHeadIsle", "tail" : "(typF: Term)(typ: Typ[Term]): Island[Typ[Term], InitState, Typ[Term], Term]", "member" : "provingground.learning.TermGeneratorNodes.indexedOtherHeadIsle", "link" : "provingground\/learning\/TermGeneratorNodes.html#indexedOtherHeadIsle(typF:provingground.HoTT.Term)(typ:provingground.HoTT.Typ[provingground.HoTT.Term]):provingground.learning.GeneratorNode.Island[provingground.HoTT.Typ[provingground.HoTT.Term],InitState,provingground.HoTT.Typ[provingground.HoTT.Term],provingground.HoTT.Term]", "kind" : "def"}, {"label" : "indexedInducIdNode", "tail" : "(typF: Typ[Term]): Map[Typ[Term], Typ[Term]]", "member" : "provingground.learning.TermGeneratorNodes.indexedInducIdNode", "link" : "provingground\/learning\/TermGeneratorNodes.html#indexedInducIdNode(typF:provingground.HoTT.Typ[provingground.HoTT.Term]):provingground.learning.GeneratorNode.Map[provingground.HoTT.Typ[provingground.HoTT.Term],provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "typFromFamily", "tail" : "(typF: Term): MapOpt[Term, Typ[Term]]", "member" : "provingground.learning.TermGeneratorNodes.typFromFamily", "link" : "provingground\/learning\/TermGeneratorNodes.html#typFromFamily(typF:provingground.HoTT.Term):provingground.learning.GeneratorNode.MapOpt[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "iterHeadNode", "tail" : "(inductiveTyp: Typ[Term]): FlatMap[Typ[Term], Typ[Term]]", "member" : "provingground.learning.TermGeneratorNodes.iterHeadNode", "link" : "provingground\/learning\/TermGeneratorNodes.html#iterHeadNode(inductiveTyp:provingground.HoTT.Typ[provingground.HoTT.Term]):provingground.learning.GeneratorNode.FlatMap[provingground.HoTT.Typ[provingground.HoTT.Term],provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "iterFuncNode", "tail" : "(targetTyp: Typ[Term]): FlatMap[Typ[Term], Typ[Term]]", "member" : "provingground.learning.TermGeneratorNodes.iterFuncNode", "link" : "provingground\/learning\/TermGeneratorNodes.html#iterFuncNode(targetTyp:provingground.HoTT.Typ[provingground.HoTT.Term]):provingground.learning.GeneratorNode.FlatMap[provingground.HoTT.Typ[provingground.HoTT.Term],provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "iterFuncIsle", "tail" : "(targetTyp: Typ[Term])(typ: Typ[Term]): Island[Typ[Term], InitState, Typ[Term], Term]", "member" : "provingground.learning.TermGeneratorNodes.iterFuncIsle", "link" : "provingground\/learning\/TermGeneratorNodes.html#iterFuncIsle(targetTyp:provingground.HoTT.Typ[provingground.HoTT.Term])(typ:provingground.HoTT.Typ[provingground.HoTT.Term]):provingground.learning.GeneratorNode.Island[provingground.HoTT.Typ[provingground.HoTT.Term],InitState,provingground.HoTT.Typ[provingground.HoTT.Term],provingground.HoTT.Term]", "kind" : "def"}, {"label" : "iteratedApply", "tail" : "(f: Term): GeneratorNode[Term]", "member" : "provingground.learning.TermGeneratorNodes.iteratedApply", "link" : "provingground\/learning\/TermGeneratorNodes.html#iteratedApply(f:provingground.HoTT.Term):provingground.learning.GeneratorNode[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "partiallyApply", "tail" : "(f: Term): Option[Map[Term, Term]]", "member" : "provingground.learning.TermGeneratorNodes.partiallyApply", "link" : "provingground\/learning\/TermGeneratorNodes.html#partiallyApply(f:provingground.HoTT.Term):Option[provingground.learning.GeneratorNode.Map[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "simpleInductiveDefn", "tail" : "(inductiveTyp: Typ[Term]): Map[Vector[Typ[Term]], ExstInducDefn]", "member" : "provingground.learning.TermGeneratorNodes.simpleInductiveDefn", "link" : "provingground\/learning\/TermGeneratorNodes.html#simpleInductiveDefn(inductiveTyp:provingground.HoTT.Typ[provingground.HoTT.Term]):provingground.learning.GeneratorNode.Map[Vector[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.induction.ExstInducDefn]", "kind" : "def"}, {"label" : "simpleInductiveStructure", "tail" : "(inductiveTyp: Typ[Term]): Map[Vector[Typ[Term]], ExstInducStruc]", "member" : "provingground.learning.TermGeneratorNodes.simpleInductiveStructure", "link" : "provingground\/learning\/TermGeneratorNodes.html#simpleInductiveStructure(inductiveTyp:provingground.HoTT.Typ[provingground.HoTT.Term]):provingground.learning.GeneratorNode.Map[Vector[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.induction.ExstInducStruc]", "kind" : "def"}, {"label" : "otherHeadNode", "tail" : "(inductiveTyp: Typ[Term]): FlatMap[Typ[Term], Typ[Term]]", "member" : "provingground.learning.TermGeneratorNodes.otherHeadNode", "link" : "provingground\/learning\/TermGeneratorNodes.html#otherHeadNode(inductiveTyp:provingground.HoTT.Typ[provingground.HoTT.Term]):provingground.learning.GeneratorNode.FlatMap[provingground.HoTT.Typ[provingground.HoTT.Term],provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "otherHeadIsle", "tail" : "(inductiveTyp: Typ[Term])(typ: Typ[Term]): Island[Typ[Term], InitState, Typ[Term], Term]", "member" : "provingground.learning.TermGeneratorNodes.otherHeadIsle", "link" : "provingground\/learning\/TermGeneratorNodes.html#otherHeadIsle(inductiveTyp:provingground.HoTT.Typ[provingground.HoTT.Term])(typ:provingground.HoTT.Typ[provingground.HoTT.Term]):provingground.learning.GeneratorNode.Island[provingground.HoTT.Typ[provingground.HoTT.Term],InitState,provingground.HoTT.Typ[provingground.HoTT.Term],provingground.HoTT.Term]", "kind" : "def"}, {"label" : "selfHeadNode", "tail" : "(inductiveTyp: Typ[Term]): Island[Typ[Term], InitState, Typ[Term], Term]", "member" : "provingground.learning.TermGeneratorNodes.selfHeadNode", "link" : "provingground\/learning\/TermGeneratorNodes.html#selfHeadNode(inductiveTyp:provingground.HoTT.Typ[provingground.HoTT.Term]):provingground.learning.GeneratorNode.Island[provingground.HoTT.Typ[provingground.HoTT.Term],InitState,provingground.HoTT.Typ[provingground.HoTT.Term],provingground.HoTT.Term]", "kind" : "def"}, {"label" : "termsByTyps", "tail" : ": ZipFlatMap[Typ[Term], Term, Term]", "member" : "provingground.learning.TermGeneratorNodes.termsByTyps", "link" : "provingground\/learning\/TermGeneratorNodes.html#termsByTyps:provingground.learning.GeneratorNode.ZipFlatMap[provingground.HoTT.Typ[provingground.HoTT.Term],provingground.HoTT.Term,provingground.HoTT.Term]", "kind" : "val"}, {"label" : "inducFuncs", "tail" : ": FlatMap[ExstInducStruc, ExstFunc]", "member" : "provingground.learning.TermGeneratorNodes.inducFuncs", "link" : "provingground\/learning\/TermGeneratorNodes.html#inducFuncs:provingground.learning.GeneratorNode.FlatMap[provingground.induction.ExstInducStruc,provingground.HoTT.ExstFunc]", "kind" : "val"}, {"label" : "recFuncs", "tail" : ": FlatMap[ExstInducStruc, ExstFunc]", "member" : "provingground.learning.TermGeneratorNodes.recFuncs", "link" : "provingground\/learning\/TermGeneratorNodes.html#recFuncs:provingground.learning.GeneratorNode.FlatMap[provingground.induction.ExstInducStruc,provingground.HoTT.ExstFunc]", "kind" : "val"}, {"label" : "inducFuncsForStruc", "tail" : "(ind: ExstInducStruc): ZipMapOpt[Typ[Term], Term, ExstFunc]", "member" : "provingground.learning.TermGeneratorNodes.inducFuncsForStruc", "link" : "provingground\/learning\/TermGeneratorNodes.html#inducFuncsForStruc(ind:provingground.induction.ExstInducStruc):provingground.learning.GeneratorNode.ZipMapOpt[provingground.HoTT.Typ[provingground.HoTT.Term],provingground.HoTT.Term,provingground.HoTT.ExstFunc]", "kind" : "def"}, {"label" : "recFuncsForStruc", "tail" : "(ind: ExstInducStruc): ZipMapOpt[Typ[Term], Typ[Term], ExstFunc]", "member" : "provingground.learning.TermGeneratorNodes.recFuncsForStruc", "link" : "provingground\/learning\/TermGeneratorNodes.html#recFuncsForStruc(ind:provingground.induction.ExstInducStruc):provingground.learning.GeneratorNode.ZipMapOpt[provingground.HoTT.Typ[provingground.HoTT.Term],provingground.HoTT.Typ[provingground.HoTT.Term],provingground.HoTT.ExstFunc]", "kind" : "def"}, {"label" : "piNode", "tail" : ": FlatMap[Typ[Term], Typ[Term]]", "member" : "provingground.learning.TermGeneratorNodes.piNode", "link" : "provingground\/learning\/TermGeneratorNodes.html#piNode:provingground.learning.GeneratorNode.FlatMap[provingground.HoTT.Typ[provingground.HoTT.Term],provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "piIsle", "tail" : "(typ: Typ[Term]): Island[Typ[Term], InitState, Typ[Term], Term]", "member" : "provingground.learning.TermGeneratorNodes.piIsle", "link" : "provingground\/learning\/TermGeneratorNodes.html#piIsle(typ:provingground.HoTT.Typ[provingground.HoTT.Term]):provingground.learning.GeneratorNode.Island[provingground.HoTT.Typ[provingground.HoTT.Term],InitState,provingground.HoTT.Typ[provingground.HoTT.Term],provingground.HoTT.Term]", "kind" : "def"}, {"label" : "lambdaByTypNodeFamily", "tail" : ": GeneratorNodeFamily[::[Typ[Term], HNil], Term]", "member" : "provingground.learning.TermGeneratorNodes.lambdaByTypNodeFamily", "link" : "provingground\/learning\/TermGeneratorNodes.html#lambdaByTypNodeFamily:provingground.learning.GeneratorNodeFamily[provingground.HoTT.Typ[provingground.HoTT.Term]::shapeless.HNil,provingground.HoTT.Term]", "kind" : "val"}, {"label" : "lambdaNode", "tail" : ": FlatMap[Typ[Term], Term]", "member" : "provingground.learning.TermGeneratorNodes.lambdaNode", "link" : "provingground\/learning\/TermGeneratorNodes.html#lambdaNode:provingground.learning.GeneratorNode.FlatMap[provingground.HoTT.Typ[provingground.HoTT.Term],provingground.HoTT.Term]", "kind" : "val"}, {"label" : "lambdaIsleForFuncWithDomain", "tail" : "(dom: Typ[Term]): Island[ExstFunc, InitState, Term, Term]", "member" : "provingground.learning.TermGeneratorNodes.lambdaIsleForFuncWithDomain", "link" : "provingground\/learning\/TermGeneratorNodes.html#lambdaIsleForFuncWithDomain(dom:provingground.HoTT.Typ[provingground.HoTT.Term]):provingground.learning.GeneratorNode.Island[provingground.HoTT.ExstFunc,InitState,provingground.HoTT.Term,provingground.HoTT.Term]", "kind" : "def"}, {"label" : "lambdaIsleForTyp", "tail" : "(typ: Typ[Term]): Option[Island[Term, InitState, Term, Term]]", "member" : "provingground.learning.TermGeneratorNodes.lambdaIsleForTyp", "link" : "provingground\/learning\/TermGeneratorNodes.html#lambdaIsleForTyp(typ:provingground.HoTT.Typ[provingground.HoTT.Term]):Option[provingground.learning.GeneratorNode.Island[provingground.HoTT.Term,InitState,provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "lambdaIsle", "tail" : "(typ: Typ[Term]): Island[Term, InitState, Term, Term]", "member" : "provingground.learning.TermGeneratorNodes.lambdaIsle", "link" : "provingground\/learning\/TermGeneratorNodes.html#lambdaIsle(typ:provingground.HoTT.Typ[provingground.HoTT.Term]):provingground.learning.GeneratorNode.Island[provingground.HoTT.Term,InitState,provingground.HoTT.Term,provingground.HoTT.Term]", "kind" : "def"}, {"label" : "applnByArgNode", "tail" : ": FiberProductMap[Term, ExstFunc, Typ[Term], Term]", "member" : "provingground.learning.TermGeneratorNodes.applnByArgNode", "link" : "provingground\/learning\/TermGeneratorNodes.html#applnByArgNode:provingground.learning.GeneratorNode.FiberProductMap[provingground.HoTT.Term,provingground.HoTT.ExstFunc,provingground.HoTT.Typ[provingground.HoTT.Term],provingground.HoTT.Term]", "kind" : "val"}, {"label" : "applnNode", "tail" : ": FiberProductMap[ExstFunc, Term, Typ[Term], Term]", "member" : "provingground.learning.TermGeneratorNodes.applnNode", "link" : "provingground\/learning\/TermGeneratorNodes.html#applnNode:provingground.learning.GeneratorNode.FiberProductMap[provingground.HoTT.ExstFunc,provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term],provingground.HoTT.Term]", "kind" : "val"}, {"label" : "unifApplnNode", "tail" : ": ZipMapOpt[ExstFunc, Term, Term]", "member" : "provingground.learning.TermGeneratorNodes.unifApplnNode", "link" : "provingground\/learning\/TermGeneratorNodes.html#unifApplnNode:provingground.learning.GeneratorNode.ZipMapOpt[provingground.HoTT.ExstFunc,provingground.HoTT.Term,provingground.HoTT.Term]", "kind" : "val"}, {"member" : "provingground.learning.TermGeneratorNodes#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/TermGeneratorNodes.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/TermGeneratorNodes.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/TermGeneratorNodes.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/TermGeneratorNodes.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/TermGeneratorNodes.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/TermGeneratorNodes.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/TermGeneratorNodes.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TermGeneratorNodes.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TermGeneratorNodes.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TermGeneratorNodes.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/TermGeneratorNodes.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/TermGeneratorNodes.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/TermGeneratorNodes.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/TermGeneratorNodes.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/TermGeneratorNodes.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/TermGeneratorNodes.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/TermGeneratorNodes.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/TermGeneratorNodes.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/TermGeneratorNodes.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/learning\/TermGeneratorNodes.html", "kind" : "class"}, {"name" : "provingground.learning.TermLearner", "shortDescription" : "Adding equations from a simple generative model to EvolverEquations", "members_case class" : [{"label" : "cost", "tail" : "(cnstWt: Double, evWt: Double, klWt: Double, hWt: Double): F", "member" : "provingground.learning.TermLearner.cost", "link" : "provingground\/learning\/TermLearner.html#cost(cnstWt:Double,evWt:Double,klWt:Double,hWt:Double):F", "kind" : "def"}, {"label" : "evolutionCost", "tail" : ": F", "member" : "provingground.learning.TermLearner.evolutionCost", "link" : "provingground\/learning\/TermLearner.html#evolutionCost:F", "kind" : "lazy val"}, {"label" : "evolutionEquations", "tail" : ": Vector[(F, F)]", "member" : "provingground.learning.TermLearner.evolutionEquations", "link" : "provingground\/learning\/TermLearner.html#evolutionEquations:Vector[(F,F)]", "kind" : "lazy val"}, {"label" : "recValue", "tail" : "(t: Term, context: Vector[Term]): F", "member" : "provingground.learning.TermLearner.recValue", "link" : "provingground\/learning\/TermLearner.html#recValue(t:provingground.HoTT.Term,context:Vector[provingground.HoTT.Term]):F", "kind" : "def"}, {"label" : "fromIsland", "tail" : "(t: Term, context: Vector[Term]): F", "member" : "provingground.learning.TermLearner.fromIsland", "link" : "provingground\/learning\/TermLearner.html#fromIsland(t:provingground.HoTT.Term,context:Vector[provingground.HoTT.Term]):F", "kind" : "def"}, {"label" : "fromUnApp", "tail" : "(t: Term, context: Vector[Term]): F", "member" : "provingground.learning.TermLearner.fromUnApp", "link" : "provingground\/learning\/TermLearner.html#fromUnApp(t:provingground.HoTT.Term,context:Vector[provingground.HoTT.Term]):F", "kind" : "def"}, {"label" : "fromAppl", "tail" : "(t: Term, context: Vector[Term]): F", "member" : "provingground.learning.TermLearner.fromAppl", "link" : "provingground\/learning\/TermLearner.html#fromAppl(t:provingground.HoTT.Term,context:Vector[provingground.HoTT.Term]):F", "kind" : "def"}, {"label" : "initContextProb", "tail" : "(t: Term, context: Vector[Term]): F", "member" : "provingground.learning.TermLearner.initContextProb", "link" : "provingground\/learning\/TermLearner.html#initContextProb(t:provingground.HoTT.Term,context:Vector[provingground.HoTT.Term]):F", "kind" : "def"}, {"label" : "varWeight", "tail" : "(): F", "member" : "provingground.learning.TermLearner.varWeight", "link" : "provingground\/learning\/TermLearner.html#varWeight:F", "kind" : "def"}, {"label" : "piWeight", "tail" : "(): F", "member" : "provingground.learning.TermLearner.piWeight", "link" : "provingground\/learning\/TermLearner.html#piWeight:F", "kind" : "def"}, {"label" : "lambdaWeight", "tail" : "(): F", "member" : "provingground.learning.TermLearner.lambdaWeight", "link" : "provingground\/learning\/TermLearner.html#lambdaWeight:F", "kind" : "def"}, {"label" : "appl", "tail" : "(): F", "member" : "provingground.learning.TermLearner.appl", "link" : "provingground\/learning\/TermLearner.html#appl:F", "kind" : "def"}, {"label" : "unApp", "tail" : "(): F", "member" : "provingground.learning.TermLearner.unApp", "link" : "provingground\/learning\/TermLearner.html#unApp:F", "kind" : "def"}, {"label" : "initWeight", "tail" : "(): F", "member" : "provingground.learning.TermLearner.initWeight", "link" : "provingground\/learning\/TermLearner.html#initWeight:F", "kind" : "def"}, {"member" : "provingground.learning.TermLearner#<init>", "error" : "unsupported entity"}, {"label" : "apInv", "tail" : ": ApplnInverse", "member" : "provingground.learning.TermLearner.apInv", "link" : "provingground\/learning\/TermLearner.html#apInv:provingground.learning.ApplnInverse", "kind" : "val"}, {"label" : "prob", "tail" : ": (EvolverVariables) ⇒ F", "member" : "provingground.learning.TermLearner.prob", "link" : "provingground\/learning\/TermLearner.html#prob:provingground.learning.EvolverVariables=>F", "kind" : "val"}, {"label" : "supp", "tail" : ": EvolverSupport", "member" : "provingground.learning.TermLearner.supp", "link" : "provingground\/learning\/TermLearner.html#supp:provingground.learning.EvolverSupport", "kind" : "val"}, {"label" : "genEntropy", "tail" : ": F", "member" : "provingground.learning.EvolverEquations.genEntropy", "link" : "provingground\/learning\/TermLearner.html#genEntropy:F", "kind" : "lazy val"}, {"label" : "kullbackLeibler", "tail" : ": F", "member" : "provingground.learning.EvolverEquations.kullbackLeibler", "link" : "provingground\/learning\/TermLearner.html#kullbackLeibler:F", "kind" : "lazy val"}, {"label" : "thmProb", "tail" : "(thm: Typ[Term]): F", "member" : "provingground.learning.EvolverEquations.thmProb", "link" : "provingground\/learning\/TermLearner.html#thmProb(thm:provingground.HoTT.Typ[provingground.HoTT.Term]):F", "kind" : "def"}, {"label" : "totThmProb", "tail" : ": F", "member" : "provingground.learning.EvolverEquations.totThmProb", "link" : "provingground\/learning\/TermLearner.html#totThmProb:F", "kind" : "lazy val"}, {"label" : "proofProb", "tail" : "(thm: Typ[Term]): F", "member" : "provingground.learning.EvolverEquations.proofProb", "link" : "provingground\/learning\/TermLearner.html#proofProb(thm:provingground.HoTT.Typ[provingground.HoTT.Term]):F", "kind" : "def"}, {"label" : "consistencyCost", "tail" : ": F", "member" : "provingground.learning.EvolverEquations.consistencyCost", "link" : "provingground\/learning\/TermLearner.html#consistencyCost:F", "kind" : "lazy val"}, {"label" : "consistencyEquations", "tail" : ": Vector[(F, F)]", "member" : "provingground.learning.EvolverEquations.consistencyEquations", "link" : "provingground\/learning\/TermLearner.html#consistencyEquations:Vector[(F,F)]", "kind" : "lazy val"}, {"label" : "contextConsistency", "tail" : "(context: Vector[Term]): Vector[(F, F)]", "member" : "provingground.learning.EvolverEquations.contextConsistency", "link" : "provingground\/learning\/TermLearner.html#contextConsistency(context:Vector[provingground.HoTT.Term]):scala.collection.immutable.Vector[(F,F)]", "kind" : "def"}, {"label" : "isTypProb", "tail" : "(context: Vector[Term]): (F, F)", "member" : "provingground.learning.EvolverEquations.isTypProb", "link" : "provingground\/learning\/TermLearner.html#isTypProb(context:Vector[provingground.HoTT.Term]):(F,F)", "kind" : "def"}, {"label" : "isFuncProb", "tail" : "(context: Vector[Term]): (F, F)", "member" : "provingground.learning.EvolverEquations.isFuncProb", "link" : "provingground\/learning\/TermLearner.html#isFuncProb(context:Vector[provingground.HoTT.Term]):(F,F)", "kind" : "def"}, {"label" : "hasTypProb", "tail" : "(typ: Typ[Term], context: Vector[Term]): (F, F)", "member" : "provingground.learning.EvolverEquations.hasTypProb", "link" : "provingground\/learning\/TermLearner.html#hasTypProb(typ:provingground.HoTT.Typ[provingground.HoTT.Term],context:Vector[provingground.HoTT.Term]):(F,F)", "kind" : "def"}, {"label" : "totInitProbOne", "tail" : ": (F, F)", "member" : "provingground.learning.EvolverEquations.totInitProbOne", "link" : "provingground\/learning\/TermLearner.html#totInitProbOne:(F,F)", "kind" : "lazy val"}, {"label" : "totProbOne", "tail" : "(context: Vector[Term]): (F, F)", "member" : "provingground.learning.EvolverEquations.totProbOne", "link" : "provingground\/learning\/TermLearner.html#totProbOne(context:Vector[provingground.HoTT.Term]):(F,F)", "kind" : "def"}, {"label" : "totFinalProb", "tail" : "(terms: Set[Term], context: Vector[Term]): F", "member" : "provingground.learning.EvolverEquations.totFinalProb", "link" : "provingground\/learning\/TermLearner.html#totFinalProb(terms:Set[provingground.HoTT.Term],context:Vector[provingground.HoTT.Term]):F", "kind" : "def"}, {"label" : "isTypP", "tail" : "(context: Vector[Term]): F", "member" : "provingground.learning.EvolverEquations.isTypP", "link" : "provingground\/learning\/TermLearner.html#isTypP(context:Vector[provingground.HoTT.Term]):F", "kind" : "def"}, {"label" : "isFuncP", "tail" : "(context: Vector[Term]): F", "member" : "provingground.learning.EvolverEquations.isFuncP", "link" : "provingground\/learning\/TermLearner.html#isFuncP(context:Vector[provingground.HoTT.Term]):F", "kind" : "def"}, {"label" : "hasTyp", "tail" : "(typ: Typ[Term], context: Vector[Term]): F", "member" : "provingground.learning.EvolverEquations.hasTyp", "link" : "provingground\/learning\/TermLearner.html#hasTyp(typ:provingground.HoTT.Typ[provingground.HoTT.Term],context:Vector[provingground.HoTT.Term]):F", "kind" : "def"}, {"label" : "finalProb", "tail" : "(t: Term, context: Vector[Term]): F", "member" : "provingground.learning.EvolverEquations.finalProb", "link" : "provingground\/learning\/TermLearner.html#finalProb(t:provingground.HoTT.Term,context:Vector[provingground.HoTT.Term]):F", "kind" : "def"}, {"label" : "initProb", "tail" : "(t: Term): F", "member" : "provingground.learning.EvolverEquations.initProb", "link" : "provingground\/learning\/TermLearner.html#initProb(t:provingground.HoTT.Term):F", "kind" : "def"}, {"label" : "field", "tail" : ": Field[F]", "member" : "provingground.learning.EvolverEquations.field", "link" : "provingground\/learning\/TermLearner.html#field:spire.algebra.Field[F]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/TermLearner.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/TermLearner.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/TermLearner.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/TermLearner.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/TermLearner.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/TermLearner.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/TermLearner.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TermLearner.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TermLearner.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TermLearner.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/TermLearner.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/TermLearner.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/TermLearner.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/TermLearner.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/TermLearner.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/TermLearner.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/learning\/TermLearner.html", "kind" : "case class"}, {"name" : "provingground.learning.TermPopulation", "shortDescription" : "", "members_case class" : [{"label" : "pickle", "tail" : "(): String", "member" : "provingground.learning.TermPopulation.pickle", "link" : "provingground\/learning\/TermPopulation.html#pickle:String", "kind" : "def"}, {"label" : "pickledPopulation", "tail" : "(): PickledTermPopulation", "member" : "provingground.learning.TermPopulation.pickledPopulation", "link" : "provingground\/learning\/TermPopulation.html#pickledPopulation:provingground.learning.PickledTermPopulation", "kind" : "def"}, {"label" : "learnerFeedback", "tail" : "(absTheorems: FiniteDistribution[Typ[Term]]): FiniteDistribution[Term]", "member" : "provingground.learning.TermPopulation.learnerFeedback", "link" : "provingground\/learning\/TermPopulation.html#learnerFeedback(absTheorems:provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]):provingground.FiniteDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "feedback", "tail" : ": FiniteDistribution[Term]", "member" : "provingground.learning.TermPopulation.feedback", "link" : "provingground\/learning\/TermPopulation.html#feedback:provingground.FiniteDistribution[provingground.HoTT.Term]", "kind" : "lazy val"}, {"label" : "abstractTheoremsByProofs", "tail" : ": FiniteDistribution[Typ[Term]]", "member" : "provingground.learning.TermPopulation.abstractTheoremsByProofs", "link" : "provingground\/learning\/TermPopulation.html#abstractTheoremsByProofs:provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "abstractTheorems", "tail" : ": FiniteDistribution[Typ[Term]]", "member" : "provingground.learning.TermPopulation.abstractTheorems", "link" : "provingground\/learning\/TermPopulation.html#abstractTheorems:provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "terms", "tail" : ": FiniteDistribution[Term]", "member" : "provingground.learning.TermPopulation.terms", "link" : "provingground\/learning\/TermPopulation.html#terms:provingground.FiniteDistribution[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "normalized", "tail" : "(): TermPopulation", "member" : "provingground.learning.TermPopulation.normalized", "link" : "provingground\/learning\/TermPopulation.html#normalized:provingground.learning.TermPopulation", "kind" : "def"}, {"label" : "*", "tail" : "(scale: Double): TermPopulation", "member" : "provingground.learning.TermPopulation.*", "link" : "provingground\/learning\/TermPopulation.html#*(scale:Double):provingground.learning.TermPopulation", "kind" : "def"}, {"label" : "+++", "tail" : "(that: FiniteDistribution[Term]): TermPopulation", "member" : "provingground.learning.TermPopulation.+++", "link" : "provingground\/learning\/TermPopulation.html#+++(that:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.learning.TermPopulation", "kind" : "def"}, {"label" : "fromFD", "tail" : "(fd: FiniteDistribution[Term]): TermPopulation", "member" : "provingground.learning.TermPopulation.fromFD", "link" : "provingground\/learning\/TermPopulation.html#fromFD(fd:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.learning.TermPopulation", "kind" : "def"}, {"label" : "++", "tail" : "(that: TermPopulation): TermPopulation", "member" : "provingground.learning.TermPopulation.++", "link" : "provingground\/learning\/TermPopulation.html#++(that:provingground.learning.TermPopulation):provingground.learning.TermPopulation", "kind" : "def"}, {"label" : "applnInv", "tail" : ": (Term) ⇒ Set[(Term, Term)]", "member" : "provingground.learning.TermPopulation.applnInv", "link" : "provingground\/learning\/TermPopulation.html#applnInv:provingground.HoTT.Term=>scala.collection.immutable.Set[(provingground.HoTT.Term,provingground.HoTT.Term)]", "kind" : "val"}, {"label" : "theorems", "tail" : ": FiniteDistribution[Typ[Term]]", "member" : "provingground.learning.TermPopulation.theorems", "link" : "provingground\/learning\/TermPopulation.html#theorems:provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"member" : "provingground.learning.TermPopulation#<init>", "error" : "unsupported entity"}, {"label" : "applnInvMap", "tail" : ": InvMap", "member" : "provingground.learning.TermPopulation.applnInvMap", "link" : "provingground\/learning\/TermPopulation.html#applnInvMap:provingground.learning.Deducer.InvMap", "kind" : "val"}, {"label" : "piWeight", "tail" : ": Double", "member" : "provingground.learning.TermPopulation.piWeight", "link" : "provingground\/learning\/TermPopulation.html#piWeight:Double", "kind" : "val"}, {"label" : "lambdaWeight", "tail" : ": Double", "member" : "provingground.learning.TermPopulation.lambdaWeight", "link" : "provingground\/learning\/TermPopulation.html#lambdaWeight:Double", "kind" : "val"}, {"label" : "vars", "tail" : ": Vector[Weighted[Term]]", "member" : "provingground.learning.TermPopulation.vars", "link" : "provingground\/learning\/TermPopulation.html#vars:Vector[provingground.Weighted[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "thmsByProofs", "tail" : ": FiniteDistribution[Typ[Term]]", "member" : "provingground.learning.TermPopulation.thmsByProofs", "link" : "provingground\/learning\/TermPopulation.html#thmsByProofs:provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "types", "tail" : ": FiniteDistribution[Typ[Term]]", "member" : "provingground.learning.TermPopulation.types", "link" : "provingground\/learning\/TermPopulation.html#types:provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "termsByType", "tail" : ": Map[Typ[Term], FiniteDistribution[Term]]", "member" : "provingground.learning.TermPopulation.termsByType", "link" : "provingground\/learning\/TermPopulation.html#termsByType:Map[provingground.HoTT.Typ[provingground.HoTT.Term],provingground.FiniteDistribution[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/TermPopulation.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/TermPopulation.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/TermPopulation.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/TermPopulation.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/TermPopulation.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/TermPopulation.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/TermPopulation.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TermPopulation.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TermPopulation.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TermPopulation.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/TermPopulation.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/TermPopulation.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/TermPopulation.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/TermPopulation.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/TermPopulation.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/TermPopulation.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/learning\/TermPopulation.html", "kind" : "case class"}, {"name" : "provingground.learning.TermRandomVars", "shortDescription" : "", "object" : "provingground\/learning\/TermRandomVars$.html", "members_object" : [{"label" : "IndexedIterFuncTypTo", "tail" : "", "member" : "provingground.learning.TermRandomVars.IndexedIterFuncTypTo", "link" : "provingground\/learning\/TermRandomVars$.html#IndexedIterFuncTypToextendsRandomVar[provingground.HoTT.Typ[provingground.HoTT.Term]]withProductwithSerializable", "kind" : "case class"}, {"label" : "IndexedIntroRuleTyps", "tail" : "", "member" : "provingground.learning.TermRandomVars.IndexedIntroRuleTyps", "link" : "provingground\/learning\/TermRandomVars$.html#IndexedIntroRuleTypsextendsRandomVar[provingground.HoTT.Typ[provingground.HoTT.Term]]withProductwithSerializable", "kind" : "case class"}, {"label" : "TypsFromFamily", "tail" : "", "member" : "provingground.learning.TermRandomVars.TypsFromFamily", "link" : "provingground\/learning\/TermRandomVars$.html#TypsFromFamilyextendsRandomVar[provingground.HoTT.Typ[provingground.HoTT.Term]]withProductwithSerializable", "kind" : "case class"}, {"label" : "typFamilyTypes", "tail" : ": RandomVar[Term]", "member" : "provingground.learning.TermRandomVars.typFamilyTypes", "link" : "provingground\/learning\/TermRandomVars$.html#typFamilyTypes:provingground.learning.RandomVar[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "IterFuncTypTo", "tail" : "", "member" : "provingground.learning.TermRandomVars.IterFuncTypTo", "link" : "provingground\/learning\/TermRandomVars$.html#IterFuncTypToextendsRandomVar[provingground.HoTT.Typ[provingground.HoTT.Term]]withProductwithSerializable", "kind" : "case class"}, {"label" : "partiallyApplySelf", "tail" : "(f: Term): Atom[Term]", "member" : "provingground.learning.TermRandomVars.partiallyApplySelf", "link" : "provingground\/learning\/TermRandomVars$.html#partiallyApplySelf(f:provingground.HoTT.Term):provingground.learning.GeneratorNode.Atom[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "PartiallyApplied", "tail" : "", "member" : "provingground.learning.TermRandomVars.PartiallyApplied", "link" : "provingground\/learning\/TermRandomVars$.html#PartiallyAppliedextendsRandomVar[provingground.HoTT.Term]withProductwithSerializable", "kind" : "case class"}, {"label" : "inducHeadNode", "tail" : "(inductiveTyp: Typ[Term]): Atom[Typ[Term]]", "member" : "provingground.learning.TermRandomVars.inducHeadNode", "link" : "provingground\/learning\/TermRandomVars$.html#inducHeadNode(inductiveTyp:provingground.HoTT.Typ[provingground.HoTT.Term]):provingground.learning.GeneratorNode.Atom[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "IntroRuleTypes", "tail" : "", "member" : "provingground.learning.TermRandomVars.IntroRuleTypes", "link" : "provingground\/learning\/TermRandomVars$.html#IntroRuleTypesextendsRandomVar[provingground.HoTT.Typ[provingground.HoTT.Term]]withProductwithSerializable", "kind" : "case class"}, {"label" : "just", "tail" : "(value: X, rv: RandomVar[X]): Atom[X]", "member" : "provingground.learning.TermRandomVars.just", "link" : "provingground\/learning\/TermRandomVars$.html#just[X](value:X,rv:provingground.learning.RandomVar[X]):provingground.learning.GeneratorNode.Atom[X]", "kind" : "def"}, {"label" : "InducDefns", "tail" : "", "member" : "provingground.learning.TermRandomVars.InducDefns", "link" : "provingground\/learning\/TermRandomVars$.html#InducDefns", "kind" : "object"}, {"label" : "InducStrucs", "tail" : "", "member" : "provingground.learning.TermRandomVars.InducStrucs", "link" : "provingground\/learning\/TermRandomVars$.html#InducStrucs", "kind" : "object"}, {"label" : "funcsWithDomain", "tail" : "(typ: Typ[Term]): RandomVar[ExstFunc]", "member" : "provingground.learning.TermRandomVars.funcsWithDomain", "link" : "provingground\/learning\/TermRandomVars$.html#funcsWithDomain(typ:provingground.HoTT.Typ[provingground.HoTT.Term]):provingground.learning.RandomVar[provingground.HoTT.ExstFunc]", "kind" : "def"}, {"label" : "FuncsWithDomain", "tail" : "", "member" : "provingground.learning.TermRandomVars.FuncsWithDomain", "link" : "provingground\/learning\/TermRandomVars$.html#FuncsWithDomain", "kind" : "object"}, {"label" : "TypFamilies", "tail" : "", "member" : "provingground.learning.TermRandomVars.TypFamilies", "link" : "provingground\/learning\/TermRandomVars$.html#TypFamilies", "kind" : "object"}, {"label" : "termsWithTyp", "tail" : "(typ: Typ[Term]): RandomVar[Term]", "member" : "provingground.learning.TermRandomVars.termsWithTyp", "link" : "provingground\/learning\/TermRandomVars$.html#termsWithTyp(typ:provingground.HoTT.Typ[provingground.HoTT.Term]):provingground.learning.RandomVar[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "TermsWithTyp", "tail" : "", "member" : "provingground.learning.TermRandomVars.TermsWithTyp", "link" : "provingground\/learning\/TermRandomVars$.html#TermsWithTyp", "kind" : "object"}, {"label" : "Funcs", "tail" : "", "member" : "provingground.learning.TermRandomVars.Funcs", "link" : "provingground\/learning\/TermRandomVars$.html#Funcs", "kind" : "object"}, {"label" : "Typs", "tail" : "", "member" : "provingground.learning.TermRandomVars.Typs", "link" : "provingground\/learning\/TermRandomVars$.html#Typs", "kind" : "object"}, {"label" : "Terms", "tail" : "", "member" : "provingground.learning.TermRandomVars.Terms", "link" : "provingground\/learning\/TermRandomVars$.html#Terms", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/TermRandomVars$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/TermRandomVars$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/TermRandomVars$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/TermRandomVars$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/TermRandomVars$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/TermRandomVars$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/TermRandomVars$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TermRandomVars$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TermRandomVars$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TermRandomVars$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/TermRandomVars$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/TermRandomVars$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/TermRandomVars$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/TermRandomVars$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/TermRandomVars$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/TermRandomVars$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/TermRandomVars$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/TermRandomVars$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/TermRandomVars$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.learning.TermState", "shortDescription" : "A state, typically the initial state, for generating terms, types etc", "object" : "provingground\/learning\/TermState$.html", "members_object" : [{"label" : "stateFD", "tail" : ": StateDistribution[TermState, FiniteDistribution]", "member" : "provingground.learning.TermState.stateFD", "link" : "provingground\/learning\/TermState$.html#stateFD:provingground.learning.StateDistribution[provingground.learning.TermState,provingground.FiniteDistribution]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/TermState$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/TermState$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/TermState$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/TermState$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/TermState$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/TermState$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/TermState$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TermState$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TermState$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TermState$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/TermState$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/TermState$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/TermState$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/TermState$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/TermState$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/TermState$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/TermState$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/TermState$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/TermState$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "fullPfSet", "tail" : ": Vector[(Term, Term)]", "member" : "provingground.learning.TermState.fullPfSet", "link" : "provingground\/learning\/TermState.html#fullPfSet:Vector[(provingground.HoTT.Term,provingground.HoTT.Term)]", "kind" : "val"}, {"label" : "pfSet", "tail" : ": Vector[Term]", "member" : "provingground.learning.TermState.pfSet", "link" : "provingground\/learning\/TermState.html#pfSet:Vector[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "thmsBySt", "tail" : ": FiniteDistribution[Typ[Term]]", "member" : "provingground.learning.TermState.thmsBySt", "link" : "provingground\/learning\/TermState.html#thmsBySt:provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "thmsByPf", "tail" : ": FiniteDistribution[Typ[Term]]", "member" : "provingground.learning.TermState.thmsByPf", "link" : "provingground\/learning\/TermState.html#thmsByPf:provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"member" : "provingground.learning.TermState#<init>", "error" : "unsupported entity"}, {"label" : "inds", "tail" : ": FiniteDistribution[ExstInducDefn]", "member" : "provingground.learning.TermState.inds", "link" : "provingground\/learning\/TermState.html#inds:provingground.FiniteDistribution[provingground.induction.ExstInducDefn]", "kind" : "val"}, {"label" : "vars", "tail" : ": Vector[Term]", "member" : "provingground.learning.TermState.vars", "link" : "provingground\/learning\/TermState.html#vars:Vector[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "typs", "tail" : ": FiniteDistribution[Typ[Term]]", "member" : "provingground.learning.TermState.typs", "link" : "provingground\/learning\/TermState.html#typs:provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "terms", "tail" : ": FiniteDistribution[Term]", "member" : "provingground.learning.TermState.terms", "link" : "provingground\/learning\/TermState.html#terms:provingground.FiniteDistribution[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/TermState.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/TermState.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/TermState.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/TermState.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/TermState.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/TermState.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/TermState.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TermState.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TermState.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TermState.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/TermState.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/TermState.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/TermState.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/TermState.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/TermState.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/TermState.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/learning\/TermState.html", "kind" : "case class"}, {"name" : "provingground.learning.TheoremFeedback", "shortDescription" : "feedback based on the term-type map as well as ensuring total weight of theorems is not  small;various steps are explicit for exploration and debugging", "members_case class" : [{"label" : "feedbackTermDist", "tail" : "(fd: FiniteDistribution[Term], typfd: FiniteDistribution[Typ[Term]]): Double", "member" : "provingground.learning.TheoremFeedback.feedbackTermDist", "link" : "provingground\/learning\/TheoremFeedback.html#feedbackTermDist(fd:provingground.FiniteDistribution[provingground.HoTT.Term],typfd:provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]):Double", "kind" : "def"}, {"label" : "thmFeedbackFunction", "tail" : "(x: Term): Double", "member" : "provingground.learning.TheoremFeedback.thmFeedbackFunction", "link" : "provingground\/learning\/TheoremFeedback.html#thmFeedbackFunction(x:provingground.HoTT.Term):Double", "kind" : "def"}, {"label" : "feedbackTypDist", "tail" : "(fd: FiniteDistribution[Typ[Term]]): Double", "member" : "provingground.learning.TheoremFeedback.feedbackTypDist", "link" : "provingground\/learning\/TheoremFeedback.html#feedbackTypDist(fd:provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]):Double", "kind" : "def"}, {"label" : "feedbackFunction", "tail" : "(x: Typ[Term]): Double", "member" : "provingground.learning.TheoremFeedback.feedbackFunction", "link" : "provingground\/learning\/TheoremFeedback.html#feedbackFunction(x:provingground.HoTT.Typ[provingground.HoTT.Term]):Double", "kind" : "def"}, {"label" : "feedbackMap", "tail" : ": Map[Typ[Term], Double]", "member" : "provingground.learning.TheoremFeedback.feedbackMap", "link" : "provingground\/learning\/TheoremFeedback.html#feedbackMap:scala.collection.immutable.Map[provingground.HoTT.Typ[provingground.HoTT.Term],Double]", "kind" : "lazy val"}, {"label" : "feedbackVec", "tail" : ": Vector[(Typ[Term], Double)]", "member" : "provingground.learning.TheoremFeedback.feedbackVec", "link" : "provingground\/learning\/TheoremFeedback.html#feedbackVec:scala.collection.immutable.Vector[(provingground.HoTT.Typ[provingground.HoTT.Term],Double)]", "kind" : "lazy val"}, {"label" : "entropyPairs", "tail" : ": Vector[(Typ[Term], (Double, Double))]", "member" : "provingground.learning.TheoremFeedback.entropyPairs", "link" : "provingground\/learning\/TheoremFeedback.html#entropyPairs:scala.collection.immutable.Vector[(provingground.HoTT.Typ[provingground.HoTT.Term],(Double,Double))]", "kind" : "lazy val"}, {"label" : "byStatement", "tail" : ": FiniteDistribution[Typ[Term]]", "member" : "provingground.learning.TheoremFeedback.byStatement", "link" : "provingground\/learning\/TheoremFeedback.html#byStatement:provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "thmSet", "tail" : ": Set[Typ[Term]]", "member" : "provingground.learning.TheoremFeedback.thmSet", "link" : "provingground\/learning\/TheoremFeedback.html#thmSet:scala.collection.immutable.Set[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "thmShift", "tail" : ": Double", "member" : "provingground.learning.TheoremFeedback.thmShift", "link" : "provingground\/learning\/TheoremFeedback.html#thmShift:Double", "kind" : "lazy val"}, {"label" : "thmTotal", "tail" : ": Double", "member" : "provingground.learning.TheoremFeedback.thmTotal", "link" : "provingground\/learning\/TheoremFeedback.html#thmTotal:Double", "kind" : "lazy val"}, {"label" : "byStatementUnscaled", "tail" : ": FiniteDistribution[Typ[Term]]", "member" : "provingground.learning.TheoremFeedback.byStatementUnscaled", "link" : "provingground\/learning\/TheoremFeedback.html#byStatementUnscaled:provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "byProof", "tail" : ": FiniteDistribution[Typ[Term]]", "member" : "provingground.learning.TheoremFeedback.byProof", "link" : "provingground\/learning\/TheoremFeedback.html#byProof:provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "pfd", "tail" : ": FiniteDistribution[Typ[Term]]", "member" : "provingground.learning.TheoremFeedback.pfd", "link" : "provingground\/learning\/TheoremFeedback.html#pfd:provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "lfd", "tail" : ": FiniteDistribution[Term]", "member" : "provingground.learning.TheoremFeedback.lfd", "link" : "provingground\/learning\/TheoremFeedback.html#lfd:provingground.FiniteDistribution[provingground.HoTT.Term]", "kind" : "lazy val"}, {"member" : "provingground.learning.TheoremFeedback#<init>", "error" : "unsupported entity"}, {"label" : "thmTarget", "tail" : ": Double", "member" : "provingground.learning.TheoremFeedback.thmTarget", "link" : "provingground\/learning\/TheoremFeedback.html#thmTarget:Double", "kind" : "val"}, {"label" : "thmScale", "tail" : ": Double", "member" : "provingground.learning.TheoremFeedback.thmScale", "link" : "provingground\/learning\/TheoremFeedback.html#thmScale:Double", "kind" : "val"}, {"label" : "scale", "tail" : ": Double", "member" : "provingground.learning.TheoremFeedback.scale", "link" : "provingground\/learning\/TheoremFeedback.html#scale:Double", "kind" : "val"}, {"label" : "vars", "tail" : ": Vector[Term]", "member" : "provingground.learning.TheoremFeedback.vars", "link" : "provingground\/learning\/TheoremFeedback.html#vars:Vector[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "tfd", "tail" : ": FiniteDistribution[Typ[Term]]", "member" : "provingground.learning.TheoremFeedback.tfd", "link" : "provingground\/learning\/TheoremFeedback.html#tfd:provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "fd", "tail" : ": FiniteDistribution[Term]", "member" : "provingground.learning.TheoremFeedback.fd", "link" : "provingground\/learning\/TheoremFeedback.html#fd:provingground.FiniteDistribution[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/TheoremFeedback.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/TheoremFeedback.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/TheoremFeedback.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/TheoremFeedback.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/TheoremFeedback.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/TheoremFeedback.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/TheoremFeedback.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TheoremFeedback.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TheoremFeedback.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TheoremFeedback.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/TheoremFeedback.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/TheoremFeedback.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/TheoremFeedback.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/TheoremFeedback.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/TheoremFeedback.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/TheoremFeedback.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/learning\/TheoremFeedback.html", "kind" : "case class"}, {"name" : "provingground.learning.ThmEntropies", "shortDescription" : "", "members_case class" : [{"label" : "feedbackTermDist", "tail" : "(fd: FiniteDistribution[Term]): Double", "member" : "provingground.learning.ThmEntropies.feedbackTermDist", "link" : "provingground\/learning\/ThmEntropies.html#feedbackTermDist(fd:provingground.FiniteDistribution[provingground.HoTT.Term]):Double", "kind" : "def"}, {"label" : "thmFeedbackFunction", "tail" : "(x: Term): Double", "member" : "provingground.learning.ThmEntropies.thmFeedbackFunction", "link" : "provingground\/learning\/ThmEntropies.html#thmFeedbackFunction(x:provingground.HoTT.Term):Double", "kind" : "def"}, {"label" : "feedbackTypDist", "tail" : "(fd: FiniteDistribution[Typ[Term]]): Double", "member" : "provingground.learning.ThmEntropies.feedbackTypDist", "link" : "provingground\/learning\/ThmEntropies.html#feedbackTypDist(fd:provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]):Double", "kind" : "def"}, {"label" : "feedbackFunction", "tail" : "(x: Typ[Term]): Double", "member" : "provingground.learning.ThmEntropies.feedbackFunction", "link" : "provingground\/learning\/ThmEntropies.html#feedbackFunction(x:provingground.HoTT.Typ[provingground.HoTT.Term]):Double", "kind" : "def"}, {"label" : "feedbackMap", "tail" : ": Map[Typ[Term], Double]", "member" : "provingground.learning.ThmEntropies.feedbackMap", "link" : "provingground\/learning\/ThmEntropies.html#feedbackMap:scala.collection.immutable.Map[provingground.HoTT.Typ[provingground.HoTT.Term],Double]", "kind" : "lazy val"}, {"label" : "feedbackVec", "tail" : ": Vector[(Typ[Term], Double)]", "member" : "provingground.learning.ThmEntropies.feedbackVec", "link" : "provingground\/learning\/ThmEntropies.html#feedbackVec:scala.collection.immutable.Vector[(provingground.HoTT.Typ[provingground.HoTT.Term],Double)]", "kind" : "lazy val"}, {"label" : "entropyPairs", "tail" : ": Vector[(Typ[Term], (Double, Double))]", "member" : "provingground.learning.ThmEntropies.entropyPairs", "link" : "provingground\/learning\/ThmEntropies.html#entropyPairs:scala.collection.immutable.Vector[(provingground.HoTT.Typ[provingground.HoTT.Term],(Double,Double))]", "kind" : "lazy val"}, {"label" : "byStatement", "tail" : ": FiniteDistribution[Typ[Term]]", "member" : "provingground.learning.ThmEntropies.byStatement", "link" : "provingground\/learning\/ThmEntropies.html#byStatement:provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "thmSet", "tail" : ": Set[Typ[Term]]", "member" : "provingground.learning.ThmEntropies.thmSet", "link" : "provingground\/learning\/ThmEntropies.html#thmSet:scala.collection.immutable.Set[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "thmShift", "tail" : ": Double", "member" : "provingground.learning.ThmEntropies.thmShift", "link" : "provingground\/learning\/ThmEntropies.html#thmShift:Double", "kind" : "lazy val"}, {"label" : "thmTotal", "tail" : ": Double", "member" : "provingground.learning.ThmEntropies.thmTotal", "link" : "provingground\/learning\/ThmEntropies.html#thmTotal:Double", "kind" : "lazy val"}, {"label" : "byStatementUnscaled", "tail" : ": FiniteDistribution[Typ[Term]]", "member" : "provingground.learning.ThmEntropies.byStatementUnscaled", "link" : "provingground\/learning\/ThmEntropies.html#byStatementUnscaled:provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "byProof", "tail" : ": FiniteDistribution[Typ[Term]]", "member" : "provingground.learning.ThmEntropies.byProof", "link" : "provingground\/learning\/ThmEntropies.html#byProof:provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "pfd", "tail" : ": FiniteDistribution[Typ[Term]]", "member" : "provingground.learning.ThmEntropies.pfd", "link" : "provingground\/learning\/ThmEntropies.html#pfd:provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "tfd", "tail" : ": FiniteDistribution[Typ[Term]]", "member" : "provingground.learning.ThmEntropies.tfd", "link" : "provingground\/learning\/ThmEntropies.html#tfd:provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "lfd", "tail" : ": FiniteDistribution[Term]", "member" : "provingground.learning.ThmEntropies.lfd", "link" : "provingground\/learning\/ThmEntropies.html#lfd:provingground.FiniteDistribution[provingground.HoTT.Term]", "kind" : "lazy val"}, {"label" : "vars", "tail" : ": Vector[Weighted[Term]]", "member" : "provingground.learning.ThmEntropies.vars", "link" : "provingground\/learning\/ThmEntropies.html#vars:scala.collection.immutable.Vector[provingground.Weighted[provingground.HoTT.Term]]", "kind" : "val"}, {"member" : "provingground.learning.ThmEntropies#<init>", "error" : "unsupported entity"}, {"label" : "thmTarget", "tail" : ": Double", "member" : "provingground.learning.ThmEntropies.thmTarget", "link" : "provingground\/learning\/ThmEntropies.html#thmTarget:Double", "kind" : "val"}, {"label" : "thmScale", "tail" : ": Double", "member" : "provingground.learning.ThmEntropies.thmScale", "link" : "provingground\/learning\/ThmEntropies.html#thmScale:Double", "kind" : "val"}, {"label" : "scale", "tail" : ": Double", "member" : "provingground.learning.ThmEntropies.scale", "link" : "provingground\/learning\/ThmEntropies.html#scale:Double", "kind" : "val"}, {"label" : "varNames", "tail" : ": Vector[Term]", "member" : "provingground.learning.ThmEntropies.varNames", "link" : "provingground\/learning\/ThmEntropies.html#varNames:Vector[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "fd", "tail" : ": FiniteDistribution[Term]", "member" : "provingground.learning.ThmEntropies.fd", "link" : "provingground\/learning\/ThmEntropies.html#fd:provingground.FiniteDistribution[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/ThmEntropies.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/ThmEntropies.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/ThmEntropies.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/ThmEntropies.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/ThmEntropies.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/ThmEntropies.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/ThmEntropies.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/ThmEntropies.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/ThmEntropies.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/ThmEntropies.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/ThmEntropies.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/ThmEntropies.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/ThmEntropies.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/ThmEntropies.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/ThmEntropies.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/ThmEntropies.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/learning\/ThmEntropies.html", "kind" : "case class"}, {"name" : "provingground.learning.Truncate", "shortDescription" : "", "object" : "provingground\/learning\/Truncate$.html", "members_object" : [{"label" : "task", "tail" : "(pd: ProbabilityDistribution[A], epsilon: Double, maxtime: Duration, decay: Double): Task[FiniteDistribution[A]]", "member" : "provingground.learning.Truncate.task", "link" : "provingground\/learning\/Truncate$.html#task[A](pd:provingground.ProbabilityDistribution[A],epsilon:Double,maxtime:scala.concurrent.duration.Duration,decay:Double):monix.eval.Task[provingground.FiniteDistribution[A]]", "kind" : "def"}, {"label" : "apply", "tail" : "(pd: ProbabilityDistribution[A], epsilon: Double): FiniteDistribution[A]", "member" : "provingground.learning.Truncate.apply", "link" : "provingground\/learning\/Truncate$.html#apply[A](pd:provingground.ProbabilityDistribution[A],epsilon:Double):provingground.FiniteDistribution[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/Truncate$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/Truncate$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/Truncate$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/Truncate$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/Truncate$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/Truncate$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/Truncate$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/Truncate$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/Truncate$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/Truncate$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/Truncate$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/Truncate$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/Truncate$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/Truncate$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/Truncate$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/Truncate$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/Truncate$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/Truncate$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/Truncate$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.learning.TruncatedDistribution", "members_trait" : [{"label" : "getOpt", "tail" : "(): Option[TruncatedDistribution[A]]", "member" : "provingground.learning.TruncatedDistribution.getOpt", "link" : "provingground\/learning\/TruncatedDistribution.html#getOpt:Option[provingground.learning.TruncatedDistribution[A]]", "kind" : "def"}, {"label" : "filter", "tail" : "(f: (A) ⇒ Boolean): Filter[A]", "member" : "provingground.learning.TruncatedDistribution.filter", "link" : "provingground\/learning\/TruncatedDistribution.html#filter(f:A=>Boolean):provingground.learning.TruncatedDistribution.Filter[A]", "kind" : "def"}, {"label" : "mapOpt", "tail" : "(f: (A) ⇒ Option[B]): TruncatedDistribution[B]", "member" : "provingground.learning.TruncatedDistribution.mapOpt", "link" : "provingground\/learning\/TruncatedDistribution.html#mapOpt[B](f:A=>Option[B]):provingground.learning.TruncatedDistribution[B]", "kind" : "def"}, {"label" : "mapFD", "tail" : "(f: (FiniteDistribution[A]) ⇒ FiniteDistribution[B]): TruncatedDistribution[B]", "member" : "provingground.learning.TruncatedDistribution.mapFD", "link" : "provingground\/learning\/TruncatedDistribution.html#mapFD[B](f:provingground.FiniteDistribution[A]=>provingground.FiniteDistribution[B]):provingground.learning.TruncatedDistribution[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: ⇒ (A) ⇒ TruncatedDistribution[B]): TruncatedDistribution[B]", "member" : "provingground.learning.TruncatedDistribution.flatMap", "link" : "provingground\/learning\/TruncatedDistribution.html#flatMap[B](f:=>A=>provingground.learning.TruncatedDistribution[B]):provingground.learning.TruncatedDistribution[B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (A) ⇒ B): TruncatedDistribution[B]", "member" : "provingground.learning.TruncatedDistribution.map", "link" : "provingground\/learning\/TruncatedDistribution.html#map[B](f:A=>B):provingground.learning.TruncatedDistribution[B]", "kind" : "def"}, {"label" : "<++>", "tail" : "(that: ⇒ List[Weighted[TruncatedDistribution[A]]]): TruncatedDistribution[A]", "member" : "provingground.learning.TruncatedDistribution.<++>", "link" : "provingground\/learning\/TruncatedDistribution.html#<++>(that:=>List[provingground.Weighted[provingground.learning.TruncatedDistribution[A]]]):provingground.learning.TruncatedDistribution[A]", "kind" : "def"}, {"label" : "|+|", "tail" : "(that: ⇒ FiniteDistribution[A]): Sum[A]", "member" : "provingground.learning.TruncatedDistribution.|+|", "link" : "provingground\/learning\/TruncatedDistribution.html#|+|(that:=>provingground.FiniteDistribution[A]):provingground.learning.TruncatedDistribution.Sum[A]", "kind" : "def"}, {"label" : "<+>", "tail" : "(that: ⇒ TruncatedDistribution[A]): Sum[A]", "member" : "provingground.learning.TruncatedDistribution.<+>", "link" : "provingground\/learning\/TruncatedDistribution.html#<+>(that:=>provingground.learning.TruncatedDistribution[A]):provingground.learning.TruncatedDistribution.Sum[A]", "kind" : "def"}, {"label" : "<*>:", "tail" : "(scale: Double): TruncatedDistribution[A]", "member" : "provingground.learning.TruncatedDistribution.<*>:", "link" : "provingground\/learning\/TruncatedDistribution.html#<*>:(scale:Double):provingground.learning.TruncatedDistribution[A]", "kind" : "def"}, {"label" : "<*>", "tail" : "(scale: Double): TruncatedDistribution[A]", "member" : "provingground.learning.TruncatedDistribution.<*>", "link" : "provingground\/learning\/TruncatedDistribution.html#<*>(scale:Double):provingground.learning.TruncatedDistribution[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/TruncatedDistribution.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/TruncatedDistribution.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/TruncatedDistribution.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/TruncatedDistribution.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/TruncatedDistribution.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/TruncatedDistribution.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/TruncatedDistribution.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TruncatedDistribution.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TruncatedDistribution.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TruncatedDistribution.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/TruncatedDistribution.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/TruncatedDistribution.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/TruncatedDistribution.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/TruncatedDistribution.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/TruncatedDistribution.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/TruncatedDistribution.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/TruncatedDistribution.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/TruncatedDistribution.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/TruncatedDistribution.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "getFD", "tail" : "(cutoff: Double): Option[FiniteDistribution[A]]", "member" : "provingground.learning.TruncatedDistribution.getFD", "link" : "provingground\/learning\/TruncatedDistribution.html#getFD(cutoff:Double):Option[provingground.FiniteDistribution[A]]", "kind" : "abstract def"}], "shortDescription" : "", "object" : "provingground\/learning\/TruncatedDistribution$.html", "members_object" : [{"label" : "sum", "tail" : "(first: ⇒ TruncatedDistribution[A], second: ⇒ TruncatedDistribution[A]): Sum[A]", "member" : "provingground.learning.TruncatedDistribution.sum", "link" : "provingground\/learning\/TruncatedDistribution$.html#sum[A](first:=>provingground.learning.TruncatedDistribution[A],second:=>provingground.learning.TruncatedDistribution[A]):provingground.learning.TruncatedDistribution.Sum[A]", "kind" : "def"}, {"label" : "liftOpFlatten", "tail" : "(op: (A, B) ⇒ Option[C]): (TruncatedDistribution[A], TruncatedDistribution[B]) ⇒ TruncatedDistribution[C]", "member" : "provingground.learning.TruncatedDistribution.liftOpFlatten", "link" : "provingground\/learning\/TruncatedDistribution$.html#liftOpFlatten[A,B,C](op:(A,B)=>Option[C]):(provingground.learning.TruncatedDistribution[A],provingground.learning.TruncatedDistribution[B])=>provingground.learning.TruncatedDistribution[C]", "kind" : "def"}, {"label" : "liftOpOpt", "tail" : "(op: (A, B) ⇒ Option[C]): (TruncatedDistribution[A], TruncatedDistribution[B]) ⇒ TruncatedDistribution[Option[C]]", "member" : "provingground.learning.TruncatedDistribution.liftOpOpt", "link" : "provingground\/learning\/TruncatedDistribution$.html#liftOpOpt[A,B,C](op:(A,B)=>Option[C]):(provingground.learning.TruncatedDistribution[A],provingground.learning.TruncatedDistribution[B])=>provingground.learning.TruncatedDistribution[Option[C]]", "kind" : "def"}, {"label" : "mapOp", "tail" : "(xd: TruncatedDistribution[A], yd: TruncatedDistribution[B])(op: (A, B) ⇒ C): TruncatedDistribution[C]", "member" : "provingground.learning.TruncatedDistribution.mapOp", "link" : "provingground\/learning\/TruncatedDistribution$.html#mapOp[A,B,C](xd:provingground.learning.TruncatedDistribution[A],yd:provingground.learning.TruncatedDistribution[B])(op:(A,B)=>C):provingground.learning.TruncatedDistribution[C]", "kind" : "def"}, {"label" : "mapOpt", "tail" : "(base: TruncatedDistribution[A])(f: (A) ⇒ Option[B]): TruncatedDistribution[B]", "member" : "provingground.learning.TruncatedDistribution.mapOpt", "link" : "provingground\/learning\/TruncatedDistribution$.html#mapOpt[A,B](base:provingground.learning.TruncatedDistribution[A])(f:A=>Option[B]):provingground.learning.TruncatedDistribution[B]", "kind" : "def"}, {"label" : "map", "tail" : "(base: TruncatedDistribution[A])(f: (A) ⇒ B): TruncatedDistribution[B]", "member" : "provingground.learning.TruncatedDistribution.map", "link" : "provingground\/learning\/TruncatedDistribution$.html#map[A,B](base:provingground.learning.TruncatedDistribution[A])(f:A=>B):provingground.learning.TruncatedDistribution[B]", "kind" : "def"}, {"label" : "optF", "tail" : "(fo: TruncatedDistribution[Option[A]]): Option[TruncatedDistribution[A]]", "member" : "provingground.learning.TruncatedDistribution.optF", "link" : "provingground\/learning\/TruncatedDistribution$.html#optF[A](fo:provingground.learning.TruncatedDistribution[Option[A]]):Option[provingground.learning.TruncatedDistribution[A]]", "kind" : "def"}, {"label" : "flatten", "tail" : "(base: TruncatedDistribution[TruncatedDistribution[A]]): Flatten[A]", "member" : "provingground.learning.TruncatedDistribution.flatten", "link" : "provingground\/learning\/TruncatedDistribution$.html#flatten[A](base:provingground.learning.TruncatedDistribution[provingground.learning.TruncatedDistribution[A]]):provingground.learning.TruncatedDistribution.Flatten[A]", "kind" : "def"}, {"label" : "FromFDs", "tail" : "", "member" : "provingground.learning.TruncatedDistribution.FromFDs", "link" : "provingground\/learning\/TruncatedDistribution$.html#FromFDs[A]extendsTruncatedDistribution[A]withProductwithSerializable", "kind" : "case class"}, {"label" : "Coeffs", "tail" : "", "member" : "provingground.learning.TruncatedDistribution.Coeffs", "link" : "provingground\/learning\/TruncatedDistribution$.html#Coeffs[A]extendsTruncatedDistribution[A]withProductwithSerializable", "kind" : "case class"}, {"label" : "bigSum", "tail" : "(tds: ⇒ Vector[TruncatedDistribution[A]]): BigSum[A]", "member" : "provingground.learning.TruncatedDistribution.bigSum", "link" : "provingground\/learning\/TruncatedDistribution$.html#bigSum[A](tds:=>Vector[provingground.learning.TruncatedDistribution[A]]):provingground.learning.TruncatedDistribution.BigSum[A]", "kind" : "def"}, {"label" : "BigSum", "tail" : "", "member" : "provingground.learning.TruncatedDistribution.BigSum", "link" : "provingground\/learning\/TruncatedDistribution$.html#BigSum[A]extendsTruncatedDistribution[A]", "kind" : "class"}, {"label" : "Flatten", "tail" : "", "member" : "provingground.learning.TruncatedDistribution.Flatten", "link" : "provingground\/learning\/TruncatedDistribution$.html#Flatten[A]extendsTruncatedDistribution[A]", "kind" : "class"}, {"label" : "FlattenOpt", "tail" : "", "member" : "provingground.learning.TruncatedDistribution.FlattenOpt", "link" : "provingground\/learning\/TruncatedDistribution$.html#FlattenOpt[A]extendsTruncatedDistribution[A]", "kind" : "class"}, {"label" : "MapFD", "tail" : "", "member" : "provingground.learning.TruncatedDistribution.MapFD", "link" : "provingground\/learning\/TruncatedDistribution$.html#MapFD[A,B]extendsTruncatedDistribution[B]", "kind" : "class"}, {"label" : "FlatMap", "tail" : "", "member" : "provingground.learning.TruncatedDistribution.FlatMap", "link" : "provingground\/learning\/TruncatedDistribution$.html#FlatMap[A,B]extendsTruncatedDistribution[B]", "kind" : "class"}, {"label" : "Filter", "tail" : "", "member" : "provingground.learning.TruncatedDistribution.Filter", "link" : "provingground\/learning\/TruncatedDistribution$.html#Filter[A]extendsTruncatedDistribution[A]", "kind" : "class"}, {"label" : "MapOpt", "tail" : "", "member" : "provingground.learning.TruncatedDistribution.MapOpt", "link" : "provingground\/learning\/TruncatedDistribution$.html#MapOpt[A,B]extendsTruncatedDistribution[B]", "kind" : "class"}, {"label" : "Map", "tail" : "", "member" : "provingground.learning.TruncatedDistribution.Map", "link" : "provingground\/learning\/TruncatedDistribution$.html#Map[A,B]extendsTruncatedDistribution[B]", "kind" : "class"}, {"label" : "Sum", "tail" : "", "member" : "provingground.learning.TruncatedDistribution.Sum", "link" : "provingground\/learning\/TruncatedDistribution$.html#Sum[A]extendsTruncatedDistribution[A]", "kind" : "class"}, {"label" : "Scaled", "tail" : "", "member" : "provingground.learning.TruncatedDistribution.Scaled", "link" : "provingground\/learning\/TruncatedDistribution$.html#Scaled[A]extendsTruncatedDistribution[A]", "kind" : "class"}, {"label" : "PosFD", "tail" : "", "member" : "provingground.learning.TruncatedDistribution.PosFD", "link" : "provingground\/learning\/TruncatedDistribution$.html#PosFD[A]extendsTruncatedDistribution[A]withProductwithSerializable", "kind" : "case class"}, {"label" : "FD", "tail" : "", "member" : "provingground.learning.TruncatedDistribution.FD", "link" : "provingground\/learning\/TruncatedDistribution$.html#FD[A]extendsTruncatedDistribution[A]withProductwithSerializable", "kind" : "case class"}, {"label" : "td", "tail" : "(fd: FiniteDistribution[A]): FD[A]", "member" : "provingground.learning.TruncatedDistribution.td", "link" : "provingground\/learning\/TruncatedDistribution$.html#td[A](fd:provingground.FiniteDistribution[A]):provingground.learning.TruncatedDistribution.FD[A]", "kind" : "implicit def"}, {"label" : "apply", "tail" : "(ws: Seq[Weighted[A]]): FD[A]", "member" : "provingground.learning.TruncatedDistribution.apply", "link" : "provingground\/learning\/TruncatedDistribution$.html#apply[A](ws:Seq[provingground.Weighted[A]]):provingground.learning.TruncatedDistribution.FD[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(fd: FiniteDistribution[A]): FD[A]", "member" : "provingground.learning.TruncatedDistribution.apply", "link" : "provingground\/learning\/TruncatedDistribution$.html#apply[A](fd:provingground.FiniteDistribution[A]):provingground.learning.TruncatedDistribution.FD[A]", "kind" : "def"}, {"label" : "atom", "tail" : "(a: A): OptAtom[A]", "member" : "provingground.learning.TruncatedDistribution.atom", "link" : "provingground\/learning\/TruncatedDistribution$.html#atom[A](a:A):provingground.learning.TruncatedDistribution.OptAtom[A]", "kind" : "def"}, {"label" : "OptAtom", "tail" : "", "member" : "provingground.learning.TruncatedDistribution.OptAtom", "link" : "provingground\/learning\/TruncatedDistribution$.html#OptAtom[A]extendsTruncatedDistribution[A]withProductwithSerializable", "kind" : "case class"}, {"label" : "prunePosFD", "tail" : "(fd: ⇒ FiniteDistribution[A], cutoff: Double): Option[FiniteDistribution[A]]", "member" : "provingground.learning.TruncatedDistribution.prunePosFD", "link" : "provingground\/learning\/TruncatedDistribution$.html#prunePosFD[A](fd:=>provingground.FiniteDistribution[A],cutoff:Double):Option[provingground.FiniteDistribution[A]]", "kind" : "def"}, {"label" : "pruneFD", "tail" : "(fd: ⇒ FiniteDistribution[A], cutoff: Double): Option[FiniteDistribution[A]]", "member" : "provingground.learning.TruncatedDistribution.pruneFD", "link" : "provingground\/learning\/TruncatedDistribution$.html#pruneFD[A](fd:=>provingground.FiniteDistribution[A],cutoff:Double):Option[provingground.FiniteDistribution[A]]", "kind" : "def"}, {"label" : "Empty", "tail" : "", "member" : "provingground.learning.TruncatedDistribution.Empty", "link" : "provingground\/learning\/TruncatedDistribution$.html#Empty[A]extendsTruncatedDistribution[A]withProductwithSerializable", "kind" : "case class"}, {"label" : "composeContravariant", "tail" : "(arg0: Contravariant[G]): Contravariant[[α]TruncatedDistribution[G[α]]]", "member" : "cats.Functor.composeContravariant", "link" : "provingground\/learning\/TruncatedDistribution$.html#composeContravariant[G[_]](implicitevidence$2:cats.Contravariant[G]):cats.Contravariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Functor[G]): Functor[[α]TruncatedDistribution[G[α]]]", "member" : "cats.Functor.compose", "link" : "provingground\/learning\/TruncatedDistribution$.html#compose[G[_]](implicitevidence$1:cats.Functor[G]):cats.Functor[[α]F[G[α]]]", "kind" : "def"}, {"label" : "tupleRight", "tail" : "(fa: TruncatedDistribution[A], b: B): TruncatedDistribution[(A, B)]", "member" : "cats.Functor.tupleRight", "link" : "provingground\/learning\/TruncatedDistribution$.html#tupleRight[A,B](fa:F[A],b:B):F[(A,B)]", "kind" : "def"}, {"label" : "tupleLeft", "tail" : "(fa: TruncatedDistribution[A], b: B): TruncatedDistribution[(B, A)]", "member" : "cats.Functor.tupleLeft", "link" : "provingground\/learning\/TruncatedDistribution$.html#tupleLeft[A,B](fa:F[A],b:B):F[(B,A)]", "kind" : "def"}, {"label" : "as", "tail" : "(fa: TruncatedDistribution[A], b: B): TruncatedDistribution[B]", "member" : "cats.Functor.as", "link" : "provingground\/learning\/TruncatedDistribution$.html#as[A,B](fa:F[A],b:B):F[B]", "kind" : "def"}, {"label" : "fproduct", "tail" : "(fa: TruncatedDistribution[A])(f: (A) ⇒ B): TruncatedDistribution[(A, B)]", "member" : "cats.Functor.fproduct", "link" : "provingground\/learning\/TruncatedDistribution$.html#fproduct[A,B](fa:F[A])(f:A=>B):F[(A,B)]", "kind" : "def"}, {"label" : "void", "tail" : "(fa: TruncatedDistribution[A]): TruncatedDistribution[Unit]", "member" : "cats.Functor.void", "link" : "provingground\/learning\/TruncatedDistribution$.html#void[A](fa:F[A]):F[Unit]", "kind" : "def"}, {"label" : "lift", "tail" : "(f: (A) ⇒ B): (TruncatedDistribution[A]) ⇒ TruncatedDistribution[B]", "member" : "cats.Functor.lift", "link" : "provingground\/learning\/TruncatedDistribution$.html#lift[A,B](f:A=>B):F[A]=>F[B]", "kind" : "def"}, {"label" : "widen", "tail" : "(fa: TruncatedDistribution[A]): TruncatedDistribution[B]", "member" : "cats.Functor.widen", "link" : "provingground\/learning\/TruncatedDistribution$.html#widen[A,B>:A](fa:F[A]):F[B]", "kind" : "def"}, {"label" : "fmap", "tail" : "(fa: TruncatedDistribution[A])(f: (A) ⇒ B): TruncatedDistribution[B]", "member" : "cats.Functor.fmap", "link" : "provingground\/learning\/TruncatedDistribution$.html#fmap[A,B](fa:F[A])(f:A=>B):F[B]", "kind" : "final def"}, {"label" : "imap", "tail" : "(fa: TruncatedDistribution[A])(f: (A) ⇒ B)(g: (B) ⇒ A): TruncatedDistribution[B]", "member" : "cats.Functor.imap", "link" : "provingground\/learning\/TruncatedDistribution$.html#imap[A,B](fa:F[A])(f:A=>B)(g:B=>A):F[B]", "kind" : "def"}, {"label" : "composeFunctor", "tail" : "(arg0: Functor[G]): Invariant[[α]TruncatedDistribution[G[α]]]", "member" : "cats.Invariant.composeFunctor", "link" : "provingground\/learning\/TruncatedDistribution$.html#composeFunctor[G[_<:<?>]](implicitevidence$2:cats.Functor[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Invariant[G]): Invariant[[α]TruncatedDistribution[G[α]]]", "member" : "cats.Invariant.compose", "link" : "provingground\/learning\/TruncatedDistribution$.html#compose[G[_]](implicitevidence$1:cats.Invariant[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/TruncatedDistribution$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/TruncatedDistribution$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/TruncatedDistribution$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/TruncatedDistribution$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/TruncatedDistribution$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/TruncatedDistribution$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/TruncatedDistribution$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TruncatedDistribution$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TruncatedDistribution$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TruncatedDistribution$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/TruncatedDistribution$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/TruncatedDistribution$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/TruncatedDistribution$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/TruncatedDistribution$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/TruncatedDistribution$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/TruncatedDistribution$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/TruncatedDistribution$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/TruncatedDistribution$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/TruncatedDistribution$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/learning\/TruncatedDistribution.html", "kind" : "trait"}, {"name" : "provingground.learning.TruncatedDistributionDomain", "shortDescription" : "", "members_class" : [{"label" : "domain", "tail" : "(): (TruncatedDistribution[E]) ⇒ Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionDomain.domain", "link" : "provingground\/learning\/TruncatedDistributionDomain.html#domain:provingground.learning.TruncatedDistribution[E]=>Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "l", "tail" : ": Domain[E]", "member" : "provingground.learning.TruncatedDistributionDomain.l", "link" : "provingground\/learning\/TruncatedDistributionDomain.html#l:provingground.translation.Domain[E]", "kind" : "val"}, {"member" : "provingground.learning.TruncatedDistributionDomain#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/TruncatedDistributionDomain.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/TruncatedDistributionDomain.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/TruncatedDistributionDomain.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/TruncatedDistributionDomain.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/TruncatedDistributionDomain.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/TruncatedDistributionDomain.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/TruncatedDistributionDomain.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TruncatedDistributionDomain.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TruncatedDistributionDomain.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TruncatedDistributionDomain.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/TruncatedDistributionDomain.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/TruncatedDistributionDomain.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/TruncatedDistributionDomain.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/TruncatedDistributionDomain.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/TruncatedDistributionDomain.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/TruncatedDistributionDomain.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/TruncatedDistributionDomain.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/TruncatedDistributionDomain.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/TruncatedDistributionDomain.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/learning\/TruncatedDistributionDomain.html", "kind" : "class"}, {"name" : "provingground.learning.TruncatedDistributionExprPatterns", "shortDescription" : "", "members_class" : [{"label" : "isPi", "tail" : "(): (TruncatedDistribution[E]) ⇒ Option[(TruncatedDistribution[E], TruncatedDistribution[E])]", "member" : "provingground.learning.TruncatedDistributionExprPatterns.isPi", "link" : "provingground\/learning\/TruncatedDistributionExprPatterns.html#isPi:provingground.learning.TruncatedDistribution[E]=>Option[(provingground.learning.TruncatedDistribution[E],provingground.learning.TruncatedDistribution[E])]", "kind" : "def"}, {"label" : "isSigma", "tail" : "(): (TruncatedDistribution[E]) ⇒ Option[(TruncatedDistribution[E], TruncatedDistribution[E])]", "member" : "provingground.learning.TruncatedDistributionExprPatterns.isSigma", "link" : "provingground\/learning\/TruncatedDistributionExprPatterns.html#isSigma:provingground.learning.TruncatedDistribution[E]=>Option[(provingground.learning.TruncatedDistribution[E],provingground.learning.TruncatedDistribution[E])]", "kind" : "def"}, {"label" : "isPair", "tail" : "(): (TruncatedDistribution[E]) ⇒ Option[(TruncatedDistribution[E], TruncatedDistribution[E])]", "member" : "provingground.learning.TruncatedDistributionExprPatterns.isPair", "link" : "provingground\/learning\/TruncatedDistributionExprPatterns.html#isPair:provingground.learning.TruncatedDistribution[E]=>Option[(provingground.learning.TruncatedDistribution[E],provingground.learning.TruncatedDistribution[E])]", "kind" : "def"}, {"label" : "l", "tail" : ": ExprPatterns[E]", "member" : "provingground.learning.TruncatedDistributionExprPatterns.l", "link" : "provingground\/learning\/TruncatedDistributionExprPatterns.html#l:provingground.translation.ExprPatterns[E]", "kind" : "val"}, {"member" : "provingground.learning.TruncatedDistributionExprPatterns#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/TruncatedDistributionExprPatterns.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/TruncatedDistributionExprPatterns.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/TruncatedDistributionExprPatterns.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/TruncatedDistributionExprPatterns.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/TruncatedDistributionExprPatterns.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/TruncatedDistributionExprPatterns.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/TruncatedDistributionExprPatterns.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TruncatedDistributionExprPatterns.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TruncatedDistributionExprPatterns.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TruncatedDistributionExprPatterns.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/TruncatedDistributionExprPatterns.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/TruncatedDistributionExprPatterns.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/TruncatedDistributionExprPatterns.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/TruncatedDistributionExprPatterns.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/TruncatedDistributionExprPatterns.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/TruncatedDistributionExprPatterns.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/TruncatedDistributionExprPatterns.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/TruncatedDistributionExprPatterns.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/TruncatedDistributionExprPatterns.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/learning\/TruncatedDistributionExprPatterns.html", "kind" : "class"}, {"name" : "provingground.learning.TruncatedDistributionLang", "shortDescription" : "", "members_class" : [{"label" : "numeral", "tail" : "(n: Int): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.numeral", "link" : "provingground\/learning\/TruncatedDistributionLang.html#numeral(n:Int):Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "orCases", "tail" : "(first: TruncatedDistribution[E], second: TruncatedDistribution[E]): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.orCases", "link" : "provingground\/learning\/TruncatedDistributionLang.html#orCases(first:provingground.learning.TruncatedDistribution[E],second:provingground.learning.TruncatedDistribution[E]):Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "ff", "tail" : "(): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.ff", "link" : "provingground\/learning\/TruncatedDistributionLang.html#ff:Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "qed", "tail" : "(): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.qed", "link" : "provingground\/learning\/TruncatedDistributionLang.html#qed:Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "tt", "tail" : "(): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.tt", "link" : "provingground\/learning\/TruncatedDistributionLang.html#tt:Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "incl2", "tail" : "(typ: TruncatedDistribution[E]): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.incl2", "link" : "provingground\/learning\/TruncatedDistributionLang.html#incl2(typ:provingground.learning.TruncatedDistribution[E]):Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "incl1", "tail" : "(typ: TruncatedDistribution[E]): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.incl1", "link" : "provingground\/learning\/TruncatedDistributionLang.html#incl1(typ:provingground.learning.TruncatedDistribution[E]):Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "or", "tail" : "(first: TruncatedDistribution[E], second: TruncatedDistribution[E]): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.or", "link" : "provingground\/learning\/TruncatedDistributionLang.html#or(first:provingground.learning.TruncatedDistribution[E],second:provingground.learning.TruncatedDistribution[E]):Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "proj2", "tail" : "(xy: TruncatedDistribution[E]): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.proj2", "link" : "provingground\/learning\/TruncatedDistributionLang.html#proj2(xy:provingground.learning.TruncatedDistribution[E]):Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "proj1", "tail" : "(xy: TruncatedDistribution[E]): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.proj1", "link" : "provingground\/learning\/TruncatedDistributionLang.html#proj1(xy:provingground.learning.TruncatedDistribution[E]):Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "pair", "tail" : "(x: TruncatedDistribution[E], y: TruncatedDistribution[E]): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.pair", "link" : "provingground\/learning\/TruncatedDistributionLang.html#pair(x:provingground.learning.TruncatedDistribution[E],y:provingground.learning.TruncatedDistribution[E]):Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "sigma", "tail" : "(variable: TruncatedDistribution[E], typ: TruncatedDistribution[E]): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.sigma", "link" : "provingground\/learning\/TruncatedDistributionLang.html#sigma(variable:provingground.learning.TruncatedDistribution[E],typ:provingground.learning.TruncatedDistribution[E]):Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "equality", "tail" : "(lhs: TruncatedDistribution[E], rhs: TruncatedDistribution[E]): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.equality", "link" : "provingground\/learning\/TruncatedDistributionLang.html#equality(lhs:provingground.learning.TruncatedDistribution[E],rhs:provingground.learning.TruncatedDistribution[E]):Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "appln", "tail" : "(func: TruncatedDistribution[E], arg: TruncatedDistribution[E]): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.appln", "link" : "provingground\/learning\/TruncatedDistributionLang.html#appln(func:provingground.learning.TruncatedDistribution[E],arg:provingground.learning.TruncatedDistribution[E]):Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "pi", "tail" : "(variable: TruncatedDistribution[E], typ: TruncatedDistribution[E]): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.pi", "link" : "provingground\/learning\/TruncatedDistributionLang.html#pi(variable:provingground.learning.TruncatedDistribution[E],typ:provingground.learning.TruncatedDistribution[E]):Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "lambda", "tail" : "(variable: TruncatedDistribution[E], value: TruncatedDistribution[E]): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.lambda", "link" : "provingground\/learning\/TruncatedDistributionLang.html#lambda(variable:provingground.learning.TruncatedDistribution[E],value:provingground.learning.TruncatedDistribution[E]):Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "metaVar", "tail" : "(typ: TruncatedDistribution[E]): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.metaVar", "link" : "provingground\/learning\/TruncatedDistributionLang.html#metaVar(typ:provingground.learning.TruncatedDistribution[E]):Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "anonVar", "tail" : "(typ: TruncatedDistribution[E]): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.anonVar", "link" : "provingground\/learning\/TruncatedDistributionLang.html#anonVar(typ:provingground.learning.TruncatedDistribution[E]):Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "typVariable", "tail" : "(name: S, level: Int): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.typVariable", "link" : "provingground\/learning\/TruncatedDistributionLang.html#typVariable[S](name:S,level:Int):Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "variable", "tail" : "(name: S, typ: TruncatedDistribution[E]): Option[TruncatedDistribution[E]]", "member" : "provingground.learning.TruncatedDistributionLang.variable", "link" : "provingground\/learning\/TruncatedDistributionLang.html#variable[S](name:S,typ:provingground.learning.TruncatedDistribution[E]):Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "l", "tail" : ": ExprLang[E]", "member" : "provingground.learning.TruncatedDistributionLang.l", "link" : "provingground\/learning\/TruncatedDistributionLang.html#l:provingground.translation.ExprLang[E]", "kind" : "val"}, {"member" : "provingground.learning.TruncatedDistributionLang#<init>", "error" : "unsupported entity"}, {"label" : "applyAll", "tail" : "(funcOpt: Option[TruncatedDistribution[E]], args: Vector[TruncatedDistribution[E]]): Option[TruncatedDistribution[E]]", "member" : "provingground.translation.ExprLang.applyAll", "link" : "provingground\/learning\/TruncatedDistributionLang.html#applyAll(funcOpt:Option[E],args:Vector[E]):Option[E]", "kind" : "def"}, {"label" : "i2", "tail" : "(typ: TruncatedDistribution[E], value: TruncatedDistribution[E]): Option[TruncatedDistribution[E]]", "member" : "provingground.translation.ExprLang.i2", "link" : "provingground\/learning\/TruncatedDistributionLang.html#i2(typ:E,value:E):Option[E]", "kind" : "def"}, {"label" : "i1", "tail" : "(typ: TruncatedDistribution[E], value: TruncatedDistribution[E]): Option[TruncatedDistribution[E]]", "member" : "provingground.translation.ExprLang.i1", "link" : "provingground\/learning\/TruncatedDistributionLang.html#i1(typ:E,value:E):Option[E]", "kind" : "def"}, {"label" : "funcTyp", "tail" : "(dom: TruncatedDistribution[E], codom: TruncatedDistribution[E]): Option[TruncatedDistribution[E]]", "member" : "provingground.translation.ExprLang.funcTyp", "link" : "provingground\/learning\/TruncatedDistributionLang.html#funcTyp(dom:E,codom:E):Option[E]", "kind" : "def"}, {"label" : "pairTyp", "tail" : "(first: TruncatedDistribution[E], second: TruncatedDistribution[E]): Option[TruncatedDistribution[E]]", "member" : "provingground.translation.ExprLang.pairTyp", "link" : "provingground\/learning\/TruncatedDistributionLang.html#pairTyp(first:E,second:E):Option[E]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/TruncatedDistributionLang.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/TruncatedDistributionLang.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/TruncatedDistributionLang.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/TruncatedDistributionLang.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/TruncatedDistributionLang.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/TruncatedDistributionLang.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/TruncatedDistributionLang.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TruncatedDistributionLang.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TruncatedDistributionLang.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TruncatedDistributionLang.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/TruncatedDistributionLang.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/TruncatedDistributionLang.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/TruncatedDistributionLang.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/TruncatedDistributionLang.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/TruncatedDistributionLang.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/TruncatedDistributionLang.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/TruncatedDistributionLang.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/TruncatedDistributionLang.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/TruncatedDistributionLang.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/learning\/TruncatedDistributionLang.html", "kind" : "class"}, {"name" : "provingground.learning.TruncatedFiniteDistribution", "shortDescription" : "", "object" : "provingground\/learning\/TruncatedFiniteDistribution$.html", "members_object" : [{"label" : "geomFD", "tail" : "(epsilon: Double): FiniteDistribution[Int]", "member" : "provingground.learning.TruncatedFiniteDistribution.geomFD", "link" : "provingground\/learning\/TruncatedFiniteDistribution$.html#geomFD(epsilon:Double):provingground.FiniteDistribution[Int]", "kind" : "def"}, {"label" : "Geom", "tail" : "", "member" : "provingground.learning.TruncatedFiniteDistribution.Geom", "link" : "provingground\/learning\/TruncatedFiniteDistribution$.html#Geom", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/TruncatedFiniteDistribution$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/TruncatedFiniteDistribution$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/TruncatedFiniteDistribution$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/TruncatedFiniteDistribution$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/TruncatedFiniteDistribution$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/TruncatedFiniteDistribution$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/TruncatedFiniteDistribution$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TruncatedFiniteDistribution$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TruncatedFiniteDistribution$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TruncatedFiniteDistribution$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/TruncatedFiniteDistribution$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/TruncatedFiniteDistribution$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/TruncatedFiniteDistribution$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/TruncatedFiniteDistribution$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/TruncatedFiniteDistribution$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/TruncatedFiniteDistribution$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/TruncatedFiniteDistribution$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/TruncatedFiniteDistribution$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/TruncatedFiniteDistribution$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "nodeDist", "tail" : "(initState: State)(generatorNode: GeneratorNode[Y], epsilon: Double): FiniteDistribution[Y]", "member" : "provingground.learning.TruncatedFiniteDistribution.nodeDist", "link" : "provingground\/learning\/TruncatedFiniteDistribution.html#nodeDist[Y](initState:State)(generatorNode:provingground.learning.GeneratorNode[Y],epsilon:Double):provingground.FiniteDistribution[Y]", "kind" : "def"}, {"label" : "updateAll", "tail" : "(dataSeq: Seq[Value[_ <: HList, _, Double]]): TruncatedFiniteDistribution[State, Boat]", "member" : "provingground.learning.TruncatedFiniteDistribution.updateAll", "link" : "provingground\/learning\/TruncatedFiniteDistribution.html#updateAll(dataSeq:Seq[provingground.learning.GeneratorNodeFamily.Value[_<:shapeless.HList,_,Double]]):provingground.learning.TruncatedFiniteDistribution[State,Boat]", "kind" : "def"}, {"member" : "provingground.learning.TruncatedFiniteDistribution#<init>", "error" : "unsupported entity"}, {"label" : "nodeCoeffSeq", "tail" : ": NodeCoeffSeq[State, Boat, Double]", "member" : "provingground.learning.TruncatedFiniteDistribution.nodeCoeffSeq", "link" : "provingground\/learning\/TruncatedFiniteDistribution.html#nodeCoeffSeq:provingground.learning.NodeCoeffSeq[State,Boat,Double]", "kind" : "val"}, {"label" : "nodeFamilyDist", "tail" : "(initState: State)(generatorNodeFamily: GeneratorNodeFamily[Dom, Y], baseDist: FiniteDistribution[Dom], epsilon: Double): Map[Dom, FiniteDistribution[Y]]", "member" : "provingground.learning.GenTruncatedFiniteDistribution.nodeFamilyDist", "link" : "provingground\/learning\/TruncatedFiniteDistribution.html#nodeFamilyDist[Dom<:shapeless.HList,Y](initState:State)(generatorNodeFamily:provingground.learning.GeneratorNodeFamily[Dom,Y],baseDist:provingground.FiniteDistribution[Dom],epsilon:Double):Map[Dom,provingground.FiniteDistribution[Y]]", "kind" : "def"}, {"label" : "varFamilyDist", "tail" : "(initState: State)(randomVarFmly: RandomVarFamily[RDom, Y], epsilon: Double): Map[RDom, FiniteDistribution[Y]]", "member" : "provingground.learning.GenTruncatedFiniteDistribution.varFamilyDist", "link" : "provingground\/learning\/TruncatedFiniteDistribution.html#varFamilyDist[RDom<:shapeless.HList,Y](initState:State)(randomVarFmly:provingground.learning.RandomVarFamily[RDom,Y],epsilon:Double):Map[RDom,provingground.FiniteDistribution[Y]]", "kind" : "def"}, {"label" : "nodeCoeffFamilyMap", "tail" : "(initState: State)(nodeCoeffs: NodeCoeffs[State, Boat, Double, Dom, Y], baseDist: FiniteDistribution[Dom], epsilon: Double): Map[Dom, FiniteDistribution[Y]]", "member" : "provingground.learning.GenTruncatedFiniteDistribution.nodeCoeffFamilyMap", "link" : "provingground\/learning\/TruncatedFiniteDistribution.html#nodeCoeffFamilyMap[Dom<:shapeless.HList,Y](initState:State)(nodeCoeffs:provingground.learning.NodeCoeffs[State,Boat,Double,Dom,Y],baseDist:provingground.FiniteDistribution[Dom],epsilon:Double):Map[Dom,provingground.FiniteDistribution[Y]]", "kind" : "def"}, {"label" : "mapsSum", "tail" : "(first: Map[X, FiniteDistribution[Y]], second: Map[X, FiniteDistribution[Y]]): Map[X, FiniteDistribution[Y]]", "member" : "provingground.learning.GenTruncatedFiniteDistribution.mapsSum", "link" : "provingground\/learning\/TruncatedFiniteDistribution.html#mapsSum[X,Y](first:Map[X,provingground.FiniteDistribution[Y]],second:Map[X,provingground.FiniteDistribution[Y]]):Map[X,provingground.FiniteDistribution[Y]]", "kind" : "def"}, {"label" : "nodeCoeffDist", "tail" : "(initState: State)(nodeCoeffs: NodeCoeffs[State, Boat, Double, HNil, Y], epsilon: Double): FiniteDistribution[Y]", "member" : "provingground.learning.GenTruncatedFiniteDistribution.nodeCoeffDist", "link" : "provingground\/learning\/TruncatedFiniteDistribution.html#nodeCoeffDist[Y](initState:State)(nodeCoeffs:provingground.learning.NodeCoeffs[State,Boat,Double,shapeless.HNil,Y],epsilon:Double):provingground.FiniteDistribution[Y]", "kind" : "def"}, {"label" : "varListDist", "tail" : "(initState: State)(vl: RandomVarList[Dom], epsilon: Double): FiniteDistribution[Dom]", "member" : "provingground.learning.GenTruncatedFiniteDistribution.varListDist", "link" : "provingground\/learning\/TruncatedFiniteDistribution.html#varListDist[Dom<:shapeless.HList](initState:State)(vl:provingground.learning.RandomVarList[Dom],epsilon:Double):provingground.FiniteDistribution[Dom]", "kind" : "def"}, {"label" : "varDist", "tail" : "(initState: State)(randomVar: RandomVar[Y], epsilon: Double): FiniteDistribution[Y]", "member" : "provingground.learning.GenTruncatedFiniteDistribution.varDist", "link" : "provingground\/learning\/TruncatedFiniteDistribution.html#varDist[Y](initState:State)(randomVar:provingground.learning.RandomVar[Y],epsilon:Double):provingground.FiniteDistribution[Y]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/TruncatedFiniteDistribution.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/TruncatedFiniteDistribution.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/TruncatedFiniteDistribution.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/TruncatedFiniteDistribution.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/TruncatedFiniteDistribution.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/TruncatedFiniteDistribution.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/TruncatedFiniteDistribution.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TruncatedFiniteDistribution.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TruncatedFiniteDistribution.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TruncatedFiniteDistribution.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/TruncatedFiniteDistribution.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/TruncatedFiniteDistribution.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/TruncatedFiniteDistribution.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/TruncatedFiniteDistribution.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/TruncatedFiniteDistribution.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/TruncatedFiniteDistribution.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/learning\/TruncatedFiniteDistribution.html", "kind" : "object"}, {"name" : "provingground.learning.TruncDistVal", "shortDescription" : "", "object" : "provingground\/learning\/TruncDistVal$.html", "members_object" : [{"label" : "bigSum", "tail" : "(tds: ⇒ Vector[TruncDistVal[A]]): TruncDistVal[A]", "member" : "provingground.learning.TruncDistVal.bigSum", "link" : "provingground\/learning\/TruncDistVal$.html#bigSum[A](tds:=>Vector[provingground.learning.TruncDistVal[A]]):provingground.learning.TruncDistVal[A]", "kind" : "def"}, {"label" : "atom", "tail" : "(a: A): TruncDistVal[A]", "member" : "provingground.learning.TruncDistVal.atom", "link" : "provingground\/learning\/TruncDistVal$.html#atom[A](a:A):provingground.learning.TruncDistVal[A]", "kind" : "def"}, {"label" : "Empty", "tail" : "(): TruncDistVal[A]", "member" : "provingground.learning.TruncDistVal.Empty", "link" : "provingground\/learning\/TruncDistVal$.html#Empty[A]:provingground.learning.TruncDistVal[A]", "kind" : "def"}, {"label" : "FD", "tail" : "(fd: FiniteDistribution[A]): TruncDistVal[A]", "member" : "provingground.learning.TruncDistVal.FD", "link" : "provingground\/learning\/TruncDistVal$.html#FD[A](fd:provingground.FiniteDistribution[A]):provingground.learning.TruncDistVal[A]", "kind" : "def"}, {"label" : "sum", "tail" : "(first: ⇒ TruncDistVal[A], second: ⇒ TruncDistVal[A]): TruncDistVal[A]", "member" : "provingground.learning.TruncDistVal.sum", "link" : "provingground\/learning\/TruncDistVal$.html#sum[A](first:=>provingground.learning.TruncDistVal[A],second:=>provingground.learning.TruncDistVal[A]):provingground.learning.TruncDistVal[A]", "kind" : "def"}, {"label" : "scaled", "tail" : "(td: TruncDistVal[A], scale: Double): TruncDistVal[A]", "member" : "provingground.learning.TruncDistVal.scaled", "link" : "provingground\/learning\/TruncDistVal$.html#scaled[A](td:provingground.learning.TruncDistVal[A],scale:Double):provingground.learning.TruncDistVal[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/TruncDistVal$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/TruncDistVal$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/TruncDistVal$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/TruncDistVal$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/TruncDistVal$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/TruncDistVal$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/TruncDistVal$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TruncDistVal$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TruncDistVal$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/TruncDistVal$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/TruncDistVal$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/TruncDistVal$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/TruncDistVal$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/TruncDistVal$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/TruncDistVal$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/TruncDistVal$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/TruncDistVal$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/TruncDistVal$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/TruncDistVal$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "flatMap", "tail" : "(f: (A) ⇒ TruncDistVal[B]): TruncDistVal[B]", "member" : "provingground.learning.TruncDistVal.flatMap", "link" : "provingground\/learning\/TruncDistVal.html#flatMap[B](f:A=>provingground.learning.TruncDistVal[B]):provingground.learning.TruncDistVal[B]", "kind" : "def"}, {"label" : "filter", "tail" : "(p: (A) ⇒ Boolean): TruncDistVal[A]", "member" : "provingground.learning.TruncDistVal.filter", "link" : "provingground\/learning\/TruncDistVal.html#filter(p:A=>Boolean):provingground.learning.TruncDistVal[A]", "kind" : "def"}, {"label" : "<+>", "tail" : "(that: ⇒ TruncDistVal[A]): TruncDistVal[A]", "member" : "provingground.learning.TruncDistVal.<+>", "link" : "provingground\/learning\/TruncDistVal.html#<+>(that:=>provingground.learning.TruncDistVal[A]):provingground.learning.TruncDistVal[A]", "kind" : "def"}, {"label" : "<*>", "tail" : "(scale: Double): TruncDistVal[A]", "member" : "provingground.learning.TruncDistVal.<*>", "link" : "provingground\/learning\/TruncDistVal.html#<*>(scale:Double):provingground.learning.TruncDistVal[A]", "kind" : "def"}, {"member" : "provingground.learning.TruncDistVal#<init>", "error" : "unsupported entity"}, {"label" : "getFD", "tail" : ": (Double) ⇒ Option[FiniteDistribution[A]]", "member" : "provingground.learning.TruncDistVal.getFD", "link" : "provingground\/learning\/TruncDistVal.html#getFD:Double=>Option[provingground.FiniteDistribution[A]]", "kind" : "val"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "provingground\/learning\/TruncDistVal.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "provingground\/learning\/TruncDistVal.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/TruncDistVal.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/TruncDistVal.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "provingground\/learning\/TruncDistVal.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "provingground\/learning\/TruncDistVal.html#==(x$1:Any):Boolean", "kind" : "final def"}], "case class" : "provingground\/learning\/TruncDistVal.html", "kind" : "case class"}, {"name" : "provingground.learning.Unify", "shortDescription" : "", "object" : "provingground\/learning\/Unify$.html", "members_object" : [{"label" : "purgedInvVector", "tail" : "(invVector: Vector[(Term, Set[(Term, Term)])], accum: Vector[(Term, Set[(Term, Term)])], freeVars: (Term) ⇒ Boolean): Vector[(Term, Set[(Term, Term)])]", "member" : "provingground.learning.Unify.purgedInvVector", "link" : "provingground\/learning\/Unify$.html#purgedInvVector(invVector:Vector[(provingground.HoTT.Term,Set[(provingground.HoTT.Term,provingground.HoTT.Term)])],accum:Vector[(provingground.HoTT.Term,Set[(provingground.HoTT.Term,provingground.HoTT.Term)])],freeVars:provingground.HoTT.Term=>Boolean):Vector[(provingground.HoTT.Term,Set[(provingground.HoTT.Term,provingground.HoTT.Term)])]", "kind" : "def"}, {"label" : "purgedPairs", "tail" : "(fxs: Set[(Term, Term)]): Set[(Term, Term)]", "member" : "provingground.learning.Unify.purgedPairs", "link" : "provingground\/learning\/Unify$.html#purgedPairs(fxs:Set[(provingground.HoTT.Term,provingground.HoTT.Term)]):scala.collection.immutable.Set[(provingground.HoTT.Term,provingground.HoTT.Term)]", "kind" : "def"}, {"label" : "purgedPairsList", "tail" : "(fxs: List[(Term, Term)], accum: List[(Term, Term)]): List[(Term, Term)]", "member" : "provingground.learning.Unify.purgedPairsList", "link" : "provingground\/learning\/Unify$.html#purgedPairsList(fxs:List[(provingground.HoTT.Term,provingground.HoTT.Term)],accum:List[(provingground.HoTT.Term,provingground.HoTT.Term)]):List[(provingground.HoTT.Term,provingground.HoTT.Term)]", "kind" : "def"}, {"label" : "purgeVector", "tail" : "(r2: Term, inv2: Set[(Term, Term)], invVector: Vector[(Term, Set[(Term, Term)])], freeVars: (Term) ⇒ Boolean): (Term, Set[(Term, Term)])", "member" : "provingground.learning.Unify.purgeVector", "link" : "provingground\/learning\/Unify$.html#purgeVector(r2:provingground.HoTT.Term,inv2:Set[(provingground.HoTT.Term,provingground.HoTT.Term)],invVector:Vector[(provingground.HoTT.Term,Set[(provingground.HoTT.Term,provingground.HoTT.Term)])],freeVars:provingground.HoTT.Term=>Boolean):(provingground.HoTT.Term,Set[(provingground.HoTT.Term,provingground.HoTT.Term)])", "kind" : "def"}, {"label" : "purgeInv", "tail" : "(r1: Term, inv1: Set[(Term, Term)], r2: Term, inv2: Set[(Term, Term)], freeVars: (Term) ⇒ Boolean): Set[(Term, Term)]", "member" : "provingground.learning.Unify.purgeInv", "link" : "provingground\/learning\/Unify$.html#purgeInv(r1:provingground.HoTT.Term,inv1:Set[(provingground.HoTT.Term,provingground.HoTT.Term)],r2:provingground.HoTT.Term,inv2:Set[(provingground.HoTT.Term,provingground.HoTT.Term)],freeVars:provingground.HoTT.Term=>Boolean):scala.collection.immutable.Set[(provingground.HoTT.Term,provingground.HoTT.Term)]", "kind" : "def"}, {"label" : "appln", "tail" : "(func: Term, arg: Term, freeVars: Vector[Term]): Option[Term]", "member" : "provingground.learning.Unify.appln", "link" : "provingground\/learning\/Unify$.html#appln(func:provingground.HoTT.Term,arg:provingground.HoTT.Term,freeVars:Vector[provingground.HoTT.Term]):Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "unifApply", "tail" : "(func: Term, arg: Term, freeVars: Vector[Term]): Option[Term]", "member" : "provingground.learning.Unify.unifApply", "link" : "provingground\/learning\/Unify$.html#unifApply(func:provingground.HoTT.Term,arg:provingground.HoTT.Term,freeVars:Vector[provingground.HoTT.Term]):Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "subsApply", "tail" : "(func: Term, arg: Term, unifMap: Map[Term, Term], freeVars: Vector[Term]): Option[Term]", "member" : "provingground.learning.Unify.subsApply", "link" : "provingground\/learning\/Unify$.html#subsApply(func:provingground.HoTT.Term,arg:provingground.HoTT.Term,unifMap:Map[provingground.HoTT.Term,provingground.HoTT.Term],freeVars:Vector[provingground.HoTT.Term]):Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "unify", "tail" : "(lhs: Term, rhs: Term, freevars: (Term) ⇒ Boolean): Option[Map[Term, Term]]", "member" : "provingground.learning.Unify.unify", "link" : "provingground\/learning\/Unify$.html#unify(lhs:provingground.HoTT.Term,rhs:provingground.HoTT.Term,freevars:provingground.HoTT.Term=>Boolean):Option[Map[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "unifyAll", "tail" : "(freeVars: (Term) ⇒ Boolean)(xys: (Term, Term)*): Option[Map[Term, Term]]", "member" : "provingground.learning.Unify.unifyAll", "link" : "provingground\/learning\/Unify$.html#unifyAll(freeVars:provingground.HoTT.Term=>Boolean)(xys:(provingground.HoTT.Term,provingground.HoTT.Term)*):Option[Map[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "unifyVector", "tail" : "(xys: Vector[(Term, Term)], freeVars: (Term) ⇒ Boolean): Option[Map[Term, Term]]", "member" : "provingground.learning.Unify.unifyVector", "link" : "provingground\/learning\/Unify$.html#unifyVector(xys:Vector[(provingground.HoTT.Term,provingground.HoTT.Term)],freeVars:provingground.HoTT.Term=>Boolean):Option[Map[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "mergeAll", "tail" : "(xs: Option[Map[U, V]]*): Option[Map[U, V]]", "member" : "provingground.learning.Unify.mergeAll", "link" : "provingground\/learning\/Unify$.html#mergeAll[U,V](xs:Option[Map[U,V]]*):Option[Map[U,V]]", "kind" : "def"}, {"label" : "mergeOptMaps", "tail" : "(x: Option[Map[U, V]], y: Option[Map[U, V]]): Option[Map[U, V]]", "member" : "provingground.learning.Unify.mergeOptMaps", "link" : "provingground\/learning\/Unify$.html#mergeOptMaps[U,V](x:Option[Map[U,V]],y:Option[Map[U,V]]):Option[Map[U,V]]", "kind" : "def"}, {"label" : "mergeMaps", "tail" : "(x: Map[U, V], y: Map[U, V]): Option[Map[U, V]]", "member" : "provingground.learning.Unify.mergeMaps", "link" : "provingground\/learning\/Unify$.html#mergeMaps[U,V](x:Map[U,V],y:Map[U,V]):Option[Map[U,V]]", "kind" : "def"}, {"label" : "dependsOn", "tail" : "(term: Term): (Vector[Term]) ⇒ Boolean", "member" : "provingground.learning.Unify.dependsOn", "link" : "provingground\/learning\/Unify$.html#dependsOn(term:provingground.HoTT.Term):Vector[provingground.HoTT.Term]=>Boolean", "kind" : "def"}, {"label" : "multisub", "tail" : "(x: U, m: Map[Term, Term]): U", "member" : "provingground.learning.Unify.multisub", "link" : "provingground\/learning\/Unify$.html#multisub[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](x:U,m:Map[provingground.HoTT.Term,provingground.HoTT.Term]):U", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/Unify$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/Unify$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/Unify$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/Unify$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/Unify$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/Unify$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/Unify$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/Unify$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/Unify$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/Unify$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/Unify$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/Unify$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/Unify$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/Unify$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/Unify$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/Unify$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/Unify$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/Unify$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/Unify$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.learning.VarValueSet", "shortDescription" : "", "members_case class" : [{"member" : "provingground.learning.VarValueSet#<init>", "error" : "unsupported entity"}, {"label" : "randVarFamilyVals", "tail" : ": Set[Value[_ <: HList, _, D]]", "member" : "provingground.learning.VarValueSet.randVarFamilyVals", "link" : "provingground\/learning\/VarValueSet.html#randVarFamilyVals:Set[provingground.learning.RandomVarFamily.Value[_<:shapeless.HList,_,D]]", "kind" : "val"}, {"label" : "randVarVals", "tail" : ": Set[Value[_, D]]", "member" : "provingground.learning.VarValueSet.randVarVals", "link" : "provingground\/learning\/VarValueSet.html#randVarVals:Set[provingground.learning.RandomVar.Value[_,D]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/VarValueSet.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/VarValueSet.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/VarValueSet.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/VarValueSet.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/VarValueSet.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/VarValueSet.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/VarValueSet.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/VarValueSet.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/VarValueSet.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/VarValueSet.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/VarValueSet.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/VarValueSet.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/VarValueSet.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/VarValueSet.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/VarValueSet.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/VarValueSet.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/learning\/VarValueSet.html", "kind" : "case class"}, {"name" : "provingground.learning.WeightedTermBucket", "shortDescription" : "", "object" : "provingground\/learning\/WeightedTermBucket$.html", "members_class" : [{"label" : "typDist", "tail" : "(): FiniteDistribution[Typ[Term]]", "member" : "provingground.learning.WeightedTermBucket.typDist", "link" : "provingground\/learning\/WeightedTermBucket.html#typDist:provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "termTypDist", "tail" : "(): FiniteDistribution[Typ[Term]]", "member" : "provingground.learning.WeightedTermBucket.termTypDist", "link" : "provingground\/learning\/WeightedTermBucket.html#termTypDist:provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "termDistMap", "tail" : "(): Map[Typ[Term], FiniteDistribution[Term]]", "member" : "provingground.learning.WeightedTermBucket.termDistMap", "link" : "provingground\/learning\/WeightedTermBucket.html#termDistMap:scala.collection.immutable.Map[provingground.HoTT.Typ[provingground.HoTT.Term],provingground.FiniteDistribution[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "append", "tail" : "(t: Weighted[Term]): Unit", "member" : "provingground.learning.WeightedTermBucket.append", "link" : "provingground\/learning\/WeightedTermBucket.html#append(t:provingground.Weighted[provingground.HoTT.Term]):Unit", "kind" : "def"}, {"label" : "types", "tail" : ": Map[Typ[Term], Double]", "member" : "provingground.learning.WeightedTermBucket.types", "link" : "provingground\/learning\/WeightedTermBucket.html#types:scala.collection.mutable.Map[provingground.HoTT.Typ[provingground.HoTT.Term],Double]", "kind" : "val"}, {"label" : "termTypes", "tail" : ": Map[Typ[Term], Double]", "member" : "provingground.learning.WeightedTermBucket.termTypes", "link" : "provingground\/learning\/WeightedTermBucket.html#termTypes:scala.collection.mutable.Map[provingground.HoTT.Typ[provingground.HoTT.Term],Double]", "kind" : "val"}, {"label" : "terms", "tail" : ": Map[Typ[Term], Vector[Weighted[Term]]]", "member" : "provingground.learning.WeightedTermBucket.terms", "link" : "provingground\/learning\/WeightedTermBucket.html#terms:scala.collection.mutable.Map[provingground.HoTT.Typ[provingground.HoTT.Term],Vector[provingground.Weighted[provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "tot", "tail" : ": Double", "member" : "provingground.learning.WeightedTermBucket.tot", "link" : "provingground\/learning\/WeightedTermBucket.html#tot:Double", "kind" : "var"}, {"member" : "provingground.learning.WeightedTermBucket#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/WeightedTermBucket.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/WeightedTermBucket.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/WeightedTermBucket.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/WeightedTermBucket.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/WeightedTermBucket.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/WeightedTermBucket.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/WeightedTermBucket.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/WeightedTermBucket.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/WeightedTermBucket.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/WeightedTermBucket.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/WeightedTermBucket.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/WeightedTermBucket.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/WeightedTermBucket.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/WeightedTermBucket.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/WeightedTermBucket.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/WeightedTermBucket.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/WeightedTermBucket.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/WeightedTermBucket.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/WeightedTermBucket.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "fdMap", "tail" : "(m: Map[A, Vector[Weighted[Term]]], tot: Double): Map[A, FiniteDistribution[Term]]", "member" : "provingground.learning.WeightedTermBucket.fdMap", "link" : "provingground\/learning\/WeightedTermBucket$.html#fdMap[A](m:scala.collection.mutable.Map[A,Vector[provingground.Weighted[provingground.HoTT.Term]]],tot:Double):scala.collection.immutable.Map[A,provingground.FiniteDistribution[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "fd", "tail" : "(m: Map[Typ[Term], Double], tot: Double): FiniteDistribution[Typ[Term]]", "member" : "provingground.learning.WeightedTermBucket.fd", "link" : "provingground\/learning\/WeightedTermBucket$.html#fd(m:scala.collection.mutable.Map[provingground.HoTT.Typ[provingground.HoTT.Term],Double],tot:Double):provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/WeightedTermBucket$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/WeightedTermBucket$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/WeightedTermBucket$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/WeightedTermBucket$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/WeightedTermBucket$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/WeightedTermBucket$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/WeightedTermBucket$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/WeightedTermBucket$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/WeightedTermBucket$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/WeightedTermBucket$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/WeightedTermBucket$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/WeightedTermBucket$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/WeightedTermBucket$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/WeightedTermBucket$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/WeightedTermBucket$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/WeightedTermBucket$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/WeightedTermBucket$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/WeightedTermBucket$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/WeightedTermBucket$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/learning\/WeightedTermBucket.html", "kind" : "class"}, {"name" : "provingground.learning.WeightVect", "shortDescription" : "", "object" : "provingground\/learning\/WeightVect$.html", "members_object" : [{"label" : "rand", "tail" : ": Random", "member" : "provingground.learning.WeightVect.rand", "link" : "provingground\/learning\/WeightVect$.html#rand:scala.util.Random", "kind" : "lazy val"}, {"label" : "randomVec", "tail" : "(length: Int, damp: Double): Vector[Double]", "member" : "provingground.learning.WeightVect.randomVec", "link" : "provingground\/learning\/WeightVect$.html#randomVec(length:Int,damp:Double):scala.collection.immutable.Vector[Double]", "kind" : "def"}, {"label" : "sum", "tail" : "(vs: Seq[Vector[Double]], accum: Vector[Double]): Vector[Double]", "member" : "provingground.learning.WeightVect.sum", "link" : "provingground\/learning\/WeightVect$.html#sum(vs:Seq[Vector[Double]],accum:Vector[Double]):Vector[Double]", "kind" : "def"}, {"label" : "add", "tail" : "(first: Vector[Double], second: Vector[Double]): Vector[Double]", "member" : "provingground.learning.WeightVect.add", "link" : "provingground\/learning\/WeightVect$.html#add(first:Vector[Double],second:Vector[Double]):scala.collection.immutable.Vector[Double]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/WeightVect$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/WeightVect$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/WeightVect$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/WeightVect$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/WeightVect$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/WeightVect$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/WeightVect$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/WeightVect$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/WeightVect$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/WeightVect$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/WeightVect$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/WeightVect$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/learning\/WeightVect$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/WeightVect$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/learning\/WeightVect$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/learning\/WeightVect$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/WeightVect$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/WeightVect$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/WeightVect$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "weighted", "tail" : "(): Weighted[T]", "member" : "provingground.learning.WeightVect.weighted", "link" : "provingground\/learning\/WeightVect.html#weighted:provingground.Weighted[T]", "kind" : "def"}, {"label" : "norm", "tail" : "(): Double", "member" : "provingground.learning.WeightVect.norm", "link" : "provingground\/learning\/WeightVect.html#norm:Double", "kind" : "def"}, {"label" : "pos", "tail" : "(): WeightVect[T]", "member" : "provingground.learning.WeightVect.pos", "link" : "provingground\/learning\/WeightVect.html#pos:provingground.learning.WeightVect[T]", "kind" : "def"}, {"label" : "scale", "tail" : "(s: Double): WeightVect[T]", "member" : "provingground.learning.WeightVect.scale", "link" : "provingground\/learning\/WeightVect.html#scale(s:Double):provingground.learning.WeightVect[T]", "kind" : "def"}, {"member" : "provingground.learning.WeightVect#<init>", "error" : "unsupported entity"}, {"label" : "vect", "tail" : ": Vector[Double]", "member" : "provingground.learning.WeightVect.vect", "link" : "provingground\/learning\/WeightVect.html#vect:Vector[Double]", "kind" : "val"}, {"label" : "elem", "tail" : ": T", "member" : "provingground.learning.WeightVect.elem", "link" : "provingground\/learning\/WeightVect.html#elem:T", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/learning\/WeightVect.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/learning\/WeightVect.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/learning\/WeightVect.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/learning\/WeightVect.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/learning\/WeightVect.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/learning\/WeightVect.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/learning\/WeightVect.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/WeightVect.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/WeightVect.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/learning\/WeightVect.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/learning\/WeightVect.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/learning\/WeightVect.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/learning\/WeightVect.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/learning\/WeightVect.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/learning\/WeightVect.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/learning\/WeightVect.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/learning\/WeightVect.html", "kind" : "case class"}], "scala.meta.prettyprinters" : [], "provingground.scratch" : [{"name" : "provingground.scratch.DedGrad", "shortDescription" : "", "object" : "provingground\/scratch\/DedGrad$.html", "members_object" : [{"label" : "ABU", "tail" : "", "member" : "provingground.scratch.DedGrad.ABU", "link" : "provingground\/scratch\/DedGrad$.html#ABU", "kind" : "object"}, {"label" : "AB", "tail" : "", "member" : "provingground.scratch.DedGrad.AB", "link" : "provingground\/scratch\/DedGrad$.html#AB", "kind" : "object"}, {"label" : "SimpleGrad", "tail" : "", "member" : "provingground.scratch.DedGrad.SimpleGrad", "link" : "provingground\/scratch\/DedGrad$.html#SimpleGrad", "kind" : "object"}, {"label" : "LongRun", "tail" : "", "member" : "provingground.scratch.DedGrad.LongRun", "link" : "provingground\/scratch\/DedGrad$.html#LongRun", "kind" : "object"}, {"label" : "idA", "tail" : ": Func[Term with Subs[Term], Term with Subs[Term]]", "member" : "provingground.scratch.DedGrad.idA", "link" : "provingground\/scratch\/DedGrad$.html#idA:provingground.HoTT.Func[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "f", "tail" : ": Func[Term, Term] with Subs[Func[Term, Term]]", "member" : "provingground.scratch.DedGrad.f", "link" : "provingground\/scratch\/DedGrad$.html#f:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "cnst", "tail" : ": Func[Term with Subs[Term], Func[Term with Subs[Term], Term with Subs[Term]]]", "member" : "provingground.scratch.DedGrad.cnst", "link" : "provingground\/scratch\/DedGrad$.html#cnst:provingground.HoTT.Func[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "distAB", "tail" : ": FiniteDistribution[Term]", "member" : "provingground.scratch.DedGrad.distAB", "link" : "provingground\/scratch\/DedGrad$.html#distAB:provingground.FiniteDistribution[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "distABU", "tail" : ": FiniteDistribution[Term]", "member" : "provingground.scratch.DedGrad.distABU", "link" : "provingground\/scratch\/DedGrad$.html#distABU:provingground.FiniteDistribution[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "b", "tail" : ": Term with Subs[Term]", "member" : "provingground.scratch.DedGrad.b", "link" : "provingground\/scratch\/DedGrad$.html#b:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "a", "tail" : ": Term with Subs[Term]", "member" : "provingground.scratch.DedGrad.a", "link" : "provingground\/scratch\/DedGrad$.html#a:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "B", "tail" : ": Typ[Term] with Subs[Typ[Term]]", "member" : "provingground.scratch.DedGrad.B", "link" : "provingground\/scratch\/DedGrad$.html#B:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "A", "tail" : ": Typ[Term] with Subs[Typ[Term]]", "member" : "provingground.scratch.DedGrad.A", "link" : "provingground\/scratch\/DedGrad$.html#A:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/scratch\/DedGrad$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/scratch\/DedGrad$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/scratch\/DedGrad$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/scratch\/DedGrad$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/scratch\/DedGrad$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/scratch\/DedGrad$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/scratch\/DedGrad$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scratch\/DedGrad$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scratch\/DedGrad$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scratch\/DedGrad$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/scratch\/DedGrad$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/scratch\/DedGrad$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/scratch\/DedGrad$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/scratch\/DedGrad$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/scratch\/DedGrad$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/scratch\/DedGrad$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/scratch\/DedGrad$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/scratch\/DedGrad$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/scratch\/DedGrad$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.scratch.DiffMonixAB", "shortDescription" : "", "object" : "provingground\/scratch\/DiffMonixAB$.html", "members_object" : [{"label" : "showEv", "tail" : ": CancelableFuture[Unit]", "member" : "provingground.scratch.DiffMonixAB.showEv", "link" : "provingground\/scratch\/DiffMonixAB$.html#showEv:monix.execution.CancelableFuture[Unit]", "kind" : "lazy val"}, {"label" : "showTheorems", "tail" : ": CancelableFuture[Unit]", "member" : "provingground.scratch.DiffMonixAB.showTheorems", "link" : "provingground\/scratch\/DiffMonixAB$.html#showTheorems:monix.execution.CancelableFuture[Unit]", "kind" : "lazy val"}, {"label" : "thmsObs", "tail" : ": Observable[Vector[Weighted[Typ[Term]]]]", "member" : "provingground.scratch.DiffMonixAB.thmsObs", "link" : "provingground\/scratch\/DiffMonixAB$.html#thmsObs:monix.reactive.Observable[scala.collection.immutable.Vector[provingground.Weighted[provingground.HoTT.Typ[provingground.HoTT.Term]]]]", "kind" : "val"}, {"label" : "simpleObs", "tail" : ": Observable[FiniteDistribution[Term]]", "member" : "provingground.scratch.DiffMonixAB.simpleObs", "link" : "provingground\/scratch\/DiffMonixAB$.html#simpleObs:monix.reactive.Observable[provingground.FiniteDistribution[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "fd", "tail" : ": FiniteDistribution[Term]", "member" : "provingground.scratch.DiffMonixAB.fd", "link" : "provingground\/scratch\/DiffMonixAB$.html#fd:provingground.FiniteDistribution[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "B", "tail" : ": Typ[Term] with Subs[Typ[Term]]", "member" : "provingground.scratch.DiffMonixAB.B", "link" : "provingground\/scratch\/DiffMonixAB$.html#B:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "A", "tail" : ": Typ[Term] with Subs[Typ[Term]]", "member" : "provingground.scratch.DiffMonixAB.A", "link" : "provingground\/scratch\/DiffMonixAB$.html#A:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/scratch\/DiffMonixAB$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/scratch\/DiffMonixAB$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/scratch\/DiffMonixAB$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/scratch\/DiffMonixAB$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/scratch\/DiffMonixAB$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/scratch\/DiffMonixAB$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/scratch\/DiffMonixAB$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scratch\/DiffMonixAB$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scratch\/DiffMonixAB$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scratch\/DiffMonixAB$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/scratch\/DiffMonixAB$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/scratch\/DiffMonixAB$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/scratch\/DiffMonixAB$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/scratch\/DiffMonixAB$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/scratch\/DiffMonixAB$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/scratch\/DiffMonixAB$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/scratch\/DiffMonixAB$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/scratch\/DiffMonixAB$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/scratch\/DiffMonixAB$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.scratch.FDMonixAB", "shortDescription" : "", "object" : "provingground\/scratch\/FDMonixAB$.html", "members_object" : [{"label" : "showFG", "tail" : ": CancelableFuture[Unit]", "member" : "provingground.scratch.FDMonixAB.showFG", "link" : "provingground\/scratch\/FDMonixAB$.html#showFG:monix.execution.CancelableFuture[Unit]", "kind" : "lazy val"}, {"label" : "obs", "tail" : ": Observable[FineDeducerStep[Task]]", "member" : "provingground.scratch.FDMonixAB.obs", "link" : "provingground\/scratch\/FDMonixAB$.html#obs:monix.reactive.Observable[provingground.learning.FineDeducerStep[monix.eval.Task]]", "kind" : "lazy val"}, {"label" : "saveTheorems", "tail" : ": CancelableFuture[Unit]", "member" : "provingground.scratch.FDMonixAB.saveTheorems", "link" : "provingground\/scratch\/FDMonixAB$.html#saveTheorems:monix.execution.CancelableFuture[Unit]", "kind" : "lazy val"}, {"label" : "update", "tail" : "(fd: FiniteDistribution[Typ[Term]]): Unit", "member" : "provingground.scratch.FDMonixAB.update", "link" : "provingground\/scratch\/FDMonixAB$.html#update(fd:provingground.FiniteDistribution[provingground.HoTT.Typ[provingground.HoTT.Term]]):Unit", "kind" : "def"}, {"label" : "ABfile", "tail" : ": Path", "member" : "provingground.scratch.FDMonixAB.ABfile", "link" : "provingground\/scratch\/FDMonixAB$.html#ABfile:ammonite.ops.Path", "kind" : "val"}, {"label" : "showEv", "tail" : ": CancelableFuture[Unit]", "member" : "provingground.scratch.FDMonixAB.showEv", "link" : "provingground\/scratch\/FDMonixAB$.html#showEv:monix.execution.CancelableFuture[Unit]", "kind" : "lazy val"}, {"label" : "showTheorems", "tail" : ": CancelableFuture[Unit]", "member" : "provingground.scratch.FDMonixAB.showTheorems", "link" : "provingground\/scratch\/FDMonixAB$.html#showTheorems:monix.execution.CancelableFuture[Unit]", "kind" : "lazy val"}, {"label" : "thmsObs", "tail" : ": Observable[Vector[Weighted[Typ[Term]]]]", "member" : "provingground.scratch.FDMonixAB.thmsObs", "link" : "provingground\/scratch\/FDMonixAB$.html#thmsObs:monix.reactive.Observable[scala.collection.immutable.Vector[provingground.Weighted[provingground.HoTT.Typ[provingground.HoTT.Term]]]]", "kind" : "val"}, {"label" : "simpleObs", "tail" : ": Observable[FiniteDistribution[Term]]", "member" : "provingground.scratch.FDMonixAB.simpleObs", "link" : "provingground\/scratch\/FDMonixAB$.html#simpleObs:monix.reactive.Observable[provingground.FiniteDistribution[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "fd", "tail" : ": FiniteDistribution[Term]", "member" : "provingground.scratch.FDMonixAB.fd", "link" : "provingground\/scratch\/FDMonixAB$.html#fd:provingground.FiniteDistribution[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "g", "tail" : ": Func[Term with Subs[Term], Func[Term with Subs[Term], Term with Subs[Term]]]", "member" : "provingground.scratch.FDMonixAB.g", "link" : "provingground\/scratch\/FDMonixAB$.html#g:provingground.HoTT.Func[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "f", "tail" : ": Func[Term with Subs[Term], Func[Term with Subs[Term], Term with Subs[Term]]]", "member" : "provingground.scratch.FDMonixAB.f", "link" : "provingground\/scratch\/FDMonixAB$.html#f:provingground.HoTT.Func[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "b", "tail" : ": Term with Subs[Term]", "member" : "provingground.scratch.FDMonixAB.b", "link" : "provingground\/scratch\/FDMonixAB$.html#b:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "a", "tail" : ": Term with Subs[Term]", "member" : "provingground.scratch.FDMonixAB.a", "link" : "provingground\/scratch\/FDMonixAB$.html#a:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "B", "tail" : ": Typ[Term] with Subs[Typ[Term]]", "member" : "provingground.scratch.FDMonixAB.B", "link" : "provingground\/scratch\/FDMonixAB$.html#B:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "A", "tail" : ": Typ[Term] with Subs[Typ[Term]]", "member" : "provingground.scratch.FDMonixAB.A", "link" : "provingground\/scratch\/FDMonixAB$.html#A:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/scratch\/FDMonixAB$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/scratch\/FDMonixAB$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/scratch\/FDMonixAB$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/scratch\/FDMonixAB$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/scratch\/FDMonixAB$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/scratch\/FDMonixAB$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/scratch\/FDMonixAB$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scratch\/FDMonixAB$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scratch\/FDMonixAB$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scratch\/FDMonixAB$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/scratch\/FDMonixAB$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/scratch\/FDMonixAB$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/scratch\/FDMonixAB$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/scratch\/FDMonixAB$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/scratch\/FDMonixAB$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/scratch\/FDMonixAB$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/scratch\/FDMonixAB$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/scratch\/FDMonixAB$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/scratch\/FDMonixAB$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.scratch.MonoidEv", "shortDescription" : "", "object" : "provingground\/scratch\/MonoidEv$.html", "members_object" : [{"label" : "showLemmas", "tail" : ": CancelableFuture[Unit]", "member" : "provingground.scratch.MonoidEv.showLemmas", "link" : "provingground\/scratch\/MonoidEv$.html#showLemmas:monix.execution.CancelableFuture[Unit]", "kind" : "lazy val"}, {"label" : "viewThms", "tail" : ": Vector[Typ[Term]]", "member" : "provingground.scratch.MonoidEv.viewThms", "link" : "provingground\/scratch\/MonoidEv$.html#viewThms:scala.collection.immutable.Vector[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "obs", "tail" : ": Observable[FiniteDistribution[Term]]", "member" : "provingground.scratch.MonoidEv.obs", "link" : "provingground\/scratch\/MonoidEv$.html#obs:monix.reactive.Observable[provingground.FiniteDistribution[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/scratch\/MonoidEv$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/scratch\/MonoidEv$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/scratch\/MonoidEv$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/scratch\/MonoidEv$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/scratch\/MonoidEv$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/scratch\/MonoidEv$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/scratch\/MonoidEv$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scratch\/MonoidEv$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scratch\/MonoidEv$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scratch\/MonoidEv$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/scratch\/MonoidEv$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/scratch\/MonoidEv$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/scratch\/MonoidEv$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/scratch\/MonoidEv$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/scratch\/MonoidEv$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/scratch\/MonoidEv$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/scratch\/MonoidEv$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/scratch\/MonoidEv$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/scratch\/MonoidEv$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.scratch.TempMain", "shortDescription" : "", "object" : "provingground\/scratch\/TempMain$.html", "members_object" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/scratch\/TempMain$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/scratch\/TempMain$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/scratch\/TempMain$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/scratch\/TempMain$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/scratch\/TempMain$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/scratch\/TempMain$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/scratch\/TempMain$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scratch\/TempMain$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scratch\/TempMain$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scratch\/TempMain$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/scratch\/TempMain$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/scratch\/TempMain$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/scratch\/TempMain$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/scratch\/TempMain$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/scratch\/TempMain$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/scratch\/TempMain$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/scratch\/TempMain$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/scratch\/TempMain$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/scratch\/TempMain$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.scratch.UnifInv", "shortDescription" : "", "members_case class" : [{"label" : "bug", "tail" : "(): Boolean", "member" : "provingground.scratch.UnifInv.bug", "link" : "provingground\/scratch\/UnifInv.html#bug:Boolean", "kind" : "def"}, {"label" : "prodOpt", "tail" : "(): Option[Term]", "member" : "provingground.scratch.UnifInv.prodOpt", "link" : "provingground\/scratch\/UnifInv.html#prodOpt:Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "unified", "tail" : "(): Boolean", "member" : "provingground.scratch.UnifInv.unified", "link" : "provingground\/scratch\/UnifInv.html#unified:Boolean", "kind" : "def"}, {"label" : "origProd", "tail" : "(): Boolean", "member" : "provingground.scratch.UnifInv.origProd", "link" : "provingground\/scratch\/UnifInv.html#origProd:Boolean", "kind" : "def"}, {"label" : "newFunc", "tail" : ": Term", "member" : "provingground.scratch.UnifInv.newFunc", "link" : "provingground\/scratch\/UnifInv.html#newFunc:provingground.HoTT.Term", "kind" : "val"}, {"label" : "newArg", "tail" : ": Term", "member" : "provingground.scratch.UnifInv.newArg", "link" : "provingground\/scratch\/UnifInv.html#newArg:provingground.HoTT.Term", "kind" : "val"}, {"label" : "newResult", "tail" : ": Term", "member" : "provingground.scratch.UnifInv.newResult", "link" : "provingground\/scratch\/UnifInv.html#newResult:provingground.HoTT.Term", "kind" : "val"}, {"member" : "provingground.scratch.UnifInv#<init>", "error" : "unsupported entity"}, {"label" : "arg", "tail" : ": Term", "member" : "provingground.scratch.UnifInv.arg", "link" : "provingground\/scratch\/UnifInv.html#arg:provingground.HoTT.Term", "kind" : "val"}, {"label" : "func", "tail" : ": Term", "member" : "provingground.scratch.UnifInv.func", "link" : "provingground\/scratch\/UnifInv.html#func:provingground.HoTT.Term", "kind" : "val"}, {"label" : "unif", "tail" : ": Map[Term, Term]", "member" : "provingground.scratch.UnifInv.unif", "link" : "provingground\/scratch\/UnifInv.html#unif:Map[provingground.HoTT.Term,provingground.HoTT.Term]", "kind" : "val"}, {"label" : "result", "tail" : ": Term", "member" : "provingground.scratch.UnifInv.result", "link" : "provingground\/scratch\/UnifInv.html#result:provingground.HoTT.Term", "kind" : "val"}, {"label" : "target", "tail" : ": Term", "member" : "provingground.scratch.UnifInv.target", "link" : "provingground\/scratch\/UnifInv.html#target:provingground.HoTT.Term", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/scratch\/UnifInv.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/scratch\/UnifInv.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/scratch\/UnifInv.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/scratch\/UnifInv.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/scratch\/UnifInv.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/scratch\/UnifInv.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/scratch\/UnifInv.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scratch\/UnifInv.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scratch\/UnifInv.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/scratch\/UnifInv.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/scratch\/UnifInv.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/scratch\/UnifInv.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/scratch\/UnifInv.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/scratch\/UnifInv.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/scratch\/UnifInv.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/scratch\/UnifInv.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/scratch\/UnifInv.html", "kind" : "case class"}], "provingground.andrewscurtis" : [{"name" : "provingground.andrewscurtis.ACBatch", "shortDescription" : "Batch start for Andrews-Curtis runs", "object" : "provingground\/andrewscurtis\/ACBatch$.html", "members_object" : [{"label" : "quickStart", "tail" : "(dir: String, file: String): IndexedSeq[Future[ActorRef]]", "member" : "provingground.andrewscurtis.ACBatch.quickStart", "link" : "provingground\/andrewscurtis\/ACBatch$.html#quickStart(dir:String,file:String):IndexedSeq[scala.concurrent.Future[akka.actor.ActorRef]]", "kind" : "def"}, {"label" : "loadStartData", "tail" : "(dir: String, file: String): IndexedSeq[StartData]", "member" : "provingground.andrewscurtis.ACBatch.loadStartData", "link" : "provingground\/andrewscurtis\/ACBatch$.html#loadStartData(dir:String,file:String):IndexedSeq[provingground.andrewscurtis.StartData]", "kind" : "def"}, {"label" : "loadRawStartData", "tail" : "(dir: String, file: String): IndexedSeq[String]", "member" : "provingground.andrewscurtis.ACBatch.loadRawStartData", "link" : "provingground\/andrewscurtis\/ACBatch$.html#loadRawStartData(dir:String,file:String):IndexedSeq[String]", "kind" : "def"}, {"label" : "wd", "tail" : ": ThisType", "member" : "provingground.andrewscurtis.ACBatch.wd", "link" : "provingground\/andrewscurtis\/ACBatch$.html#wd:ammonite.ops.pwd.ThisType", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/ACBatch$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/ACBatch$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/ACBatch$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/ACBatch$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/ACBatch$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/ACBatch$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/ACBatch$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACBatch$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACBatch$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACBatch$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/ACBatch$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/ACBatch$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/andrewscurtis\/ACBatch$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/ACBatch$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/ACBatch$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/ACBatch$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/ACBatch$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/ACBatch$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/ACBatch$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.andrewscurtis.ACData", "shortDescription" : "", "object" : "provingground\/andrewscurtis\/ACData$.html", "members_object" : [{"label" : "succFile", "tail" : "(source: Path): Unit", "member" : "provingground.andrewscurtis.ACData.succFile", "link" : "provingground\/andrewscurtis\/ACData$.html#succFile(source:ammonite.ops.Path):Unit", "kind" : "def"}, {"label" : "lastLine", "tail" : "(source: Path, target: Path): Unit", "member" : "provingground.andrewscurtis.ACData.lastLine", "link" : "provingground\/andrewscurtis\/ACData$.html#lastLine(source:ammonite.ops.Path,target:ammonite.ops.Path):Unit", "kind" : "def"}, {"label" : "resetFile", "tail" : "(file: Path): Unit", "member" : "provingground.andrewscurtis.ACData.resetFile", "link" : "provingground\/andrewscurtis\/ACData$.html#resetFile(file:ammonite.ops.Path):Unit", "kind" : "def"}, {"label" : "saveEntropy", "tail" : "(file: String, dir: String, ent: List[Weighted[String]]): Unit", "member" : "provingground.andrewscurtis.ACData.saveEntropy", "link" : "provingground\/andrewscurtis\/ACData$.html#saveEntropy(file:String,dir:String,ent:List[provingground.Weighted[String]]):Unit", "kind" : "def"}, {"label" : "saveFD", "tail" : "(file: String, dir: String, fd: FiniteDistribution[T]): Unit", "member" : "provingground.andrewscurtis.ACData.saveFD", "link" : "provingground\/andrewscurtis\/ACData$.html#saveFD[T](file:String,dir:String,fd:provingground.FiniteDistribution[T]):Unit", "kind" : "def"}, {"label" : "loadData", "tail" : "(dir: String): ACData", "member" : "provingground.andrewscurtis.ACData.loadData", "link" : "provingground\/andrewscurtis\/ACData$.html#loadData(dir:String):provingground.andrewscurtis.ACData", "kind" : "def"}, {"label" : "loadAll", "tail" : "(dir: String): Map[String, Stream[(FiniteDistribution[AtomicMove], FiniteDistribution[Moves])]]", "member" : "provingground.andrewscurtis.ACData.loadAll", "link" : "provingground\/andrewscurtis\/ACData$.html#loadAll(dir:String):scala.collection.immutable.Map[String,scala.collection.immutable.Stream[(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves])]]", "kind" : "def"}, {"label" : "loadState", "tail" : "(file: Path): (FiniteDistribution[AtomicMove], FiniteDistribution[Moves])", "member" : "provingground.andrewscurtis.ACData.loadState", "link" : "provingground\/andrewscurtis\/ACData$.html#loadState(file:ammonite.ops.Path):(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves])", "kind" : "def"}, {"label" : "loadAllFinal", "tail" : "(name: String, dir: String): ACStateData", "member" : "provingground.andrewscurtis.ACData.loadAllFinal", "link" : "provingground\/andrewscurtis\/ACData$.html#loadAllFinal(name:String,dir:String):provingground.andrewscurtis.ACStateData", "kind" : "def"}, {"label" : "loadFinal", "tail" : "(name: String, dir: String): (FiniteDistribution[AtomicMove], FiniteDistribution[Moves])", "member" : "provingground.andrewscurtis.ACData.loadFinal", "link" : "provingground\/andrewscurtis\/ACData$.html#loadFinal(name:String,dir:String):(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves])", "kind" : "def"}, {"label" : "load", "tail" : "(name: String, dir: String): Stream[(FiniteDistribution[AtomicMove], FiniteDistribution[Moves])]", "member" : "provingground.andrewscurtis.ACData.load", "link" : "provingground\/andrewscurtis\/ACData$.html#load(name:String,dir:String):scala.collection.immutable.Stream[(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves])]", "kind" : "def"}, {"label" : "fileSave", "tail" : "(name: String, dir: String, rank: Int)(fdM: FiniteDistribution[AtomicMove], fdV: FiniteDistribution[Moves]): Future[Unit]", "member" : "provingground.andrewscurtis.ACData.fileSave", "link" : "provingground\/andrewscurtis\/ACData$.html#fileSave(name:String,dir:String,rank:Int)(fdM:provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],fdV:provingground.FiniteDistribution[provingground.andrewscurtis.Moves]):scala.concurrent.Future[Unit]", "kind" : "def"}, {"label" : "wd", "tail" : ": ThisType", "member" : "provingground.andrewscurtis.ACData.wd", "link" : "provingground\/andrewscurtis\/ACData$.html#wd:ammonite.ops.pwd.ThisType", "kind" : "val"}, {"label" : "unpickle", "tail" : "(str: String): (FiniteDistribution[AtomicMove], FiniteDistribution[Moves])", "member" : "provingground.andrewscurtis.ACData.unpickle", "link" : "provingground\/andrewscurtis\/ACData$.html#unpickle(str:String):(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves])", "kind" : "def"}, {"label" : "pickle", "tail" : "(state: (FiniteDistribution[AtomicMove], FiniteDistribution[Moves])): String", "member" : "provingground.andrewscurtis.ACData.pickle", "link" : "provingground\/andrewscurtis\/ACData$.html#pickle(state:(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves])):String", "kind" : "def"}, {"label" : "thmFiles", "tail" : "(dir: String, s: (String) ⇒ Boolean): Seq[Path]", "member" : "provingground.andrewscurtis.ACData.thmFiles", "link" : "provingground\/andrewscurtis\/ACData$.html#thmFiles(dir:String,s:String=>Boolean):Seq[ammonite.ops.Path]", "kind" : "def"}, {"label" : "thmFileCSV", "tail" : "(dir: String, file: String, rank: Int, lines: Option[Int]): Unit", "member" : "provingground.andrewscurtis.ACData.thmFileCSV", "link" : "provingground\/andrewscurtis\/ACData$.html#thmFileCSV(dir:String,file:String,rank:Int,lines:Option[Int]):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/ACData$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/ACData$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/ACData$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/ACData$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/ACData$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/ACData$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/ACData$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACData$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACData$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACData$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/ACData$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/ACData$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/andrewscurtis\/ACData$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/ACData$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/ACData$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/ACData$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/ACData$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/ACData$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/ACData$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "thmCSV", "tail" : "(name: String, rank: Int): Unit", "member" : "provingground.andrewscurtis.ACData.thmCSV", "link" : "provingground\/andrewscurtis\/ACData.html#thmCSV(name:String,rank:Int):Unit", "kind" : "def"}, {"label" : "resetFiles", "tail" : "(): Iterable[Unit]", "member" : "provingground.andrewscurtis.ACData.resetFiles", "link" : "provingground\/andrewscurtis\/ACData.html#resetFiles():scala.collection.immutable.Iterable[Unit]", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): ACData", "member" : "provingground.andrewscurtis.ACData.take", "link" : "provingground\/andrewscurtis\/ACData.html#take(n:Int):provingground.andrewscurtis.ACData", "kind" : "def"}, {"label" : "last", "tail" : "(): ACStateData", "member" : "provingground.andrewscurtis.ACData.last", "link" : "provingground\/andrewscurtis\/ACData.html#last:provingground.andrewscurtis.ACStateData", "kind" : "def"}, {"member" : "provingground.andrewscurtis.ACData#<init>", "error" : "unsupported entity"}, {"label" : "dir", "tail" : ": String", "member" : "provingground.andrewscurtis.ACData.dir", "link" : "provingground\/andrewscurtis\/ACData.html#dir:String", "kind" : "val"}, {"label" : "paths", "tail" : ": Map[String, Stream[(FiniteDistribution[AtomicMove], FiniteDistribution[Moves])]]", "member" : "provingground.andrewscurtis.ACData.paths", "link" : "provingground\/andrewscurtis\/ACData.html#paths:Map[String,Stream[(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves])]]", "kind" : "val"}, {"label" : "states", "tail" : ": Map[String, (FiniteDistribution[AtomicMove], FiniteDistribution[Moves])]", "member" : "provingground.andrewscurtis.ACresults.states", "link" : "provingground\/andrewscurtis\/ACData.html#states:Map[String,(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves])]", "kind" : "lazy val"}, {"label" : "sizes", "tail" : "(): Map[String, Int]", "member" : "provingground.andrewscurtis.ACresults.sizes", "link" : "provingground\/andrewscurtis\/ACData.html#sizes:scala.collection.immutable.Map[String,Int]", "kind" : "def"}, {"label" : "probVec", "tail" : "(name: String, rank: Int)(p: Presentation): Stream[Double]", "member" : "provingground.andrewscurtis.ACresults.probVec", "link" : "provingground\/andrewscurtis\/ACData.html#probVec(name:String,rank:Int)(p:provingground.andrewscurtis.FreeGroups.Presentation):scala.collection.immutable.Stream[Double]", "kind" : "def"}, {"label" : "thmSupp", "tail" : "(name: String, rank: Int): Vector[Presentation]", "member" : "provingground.andrewscurtis.ACresults.thmSupp", "link" : "provingground\/andrewscurtis\/ACData.html#thmSupp(name:String,rank:Int):Vector[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "thmVec", "tail" : "(name: String, rank: Int): Stream[FiniteDistribution[Presentation]]", "member" : "provingground.andrewscurtis.ACresults.thmVec", "link" : "provingground\/andrewscurtis\/ACData.html#thmVec(name:String,rank:Int):scala.collection.immutable.Stream[provingground.FiniteDistribution[provingground.andrewscurtis.FreeGroups.Presentation]]", "kind" : "def"}, {"label" : "names", "tail" : "(): List[String]", "member" : "provingground.andrewscurtis.ACresults.names", "link" : "provingground\/andrewscurtis\/ACData.html#names:List[String]", "kind" : "def"}, {"label" : "thms", "tail" : "(rank: Int): FiniteDistribution[Presentation]", "member" : "provingground.andrewscurtis.ACStates.thms", "link" : "provingground\/andrewscurtis\/ACData.html#thms(rank:Int):provingground.FiniteDistribution[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "moveWeights", "tail" : "(): FiniteDistribution[AtomicMove]", "member" : "provingground.andrewscurtis.ACStates.moveWeights", "link" : "provingground\/andrewscurtis\/ACData.html#moveWeights:provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove]", "kind" : "def"}, {"label" : "proofs", "tail" : "(): FiniteDistribution[Moves]", "member" : "provingground.andrewscurtis.ACStates.proofs", "link" : "provingground\/andrewscurtis\/ACData.html#proofs:provingground.FiniteDistribution[provingground.andrewscurtis.Moves]", "kind" : "def"}, {"label" : "blended", "tail" : "(): (FiniteDistribution[AtomicMove], FiniteDistribution[Moves])", "member" : "provingground.andrewscurtis.ACStates.blended", "link" : "provingground\/andrewscurtis\/ACData.html#blended:(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves])", "kind" : "def"}, {"label" : "combined", "tail" : "(): (FiniteDistribution[AtomicMove], FiniteDistribution[Moves])", "member" : "provingground.andrewscurtis.ACStates.combined", "link" : "provingground\/andrewscurtis\/ACData.html#combined:(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves])", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/ACData.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/ACData.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/ACData.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/ACData.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/ACData.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/ACData.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/ACData.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACData.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACData.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACData.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/ACData.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/ACData.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/ACData.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/ACData.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/ACData.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/ACData.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/andrewscurtis\/ACData.html", "kind" : "case class"}, {"name" : "provingground.andrewscurtis.ACElem", "shortDescription" : "An element in the Andrews-Curtis evolution,namely:* actor name,* number of loops,* rank* associated presentation* weight in distribution", "object" : "provingground\/andrewscurtis\/ACElem$.html", "members_object" : [{"label" : "fromSnap", "tail" : ": (Snap) ⇒ Vector[ACElem]", "member" : "provingground.andrewscurtis.ACElem.fromSnap", "link" : "provingground\/andrewscurtis\/ACElem$.html#fromSnap:provingground.andrewscurtis.ACElem.Snap=>scala.collection.immutable.Vector[provingground.andrewscurtis.ACElem]", "kind" : "val"}, {"label" : "toPresentation", "tail" : "(rank: Int, fdV: FiniteDistribution[Moves]): FiniteDistribution[Presentation]", "member" : "provingground.andrewscurtis.ACElem.toPresentation", "link" : "provingground\/andrewscurtis\/ACElem$.html#toPresentation(rank:Int,fdV:provingground.FiniteDistribution[provingground.andrewscurtis.Moves]):provingground.FiniteDistribution[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "Snap", "tail" : "", "member" : "provingground.andrewscurtis.ACElem.Snap", "link" : "provingground\/andrewscurtis\/ACElem$.html#Snap", "kind" : "object"}, {"label" : "Snap", "tail" : "", "member" : "provingground.andrewscurtis.ACElem.Snap", "link" : "provingground\/andrewscurtis\/ACElem$.html#Snap=provingground.learning.SnapShot[(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves]),provingground.andrewscurtis.Param]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/ACElem$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/ACElem$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/ACElem$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/ACElem$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/ACElem$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/ACElem$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/ACElem$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACElem$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACElem$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACElem$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/ACElem$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/ACElem$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/andrewscurtis\/ACElem$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/ACElem$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/ACElem$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/ACElem$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/ACElem$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/ACElem$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/ACElem$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"member" : "provingground.andrewscurtis.ACElem#<init>", "error" : "unsupported entity"}, {"label" : "loops", "tail" : ": Int", "member" : "provingground.andrewscurtis.ACElem.loops", "link" : "provingground\/andrewscurtis\/ACElem.html#loops:Int", "kind" : "val"}, {"label" : "weight", "tail" : ": Double", "member" : "provingground.andrewscurtis.ACElem.weight", "link" : "provingground\/andrewscurtis\/ACElem.html#weight:Double", "kind" : "val"}, {"label" : "pres", "tail" : ": Presentation", "member" : "provingground.andrewscurtis.ACElem.pres", "link" : "provingground\/andrewscurtis\/ACElem.html#pres:provingground.andrewscurtis.FreeGroups.Presentation", "kind" : "val"}, {"label" : "rank", "tail" : ": Int", "member" : "provingground.andrewscurtis.ACElem.rank", "link" : "provingground\/andrewscurtis\/ACElem.html#rank:Int", "kind" : "val"}, {"label" : "moves", "tail" : ": Moves", "member" : "provingground.andrewscurtis.ACElem.moves", "link" : "provingground\/andrewscurtis\/ACElem.html#moves:provingground.andrewscurtis.Moves", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "provingground.andrewscurtis.ACElem.name", "link" : "provingground\/andrewscurtis\/ACElem.html#name:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/ACElem.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/ACElem.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/ACElem.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/ACElem.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/ACElem.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/ACElem.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/ACElem.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACElem.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACElem.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACElem.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/ACElem.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/ACElem.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/ACElem.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/ACElem.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/ACElem.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/ACElem.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/andrewscurtis\/ACElem.html", "kind" : "case class"}, {"name" : "provingground.andrewscurtis.ACevolution", "shortDescription" : "", "object" : "provingground\/andrewscurtis\/ACevolution$.html", "members_object" : [{"label" : "pickleInit", "tail" : "(rank: Int): String", "member" : "provingground.andrewscurtis.ACevolution.pickleInit", "link" : "provingground\/andrewscurtis\/ACevolution$.html#pickleInit(rank:Int):String", "kind" : "def"}, {"label" : "pickleTriple", "tail" : "(mv: (FiniteDistribution[M], FiniteDistribution[V]), r: Int): String", "member" : "provingground.andrewscurtis.ACevolution.pickleTriple", "link" : "provingground\/andrewscurtis\/ACevolution$.html#pickleTriple(mv:(provingground.FiniteDistribution[provingground.andrewscurtis.ACevolution.M],provingground.FiniteDistribution[provingground.andrewscurtis.ACevolution.V]),r:Int):String", "kind" : "def"}, {"label" : "viewAll", "tail" : "(mv: (FiniteDistribution[M], FiniteDistribution[V]), r: Int): Unit", "member" : "provingground.andrewscurtis.ACevolution.viewAll", "link" : "provingground\/andrewscurtis\/ACevolution$.html#viewAll(mv:(provingground.FiniteDistribution[provingground.andrewscurtis.ACevolution.M],provingground.FiniteDistribution[provingground.andrewscurtis.ACevolution.V]),r:Int):Unit", "kind" : "def"}, {"label" : "presDist", "tail" : "(r: Int)(mv: (FiniteDistribution[M], FiniteDistribution[V])): FiniteDistribution[Presentation]", "member" : "provingground.andrewscurtis.ACevolution.presDist", "link" : "provingground\/andrewscurtis\/ACevolution$.html#presDist(r:Int)(mv:(provingground.FiniteDistribution[provingground.andrewscurtis.ACevolution.M],provingground.FiniteDistribution[provingground.andrewscurtis.ACevolution.V])):provingground.FiniteDistribution[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "step", "tail" : "(rank: Int): AdjDiffbleFunction[(FiniteDistribution[DiffStructure.M], FiniteDistribution[DiffStructure.V]), (FiniteDistribution[DiffStructure.M], FiniteDistribution[DiffStructure.V])]", "member" : "provingground.andrewscurtis.ACevolution.step", "link" : "provingground\/andrewscurtis\/ACevolution$.html#step(rank:Int):provingground.learning.AdjDiffbleFunction[(provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.M],provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.V]),(provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.M],provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.V])]", "kind" : "def"}, {"label" : "evolve", "tail" : "(rank: Int, steps: Int, initV: FiniteDistribution[V]): (FiniteDistribution[DiffStructure.M], FiniteDistribution[DiffStructure.V])", "member" : "provingground.andrewscurtis.ACevolution.evolve", "link" : "provingground\/andrewscurtis\/ACevolution$.html#evolve(rank:Int,steps:Int,initV:provingground.FiniteDistribution[provingground.andrewscurtis.ACevolution.V]):(provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.M],provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.V])", "kind" : "def"}, {"label" : "trivMoveSeq", "tail" : "(): FiniteDistribution[Moves]", "member" : "provingground.andrewscurtis.ACevolution.trivMoveSeq", "link" : "provingground\/andrewscurtis\/ACevolution$.html#trivMoveSeq:provingground.FiniteDistribution[provingground.andrewscurtis.Moves]", "kind" : "def"}, {"label" : "foldPair", "tail" : "(rank: Int): AdjDiffbleFunction[(FiniteDistribution[M], FiniteDistribution[V]), FiniteDistribution[P]]", "member" : "provingground.andrewscurtis.ACevolution.foldPair", "link" : "provingground\/andrewscurtis\/ACevolution$.html#foldPair(rank:Int):provingground.learning.AdjDiffbleFunction[(provingground.FiniteDistribution[provingground.andrewscurtis.ACevolution.M],provingground.FiniteDistribution[provingground.andrewscurtis.ACevolution.V]),provingground.FiniteDistribution[provingground.andrewscurtis.ACevolution.P]]", "kind" : "def"}, {"label" : "P", "tail" : "", "member" : "provingground.andrewscurtis.ACevolution.P", "link" : "provingground\/andrewscurtis\/ACevolution$.html#P=provingground.andrewscurtis.FreeGroups.Presentation", "kind" : "type"}, {"label" : "V", "tail" : "", "member" : "provingground.andrewscurtis.ACevolution.V", "link" : "provingground\/andrewscurtis\/ACevolution$.html#V=provingground.andrewscurtis.Moves", "kind" : "type"}, {"label" : "M", "tail" : "", "member" : "provingground.andrewscurtis.ACevolution.M", "link" : "provingground\/andrewscurtis\/ACevolution$.html#M=provingground.andrewscurtis.AtomicMove", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/ACevolution$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/ACevolution$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/ACevolution$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/ACevolution$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/ACevolution$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/ACevolution$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/ACevolution$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACevolution$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACevolution$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACevolution$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/ACevolution$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/ACevolution$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/andrewscurtis\/ACevolution$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/ACevolution$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/ACevolution$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/ACevolution$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/ACevolution$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/ACevolution$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/ACevolution$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.andrewscurtis.ACFileSaver", "shortDescription" : "", "object" : "provingground\/andrewscurtis\/ACFileSaver$.html", "members_class" : [{"label" : "save", "tail" : "(): (Snap) ⇒ Unit", "member" : "provingground.andrewscurtis.ACFileSaver.save", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#save:provingground.andrewscurtis.ACElem.Snap=>Unit", "kind" : "def"}, {"member" : "provingground.andrewscurtis.ACFileSaver#<init>", "error" : "unsupported entity"}, {"label" : "receive", "tail" : "(): PartialFunction[Any, Unit]", "member" : "provingground.andrewscurtis.FDSrc.receive", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#receive:PartialFunction[Any,Unit]", "kind" : "def"}, {"label" : "unhandled", "tail" : "(message: Any): Unit", "member" : "akka.actor.Actor.unhandled", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#unhandled(message:Any):Unit", "kind" : "def"}, {"label" : "postRestart", "tail" : "(reason: Throwable): Unit", "member" : "akka.actor.Actor.postRestart", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#postRestart(reason:Throwable):Unit", "kind" : "def"}, {"label" : "preRestart", "tail" : "(reason: Throwable, message: Option[Any]): Unit", "member" : "akka.actor.Actor.preRestart", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#preRestart(reason:Throwable,message:Option[Any]):Unit", "kind" : "def"}, {"label" : "postStop", "tail" : "(): Unit", "member" : "akka.actor.Actor.postStop", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#postStop():Unit", "kind" : "def"}, {"label" : "preStart", "tail" : "(): Unit", "member" : "akka.actor.Actor.preStart", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#preStart():Unit", "kind" : "def"}, {"label" : "supervisorStrategy", "tail" : "(): SupervisorStrategy", "member" : "akka.actor.Actor.supervisorStrategy", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#supervisorStrategy:akka.actor.SupervisorStrategy", "kind" : "def"}, {"label" : "aroundPostRestart", "tail" : "(reason: Throwable): Unit", "member" : "akka.actor.Actor.aroundPostRestart", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#aroundPostRestart(reason:Throwable):Unit", "kind" : "def"}, {"label" : "aroundPreRestart", "tail" : "(reason: Throwable, message: Option[Any]): Unit", "member" : "akka.actor.Actor.aroundPreRestart", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#aroundPreRestart(reason:Throwable,message:Option[Any]):Unit", "kind" : "def"}, {"label" : "aroundPostStop", "tail" : "(): Unit", "member" : "akka.actor.Actor.aroundPostStop", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#aroundPostStop():Unit", "kind" : "def"}, {"label" : "aroundPreStart", "tail" : "(): Unit", "member" : "akka.actor.Actor.aroundPreStart", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#aroundPreStart():Unit", "kind" : "def"}, {"label" : "aroundReceive", "tail" : "(receive: akka.actor.Actor.Receive, msg: Any): Unit", "member" : "akka.actor.Actor.aroundReceive", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#aroundReceive(receive:akka.actor.Actor.Receive,msg:Any):Unit", "kind" : "def"}, {"label" : "sender", "tail" : "(): ActorRef", "member" : "akka.actor.Actor.sender", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#sender():akka.actor.ActorRef", "kind" : "final def"}, {"label" : "self", "tail" : ": ActorRef", "member" : "akka.actor.Actor.self", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#self:akka.actor.ActorRef", "kind" : "implicit final val"}, {"label" : "context", "tail" : ": ActorContext", "member" : "akka.actor.Actor.context", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#context:akka.actor.ActorContext", "kind" : "implicit val"}, {"label" : "Receive", "tail" : "", "member" : "akka.actor.Actor.Receive", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#Receive=akka.actor.Actor.Receive", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/ACFileSaver.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/ACFileSaver.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "actorRef", "tail" : "(dir: String, rank: Int): ActorRef", "member" : "provingground.andrewscurtis.ACFileSaver.actorRef", "link" : "provingground\/andrewscurtis\/ACFileSaver$.html#actorRef(dir:String,rank:Int):akka.actor.ActorRef", "kind" : "def"}, {"label" : "props", "tail" : "(dir: String, rank: Int): Props", "member" : "provingground.andrewscurtis.ACFileSaver.props", "link" : "provingground\/andrewscurtis\/ACFileSaver$.html#props(dir:String,rank:Int):akka.actor.Props", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/ACFileSaver$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/ACFileSaver$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/ACFileSaver$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/ACFileSaver$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/ACFileSaver$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/ACFileSaver$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/ACFileSaver$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACFileSaver$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACFileSaver$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACFileSaver$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/ACFileSaver$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/ACFileSaver$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/andrewscurtis\/ACFileSaver$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/ACFileSaver$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/ACFileSaver$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/ACFileSaver$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/ACFileSaver$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/ACFileSaver$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/ACFileSaver$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/andrewscurtis\/ACFileSaver.html", "kind" : "class"}, {"name" : "provingground.andrewscurtis.ACFlow", "shortDescription" : "", "object" : "provingground\/andrewscurtis\/ACFlow$.html", "members_object" : [{"label" : "moveWeightsFlow", "tail" : "(): Repr[ACMoveWeights]", "member" : "provingground.andrewscurtis.ACFlow.moveWeightsFlow", "link" : "provingground\/andrewscurtis\/ACFlow$.html#moveWeightsFlow:provingground.andrewscurtis.ACFlow.fl.Repr[provingground.andrewscurtis.ACMoveWeights]", "kind" : "def"}, {"label" : "fdMFlow", "tail" : "(): Repr[(String, FiniteDistribution[AtomicMove])]", "member" : "provingground.andrewscurtis.ACFlow.fdMFlow", "link" : "provingground\/andrewscurtis\/ACFlow$.html#fdMFlow:provingground.andrewscurtis.ACFlow.fl.Repr[(String,provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove])]", "kind" : "def"}, {"label" : "elemsFlow", "tail" : "(): Repr[ACElem]", "member" : "provingground.andrewscurtis.ACFlow.elemsFlow", "link" : "provingground\/andrewscurtis\/ACFlow$.html#elemsFlow:provingground.andrewscurtis.ACFlow.fl.Repr[provingground.andrewscurtis.ACElem]", "kind" : "def"}, {"label" : "thmsFlow", "tail" : ": Repr[ACThm]", "member" : "provingground.andrewscurtis.ACFlow.thmsFlow", "link" : "provingground\/andrewscurtis\/ACFlow$.html#thmsFlow:provingground.andrewscurtis.ACFlow.fl.Repr[provingground.andrewscurtis.ACThm]", "kind" : "val"}, {"label" : "loopsFlow", "tail" : ": Repr[(String, Int)]", "member" : "provingground.andrewscurtis.ACFlow.loopsFlow", "link" : "provingground\/andrewscurtis\/ACFlow$.html#loopsFlow:provingground.andrewscurtis.ACFlow.fl.Repr[(String,Int)]", "kind" : "val"}, {"label" : "src", "tail" : ": Source[SnapShot[(FiniteDistribution[AtomicMove], FiniteDistribution[Moves]), Param], ActorRef]", "member" : "provingground.andrewscurtis.ACFlow.src", "link" : "provingground\/andrewscurtis\/ACFlow$.html#src:akka.stream.scaladsl.Source[provingground.learning.SnapShot[(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves]),provingground.andrewscurtis.Param],akka.actor.ActorRef]", "kind" : "val"}, {"label" : "fl", "tail" : ": Flow[Snap, Snap, NotUsed]", "member" : "provingground.andrewscurtis.ACFlow.fl", "link" : "provingground\/andrewscurtis\/ACFlow$.html#fl:akka.stream.scaladsl.Flow[provingground.andrewscurtis.ACElem.Snap,provingground.andrewscurtis.ACElem.Snap,akka.NotUsed]", "kind" : "val"}, {"label" : "mat", "tail" : ": ActorMaterializer", "member" : "provingground.andrewscurtis.ACFlow.mat", "link" : "provingground\/andrewscurtis\/ACFlow$.html#mat:akka.stream.ActorMaterializer", "kind" : "implicit val"}, {"label" : "system", "tail" : ": ActorSystem", "member" : "provingground.andrewscurtis.ACFlow.system", "link" : "provingground\/andrewscurtis\/ACFlow$.html#system:akka.actor.ActorSystem", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/ACFlow$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/ACFlow$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/ACFlow$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/ACFlow$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/ACFlow$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/ACFlow$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/ACFlow$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACFlow$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACFlow$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACFlow$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/ACFlow$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/ACFlow$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/andrewscurtis\/ACFlow$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/ACFlow$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/ACFlow$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/ACFlow$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/ACFlow$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/ACFlow$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/ACFlow$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.andrewscurtis.AcFlow", "shortDescription" : "", "object" : "provingground\/andrewscurtis\/AcFlow$.html", "members_object" : [{"label" : "moveWeightsFlow", "tail" : "(): Repr[ACMoveWeights]", "member" : "provingground.andrewscurtis.AcFlow.moveWeightsFlow", "link" : "provingground\/andrewscurtis\/AcFlow$.html#moveWeightsFlow:provingground.andrewscurtis.AcFlow.fl.Repr[provingground.andrewscurtis.ACMoveWeights]", "kind" : "def"}, {"label" : "fdMFlow", "tail" : "(): Repr[(String, FiniteDistribution[AtomicMove])]", "member" : "provingground.andrewscurtis.AcFlow.fdMFlow", "link" : "provingground\/andrewscurtis\/AcFlow$.html#fdMFlow:provingground.andrewscurtis.AcFlow.fl.Repr[(String,provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove])]", "kind" : "def"}, {"label" : "elemsFlow", "tail" : "(): Repr[ACElem]", "member" : "provingground.andrewscurtis.AcFlow.elemsFlow", "link" : "provingground\/andrewscurtis\/AcFlow$.html#elemsFlow:provingground.andrewscurtis.AcFlow.fl.Repr[provingground.andrewscurtis.ACElem]", "kind" : "def"}, {"label" : "thmsFlow", "tail" : ": Repr[ACThm]", "member" : "provingground.andrewscurtis.AcFlow.thmsFlow", "link" : "provingground\/andrewscurtis\/AcFlow$.html#thmsFlow:provingground.andrewscurtis.AcFlow.fl.Repr[provingground.andrewscurtis.ACThm]", "kind" : "val"}, {"label" : "loopsFlow", "tail" : ": Repr[(String, Int)]", "member" : "provingground.andrewscurtis.AcFlow.loopsFlow", "link" : "provingground\/andrewscurtis\/AcFlow$.html#loopsFlow:provingground.andrewscurtis.AcFlow.fl.Repr[(String,Int)]", "kind" : "val"}, {"label" : "src", "tail" : ": Source[SnapShot[(FiniteDistribution[AtomicMove], FiniteDistribution[Moves]), Param], ActorRef]", "member" : "provingground.andrewscurtis.AcFlow.src", "link" : "provingground\/andrewscurtis\/AcFlow$.html#src:akka.stream.scaladsl.Source[provingground.learning.SnapShot[(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves]),provingground.andrewscurtis.Param],akka.actor.ActorRef]", "kind" : "val"}, {"label" : "fl", "tail" : ": Flow[Snap, Snap, NotUsed]", "member" : "provingground.andrewscurtis.AcFlow.fl", "link" : "provingground\/andrewscurtis\/AcFlow$.html#fl:akka.stream.scaladsl.Flow[provingground.andrewscurtis.ACElem.Snap,provingground.andrewscurtis.ACElem.Snap,akka.NotUsed]", "kind" : "val"}, {"label" : "mat", "tail" : ": ActorMaterializer", "member" : "provingground.andrewscurtis.AcFlow.mat", "link" : "provingground\/andrewscurtis\/AcFlow$.html#mat:akka.stream.ActorMaterializer", "kind" : "implicit val"}, {"label" : "system", "tail" : ": ActorSystem", "member" : "provingground.andrewscurtis.AcFlow.system", "link" : "provingground\/andrewscurtis\/AcFlow$.html#system:akka.actor.ActorSystem", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/AcFlow$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/AcFlow$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/AcFlow$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/AcFlow$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/AcFlow$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/AcFlow$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/AcFlow$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/AcFlow$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/AcFlow$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/AcFlow$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/AcFlow$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/AcFlow$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/andrewscurtis\/AcFlow$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/AcFlow$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/AcFlow$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/AcFlow$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/AcFlow$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/AcFlow$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/AcFlow$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.andrewscurtis.ACFlowSaver", "shortDescription" : "", "object" : "provingground\/andrewscurtis\/ACFlowSaver$.html", "members_object" : [{"label" : "snapSource", "tail" : "(date: String): Source[Snap, NotUsed]", "member" : "provingground.andrewscurtis.ACFlowSaver.snapSource", "link" : "provingground\/andrewscurtis\/ACFlowSaver$.html#snapSource(date:String):akka.stream.scaladsl.Source[provingground.andrewscurtis.ACElem.Snap,akka.NotUsed]", "kind" : "def"}, {"label" : "snapStream", "tail" : "(date: String): Stream[Snap]", "member" : "provingground.andrewscurtis.ACFlowSaver.snapStream", "link" : "provingground\/andrewscurtis\/ACFlowSaver$.html#snapStream(date:String):scala.collection.immutable.Stream[provingground.andrewscurtis.ACElem.Snap]", "kind" : "def"}, {"label" : "snapSource", "tail" : "(date: String, batch: String): Source[String, NotUsed]", "member" : "provingground.andrewscurtis.ACFlowSaver.snapSource", "link" : "provingground\/andrewscurtis\/ACFlowSaver$.html#snapSource(date:String,batch:String):akka.stream.scaladsl.Source[String,akka.NotUsed]", "kind" : "def"}, {"label" : "snapSink", "tail" : ": Sink[Snap, Future[Done]]", "member" : "provingground.andrewscurtis.ACFlowSaver.snapSink", "link" : "provingground\/andrewscurtis\/ACFlowSaver$.html#snapSink:akka.stream.scaladsl.Sink[provingground.andrewscurtis.ACElem.Snap,scala.concurrent.Future[akka.Done]]", "kind" : "val"}, {"label" : "snapSave", "tail" : "(): (Snap) ⇒ Unit", "member" : "provingground.andrewscurtis.ACFlowSaver.snapSave", "link" : "provingground\/andrewscurtis\/ACFlowSaver$.html#snapSave:provingground.andrewscurtis.ACElem.Snap=>Unit", "kind" : "def"}, {"label" : "snapFile", "tail" : "(batch: Int): Path", "member" : "provingground.andrewscurtis.ACFlowSaver.snapFile", "link" : "provingground\/andrewscurtis\/ACFlowSaver$.html#snapFile(batch:Int):ammonite.ops.Path", "kind" : "def"}, {"label" : "snapd", "tail" : ": ThisType", "member" : "provingground.andrewscurtis.ACFlowSaver.snapd", "link" : "provingground\/andrewscurtis\/ACFlowSaver$.html#snapd:provingground.andrewscurtis.ACData.wd.ThisType", "kind" : "val"}, {"label" : "actorRef", "tail" : "(dir: String, rank: Int): ActorRef", "member" : "provingground.andrewscurtis.ACFlowSaver.actorRef", "link" : "provingground\/andrewscurtis\/ACFlowSaver$.html#actorRef(dir:String,rank:Int):akka.actor.ActorRef", "kind" : "def"}, {"label" : "fileSaver", "tail" : "(dir: String, rank: Int): Sink[Snap, Future[Done]]", "member" : "provingground.andrewscurtis.ACFlowSaver.fileSaver", "link" : "provingground\/andrewscurtis\/ACFlowSaver$.html#fileSaver(dir:String,rank:Int):akka.stream.scaladsl.Sink[provingground.andrewscurtis.ACElem.Snap,scala.concurrent.Future[akka.Done]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/ACFlowSaver$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/ACFlowSaver$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/ACFlowSaver$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/ACFlowSaver$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/ACFlowSaver$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/ACFlowSaver$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/ACFlowSaver$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACFlowSaver$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACFlowSaver$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACFlowSaver$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/ACFlowSaver$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/ACFlowSaver$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/andrewscurtis\/ACFlowSaver$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/ACFlowSaver$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/ACFlowSaver$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/ACFlowSaver$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/ACFlowSaver$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/ACFlowSaver$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/ACFlowSaver$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.andrewscurtis.ACLooper", "shortDescription" : "The loop for learning specialized to Andrews-Curtis moves", "object" : "provingground\/andrewscurtis\/ACLooper$.html", "members_class" : [{"member" : "provingground.andrewscurtis.ACLooper#<init>", "error" : "unsupported entity"}, {"label" : "receive", "tail" : "(): PartialFunction[Any, Unit]", "member" : "provingground.andrewscurtis.FDLooper.receive", "link" : "provingground\/andrewscurtis\/ACLooper.html#receive:PartialFunction[Any,Unit]", "kind" : "def"}, {"label" : "shift", "tail" : "(start: (FiniteDistribution[AtomicMove], FiniteDistribution[Moves]), strictness: Double, steps: Int, epsilon: Double): (FiniteDistribution[AtomicMove], FiniteDistribution[Moves])", "member" : "provingground.andrewscurtis.FDLooper.shift", "link" : "provingground\/andrewscurtis\/ACLooper.html#shift(start:X,strictness:Double,steps:Int,epsilon:Double):X", "kind" : "def"}, {"label" : "snapShot", "tail" : "(x: (FiniteDistribution[AtomicMove], FiniteDistribution[Moves])): SnapShot[(FiniteDistribution[AtomicMove], FiniteDistribution[Moves]), Param]", "member" : "provingground.andrewscurtis.FDLooper.snapShot", "link" : "provingground\/andrewscurtis\/ACLooper.html#snapShot(x:X):provingground.learning.SnapShot[X,P]", "kind" : "def"}, {"label" : "state", "tail" : ": (FiniteDistribution[AtomicMove], FiniteDistribution[Moves])", "member" : "provingground.andrewscurtis.FDLooper.state", "link" : "provingground\/andrewscurtis\/ACLooper.html#state:X", "kind" : "var"}, {"label" : "loops", "tail" : ": Int", "member" : "provingground.andrewscurtis.FDLooper.loops", "link" : "provingground\/andrewscurtis\/ACLooper.html#loops:Int", "kind" : "var"}, {"label" : "param", "tail" : ": Param", "member" : "provingground.andrewscurtis.FDLooper.param", "link" : "provingground\/andrewscurtis\/ACLooper.html#param:P", "kind" : "val"}, {"label" : "unhandled", "tail" : "(message: Any): Unit", "member" : "akka.actor.Actor.unhandled", "link" : "provingground\/andrewscurtis\/ACLooper.html#unhandled(message:Any):Unit", "kind" : "def"}, {"label" : "postRestart", "tail" : "(reason: Throwable): Unit", "member" : "akka.actor.Actor.postRestart", "link" : "provingground\/andrewscurtis\/ACLooper.html#postRestart(reason:Throwable):Unit", "kind" : "def"}, {"label" : "preRestart", "tail" : "(reason: Throwable, message: Option[Any]): Unit", "member" : "akka.actor.Actor.preRestart", "link" : "provingground\/andrewscurtis\/ACLooper.html#preRestart(reason:Throwable,message:Option[Any]):Unit", "kind" : "def"}, {"label" : "postStop", "tail" : "(): Unit", "member" : "akka.actor.Actor.postStop", "link" : "provingground\/andrewscurtis\/ACLooper.html#postStop():Unit", "kind" : "def"}, {"label" : "preStart", "tail" : "(): Unit", "member" : "akka.actor.Actor.preStart", "link" : "provingground\/andrewscurtis\/ACLooper.html#preStart():Unit", "kind" : "def"}, {"label" : "supervisorStrategy", "tail" : "(): SupervisorStrategy", "member" : "akka.actor.Actor.supervisorStrategy", "link" : "provingground\/andrewscurtis\/ACLooper.html#supervisorStrategy:akka.actor.SupervisorStrategy", "kind" : "def"}, {"label" : "aroundPostRestart", "tail" : "(reason: Throwable): Unit", "member" : "akka.actor.Actor.aroundPostRestart", "link" : "provingground\/andrewscurtis\/ACLooper.html#aroundPostRestart(reason:Throwable):Unit", "kind" : "def"}, {"label" : "aroundPreRestart", "tail" : "(reason: Throwable, message: Option[Any]): Unit", "member" : "akka.actor.Actor.aroundPreRestart", "link" : "provingground\/andrewscurtis\/ACLooper.html#aroundPreRestart(reason:Throwable,message:Option[Any]):Unit", "kind" : "def"}, {"label" : "aroundPostStop", "tail" : "(): Unit", "member" : "akka.actor.Actor.aroundPostStop", "link" : "provingground\/andrewscurtis\/ACLooper.html#aroundPostStop():Unit", "kind" : "def"}, {"label" : "aroundPreStart", "tail" : "(): Unit", "member" : "akka.actor.Actor.aroundPreStart", "link" : "provingground\/andrewscurtis\/ACLooper.html#aroundPreStart():Unit", "kind" : "def"}, {"label" : "aroundReceive", "tail" : "(receive: akka.actor.Actor.Receive, msg: Any): Unit", "member" : "akka.actor.Actor.aroundReceive", "link" : "provingground\/andrewscurtis\/ACLooper.html#aroundReceive(receive:akka.actor.Actor.Receive,msg:Any):Unit", "kind" : "def"}, {"label" : "sender", "tail" : "(): ActorRef", "member" : "akka.actor.Actor.sender", "link" : "provingground\/andrewscurtis\/ACLooper.html#sender():akka.actor.ActorRef", "kind" : "final def"}, {"label" : "self", "tail" : ": ActorRef", "member" : "akka.actor.Actor.self", "link" : "provingground\/andrewscurtis\/ACLooper.html#self:akka.actor.ActorRef", "kind" : "implicit final val"}, {"label" : "context", "tail" : ": ActorContext", "member" : "akka.actor.Actor.context", "link" : "provingground\/andrewscurtis\/ACLooper.html#context:akka.actor.ActorContext", "kind" : "implicit val"}, {"label" : "Receive", "tail" : "", "member" : "akka.actor.Actor.Receive", "link" : "provingground\/andrewscurtis\/ACLooper.html#Receive=akka.actor.Actor.Receive", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/ACLooper.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/ACLooper.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/ACLooper.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/ACLooper.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/ACLooper.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/ACLooper.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/ACLooper.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACLooper.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACLooper.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACLooper.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/ACLooper.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/ACLooper.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/andrewscurtis\/ACLooper.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/ACLooper.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/ACLooper.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/ACLooper.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/ACLooper.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/ACLooper.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/ACLooper.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "initState", "tail" : "(rank: Int): (FiniteDistribution[AtomicMove], FiniteDistribution[Moves])", "member" : "provingground.andrewscurtis.ACLooper.initState", "link" : "provingground\/andrewscurtis\/ACLooper$.html#initState(rank:Int):(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves])", "kind" : "def"}, {"label" : "smoothSpawn", "tail" : "(name: String, rank: Int, size: Int, wrdCntn: Double, init: (FiniteDistribution[AtomicMove], FiniteDistribution[Moves]), srcRef: ActorRef, param: Param): ActorRef", "member" : "provingground.andrewscurtis.ACLooper.smoothSpawn", "link" : "provingground\/andrewscurtis\/ACLooper$.html#smoothSpawn(name:String,rank:Int,size:Int,wrdCntn:Double,init:(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves]),srcRef:akka.actor.ActorRef,param:provingground.andrewscurtis.Param):akka.actor.ActorRef", "kind" : "def"}, {"label" : "spawn", "tail" : "(name: String, rank: Int, size: Int, wrdCntn: Double, init: (FiniteDistribution[AtomicMove], FiniteDistribution[Moves]), srcRef: ActorRef, param: Param): ActorRef", "member" : "provingground.andrewscurtis.ACLooper.spawn", "link" : "provingground\/andrewscurtis\/ACLooper$.html#spawn(name:String,rank:Int,size:Int,wrdCntn:Double,init:(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves]),srcRef:akka.actor.ActorRef,param:provingground.andrewscurtis.Param):akka.actor.ActorRef", "kind" : "def"}, {"label" : "smoothProps", "tail" : "(rank: Int, size: Int, wrdCntn: Double, init: (FiniteDistribution[AtomicMove], FiniteDistribution[Moves]), srcRef: ActorRef, param: Param): Props", "member" : "provingground.andrewscurtis.ACLooper.smoothProps", "link" : "provingground\/andrewscurtis\/ACLooper$.html#smoothProps(rank:Int,size:Int,wrdCntn:Double,init:(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves]),srcRef:akka.actor.ActorRef,param:provingground.andrewscurtis.Param):akka.actor.Props", "kind" : "def"}, {"label" : "props", "tail" : "(rank: Int, size: Int, wrdCntn: Double, init: (FiniteDistribution[AtomicMove], FiniteDistribution[Moves]), srcRef: ActorRef, param: Param): Props", "member" : "provingground.andrewscurtis.ACLooper.props", "link" : "provingground\/andrewscurtis\/ACLooper$.html#props(rank:Int,size:Int,wrdCntn:Double,init:(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves]),srcRef:akka.actor.ActorRef,param:provingground.andrewscurtis.Param):akka.actor.Props", "kind" : "def"}, {"label" : "padSmoothback", "tail" : "(rank: Int, wrdCntn: Double): (Double) ⇒ ((FiniteDistribution[AtomicMove], FiniteDistribution[Moves])) ⇒ ((FiniteDistribution[AtomicMove], FiniteDistribution[Moves])) ⇒ (FiniteDistribution[AtomicMove], FiniteDistribution[Moves])", "member" : "provingground.andrewscurtis.ACLooper.padSmoothback", "link" : "provingground\/andrewscurtis\/ACLooper$.html#padSmoothback(rank:Int,wrdCntn:Double):Double=>(((provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves]))=>((provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves]))=>(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves]))", "kind" : "def"}, {"label" : "padFeedback", "tail" : "(rank: Int, wrdCntn: Double): (Double) ⇒ ((FiniteDistribution[AtomicMove], FiniteDistribution[Moves])) ⇒ ((FiniteDistribution[AtomicMove], FiniteDistribution[Moves])) ⇒ (FiniteDistribution[AtomicMove], FiniteDistribution[Moves])", "member" : "provingground.andrewscurtis.ACLooper.padFeedback", "link" : "provingground\/andrewscurtis\/ACLooper$.html#padFeedback(rank:Int,wrdCntn:Double):Double=>(((provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves]))=>((provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves]))=>(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves]))", "kind" : "def"}, {"label" : "smoothFeedback", "tail" : "(rank: Int, wrdCntn: Double, strictness: Double): ((FiniteDistribution[AtomicMove], FiniteDistribution[Moves])) ⇒ (FiniteDistribution[AtomicMove], FiniteDistribution[Moves])", "member" : "provingground.andrewscurtis.ACLooper.smoothFeedback", "link" : "provingground\/andrewscurtis\/ACLooper$.html#smoothFeedback(rank:Int,wrdCntn:Double,strictness:Double):((provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves]))=>(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves])", "kind" : "def"}, {"label" : "feedback", "tail" : "(rank: Int, wrdCntn: Double, strictness: Double): ((FiniteDistribution[AtomicMove], FiniteDistribution[Moves])) ⇒ (FiniteDistribution[AtomicMove], FiniteDistribution[Moves])", "member" : "provingground.andrewscurtis.ACLooper.feedback", "link" : "provingground\/andrewscurtis\/ACLooper$.html#feedback(rank:Int,wrdCntn:Double,strictness:Double):((provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves]))=>(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves])", "kind" : "def"}, {"label" : "normalize", "tail" : ": ((FiniteDistribution[AtomicMove], FiniteDistribution[Moves])) ⇒ (FiniteDistribution[AtomicMove], FiniteDistribution[Moves])", "member" : "provingground.andrewscurtis.ACLooper.normalize", "link" : "provingground\/andrewscurtis\/ACLooper$.html#normalize:((provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves]))=>(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves])", "kind" : "val"}, {"label" : "dyn", "tail" : "(rank: Int, size: Int): AdjDiffbleFunction[(FiniteDistribution[M], FiniteDistribution[V]), (FiniteDistribution[M], FiniteDistribution[V])]", "member" : "provingground.andrewscurtis.ACLooper.dyn", "link" : "provingground\/andrewscurtis\/ACLooper$.html#dyn(rank:Int,size:Int):provingground.learning.AdjDiffbleFunction[(provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.M],provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.V]),(provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.M],provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.V])]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/ACLooper$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/ACLooper$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/ACLooper$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/ACLooper$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/ACLooper$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/ACLooper$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/ACLooper$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACLooper$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACLooper$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACLooper$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/ACLooper$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/ACLooper$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/andrewscurtis\/ACLooper$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/ACLooper$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/ACLooper$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/ACLooper$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/ACLooper$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/ACLooper$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/ACLooper$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/andrewscurtis\/ACLooper.html", "kind" : "class"}, {"name" : "provingground.andrewscurtis.ACMongo", "shortDescription" : "", "object" : "provingground\/andrewscurtis\/ACMongo$.html", "members_object" : [{"label" : "thmsCSV", "tail" : "(name: String, dir: String): Future[Unit]", "member" : "provingground.andrewscurtis.ACMongo.thmsCSV", "link" : "provingground\/andrewscurtis\/ACMongo$.html#thmsCSV(name:String,dir:String):scala.concurrent.Future[Unit]", "kind" : "def"}, {"label" : "thmSaveCSV", "tail" : "(thms: Vector[ACThm])(name: String, loops: Int, dir: String): Unit", "member" : "provingground.andrewscurtis.ACMongo.thmSaveCSV", "link" : "provingground\/andrewscurtis\/ACMongo$.html#thmSaveCSV(thms:Vector[provingground.andrewscurtis.ACThm])(name:String,loops:Int,dir:String):Unit", "kind" : "def"}, {"label" : "thmView", "tail" : "(thms: Vector[ACThm])(thm: Presentation, name: String, loops: Int): String", "member" : "provingground.andrewscurtis.ACMongo.thmView", "link" : "provingground\/andrewscurtis\/ACMongo$.html#thmView(thms:Vector[provingground.andrewscurtis.ACThm])(thm:provingground.andrewscurtis.FreeGroups.Presentation,name:String,loops:Int):String", "kind" : "def"}, {"label" : "thmSupp", "tail" : "(name: String): Future[Vector[Presentation]]", "member" : "provingground.andrewscurtis.ACMongo.thmSupp", "link" : "provingground\/andrewscurtis\/ACMongo$.html#thmSupp(name:String):scala.concurrent.Future[Vector[provingground.andrewscurtis.FreeGroups.Presentation]]", "kind" : "def"}, {"label" : "allThmWeights", "tail" : "(name: String): Future[Vector[ACThm]]", "member" : "provingground.andrewscurtis.ACMongo.allThmWeights", "link" : "provingground\/andrewscurtis\/ACMongo$.html#allThmWeights(name:String):scala.concurrent.Future[Vector[provingground.andrewscurtis.ACThm]]", "kind" : "def"}, {"label" : "thmWeights", "tail" : "(thm: Presentation, name: String): Future[Stream[ACThm]]", "member" : "provingground.andrewscurtis.ACMongo.thmWeights", "link" : "provingground\/andrewscurtis\/ACMongo$.html#thmWeights(thm:provingground.andrewscurtis.FreeGroups.Presentation,name:String):scala.concurrent.Future[Stream[provingground.andrewscurtis.ACThm]]", "kind" : "def"}, {"label" : "getFutState", "tail" : "(name: String): Future[(FiniteDistribution[AtomicMove], FiniteDistribution[Moves])]", "member" : "provingground.andrewscurtis.ACMongo.getFutState", "link" : "provingground\/andrewscurtis\/ACMongo$.html#getFutState(name:String):scala.concurrent.Future[(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves])]", "kind" : "def"}, {"label" : "getFutStateDefault", "tail" : "(name: String, rank: Int): Future[(FiniteDistribution[AtomicMove], FiniteDistribution[Moves])]", "member" : "provingground.andrewscurtis.ACMongo.getFutStateDefault", "link" : "provingground\/andrewscurtis\/ACMongo$.html#getFutStateDefault(name:String,rank:Int):scala.concurrent.Future[(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves])]", "kind" : "def"}, {"label" : "getFutOptState", "tail" : "(name: String): Future[Option[(FiniteDistribution[AtomicMove], FiniteDistribution[Moves])]]", "member" : "provingground.andrewscurtis.ACMongo.getFutOptState", "link" : "provingground\/andrewscurtis\/ACMongo$.html#getFutOptState(name:String):scala.concurrent.Future[Option[(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves])]]", "kind" : "def"}, {"label" : "getFutOptThms", "tail" : "(name: String): Future[Option[FiniteDistribution[Presentation]]]", "member" : "provingground.andrewscurtis.ACMongo.getFutOptThms", "link" : "provingground\/andrewscurtis\/ACMongo$.html#getFutOptThms(name:String):scala.concurrent.Future[Option[provingground.FiniteDistribution[provingground.andrewscurtis.FreeGroups.Presentation]]]", "kind" : "def"}, {"label" : "getFutOptFDV", "tail" : "(name: String): Future[Option[FiniteDistribution[Moves]]]", "member" : "provingground.andrewscurtis.ACMongo.getFutOptFDV", "link" : "provingground\/andrewscurtis\/ACMongo$.html#getFutOptFDV(name:String):scala.concurrent.Future[Option[provingground.FiniteDistribution[provingground.andrewscurtis.Moves]]]", "kind" : "def"}, {"label" : "collect", "tail" : "(xs: Seq[Future[Option[T]]]): Future[Seq[T]]", "member" : "provingground.andrewscurtis.ACMongo.collect", "link" : "provingground\/andrewscurtis\/ACMongo$.html#collect[T](xs:Seq[scala.concurrent.Future[Option[T]]]):scala.concurrent.Future[Seq[T]]", "kind" : "def"}, {"label" : "FutOptMonad", "tail" : "", "member" : "provingground.andrewscurtis.ACMongo.FutOptMonad", "link" : "provingground\/andrewscurtis\/ACMongo$.html#FutOptMonad[A]extendsAnyRef", "kind" : "implicit class"}, {"label" : "mapFutOpt", "tail" : "(futOpt: Future[Option[S]])(fn: (S) ⇒ T): Future[Option[T]]", "member" : "provingground.andrewscurtis.ACMongo.mapFutOpt", "link" : "provingground\/andrewscurtis\/ACMongo$.html#mapFutOpt[S,T](futOpt:scala.concurrent.Future[Option[S]])(fn:S=>T):scala.concurrent.Future[Option[T]]", "kind" : "def"}, {"label" : "getFutOptFDM", "tail" : "(name: String): Future[Option[FiniteDistribution[AtomicMove]]]", "member" : "provingground.andrewscurtis.ACMongo.getFutOptFDM", "link" : "provingground\/andrewscurtis\/ACMongo$.html#getFutOptFDM(name:String):scala.concurrent.Future[Option[provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove]]]", "kind" : "def"}, {"label" : "getFutOptThmElems", "tail" : "(name: String): Future[Option[Vector[ACThm]]]", "member" : "provingground.andrewscurtis.ACMongo.getFutOptThmElems", "link" : "provingground\/andrewscurtis\/ACMongo$.html#getFutOptThmElems(name:String):scala.concurrent.Future[Option[Vector[provingground.andrewscurtis.ACThm]]]", "kind" : "def"}, {"label" : "getFutOptElems", "tail" : "(name: String): Future[Option[Vector[ACElem]]]", "member" : "provingground.andrewscurtis.ACMongo.getFutOptElems", "link" : "provingground\/andrewscurtis\/ACMongo$.html#getFutOptElems(name:String):scala.concurrent.Future[Option[Vector[provingground.andrewscurtis.ACElem]]]", "kind" : "def"}, {"label" : "getFutOptLoops", "tail" : "(name: String): Future[Option[Int]]", "member" : "provingground.andrewscurtis.ACMongo.getFutOptLoops", "link" : "provingground\/andrewscurtis\/ACMongo$.html#getFutOptLoops(name:String):scala.concurrent.Future[Option[Int]]", "kind" : "def"}, {"label" : "getFutStartData", "tail" : "(): Future[Vector[StartData]]", "member" : "provingground.andrewscurtis.ACMongo.getFutStartData", "link" : "provingground\/andrewscurtis\/ACMongo$.html#getFutStartData():scala.concurrent.Future[scala.collection.immutable.Vector[provingground.andrewscurtis.StartData]]", "kind" : "def"}, {"label" : "getFutActors", "tail" : "(): Future[Vector[String]]", "member" : "provingground.andrewscurtis.ACMongo.getFutActors", "link" : "provingground\/andrewscurtis\/ACMongo$.html#getFutActors():scala.concurrent.Future[scala.collection.immutable.Vector[String]]", "kind" : "def"}, {"label" : "getFutOptFDMStep", "tail" : "(name: String, loops: Int): Future[Option[FiniteDistribution[AtomicMove]]]", "member" : "provingground.andrewscurtis.ACMongo.getFutOptFDMStep", "link" : "provingground\/andrewscurtis\/ACMongo$.html#getFutOptFDMStep(name:String,loops:Int):scala.concurrent.Future[Option[provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove]]]", "kind" : "def"}, {"label" : "getFutThmElemsStep", "tail" : "(name: String, loops: Int): Future[Vector[ACThm]]", "member" : "provingground.andrewscurtis.ACMongo.getFutThmElemsStep", "link" : "provingground\/andrewscurtis\/ACMongo$.html#getFutThmElemsStep(name:String,loops:Int):scala.concurrent.Future[Vector[provingground.andrewscurtis.ACThm]]", "kind" : "def"}, {"label" : "getFutElemsStep", "tail" : "(name: String, loops: Int): Future[Vector[ACElem]]", "member" : "provingground.andrewscurtis.ACMongo.getFutElemsStep", "link" : "provingground\/andrewscurtis\/ACMongo$.html#getFutElemsStep(name:String,loops:Int):scala.concurrent.Future[Vector[provingground.andrewscurtis.ACElem]]", "kind" : "def"}, {"label" : "updateLoops", "tail" : "(name: String, loops: Int): Unit", "member" : "provingground.andrewscurtis.ACMongo.updateLoops", "link" : "provingground\/andrewscurtis\/ACMongo$.html#updateLoops(name:String,loops:Int):Unit", "kind" : "def"}, {"label" : "addMoveWeight", "tail" : "(wts: ACMoveWeights): Unit", "member" : "provingground.andrewscurtis.ACMongo.addMoveWeight", "link" : "provingground\/andrewscurtis\/ACMongo$.html#addMoveWeight(wts:provingground.andrewscurtis.ACMoveWeights):Unit", "kind" : "def"}, {"label" : "addThm", "tail" : "(thm: ACThm): Unit", "member" : "provingground.andrewscurtis.ACMongo.addThm", "link" : "provingground\/andrewscurtis\/ACMongo$.html#addThm(thm:provingground.andrewscurtis.ACThm):Unit", "kind" : "def"}, {"label" : "addElem", "tail" : "(el: ACElem): Unit", "member" : "provingground.andrewscurtis.ACMongo.addElem", "link" : "provingground\/andrewscurtis\/ACMongo$.html#addElem(el:provingground.andrewscurtis.ACElem):Unit", "kind" : "def"}, {"label" : "MoveWeightReader", "tail" : "", "member" : "provingground.andrewscurtis.ACMongo.MoveWeightReader", "link" : "provingground\/andrewscurtis\/ACMongo$.html#MoveWeightReader", "kind" : "implicit object"}, {"label" : "MoveWeightWriter", "tail" : "", "member" : "provingground.andrewscurtis.ACMongo.MoveWeightWriter", "link" : "provingground\/andrewscurtis\/ACMongo$.html#MoveWeightWriter", "kind" : "implicit object"}, {"label" : "ThmReader", "tail" : "", "member" : "provingground.andrewscurtis.ACMongo.ThmReader", "link" : "provingground\/andrewscurtis\/ACMongo$.html#ThmReader", "kind" : "implicit object"}, {"label" : "ThmWriter", "tail" : "", "member" : "provingground.andrewscurtis.ACMongo.ThmWriter", "link" : "provingground\/andrewscurtis\/ACMongo$.html#ThmWriter", "kind" : "implicit object"}, {"label" : "ElemsReader", "tail" : "", "member" : "provingground.andrewscurtis.ACMongo.ElemsReader", "link" : "provingground\/andrewscurtis\/ACMongo$.html#ElemsReader", "kind" : "implicit object"}, {"label" : "ElemsWriter", "tail" : "", "member" : "provingground.andrewscurtis.ACMongo.ElemsWriter", "link" : "provingground\/andrewscurtis\/ACMongo$.html#ElemsWriter", "kind" : "implicit object"}, {"label" : "moveWeightsDB", "tail" : ": BSONCollection", "member" : "provingground.andrewscurtis.ACMongo.moveWeightsDB", "link" : "provingground\/andrewscurtis\/ACMongo$.html#moveWeightsDB:reactivemongo.api.collections.bson.BSONCollection", "kind" : "lazy val"}, {"label" : "actorsDB", "tail" : ": BSONCollection", "member" : "provingground.andrewscurtis.ACMongo.actorsDB", "link" : "provingground\/andrewscurtis\/ACMongo$.html#actorsDB:reactivemongo.api.collections.bson.BSONCollection", "kind" : "lazy val"}, {"label" : "thmsPresIndex", "tail" : ": Index", "member" : "provingground.andrewscurtis.ACMongo.thmsPresIndex", "link" : "provingground\/andrewscurtis\/ACMongo$.html#thmsPresIndex:reactivemongo.api.indexes.Index", "kind" : "val"}, {"label" : "thmsInd", "tail" : ": CollectionIndexesManager", "member" : "provingground.andrewscurtis.ACMongo.thmsInd", "link" : "provingground\/andrewscurtis\/ACMongo$.html#thmsInd:reactivemongo.api.indexes.CollectionIndexesManager", "kind" : "val"}, {"label" : "thmsDB", "tail" : ": BSONCollection", "member" : "provingground.andrewscurtis.ACMongo.thmsDB", "link" : "provingground\/andrewscurtis\/ACMongo$.html#thmsDB:reactivemongo.api.collections.bson.BSONCollection", "kind" : "lazy val"}, {"label" : "index", "tail" : ": Index", "member" : "provingground.andrewscurtis.ACMongo.index", "link" : "provingground\/andrewscurtis\/ACMongo$.html#index:reactivemongo.api.indexes.Index", "kind" : "val"}, {"label" : "elemsInd", "tail" : ": CollectionIndexesManager", "member" : "provingground.andrewscurtis.ACMongo.elemsInd", "link" : "provingground\/andrewscurtis\/ACMongo$.html#elemsInd:reactivemongo.api.indexes.CollectionIndexesManager", "kind" : "val"}, {"label" : "elemsDB", "tail" : ": BSONCollection", "member" : "provingground.andrewscurtis.ACMongo.elemsDB", "link" : "provingground\/andrewscurtis\/ACMongo$.html#elemsDB:reactivemongo.api.collections.bson.BSONCollection", "kind" : "lazy val"}, {"label" : "db", "tail" : ": DefaultDB", "member" : "provingground.andrewscurtis.ACMongo.db", "link" : "provingground\/andrewscurtis\/ACMongo$.html#db:reactivemongo.api.DefaultDB", "kind" : "implicit lazy val"}, {"label" : "connection", "tail" : ": MongoConnection", "member" : "provingground.andrewscurtis.ACMongo.connection", "link" : "provingground\/andrewscurtis\/ACMongo$.html#connection:reactivemongo.api.MongoConnection", "kind" : "lazy val"}, {"label" : "driver", "tail" : ": MongoDriver", "member" : "provingground.andrewscurtis.ACMongo.driver", "link" : "provingground\/andrewscurtis\/ACMongo$.html#driver:reactivemongo.api.MongoDriver", "kind" : "lazy val"}, {"label" : "writerRef", "tail" : "(interface: Sink[Snap, M]): ActorRef", "member" : "provingground.andrewscurtis.ACWriter.writerRef", "link" : "provingground\/andrewscurtis\/ACMongo$.html#writerRef[M](interface:akka.stream.scaladsl.Sink[provingground.andrewscurtis.ACElem.Snap,M]):akka.actor.ActorRef", "kind" : "def"}, {"label" : "writerFlow", "tail" : ": Flow[SnapShot[(FiniteDistribution[AtomicMove], FiniteDistribution[Moves]), Param], SnapShot[(FiniteDistribution[AtomicMove], FiniteDistribution[Moves]), Param], NotUsed]", "member" : "provingground.andrewscurtis.ACWriter.writerFlow", "link" : "provingground\/andrewscurtis\/ACMongo$.html#writerFlow:akka.stream.scaladsl.Flow[provingground.learning.SnapShot[(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves]),provingground.andrewscurtis.Param],provingground.learning.SnapShot[(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves]),provingground.andrewscurtis.Param],akka.NotUsed]", "kind" : "val"}, {"label" : "loopsSink", "tail" : ": Sink[Snap, NotUsed]", "member" : "provingground.andrewscurtis.ACWriter.loopsSink", "link" : "provingground\/andrewscurtis\/ACMongo$.html#loopsSink:akka.stream.scaladsl.Sink[provingground.andrewscurtis.ACElem.Snap,akka.NotUsed]", "kind" : "val"}, {"label" : "moveWeightsSink", "tail" : ": Sink[Snap, NotUsed]", "member" : "provingground.andrewscurtis.ACWriter.moveWeightsSink", "link" : "provingground\/andrewscurtis\/ACMongo$.html#moveWeightsSink:akka.stream.scaladsl.Sink[provingground.andrewscurtis.ACElem.Snap,akka.NotUsed]", "kind" : "val"}, {"label" : "thmsSink", "tail" : ": Sink[Snap, NotUsed]", "member" : "provingground.andrewscurtis.ACWriter.thmsSink", "link" : "provingground\/andrewscurtis\/ACMongo$.html#thmsSink:akka.stream.scaladsl.Sink[provingground.andrewscurtis.ACElem.Snap,akka.NotUsed]", "kind" : "val"}, {"label" : "elemsSink", "tail" : ": Sink[Snap, NotUsed]", "member" : "provingground.andrewscurtis.ACWriter.elemsSink", "link" : "provingground\/andrewscurtis\/ACMongo$.html#elemsSink:akka.stream.scaladsl.Sink[provingground.andrewscurtis.ACElem.Snap,akka.NotUsed]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/ACMongo$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/ACMongo$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/ACMongo$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/ACMongo$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/ACMongo$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/ACMongo$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/ACMongo$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACMongo$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACMongo$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACMongo$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/ACMongo$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/ACMongo$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/andrewscurtis\/ACMongo$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/ACMongo$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/ACMongo$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/ACMongo$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/ACMongo$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/ACMongo$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/ACMongo$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.andrewscurtis.ACMoveWeights", "shortDescription" : "", "members_case class" : [{"member" : "provingground.andrewscurtis.ACMoveWeights#<init>", "error" : "unsupported entity"}, {"label" : "loops", "tail" : ": Int", "member" : "provingground.andrewscurtis.ACMoveWeights.loops", "link" : "provingground\/andrewscurtis\/ACMoveWeights.html#loops:Int", "kind" : "val"}, {"label" : "fdM", "tail" : ": FiniteDistribution[AtomicMove]", "member" : "provingground.andrewscurtis.ACMoveWeights.fdM", "link" : "provingground\/andrewscurtis\/ACMoveWeights.html#fdM:provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove]", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "provingground.andrewscurtis.ACMoveWeights.name", "link" : "provingground\/andrewscurtis\/ACMoveWeights.html#name:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/ACMoveWeights.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/ACMoveWeights.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/ACMoveWeights.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/ACMoveWeights.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/ACMoveWeights.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/ACMoveWeights.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/ACMoveWeights.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACMoveWeights.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACMoveWeights.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACMoveWeights.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/ACMoveWeights.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/ACMoveWeights.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/ACMoveWeights.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/ACMoveWeights.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/ACMoveWeights.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/ACMoveWeights.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/andrewscurtis\/ACMoveWeights.html", "kind" : "case class"}, {"name" : "provingground.andrewscurtis.ACPortableResults", "shortDescription" : "", "members_case class" : [{"member" : "provingground.andrewscurtis.ACPortableResults#<init>", "error" : "unsupported entity"}, {"label" : "paths", "tail" : ": Map[String, Stream[(FiniteDistribution[AtomicMove], FiniteDistribution[Moves])]]", "member" : "provingground.andrewscurtis.ACPortableResults.paths", "link" : "provingground\/andrewscurtis\/ACPortableResults.html#paths:Map[String,Stream[(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves])]]", "kind" : "val"}, {"label" : "states", "tail" : ": Map[String, (FiniteDistribution[AtomicMove], FiniteDistribution[Moves])]", "member" : "provingground.andrewscurtis.ACresults.states", "link" : "provingground\/andrewscurtis\/ACPortableResults.html#states:Map[String,(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves])]", "kind" : "lazy val"}, {"label" : "sizes", "tail" : "(): Map[String, Int]", "member" : "provingground.andrewscurtis.ACresults.sizes", "link" : "provingground\/andrewscurtis\/ACPortableResults.html#sizes:scala.collection.immutable.Map[String,Int]", "kind" : "def"}, {"label" : "probVec", "tail" : "(name: String, rank: Int)(p: Presentation): Stream[Double]", "member" : "provingground.andrewscurtis.ACresults.probVec", "link" : "provingground\/andrewscurtis\/ACPortableResults.html#probVec(name:String,rank:Int)(p:provingground.andrewscurtis.FreeGroups.Presentation):scala.collection.immutable.Stream[Double]", "kind" : "def"}, {"label" : "thmSupp", "tail" : "(name: String, rank: Int): Vector[Presentation]", "member" : "provingground.andrewscurtis.ACresults.thmSupp", "link" : "provingground\/andrewscurtis\/ACPortableResults.html#thmSupp(name:String,rank:Int):Vector[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "thmVec", "tail" : "(name: String, rank: Int): Stream[FiniteDistribution[Presentation]]", "member" : "provingground.andrewscurtis.ACresults.thmVec", "link" : "provingground\/andrewscurtis\/ACPortableResults.html#thmVec(name:String,rank:Int):scala.collection.immutable.Stream[provingground.FiniteDistribution[provingground.andrewscurtis.FreeGroups.Presentation]]", "kind" : "def"}, {"label" : "names", "tail" : "(): List[String]", "member" : "provingground.andrewscurtis.ACresults.names", "link" : "provingground\/andrewscurtis\/ACPortableResults.html#names:List[String]", "kind" : "def"}, {"label" : "thms", "tail" : "(rank: Int): FiniteDistribution[Presentation]", "member" : "provingground.andrewscurtis.ACStates.thms", "link" : "provingground\/andrewscurtis\/ACPortableResults.html#thms(rank:Int):provingground.FiniteDistribution[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "moveWeights", "tail" : "(): FiniteDistribution[AtomicMove]", "member" : "provingground.andrewscurtis.ACStates.moveWeights", "link" : "provingground\/andrewscurtis\/ACPortableResults.html#moveWeights:provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove]", "kind" : "def"}, {"label" : "proofs", "tail" : "(): FiniteDistribution[Moves]", "member" : "provingground.andrewscurtis.ACStates.proofs", "link" : "provingground\/andrewscurtis\/ACPortableResults.html#proofs:provingground.FiniteDistribution[provingground.andrewscurtis.Moves]", "kind" : "def"}, {"label" : "blended", "tail" : "(): (FiniteDistribution[AtomicMove], FiniteDistribution[Moves])", "member" : "provingground.andrewscurtis.ACStates.blended", "link" : "provingground\/andrewscurtis\/ACPortableResults.html#blended:(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves])", "kind" : "def"}, {"label" : "combined", "tail" : "(): (FiniteDistribution[AtomicMove], FiniteDistribution[Moves])", "member" : "provingground.andrewscurtis.ACStates.combined", "link" : "provingground\/andrewscurtis\/ACPortableResults.html#combined:(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves])", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/ACPortableResults.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/ACPortableResults.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/ACPortableResults.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/ACPortableResults.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/ACPortableResults.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/ACPortableResults.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/ACPortableResults.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACPortableResults.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACPortableResults.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACPortableResults.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/ACPortableResults.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/ACPortableResults.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/ACPortableResults.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/ACPortableResults.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/ACPortableResults.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/ACPortableResults.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/andrewscurtis\/ACPortableResults.html", "kind" : "case class"}, {"name" : "provingground.andrewscurtis.ACresults", "shortDescription" : "", "object" : "provingground\/andrewscurtis\/ACresults$.html", "members_class" : [{"label" : "states", "tail" : ": Map[String, (FiniteDistribution[AtomicMove], FiniteDistribution[Moves])]", "member" : "provingground.andrewscurtis.ACresults.states", "link" : "provingground\/andrewscurtis\/ACresults.html#states:Map[String,(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves])]", "kind" : "lazy val"}, {"label" : "sizes", "tail" : "(): Map[String, Int]", "member" : "provingground.andrewscurtis.ACresults.sizes", "link" : "provingground\/andrewscurtis\/ACresults.html#sizes:scala.collection.immutable.Map[String,Int]", "kind" : "def"}, {"label" : "probVec", "tail" : "(name: String, rank: Int)(p: Presentation): Stream[Double]", "member" : "provingground.andrewscurtis.ACresults.probVec", "link" : "provingground\/andrewscurtis\/ACresults.html#probVec(name:String,rank:Int)(p:provingground.andrewscurtis.FreeGroups.Presentation):scala.collection.immutable.Stream[Double]", "kind" : "def"}, {"label" : "thmSupp", "tail" : "(name: String, rank: Int): Vector[Presentation]", "member" : "provingground.andrewscurtis.ACresults.thmSupp", "link" : "provingground\/andrewscurtis\/ACresults.html#thmSupp(name:String,rank:Int):Vector[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "thmVec", "tail" : "(name: String, rank: Int): Stream[FiniteDistribution[Presentation]]", "member" : "provingground.andrewscurtis.ACresults.thmVec", "link" : "provingground\/andrewscurtis\/ACresults.html#thmVec(name:String,rank:Int):scala.collection.immutable.Stream[provingground.FiniteDistribution[provingground.andrewscurtis.FreeGroups.Presentation]]", "kind" : "def"}, {"label" : "names", "tail" : "(): List[String]", "member" : "provingground.andrewscurtis.ACresults.names", "link" : "provingground\/andrewscurtis\/ACresults.html#names:List[String]", "kind" : "def"}, {"member" : "provingground.andrewscurtis.ACresults#<init>", "error" : "unsupported entity"}, {"label" : "thms", "tail" : "(rank: Int): FiniteDistribution[Presentation]", "member" : "provingground.andrewscurtis.ACStates.thms", "link" : "provingground\/andrewscurtis\/ACresults.html#thms(rank:Int):provingground.FiniteDistribution[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "moveWeights", "tail" : "(): FiniteDistribution[AtomicMove]", "member" : "provingground.andrewscurtis.ACStates.moveWeights", "link" : "provingground\/andrewscurtis\/ACresults.html#moveWeights:provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove]", "kind" : "def"}, {"label" : "proofs", "tail" : "(): FiniteDistribution[Moves]", "member" : "provingground.andrewscurtis.ACStates.proofs", "link" : "provingground\/andrewscurtis\/ACresults.html#proofs:provingground.FiniteDistribution[provingground.andrewscurtis.Moves]", "kind" : "def"}, {"label" : "blended", "tail" : "(): (FiniteDistribution[AtomicMove], FiniteDistribution[Moves])", "member" : "provingground.andrewscurtis.ACStates.blended", "link" : "provingground\/andrewscurtis\/ACresults.html#blended:(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves])", "kind" : "def"}, {"label" : "combined", "tail" : "(): (FiniteDistribution[AtomicMove], FiniteDistribution[Moves])", "member" : "provingground.andrewscurtis.ACStates.combined", "link" : "provingground\/andrewscurtis\/ACresults.html#combined:(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves])", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/ACresults.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/ACresults.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/ACresults.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/ACresults.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/ACresults.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/ACresults.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/ACresults.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACresults.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACresults.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACresults.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/ACresults.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/ACresults.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/andrewscurtis\/ACresults.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/ACresults.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/ACresults.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/ACresults.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/ACresults.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/ACresults.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/ACresults.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/ACresults$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/ACresults$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/ACresults$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/ACresults$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/ACresults$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/ACresults$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/ACresults$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACresults$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACresults$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACresults$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/ACresults$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/ACresults$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/andrewscurtis\/ACresults$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/ACresults$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/ACresults$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/ACresults$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/ACresults$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/ACresults$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/ACresults$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/andrewscurtis\/ACresults.html", "kind" : "class"}, {"name" : "provingground.andrewscurtis.ACRoutes", "shortDescription" : "", "object" : "provingground\/andrewscurtis\/ACRoutes$.html", "members_object" : [{"label" : "acRoutes", "tail" : ": Route", "member" : "provingground.andrewscurtis.ACRoutes.acRoutes", "link" : "provingground\/andrewscurtis\/ACRoutes$.html#acRoutes:akka.http.scaladsl.server.Route", "kind" : "val"}, {"label" : "stop", "tail" : ": Route", "member" : "provingground.andrewscurtis.ACRoutes.stop", "link" : "provingground\/andrewscurtis\/ACRoutes$.html#stop:akka.http.scaladsl.server.Route", "kind" : "val"}, {"label" : "quickstart", "tail" : ": Route", "member" : "provingground.andrewscurtis.ACRoutes.quickstart", "link" : "provingground\/andrewscurtis\/ACRoutes$.html#quickstart:akka.http.scaladsl.server.Route", "kind" : "val"}, {"label" : "start", "tail" : ": Route", "member" : "provingground.andrewscurtis.ACRoutes.start", "link" : "provingground\/andrewscurtis\/ACRoutes$.html#start:akka.http.scaladsl.server.Route", "kind" : "val"}, {"label" : "getData", "tail" : ": Route", "member" : "provingground.andrewscurtis.ACRoutes.getData", "link" : "provingground\/andrewscurtis\/ACRoutes$.html#getData:akka.http.scaladsl.server.Route", "kind" : "val"}, {"label" : "actors", "tail" : ": Route", "member" : "provingground.andrewscurtis.ACRoutes.actors", "link" : "provingground\/andrewscurtis\/ACRoutes$.html#actors:akka.http.scaladsl.server.Route", "kind" : "val"}, {"label" : "moveWeights", "tail" : ": (RequestContext) ⇒ Future[RouteResult]", "member" : "provingground.andrewscurtis.ACRoutes.moveWeights", "link" : "provingground\/andrewscurtis\/ACRoutes$.html#moveWeights:akka.http.scaladsl.server.RequestContext=>scala.concurrent.Future[akka.http.scaladsl.server.RouteResult]", "kind" : "val"}, {"label" : "terms", "tail" : ": (RequestContext) ⇒ Future[RouteResult]", "member" : "provingground.andrewscurtis.ACRoutes.terms", "link" : "provingground\/andrewscurtis\/ACRoutes$.html#terms:akka.http.scaladsl.server.RequestContext=>scala.concurrent.Future[akka.http.scaladsl.server.RouteResult]", "kind" : "val"}, {"label" : "thms", "tail" : ": (RequestContext) ⇒ Future[RouteResult]", "member" : "provingground.andrewscurtis.ACRoutes.thms", "link" : "provingground\/andrewscurtis\/ACRoutes$.html#thms:akka.http.scaladsl.server.RequestContext=>scala.concurrent.Future[akka.http.scaladsl.server.RouteResult]", "kind" : "val"}, {"label" : "thmEvolve", "tail" : ": (RequestContext) ⇒ Future[RouteResult]", "member" : "provingground.andrewscurtis.ACRoutes.thmEvolve", "link" : "provingground\/andrewscurtis\/ACRoutes$.html#thmEvolve:akka.http.scaladsl.server.RequestContext=>scala.concurrent.Future[akka.http.scaladsl.server.RouteResult]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/ACRoutes$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/ACRoutes$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/ACRoutes$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/ACRoutes$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/ACRoutes$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/ACRoutes$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/ACRoutes$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACRoutes$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACRoutes$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACRoutes$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/ACRoutes$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/ACRoutes$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/andrewscurtis\/ACRoutes$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/ACRoutes$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/ACRoutes$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/ACRoutes$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/ACRoutes$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/ACRoutes$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/ACRoutes$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.andrewscurtis.ACsmoothLooper", "shortDescription" : "", "members_class" : [{"member" : "provingground.andrewscurtis.ACsmoothLooper#<init>", "error" : "unsupported entity"}, {"label" : "receive", "tail" : "(): PartialFunction[Any, Unit]", "member" : "provingground.andrewscurtis.FDLooper.receive", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#receive:PartialFunction[Any,Unit]", "kind" : "def"}, {"label" : "shift", "tail" : "(start: (FiniteDistribution[AtomicMove], FiniteDistribution[Moves]), strictness: Double, steps: Int, epsilon: Double): (FiniteDistribution[AtomicMove], FiniteDistribution[Moves])", "member" : "provingground.andrewscurtis.FDLooper.shift", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#shift(start:X,strictness:Double,steps:Int,epsilon:Double):X", "kind" : "def"}, {"label" : "snapShot", "tail" : "(x: (FiniteDistribution[AtomicMove], FiniteDistribution[Moves])): SnapShot[(FiniteDistribution[AtomicMove], FiniteDistribution[Moves]), Param]", "member" : "provingground.andrewscurtis.FDLooper.snapShot", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#snapShot(x:X):provingground.learning.SnapShot[X,P]", "kind" : "def"}, {"label" : "state", "tail" : ": (FiniteDistribution[AtomicMove], FiniteDistribution[Moves])", "member" : "provingground.andrewscurtis.FDLooper.state", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#state:X", "kind" : "var"}, {"label" : "loops", "tail" : ": Int", "member" : "provingground.andrewscurtis.FDLooper.loops", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#loops:Int", "kind" : "var"}, {"label" : "param", "tail" : ": Param", "member" : "provingground.andrewscurtis.FDLooper.param", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#param:P", "kind" : "val"}, {"label" : "unhandled", "tail" : "(message: Any): Unit", "member" : "akka.actor.Actor.unhandled", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#unhandled(message:Any):Unit", "kind" : "def"}, {"label" : "postRestart", "tail" : "(reason: Throwable): Unit", "member" : "akka.actor.Actor.postRestart", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#postRestart(reason:Throwable):Unit", "kind" : "def"}, {"label" : "preRestart", "tail" : "(reason: Throwable, message: Option[Any]): Unit", "member" : "akka.actor.Actor.preRestart", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#preRestart(reason:Throwable,message:Option[Any]):Unit", "kind" : "def"}, {"label" : "postStop", "tail" : "(): Unit", "member" : "akka.actor.Actor.postStop", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#postStop():Unit", "kind" : "def"}, {"label" : "preStart", "tail" : "(): Unit", "member" : "akka.actor.Actor.preStart", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#preStart():Unit", "kind" : "def"}, {"label" : "supervisorStrategy", "tail" : "(): SupervisorStrategy", "member" : "akka.actor.Actor.supervisorStrategy", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#supervisorStrategy:akka.actor.SupervisorStrategy", "kind" : "def"}, {"label" : "aroundPostRestart", "tail" : "(reason: Throwable): Unit", "member" : "akka.actor.Actor.aroundPostRestart", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#aroundPostRestart(reason:Throwable):Unit", "kind" : "def"}, {"label" : "aroundPreRestart", "tail" : "(reason: Throwable, message: Option[Any]): Unit", "member" : "akka.actor.Actor.aroundPreRestart", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#aroundPreRestart(reason:Throwable,message:Option[Any]):Unit", "kind" : "def"}, {"label" : "aroundPostStop", "tail" : "(): Unit", "member" : "akka.actor.Actor.aroundPostStop", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#aroundPostStop():Unit", "kind" : "def"}, {"label" : "aroundPreStart", "tail" : "(): Unit", "member" : "akka.actor.Actor.aroundPreStart", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#aroundPreStart():Unit", "kind" : "def"}, {"label" : "aroundReceive", "tail" : "(receive: akka.actor.Actor.Receive, msg: Any): Unit", "member" : "akka.actor.Actor.aroundReceive", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#aroundReceive(receive:akka.actor.Actor.Receive,msg:Any):Unit", "kind" : "def"}, {"label" : "sender", "tail" : "(): ActorRef", "member" : "akka.actor.Actor.sender", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#sender():akka.actor.ActorRef", "kind" : "final def"}, {"label" : "self", "tail" : ": ActorRef", "member" : "akka.actor.Actor.self", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#self:akka.actor.ActorRef", "kind" : "implicit final val"}, {"label" : "context", "tail" : ": ActorContext", "member" : "akka.actor.Actor.context", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#context:akka.actor.ActorContext", "kind" : "implicit val"}, {"label" : "Receive", "tail" : "", "member" : "akka.actor.Actor.Receive", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#Receive=akka.actor.Actor.Receive", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/ACsmoothLooper.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/andrewscurtis\/ACsmoothLooper.html", "kind" : "class"}, {"name" : "provingground.andrewscurtis.ACStateData", "shortDescription" : "", "members_case class" : [{"label" : "spawns", "tail" : "(name: String, mult: Int, p: Param): IndexedSeq[Unit]", "member" : "provingground.andrewscurtis.ACStateData.spawns", "link" : "provingground\/andrewscurtis\/ACStateData.html#spawns(name:String,mult:Int,p:provingground.andrewscurtis.Param):scala.collection.immutable.IndexedSeq[Unit]", "kind" : "def"}, {"label" : "spawn", "tail" : "(name: String, p: Param): Unit", "member" : "provingground.andrewscurtis.ACStateData.spawn", "link" : "provingground\/andrewscurtis\/ACStateData.html#spawn(name:String,p:provingground.andrewscurtis.Param):Unit", "kind" : "def"}, {"label" : "reviveAll", "tail" : "(p: Param)(hub: ActorRef): List[Nothing]", "member" : "provingground.andrewscurtis.ACStateData.reviveAll", "link" : "provingground\/andrewscurtis\/ACStateData.html#reviveAll(p:provingground.andrewscurtis.Param)(implicithub:akka.actor.ActorRef):List[Nothing]", "kind" : "def"}, {"label" : "revive", "tail" : "(name: String, p: Param)(hub: ActorRef): Nothing", "member" : "provingground.andrewscurtis.ACStateData.revive", "link" : "provingground\/andrewscurtis\/ACStateData.html#revive(name:String,p:provingground.andrewscurtis.Param)(implicithub:akka.actor.ActorRef):Nothing", "kind" : "def"}, {"member" : "provingground.andrewscurtis.ACStateData#<init>", "error" : "unsupported entity"}, {"label" : "dir", "tail" : ": String", "member" : "provingground.andrewscurtis.ACStateData.dir", "link" : "provingground\/andrewscurtis\/ACStateData.html#dir:String", "kind" : "val"}, {"label" : "states", "tail" : ": Map[String, (FiniteDistribution[AtomicMove], FiniteDistribution[Moves])]", "member" : "provingground.andrewscurtis.ACStateData.states", "link" : "provingground\/andrewscurtis\/ACStateData.html#states:Map[String,(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves])]", "kind" : "val"}, {"label" : "thms", "tail" : "(rank: Int): FiniteDistribution[Presentation]", "member" : "provingground.andrewscurtis.ACStates.thms", "link" : "provingground\/andrewscurtis\/ACStateData.html#thms(rank:Int):provingground.FiniteDistribution[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "moveWeights", "tail" : "(): FiniteDistribution[AtomicMove]", "member" : "provingground.andrewscurtis.ACStates.moveWeights", "link" : "provingground\/andrewscurtis\/ACStateData.html#moveWeights:provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove]", "kind" : "def"}, {"label" : "proofs", "tail" : "(): FiniteDistribution[Moves]", "member" : "provingground.andrewscurtis.ACStates.proofs", "link" : "provingground\/andrewscurtis\/ACStateData.html#proofs:provingground.FiniteDistribution[provingground.andrewscurtis.Moves]", "kind" : "def"}, {"label" : "blended", "tail" : "(): (FiniteDistribution[AtomicMove], FiniteDistribution[Moves])", "member" : "provingground.andrewscurtis.ACStates.blended", "link" : "provingground\/andrewscurtis\/ACStateData.html#blended:(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves])", "kind" : "def"}, {"label" : "combined", "tail" : "(): (FiniteDistribution[AtomicMove], FiniteDistribution[Moves])", "member" : "provingground.andrewscurtis.ACStates.combined", "link" : "provingground\/andrewscurtis\/ACStateData.html#combined:(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves])", "kind" : "def"}, {"label" : "names", "tail" : "(): List[String]", "member" : "provingground.andrewscurtis.ACStates.names", "link" : "provingground\/andrewscurtis\/ACStateData.html#names:List[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/ACStateData.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/ACStateData.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/ACStateData.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/ACStateData.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/ACStateData.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/ACStateData.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/ACStateData.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACStateData.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACStateData.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACStateData.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/ACStateData.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/ACStateData.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/ACStateData.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/ACStateData.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/ACStateData.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/ACStateData.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/andrewscurtis\/ACStateData.html", "kind" : "case class"}, {"name" : "provingground.andrewscurtis.ACStates", "members_trait" : [{"label" : "thms", "tail" : "(rank: Int): FiniteDistribution[Presentation]", "member" : "provingground.andrewscurtis.ACStates.thms", "link" : "provingground\/andrewscurtis\/ACStates.html#thms(rank:Int):provingground.FiniteDistribution[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "moveWeights", "tail" : "(): FiniteDistribution[AtomicMove]", "member" : "provingground.andrewscurtis.ACStates.moveWeights", "link" : "provingground\/andrewscurtis\/ACStates.html#moveWeights:provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove]", "kind" : "def"}, {"label" : "proofs", "tail" : "(): FiniteDistribution[Moves]", "member" : "provingground.andrewscurtis.ACStates.proofs", "link" : "provingground\/andrewscurtis\/ACStates.html#proofs:provingground.FiniteDistribution[provingground.andrewscurtis.Moves]", "kind" : "def"}, {"label" : "blended", "tail" : "(): (FiniteDistribution[AtomicMove], FiniteDistribution[Moves])", "member" : "provingground.andrewscurtis.ACStates.blended", "link" : "provingground\/andrewscurtis\/ACStates.html#blended:(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves])", "kind" : "def"}, {"label" : "combined", "tail" : "(): (FiniteDistribution[AtomicMove], FiniteDistribution[Moves])", "member" : "provingground.andrewscurtis.ACStates.combined", "link" : "provingground\/andrewscurtis\/ACStates.html#combined:(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves])", "kind" : "def"}, {"label" : "names", "tail" : "(): List[String]", "member" : "provingground.andrewscurtis.ACStates.names", "link" : "provingground\/andrewscurtis\/ACStates.html#names:List[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/ACStates.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/ACStates.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/ACStates.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/ACStates.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/ACStates.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/ACStates.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/ACStates.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACStates.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACStates.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACStates.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/ACStates.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/ACStates.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/andrewscurtis\/ACStates.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/ACStates.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/ACStates.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/ACStates.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/ACStates.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/ACStates.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/ACStates.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "states", "tail" : ": Map[String, (FiniteDistribution[AtomicMove], FiniteDistribution[Moves])]", "member" : "provingground.andrewscurtis.ACStates.states", "link" : "provingground\/andrewscurtis\/ACStates.html#states:Map[String,(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves])]", "kind" : "abstract val"}], "shortDescription" : "", "trait" : "provingground\/andrewscurtis\/ACStates.html", "kind" : "trait"}, {"name" : "provingground.andrewscurtis.ACThm", "shortDescription" : "An presentation (theorem) in the Andrews-Curtis evolution,namely:* actor name,* number of loops,* presentation* weight in distribution on presentations", "object" : "provingground\/andrewscurtis\/ACThm$.html", "members_object" : [{"label" : "weightVector", "tail" : "(thms: Vector[ACThm], loops: Int): (Presentation) ⇒ Vector[Double]", "member" : "provingground.andrewscurtis.ACThm.weightVector", "link" : "provingground\/andrewscurtis\/ACThm$.html#weightVector(thms:Vector[provingground.andrewscurtis.ACThm],loops:Int):provingground.andrewscurtis.FreeGroups.Presentation=>scala.collection.immutable.Vector[Double]", "kind" : "def"}, {"label" : "weight", "tail" : "(thms: Vector[ACThm], pres: Presentation, step: Int): Double", "member" : "provingground.andrewscurtis.ACThm.weight", "link" : "provingground\/andrewscurtis\/ACThm$.html#weight(thms:Vector[provingground.andrewscurtis.ACThm],pres:provingground.andrewscurtis.FreeGroups.Presentation,step:Int):Double", "kind" : "def"}, {"label" : "fromSnap", "tail" : ": (Snap) ⇒ Vector[ACThm]", "member" : "provingground.andrewscurtis.ACThm.fromSnap", "link" : "provingground\/andrewscurtis\/ACThm$.html#fromSnap:provingground.andrewscurtis.ACElem.Snap=>scala.collection.immutable.Vector[provingground.andrewscurtis.ACThm]", "kind" : "val"}, {"label" : "rw", "tail" : "(): upickle.default.ReadWriter[ACThm]", "member" : "provingground.andrewscurtis.ACThm.rw", "link" : "provingground\/andrewscurtis\/ACThm$.html#rw:upickle.default.ReadWriter[provingground.andrewscurtis.ACThm]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/ACThm$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/ACThm$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/ACThm$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/ACThm$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/ACThm$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/ACThm$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/ACThm$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACThm$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACThm$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACThm$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/ACThm$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/ACThm$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/andrewscurtis\/ACThm$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/ACThm$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/ACThm$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/ACThm$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/ACThm$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/ACThm$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/ACThm$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"member" : "provingground.andrewscurtis.ACThm#<init>", "error" : "unsupported entity"}, {"label" : "loops", "tail" : ": Int", "member" : "provingground.andrewscurtis.ACThm.loops", "link" : "provingground\/andrewscurtis\/ACThm.html#loops:Int", "kind" : "val"}, {"label" : "weight", "tail" : ": Double", "member" : "provingground.andrewscurtis.ACThm.weight", "link" : "provingground\/andrewscurtis\/ACThm.html#weight:Double", "kind" : "val"}, {"label" : "pres", "tail" : ": Presentation", "member" : "provingground.andrewscurtis.ACThm.pres", "link" : "provingground\/andrewscurtis\/ACThm.html#pres:provingground.andrewscurtis.FreeGroups.Presentation", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "provingground.andrewscurtis.ACThm.name", "link" : "provingground\/andrewscurtis\/ACThm.html#name:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/ACThm.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/ACThm.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/ACThm.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/ACThm.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/ACThm.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/ACThm.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/ACThm.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACThm.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACThm.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACThm.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/ACThm.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/ACThm.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/ACThm.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/ACThm.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/ACThm.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/ACThm.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/andrewscurtis\/ACThm.html", "kind" : "case class"}, {"name" : "provingground.andrewscurtis.ACWriter", "members_trait" : [{"label" : "writerRef", "tail" : "(interface: Sink[Snap, M]): ActorRef", "member" : "provingground.andrewscurtis.ACWriter.writerRef", "link" : "provingground\/andrewscurtis\/ACWriter.html#writerRef[M](interface:akka.stream.scaladsl.Sink[provingground.andrewscurtis.ACElem.Snap,M]):akka.actor.ActorRef", "kind" : "def"}, {"label" : "writerFlow", "tail" : ": Flow[SnapShot[(FiniteDistribution[AtomicMove], FiniteDistribution[Moves]), Param], SnapShot[(FiniteDistribution[AtomicMove], FiniteDistribution[Moves]), Param], NotUsed]", "member" : "provingground.andrewscurtis.ACWriter.writerFlow", "link" : "provingground\/andrewscurtis\/ACWriter.html#writerFlow:akka.stream.scaladsl.Flow[provingground.learning.SnapShot[(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves]),provingground.andrewscurtis.Param],provingground.learning.SnapShot[(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves]),provingground.andrewscurtis.Param],akka.NotUsed]", "kind" : "val"}, {"label" : "loopsSink", "tail" : ": Sink[Snap, NotUsed]", "member" : "provingground.andrewscurtis.ACWriter.loopsSink", "link" : "provingground\/andrewscurtis\/ACWriter.html#loopsSink:akka.stream.scaladsl.Sink[provingground.andrewscurtis.ACElem.Snap,akka.NotUsed]", "kind" : "val"}, {"label" : "moveWeightsSink", "tail" : ": Sink[Snap, NotUsed]", "member" : "provingground.andrewscurtis.ACWriter.moveWeightsSink", "link" : "provingground\/andrewscurtis\/ACWriter.html#moveWeightsSink:akka.stream.scaladsl.Sink[provingground.andrewscurtis.ACElem.Snap,akka.NotUsed]", "kind" : "val"}, {"label" : "thmsSink", "tail" : ": Sink[Snap, NotUsed]", "member" : "provingground.andrewscurtis.ACWriter.thmsSink", "link" : "provingground\/andrewscurtis\/ACWriter.html#thmsSink:akka.stream.scaladsl.Sink[provingground.andrewscurtis.ACElem.Snap,akka.NotUsed]", "kind" : "val"}, {"label" : "elemsSink", "tail" : ": Sink[Snap, NotUsed]", "member" : "provingground.andrewscurtis.ACWriter.elemsSink", "link" : "provingground\/andrewscurtis\/ACWriter.html#elemsSink:akka.stream.scaladsl.Sink[provingground.andrewscurtis.ACElem.Snap,akka.NotUsed]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/ACWriter.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/ACWriter.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/ACWriter.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/ACWriter.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/ACWriter.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/ACWriter.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/ACWriter.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACWriter.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACWriter.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/ACWriter.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/ACWriter.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/ACWriter.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/andrewscurtis\/ACWriter.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/ACWriter.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/ACWriter.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/ACWriter.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/ACWriter.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/ACWriter.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/ACWriter.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "updateLoops", "tail" : "(name: String, loops: Int): Unit", "member" : "provingground.andrewscurtis.ACWriter.updateLoops", "link" : "provingground\/andrewscurtis\/ACWriter.html#updateLoops(name:String,loops:Int):Unit", "kind" : "abstract def"}, {"label" : "addMoveWeight", "tail" : "(wts: ACMoveWeights): Unit", "member" : "provingground.andrewscurtis.ACWriter.addMoveWeight", "link" : "provingground\/andrewscurtis\/ACWriter.html#addMoveWeight(wts:provingground.andrewscurtis.ACMoveWeights):Unit", "kind" : "abstract def"}, {"label" : "addThm", "tail" : "(thm: ACThm): Unit", "member" : "provingground.andrewscurtis.ACWriter.addThm", "link" : "provingground\/andrewscurtis\/ACWriter.html#addThm(thm:provingground.andrewscurtis.ACThm):Unit", "kind" : "abstract def"}, {"label" : "addElem", "tail" : "(el: ACElem): Unit", "member" : "provingground.andrewscurtis.ACWriter.addElem", "link" : "provingground\/andrewscurtis\/ACWriter.html#addElem(el:provingground.andrewscurtis.ACElem):Unit", "kind" : "abstract def"}], "shortDescription" : "Saving the results of Andrews-Curtis runsabstract methods are for the various saves and updatesconcrete methods give sinks and a flow that does all the saving.", "trait" : "provingground\/andrewscurtis\/ACWriter.html", "kind" : "trait"}, {"name" : "provingground.andrewscurtis.AndrewsCurtis", "shortDescription" : "", "object" : "provingground\/andrewscurtis\/AndrewsCurtis$.html", "members_object" : [{"label" : "ACFlowData", "tail" : "", "member" : "provingground.andrewscurtis.AndrewsCurtis.ACFlowData", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#ACFlowDataextendsProductwithSerializable", "kind" : "case class"}, {"label" : "ACparameters", "tail" : "", "member" : "provingground.andrewscurtis.AndrewsCurtis.ACparameters", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#ACparametersextendsProductwithSerializable", "kind" : "case class"}, {"label" : "initDstbn", "tail" : "(pthCntn: Double): DynDst[Presentation, Presentation]", "member" : "provingground.andrewscurtis.AndrewsCurtis.initDstbn", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#initDstbn(pthCntn:Double):provingground.andrewscurtis.AndrewsCurtis.DynDst[provingground.andrewscurtis.FreeGroups.Presentation,provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "bestChain", "tail" : "(pres: Vert, chains: Set[Chain], d: DynDstbn): Chain", "member" : "provingground.andrewscurtis.AndrewsCurtis.bestChain", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#bestChain(pres:provingground.andrewscurtis.AndrewsCurtis.Vert,chains:Set[provingground.andrewscurtis.AndrewsCurtis.Chain],d:provingground.andrewscurtis.AndrewsCurtis.DynDstbn):provingground.andrewscurtis.AndrewsCurtis.Chain", "kind" : "def"}, {"label" : "tuneFlowCutoff", "tail" : "(d: DynDstbn, bgwt: (Vert) ⇒ Double, epsilon: Double, cutoff: Double): DynDst[Presentation, ACMoveType]", "member" : "provingground.andrewscurtis.AndrewsCurtis.tuneFlowCutoff", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#tuneFlowCutoff(d:provingground.andrewscurtis.AndrewsCurtis.DynDstbn,bgwt:provingground.andrewscurtis.AndrewsCurtis.Vert=>Double,epsilon:Double,cutoff:Double):provingground.andrewscurtis.AndrewsCurtis.DynDst[provingground.andrewscurtis.FreeGroups.Presentation,provingground.andrewscurtis.AndrewsCurtis.ACMoveType]", "kind" : "def"}, {"label" : "dstbnFlowCutoff", "tail" : "(d: DynDstbn, bgwt: (Vert) ⇒ Double, epsilon: Double, cutoff: Double): DynDstbn", "member" : "provingground.andrewscurtis.AndrewsCurtis.dstbnFlowCutoff", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#dstbnFlowCutoff(d:provingground.andrewscurtis.AndrewsCurtis.DynDstbn,bgwt:provingground.andrewscurtis.AndrewsCurtis.Vert=>Double,epsilon:Double,cutoff:Double):provingground.andrewscurtis.AndrewsCurtis.DynDstbn", "kind" : "def"}, {"label" : "initChains", "tail" : "(d: DynDstbn): Set[Chain]", "member" : "provingground.andrewscurtis.AndrewsCurtis.initChains", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#initChains(d:provingground.andrewscurtis.AndrewsCurtis.DynDstbn):Set[provingground.andrewscurtis.AndrewsCurtis.Chain]", "kind" : "def"}, {"label" : "presSupp", "tail" : "(d: DynDstbn): Set[Presentation]", "member" : "provingground.andrewscurtis.AndrewsCurtis.presSupp", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#presSupp(d:provingground.andrewscurtis.AndrewsCurtis.DynDstbn):scala.collection.immutable.Set[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "chainGenCutoff", "tail" : "(chains: Set[Chain], d: DynDstbn, cutoff: Double): Set[Chain]", "member" : "provingground.andrewscurtis.AndrewsCurtis.chainGenCutoff", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#chainGenCutoff(chains:Set[provingground.andrewscurtis.AndrewsCurtis.Chain],d:provingground.andrewscurtis.AndrewsCurtis.DynDstbn,cutoff:Double):Set[provingground.andrewscurtis.AndrewsCurtis.Chain]", "kind" : "def"}, {"label" : "dstbnflow", "tail" : "(chains: Set[Chain], d: DynDstbn, bgwt: (Vert) ⇒ Double, epsilon: Double, threshold: Double): DynDst[Presentation, ACMoveType]", "member" : "provingground.andrewscurtis.AndrewsCurtis.dstbnflow", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#dstbnflow(chains:Set[provingground.andrewscurtis.AndrewsCurtis.Chain],d:provingground.andrewscurtis.AndrewsCurtis.DynDstbn,bgwt:provingground.andrewscurtis.AndrewsCurtis.Vert=>Double,epsilon:Double,threshold:Double):provingground.andrewscurtis.AndrewsCurtis.DynDst[provingground.andrewscurtis.FreeGroups.Presentation,provingground.andrewscurtis.AndrewsCurtis.ACMoveType]", "kind" : "def"}, {"label" : "dstbnFeedback", "tail" : "(presdstbn: FiniteDistribution[Vert], bgwt: (Vert) ⇒ Double): FiniteDistribution[Vert]", "member" : "provingground.andrewscurtis.AndrewsCurtis.dstbnFeedback", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#dstbnFeedback(presdstbn:provingground.FiniteDistribution[provingground.andrewscurtis.AndrewsCurtis.Vert],bgwt:provingground.andrewscurtis.AndrewsCurtis.Vert=>Double):provingground.FiniteDistribution[provingground.andrewscurtis.AndrewsCurtis.Vert]", "kind" : "def"}, {"label" : "ACbgWt", "tail" : "(presCntn: Double, wrdCntn: Double): (Vert) ⇒ Double", "member" : "provingground.andrewscurtis.AndrewsCurtis.ACbgWt", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#ACbgWt(presCntn:Double,wrdCntn:Double):provingground.andrewscurtis.AndrewsCurtis.Vert=>Double", "kind" : "def"}, {"label" : "backpropdstbn", "tail" : "(chains: Set[Chain], feedback: FiniteDistribution[Vert], d: DynDstbn): DynDst[Presentation, MoveType]", "member" : "provingground.andrewscurtis.AndrewsCurtis.backpropdstbn", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#backpropdstbn(chains:Set[provingground.andrewscurtis.AndrewsCurtis.Chain],feedback:provingground.FiniteDistribution[provingground.andrewscurtis.AndrewsCurtis.Vert],d:provingground.andrewscurtis.AndrewsCurtis.DynDstbn):provingground.andrewscurtis.AndrewsCurtis.DynDst[provingground.andrewscurtis.FreeGroups.Presentation,provingground.andrewscurtis.AndrewsCurtis.MoveType]", "kind" : "def"}, {"label" : "dstbn", "tail" : "(chains: Set[Chain], d: DynDstbn): FiniteDistribution[Vert]", "member" : "provingground.andrewscurtis.AndrewsCurtis.dstbn", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#dstbn(chains:Set[provingground.andrewscurtis.AndrewsCurtis.Chain],d:provingground.andrewscurtis.AndrewsCurtis.DynDstbn):provingground.FiniteDistribution[provingground.andrewscurtis.AndrewsCurtis.Vert]", "kind" : "def"}, {"label" : "Chain", "tail" : "", "member" : "provingground.andrewscurtis.AndrewsCurtis.Chain", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#Chain", "kind" : "object"}, {"label" : "RecChain", "tail" : "", "member" : "provingground.andrewscurtis.AndrewsCurtis.RecChain", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#RecChainextendsAndrewsCurtis.ChainwithProductwithSerializable", "kind" : "case class"}, {"label" : "AtomicChain", "tail" : "", "member" : "provingground.andrewscurtis.AndrewsCurtis.AtomicChain", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#AtomicChainextendsAndrewsCurtis.ChainwithProductwithSerializable", "kind" : "case class"}, {"label" : "Chain", "tail" : "", "member" : "provingground.andrewscurtis.AndrewsCurtis.Chain", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#ChainextendsAnyRef", "kind" : "trait"}, {"label" : "Inv", "tail" : "", "member" : "provingground.andrewscurtis.AndrewsCurtis.Inv", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#InvextendsAndrewsCurtis.MovewithProductwithSerializable", "kind" : "case class"}, {"label" : "Conj", "tail" : "", "member" : "provingground.andrewscurtis.AndrewsCurtis.Conj", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#ConjextendsAndrewsCurtis.MovewithProductwithSerializable", "kind" : "case class"}, {"label" : "LftMult", "tail" : "", "member" : "provingground.andrewscurtis.AndrewsCurtis.LftMult", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#LftMultextendsAndrewsCurtis.MovewithProductwithSerializable", "kind" : "case class"}, {"label" : "RtMult", "tail" : "", "member" : "provingground.andrewscurtis.AndrewsCurtis.RtMult", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#RtMultextendsAndrewsCurtis.MovewithProductwithSerializable", "kind" : "case class"}, {"label" : "ACDeStab", "tail" : "", "member" : "provingground.andrewscurtis.AndrewsCurtis.ACDeStab", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#ACDeStab", "kind" : "object"}, {"label" : "ACStab", "tail" : "", "member" : "provingground.andrewscurtis.AndrewsCurtis.ACStab", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#ACStab", "kind" : "object"}, {"label" : "Move", "tail" : "", "member" : "provingground.andrewscurtis.AndrewsCurtis.Move", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#Moveextendsprovingground.andrewscurtis.AndrewsCurtis.Vert=>provingground.andrewscurtis.AndrewsCurtis.Vert", "kind" : "trait"}, {"label" : "baseDstbn", "tail" : ": DynDst[Presentation, ACMoveType]", "member" : "provingground.andrewscurtis.AndrewsCurtis.baseDstbn", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#baseDstbn:provingground.andrewscurtis.AndrewsCurtis.DynDst[provingground.andrewscurtis.FreeGroups.Presentation,provingground.andrewscurtis.AndrewsCurtis.ACMoveType]", "kind" : "val"}, {"label" : "allMoves", "tail" : "(pres: Presentation): (MoveType) ⇒ List[Move]", "member" : "provingground.andrewscurtis.AndrewsCurtis.allMoves", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#allMoves(pres:provingground.andrewscurtis.FreeGroups.Presentation):provingground.andrewscurtis.AndrewsCurtis.MoveType=>List[provingground.andrewscurtis.AndrewsCurtis.Move]", "kind" : "def"}, {"label" : "multiplicity", "tail" : "(rk: Int): (MoveType) ⇒ Long", "member" : "provingground.andrewscurtis.AndrewsCurtis.multiplicity", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#multiplicity(rk:Int):provingground.andrewscurtis.AndrewsCurtis.MoveType=>Long", "kind" : "def"}, {"label" : "MoveTypeList", "tail" : ": List[ACMoveType]", "member" : "provingground.andrewscurtis.AndrewsCurtis.MoveTypeList", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#MoveTypeList:List[provingground.andrewscurtis.AndrewsCurtis.ACMoveType]", "kind" : "val"}, {"label" : "ACMoveType", "tail" : "", "member" : "provingground.andrewscurtis.AndrewsCurtis.ACMoveType", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#ACMoveType", "kind" : "object"}, {"label" : "ACMoveType", "tail" : "", "member" : "provingground.andrewscurtis.AndrewsCurtis.ACMoveType", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#ACMoveTypeextendsAnyRef", "kind" : "sealed trait"}, {"label" : "MoveType", "tail" : "", "member" : "provingground.andrewscurtis.AndrewsCurtis.MoveType", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#MoveType=provingground.andrewscurtis.AndrewsCurtis.ACMoveType", "kind" : "type"}, {"label" : "Vert", "tail" : "", "member" : "provingground.andrewscurtis.AndrewsCurtis.Vert", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#Vert=provingground.andrewscurtis.FreeGroups.Presentation", "kind" : "type"}, {"label" : "DynDst", "tail" : "", "member" : "provingground.andrewscurtis.AndrewsCurtis.DynDst", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#DynDst", "kind" : "object"}, {"label" : "DynDst", "tail" : "", "member" : "provingground.andrewscurtis.AndrewsCurtis.DynDst", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#DynDst[V,E]extendsProductwithSerializable", "kind" : "case class"}, {"label" : "DynDstbn", "tail" : "", "member" : "provingground.andrewscurtis.AndrewsCurtis.DynDstbn", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#DynDstbn=provingground.andrewscurtis.AndrewsCurtis.DynDst[provingground.andrewscurtis.FreeGroups.Presentation,provingground.andrewscurtis.AndrewsCurtis.ACMoveType]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/AndrewsCurtis$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.andrewscurtis.AndrewsCurtisInterface", "shortDescription" : "", "object" : "provingground\/andrewscurtis\/AndrewsCurtisInterface$.html", "members_object" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/AndrewsCurtisInterface$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/AndrewsCurtisInterface$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/AndrewsCurtisInterface$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/AndrewsCurtisInterface$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/AndrewsCurtisInterface$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/AndrewsCurtisInterface$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/AndrewsCurtisInterface$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/AndrewsCurtisInterface$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/AndrewsCurtisInterface$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/AndrewsCurtisInterface$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/AndrewsCurtisInterface$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/AndrewsCurtisInterface$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/andrewscurtis\/AndrewsCurtisInterface$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/AndrewsCurtisInterface$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/AndrewsCurtisInterface$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/AndrewsCurtisInterface$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/AndrewsCurtisInterface$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/AndrewsCurtisInterface$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/AndrewsCurtisInterface$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.andrewscurtis.AtomicMove", "members_trait" : [{"label" : "toString", "tail" : "(): String", "member" : "provingground.andrewscurtis.AtomicMove.toString", "link" : "provingground\/andrewscurtis\/AtomicMove.html#toString():String", "kind" : "def"}, {"label" : "toLatex", "tail" : "(): String", "member" : "provingground.andrewscurtis.AtomicMove.toLatex", "link" : "provingground\/andrewscurtis\/AtomicMove.html#toLatex:String", "kind" : "def"}, {"label" : "toPlainString", "tail" : "(): String", "member" : "provingground.andrewscurtis.AtomicMove.toPlainString", "link" : "provingground\/andrewscurtis\/AtomicMove.html#toPlainString:String", "kind" : "def"}, {"label" : "toFunc", "tail" : "(): (Presentation) ⇒ Option[Presentation]", "member" : "provingground.andrewscurtis.AtomicMove.toFunc", "link" : "provingground\/andrewscurtis\/AtomicMove.html#toFunc:provingground.andrewscurtis.FreeGroups.Presentation=>Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "compose", "tail" : "(mf: AtomicMove): Moves", "member" : "provingground.andrewscurtis.AtomicMove.compose", "link" : "provingground\/andrewscurtis\/AtomicMove.html#compose(mf:provingground.andrewscurtis.AtomicMove):provingground.andrewscurtis.Moves", "kind" : "def"}, {"label" : "actOnPres", "tail" : "(fdPres: FiniteDistribution[Presentation]): FiniteDistribution[Presentation]", "member" : "provingground.andrewscurtis.AtomicMove.actOnPres", "link" : "provingground\/andrewscurtis\/AtomicMove.html#actOnPres(fdPres:provingground.FiniteDistribution[provingground.andrewscurtis.FreeGroups.Presentation]):provingground.FiniteDistribution[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "movesDF", "tail" : "(): AdjDiffbleFunction[FiniteDistribution[Moves], FiniteDistribution[Moves]]", "member" : "provingground.andrewscurtis.AtomicMove.movesDF", "link" : "provingground\/andrewscurtis\/AtomicMove.html#movesDF:provingground.learning.AdjDiffbleFunction[provingground.FiniteDistribution[provingground.andrewscurtis.Moves],provingground.FiniteDistribution[provingground.andrewscurtis.Moves]]", "kind" : "def"}, {"label" : "actOnMoves", "tail" : "(moves: Moves): Option[Moves]", "member" : "provingground.andrewscurtis.AtomicMove.actOnMoves", "link" : "provingground\/andrewscurtis\/AtomicMove.html#actOnMoves(moves:provingground.andrewscurtis.Moves):Option[provingground.andrewscurtis.Moves]", "kind" : "def"}, {"label" : "apply", "tail" : "(fdVertices: FiniteDistribution[Moves]): FiniteDistribution[Moves]", "member" : "provingground.andrewscurtis.AtomicMove.apply", "link" : "provingground\/andrewscurtis\/AtomicMove.html#apply(fdVertices:provingground.FiniteDistribution[provingground.andrewscurtis.Moves]):provingground.FiniteDistribution[provingground.andrewscurtis.Moves]", "kind" : "def"}, {"label" : "apply", "tail" : "(moves: Moves): Option[Moves]", "member" : "provingground.andrewscurtis.AtomicMove.apply", "link" : "provingground\/andrewscurtis\/AtomicMove.html#apply(moves:provingground.andrewscurtis.Moves):Option[provingground.andrewscurtis.Moves]", "kind" : "def"}, {"label" : "apply", "tail" : "(opPres: Option[Presentation]): Option[Presentation]", "member" : "provingground.andrewscurtis.AtomicMove.apply", "link" : "provingground\/andrewscurtis\/AtomicMove.html#apply(opPres:Option[provingground.andrewscurtis.FreeGroups.Presentation]):Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "andThen", "tail" : "(g: (Option[Moves]) ⇒ A): (Moves) ⇒ A", "member" : "scala.Function1.andThen", "link" : "provingground\/andrewscurtis\/AtomicMove.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) ⇒ Moves): (A) ⇒ Option[Moves]", "member" : "scala.Function1.compose", "link" : "provingground\/andrewscurtis\/AtomicMove.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/AtomicMove.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/AtomicMove.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/AtomicMove.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/AtomicMove.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/AtomicMove.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/AtomicMove.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/AtomicMove.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/AtomicMove.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/AtomicMove.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/AtomicMove.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/AtomicMove.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/AtomicMove.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/AtomicMove.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/AtomicMove.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/AtomicMove.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/AtomicMove.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/AtomicMove.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/AtomicMove.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(pres: Presentation): Option[Presentation]", "member" : "provingground.andrewscurtis.AtomicMove.apply", "link" : "provingground\/andrewscurtis\/AtomicMove.html#apply(pres:provingground.andrewscurtis.FreeGroups.Presentation):Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "abstract def"}], "shortDescription" : "", "object" : "provingground\/andrewscurtis\/AtomicMove$.html", "members_object" : [{"label" : "fromString", "tail" : "(w: String): Option[AtomicMove]", "member" : "provingground.andrewscurtis.AtomicMove.fromString", "link" : "provingground\/andrewscurtis\/AtomicMove$.html#fromString(w:String):Option[provingground.andrewscurtis.AtomicMove]", "kind" : "def"}, {"label" : "apply", "tail" : "(w: String): AtomicMove", "member" : "provingground.andrewscurtis.AtomicMove.apply", "link" : "provingground\/andrewscurtis\/AtomicMove$.html#apply(w:String):provingground.andrewscurtis.AtomicMove", "kind" : "def"}, {"label" : "actOnMoves", "tail" : "(mf: AtomicMove): (Moves) ⇒ Option[Moves]", "member" : "provingground.andrewscurtis.AtomicMove.actOnMoves", "link" : "provingground\/andrewscurtis\/AtomicMove$.html#actOnMoves(mf:provingground.andrewscurtis.AtomicMove):provingground.andrewscurtis.Moves=>Option[provingground.andrewscurtis.Moves]", "kind" : "def"}, {"label" : "actOnFDVertices", "tail" : "(mf: AtomicMove, fdVertices: FiniteDistribution[Moves]): FiniteDistribution[Moves]", "member" : "provingground.andrewscurtis.AtomicMove.actOnFDVertices", "link" : "provingground\/andrewscurtis\/AtomicMove$.html#actOnFDVertices(mf:provingground.andrewscurtis.AtomicMove,fdVertices:provingground.FiniteDistribution[provingground.andrewscurtis.Moves]):provingground.FiniteDistribution[provingground.andrewscurtis.Moves]", "kind" : "def"}, {"label" : "rw", "tail" : "(): upickle.default.ReadWriter[AtomicMove]", "member" : "provingground.andrewscurtis.AtomicMove.rw", "link" : "provingground\/andrewscurtis\/AtomicMove$.html#rw:upickle.default.ReadWriter[provingground.andrewscurtis.AtomicMove]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/AtomicMove$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/AtomicMove$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/AtomicMove$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/AtomicMove$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/AtomicMove$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/AtomicMove$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/AtomicMove$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/AtomicMove$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/AtomicMove$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/AtomicMove$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/AtomicMove$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/AtomicMove$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/andrewscurtis\/AtomicMove$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/AtomicMove$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/AtomicMove$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/AtomicMove$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/AtomicMove$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/AtomicMove$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/AtomicMove$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/andrewscurtis\/AtomicMove.html", "kind" : "object"}, {"name" : "provingground.andrewscurtis.Conj", "shortDescription" : "", "object" : "provingground\/andrewscurtis\/Conj$.html", "members_object" : [{"label" : "rw", "tail" : "(): upickle.default.ReadWriter[Conj]", "member" : "provingground.andrewscurtis.Conj.rw", "link" : "provingground\/andrewscurtis\/Conj$.html#rw:upickle.default.ReadWriter[provingground.andrewscurtis.Conj]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/Conj$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/Conj$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/Conj$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/Conj$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/Conj$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/Conj$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/Conj$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/Conj$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/Conj$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/Conj$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/Conj$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/Conj$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/andrewscurtis\/Conj$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/Conj$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/Conj$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/Conj$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/Conj$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/Conj$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/Conj$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "apply", "tail" : "(pres: Presentation): Option[Presentation]", "member" : "provingground.andrewscurtis.Conj.apply", "link" : "provingground\/andrewscurtis\/Conj.html#apply(pres:provingground.andrewscurtis.FreeGroups.Presentation):Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"member" : "provingground.andrewscurtis.Conj#<init>", "error" : "unsupported entity"}, {"label" : "l", "tail" : ": Int", "member" : "provingground.andrewscurtis.Conj.l", "link" : "provingground\/andrewscurtis\/Conj.html#l:Int", "kind" : "val"}, {"label" : "k", "tail" : ": Int", "member" : "provingground.andrewscurtis.Conj.k", "link" : "provingground\/andrewscurtis\/Conj.html#k:Int", "kind" : "val"}, {"label" : "toString", "tail" : "(): String", "member" : "provingground.andrewscurtis.AtomicMove.toString", "link" : "provingground\/andrewscurtis\/Conj.html#toString():String", "kind" : "def"}, {"label" : "toLatex", "tail" : "(): String", "member" : "provingground.andrewscurtis.AtomicMove.toLatex", "link" : "provingground\/andrewscurtis\/Conj.html#toLatex:String", "kind" : "def"}, {"label" : "toPlainString", "tail" : "(): String", "member" : "provingground.andrewscurtis.AtomicMove.toPlainString", "link" : "provingground\/andrewscurtis\/Conj.html#toPlainString:String", "kind" : "def"}, {"label" : "toFunc", "tail" : "(): (Presentation) ⇒ Option[Presentation]", "member" : "provingground.andrewscurtis.AtomicMove.toFunc", "link" : "provingground\/andrewscurtis\/Conj.html#toFunc:provingground.andrewscurtis.FreeGroups.Presentation=>Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "compose", "tail" : "(mf: AtomicMove): Moves", "member" : "provingground.andrewscurtis.AtomicMove.compose", "link" : "provingground\/andrewscurtis\/Conj.html#compose(mf:provingground.andrewscurtis.AtomicMove):provingground.andrewscurtis.Moves", "kind" : "def"}, {"label" : "actOnPres", "tail" : "(fdPres: FiniteDistribution[Presentation]): FiniteDistribution[Presentation]", "member" : "provingground.andrewscurtis.AtomicMove.actOnPres", "link" : "provingground\/andrewscurtis\/Conj.html#actOnPres(fdPres:provingground.FiniteDistribution[provingground.andrewscurtis.FreeGroups.Presentation]):provingground.FiniteDistribution[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "movesDF", "tail" : "(): AdjDiffbleFunction[FiniteDistribution[Moves], FiniteDistribution[Moves]]", "member" : "provingground.andrewscurtis.AtomicMove.movesDF", "link" : "provingground\/andrewscurtis\/Conj.html#movesDF:provingground.learning.AdjDiffbleFunction[provingground.FiniteDistribution[provingground.andrewscurtis.Moves],provingground.FiniteDistribution[provingground.andrewscurtis.Moves]]", "kind" : "def"}, {"label" : "actOnMoves", "tail" : "(moves: Moves): Option[Moves]", "member" : "provingground.andrewscurtis.AtomicMove.actOnMoves", "link" : "provingground\/andrewscurtis\/Conj.html#actOnMoves(moves:provingground.andrewscurtis.Moves):Option[provingground.andrewscurtis.Moves]", "kind" : "def"}, {"label" : "apply", "tail" : "(fdVertices: FiniteDistribution[Moves]): FiniteDistribution[Moves]", "member" : "provingground.andrewscurtis.AtomicMove.apply", "link" : "provingground\/andrewscurtis\/Conj.html#apply(fdVertices:provingground.FiniteDistribution[provingground.andrewscurtis.Moves]):provingground.FiniteDistribution[provingground.andrewscurtis.Moves]", "kind" : "def"}, {"label" : "apply", "tail" : "(moves: Moves): Option[Moves]", "member" : "provingground.andrewscurtis.AtomicMove.apply", "link" : "provingground\/andrewscurtis\/Conj.html#apply(moves:provingground.andrewscurtis.Moves):Option[provingground.andrewscurtis.Moves]", "kind" : "def"}, {"label" : "apply", "tail" : "(opPres: Option[Presentation]): Option[Presentation]", "member" : "provingground.andrewscurtis.AtomicMove.apply", "link" : "provingground\/andrewscurtis\/Conj.html#apply(opPres:Option[provingground.andrewscurtis.FreeGroups.Presentation]):Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "andThen", "tail" : "(g: (Option[Moves]) ⇒ A): (Moves) ⇒ A", "member" : "scala.Function1.andThen", "link" : "provingground\/andrewscurtis\/Conj.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) ⇒ Moves): (A) ⇒ Option[Moves]", "member" : "scala.Function1.compose", "link" : "provingground\/andrewscurtis\/Conj.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/Conj.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/Conj.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/Conj.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/Conj.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/Conj.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/Conj.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/Conj.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/Conj.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/Conj.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/Conj.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/Conj.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/Conj.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/Conj.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/Conj.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/Conj.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/Conj.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/andrewscurtis\/Conj.html", "kind" : "case class"}, {"name" : "provingground.andrewscurtis.DiffStructure", "shortDescription" : "", "object" : "provingground\/andrewscurtis\/DiffStructure$.html", "members_object" : [{"label" : "genDynamics", "tail" : "(conjFunc: ((FiniteDistribution[M], FiniteDistribution[V])) ⇒ (FiniteDistribution[M], FiniteDistribution[V]))(orig: (FiniteDistribution[M], FiniteDistribution[V])): (FiniteDistribution[M], FiniteDistribution[V])", "member" : "provingground.andrewscurtis.DiffStructure.genDynamics", "link" : "provingground\/andrewscurtis\/DiffStructure$.html#genDynamics(conjFunc:((provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.M],provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.V]))=>(provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.M],provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.V]))(orig:(provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.M],provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.V])):(provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.M],provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.V])", "kind" : "def"}, {"label" : "conjugateByFeedback", "tail" : "(presCntn: Double, wrdCntn: Double, scale: Double)(rank: Int, iterations: Int)(lst: List[M]): ((FiniteDistribution[M], FiniteDistribution[V])) ⇒ (FiniteDistribution[M], FiniteDistribution[V])", "member" : "provingground.andrewscurtis.DiffStructure.conjugateByFeedback", "link" : "provingground\/andrewscurtis\/DiffStructure$.html#conjugateByFeedback(presCntn:Double,wrdCntn:Double,scale:Double)(rank:Int,iterations:Int)(lst:List[provingground.andrewscurtis.DiffStructure.M]):((provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.M],provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.V]))=>(provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.M],provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.V])", "kind" : "def"}, {"label" : "getFeedback", "tail" : "(presCntn: Double, wrdCntn: Double, scale: Double)(dist: FiniteDistribution[P]): FiniteDistribution[P]", "member" : "provingground.andrewscurtis.DiffStructure.getFeedback", "link" : "provingground\/andrewscurtis\/DiffStructure$.html#getFeedback(presCntn:Double,wrdCntn:Double,scale:Double)(dist:provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.P]):provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.P]", "kind" : "def"}, {"label" : "genProjectionMap", "tail" : "(rank: Int, iterations: Int)(lst: List[M]): AdjDiffbleFunction[(FiniteDistribution[M], FiniteDistribution[V]), FiniteDistribution[Presentation]]", "member" : "provingground.andrewscurtis.DiffStructure.genProjectionMap", "link" : "provingground\/andrewscurtis\/DiffStructure$.html#genProjectionMap(rank:Int,iterations:Int)(lst:List[provingground.andrewscurtis.DiffStructure.M]):provingground.learning.AdjDiffbleFunction[(provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.M],provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.V]),provingground.FiniteDistribution[provingground.andrewscurtis.FreeGroups.Presentation]]", "kind" : "def"}, {"label" : "genPresentationMoveFn", "tail" : "(rank: Int): MoveFn[V, Presentation]", "member" : "provingground.andrewscurtis.DiffStructure.genPresentationMoveFn", "link" : "provingground\/andrewscurtis\/DiffStructure$.html#genPresentationMoveFn(rank:Int):provingground.learning.FiniteDistributionLearner.MoveFn[provingground.andrewscurtis.DiffStructure.V,provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "iterateDiff", "tail" : "(lst: List[M], iterations: Int): AdjDiffbleFunction[(FiniteDistribution[M], FiniteDistribution[V]), (FiniteDistribution[M], FiniteDistribution[V])]", "member" : "provingground.andrewscurtis.DiffStructure.iterateDiff", "link" : "provingground\/andrewscurtis\/DiffStructure$.html#iterateDiff(lst:List[provingground.andrewscurtis.DiffStructure.M],iterations:Int):provingground.learning.AdjDiffbleFunction[(provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.M],provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.V]),(provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.M],provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.V])]", "kind" : "def"}, {"label" : "genExtendM", "tail" : "(lst: List[M]): AdjDiffbleFunction[(FiniteDistribution[M], FiniteDistribution[V]), (FiniteDistribution[M], FiniteDistribution[V])]", "member" : "provingground.andrewscurtis.DiffStructure.genExtendM", "link" : "provingground\/andrewscurtis\/DiffStructure$.html#genExtendM(lst:List[provingground.andrewscurtis.DiffStructure.M]):provingground.learning.AdjDiffbleFunction[(provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.M],provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.V]),(provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.M],provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.V])]", "kind" : "def"}, {"label" : "addCollection", "tail" : "(lst: List[M]): AdjDiffbleFunction[(FiniteDistribution[M], FiniteDistribution[V]), FiniteDistribution[V]]", "member" : "provingground.andrewscurtis.DiffStructure.addCollection", "link" : "provingground\/andrewscurtis\/DiffStructure$.html#addCollection(lst:List[provingground.andrewscurtis.DiffStructure.M]):provingground.learning.AdjDiffbleFunction[(provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.M],provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.V]),provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.V]]", "kind" : "def"}, {"label" : "genCollection", "tail" : "(lst: List[M]): List[AdjDiffbleFunction[(FiniteDistribution[M], FiniteDistribution[V]), FiniteDistribution[V]]]", "member" : "provingground.andrewscurtis.DiffStructure.genCollection", "link" : "provingground\/andrewscurtis\/DiffStructure$.html#genCollection(lst:List[provingground.andrewscurtis.DiffStructure.M]):List[provingground.learning.AdjDiffbleFunction[(provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.M],provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.V]),provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.V]]]", "kind" : "def"}, {"label" : "genWtDyn", "tail" : "(mf: M): AdjDiffbleFunction[(FiniteDistribution[M], FiniteDistribution[V]), FiniteDistribution[V]]", "member" : "provingground.andrewscurtis.DiffStructure.genWtDyn", "link" : "provingground\/andrewscurtis\/DiffStructure$.html#genWtDyn(mf:provingground.andrewscurtis.DiffStructure.M):provingground.learning.AdjDiffbleFunction[(provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.M],provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.V]),provingground.FiniteDistribution[provingground.andrewscurtis.DiffStructure.V]]", "kind" : "def"}, {"label" : "genMoveFn", "tail" : "(mf: M): AdjDiffbleFunction[FiniteDistribution[Moves], FiniteDistribution[Moves]]", "member" : "provingground.andrewscurtis.DiffStructure.genMoveFn", "link" : "provingground\/andrewscurtis\/DiffStructure$.html#genMoveFn(mf:provingground.andrewscurtis.DiffStructure.M):provingground.learning.AdjDiffbleFunction[provingground.FiniteDistribution[provingground.andrewscurtis.Moves],provingground.FiniteDistribution[provingground.andrewscurtis.Moves]]", "kind" : "def"}, {"label" : "P", "tail" : "", "member" : "provingground.andrewscurtis.DiffStructure.P", "link" : "provingground\/andrewscurtis\/DiffStructure$.html#P=provingground.andrewscurtis.FreeGroups.Presentation", "kind" : "type"}, {"label" : "V", "tail" : "", "member" : "provingground.andrewscurtis.DiffStructure.V", "link" : "provingground\/andrewscurtis\/DiffStructure$.html#V=provingground.andrewscurtis.Moves", "kind" : "type"}, {"label" : "M", "tail" : "", "member" : "provingground.andrewscurtis.DiffStructure.M", "link" : "provingground\/andrewscurtis\/DiffStructure$.html#M=provingground.andrewscurtis.AtomicMove", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/DiffStructure$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/DiffStructure$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/DiffStructure$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/DiffStructure$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/DiffStructure$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/DiffStructure$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/DiffStructure$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/DiffStructure$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/DiffStructure$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/DiffStructure$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/DiffStructure$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/DiffStructure$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/andrewscurtis\/DiffStructure$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/DiffStructure$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/DiffStructure$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/DiffStructure$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/DiffStructure$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/DiffStructure$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/DiffStructure$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.andrewscurtis.FDHub", "shortDescription" : "Actor controlling (bu not creating) the various loopers for running;maintains info on the state etc.", "object" : "provingground\/andrewscurtis\/FDHub$.html", "members_class" : [{"label" : "receive", "tail" : "(): PartialFunction[Any, Unit]", "member" : "provingground.andrewscurtis.FDHub.receive", "link" : "provingground\/andrewscurtis\/FDHub.html#receive:PartialFunction[Any,Unit]", "kind" : "def"}, {"label" : "states", "tail" : "(): Map[String, State]", "member" : "provingground.andrewscurtis.FDHub.states", "link" : "provingground\/andrewscurtis\/FDHub.html#states:scala.collection.immutable.Map[String,provingground.andrewscurtis.FDHub.State]", "kind" : "def"}, {"label" : "names", "tail" : "(): List[String]", "member" : "provingground.andrewscurtis.FDHub.names", "link" : "provingground\/andrewscurtis\/FDHub.html#names:List[String]", "kind" : "def"}, {"label" : "loopers", "tail" : ": Map[ActorRef, State]", "member" : "provingground.andrewscurtis.FDHub.loopers", "link" : "provingground\/andrewscurtis\/FDHub.html#loopers:Map[akka.actor.ActorRef,provingground.andrewscurtis.FDHub.State]", "kind" : "var"}, {"member" : "provingground.andrewscurtis.FDHub#<init>", "error" : "unsupported entity"}, {"label" : "unhandled", "tail" : "(message: Any): Unit", "member" : "akka.actor.Actor.unhandled", "link" : "provingground\/andrewscurtis\/FDHub.html#unhandled(message:Any):Unit", "kind" : "def"}, {"label" : "postRestart", "tail" : "(reason: Throwable): Unit", "member" : "akka.actor.Actor.postRestart", "link" : "provingground\/andrewscurtis\/FDHub.html#postRestart(reason:Throwable):Unit", "kind" : "def"}, {"label" : "preRestart", "tail" : "(reason: Throwable, message: Option[Any]): Unit", "member" : "akka.actor.Actor.preRestart", "link" : "provingground\/andrewscurtis\/FDHub.html#preRestart(reason:Throwable,message:Option[Any]):Unit", "kind" : "def"}, {"label" : "postStop", "tail" : "(): Unit", "member" : "akka.actor.Actor.postStop", "link" : "provingground\/andrewscurtis\/FDHub.html#postStop():Unit", "kind" : "def"}, {"label" : "preStart", "tail" : "(): Unit", "member" : "akka.actor.Actor.preStart", "link" : "provingground\/andrewscurtis\/FDHub.html#preStart():Unit", "kind" : "def"}, {"label" : "supervisorStrategy", "tail" : "(): SupervisorStrategy", "member" : "akka.actor.Actor.supervisorStrategy", "link" : "provingground\/andrewscurtis\/FDHub.html#supervisorStrategy:akka.actor.SupervisorStrategy", "kind" : "def"}, {"label" : "aroundPostRestart", "tail" : "(reason: Throwable): Unit", "member" : "akka.actor.Actor.aroundPostRestart", "link" : "provingground\/andrewscurtis\/FDHub.html#aroundPostRestart(reason:Throwable):Unit", "kind" : "def"}, {"label" : "aroundPreRestart", "tail" : "(reason: Throwable, message: Option[Any]): Unit", "member" : "akka.actor.Actor.aroundPreRestart", "link" : "provingground\/andrewscurtis\/FDHub.html#aroundPreRestart(reason:Throwable,message:Option[Any]):Unit", "kind" : "def"}, {"label" : "aroundPostStop", "tail" : "(): Unit", "member" : "akka.actor.Actor.aroundPostStop", "link" : "provingground\/andrewscurtis\/FDHub.html#aroundPostStop():Unit", "kind" : "def"}, {"label" : "aroundPreStart", "tail" : "(): Unit", "member" : "akka.actor.Actor.aroundPreStart", "link" : "provingground\/andrewscurtis\/FDHub.html#aroundPreStart():Unit", "kind" : "def"}, {"label" : "aroundReceive", "tail" : "(receive: akka.actor.Actor.Receive, msg: Any): Unit", "member" : "akka.actor.Actor.aroundReceive", "link" : "provingground\/andrewscurtis\/FDHub.html#aroundReceive(receive:akka.actor.Actor.Receive,msg:Any):Unit", "kind" : "def"}, {"label" : "sender", "tail" : "(): ActorRef", "member" : "akka.actor.Actor.sender", "link" : "provingground\/andrewscurtis\/FDHub.html#sender():akka.actor.ActorRef", "kind" : "final def"}, {"label" : "self", "tail" : ": ActorRef", "member" : "akka.actor.Actor.self", "link" : "provingground\/andrewscurtis\/FDHub.html#self:akka.actor.ActorRef", "kind" : "implicit final val"}, {"label" : "context", "tail" : ": ActorContext", "member" : "akka.actor.Actor.context", "link" : "provingground\/andrewscurtis\/FDHub.html#context:akka.actor.ActorContext", "kind" : "implicit val"}, {"label" : "Receive", "tail" : "", "member" : "akka.actor.Actor.Receive", "link" : "provingground\/andrewscurtis\/FDHub.html#Receive=akka.actor.Actor.Receive", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/FDHub.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/FDHub.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/FDHub.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/FDHub.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/FDHub.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/FDHub.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/FDHub.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/FDHub.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/FDHub.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/FDHub.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/FDHub.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/FDHub.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/andrewscurtis\/FDHub.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/FDHub.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/FDHub.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/FDHub.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/FDHub.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/FDHub.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/FDHub.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "setEpsilon", "tail" : "(runner: ActorRef, epsilon: Double)(hub: ActorRef): Unit", "member" : "provingground.andrewscurtis.FDHub.setEpsilon", "link" : "provingground\/andrewscurtis\/FDHub$.html#setEpsilon(runner:akka.actor.ActorRef,epsilon:Double)(implicithub:akka.actor.ActorRef):Unit", "kind" : "def"}, {"label" : "setStrictness", "tail" : "(runner: ActorRef, strictness: Double)(hub: ActorRef): Unit", "member" : "provingground.andrewscurtis.FDHub.setStrictness", "link" : "provingground\/andrewscurtis\/FDHub$.html#setStrictness(runner:akka.actor.ActorRef,strictness:Double)(implicithub:akka.actor.ActorRef):Unit", "kind" : "def"}, {"label" : "setSteps", "tail" : "(runner: ActorRef, steps: Int)(hub: ActorRef): Unit", "member" : "provingground.andrewscurtis.FDHub.setSteps", "link" : "provingground\/andrewscurtis\/FDHub$.html#setSteps(runner:akka.actor.ActorRef,steps:Int)(implicithub:akka.actor.ActorRef):Unit", "kind" : "def"}, {"label" : "setParam", "tail" : "(runner: ActorRef, steps: Int, strictness: Double, epsilon: Double)(hub: ActorRef): Unit", "member" : "provingground.andrewscurtis.FDHub.setParam", "link" : "provingground\/andrewscurtis\/FDHub$.html#setParam(runner:akka.actor.ActorRef,steps:Int,strictness:Double,epsilon:Double)(implicithub:akka.actor.ActorRef):Unit", "kind" : "def"}, {"label" : "resume", "tail" : "(runner: ActorRef)(hub: ActorRef): Unit", "member" : "provingground.andrewscurtis.FDHub.resume", "link" : "provingground\/andrewscurtis\/FDHub$.html#resume(runner:akka.actor.ActorRef)(implicithub:akka.actor.ActorRef):Unit", "kind" : "def"}, {"label" : "pause", "tail" : "(runner: ActorRef)(hub: ActorRef): Unit", "member" : "provingground.andrewscurtis.FDHub.pause", "link" : "provingground\/andrewscurtis\/FDHub$.html#pause(runner:akka.actor.ActorRef)(implicithub:akka.actor.ActorRef):Unit", "kind" : "def"}, {"label" : "start", "tail" : "(runner: ActorRef, steps: Int, strictness: Double, epsilon: Double)(hub: ActorRef): Unit", "member" : "provingground.andrewscurtis.FDHub.start", "link" : "provingground\/andrewscurtis\/FDHub$.html#start(runner:akka.actor.ActorRef,steps:Int,strictness:Double,epsilon:Double)(implicithub:akka.actor.ActorRef):Unit", "kind" : "def"}, {"label" : "states", "tail" : "(hub: ActorRef): Future[Map[String, State]]", "member" : "provingground.andrewscurtis.FDHub.states", "link" : "provingground\/andrewscurtis\/FDHub$.html#states(implicithub:akka.actor.ActorRef):scala.concurrent.Future[Map[String,provingground.andrewscurtis.FDHub.State]]", "kind" : "def"}, {"label" : "loopers", "tail" : "(hub: ActorRef): Future[List[String]]", "member" : "provingground.andrewscurtis.FDHub.loopers", "link" : "provingground\/andrewscurtis\/FDHub$.html#loopers(implicithub:akka.actor.ActorRef):scala.concurrent.Future[List[String]]", "kind" : "def"}, {"label" : "timeout", "tail" : ": Timeout", "member" : "provingground.andrewscurtis.FDHub.timeout", "link" : "provingground\/andrewscurtis\/FDHub$.html#timeout:akka.util.Timeout", "kind" : "implicit val"}, {"label" : "stop", "tail" : "(hub: ActorRef): Unit", "member" : "provingground.andrewscurtis.FDHub.stop", "link" : "provingground\/andrewscurtis\/FDHub$.html#stop(implicithub:akka.actor.ActorRef):Unit", "kind" : "def"}, {"label" : "stopHub", "tail" : "(hub: ActorRef): Unit", "member" : "provingground.andrewscurtis.FDHub.stopHub", "link" : "provingground\/andrewscurtis\/FDHub$.html#stopHub(implicithub:akka.actor.ActorRef):Unit", "kind" : "def"}, {"label" : "startHub", "tail" : "(name: String): ActorRef", "member" : "provingground.andrewscurtis.FDHub.startHub", "link" : "provingground\/andrewscurtis\/FDHub$.html#startHub(name:String):akka.actor.ActorRef", "kind" : "def"}, {"label" : "props", "tail" : "(): Props", "member" : "provingground.andrewscurtis.FDHub.props", "link" : "provingground\/andrewscurtis\/FDHub$.html#props:akka.actor.Props", "kind" : "def"}, {"label" : "Resume", "tail" : "", "member" : "provingground.andrewscurtis.FDHub.Resume", "link" : "provingground\/andrewscurtis\/FDHub$.html#ResumeextendsProductwithSerializable", "kind" : "case class"}, {"label" : "Stopping", "tail" : "", "member" : "provingground.andrewscurtis.FDHub.Stopping", "link" : "provingground\/andrewscurtis\/FDHub$.html#StoppingextendsProductwithSerializable", "kind" : "case class"}, {"label" : "StopHub", "tail" : "", "member" : "provingground.andrewscurtis.FDHub.StopHub", "link" : "provingground\/andrewscurtis\/FDHub$.html#StopHub", "kind" : "object"}, {"label" : "Pause", "tail" : "", "member" : "provingground.andrewscurtis.FDHub.Pause", "link" : "provingground\/andrewscurtis\/FDHub$.html#PauseextendsProductwithSerializable", "kind" : "case class"}, {"label" : "SetEpsilon", "tail" : "", "member" : "provingground.andrewscurtis.FDHub.SetEpsilon", "link" : "provingground\/andrewscurtis\/FDHub$.html#SetEpsilonextendsProductwithSerializable", "kind" : "case class"}, {"label" : "SetStrictness", "tail" : "", "member" : "provingground.andrewscurtis.FDHub.SetStrictness", "link" : "provingground\/andrewscurtis\/FDHub$.html#SetStrictnessextendsProductwithSerializable", "kind" : "case class"}, {"label" : "SetSteps", "tail" : "", "member" : "provingground.andrewscurtis.FDHub.SetSteps", "link" : "provingground\/andrewscurtis\/FDHub$.html#SetStepsextendsProductwithSerializable", "kind" : "case class"}, {"label" : "SetParam", "tail" : "", "member" : "provingground.andrewscurtis.FDHub.SetParam", "link" : "provingground\/andrewscurtis\/FDHub$.html#SetParamextendsProductwithSerializable", "kind" : "case class"}, {"label" : "State", "tail" : "", "member" : "provingground.andrewscurtis.FDHub.State", "link" : "provingground\/andrewscurtis\/FDHub$.html#StateextendsProductwithSerializable", "kind" : "case class"}, {"label" : "StartAll", "tail" : "", "member" : "provingground.andrewscurtis.FDHub.StartAll", "link" : "provingground\/andrewscurtis\/FDHub$.html#StartAllextendsProductwithSerializable", "kind" : "case class"}, {"label" : "Start", "tail" : "", "member" : "provingground.andrewscurtis.FDHub.Start", "link" : "provingground\/andrewscurtis\/FDHub$.html#StartextendsProductwithSerializable", "kind" : "case class"}, {"label" : "Done", "tail" : "", "member" : "provingground.andrewscurtis.FDHub.Done", "link" : "provingground\/andrewscurtis\/FDHub$.html#DoneextendsProductwithSerializable", "kind" : "case class"}, {"label" : "States", "tail" : "", "member" : "provingground.andrewscurtis.FDHub.States", "link" : "provingground\/andrewscurtis\/FDHub$.html#States", "kind" : "object"}, {"label" : "Loopers", "tail" : "", "member" : "provingground.andrewscurtis.FDHub.Loopers", "link" : "provingground\/andrewscurtis\/FDHub$.html#Loopers", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/FDHub$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/FDHub$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/FDHub$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/FDHub$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/FDHub$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/FDHub$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/FDHub$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/FDHub$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/FDHub$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/FDHub$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/FDHub$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/FDHub$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/andrewscurtis\/FDHub$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/FDHub$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/FDHub$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/FDHub$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/FDHub$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/FDHub$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/FDHub$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/andrewscurtis\/FDHub.html", "kind" : "class"}, {"name" : "provingground.andrewscurtis.FDLooper", "shortDescription" : "", "object" : "provingground\/andrewscurtis\/FDLooper$.html", "members_class" : [{"label" : "receive", "tail" : "(): PartialFunction[Any, Unit]", "member" : "provingground.andrewscurtis.FDLooper.receive", "link" : "provingground\/andrewscurtis\/FDLooper.html#receive:PartialFunction[Any,Unit]", "kind" : "def"}, {"label" : "shift", "tail" : "(start: X, strictness: Double, steps: Int, epsilon: Double): X", "member" : "provingground.andrewscurtis.FDLooper.shift", "link" : "provingground\/andrewscurtis\/FDLooper.html#shift(start:X,strictness:Double,steps:Int,epsilon:Double):X", "kind" : "def"}, {"label" : "snapShot", "tail" : "(x: X): SnapShot[X, P]", "member" : "provingground.andrewscurtis.FDLooper.snapShot", "link" : "provingground\/andrewscurtis\/FDLooper.html#snapShot(x:X):provingground.learning.SnapShot[X,P]", "kind" : "def"}, {"label" : "state", "tail" : ": X", "member" : "provingground.andrewscurtis.FDLooper.state", "link" : "provingground\/andrewscurtis\/FDLooper.html#state:X", "kind" : "var"}, {"label" : "loops", "tail" : ": Int", "member" : "provingground.andrewscurtis.FDLooper.loops", "link" : "provingground\/andrewscurtis\/FDLooper.html#loops:Int", "kind" : "var"}, {"member" : "provingground.andrewscurtis.FDLooper#<init>", "error" : "unsupported entity"}, {"label" : "param", "tail" : ": P", "member" : "provingground.andrewscurtis.FDLooper.param", "link" : "provingground\/andrewscurtis\/FDLooper.html#param:P", "kind" : "val"}, {"label" : "unhandled", "tail" : "(message: Any): Unit", "member" : "akka.actor.Actor.unhandled", "link" : "provingground\/andrewscurtis\/FDLooper.html#unhandled(message:Any):Unit", "kind" : "def"}, {"label" : "postRestart", "tail" : "(reason: Throwable): Unit", "member" : "akka.actor.Actor.postRestart", "link" : "provingground\/andrewscurtis\/FDLooper.html#postRestart(reason:Throwable):Unit", "kind" : "def"}, {"label" : "preRestart", "tail" : "(reason: Throwable, message: Option[Any]): Unit", "member" : "akka.actor.Actor.preRestart", "link" : "provingground\/andrewscurtis\/FDLooper.html#preRestart(reason:Throwable,message:Option[Any]):Unit", "kind" : "def"}, {"label" : "postStop", "tail" : "(): Unit", "member" : "akka.actor.Actor.postStop", "link" : "provingground\/andrewscurtis\/FDLooper.html#postStop():Unit", "kind" : "def"}, {"label" : "preStart", "tail" : "(): Unit", "member" : "akka.actor.Actor.preStart", "link" : "provingground\/andrewscurtis\/FDLooper.html#preStart():Unit", "kind" : "def"}, {"label" : "supervisorStrategy", "tail" : "(): SupervisorStrategy", "member" : "akka.actor.Actor.supervisorStrategy", "link" : "provingground\/andrewscurtis\/FDLooper.html#supervisorStrategy:akka.actor.SupervisorStrategy", "kind" : "def"}, {"label" : "aroundPostRestart", "tail" : "(reason: Throwable): Unit", "member" : "akka.actor.Actor.aroundPostRestart", "link" : "provingground\/andrewscurtis\/FDLooper.html#aroundPostRestart(reason:Throwable):Unit", "kind" : "def"}, {"label" : "aroundPreRestart", "tail" : "(reason: Throwable, message: Option[Any]): Unit", "member" : "akka.actor.Actor.aroundPreRestart", "link" : "provingground\/andrewscurtis\/FDLooper.html#aroundPreRestart(reason:Throwable,message:Option[Any]):Unit", "kind" : "def"}, {"label" : "aroundPostStop", "tail" : "(): Unit", "member" : "akka.actor.Actor.aroundPostStop", "link" : "provingground\/andrewscurtis\/FDLooper.html#aroundPostStop():Unit", "kind" : "def"}, {"label" : "aroundPreStart", "tail" : "(): Unit", "member" : "akka.actor.Actor.aroundPreStart", "link" : "provingground\/andrewscurtis\/FDLooper.html#aroundPreStart():Unit", "kind" : "def"}, {"label" : "aroundReceive", "tail" : "(receive: akka.actor.Actor.Receive, msg: Any): Unit", "member" : "akka.actor.Actor.aroundReceive", "link" : "provingground\/andrewscurtis\/FDLooper.html#aroundReceive(receive:akka.actor.Actor.Receive,msg:Any):Unit", "kind" : "def"}, {"label" : "sender", "tail" : "(): ActorRef", "member" : "akka.actor.Actor.sender", "link" : "provingground\/andrewscurtis\/FDLooper.html#sender():akka.actor.ActorRef", "kind" : "final def"}, {"label" : "self", "tail" : ": ActorRef", "member" : "akka.actor.Actor.self", "link" : "provingground\/andrewscurtis\/FDLooper.html#self:akka.actor.ActorRef", "kind" : "implicit final val"}, {"label" : "context", "tail" : ": ActorContext", "member" : "akka.actor.Actor.context", "link" : "provingground\/andrewscurtis\/FDLooper.html#context:akka.actor.ActorContext", "kind" : "implicit val"}, {"label" : "Receive", "tail" : "", "member" : "akka.actor.Actor.Receive", "link" : "provingground\/andrewscurtis\/FDLooper.html#Receive=akka.actor.Actor.Receive", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/FDLooper.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/FDLooper.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/FDLooper.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/FDLooper.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/FDLooper.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/FDLooper.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/FDLooper.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/FDLooper.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/FDLooper.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/FDLooper.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/FDLooper.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/FDLooper.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/andrewscurtis\/FDLooper.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/FDLooper.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/FDLooper.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/FDLooper.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/FDLooper.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/FDLooper.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/FDLooper.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "RunnerStop", "tail" : "", "member" : "provingground.andrewscurtis.FDLooper.RunnerStop", "link" : "provingground\/andrewscurtis\/FDLooper$.html#RunnerStop", "kind" : "object"}, {"label" : "Continue", "tail" : "", "member" : "provingground.andrewscurtis.FDLooper.Continue", "link" : "provingground\/andrewscurtis\/FDLooper$.html#ContinueextendsProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/FDLooper$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/FDLooper$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/FDLooper$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/FDLooper$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/FDLooper$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/FDLooper$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/FDLooper$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/FDLooper$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/FDLooper$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/FDLooper$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/FDLooper$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/FDLooper$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/andrewscurtis\/FDLooper$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/FDLooper$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/FDLooper$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/FDLooper$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/FDLooper$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/FDLooper$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/FDLooper$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/andrewscurtis\/FDLooper.html", "kind" : "object"}, {"name" : "provingground.andrewscurtis.FDSrc", "members_trait" : [{"label" : "receive", "tail" : "(): PartialFunction[Any, Unit]", "member" : "provingground.andrewscurtis.FDSrc.receive", "link" : "provingground\/andrewscurtis\/FDSrc.html#receive:PartialFunction[Any,Unit]", "kind" : "def"}, {"label" : "unhandled", "tail" : "(message: Any): Unit", "member" : "akka.actor.Actor.unhandled", "link" : "provingground\/andrewscurtis\/FDSrc.html#unhandled(message:Any):Unit", "kind" : "def"}, {"label" : "postRestart", "tail" : "(reason: Throwable): Unit", "member" : "akka.actor.Actor.postRestart", "link" : "provingground\/andrewscurtis\/FDSrc.html#postRestart(reason:Throwable):Unit", "kind" : "def"}, {"label" : "preRestart", "tail" : "(reason: Throwable, message: Option[Any]): Unit", "member" : "akka.actor.Actor.preRestart", "link" : "provingground\/andrewscurtis\/FDSrc.html#preRestart(reason:Throwable,message:Option[Any]):Unit", "kind" : "def"}, {"label" : "postStop", "tail" : "(): Unit", "member" : "akka.actor.Actor.postStop", "link" : "provingground\/andrewscurtis\/FDSrc.html#postStop():Unit", "kind" : "def"}, {"label" : "preStart", "tail" : "(): Unit", "member" : "akka.actor.Actor.preStart", "link" : "provingground\/andrewscurtis\/FDSrc.html#preStart():Unit", "kind" : "def"}, {"label" : "supervisorStrategy", "tail" : "(): SupervisorStrategy", "member" : "akka.actor.Actor.supervisorStrategy", "link" : "provingground\/andrewscurtis\/FDSrc.html#supervisorStrategy:akka.actor.SupervisorStrategy", "kind" : "def"}, {"label" : "aroundPostRestart", "tail" : "(reason: Throwable): Unit", "member" : "akka.actor.Actor.aroundPostRestart", "link" : "provingground\/andrewscurtis\/FDSrc.html#aroundPostRestart(reason:Throwable):Unit", "kind" : "def"}, {"label" : "aroundPreRestart", "tail" : "(reason: Throwable, message: Option[Any]): Unit", "member" : "akka.actor.Actor.aroundPreRestart", "link" : "provingground\/andrewscurtis\/FDSrc.html#aroundPreRestart(reason:Throwable,message:Option[Any]):Unit", "kind" : "def"}, {"label" : "aroundPostStop", "tail" : "(): Unit", "member" : "akka.actor.Actor.aroundPostStop", "link" : "provingground\/andrewscurtis\/FDSrc.html#aroundPostStop():Unit", "kind" : "def"}, {"label" : "aroundPreStart", "tail" : "(): Unit", "member" : "akka.actor.Actor.aroundPreStart", "link" : "provingground\/andrewscurtis\/FDSrc.html#aroundPreStart():Unit", "kind" : "def"}, {"label" : "aroundReceive", "tail" : "(receive: akka.actor.Actor.Receive, msg: Any): Unit", "member" : "akka.actor.Actor.aroundReceive", "link" : "provingground\/andrewscurtis\/FDSrc.html#aroundReceive(receive:akka.actor.Actor.Receive,msg:Any):Unit", "kind" : "def"}, {"label" : "sender", "tail" : "(): ActorRef", "member" : "akka.actor.Actor.sender", "link" : "provingground\/andrewscurtis\/FDSrc.html#sender():akka.actor.ActorRef", "kind" : "final def"}, {"label" : "self", "tail" : ": ActorRef", "member" : "akka.actor.Actor.self", "link" : "provingground\/andrewscurtis\/FDSrc.html#self:akka.actor.ActorRef", "kind" : "implicit final val"}, {"label" : "context", "tail" : ": ActorContext", "member" : "akka.actor.Actor.context", "link" : "provingground\/andrewscurtis\/FDSrc.html#context:akka.actor.ActorContext", "kind" : "implicit val"}, {"label" : "Receive", "tail" : "", "member" : "akka.actor.Actor.Receive", "link" : "provingground\/andrewscurtis\/FDSrc.html#Receive=akka.actor.Actor.Receive", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/FDSrc.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/FDSrc.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/FDSrc.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/FDSrc.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/FDSrc.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/FDSrc.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/FDSrc.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/FDSrc.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/FDSrc.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/FDSrc.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/FDSrc.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/FDSrc.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/andrewscurtis\/FDSrc.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/FDSrc.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/FDSrc.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/FDSrc.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/FDSrc.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/FDSrc.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/FDSrc.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "save", "tail" : "(): (SnapShot[X, P]) ⇒ Unit", "member" : "provingground.andrewscurtis.FDSrc.save", "link" : "provingground\/andrewscurtis\/FDSrc.html#save:provingground.learning.SnapShot[X,P]=>Unit", "kind" : "abstract def"}], "shortDescription" : "Actor saving snapshots, typically materialized from an akka Source", "trait" : "provingground\/andrewscurtis\/FDSrc.html", "kind" : "trait"}, {"name" : "provingground.andrewscurtis.FreeGroups", "shortDescription" : "", "object" : "provingground\/andrewscurtis\/FreeGroups$.html", "members_object" : [{"label" : "readPres", "tail" : "(): ReadString[Presentation]", "member" : "provingground.andrewscurtis.FreeGroups.readPres", "link" : "provingground\/andrewscurtis\/FreeGroups$.html#readPres:provingground.translation.StringParse.ReadString[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "implicit def"}, {"label" : "readWord", "tail" : "(): ReadString[Word]", "member" : "provingground.andrewscurtis.FreeGroups.readWord", "link" : "provingground\/andrewscurtis\/FreeGroups$.html#readWord:provingground.translation.StringParse.ReadString[provingground.andrewscurtis.FreeGroups.Word]", "kind" : "implicit def"}, {"label" : "writePres", "tail" : "(): WriteString[Presentation]", "member" : "provingground.andrewscurtis.FreeGroups.writePres", "link" : "provingground\/andrewscurtis\/FreeGroups$.html#writePres:provingground.translation.StringParse.WriteString[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "implicit def"}, {"label" : "writeWord", "tail" : "(): WriteString[Word]", "member" : "provingground.andrewscurtis.FreeGroups.writeWord", "link" : "provingground\/andrewscurtis\/FreeGroups$.html#writeWord:provingground.translation.StringParse.WriteString[provingground.andrewscurtis.FreeGroups.Word]", "kind" : "implicit def"}, {"label" : "nullpres", "tail" : ": Presentation", "member" : "provingground.andrewscurtis.FreeGroups.nullpres", "link" : "provingground\/andrewscurtis\/FreeGroups$.html#nullpres:provingground.andrewscurtis.FreeGroups.Presentation", "kind" : "val"}, {"label" : "presentationWeight", "tail" : "(pres: Presentation, presCntn: Double, wrdCntn: Double): Double", "member" : "provingground.andrewscurtis.FreeGroups.presentationWeight", "link" : "provingground\/andrewscurtis\/FreeGroups$.html#presentationWeight(pres:provingground.andrewscurtis.FreeGroups.Presentation,presCntn:Double,wrdCntn:Double):Double", "kind" : "def"}, {"label" : "Presentation", "tail" : "", "member" : "provingground.andrewscurtis.FreeGroups.Presentation", "link" : "provingground\/andrewscurtis\/FreeGroups$.html#Presentation", "kind" : "object"}, {"label" : "Presentation", "tail" : "", "member" : "provingground.andrewscurtis.FreeGroups.Presentation", "link" : "provingground\/andrewscurtis\/FreeGroups$.html#PresentationextendsProductwithSerializable", "kind" : "case class"}, {"label" : "wordWeight", "tail" : "(w: Word, wrdCntn: Double, rank: Double): Double", "member" : "provingground.andrewscurtis.FreeGroups.wordWeight", "link" : "provingground\/andrewscurtis\/FreeGroups$.html#wordWeight(w:provingground.andrewscurtis.FreeGroups.Word,wrdCntn:Double,rank:Double):Double", "kind" : "def"}, {"label" : "Word", "tail" : "", "member" : "provingground.andrewscurtis.FreeGroups.Word", "link" : "provingground\/andrewscurtis\/FreeGroups$.html#WordextendsAnyValwithProductwithSerializable", "kind" : "final case class"}, {"label" : "Word", "tail" : "", "member" : "provingground.andrewscurtis.FreeGroups.Word", "link" : "provingground\/andrewscurtis\/FreeGroups$.html#Word", "kind" : "object"}, {"label" : "letterUnic", "tail" : "(n: Int): String", "member" : "provingground.andrewscurtis.FreeGroups.letterUnic", "link" : "provingground\/andrewscurtis\/FreeGroups$.html#letterUnic(n:Int):String", "kind" : "def"}, {"label" : "letterString", "tail" : "(n: Int): String", "member" : "provingground.andrewscurtis.FreeGroups.letterString", "link" : "provingground\/andrewscurtis\/FreeGroups$.html#letterString(n:Int):String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/FreeGroups$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/FreeGroups$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/FreeGroups$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/FreeGroups$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/FreeGroups$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/FreeGroups$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/FreeGroups$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/FreeGroups$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/FreeGroups$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/FreeGroups$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/FreeGroups$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/FreeGroups$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/andrewscurtis\/FreeGroups$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/FreeGroups$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/FreeGroups$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/FreeGroups$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/FreeGroups$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/FreeGroups$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/FreeGroups$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.andrewscurtis.Id", "shortDescription" : "", "object" : "provingground\/andrewscurtis\/Id$.html", "members_object" : [{"label" : "rw", "tail" : "(): upickle.default.ReadWriter[Inv]", "member" : "provingground.andrewscurtis.Id.rw", "link" : "provingground\/andrewscurtis\/Id$.html#rw:upickle.default.ReadWriter[provingground.andrewscurtis.Inv]", "kind" : "implicit def"}, {"label" : "movesDF", "tail" : "(): AdjDiffbleFunction[FiniteDistribution[Moves], FiniteDistribution[Moves]]", "member" : "provingground.andrewscurtis.Id.movesDF", "link" : "provingground\/andrewscurtis\/Id$.html#movesDF:provingground.learning.AdjDiffbleFunction[provingground.FiniteDistribution[provingground.andrewscurtis.Moves],provingground.FiniteDistribution[provingground.andrewscurtis.Moves]]", "kind" : "def"}, {"label" : "apply", "tail" : "(pres: Presentation): Some[Presentation]", "member" : "provingground.andrewscurtis.Id.apply", "link" : "provingground\/andrewscurtis\/Id$.html#apply(pres:provingground.andrewscurtis.FreeGroups.Presentation):Some[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "provingground.andrewscurtis.AtomicMove.toString", "link" : "provingground\/andrewscurtis\/Id$.html#toString():String", "kind" : "def"}, {"label" : "toLatex", "tail" : "(): String", "member" : "provingground.andrewscurtis.AtomicMove.toLatex", "link" : "provingground\/andrewscurtis\/Id$.html#toLatex:String", "kind" : "def"}, {"label" : "toPlainString", "tail" : "(): String", "member" : "provingground.andrewscurtis.AtomicMove.toPlainString", "link" : "provingground\/andrewscurtis\/Id$.html#toPlainString:String", "kind" : "def"}, {"label" : "toFunc", "tail" : "(): (Presentation) ⇒ Option[Presentation]", "member" : "provingground.andrewscurtis.AtomicMove.toFunc", "link" : "provingground\/andrewscurtis\/Id$.html#toFunc:provingground.andrewscurtis.FreeGroups.Presentation=>Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "compose", "tail" : "(mf: AtomicMove): Moves", "member" : "provingground.andrewscurtis.AtomicMove.compose", "link" : "provingground\/andrewscurtis\/Id$.html#compose(mf:provingground.andrewscurtis.AtomicMove):provingground.andrewscurtis.Moves", "kind" : "def"}, {"label" : "actOnPres", "tail" : "(fdPres: FiniteDistribution[Presentation]): FiniteDistribution[Presentation]", "member" : "provingground.andrewscurtis.AtomicMove.actOnPres", "link" : "provingground\/andrewscurtis\/Id$.html#actOnPres(fdPres:provingground.FiniteDistribution[provingground.andrewscurtis.FreeGroups.Presentation]):provingground.FiniteDistribution[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "actOnMoves", "tail" : "(moves: Moves): Option[Moves]", "member" : "provingground.andrewscurtis.AtomicMove.actOnMoves", "link" : "provingground\/andrewscurtis\/Id$.html#actOnMoves(moves:provingground.andrewscurtis.Moves):Option[provingground.andrewscurtis.Moves]", "kind" : "def"}, {"label" : "apply", "tail" : "(fdVertices: FiniteDistribution[Moves]): FiniteDistribution[Moves]", "member" : "provingground.andrewscurtis.AtomicMove.apply", "link" : "provingground\/andrewscurtis\/Id$.html#apply(fdVertices:provingground.FiniteDistribution[provingground.andrewscurtis.Moves]):provingground.FiniteDistribution[provingground.andrewscurtis.Moves]", "kind" : "def"}, {"label" : "apply", "tail" : "(moves: Moves): Option[Moves]", "member" : "provingground.andrewscurtis.AtomicMove.apply", "link" : "provingground\/andrewscurtis\/Id$.html#apply(moves:provingground.andrewscurtis.Moves):Option[provingground.andrewscurtis.Moves]", "kind" : "def"}, {"label" : "apply", "tail" : "(opPres: Option[Presentation]): Option[Presentation]", "member" : "provingground.andrewscurtis.AtomicMove.apply", "link" : "provingground\/andrewscurtis\/Id$.html#apply(opPres:Option[provingground.andrewscurtis.FreeGroups.Presentation]):Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "andThen", "tail" : "(g: (Option[Moves]) ⇒ A): (Moves) ⇒ A", "member" : "scala.Function1.andThen", "link" : "provingground\/andrewscurtis\/Id$.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) ⇒ Moves): (A) ⇒ Option[Moves]", "member" : "scala.Function1.compose", "link" : "provingground\/andrewscurtis\/Id$.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/Id$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/Id$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/Id$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/Id$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/Id$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/Id$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/Id$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/Id$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/Id$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/Id$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/Id$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/Id$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/Id$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/Id$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/Id$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/Id$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/Id$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.andrewscurtis.Inv", "shortDescription" : "", "object" : "provingground\/andrewscurtis\/Inv$.html", "members_object" : [{"label" : "rw", "tail" : "(): upickle.default.ReadWriter[Inv]", "member" : "provingground.andrewscurtis.Inv.rw", "link" : "provingground\/andrewscurtis\/Inv$.html#rw:upickle.default.ReadWriter[provingground.andrewscurtis.Inv]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/Inv$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/Inv$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/Inv$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/Inv$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/Inv$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/Inv$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/Inv$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/Inv$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/Inv$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/Inv$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/Inv$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/Inv$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/andrewscurtis\/Inv$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/Inv$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/Inv$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/Inv$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/Inv$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/Inv$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/Inv$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "apply", "tail" : "(pres: Presentation): Option[Presentation]", "member" : "provingground.andrewscurtis.Inv.apply", "link" : "provingground\/andrewscurtis\/Inv.html#apply(pres:provingground.andrewscurtis.FreeGroups.Presentation):Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"member" : "provingground.andrewscurtis.Inv#<init>", "error" : "unsupported entity"}, {"label" : "k", "tail" : ": Int", "member" : "provingground.andrewscurtis.Inv.k", "link" : "provingground\/andrewscurtis\/Inv.html#k:Int", "kind" : "val"}, {"label" : "toString", "tail" : "(): String", "member" : "provingground.andrewscurtis.AtomicMove.toString", "link" : "provingground\/andrewscurtis\/Inv.html#toString():String", "kind" : "def"}, {"label" : "toLatex", "tail" : "(): String", "member" : "provingground.andrewscurtis.AtomicMove.toLatex", "link" : "provingground\/andrewscurtis\/Inv.html#toLatex:String", "kind" : "def"}, {"label" : "toPlainString", "tail" : "(): String", "member" : "provingground.andrewscurtis.AtomicMove.toPlainString", "link" : "provingground\/andrewscurtis\/Inv.html#toPlainString:String", "kind" : "def"}, {"label" : "toFunc", "tail" : "(): (Presentation) ⇒ Option[Presentation]", "member" : "provingground.andrewscurtis.AtomicMove.toFunc", "link" : "provingground\/andrewscurtis\/Inv.html#toFunc:provingground.andrewscurtis.FreeGroups.Presentation=>Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "compose", "tail" : "(mf: AtomicMove): Moves", "member" : "provingground.andrewscurtis.AtomicMove.compose", "link" : "provingground\/andrewscurtis\/Inv.html#compose(mf:provingground.andrewscurtis.AtomicMove):provingground.andrewscurtis.Moves", "kind" : "def"}, {"label" : "actOnPres", "tail" : "(fdPres: FiniteDistribution[Presentation]): FiniteDistribution[Presentation]", "member" : "provingground.andrewscurtis.AtomicMove.actOnPres", "link" : "provingground\/andrewscurtis\/Inv.html#actOnPres(fdPres:provingground.FiniteDistribution[provingground.andrewscurtis.FreeGroups.Presentation]):provingground.FiniteDistribution[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "movesDF", "tail" : "(): AdjDiffbleFunction[FiniteDistribution[Moves], FiniteDistribution[Moves]]", "member" : "provingground.andrewscurtis.AtomicMove.movesDF", "link" : "provingground\/andrewscurtis\/Inv.html#movesDF:provingground.learning.AdjDiffbleFunction[provingground.FiniteDistribution[provingground.andrewscurtis.Moves],provingground.FiniteDistribution[provingground.andrewscurtis.Moves]]", "kind" : "def"}, {"label" : "actOnMoves", "tail" : "(moves: Moves): Option[Moves]", "member" : "provingground.andrewscurtis.AtomicMove.actOnMoves", "link" : "provingground\/andrewscurtis\/Inv.html#actOnMoves(moves:provingground.andrewscurtis.Moves):Option[provingground.andrewscurtis.Moves]", "kind" : "def"}, {"label" : "apply", "tail" : "(fdVertices: FiniteDistribution[Moves]): FiniteDistribution[Moves]", "member" : "provingground.andrewscurtis.AtomicMove.apply", "link" : "provingground\/andrewscurtis\/Inv.html#apply(fdVertices:provingground.FiniteDistribution[provingground.andrewscurtis.Moves]):provingground.FiniteDistribution[provingground.andrewscurtis.Moves]", "kind" : "def"}, {"label" : "apply", "tail" : "(moves: Moves): Option[Moves]", "member" : "provingground.andrewscurtis.AtomicMove.apply", "link" : "provingground\/andrewscurtis\/Inv.html#apply(moves:provingground.andrewscurtis.Moves):Option[provingground.andrewscurtis.Moves]", "kind" : "def"}, {"label" : "apply", "tail" : "(opPres: Option[Presentation]): Option[Presentation]", "member" : "provingground.andrewscurtis.AtomicMove.apply", "link" : "provingground\/andrewscurtis\/Inv.html#apply(opPres:Option[provingground.andrewscurtis.FreeGroups.Presentation]):Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "andThen", "tail" : "(g: (Option[Moves]) ⇒ A): (Moves) ⇒ A", "member" : "scala.Function1.andThen", "link" : "provingground\/andrewscurtis\/Inv.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) ⇒ Moves): (A) ⇒ Option[Moves]", "member" : "scala.Function1.compose", "link" : "provingground\/andrewscurtis\/Inv.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/Inv.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/Inv.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/Inv.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/Inv.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/Inv.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/Inv.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/Inv.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/Inv.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/Inv.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/Inv.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/Inv.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/Inv.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/Inv.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/Inv.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/Inv.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/Inv.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/andrewscurtis\/Inv.html", "kind" : "case class"}, {"name" : "provingground.andrewscurtis.LftMult", "shortDescription" : "", "object" : "provingground\/andrewscurtis\/LftMult$.html", "members_object" : [{"label" : "rw", "tail" : "(): upickle.default.ReadWriter[LftMult]", "member" : "provingground.andrewscurtis.LftMult.rw", "link" : "provingground\/andrewscurtis\/LftMult$.html#rw:upickle.default.ReadWriter[provingground.andrewscurtis.LftMult]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/LftMult$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/LftMult$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/LftMult$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/LftMult$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/LftMult$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/LftMult$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/LftMult$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/LftMult$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/LftMult$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/LftMult$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/LftMult$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/LftMult$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/andrewscurtis\/LftMult$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/LftMult$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/LftMult$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/LftMult$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/LftMult$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/LftMult$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/LftMult$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "apply", "tail" : "(pres: Presentation): Option[Presentation]", "member" : "provingground.andrewscurtis.LftMult.apply", "link" : "provingground\/andrewscurtis\/LftMult.html#apply(pres:provingground.andrewscurtis.FreeGroups.Presentation):Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"member" : "provingground.andrewscurtis.LftMult#<init>", "error" : "unsupported entity"}, {"label" : "l", "tail" : ": Int", "member" : "provingground.andrewscurtis.LftMult.l", "link" : "provingground\/andrewscurtis\/LftMult.html#l:Int", "kind" : "val"}, {"label" : "k", "tail" : ": Int", "member" : "provingground.andrewscurtis.LftMult.k", "link" : "provingground\/andrewscurtis\/LftMult.html#k:Int", "kind" : "val"}, {"label" : "toString", "tail" : "(): String", "member" : "provingground.andrewscurtis.AtomicMove.toString", "link" : "provingground\/andrewscurtis\/LftMult.html#toString():String", "kind" : "def"}, {"label" : "toLatex", "tail" : "(): String", "member" : "provingground.andrewscurtis.AtomicMove.toLatex", "link" : "provingground\/andrewscurtis\/LftMult.html#toLatex:String", "kind" : "def"}, {"label" : "toPlainString", "tail" : "(): String", "member" : "provingground.andrewscurtis.AtomicMove.toPlainString", "link" : "provingground\/andrewscurtis\/LftMult.html#toPlainString:String", "kind" : "def"}, {"label" : "toFunc", "tail" : "(): (Presentation) ⇒ Option[Presentation]", "member" : "provingground.andrewscurtis.AtomicMove.toFunc", "link" : "provingground\/andrewscurtis\/LftMult.html#toFunc:provingground.andrewscurtis.FreeGroups.Presentation=>Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "compose", "tail" : "(mf: AtomicMove): Moves", "member" : "provingground.andrewscurtis.AtomicMove.compose", "link" : "provingground\/andrewscurtis\/LftMult.html#compose(mf:provingground.andrewscurtis.AtomicMove):provingground.andrewscurtis.Moves", "kind" : "def"}, {"label" : "actOnPres", "tail" : "(fdPres: FiniteDistribution[Presentation]): FiniteDistribution[Presentation]", "member" : "provingground.andrewscurtis.AtomicMove.actOnPres", "link" : "provingground\/andrewscurtis\/LftMult.html#actOnPres(fdPres:provingground.FiniteDistribution[provingground.andrewscurtis.FreeGroups.Presentation]):provingground.FiniteDistribution[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "movesDF", "tail" : "(): AdjDiffbleFunction[FiniteDistribution[Moves], FiniteDistribution[Moves]]", "member" : "provingground.andrewscurtis.AtomicMove.movesDF", "link" : "provingground\/andrewscurtis\/LftMult.html#movesDF:provingground.learning.AdjDiffbleFunction[provingground.FiniteDistribution[provingground.andrewscurtis.Moves],provingground.FiniteDistribution[provingground.andrewscurtis.Moves]]", "kind" : "def"}, {"label" : "actOnMoves", "tail" : "(moves: Moves): Option[Moves]", "member" : "provingground.andrewscurtis.AtomicMove.actOnMoves", "link" : "provingground\/andrewscurtis\/LftMult.html#actOnMoves(moves:provingground.andrewscurtis.Moves):Option[provingground.andrewscurtis.Moves]", "kind" : "def"}, {"label" : "apply", "tail" : "(fdVertices: FiniteDistribution[Moves]): FiniteDistribution[Moves]", "member" : "provingground.andrewscurtis.AtomicMove.apply", "link" : "provingground\/andrewscurtis\/LftMult.html#apply(fdVertices:provingground.FiniteDistribution[provingground.andrewscurtis.Moves]):provingground.FiniteDistribution[provingground.andrewscurtis.Moves]", "kind" : "def"}, {"label" : "apply", "tail" : "(moves: Moves): Option[Moves]", "member" : "provingground.andrewscurtis.AtomicMove.apply", "link" : "provingground\/andrewscurtis\/LftMult.html#apply(moves:provingground.andrewscurtis.Moves):Option[provingground.andrewscurtis.Moves]", "kind" : "def"}, {"label" : "apply", "tail" : "(opPres: Option[Presentation]): Option[Presentation]", "member" : "provingground.andrewscurtis.AtomicMove.apply", "link" : "provingground\/andrewscurtis\/LftMult.html#apply(opPres:Option[provingground.andrewscurtis.FreeGroups.Presentation]):Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "andThen", "tail" : "(g: (Option[Moves]) ⇒ A): (Moves) ⇒ A", "member" : "scala.Function1.andThen", "link" : "provingground\/andrewscurtis\/LftMult.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) ⇒ Moves): (A) ⇒ Option[Moves]", "member" : "scala.Function1.compose", "link" : "provingground\/andrewscurtis\/LftMult.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/LftMult.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/LftMult.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/LftMult.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/LftMult.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/LftMult.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/LftMult.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/LftMult.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/LftMult.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/LftMult.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/LftMult.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/LftMult.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/LftMult.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/LftMult.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/LftMult.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/LftMult.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/LftMult.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/andrewscurtis\/LftMult.html", "kind" : "case class"}, {"name" : "provingground.andrewscurtis.LftMultInv", "shortDescription" : "", "object" : "provingground\/andrewscurtis\/LftMultInv$.html", "members_object" : [{"label" : "rw", "tail" : "(): upickle.default.ReadWriter[LftMultInv]", "member" : "provingground.andrewscurtis.LftMultInv.rw", "link" : "provingground\/andrewscurtis\/LftMultInv$.html#rw:upickle.default.ReadWriter[provingground.andrewscurtis.LftMultInv]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/LftMultInv$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/LftMultInv$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/LftMultInv$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/LftMultInv$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/LftMultInv$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/LftMultInv$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/LftMultInv$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/LftMultInv$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/LftMultInv$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/LftMultInv$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/LftMultInv$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/LftMultInv$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/andrewscurtis\/LftMultInv$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/LftMultInv$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/LftMultInv$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/LftMultInv$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/LftMultInv$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/LftMultInv$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/LftMultInv$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "apply", "tail" : "(pres: Presentation): Option[Presentation]", "member" : "provingground.andrewscurtis.LftMultInv.apply", "link" : "provingground\/andrewscurtis\/LftMultInv.html#apply(pres:provingground.andrewscurtis.FreeGroups.Presentation):Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"member" : "provingground.andrewscurtis.LftMultInv#<init>", "error" : "unsupported entity"}, {"label" : "l", "tail" : ": Int", "member" : "provingground.andrewscurtis.LftMultInv.l", "link" : "provingground\/andrewscurtis\/LftMultInv.html#l:Int", "kind" : "val"}, {"label" : "k", "tail" : ": Int", "member" : "provingground.andrewscurtis.LftMultInv.k", "link" : "provingground\/andrewscurtis\/LftMultInv.html#k:Int", "kind" : "val"}, {"label" : "toString", "tail" : "(): String", "member" : "provingground.andrewscurtis.AtomicMove.toString", "link" : "provingground\/andrewscurtis\/LftMultInv.html#toString():String", "kind" : "def"}, {"label" : "toLatex", "tail" : "(): String", "member" : "provingground.andrewscurtis.AtomicMove.toLatex", "link" : "provingground\/andrewscurtis\/LftMultInv.html#toLatex:String", "kind" : "def"}, {"label" : "toPlainString", "tail" : "(): String", "member" : "provingground.andrewscurtis.AtomicMove.toPlainString", "link" : "provingground\/andrewscurtis\/LftMultInv.html#toPlainString:String", "kind" : "def"}, {"label" : "toFunc", "tail" : "(): (Presentation) ⇒ Option[Presentation]", "member" : "provingground.andrewscurtis.AtomicMove.toFunc", "link" : "provingground\/andrewscurtis\/LftMultInv.html#toFunc:provingground.andrewscurtis.FreeGroups.Presentation=>Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "compose", "tail" : "(mf: AtomicMove): Moves", "member" : "provingground.andrewscurtis.AtomicMove.compose", "link" : "provingground\/andrewscurtis\/LftMultInv.html#compose(mf:provingground.andrewscurtis.AtomicMove):provingground.andrewscurtis.Moves", "kind" : "def"}, {"label" : "actOnPres", "tail" : "(fdPres: FiniteDistribution[Presentation]): FiniteDistribution[Presentation]", "member" : "provingground.andrewscurtis.AtomicMove.actOnPres", "link" : "provingground\/andrewscurtis\/LftMultInv.html#actOnPres(fdPres:provingground.FiniteDistribution[provingground.andrewscurtis.FreeGroups.Presentation]):provingground.FiniteDistribution[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "movesDF", "tail" : "(): AdjDiffbleFunction[FiniteDistribution[Moves], FiniteDistribution[Moves]]", "member" : "provingground.andrewscurtis.AtomicMove.movesDF", "link" : "provingground\/andrewscurtis\/LftMultInv.html#movesDF:provingground.learning.AdjDiffbleFunction[provingground.FiniteDistribution[provingground.andrewscurtis.Moves],provingground.FiniteDistribution[provingground.andrewscurtis.Moves]]", "kind" : "def"}, {"label" : "actOnMoves", "tail" : "(moves: Moves): Option[Moves]", "member" : "provingground.andrewscurtis.AtomicMove.actOnMoves", "link" : "provingground\/andrewscurtis\/LftMultInv.html#actOnMoves(moves:provingground.andrewscurtis.Moves):Option[provingground.andrewscurtis.Moves]", "kind" : "def"}, {"label" : "apply", "tail" : "(fdVertices: FiniteDistribution[Moves]): FiniteDistribution[Moves]", "member" : "provingground.andrewscurtis.AtomicMove.apply", "link" : "provingground\/andrewscurtis\/LftMultInv.html#apply(fdVertices:provingground.FiniteDistribution[provingground.andrewscurtis.Moves]):provingground.FiniteDistribution[provingground.andrewscurtis.Moves]", "kind" : "def"}, {"label" : "apply", "tail" : "(moves: Moves): Option[Moves]", "member" : "provingground.andrewscurtis.AtomicMove.apply", "link" : "provingground\/andrewscurtis\/LftMultInv.html#apply(moves:provingground.andrewscurtis.Moves):Option[provingground.andrewscurtis.Moves]", "kind" : "def"}, {"label" : "apply", "tail" : "(opPres: Option[Presentation]): Option[Presentation]", "member" : "provingground.andrewscurtis.AtomicMove.apply", "link" : "provingground\/andrewscurtis\/LftMultInv.html#apply(opPres:Option[provingground.andrewscurtis.FreeGroups.Presentation]):Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "andThen", "tail" : "(g: (Option[Moves]) ⇒ A): (Moves) ⇒ A", "member" : "scala.Function1.andThen", "link" : "provingground\/andrewscurtis\/LftMultInv.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) ⇒ Moves): (A) ⇒ Option[Moves]", "member" : "scala.Function1.compose", "link" : "provingground\/andrewscurtis\/LftMultInv.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/LftMultInv.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/LftMultInv.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/LftMultInv.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/LftMultInv.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/LftMultInv.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/LftMultInv.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/LftMultInv.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/LftMultInv.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/LftMultInv.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/LftMultInv.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/LftMultInv.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/LftMultInv.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/LftMultInv.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/LftMultInv.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/LftMultInv.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/LftMultInv.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/andrewscurtis\/LftMultInv.html", "kind" : "case class"}, {"name" : "provingground.andrewscurtis.MoveGenerator", "shortDescription" : "", "object" : "provingground\/andrewscurtis\/MoveGenerator$.html", "members_object" : [{"label" : "extendedMoves", "tail" : "(rank: Int): FiniteDistribution[AtomicMove]", "member" : "provingground.andrewscurtis.MoveGenerator.extendedMoves", "link" : "provingground\/andrewscurtis\/MoveGenerator$.html#extendedMoves(rank:Int):provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove]", "kind" : "def"}, {"label" : "learnerMoves", "tail" : "(rank: Int): FiniteDistribution[AtomicMove]", "member" : "provingground.andrewscurtis.MoveGenerator.learnerMoves", "link" : "provingground\/andrewscurtis\/MoveGenerator$.html#learnerMoves(rank:Int):provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove]", "kind" : "def"}, {"label" : "extendedMovesList", "tail" : "(rank: Int): List[AtomicMove]", "member" : "provingground.andrewscurtis.MoveGenerator.extendedMovesList", "link" : "provingground\/andrewscurtis\/MoveGenerator$.html#extendedMovesList(rank:Int):List[provingground.andrewscurtis.AtomicMove]", "kind" : "def"}, {"label" : "unifMoves", "tail" : "(rank: Int): FiniteDistribution[AtomicMove]", "member" : "provingground.andrewscurtis.MoveGenerator.unifMoves", "link" : "provingground\/andrewscurtis\/MoveGenerator$.html#unifMoves(rank:Int):provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove]", "kind" : "def"}, {"label" : "allMoves", "tail" : "(rank: Int): List[AtomicMove]", "member" : "provingground.andrewscurtis.MoveGenerator.allMoves", "link" : "provingground\/andrewscurtis\/MoveGenerator$.html#allMoves(rank:Int):List[provingground.andrewscurtis.AtomicMove]", "kind" : "def"}, {"label" : "eVec", "tail" : ": FiniteDistribution[Moves]", "member" : "provingground.andrewscurtis.MoveGenerator.eVec", "link" : "provingground\/andrewscurtis\/MoveGenerator$.html#eVec:provingground.FiniteDistribution[provingground.andrewscurtis.Moves]", "kind" : "lazy val"}, {"label" : "E", "tail" : ": Weighted[Moves]", "member" : "provingground.andrewscurtis.MoveGenerator.E", "link" : "provingground\/andrewscurtis\/MoveGenerator$.html#E:provingground.Weighted[provingground.andrewscurtis.Moves]", "kind" : "val"}, {"label" : "genAllMoves", "tail" : "(rank: Int, sz: Int): List[AtomicMove]", "member" : "provingground.andrewscurtis.MoveGenerator.genAllMoves", "link" : "provingground\/andrewscurtis\/MoveGenerator$.html#genAllMoves(rank:Int,sz:Int):List[provingground.andrewscurtis.AtomicMove]", "kind" : "def"}, {"label" : "genTranspose", "tail" : "(rank: Int): List[AtomicMove]", "member" : "provingground.andrewscurtis.MoveGenerator.genTranspose", "link" : "provingground\/andrewscurtis\/MoveGenerator$.html#genTranspose(rank:Int):List[provingground.andrewscurtis.AtomicMove]", "kind" : "def"}, {"label" : "genRtInvMult", "tail" : "(rank: Int): List[AtomicMove]", "member" : "provingground.andrewscurtis.MoveGenerator.genRtInvMult", "link" : "provingground\/andrewscurtis\/MoveGenerator$.html#genRtInvMult(rank:Int):List[provingground.andrewscurtis.AtomicMove]", "kind" : "def"}, {"label" : "genLftInvMult", "tail" : "(rank: Int): List[AtomicMove]", "member" : "provingground.andrewscurtis.MoveGenerator.genLftInvMult", "link" : "provingground\/andrewscurtis\/MoveGenerator$.html#genLftInvMult(rank:Int):List[provingground.andrewscurtis.AtomicMove]", "kind" : "def"}, {"label" : "genConj", "tail" : "(rank: Int, sz: Int): List[AtomicMove]", "member" : "provingground.andrewscurtis.MoveGenerator.genConj", "link" : "provingground\/andrewscurtis\/MoveGenerator$.html#genConj(rank:Int,sz:Int):List[provingground.andrewscurtis.AtomicMove]", "kind" : "def"}, {"label" : "genRtMult", "tail" : "(sz: Int): List[AtomicMove]", "member" : "provingground.andrewscurtis.MoveGenerator.genRtMult", "link" : "provingground\/andrewscurtis\/MoveGenerator$.html#genRtMult(sz:Int):List[provingground.andrewscurtis.AtomicMove]", "kind" : "def"}, {"label" : "genLftMult", "tail" : "(sz: Int): List[AtomicMove]", "member" : "provingground.andrewscurtis.MoveGenerator.genLftMult", "link" : "provingground\/andrewscurtis\/MoveGenerator$.html#genLftMult(sz:Int):List[provingground.andrewscurtis.AtomicMove]", "kind" : "def"}, {"label" : "genAllInv", "tail" : "(sz: Int): List[AtomicMove]", "member" : "provingground.andrewscurtis.MoveGenerator.genAllInv", "link" : "provingground\/andrewscurtis\/MoveGenerator$.html#genAllInv(sz:Int):List[provingground.andrewscurtis.AtomicMove]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/MoveGenerator$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/MoveGenerator$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/MoveGenerator$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/MoveGenerator$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/MoveGenerator$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/MoveGenerator$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/MoveGenerator$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/MoveGenerator$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/MoveGenerator$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/MoveGenerator$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/MoveGenerator$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/MoveGenerator$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/andrewscurtis\/MoveGenerator$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/MoveGenerator$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/MoveGenerator$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/MoveGenerator$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/MoveGenerator$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/MoveGenerator$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/MoveGenerator$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.andrewscurtis.Moves", "shortDescription" : "", "object" : "provingground\/andrewscurtis\/Moves$.html", "members_object" : [{"label" : "actOnTriv", "tail" : "(rank: Int)(mvs: Moves): Option[Presentation]", "member" : "provingground.andrewscurtis.Moves.actOnTriv", "link" : "provingground\/andrewscurtis\/Moves$.html#actOnTriv(rank:Int)(mvs:provingground.andrewscurtis.Moves):Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "liftResult", "tail" : "(f: (A) ⇒ A): (A) ⇒ Option[A]", "member" : "provingground.andrewscurtis.Moves.liftResult", "link" : "provingground\/andrewscurtis\/Moves$.html#liftResult[A](f:A=>A):A=>Option[A]", "kind" : "def"}, {"label" : "liftOption", "tail" : "(f: (A) ⇒ Option[A]): (Option[A]) ⇒ Option[A]", "member" : "provingground.andrewscurtis.Moves.liftOption", "link" : "provingground\/andrewscurtis\/Moves$.html#liftOption[A](f:A=>Option[A]):Option[A]=>Option[A]", "kind" : "def"}, {"label" : "toMoves", "tail" : "(move: AtomicMove): Moves", "member" : "provingground.andrewscurtis.Moves.toMoves", "link" : "provingground\/andrewscurtis\/Moves$.html#toMoves(move:provingground.andrewscurtis.AtomicMove):provingground.andrewscurtis.Moves", "kind" : "implicit def"}, {"label" : "fromString", "tail" : "(ws: Seq[String]): Option[Moves]", "member" : "provingground.andrewscurtis.Moves.fromString", "link" : "provingground\/andrewscurtis\/Moves$.html#fromString(ws:Seq[String]):Option[provingground.andrewscurtis.Moves]", "kind" : "def"}, {"label" : "apply", "tail" : "(ws: String*): Moves", "member" : "provingground.andrewscurtis.Moves.apply", "link" : "provingground\/andrewscurtis\/Moves$.html#apply(ws:String*):provingground.andrewscurtis.Moves", "kind" : "def"}, {"label" : "empty", "tail" : "(): Moves", "member" : "provingground.andrewscurtis.Moves.empty", "link" : "provingground\/andrewscurtis\/Moves$.html#empty:provingground.andrewscurtis.Moves", "kind" : "def"}, {"label" : "rw", "tail" : "(): upickle.default.ReadWriter[Moves]", "member" : "provingground.andrewscurtis.Moves.rw", "link" : "provingground\/andrewscurtis\/Moves$.html#rw:upickle.default.ReadWriter[provingground.andrewscurtis.Moves]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/Moves$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/Moves$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/Moves$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/Moves$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/Moves$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/Moves$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/Moves$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/Moves$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/Moves$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/Moves$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/Moves$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/Moves$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/andrewscurtis\/Moves$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/Moves$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/Moves$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/Moves$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/Moves$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/Moves$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/Moves$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "idLast", "tail" : "(): Moves", "member" : "provingground.andrewscurtis.Moves.idLast", "link" : "provingground\/andrewscurtis\/Moves.html#idLast:provingground.andrewscurtis.Moves", "kind" : "def"}, {"label" : "actOnTriv", "tail" : "(rank: Int): Option[Presentation]", "member" : "provingground.andrewscurtis.Moves.actOnTriv", "link" : "provingground\/andrewscurtis\/Moves.html#actOnTriv(rank:Int):Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "compose", "tail" : "(that: Moves): Moves", "member" : "provingground.andrewscurtis.Moves.compose", "link" : "provingground\/andrewscurtis\/Moves.html#compose(that:provingground.andrewscurtis.Moves):provingground.andrewscurtis.Moves", "kind" : "def"}, {"label" : "length", "tail" : "(): Int", "member" : "provingground.andrewscurtis.Moves.length", "link" : "provingground\/andrewscurtis\/Moves.html#length:Int", "kind" : "def"}, {"label" : "apply", "tail" : "(that: AtomicMove): Moves", "member" : "provingground.andrewscurtis.Moves.apply", "link" : "provingground\/andrewscurtis\/Moves.html#apply(that:provingground.andrewscurtis.AtomicMove):provingground.andrewscurtis.Moves", "kind" : "def"}, {"label" : "apply", "tail" : "(that: (Presentation) ⇒ Option[Presentation]): (Presentation) ⇒ Option[Presentation]", "member" : "provingground.andrewscurtis.Moves.apply", "link" : "provingground\/andrewscurtis\/Moves.html#apply(that:provingground.andrewscurtis.FreeGroups.Presentation=>Option[provingground.andrewscurtis.FreeGroups.Presentation]):provingground.andrewscurtis.FreeGroups.Presentation=>Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "apply", "tail" : "(that: Moves): Moves", "member" : "provingground.andrewscurtis.Moves.apply", "link" : "provingground\/andrewscurtis\/Moves.html#apply(that:provingground.andrewscurtis.Moves):provingground.andrewscurtis.Moves", "kind" : "def"}, {"label" : "apply", "tail" : "(pres: Presentation): Option[Presentation]", "member" : "provingground.andrewscurtis.Moves.apply", "link" : "provingground\/andrewscurtis\/Moves.html#apply(pres:provingground.andrewscurtis.FreeGroups.Presentation):Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "reduce", "tail" : "(): (Presentation) ⇒ Option[Presentation]", "member" : "provingground.andrewscurtis.Moves.reduce", "link" : "provingground\/andrewscurtis\/Moves.html#reduce:provingground.andrewscurtis.FreeGroups.Presentation=>Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"member" : "provingground.andrewscurtis.Moves#<init>", "error" : "unsupported entity"}, {"label" : "moves", "tail" : ": List[AtomicMove]", "member" : "provingground.andrewscurtis.Moves.moves", "link" : "provingground\/andrewscurtis\/Moves.html#moves:List[provingground.andrewscurtis.AtomicMove]", "kind" : "val"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "provingground\/andrewscurtis\/Moves.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "provingground\/andrewscurtis\/Moves.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/Moves.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/Moves.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "provingground\/andrewscurtis\/Moves.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "provingground\/andrewscurtis\/Moves.html#==(x$1:Any):Boolean", "kind" : "final def"}], "case class" : "provingground\/andrewscurtis\/Moves.html", "kind" : "case class"}, {"name" : "provingground.andrewscurtis.Param", "shortDescription" : "", "object" : "provingground\/andrewscurtis\/Param$.html", "members_object" : [{"label" : "rw", "tail" : "(): upickle.default.ReadWriter[Param]", "member" : "provingground.andrewscurtis.Param.rw", "link" : "provingground\/andrewscurtis\/Param$.html#rw:upickle.default.ReadWriter[provingground.andrewscurtis.Param]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/Param$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/Param$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/Param$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/Param$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/Param$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/Param$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/Param$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/Param$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/Param$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/Param$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/Param$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/Param$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/andrewscurtis\/Param$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/Param$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/Param$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/Param$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/Param$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/Param$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/Param$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"member" : "provingground.andrewscurtis.Param#<init>", "error" : "unsupported entity"}, {"label" : "wrdCntn", "tail" : ": Double", "member" : "provingground.andrewscurtis.Param.wrdCntn", "link" : "provingground\/andrewscurtis\/Param.html#wrdCntn:Double", "kind" : "val"}, {"label" : "size", "tail" : ": Int", "member" : "provingground.andrewscurtis.Param.size", "link" : "provingground\/andrewscurtis\/Param.html#size:Int", "kind" : "val"}, {"label" : "rank", "tail" : ": Int", "member" : "provingground.andrewscurtis.Param.rank", "link" : "provingground\/andrewscurtis\/Param.html#rank:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/Param.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/Param.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/Param.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/Param.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/Param.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/Param.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/Param.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/Param.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/Param.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/Param.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/Param.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/Param.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/Param.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/Param.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/Param.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/Param.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/andrewscurtis\/Param.html", "kind" : "case class"}, {"name" : "provingground.andrewscurtis.RtMult", "shortDescription" : "", "object" : "provingground\/andrewscurtis\/RtMult$.html", "members_object" : [{"label" : "rw", "tail" : "(): upickle.default.ReadWriter[RtMult]", "member" : "provingground.andrewscurtis.RtMult.rw", "link" : "provingground\/andrewscurtis\/RtMult$.html#rw:upickle.default.ReadWriter[provingground.andrewscurtis.RtMult]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/RtMult$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/RtMult$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/RtMult$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/RtMult$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/RtMult$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/RtMult$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/RtMult$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/RtMult$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/RtMult$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/RtMult$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/RtMult$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/RtMult$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/andrewscurtis\/RtMult$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/RtMult$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/RtMult$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/RtMult$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/RtMult$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/RtMult$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/RtMult$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "apply", "tail" : "(pres: Presentation): Option[Presentation]", "member" : "provingground.andrewscurtis.RtMult.apply", "link" : "provingground\/andrewscurtis\/RtMult.html#apply(pres:provingground.andrewscurtis.FreeGroups.Presentation):Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"member" : "provingground.andrewscurtis.RtMult#<init>", "error" : "unsupported entity"}, {"label" : "l", "tail" : ": Int", "member" : "provingground.andrewscurtis.RtMult.l", "link" : "provingground\/andrewscurtis\/RtMult.html#l:Int", "kind" : "val"}, {"label" : "k", "tail" : ": Int", "member" : "provingground.andrewscurtis.RtMult.k", "link" : "provingground\/andrewscurtis\/RtMult.html#k:Int", "kind" : "val"}, {"label" : "toString", "tail" : "(): String", "member" : "provingground.andrewscurtis.AtomicMove.toString", "link" : "provingground\/andrewscurtis\/RtMult.html#toString():String", "kind" : "def"}, {"label" : "toLatex", "tail" : "(): String", "member" : "provingground.andrewscurtis.AtomicMove.toLatex", "link" : "provingground\/andrewscurtis\/RtMult.html#toLatex:String", "kind" : "def"}, {"label" : "toPlainString", "tail" : "(): String", "member" : "provingground.andrewscurtis.AtomicMove.toPlainString", "link" : "provingground\/andrewscurtis\/RtMult.html#toPlainString:String", "kind" : "def"}, {"label" : "toFunc", "tail" : "(): (Presentation) ⇒ Option[Presentation]", "member" : "provingground.andrewscurtis.AtomicMove.toFunc", "link" : "provingground\/andrewscurtis\/RtMult.html#toFunc:provingground.andrewscurtis.FreeGroups.Presentation=>Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "compose", "tail" : "(mf: AtomicMove): Moves", "member" : "provingground.andrewscurtis.AtomicMove.compose", "link" : "provingground\/andrewscurtis\/RtMult.html#compose(mf:provingground.andrewscurtis.AtomicMove):provingground.andrewscurtis.Moves", "kind" : "def"}, {"label" : "actOnPres", "tail" : "(fdPres: FiniteDistribution[Presentation]): FiniteDistribution[Presentation]", "member" : "provingground.andrewscurtis.AtomicMove.actOnPres", "link" : "provingground\/andrewscurtis\/RtMult.html#actOnPres(fdPres:provingground.FiniteDistribution[provingground.andrewscurtis.FreeGroups.Presentation]):provingground.FiniteDistribution[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "movesDF", "tail" : "(): AdjDiffbleFunction[FiniteDistribution[Moves], FiniteDistribution[Moves]]", "member" : "provingground.andrewscurtis.AtomicMove.movesDF", "link" : "provingground\/andrewscurtis\/RtMult.html#movesDF:provingground.learning.AdjDiffbleFunction[provingground.FiniteDistribution[provingground.andrewscurtis.Moves],provingground.FiniteDistribution[provingground.andrewscurtis.Moves]]", "kind" : "def"}, {"label" : "actOnMoves", "tail" : "(moves: Moves): Option[Moves]", "member" : "provingground.andrewscurtis.AtomicMove.actOnMoves", "link" : "provingground\/andrewscurtis\/RtMult.html#actOnMoves(moves:provingground.andrewscurtis.Moves):Option[provingground.andrewscurtis.Moves]", "kind" : "def"}, {"label" : "apply", "tail" : "(fdVertices: FiniteDistribution[Moves]): FiniteDistribution[Moves]", "member" : "provingground.andrewscurtis.AtomicMove.apply", "link" : "provingground\/andrewscurtis\/RtMult.html#apply(fdVertices:provingground.FiniteDistribution[provingground.andrewscurtis.Moves]):provingground.FiniteDistribution[provingground.andrewscurtis.Moves]", "kind" : "def"}, {"label" : "apply", "tail" : "(moves: Moves): Option[Moves]", "member" : "provingground.andrewscurtis.AtomicMove.apply", "link" : "provingground\/andrewscurtis\/RtMult.html#apply(moves:provingground.andrewscurtis.Moves):Option[provingground.andrewscurtis.Moves]", "kind" : "def"}, {"label" : "apply", "tail" : "(opPres: Option[Presentation]): Option[Presentation]", "member" : "provingground.andrewscurtis.AtomicMove.apply", "link" : "provingground\/andrewscurtis\/RtMult.html#apply(opPres:Option[provingground.andrewscurtis.FreeGroups.Presentation]):Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "andThen", "tail" : "(g: (Option[Moves]) ⇒ A): (Moves) ⇒ A", "member" : "scala.Function1.andThen", "link" : "provingground\/andrewscurtis\/RtMult.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) ⇒ Moves): (A) ⇒ Option[Moves]", "member" : "scala.Function1.compose", "link" : "provingground\/andrewscurtis\/RtMult.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/RtMult.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/RtMult.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/RtMult.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/RtMult.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/RtMult.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/RtMult.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/RtMult.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/RtMult.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/RtMult.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/RtMult.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/RtMult.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/RtMult.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/RtMult.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/RtMult.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/RtMult.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/RtMult.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/andrewscurtis\/RtMult.html", "kind" : "case class"}, {"name" : "provingground.andrewscurtis.RtMultInv", "shortDescription" : "", "object" : "provingground\/andrewscurtis\/RtMultInv$.html", "members_object" : [{"label" : "rw", "tail" : "(): upickle.default.ReadWriter[RtMultInv]", "member" : "provingground.andrewscurtis.RtMultInv.rw", "link" : "provingground\/andrewscurtis\/RtMultInv$.html#rw:upickle.default.ReadWriter[provingground.andrewscurtis.RtMultInv]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/RtMultInv$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/RtMultInv$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/RtMultInv$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/RtMultInv$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/RtMultInv$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/RtMultInv$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/RtMultInv$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/RtMultInv$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/RtMultInv$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/RtMultInv$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/RtMultInv$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/RtMultInv$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/andrewscurtis\/RtMultInv$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/RtMultInv$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/RtMultInv$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/RtMultInv$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/RtMultInv$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/RtMultInv$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/RtMultInv$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "apply", "tail" : "(pres: Presentation): Option[Presentation]", "member" : "provingground.andrewscurtis.RtMultInv.apply", "link" : "provingground\/andrewscurtis\/RtMultInv.html#apply(pres:provingground.andrewscurtis.FreeGroups.Presentation):Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"member" : "provingground.andrewscurtis.RtMultInv#<init>", "error" : "unsupported entity"}, {"label" : "l", "tail" : ": Int", "member" : "provingground.andrewscurtis.RtMultInv.l", "link" : "provingground\/andrewscurtis\/RtMultInv.html#l:Int", "kind" : "val"}, {"label" : "k", "tail" : ": Int", "member" : "provingground.andrewscurtis.RtMultInv.k", "link" : "provingground\/andrewscurtis\/RtMultInv.html#k:Int", "kind" : "val"}, {"label" : "toString", "tail" : "(): String", "member" : "provingground.andrewscurtis.AtomicMove.toString", "link" : "provingground\/andrewscurtis\/RtMultInv.html#toString():String", "kind" : "def"}, {"label" : "toLatex", "tail" : "(): String", "member" : "provingground.andrewscurtis.AtomicMove.toLatex", "link" : "provingground\/andrewscurtis\/RtMultInv.html#toLatex:String", "kind" : "def"}, {"label" : "toPlainString", "tail" : "(): String", "member" : "provingground.andrewscurtis.AtomicMove.toPlainString", "link" : "provingground\/andrewscurtis\/RtMultInv.html#toPlainString:String", "kind" : "def"}, {"label" : "toFunc", "tail" : "(): (Presentation) ⇒ Option[Presentation]", "member" : "provingground.andrewscurtis.AtomicMove.toFunc", "link" : "provingground\/andrewscurtis\/RtMultInv.html#toFunc:provingground.andrewscurtis.FreeGroups.Presentation=>Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "compose", "tail" : "(mf: AtomicMove): Moves", "member" : "provingground.andrewscurtis.AtomicMove.compose", "link" : "provingground\/andrewscurtis\/RtMultInv.html#compose(mf:provingground.andrewscurtis.AtomicMove):provingground.andrewscurtis.Moves", "kind" : "def"}, {"label" : "actOnPres", "tail" : "(fdPres: FiniteDistribution[Presentation]): FiniteDistribution[Presentation]", "member" : "provingground.andrewscurtis.AtomicMove.actOnPres", "link" : "provingground\/andrewscurtis\/RtMultInv.html#actOnPres(fdPres:provingground.FiniteDistribution[provingground.andrewscurtis.FreeGroups.Presentation]):provingground.FiniteDistribution[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "movesDF", "tail" : "(): AdjDiffbleFunction[FiniteDistribution[Moves], FiniteDistribution[Moves]]", "member" : "provingground.andrewscurtis.AtomicMove.movesDF", "link" : "provingground\/andrewscurtis\/RtMultInv.html#movesDF:provingground.learning.AdjDiffbleFunction[provingground.FiniteDistribution[provingground.andrewscurtis.Moves],provingground.FiniteDistribution[provingground.andrewscurtis.Moves]]", "kind" : "def"}, {"label" : "actOnMoves", "tail" : "(moves: Moves): Option[Moves]", "member" : "provingground.andrewscurtis.AtomicMove.actOnMoves", "link" : "provingground\/andrewscurtis\/RtMultInv.html#actOnMoves(moves:provingground.andrewscurtis.Moves):Option[provingground.andrewscurtis.Moves]", "kind" : "def"}, {"label" : "apply", "tail" : "(fdVertices: FiniteDistribution[Moves]): FiniteDistribution[Moves]", "member" : "provingground.andrewscurtis.AtomicMove.apply", "link" : "provingground\/andrewscurtis\/RtMultInv.html#apply(fdVertices:provingground.FiniteDistribution[provingground.andrewscurtis.Moves]):provingground.FiniteDistribution[provingground.andrewscurtis.Moves]", "kind" : "def"}, {"label" : "apply", "tail" : "(moves: Moves): Option[Moves]", "member" : "provingground.andrewscurtis.AtomicMove.apply", "link" : "provingground\/andrewscurtis\/RtMultInv.html#apply(moves:provingground.andrewscurtis.Moves):Option[provingground.andrewscurtis.Moves]", "kind" : "def"}, {"label" : "apply", "tail" : "(opPres: Option[Presentation]): Option[Presentation]", "member" : "provingground.andrewscurtis.AtomicMove.apply", "link" : "provingground\/andrewscurtis\/RtMultInv.html#apply(opPres:Option[provingground.andrewscurtis.FreeGroups.Presentation]):Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "andThen", "tail" : "(g: (Option[Moves]) ⇒ A): (Moves) ⇒ A", "member" : "scala.Function1.andThen", "link" : "provingground\/andrewscurtis\/RtMultInv.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) ⇒ Moves): (A) ⇒ Option[Moves]", "member" : "scala.Function1.compose", "link" : "provingground\/andrewscurtis\/RtMultInv.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/RtMultInv.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/RtMultInv.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/RtMultInv.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/RtMultInv.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/RtMultInv.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/RtMultInv.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/RtMultInv.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/RtMultInv.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/RtMultInv.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/RtMultInv.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/RtMultInv.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/RtMultInv.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/RtMultInv.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/RtMultInv.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/RtMultInv.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/RtMultInv.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/andrewscurtis\/RtMultInv.html", "kind" : "case class"}, {"name" : "provingground.andrewscurtis.SimpleAcEvolution", "shortDescription" : "", "object" : "provingground\/andrewscurtis\/SimpleAcEvolution$.html", "members_object" : [{"label" : "PickledPath", "tail" : "", "member" : "provingground.andrewscurtis.SimpleAcEvolution.PickledPath", "link" : "provingground\/andrewscurtis\/SimpleAcEvolution$.html#PickledPathextendsProductwithSerializable", "kind" : "case class"}, {"label" : "PickledPath", "tail" : "", "member" : "provingground.andrewscurtis.SimpleAcEvolution.PickledPath", "link" : "provingground\/andrewscurtis\/SimpleAcEvolution$.html#PickledPath", "kind" : "object"}, {"label" : "Path", "tail" : "", "member" : "provingground.andrewscurtis.SimpleAcEvolution.Path", "link" : "provingground\/andrewscurtis\/SimpleAcEvolution$.html#Path", "kind" : "object"}, {"label" : "Path", "tail" : "", "member" : "provingground.andrewscurtis.SimpleAcEvolution.Path", "link" : "provingground\/andrewscurtis\/SimpleAcEvolution$.html#PathextendsProductwithSerializable", "kind" : "case class"}, {"label" : "PickledState", "tail" : "", "member" : "provingground.andrewscurtis.SimpleAcEvolution.PickledState", "link" : "provingground\/andrewscurtis\/SimpleAcEvolution$.html#PickledStateextendsProductwithSerializable", "kind" : "case class"}, {"label" : "PickledState", "tail" : "", "member" : "provingground.andrewscurtis.SimpleAcEvolution.PickledState", "link" : "provingground\/andrewscurtis\/SimpleAcEvolution$.html#PickledState", "kind" : "object"}, {"label" : "State", "tail" : "", "member" : "provingground.andrewscurtis.SimpleAcEvolution.State", "link" : "provingground\/andrewscurtis\/SimpleAcEvolution$.html#StateextendsProductwithSerializable", "kind" : "case class"}, {"label" : "toPresentation", "tail" : "(rank: Int, fdV: FiniteDistribution[Moves]): FiniteDistribution[Presentation]", "member" : "provingground.andrewscurtis.SimpleAcEvolution.toPresentation", "link" : "provingground\/andrewscurtis\/SimpleAcEvolution$.html#toPresentation(rank:Int,fdV:provingground.FiniteDistribution[provingground.andrewscurtis.Moves]):provingground.FiniteDistribution[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/SimpleAcEvolution$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/SimpleAcEvolution$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/SimpleAcEvolution$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/SimpleAcEvolution$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/SimpleAcEvolution$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/SimpleAcEvolution$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/SimpleAcEvolution$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/SimpleAcEvolution$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/SimpleAcEvolution$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/SimpleAcEvolution$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/SimpleAcEvolution$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/SimpleAcEvolution$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/andrewscurtis\/SimpleAcEvolution$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/SimpleAcEvolution$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/SimpleAcEvolution$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/SimpleAcEvolution$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/SimpleAcEvolution$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/SimpleAcEvolution$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/SimpleAcEvolution$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.andrewscurtis.SimpleAcRun", "shortDescription" : "", "object" : "provingground\/andrewscurtis\/SimpleAcRun$.html", "members_object" : [{"label" : "PathView", "tail" : "", "member" : "provingground.andrewscurtis.SimpleAcRun.PathView", "link" : "provingground\/andrewscurtis\/SimpleAcRun$.html#PathViewextendsAnyRef", "kind" : "class"}, {"label" : "start", "tail" : "(rank: Int, steps: Int, loops: Int, threads: Int, wordCntn: Double, size: Double, scale: Double)(update: (Path) ⇒ Unit): List[Future[Path]]", "member" : "provingground.andrewscurtis.SimpleAcRun.start", "link" : "provingground\/andrewscurtis\/SimpleAcRun$.html#start(rank:Int,steps:Int,loops:Int,threads:Int,wordCntn:Double,size:Double,scale:Double)(implicitupdate:provingground.andrewscurtis.SimpleAcEvolution.Path=>Unit):List[scala.concurrent.Future[provingground.andrewscurtis.SimpleAcEvolution.Path]]", "kind" : "def"}, {"label" : "restart", "tail" : "(rank: Int, steps: Int, loops: Int, threads: Int, wordCntn: Double, size: Double, scale: Double)(dbread: Future[List[Path]], update: (Path) ⇒ Unit): List[Future[Path]]", "member" : "provingground.andrewscurtis.SimpleAcRun.restart", "link" : "provingground\/andrewscurtis\/SimpleAcRun$.html#restart(rank:Int,steps:Int,loops:Int,threads:Int,wordCntn:Double,size:Double,scale:Double)(implicitdbread:scala.concurrent.Future[List[provingground.andrewscurtis.SimpleAcEvolution.Path]],implicitupdate:provingground.andrewscurtis.SimpleAcEvolution.Path=>Unit):List[scala.concurrent.Future[provingground.andrewscurtis.SimpleAcEvolution.Path]]", "kind" : "def"}, {"label" : "resume", "tail" : "(loops: Int)(dbread: Future[List[Path]], update: (Path) ⇒ Unit): Future[List[Path]]", "member" : "provingground.andrewscurtis.SimpleAcRun.resume", "link" : "provingground\/andrewscurtis\/SimpleAcRun$.html#resume(loops:Int)(implicitdbread:scala.concurrent.Future[List[provingground.andrewscurtis.SimpleAcEvolution.Path]],implicitupdate:provingground.andrewscurtis.SimpleAcEvolution.Path=>Unit):scala.concurrent.Future[List[provingground.andrewscurtis.SimpleAcEvolution.Path]]", "kind" : "def"}, {"label" : "continue", "tail" : "(ps: List[Path], loops: Int)(update: (Path) ⇒ Unit): List[Future[Path]]", "member" : "provingground.andrewscurtis.SimpleAcRun.continue", "link" : "provingground\/andrewscurtis\/SimpleAcRun$.html#continue(ps:List[provingground.andrewscurtis.SimpleAcEvolution.Path],loops:Int)(implicitupdate:provingground.andrewscurtis.SimpleAcEvolution.Path=>Unit):List[scala.concurrent.Future[provingground.andrewscurtis.SimpleAcEvolution.Path]]", "kind" : "def"}, {"label" : "iter", "tail" : "(p: Path, loops: Int, initial: Boolean)(update: (Path) ⇒ Unit): Path", "member" : "provingground.andrewscurtis.SimpleAcRun.iter", "link" : "provingground\/andrewscurtis\/SimpleAcRun$.html#iter(p:provingground.andrewscurtis.SimpleAcEvolution.Path,loops:Int,initial:Boolean)(implicitupdate:provingground.andrewscurtis.SimpleAcEvolution.Path=>Unit):provingground.andrewscurtis.SimpleAcEvolution.Path", "kind" : "def"}, {"label" : "MemDB", "tail" : "", "member" : "provingground.andrewscurtis.SimpleAcRun.MemDB", "link" : "provingground\/andrewscurtis\/SimpleAcRun$.html#MemDB", "kind" : "object"}, {"label" : "InMem", "tail" : "", "member" : "provingground.andrewscurtis.SimpleAcRun.InMem", "link" : "provingground\/andrewscurtis\/SimpleAcRun$.html#InMemextendsAnyRef", "kind" : "class"}, {"label" : "Reactive", "tail" : "", "member" : "provingground.andrewscurtis.SimpleAcRun.Reactive", "link" : "provingground\/andrewscurtis\/SimpleAcRun$.html#Reactive", "kind" : "object"}, {"label" : "getId", "tail" : "(thread: Int): String", "member" : "provingground.andrewscurtis.SimpleAcRun.getId", "link" : "provingground\/andrewscurtis\/SimpleAcRun$.html#getId(thread:Int):String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/SimpleAcRun$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/SimpleAcRun$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/SimpleAcRun$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/SimpleAcRun$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/SimpleAcRun$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/SimpleAcRun$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/SimpleAcRun$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/SimpleAcRun$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/SimpleAcRun$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/SimpleAcRun$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/SimpleAcRun$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/SimpleAcRun$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/andrewscurtis\/SimpleAcRun$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/SimpleAcRun$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/SimpleAcRun$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/SimpleAcRun$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/SimpleAcRun$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/SimpleAcRun$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/SimpleAcRun$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.andrewscurtis.StartData", "shortDescription" : "data for spawning and starting an andrews-curtis runner.", "object" : "provingground\/andrewscurtis\/StartData$.html", "members_object" : [{"label" : "fromJson", "tail" : "(st: String): StartData", "member" : "provingground.andrewscurtis.StartData.fromJson", "link" : "provingground\/andrewscurtis\/StartData$.html#fromJson(st:String):provingground.andrewscurtis.StartData", "kind" : "def"}, {"label" : "quickhub", "tail" : ": ActorRef", "member" : "provingground.andrewscurtis.StartData.quickhub", "link" : "provingground\/andrewscurtis\/StartData$.html#quickhub:akka.actor.ActorRef", "kind" : "implicit val"}, {"label" : "rw", "tail" : "(): upickle.default.ReadWriter[StartData]", "member" : "provingground.andrewscurtis.StartData.rw", "link" : "provingground\/andrewscurtis\/StartData$.html#rw:upickle.default.ReadWriter[provingground.andrewscurtis.StartData]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/StartData$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/StartData$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/StartData$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/StartData$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/StartData$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/StartData$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/StartData$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/StartData$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/StartData$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/StartData$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/StartData$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/StartData$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/andrewscurtis\/StartData$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/StartData$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/StartData$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/StartData$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/StartData$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/StartData$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/StartData$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "run", "tail" : "(sse: Sink[Snap, Future[Done]]): Future[ActorRef]", "member" : "provingground.andrewscurtis.StartData.run", "link" : "provingground\/andrewscurtis\/StartData.html#run(sse:akka.stream.scaladsl.Sink[provingground.andrewscurtis.ACElem.Snap,scala.concurrent.Future[akka.Done]]):scala.concurrent.Future[akka.actor.ActorRef]", "kind" : "def"}, {"label" : "log", "tail" : "(): (Future[BSONDocument], Future[Future[WriteResult]])", "member" : "provingground.andrewscurtis.StartData.log", "link" : "provingground\/andrewscurtis\/StartData.html#log:(scala.concurrent.Future[reactivemongo.bson.BSONDocument],scala.concurrent.Future[scala.concurrent.Future[reactivemongo.api.commands.WriteResult]])", "kind" : "def"}, {"label" : "runner", "tail" : "(init: (FiniteDistribution[AtomicMove], FiniteDistribution[Moves]), sse: Sink[Snap, Future[Done]]): ActorRef", "member" : "provingground.andrewscurtis.StartData.runner", "link" : "provingground\/andrewscurtis\/StartData.html#runner(init:(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves]),sse:akka.stream.scaladsl.Sink[provingground.andrewscurtis.ACElem.Snap,scala.concurrent.Future[akka.Done]]):akka.actor.ActorRef", "kind" : "def"}, {"label" : "initFut", "tail" : "(): Future[(FiniteDistribution[AtomicMove], FiniteDistribution[Moves])]", "member" : "provingground.andrewscurtis.StartData.initFut", "link" : "provingground\/andrewscurtis\/StartData.html#initFut:scala.concurrent.Future[(provingground.FiniteDistribution[provingground.andrewscurtis.AtomicMove],provingground.FiniteDistribution[provingground.andrewscurtis.Moves])]", "kind" : "def"}, {"label" : "p", "tail" : ": Param", "member" : "provingground.andrewscurtis.StartData.p", "link" : "provingground\/andrewscurtis\/StartData.html#p:provingground.andrewscurtis.Param", "kind" : "val"}, {"member" : "provingground.andrewscurtis.StartData#<init>", "error" : "unsupported entity"}, {"label" : "smooth", "tail" : ": Boolean", "member" : "provingground.andrewscurtis.StartData.smooth", "link" : "provingground\/andrewscurtis\/StartData.html#smooth:Boolean", "kind" : "val"}, {"label" : "epsilon", "tail" : ": Double", "member" : "provingground.andrewscurtis.StartData.epsilon", "link" : "provingground\/andrewscurtis\/StartData.html#epsilon:Double", "kind" : "val"}, {"label" : "strictness", "tail" : ": Double", "member" : "provingground.andrewscurtis.StartData.strictness", "link" : "provingground\/andrewscurtis\/StartData.html#strictness:Double", "kind" : "val"}, {"label" : "steps", "tail" : ": Int", "member" : "provingground.andrewscurtis.StartData.steps", "link" : "provingground\/andrewscurtis\/StartData.html#steps:Int", "kind" : "val"}, {"label" : "wrdCntn", "tail" : ": Double", "member" : "provingground.andrewscurtis.StartData.wrdCntn", "link" : "provingground\/andrewscurtis\/StartData.html#wrdCntn:Double", "kind" : "val"}, {"label" : "size", "tail" : ": Int", "member" : "provingground.andrewscurtis.StartData.size", "link" : "provingground\/andrewscurtis\/StartData.html#size:Int", "kind" : "val"}, {"label" : "rank", "tail" : ": Int", "member" : "provingground.andrewscurtis.StartData.rank", "link" : "provingground\/andrewscurtis\/StartData.html#rank:Int", "kind" : "val"}, {"label" : "name", "tail" : ": String", "member" : "provingground.andrewscurtis.StartData.name", "link" : "provingground\/andrewscurtis\/StartData.html#name:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/StartData.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/StartData.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/StartData.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/StartData.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/StartData.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/StartData.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/StartData.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/StartData.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/StartData.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/StartData.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/StartData.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/StartData.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/StartData.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/StartData.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/StartData.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/StartData.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/andrewscurtis\/StartData.html", "kind" : "case class"}, {"name" : "provingground.andrewscurtis.StateView", "shortDescription" : "", "object" : "provingground\/andrewscurtis\/StateView$.html", "members_class" : [{"label" : "hardThms", "tail" : "(): Vector[Presentation]", "member" : "provingground.andrewscurtis.StateView.hardThms", "link" : "provingground\/andrewscurtis\/StateView.html#hardThms:scala.collection.immutable.Vector[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "hardness", "tail" : "(thm: Presentation): Double", "member" : "provingground.andrewscurtis.StateView.hardness", "link" : "provingground\/andrewscurtis\/StateView.html#hardness(thm:provingground.andrewscurtis.FreeGroups.Presentation):Double", "kind" : "def"}, {"label" : "hardnessMap", "tail" : ": Map[Presentation, Double]", "member" : "provingground.andrewscurtis.StateView.hardnessMap", "link" : "provingground\/andrewscurtis\/StateView.html#hardnessMap:scala.collection.immutable.Map[provingground.andrewscurtis.FreeGroups.Presentation,Double]", "kind" : "lazy val"}, {"label" : "totalProofWeight", "tail" : "(thm: Presentation): Double", "member" : "provingground.andrewscurtis.StateView.totalProofWeight", "link" : "provingground\/andrewscurtis\/StateView.html#totalProofWeight(thm:provingground.andrewscurtis.FreeGroups.Presentation):Double", "kind" : "def"}, {"label" : "proofWeightMap", "tail" : ": Map[Presentation, Double]", "member" : "provingground.andrewscurtis.StateView.proofWeightMap", "link" : "provingground\/andrewscurtis\/StateView.html#proofWeightMap:scala.collection.immutable.Map[provingground.andrewscurtis.FreeGroups.Presentation,Double]", "kind" : "lazy val"}, {"label" : "thmWeights", "tail" : ": Map[Presentation, Double]", "member" : "provingground.andrewscurtis.StateView.thmWeights", "link" : "provingground\/andrewscurtis\/StateView.html#thmWeights:scala.collection.immutable.Map[provingground.andrewscurtis.FreeGroups.Presentation,Double]", "kind" : "lazy val"}, {"label" : "proofWeight", "tail" : "(mvs: Moves): Double", "member" : "provingground.andrewscurtis.StateView.proofWeight", "link" : "provingground\/andrewscurtis\/StateView.html#proofWeight(mvs:provingground.andrewscurtis.Moves):Double", "kind" : "def"}, {"label" : "proofs", "tail" : "(thm: Presentation): Vector[Moves]", "member" : "provingground.andrewscurtis.StateView.proofs", "link" : "provingground\/andrewscurtis\/StateView.html#proofs(thm:provingground.andrewscurtis.FreeGroups.Presentation):scala.collection.immutable.Vector[provingground.andrewscurtis.Moves]", "kind" : "def"}, {"label" : "proofElems", "tail" : ": Map[Presentation, Vector[ACElem]]", "member" : "provingground.andrewscurtis.StateView.proofElems", "link" : "provingground\/andrewscurtis\/StateView.html#proofElems:scala.collection.immutable.Map[provingground.andrewscurtis.FreeGroups.Presentation,scala.collection.immutable.Vector[provingground.andrewscurtis.ACElem]]", "kind" : "lazy val"}, {"label" : "fdP", "tail" : ": FiniteDistribution[Presentation]", "member" : "provingground.andrewscurtis.StateView.fdP", "link" : "provingground\/andrewscurtis\/StateView.html#fdP:provingground.FiniteDistribution[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "lazy val"}, {"label" : "fdV", "tail" : ": FiniteDistribution[Moves]", "member" : "provingground.andrewscurtis.StateView.fdV", "link" : "provingground\/andrewscurtis\/StateView.html#fdV:provingground.FiniteDistribution[provingground.andrewscurtis.Moves]", "kind" : "lazy val"}, {"member" : "provingground.andrewscurtis.StateView#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/StateView.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/StateView.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/StateView.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/StateView.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/StateView.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/StateView.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/StateView.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/StateView.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/StateView.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/StateView.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/StateView.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/StateView.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/andrewscurtis\/StateView.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/StateView.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/StateView.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/StateView.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/StateView.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/StateView.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/StateView.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "fromMongo", "tail" : "(name: String): Future[StateView]", "member" : "provingground.andrewscurtis.StateView.fromMongo", "link" : "provingground\/andrewscurtis\/StateView$.html#fromMongo(name:String):scala.concurrent.Future[provingground.andrewscurtis.StateView]", "kind" : "def"}, {"label" : "apply", "tail" : "(name: String): Future[StateView]", "member" : "provingground.andrewscurtis.StateView.apply", "link" : "provingground\/andrewscurtis\/StateView$.html#apply(name:String):scala.concurrent.Future[provingground.andrewscurtis.StateView]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/StateView$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/StateView$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/StateView$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/StateView$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/StateView$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/StateView$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/StateView$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/StateView$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/StateView$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/StateView$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/StateView$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/StateView$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/andrewscurtis\/StateView$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/StateView$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/StateView$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/StateView$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/StateView$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/StateView$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/StateView$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/andrewscurtis\/StateView.html", "kind" : "class"}, {"name" : "provingground.andrewscurtis.Transpose", "shortDescription" : "", "object" : "provingground\/andrewscurtis\/Transpose$.html", "members_object" : [{"label" : "rw", "tail" : "(): upickle.default.ReadWriter[Transpose]", "member" : "provingground.andrewscurtis.Transpose.rw", "link" : "provingground\/andrewscurtis\/Transpose$.html#rw:upickle.default.ReadWriter[provingground.andrewscurtis.Transpose]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/Transpose$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/Transpose$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/Transpose$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/Transpose$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/Transpose$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/Transpose$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/Transpose$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/Transpose$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/Transpose$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/Transpose$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/Transpose$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/Transpose$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/andrewscurtis\/Transpose$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/Transpose$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/Transpose$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/Transpose$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/Transpose$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/Transpose$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/Transpose$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "apply", "tail" : "(pres: Presentation): Option[Presentation]", "member" : "provingground.andrewscurtis.Transpose.apply", "link" : "provingground\/andrewscurtis\/Transpose.html#apply(pres:provingground.andrewscurtis.FreeGroups.Presentation):Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"member" : "provingground.andrewscurtis.Transpose#<init>", "error" : "unsupported entity"}, {"label" : "l", "tail" : ": Int", "member" : "provingground.andrewscurtis.Transpose.l", "link" : "provingground\/andrewscurtis\/Transpose.html#l:Int", "kind" : "val"}, {"label" : "k", "tail" : ": Int", "member" : "provingground.andrewscurtis.Transpose.k", "link" : "provingground\/andrewscurtis\/Transpose.html#k:Int", "kind" : "val"}, {"label" : "toString", "tail" : "(): String", "member" : "provingground.andrewscurtis.AtomicMove.toString", "link" : "provingground\/andrewscurtis\/Transpose.html#toString():String", "kind" : "def"}, {"label" : "toLatex", "tail" : "(): String", "member" : "provingground.andrewscurtis.AtomicMove.toLatex", "link" : "provingground\/andrewscurtis\/Transpose.html#toLatex:String", "kind" : "def"}, {"label" : "toPlainString", "tail" : "(): String", "member" : "provingground.andrewscurtis.AtomicMove.toPlainString", "link" : "provingground\/andrewscurtis\/Transpose.html#toPlainString:String", "kind" : "def"}, {"label" : "toFunc", "tail" : "(): (Presentation) ⇒ Option[Presentation]", "member" : "provingground.andrewscurtis.AtomicMove.toFunc", "link" : "provingground\/andrewscurtis\/Transpose.html#toFunc:provingground.andrewscurtis.FreeGroups.Presentation=>Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "compose", "tail" : "(mf: AtomicMove): Moves", "member" : "provingground.andrewscurtis.AtomicMove.compose", "link" : "provingground\/andrewscurtis\/Transpose.html#compose(mf:provingground.andrewscurtis.AtomicMove):provingground.andrewscurtis.Moves", "kind" : "def"}, {"label" : "actOnPres", "tail" : "(fdPres: FiniteDistribution[Presentation]): FiniteDistribution[Presentation]", "member" : "provingground.andrewscurtis.AtomicMove.actOnPres", "link" : "provingground\/andrewscurtis\/Transpose.html#actOnPres(fdPres:provingground.FiniteDistribution[provingground.andrewscurtis.FreeGroups.Presentation]):provingground.FiniteDistribution[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "movesDF", "tail" : "(): AdjDiffbleFunction[FiniteDistribution[Moves], FiniteDistribution[Moves]]", "member" : "provingground.andrewscurtis.AtomicMove.movesDF", "link" : "provingground\/andrewscurtis\/Transpose.html#movesDF:provingground.learning.AdjDiffbleFunction[provingground.FiniteDistribution[provingground.andrewscurtis.Moves],provingground.FiniteDistribution[provingground.andrewscurtis.Moves]]", "kind" : "def"}, {"label" : "actOnMoves", "tail" : "(moves: Moves): Option[Moves]", "member" : "provingground.andrewscurtis.AtomicMove.actOnMoves", "link" : "provingground\/andrewscurtis\/Transpose.html#actOnMoves(moves:provingground.andrewscurtis.Moves):Option[provingground.andrewscurtis.Moves]", "kind" : "def"}, {"label" : "apply", "tail" : "(fdVertices: FiniteDistribution[Moves]): FiniteDistribution[Moves]", "member" : "provingground.andrewscurtis.AtomicMove.apply", "link" : "provingground\/andrewscurtis\/Transpose.html#apply(fdVertices:provingground.FiniteDistribution[provingground.andrewscurtis.Moves]):provingground.FiniteDistribution[provingground.andrewscurtis.Moves]", "kind" : "def"}, {"label" : "apply", "tail" : "(moves: Moves): Option[Moves]", "member" : "provingground.andrewscurtis.AtomicMove.apply", "link" : "provingground\/andrewscurtis\/Transpose.html#apply(moves:provingground.andrewscurtis.Moves):Option[provingground.andrewscurtis.Moves]", "kind" : "def"}, {"label" : "apply", "tail" : "(opPres: Option[Presentation]): Option[Presentation]", "member" : "provingground.andrewscurtis.AtomicMove.apply", "link" : "provingground\/andrewscurtis\/Transpose.html#apply(opPres:Option[provingground.andrewscurtis.FreeGroups.Presentation]):Option[provingground.andrewscurtis.FreeGroups.Presentation]", "kind" : "def"}, {"label" : "andThen", "tail" : "(g: (Option[Moves]) ⇒ A): (Moves) ⇒ A", "member" : "scala.Function1.andThen", "link" : "provingground\/andrewscurtis\/Transpose.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) ⇒ Moves): (A) ⇒ Option[Moves]", "member" : "scala.Function1.compose", "link" : "provingground\/andrewscurtis\/Transpose.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/Transpose.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/Transpose.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/Transpose.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/Transpose.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/Transpose.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/Transpose.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/Transpose.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/Transpose.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/Transpose.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/Transpose.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/Transpose.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/Transpose.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/Transpose.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/Transpose.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/Transpose.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/Transpose.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/andrewscurtis\/Transpose.html", "kind" : "case class"}], "provingground.interface" : [{"name" : "provingground.interface.Amm", "shortDescription" : "", "object" : "provingground\/interface\/Amm$.html", "members_object" : [{"label" : "replResult", "tail" : "(code: String): String", "member" : "provingground.interface.Amm.replResult", "link" : "provingground\/interface\/Amm$.html#replResult(code:String):String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/interface\/Amm$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/interface\/Amm$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/interface\/Amm$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/interface\/Amm$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/interface\/Amm$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/interface\/Amm$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/interface\/Amm$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/Amm$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/Amm$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/Amm$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/interface\/Amm$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/interface\/Amm$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/interface\/Amm$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/interface\/Amm$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/interface\/Amm$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/interface\/Amm$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/interface\/Amm$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/interface\/Amm$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/interface\/Amm$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.interface.AmmScriptServer", "shortDescription" : "", "object" : "provingground\/interface\/AmmScriptServer$.html", "members_object" : [{"label" : "route", "tail" : ": Route", "member" : "provingground.interface.AmmScriptServer.route", "link" : "provingground\/interface\/AmmScriptServer$.html#route:akka.http.scaladsl.server.Route", "kind" : "val"}, {"label" : "htmlRoute", "tail" : ": Route", "member" : "provingground.interface.AmmScriptServer.htmlRoute", "link" : "provingground\/interface\/AmmScriptServer$.html#htmlRoute:akka.http.scaladsl.server.Route", "kind" : "val"}, {"label" : "ammRoute", "tail" : ": Route", "member" : "provingground.interface.AmmScriptServer.ammRoute", "link" : "provingground\/interface\/AmmScriptServer$.html#ammRoute:akka.http.scaladsl.server.Route", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/interface\/AmmScriptServer$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/interface\/AmmScriptServer$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/interface\/AmmScriptServer$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/interface\/AmmScriptServer$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/interface\/AmmScriptServer$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/interface\/AmmScriptServer$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/interface\/AmmScriptServer$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/AmmScriptServer$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/AmmScriptServer$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/AmmScriptServer$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/interface\/AmmScriptServer$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/interface\/AmmScriptServer$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/interface\/AmmScriptServer$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/interface\/AmmScriptServer$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/interface\/AmmScriptServer$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/interface\/AmmScriptServer$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/interface\/AmmScriptServer$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/interface\/AmmScriptServer$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/interface\/AmmScriptServer$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.interface.AmmService", "shortDescription" : "", "object" : "provingground\/interface\/AmmService$.html", "members_object" : [{"label" : "indexHTML", "tail" : ": String", "member" : "provingground.interface.AmmService.indexHTML", "link" : "provingground\/interface\/AmmService$.html#indexHTML:String", "kind" : "val"}, {"label" : "replResult", "tail" : "(code: String): Either[String, String]", "member" : "provingground.interface.AmmService.replResult", "link" : "provingground\/interface\/AmmService$.html#replResult(code:String):Either[String,String]", "kind" : "def"}, {"label" : "initCommands", "tail" : ": String", "member" : "provingground.interface.AmmService.initCommands", "link" : "provingground\/interface\/AmmService$.html#initCommands:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/interface\/AmmService$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/interface\/AmmService$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/interface\/AmmService$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/interface\/AmmService$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/interface\/AmmService$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/interface\/AmmService$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/interface\/AmmService$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/AmmService$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/AmmService$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/AmmService$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/interface\/AmmService$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/interface\/AmmService$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/interface\/AmmService$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/interface\/AmmService$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/interface\/AmmService$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/interface\/AmmService$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/interface\/AmmService$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/interface\/AmmService$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/interface\/AmmService$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.interface.Blender", "shortDescription" : "", "members_class" : [{"label" : "iter", "tail" : "(init: A, copies: Int, loops: Int): Future[A]", "member" : "provingground.interface.Blender.iter", "link" : "provingground\/interface\/Blender.html#iter(init:A,copies:Int,loops:Int):scala.concurrent.Future[A]", "kind" : "def"}, {"label" : "iterFut", "tail" : "(init: Future[A], copies: Int, loops: Int): Future[A]", "member" : "provingground.interface.Blender.iterFut", "link" : "provingground\/interface\/Blender.html#iterFut(init:scala.concurrent.Future[A],copies:Int,loops:Int):scala.concurrent.Future[A]", "kind" : "def"}, {"label" : "futDynLoop", "tail" : "(fut: Future[A], n: Int): Future[A]", "member" : "provingground.interface.Blender.futDynLoop", "link" : "provingground\/interface\/Blender.html#futDynLoop(fut:scala.concurrent.Future[A],n:Int):scala.concurrent.Future[A]", "kind" : "def"}, {"label" : "asyncDynLoop", "tail" : "(a: A, n: Int): Future[A]", "member" : "provingground.interface.Blender.asyncDynLoop", "link" : "provingground\/interface\/Blender.html#asyncDynLoop(a:A,n:Int):scala.concurrent.Future[A]", "kind" : "def"}, {"member" : "provingground.interface.Blender#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/interface\/Blender.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/interface\/Blender.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/interface\/Blender.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/interface\/Blender.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/interface\/Blender.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/interface\/Blender.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/interface\/Blender.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/Blender.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/Blender.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/Blender.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/interface\/Blender.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/interface\/Blender.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/interface\/Blender.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/interface\/Blender.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/interface\/Blender.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/interface\/Blender.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/interface\/Blender.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/interface\/Blender.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/interface\/Blender.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/interface\/Blender.html", "kind" : "class"}, {"name" : "provingground.interface.FileName", "shortDescription" : "", "object" : "provingground\/interface\/FileName$.html", "members_object" : [{"label" : "unapply", "tail" : "(file: String, ext: String): Option[String]", "member" : "provingground.interface.FileName.unapply", "link" : "provingground\/interface\/FileName$.html#unapply(file:String,ext:String):Option[String]", "kind" : "def"}, {"label" : "unapply", "tail" : "(file: Path, ext: String): Option[String]", "member" : "provingground.interface.FileName.unapply", "link" : "provingground\/interface\/FileName$.html#unapply(file:ammonite.ops.Path,ext:String):Option[String]", "kind" : "def"}, {"label" : "apply", "tail" : "(name: String, ext: String): String", "member" : "provingground.interface.FileName.apply", "link" : "provingground\/interface\/FileName$.html#apply(name:String,ext:String):String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/interface\/FileName$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/interface\/FileName$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/interface\/FileName$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/interface\/FileName$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/interface\/FileName$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/interface\/FileName$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/interface\/FileName$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/FileName$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/FileName$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/FileName$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/interface\/FileName$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/interface\/FileName$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/interface\/FileName$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/interface\/FileName$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/interface\/FileName$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/interface\/FileName$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/interface\/FileName$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/interface\/FileName$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/interface\/FileName$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.interface.Header", "shortDescription" : "", "object" : "provingground\/interface\/Header$.html", "members_object" : [{"label" : "evolve", "tail" : ": String", "member" : "provingground.interface.Header.evolve", "link" : "provingground\/interface\/Header$.html#evolve:String", "kind" : "val"}, {"label" : "fdMVP", "tail" : ": String", "member" : "provingground.interface.Header.fdMVP", "link" : "provingground\/interface\/Header$.html#fdMVP:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/interface\/Header$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/interface\/Header$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/interface\/Header$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/interface\/Header$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/interface\/Header$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/interface\/Header$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/interface\/Header$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/Header$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/Header$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/Header$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/interface\/Header$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/interface\/Header$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/interface\/Header$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/interface\/Header$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/interface\/Header$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/interface\/Header$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/interface\/Header$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/interface\/Header$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/interface\/Header$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.interface.HttpServer", "shortDescription" : "", "object" : "provingground\/interface\/HttpServer$.html", "members_object" : [{"label" : "bindingFuture", "tail" : ": Future[ServerBinding]", "member" : "provingground.interface.HttpServer.bindingFuture", "link" : "provingground\/interface\/HttpServer$.html#bindingFuture:scala.concurrent.Future[akka.http.scaladsl.Http.ServerBinding]", "kind" : "val"}, {"label" : "server", "tail" : ": ServerStart", "member" : "provingground.interface.HttpServer.server", "link" : "provingground\/interface\/HttpServer$.html#server:provingground.interface.ServerStart", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/interface\/HttpServer$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/interface\/HttpServer$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/interface\/HttpServer$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/interface\/HttpServer$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/interface\/HttpServer$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/interface\/HttpServer$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/interface\/HttpServer$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/HttpServer$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/HttpServer$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/HttpServer$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/interface\/HttpServer$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/interface\/HttpServer$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/interface\/HttpServer$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/interface\/HttpServer$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/interface\/HttpServer$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/interface\/HttpServer$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/interface\/HttpServer$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/interface\/HttpServer$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/interface\/HttpServer$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.interface.IndexedIndMod", "shortDescription" : "", "members_case class" : [{"label" : "getRecTry", "tail" : "(argsFmlyTerm: Try[Vector[Term]]): Try[Term]", "member" : "provingground.interface.IndexedIndMod.getRecTry", "link" : "provingground\/interface\/IndexedIndMod.html#getRecTry(argsFmlyTerm:scala.util.Try[Vector[provingground.HoTT.Term]]):scala.util.Try[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "getRecOpt", "tail" : "(argsFmlyTerm: Option[Vector[Term]]): Option[Term]", "member" : "provingground.interface.IndexedIndMod.getRecOpt", "link" : "provingground\/interface\/IndexedIndMod.html#getRecOpt(argsFmlyTerm:Option[Vector[provingground.HoTT.Term]]):Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "getInd", "tail" : "(p: Vector[Term]): IndexedConstructorSeqDom[getInd._1.type.SS, Term, getInd._2.type.Fb, getInd._2.type.Index, getInd._1.type.Intros] forSome {val _1: IndexedConstructorSeqExst, val _2: TypFamilyExst}", "member" : "provingground.interface.IndexedIndMod.getInd", "link" : "provingground\/interface\/IndexedIndMod.html#getInd(p:Vector[provingground.HoTT.Term]):provingground.induction.IndexedConstructorSeqDom[_1.SS,provingground.HoTT.Term,_2.Fb,_2.Index,_1.Intros]forSome{val_1:provingground.induction.TypFamilyExst#IndexedConstructorSeqExst;val_2:provingground.induction.TypFamilyExst}", "kind" : "def"}, {"member" : "provingground.interface.IndexedIndMod#<init>", "error" : "unsupported entity"}, {"label" : "isPropn", "tail" : ": Boolean", "member" : "provingground.interface.IndexedIndMod.isPropn", "link" : "provingground\/interface\/IndexedIndMod.html#isPropn:Boolean", "kind" : "val"}, {"label" : "numParams", "tail" : ": Int", "member" : "provingground.interface.IndexedIndMod.numParams", "link" : "provingground\/interface\/IndexedIndMod.html#numParams:Int", "kind" : "val"}, {"label" : "intros", "tail" : ": Vector[Term]", "member" : "provingground.interface.IndexedIndMod.intros", "link" : "provingground\/interface\/IndexedIndMod.html#intros:Vector[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "typF", "tail" : ": Term", "member" : "provingground.interface.IndexedIndMod.typF", "link" : "provingground\/interface\/IndexedIndMod.html#typF:provingground.HoTT.Term", "kind" : "val"}, {"label" : "name", "tail" : ": Name", "member" : "provingground.interface.IndexedIndMod.name", "link" : "provingground\/interface\/IndexedIndMod.html#name:trepplein.Name", "kind" : "val"}, {"label" : "recName", "tail" : ": Str", "member" : "provingground.interface.TermIndMod.recName", "link" : "provingground\/interface\/IndexedIndMod.html#recName:trepplein.Name.Str", "kind" : "val"}, {"label" : "introsFold", "tail" : "(p: Vector[Term]): Vector[Term]", "member" : "provingground.interface.TermIndMod.introsFold", "link" : "provingground\/interface\/IndexedIndMod.html#introsFold(p:Vector[provingground.HoTT.Term]):Vector[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/interface\/IndexedIndMod.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/interface\/IndexedIndMod.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/interface\/IndexedIndMod.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/interface\/IndexedIndMod.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/interface\/IndexedIndMod.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/interface\/IndexedIndMod.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/interface\/IndexedIndMod.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/IndexedIndMod.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/IndexedIndMod.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/IndexedIndMod.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/interface\/IndexedIndMod.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/interface\/IndexedIndMod.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/interface\/IndexedIndMod.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/interface\/IndexedIndMod.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/interface\/IndexedIndMod.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/interface\/IndexedIndMod.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/interface\/IndexedIndMod.html", "kind" : "case class"}, {"name" : "provingground.interface.JsFunc", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/interface\/JsFunc.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/interface\/JsFunc.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/interface\/JsFunc.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/interface\/JsFunc.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/interface\/JsFunc.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/interface\/JsFunc.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/interface\/JsFunc.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/JsFunc.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/JsFunc.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/JsFunc.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/interface\/JsFunc.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/interface\/JsFunc.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/interface\/JsFunc.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/interface\/JsFunc.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/interface\/JsFunc.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/interface\/JsFunc.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/interface\/JsFunc.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/interface\/JsFunc.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/interface\/JsFunc.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "decode", "tail" : "(js: Value): F[Value]", "member" : "provingground.interface.JsFunc.decode", "link" : "provingground\/interface\/JsFunc.html#decode(js:upickle.Js.Value):F[upickle.Js.Value]", "kind" : "abstract def"}, {"label" : "encode", "tail" : "(t: F[Value]): Value", "member" : "provingground.interface.JsFunc.encode", "link" : "provingground\/interface\/JsFunc.html#encode(t:F[upickle.Js.Value]):upickle.Js.Value", "kind" : "abstract def"}], "shortDescription" : "", "object" : "provingground\/interface\/JsFunc$.html", "members_object" : [{"label" : "jsToBuild", "tail" : "(name: String, header: String)(build: (F[I]) ⇒ I)(arg0: Traverse[F], jsF: JsFunc[F]): Translator[Value, I]", "member" : "provingground.interface.JsFunc.jsToBuild", "link" : "provingground\/interface\/JsFunc$.html#jsToBuild[I,F[_]](name:String,header:String)(build:F[I]=>I)(implicitevidence$2:cats.Traverse[F],implicitjsF:provingground.interface.JsFunc[F]):provingground.translation.Translator[upickle.Js.Value,I]", "kind" : "def"}, {"label" : "jsToOpt", "tail" : "(name: String, header: String)(build: (F[I]) ⇒ Option[I])(arg0: Traverse[F], jsF: JsFunc[F]): Translator[Value, I]", "member" : "provingground.interface.JsFunc.jsToOpt", "link" : "provingground\/interface\/JsFunc$.html#jsToOpt[I,F[_]](name:String,header:String)(build:F[I]=>Option[I])(implicitevidence$1:cats.Traverse[F],implicitjsF:provingground.interface.JsFunc[F]):provingground.translation.Translator[upickle.Js.Value,I]", "kind" : "def"}, {"label" : "toJs", "tail" : "(pat: Pattern[I, F])(name: String, header: String)(jsF: JsFunc[F]): Translator[I, Value]", "member" : "provingground.interface.JsFunc.toJs", "link" : "provingground\/interface\/JsFunc$.html#toJs[I,F[_]](pat:provingground.translation.Translator.Pattern[I,F])(name:String,header:String)(implicitjsF:provingground.interface.JsFunc[F]):provingground.translation.Translator[I,upickle.Js.Value]", "kind" : "def"}, {"label" : "pairJS", "tail" : "(xJs: JsFunc[X], yJs: JsFunc[Y]): JsFunc[[A](X[A], Y[A])]", "member" : "provingground.interface.JsFunc.pairJS", "link" : "provingground\/interface\/JsFunc$.html#pairJS[X[_],Y[_]](implicitxJs:provingground.interface.JsFunc[X],implicityJs:provingground.interface.JsFunc[Y]):provingground.interface.JsFunc[[A](X[A],Y[A])]", "kind" : "implicit def"}, {"label" : "vecJs", "tail" : ": JsFunc[Vector]", "member" : "provingground.interface.JsFunc.vecJs", "link" : "provingground\/interface\/JsFunc$.html#vecJs:provingground.interface.JsFunc[Vector]", "kind" : "implicit val"}, {"label" : "unitJs", "tail" : ": JsFunc[Un]", "member" : "provingground.interface.JsFunc.unitJs", "link" : "provingground\/interface\/JsFunc$.html#unitJs:provingground.interface.JsFunc[provingground.translation.Functors.Un]", "kind" : "implicit val"}, {"label" : "strJs", "tail" : ": JsFunc[S]", "member" : "provingground.interface.JsFunc.strJs", "link" : "provingground\/interface\/JsFunc$.html#strJs:provingground.interface.JsFunc[provingground.translation.Functors.S]", "kind" : "implicit val"}, {"label" : "intJs", "tail" : ": JsFunc[N]", "member" : "provingground.interface.JsFunc.intJs", "link" : "provingground\/interface\/JsFunc$.html#intJs:provingground.interface.JsFunc[provingground.translation.Functors.N]", "kind" : "implicit val"}, {"label" : "idJS", "tail" : ": JsFunc[Id]", "member" : "provingground.interface.JsFunc.idJS", "link" : "provingground\/interface\/JsFunc$.html#idJS:provingground.interface.JsFunc[cats.Id]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/interface\/JsFunc$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/interface\/JsFunc$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/interface\/JsFunc$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/interface\/JsFunc$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/interface\/JsFunc$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/interface\/JsFunc$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/interface\/JsFunc$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/JsFunc$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/JsFunc$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/JsFunc$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/interface\/JsFunc$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/interface\/JsFunc$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/interface\/JsFunc$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/interface\/JsFunc$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/interface\/JsFunc$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/interface\/JsFunc$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/interface\/JsFunc$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/interface\/JsFunc$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/interface\/JsFunc$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/interface\/JsFunc.html", "kind" : "trait"}, {"name" : "provingground.interface.LeanCodeGen", "shortDescription" : "", "object" : "provingground\/interface\/LeanCodeGen$.html", "members_object" : [{"label" : "memoIndTaskKV", "tail" : ": List[Term]", "member" : "provingground.interface.LeanCodeGen.memoIndTaskKV", "link" : "provingground\/interface\/LeanCodeGen$.html#memoIndTaskKV:List[scala.meta.Term]", "kind" : "val"}, {"label" : "memoIndKV", "tail" : ": List[Term]", "member" : "provingground.interface.LeanCodeGen.memoIndKV", "link" : "provingground\/interface\/LeanCodeGen$.html#memoIndKV:List[scala.meta.Term]", "kind" : "val"}, {"label" : "memoDefTaskKV", "tail" : ": List[Term]", "member" : "provingground.interface.LeanCodeGen.memoDefTaskKV", "link" : "provingground\/interface\/LeanCodeGen$.html#memoDefTaskKV:List[scala.meta.Term]", "kind" : "val"}, {"label" : "memoDefKV", "tail" : ": List[Term]", "member" : "provingground.interface.LeanCodeGen.memoDefKV", "link" : "provingground\/interface\/LeanCodeGen$.html#memoDefKV:List[scala.meta.Term]", "kind" : "val"}, {"label" : "memoStats", "tail" : ": IndexedSeq[Stat]", "member" : "provingground.interface.LeanCodeGen.memoStats", "link" : "provingground\/interface\/LeanCodeGen$.html#memoStats:IndexedSeq[scala.meta.Stat]", "kind" : "val"}, {"label" : "memoLines", "tail" : ": IndexedSeq[String]", "member" : "provingground.interface.LeanCodeGen.memoLines", "link" : "provingground\/interface\/LeanCodeGen$.html#memoLines:IndexedSeq[String]", "kind" : "val"}, {"label" : "nameCode", "tail" : "(name: Name): Apply", "member" : "provingground.interface.LeanCodeGen.nameCode", "link" : "provingground\/interface\/LeanCodeGen$.html#nameCode(name:trepplein.Name):meta.Term.Apply", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/interface\/LeanCodeGen$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/interface\/LeanCodeGen$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/interface\/LeanCodeGen$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/interface\/LeanCodeGen$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/interface\/LeanCodeGen$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/interface\/LeanCodeGen$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/interface\/LeanCodeGen$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/LeanCodeGen$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/LeanCodeGen$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/LeanCodeGen$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/interface\/LeanCodeGen$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/interface\/LeanCodeGen$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/interface\/LeanCodeGen$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/interface\/LeanCodeGen$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/interface\/LeanCodeGen$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/interface\/LeanCodeGen$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/interface\/LeanCodeGen$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/interface\/LeanCodeGen$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/interface\/LeanCodeGen$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "memo", "tail" : "(): Unit", "member" : "provingground.interface.LeanCodeGen.memo", "link" : "provingground\/interface\/LeanCodeGen.html#memo():Unit", "kind" : "def"}, {"label" : "save", "tail" : "(): Unit", "member" : "provingground.interface.LeanCodeGen.save", "link" : "provingground\/interface\/LeanCodeGen.html#save():Unit", "kind" : "def"}, {"label" : "writeInduc", "tail" : "(name: Name, ind: TermIndMod): Unit", "member" : "provingground.interface.LeanCodeGen.writeInduc", "link" : "provingground\/interface\/LeanCodeGen.html#writeInduc(name:trepplein.Name,ind:provingground.interface.TermIndMod):Unit", "kind" : "def"}, {"label" : "writeDefn", "tail" : "(name: Name, code: Term): Unit", "member" : "provingground.interface.LeanCodeGen.writeDefn", "link" : "provingground\/interface\/LeanCodeGen.html#writeDefn(name:trepplein.Name,code:scala.meta.Term):Unit", "kind" : "def"}, {"label" : "memoObj", "tail" : "(): Object", "member" : "provingground.interface.LeanCodeGen.memoObj", "link" : "provingground\/interface\/LeanCodeGen.html#memoObj:meta.Defn.Object", "kind" : "def"}, {"label" : "indTaskMapCode", "tail" : "(): Apply", "member" : "provingground.interface.LeanCodeGen.indTaskMapCode", "link" : "provingground\/interface\/LeanCodeGen.html#indTaskMapCode:meta.Term.Apply", "kind" : "def"}, {"label" : "indMapCode", "tail" : "(): Apply", "member" : "provingground.interface.LeanCodeGen.indMapCode", "link" : "provingground\/interface\/LeanCodeGen.html#indMapCode:meta.Term.Apply", "kind" : "def"}, {"label" : "indCode", "tail" : "(m: TermIndMod): Apply", "member" : "provingground.interface.LeanCodeGen.indCode", "link" : "provingground\/interface\/LeanCodeGen.html#indCode(m:provingground.interface.TermIndMod):meta.Term.Apply", "kind" : "def"}, {"label" : "vecCode", "tail" : "(v: Vector[Term]): Apply", "member" : "provingground.interface.LeanCodeGen.vecCode", "link" : "provingground\/interface\/LeanCodeGen.html#vecCode(v:Vector[provingground.HoTT.Term]):meta.Term.Apply", "kind" : "def"}, {"label" : "defTaskMapCode", "tail" : "(): Apply", "member" : "provingground.interface.LeanCodeGen.defTaskMapCode", "link" : "provingground\/interface\/LeanCodeGen.html#defTaskMapCode:meta.Term.Apply", "kind" : "def"}, {"label" : "defMapCode", "tail" : "(): Apply", "member" : "provingground.interface.LeanCodeGen.defMapCode", "link" : "provingground\/interface\/LeanCodeGen.html#defMapCode:meta.Term.Apply", "kind" : "def"}, {"label" : "header", "tail" : ": String", "member" : "provingground.interface.LeanCodeGen.header", "link" : "provingground\/interface\/LeanCodeGen.html#header:String", "kind" : "val"}, {"label" : "base", "tail" : ": Path", "member" : "provingground.interface.LeanCodeGen.base", "link" : "provingground\/interface\/LeanCodeGen.html#base:ammonite.ops.Path", "kind" : "val"}, {"member" : "provingground.interface.LeanCodeGen#<init>", "error" : "unsupported entity"}, {"label" : "parser", "tail" : ": LeanParser", "member" : "provingground.interface.LeanCodeGen.parser", "link" : "provingground\/interface\/LeanCodeGen.html#parser:provingground.interface.LeanParser", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/interface\/LeanCodeGen.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/interface\/LeanCodeGen.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/interface\/LeanCodeGen.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/interface\/LeanCodeGen.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/interface\/LeanCodeGen.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/interface\/LeanCodeGen.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/interface\/LeanCodeGen.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/LeanCodeGen.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/LeanCodeGen.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/LeanCodeGen.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/interface\/LeanCodeGen.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/interface\/LeanCodeGen.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/interface\/LeanCodeGen.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/interface\/LeanCodeGen.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/interface\/LeanCodeGen.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/interface\/LeanCodeGen.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/interface\/LeanCodeGen.html", "kind" : "object"}, {"name" : "provingground.interface.LeanContextException", "shortDescription" : "", "members_case class" : [{"member" : "provingground.interface.LeanContextException#<init>", "error" : "unsupported entity"}, {"label" : "args", "tail" : ": Vector[Expr]", "member" : "provingground.interface.LeanContextException.args", "link" : "provingground\/interface\/LeanContextException.html#args:Vector[trepplein.Expr]", "kind" : "val"}, {"label" : "vars", "tail" : ": Vector[Term]", "member" : "provingground.interface.LeanContextException.vars", "link" : "provingground\/interface\/LeanContextException.html#vars:Vector[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "exc", "tail" : ": Throwable", "member" : "provingground.interface.LeanContextException.exc", "link" : "provingground\/interface\/LeanContextException.html#exc:Throwable", "kind" : "val"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "provingground\/interface\/LeanContextException.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "provingground\/interface\/LeanContextException.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "provingground\/interface\/LeanContextException.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "provingground\/interface\/LeanContextException.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "provingground\/interface\/LeanContextException.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "provingground\/interface\/LeanContextException.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "provingground\/interface\/LeanContextException.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "provingground\/interface\/LeanContextException.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "provingground\/interface\/LeanContextException.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "provingground\/interface\/LeanContextException.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "provingground\/interface\/LeanContextException.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "provingground\/interface\/LeanContextException.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "provingground\/interface\/LeanContextException.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/interface\/LeanContextException.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/interface\/LeanContextException.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/interface\/LeanContextException.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/interface\/LeanContextException.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/interface\/LeanContextException.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/interface\/LeanContextException.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/interface\/LeanContextException.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/LeanContextException.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/LeanContextException.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/LeanContextException.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/interface\/LeanContextException.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/interface\/LeanContextException.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/interface\/LeanContextException.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/interface\/LeanContextException.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/interface\/LeanContextException.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/interface\/LeanContextException.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/interface\/LeanContextException.html", "kind" : "case class"}, {"name" : "provingground.interface.LeanInterface", "shortDescription" : "", "object" : "provingground\/interface\/LeanInterface$.html", "members_object" : [{"label" : "unifier", "tail" : "(a: Term, b: Term, numParams: Int, accum: Vector[(Term, Term)]): Option[Vector[(Term, Term)]]", "member" : "provingground.interface.LeanInterface.unifier", "link" : "provingground\/interface\/LeanInterface$.html#unifier(a:provingground.HoTT.Term,b:provingground.HoTT.Term,numParams:Int,accum:Vector[(provingground.HoTT.Term,provingground.HoTT.Term)]):Option[Vector[(provingground.HoTT.Term,provingground.HoTT.Term)]]", "kind" : "def"}, {"label" : "getModsFromStream", "tail" : "(in: InputStream): Vector[Modification]", "member" : "provingground.interface.LeanInterface.getModsFromStream", "link" : "provingground\/interface\/LeanInterface$.html#getModsFromStream(in:java.io.InputStream):Vector[trepplein.Modification]", "kind" : "def"}, {"label" : "getMods", "tail" : "(filename: String): Vector[Modification]", "member" : "provingground.interface.LeanInterface.getMods", "link" : "provingground\/interface\/LeanInterface$.html#getMods(filename:String):Vector[trepplein.Modification]", "kind" : "def"}, {"label" : "defnExprs", "tail" : "(mods: Vector[Modification]): Vector[Expr]", "member" : "provingground.interface.LeanInterface.defnExprs", "link" : "provingground\/interface\/LeanInterface$.html#defnExprs(mods:Vector[trepplein.Modification]):Vector[trepplein.Expr]", "kind" : "def"}, {"label" : "defnNames", "tail" : "(mods: Vector[Modification], accum: Vector[Name]): Vector[Name]", "member" : "provingground.interface.LeanInterface.defnNames", "link" : "provingground\/interface\/LeanInterface$.html#defnNames(mods:Vector[trepplein.Modification],accum:Vector[trepplein.Name]):Vector[trepplein.Name]", "kind" : "def"}, {"label" : "recApp", "tail" : "(): (Expr) ⇒ Boolean", "member" : "provingground.interface.LeanInterface.recApp", "link" : "provingground\/interface\/LeanInterface$.html#recApp:trepplein.Expr=>Boolean", "kind" : "def"}, {"label" : "modSubExpr", "tail" : "(): (Modification) ⇒ Set[Expr]", "member" : "provingground.interface.LeanInterface.modSubExpr", "link" : "provingground\/interface\/LeanInterface$.html#modSubExpr:trepplein.Modification=>Set[trepplein.Expr]", "kind" : "def"}, {"label" : "subExpr", "tail" : "(expr: Expr): Vector[Expr]", "member" : "provingground.interface.LeanInterface.subExpr", "link" : "provingground\/interface\/LeanInterface$.html#subExpr(expr:trepplein.Expr):Vector[trepplein.Expr]", "kind" : "def"}, {"label" : "varsUsed", "tail" : "(expr: Expr): Set[Int]", "member" : "provingground.interface.LeanInterface.varsUsed", "link" : "provingground\/interface\/LeanInterface$.html#varsUsed(expr:trepplein.Expr):Set[Int]", "kind" : "def"}, {"label" : "usesVar", "tail" : "(expr: Expr, index: Int, ignoreTypes: Boolean): Boolean", "member" : "provingground.interface.LeanInterface.usesVar", "link" : "provingground\/interface\/LeanInterface$.html#usesVar(expr:trepplein.Expr,index:Int,ignoreTypes:Boolean):Boolean", "kind" : "def"}, {"label" : "consts", "tail" : "(expr: Expr): Vector[Name]", "member" : "provingground.interface.LeanInterface.consts", "link" : "provingground\/interface\/LeanInterface$.html#consts(expr:trepplein.Expr):Vector[trepplein.Name]", "kind" : "def"}, {"label" : "foldFuncLean", "tail" : "(func: Term, args: Vector[Term]): Term", "member" : "provingground.interface.LeanInterface.foldFuncLean", "link" : "provingground\/interface\/LeanInterface$.html#foldFuncLean(func:provingground.HoTT.Term,args:Vector[provingground.HoTT.Term]):provingground.HoTT.Term", "kind" : "def"}, {"label" : "applyFuncLean", "tail" : "(func: Term, arg: Term): Term", "member" : "provingground.interface.LeanInterface.applyFuncLean", "link" : "provingground\/interface\/LeanInterface$.html#applyFuncLean(func:provingground.HoTT.Term,arg:provingground.HoTT.Term):provingground.HoTT.Term", "kind" : "def"}, {"label" : "witLess", "tail" : "(t: Term): Vector[Term]", "member" : "provingground.interface.LeanInterface.witLess", "link" : "provingground\/interface\/LeanInterface$.html#witLess(t:provingground.HoTT.Term):Vector[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/interface\/LeanInterface$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/interface\/LeanInterface$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/interface\/LeanInterface$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/interface\/LeanInterface$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/interface\/LeanInterface$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/interface\/LeanInterface$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/interface\/LeanInterface$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/LeanInterface$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/LeanInterface$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/LeanInterface$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/interface\/LeanInterface$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/interface\/LeanInterface$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/interface\/LeanInterface$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/interface\/LeanInterface$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/interface\/LeanInterface$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/interface\/LeanInterface$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/interface\/LeanInterface$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/interface\/LeanInterface$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/interface\/LeanInterface$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.interface.LeanParse", "members_trait" : [{"label" : "toTermIndModOpt", "tail" : "(ind: IndMod): Option[TermIndMod]", "member" : "provingground.interface.LeanParse.toTermIndModOpt", "link" : "provingground\/interface\/LeanParse.html#toTermIndModOpt(ind:trepplein.IndMod):Option[provingground.interface.TermIndMod]", "kind" : "def"}, {"label" : "toTermIndModTry", "tail" : "(ind: IndMod): Try[TermIndMod]", "member" : "provingground.interface.LeanParse.toTermIndModTry", "link" : "provingground\/interface\/LeanParse.html#toTermIndModTry(ind:trepplein.IndMod):scala.util.Try[provingground.interface.TermIndMod]", "kind" : "def"}, {"label" : "parseVar", "tail" : "(b: Binding, vars: Vector[Term]): Try[Term with Subs[Term]]", "member" : "provingground.interface.LeanParse.parseVar", "link" : "provingground\/interface\/LeanParse.html#parseVar(b:trepplein.Binding,vars:Vector[provingground.HoTT.Term]):scala.util.Try[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "parseSym", "tail" : "(name: Name, ty: Expr, vars: Vector[Term]): Try[Term with Subs[Term]]", "member" : "provingground.interface.LeanParse.parseSym", "link" : "provingground\/interface\/LeanParse.html#parseSym(name:trepplein.Name,ty:trepplein.Expr,vars:Vector[provingground.HoTT.Term]):scala.util.Try[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "parseSymOpt", "tail" : "(name: Name, ty: Expr, vars: Vector[Term]): Option[U with Subs[U] forSome {type U <: Term with Subs[U]}]", "member" : "provingground.interface.LeanParse.parseSymOpt", "link" : "provingground\/interface\/LeanParse.html#parseSymOpt(name:trepplein.Name,ty:trepplein.Expr,vars:Vector[provingground.HoTT.Term]):Option[Uwithprovingground.HoTT.Subs[U]forSome{typeU<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]}]", "kind" : "def"}, {"label" : "parseSymVecOpt", "tail" : "(vec: Vector[(Name, Expr)], vars: Vector[Term]): Option[Vector[Term]]", "member" : "provingground.interface.LeanParse.parseSymVecOpt", "link" : "provingground\/interface\/LeanParse.html#parseSymVecOpt(vec:Vector[(trepplein.Name,trepplein.Expr)],vars:Vector[provingground.HoTT.Term]):Option[Vector[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "parseSymVec", "tail" : "(vec: Vector[(Name, Expr)], vars: Vector[Term]): Try[Vector[Term]]", "member" : "provingground.interface.LeanParse.parseSymVec", "link" : "provingground\/interface\/LeanParse.html#parseSymVec(vec:Vector[(trepplein.Name,trepplein.Expr)],vars:Vector[provingground.HoTT.Term]):scala.util.Try[Vector[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "parseTypVec", "tail" : "(vec: Vector[Expr], vars: Vector[Term]): Try[Vector[Typ[Term]]]", "member" : "provingground.interface.LeanParse.parseTypVec", "link" : "provingground\/interface\/LeanParse.html#parseTypVec(vec:Vector[trepplein.Expr],vars:Vector[provingground.HoTT.Term]):scala.util.Try[Vector[provingground.HoTT.Typ[provingground.HoTT.Term]]]", "kind" : "def"}, {"label" : "parseVecOpt", "tail" : "(vec: Vector[Expr], vars: Vector[Term]): Option[Vector[Term]]", "member" : "provingground.interface.LeanParse.parseVecOpt", "link" : "provingground\/interface\/LeanParse.html#parseVecOpt(vec:Vector[trepplein.Expr],vars:Vector[provingground.HoTT.Term]):Option[Vector[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "parseVec", "tail" : "(vec: Vector[Expr], vars: Vector[Term]): Try[Vector[Term]]", "member" : "provingground.interface.LeanParse.parseVec", "link" : "provingground\/interface\/LeanParse.html#parseVec(vec:Vector[trepplein.Expr],vars:Vector[provingground.HoTT.Term]):scala.util.Try[Vector[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "parseTyp", "tail" : "(x: Expr, vars: Vector[Term]): Try[Typ[Term]]", "member" : "provingground.interface.LeanParse.parseTyp", "link" : "provingground\/interface\/LeanParse.html#parseTyp(x:trepplein.Expr,vars:Vector[provingground.HoTT.Term]):scala.util.Try[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "parseTypOpt", "tail" : "(x: Expr, vars: Vector[Term]): Option[Typ[U] forSome {type U <: Term with Subs[U]}]", "member" : "provingground.interface.LeanParse.parseTypOpt", "link" : "provingground\/interface\/LeanParse.html#parseTypOpt(x:trepplein.Expr,vars:Vector[provingground.HoTT.Term]):Option[provingground.HoTT.Typ[U]forSome{typeU<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]}]", "kind" : "def"}, {"label" : "recParser", "tail" : "(rec: ⇒ Parser)(exp: Expr, vars: Vector[Term]): Try[Term]", "member" : "provingground.interface.LeanParse.recParser", "link" : "provingground\/interface\/LeanParse.html#recParser(rec:=>provingground.interface.LeanToTerm.Parser)(exp:trepplein.Expr,vars:Vector[provingground.HoTT.Term]):scala.util.Try[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "recOptParser", "tail" : "(rec: ⇒ OptParser)(exp: Expr, vars: Vector[Term]): Option[Term]", "member" : "provingground.interface.LeanParse.recOptParser", "link" : "provingground\/interface\/LeanParse.html#recOptParser(rec:=>provingground.interface.LeanToTerm.OptParser)(exp:trepplein.Expr,vars:Vector[provingground.HoTT.Term]):Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "applyFuncPropOpt", "tail" : "(func: Term, arg: Term): Option[Term]", "member" : "provingground.interface.LeanParse.applyFuncPropOpt", "link" : "provingground\/interface\/LeanParse.html#applyFuncPropOpt(func:provingground.HoTT.Term,arg:provingground.HoTT.Term):Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "applyFuncProp", "tail" : "(func: Term, arg: Term, vars: Vector[Term], data: Vector[Expr]): Term", "member" : "provingground.interface.LeanParse.applyFuncProp", "link" : "provingground\/interface\/LeanParse.html#applyFuncProp(func:provingground.HoTT.Term,arg:provingground.HoTT.Term,vars:Vector[provingground.HoTT.Term],data:Vector[trepplein.Expr]):provingground.HoTT.Term", "kind" : "def"}, {"label" : "inPropFamily", "tail" : ": (Term) ⇒ Boolean", "member" : "provingground.interface.LeanParse.inPropFamily", "link" : "provingground\/interface\/LeanParse.html#inPropFamily:provingground.HoTT.Term=>Boolean", "kind" : "val"}, {"label" : "Predef", "tail" : "", "member" : "provingground.interface.LeanParse.Predef", "link" : "provingground\/interface\/LeanParse.html#Predef", "kind" : "object"}, {"label" : "defnOpt", "tail" : "(exp: Expr): Option[Term]", "member" : "provingground.interface.LeanParse.defnOpt", "link" : "provingground\/interface\/LeanParse.html#defnOpt(exp:trepplein.Expr):Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "parseOpt", "tail" : ": OptParser", "member" : "provingground.interface.LeanParse.parseOpt", "link" : "provingground\/interface\/LeanParse.html#parseOpt:provingground.interface.LeanToTerm.OptParser", "kind" : "val"}, {"label" : "parse", "tail" : ": Parser", "member" : "provingground.interface.LeanParse.parse", "link" : "provingground\/interface\/LeanParse.html#parse:provingground.interface.LeanToTerm.Parser", "kind" : "val"}, {"label" : "defns", "tail" : "(exp: Expr, typOpt: Option[Typ[Term]]): Option[Term]", "member" : "provingground.interface.LeanParse.defns", "link" : "provingground\/interface\/LeanParse.html#defns(exp:trepplein.Expr,typOpt:Option[provingground.HoTT.Typ[provingground.HoTT.Term]]):Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/interface\/LeanParse.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/interface\/LeanParse.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/interface\/LeanParse.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/interface\/LeanParse.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/interface\/LeanParse.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/interface\/LeanParse.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/interface\/LeanParse.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/LeanParse.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/LeanParse.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/LeanParse.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/interface\/LeanParse.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/interface\/LeanParse.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/interface\/LeanParse.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/interface\/LeanParse.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/interface\/LeanParse.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/interface\/LeanParse.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/interface\/LeanParse.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/interface\/LeanParse.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/interface\/LeanParse.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "addDefnValOpt", "tail" : "(name: Name, ty: Expr, value: Expr): LeanParse", "member" : "provingground.interface.LeanParse.addDefnValOpt", "link" : "provingground\/interface\/LeanParse.html#addDefnValOpt(name:trepplein.Name,ty:trepplein.Expr,value:trepplein.Expr):provingground.interface.LeanParse", "kind" : "abstract def"}, {"label" : "addDefnVal", "tail" : "(name: Name, ty: Expr, value: Expr): LeanParse", "member" : "provingground.interface.LeanParse.addDefnVal", "link" : "provingground\/interface\/LeanParse.html#addDefnVal(name:trepplein.Name,ty:trepplein.Expr,value:trepplein.Expr):provingground.interface.LeanParse", "kind" : "abstract def"}, {"label" : "addAxiomOpt", "tail" : "(name: Name, exp: Expr): LeanParse", "member" : "provingground.interface.LeanParse.addAxiomOpt", "link" : "provingground\/interface\/LeanParse.html#addAxiomOpt(name:trepplein.Name,exp:trepplein.Expr):provingground.interface.LeanParse", "kind" : "abstract def"}, {"label" : "addAxiom", "tail" : "(name: Name, exp: Expr): LeanParse", "member" : "provingground.interface.LeanParse.addAxiom", "link" : "provingground\/interface\/LeanParse.html#addAxiom(name:trepplein.Name,exp:trepplein.Expr):provingground.interface.LeanParse", "kind" : "abstract def"}, {"label" : "termIndModMap", "tail" : ": Map[Name, TermIndMod]", "member" : "provingground.interface.LeanParse.termIndModMap", "link" : "provingground\/interface\/LeanParse.html#termIndModMap:scala.collection.Map[trepplein.Name,provingground.interface.TermIndMod]", "kind" : "abstract val"}, {"label" : "defnMap", "tail" : ": Map[Name, Term]", "member" : "provingground.interface.LeanParse.defnMap", "link" : "provingground\/interface\/LeanParse.html#defnMap:scala.collection.Map[trepplein.Name,provingground.HoTT.Term]", "kind" : "abstract val"}], "shortDescription" : "", "trait" : "provingground\/interface\/LeanParse.html", "kind" : "trait"}, {"name" : "provingground.interface.LeanParser", "shortDescription" : "", "object" : "provingground\/interface\/LeanParser$.html", "members_class" : [{"label" : "codeFromInd", "tail" : "(ind: TermIndMod): Term", "member" : "provingground.interface.LeanParser.codeFromInd", "link" : "provingground\/interface\/LeanParser.html#codeFromInd(ind:provingground.interface.TermIndMod):scala.meta.Term", "kind" : "def"}, {"label" : "defnCode", "tail" : "(): ArrayBuffer[(Name, Term)]", "member" : "provingground.interface.LeanParser.defnCode", "link" : "provingground\/interface\/LeanParser.html#defnCode:scala.collection.mutable.ArrayBuffer[(trepplein.Name,scala.meta.Term)]", "kind" : "def"}, {"label" : "codeGen", "tail" : "(): CodeGen", "member" : "provingground.interface.LeanParser.codeGen", "link" : "provingground\/interface\/LeanParser.html#codeGen:provingground.translation.CodeGen", "kind" : "def"}, {"label" : "allIndNames", "tail" : "(): ArrayBuffer[Name]", "member" : "provingground.interface.LeanParser.allIndNames", "link" : "provingground\/interface\/LeanParser.html#allIndNames:scala.collection.mutable.ArrayBuffer[trepplein.Name]", "kind" : "def"}, {"label" : "defNames", "tail" : "(): ArrayBuffer[Name]", "member" : "provingground.interface.LeanParser.defNames", "link" : "provingground\/interface\/LeanParser.html#defNames:scala.collection.mutable.ArrayBuffer[trepplein.Name]", "kind" : "def"}, {"label" : "indModFromMod", "tail" : "(name: Name): Option[Task[TermIndMod]]", "member" : "provingground.interface.LeanParser.indModFromMod", "link" : "provingground\/interface\/LeanParser.html#indModFromMod(name:trepplein.Name):Option[monix.eval.Task[provingground.interface.TermIndMod]]", "kind" : "def"}, {"label" : "defFromMod", "tail" : "(name: Name): Option[Task[Term]]", "member" : "provingground.interface.LeanParser.defFromMod", "link" : "provingground\/interface\/LeanParser.html#defFromMod(name:trepplein.Name):Option[monix.eval.Task[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "findMod", "tail" : "(name: Name, mods: Seq[Modification]): Option[Modification]", "member" : "provingground.interface.LeanParser.findMod", "link" : "provingground\/interface\/LeanParser.html#findMod(name:trepplein.Name,mods:Seq[trepplein.Modification]):Option[trepplein.Modification]", "kind" : "def"}, {"label" : "modNames", "tail" : "(mod: Modification): Vector[Name]", "member" : "provingground.interface.LeanParser.modNames", "link" : "provingground\/interface\/LeanParser.html#modNames(mod:trepplein.Modification):Vector[trepplein.Name]", "kind" : "def"}, {"label" : "maxIndex", "tail" : "(exp: Expr): Int", "member" : "provingground.interface.LeanParser.maxIndex", "link" : "provingground\/interface\/LeanParser.html#maxIndex(exp:trepplein.Expr):Int", "kind" : "def"}, {"label" : "findChildren", "tail" : "(name: Name): Option[Vector[Expr]]", "member" : "provingground.interface.LeanParser.findChildren", "link" : "provingground\/interface\/LeanParser.html#findChildren(name:trepplein.Name):Option[Vector[trepplein.Expr]]", "kind" : "def"}, {"label" : "findRecChildren", "tail" : "(name: Name): Option[Vector[Expr]]", "member" : "provingground.interface.LeanParser.findRecChildren", "link" : "provingground\/interface\/LeanParser.html#findRecChildren(name:trepplein.Name):Option[Vector[trepplein.Expr]]", "kind" : "def"}, {"label" : "findIntro", "tail" : "(name: Name): Option[Expr]", "member" : "provingground.interface.LeanParser.findIntro", "link" : "provingground\/interface\/LeanParser.html#findIntro(name:trepplein.Name):Option[trepplein.Expr]", "kind" : "def"}, {"label" : "findIndMod", "tail" : "(name: Name): Option[IndMod]", "member" : "provingground.interface.LeanParser.findIndMod", "link" : "provingground\/interface\/LeanParser.html#findIndMod(name:trepplein.Name):Option[trepplein.IndMod]", "kind" : "def"}, {"label" : "findDefMod", "tail" : "(name: Name): Option[DefMod]", "member" : "provingground.interface.LeanParser.findDefMod", "link" : "provingground\/interface\/LeanParser.html#findDefMod(name:trepplein.Name):Option[trepplein.DefMod]", "kind" : "def"}, {"label" : "allIntros", "tail" : ": ArrayBuffer[(Name, Expr)]", "member" : "provingground.interface.LeanParser.allIntros", "link" : "provingground\/interface\/LeanParser.html#allIntros:scala.collection.mutable.ArrayBuffer[(trepplein.Name,trepplein.Expr)]", "kind" : "val"}, {"label" : "withMod", "tail" : "(mod: Modification): Task[Unit]", "member" : "provingground.interface.LeanParser.withMod", "link" : "provingground\/interface\/LeanParser.html#withMod(mod:trepplein.Modification):monix.eval.Task[Unit]", "kind" : "def"}, {"label" : "foldAxiomSeq", "tail" : "(accum: Vector[Term], axs: Vector[(Name, Expr)]): Task[Vector[Term]]", "member" : "provingground.interface.LeanParser.foldAxiomSeq", "link" : "provingground\/interface\/LeanParser.html#foldAxiomSeq(accum:Vector[provingground.HoTT.Term],axs:Vector[(trepplein.Name,trepplein.Expr)]):monix.eval.Task[Vector[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "withAxiomSeq", "tail" : "(axs: Vector[(Name, Expr)]): Task[Unit]", "member" : "provingground.interface.LeanParser.withAxiomSeq", "link" : "provingground\/interface\/LeanParser.html#withAxiomSeq(axs:Vector[(trepplein.Name,trepplein.Expr)]):monix.eval.Task[Unit]", "kind" : "def"}, {"label" : "withAxiom", "tail" : "(name: Name, ty: Expr): Task[Unit]", "member" : "provingground.interface.LeanParser.withAxiom", "link" : "provingground\/interface\/LeanParser.html#withAxiom(name:trepplein.Name,ty:trepplein.Expr):monix.eval.Task[Unit]", "kind" : "def"}, {"label" : "withDefn", "tail" : "(name: Name, exp: Expr): Task[Unit]", "member" : "provingground.interface.LeanParser.withDefn", "link" : "provingground\/interface\/LeanParser.html#withDefn(name:trepplein.Name,exp:trepplein.Expr):monix.eval.Task[Unit]", "kind" : "def"}, {"label" : "getValue", "tail" : "(t: Term, n: Int, accum: Vector[Term]): Task[(Term, Vector[Term])]", "member" : "provingground.interface.LeanParser.getValue", "link" : "provingground\/interface\/LeanParser.html#getValue(t:provingground.HoTT.Term,n:Int,accum:Vector[provingground.HoTT.Term]):monix.eval.Task[(provingground.HoTT.Term,Vector[provingground.HoTT.Term])]", "kind" : "def"}, {"label" : "parseOptVec", "tail" : "(vec: Vector[(Expr, Int)], vars: Vector[Term], indices: Set[Int]): Task[Vector[Option[Term]]]", "member" : "provingground.interface.LeanParser.parseOptVec", "link" : "provingground\/interface\/LeanParser.html#parseOptVec(vec:Vector[(trepplein.Expr,Int)],vars:Vector[provingground.HoTT.Term],indices:Set[Int]):monix.eval.Task[Vector[Option[provingground.HoTT.Term]]]", "kind" : "def"}, {"label" : "parseVec", "tail" : "(vec: Vector[Expr], vars: Vector[Term]): Task[Vector[Term]]", "member" : "provingground.interface.LeanParser.parseVec", "link" : "provingground\/interface\/LeanParser.html#parseVec(vec:Vector[trepplein.Expr],vars:Vector[provingground.HoTT.Term]):monix.eval.Task[Vector[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "parse", "tail" : "(exp: Expr, vars: Vector[Term]): Task[Term]", "member" : "provingground.interface.LeanParser.parse", "link" : "provingground\/interface\/LeanParser.html#parse(exp:trepplein.Expr,vars:Vector[provingground.HoTT.Term]):monix.eval.Task[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "getIndTask", "tail" : "(s: String): Task[TermIndMod]", "member" : "provingground.interface.LeanParser.getIndTask", "link" : "provingground\/interface\/LeanParser.html#getIndTask(s:String):monix.eval.Task[provingground.interface.TermIndMod]", "kind" : "def"}, {"label" : "get", "tail" : "(name: String): CancelableFuture[Term]", "member" : "provingground.interface.LeanParser.get", "link" : "provingground\/interface\/LeanParser.html#get(name:String):monix.execution.CancelableFuture[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "getTask", "tail" : "(name: String): Task[Term]", "member" : "provingground.interface.LeanParser.getTask", "link" : "provingground\/interface\/LeanParser.html#getTask(name:String):monix.eval.Task[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "recAppSkips", "tail" : "(name: Name, args: Vector[Expr], exp: Expr, vars: Vector[Term]): Task[Option[Term]]", "member" : "provingground.interface.LeanParser.recAppSkips", "link" : "provingground\/interface\/LeanParser.html#recAppSkips(name:trepplein.Name,args:Vector[trepplein.Expr],exp:trepplein.Expr,vars:Vector[provingground.HoTT.Term]):monix.eval.Task[Option[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "recApp", "tail" : "(name: Name, args: Vector[Expr], exp: Expr, vars: Vector[Term]): Task[Term]", "member" : "provingground.interface.LeanParser.recApp", "link" : "provingground\/interface\/LeanParser.html#recApp(name:trepplein.Name,args:Vector[trepplein.Expr],exp:trepplein.Expr,vars:Vector[provingground.HoTT.Term]):monix.eval.Task[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "getTermIndMod", "tail" : "(name: Name): Option[Task[TermIndMod]]", "member" : "provingground.interface.LeanParser.getTermIndMod", "link" : "provingground\/interface\/LeanParser.html#getTermIndMod(name:trepplein.Name):Option[monix.eval.Task[provingground.interface.TermIndMod]]", "kind" : "def"}, {"label" : "getNamed", "tail" : "(name: Name): Option[Task[Term]]", "member" : "provingground.interface.LeanParser.getNamed", "link" : "provingground\/interface\/LeanParser.html#getNamed(name:trepplein.Name):Option[monix.eval.Task[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "getMemTermIndMod", "tail" : "(name: Name, exp: Expr): Task[TermIndMod]", "member" : "provingground.interface.LeanParser.getMemTermIndMod", "link" : "provingground\/interface\/LeanParser.html#getMemTermIndMod(name:trepplein.Name,exp:trepplein.Expr):monix.eval.Task[provingground.interface.TermIndMod]", "kind" : "def"}, {"label" : "parseMemo", "tail" : ": Map[(Expr, Vector[Term]), Term]", "member" : "provingground.interface.LeanParser.parseMemo", "link" : "provingground\/interface\/LeanParser.html#parseMemo:scala.collection.mutable.Map[(trepplein.Expr,Vector[provingground.HoTT.Term]),provingground.HoTT.Term]", "kind" : "val"}, {"label" : "update", "tail" : "(): Unit", "member" : "provingground.interface.LeanParser.update", "link" : "provingground\/interface\/LeanParser.html#update():Unit", "kind" : "def"}, {"label" : "termIndModMap", "tail" : ": Map[Name, TermIndMod]", "member" : "provingground.interface.LeanParser.termIndModMap", "link" : "provingground\/interface\/LeanParser.html#termIndModMap:scala.collection.mutable.Map[trepplein.Name,provingground.interface.TermIndMod]", "kind" : "val"}, {"label" : "defnMap", "tail" : ": Map[Name, Term]", "member" : "provingground.interface.LeanParser.defnMap", "link" : "provingground\/interface\/LeanParser.html#defnMap:scala.collection.mutable.Map[trepplein.Name,provingground.HoTT.Term]", "kind" : "val"}, {"label" : "addMods", "tail" : "(m: Seq[Modification]): Unit", "member" : "provingground.interface.LeanParser.addMods", "link" : "provingground\/interface\/LeanParser.html#addMods(m:Seq[trepplein.Modification]):Unit", "kind" : "def"}, {"label" : "mods", "tail" : ": ArrayBuffer[Modification]", "member" : "provingground.interface.LeanParser.mods", "link" : "provingground\/interface\/LeanParser.html#mods:scala.collection.mutable.ArrayBuffer[trepplein.Modification]", "kind" : "val"}, {"member" : "provingground.interface.LeanParser#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/interface\/LeanParser.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/interface\/LeanParser.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/interface\/LeanParser.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/interface\/LeanParser.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/interface\/LeanParser.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/interface\/LeanParser.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/interface\/LeanParser.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/LeanParser.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/LeanParser.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/LeanParser.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/interface\/LeanParser.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/interface\/LeanParser.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/interface\/LeanParser.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/interface\/LeanParser.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/interface\/LeanParser.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/interface\/LeanParser.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/interface\/LeanParser.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/interface\/LeanParser.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/interface\/LeanParser.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "applyFuncFold", "tail" : "(ft: Task[Term], v: Vector[Term]): Task[Term]", "member" : "provingground.interface.LeanParser.applyFuncFold", "link" : "provingground\/interface\/LeanParser$.html#applyFuncFold(ft:monix.eval.Task[provingground.HoTT.Term],v:Vector[provingground.HoTT.Term]):monix.eval.Task[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "applyFuncOptFold", "tail" : "(ft: Task[Option[Term]], v: Vector[Option[Term]]): Task[Option[Term]]", "member" : "provingground.interface.LeanParser.applyFuncOptFold", "link" : "provingground\/interface\/LeanParser$.html#applyFuncOptFold(ft:monix.eval.Task[Option[provingground.HoTT.Term]],v:Vector[Option[provingground.HoTT.Term]]):monix.eval.Task[Option[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "apply", "tail" : "(filename: String): LeanParser", "member" : "provingground.interface.LeanParser.apply", "link" : "provingground\/interface\/LeanParser$.html#apply(filename:String):provingground.interface.LeanParser", "kind" : "def"}, {"label" : "toJs", "tail" : "(parser: LeanParser): Obj", "member" : "provingground.interface.LeanParser.toJs", "link" : "provingground\/interface\/LeanParser$.html#toJs(parser:provingground.interface.LeanParser):upickle.Js.Obj", "kind" : "def"}, {"label" : "jsTermIndMod", "tail" : "(parser: LeanParser): Arr", "member" : "provingground.interface.LeanParser.jsTermIndMod", "link" : "provingground\/interface\/LeanParser$.html#jsTermIndMod(parser:provingground.interface.LeanParser):upickle.Js.Arr", "kind" : "def"}, {"label" : "jsDef", "tail" : "(parser: LeanParser): Arr", "member" : "provingground.interface.LeanParser.jsDef", "link" : "provingground\/interface\/LeanParser$.html#jsDef(parser:provingground.interface.LeanParser):upickle.Js.Arr", "kind" : "def"}, {"label" : "getNextVarName", "tail" : "(vecs: Vector[Term], n: Int): String", "member" : "provingground.interface.LeanParser.getNextVarName", "link" : "provingground\/interface\/LeanParser$.html#getNextVarName(vecs:Vector[provingground.HoTT.Term],n:Int):String", "kind" : "def"}, {"label" : "shiftedName", "tail" : "(n: Int, lastName: String): String", "member" : "provingground.interface.LeanParser.shiftedName", "link" : "provingground\/interface\/LeanParser$.html#shiftedName(n:Int,lastName:String):String", "kind" : "def"}, {"label" : "splitVec", "tail" : "(sizes: Vector[Int], vec: Vector[A]): (Vector[Vector[A]], Vector[A])", "member" : "provingground.interface.LeanParser.splitVec", "link" : "provingground\/interface\/LeanParser$.html#splitVec[A](sizes:Vector[Int],vec:Vector[A]):(Vector[Vector[A]],Vector[A])", "kind" : "def"}, {"label" : "Logger", "tail" : "", "member" : "provingground.interface.LeanParser.Logger", "link" : "provingground\/interface\/LeanParser$.html#Logger", "kind" : "object"}, {"label" : "Logger", "tail" : "", "member" : "provingground.interface.LeanParser.Logger", "link" : "provingground\/interface\/LeanParser$.html#Loggerextendsprovingground.interface.LeanParser.Log=>Unit", "kind" : "trait"}, {"label" : "Parsed", "tail" : "", "member" : "provingground.interface.LeanParser.Parsed", "link" : "provingground\/interface\/LeanParser$.html#ParsedextendsLeanParser.LogwithProductwithSerializable", "kind" : "case class"}, {"label" : "ParseWork", "tail" : "", "member" : "provingground.interface.LeanParser.ParseWork", "link" : "provingground\/interface\/LeanParser$.html#ParseWorkextendsLeanParser.LogwithProductwithSerializable", "kind" : "case class"}, {"label" : "DefinedInduc", "tail" : "", "member" : "provingground.interface.LeanParser.DefinedInduc", "link" : "provingground\/interface\/LeanParser$.html#DefinedInducextendsLeanParser.LogwithProductwithSerializable", "kind" : "case class"}, {"label" : "Defined", "tail" : "", "member" : "provingground.interface.LeanParser.Defined", "link" : "provingground\/interface\/LeanParser$.html#DefinedextendsLeanParser.LogwithProductwithSerializable", "kind" : "case class"}, {"label" : "Log", "tail" : "", "member" : "provingground.interface.LeanParser.Log", "link" : "provingground\/interface\/LeanParser$.html#LogextendsAnyRef", "kind" : "sealed trait"}, {"label" : "ParseException", "tail" : "", "member" : "provingground.interface.LeanParser.ParseException", "link" : "provingground\/interface\/LeanParser$.html#ParseExceptionextendsExceptionwithProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/interface\/LeanParser$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/interface\/LeanParser$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/interface\/LeanParser$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/interface\/LeanParser$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/interface\/LeanParser$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/interface\/LeanParser$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/interface\/LeanParser$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/LeanParser$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/LeanParser$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/LeanParser$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/interface\/LeanParser$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/interface\/LeanParser$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/interface\/LeanParser$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/interface\/LeanParser$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/interface\/LeanParser$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/interface\/LeanParser$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/interface\/LeanParser$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/interface\/LeanParser$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/interface\/LeanParser$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/interface\/LeanParser.html", "kind" : "object"}, {"name" : "provingground.interface.LeanResources", "shortDescription" : "", "object" : "provingground\/interface\/LeanResources$.html", "members_object" : [{"label" : "indModView", "tail" : "(ind: TermIndMod): Value", "member" : "provingground.interface.LeanResources.indModView", "link" : "provingground\/interface\/LeanResources$.html#indModView(ind:provingground.interface.TermIndMod):ujson.Js.Value", "kind" : "def"}, {"label" : "logUpdate", "tail" : "(): Logger", "member" : "provingground.interface.LeanResources.logUpdate", "link" : "provingground\/interface\/LeanResources$.html#logUpdate:provingground.interface.LeanParser.Logger", "kind" : "def"}, {"label" : "loadedFiles", "tail" : ": ArrayBuffer[String]", "member" : "provingground.interface.LeanResources.loadedFiles", "link" : "provingground\/interface\/LeanResources$.html#loadedFiles:scala.collection.mutable.ArrayBuffer[String]", "kind" : "val"}, {"label" : "loadTask", "tail" : "(f: String): Task[Unit]", "member" : "provingground.interface.LeanResources.loadTask", "link" : "provingground\/interface\/LeanResources$.html#loadTask(f:String):monix.eval.Task[Unit]", "kind" : "def"}, {"label" : "parseCanc", "tail" : ": ArrayBuffer[(String, CancelableFuture[Try[Term]])]", "member" : "provingground.interface.LeanResources.parseCanc", "link" : "provingground\/interface\/LeanResources$.html#parseCanc:scala.collection.mutable.ArrayBuffer[(String,monix.execution.CancelableFuture[scala.util.Try[provingground.HoTT.Term]])]", "kind" : "val"}, {"label" : "mods", "tail" : ": ArrayBuffer[Modification]", "member" : "provingground.interface.LeanResources.mods", "link" : "provingground\/interface\/LeanResources$.html#mods:scala.collection.mutable.ArrayBuffer[trepplein.Modification]", "kind" : "val"}, {"label" : "termIndModMap", "tail" : ": Map[Name, TermIndMod]", "member" : "provingground.interface.LeanResources.termIndModMap", "link" : "provingground\/interface\/LeanResources$.html#termIndModMap:scala.collection.mutable.Map[trepplein.Name,provingground.interface.TermIndMod]", "kind" : "val"}, {"label" : "defnMap", "tail" : ": Map[Name, Term]", "member" : "provingground.interface.LeanResources.defnMap", "link" : "provingground\/interface\/LeanResources$.html#defnMap:scala.collection.mutable.Map[trepplein.Name,provingground.HoTT.Term]", "kind" : "val"}, {"label" : "baseParser", "tail" : ": LeanParser", "member" : "provingground.interface.LeanResources.baseParser", "link" : "provingground\/interface\/LeanResources$.html#baseParser:provingground.interface.LeanParser", "kind" : "lazy val"}, {"label" : "loadedNames", "tail" : ": Set[Name]", "member" : "provingground.interface.LeanResources.loadedNames", "link" : "provingground\/interface\/LeanResources$.html#loadedNames:scala.collection.mutable.Set[trepplein.Name]", "kind" : "val"}, {"label" : "modTasks", "tail" : ": Map[String, Task[Vector[Modification]]]", "member" : "provingground.interface.LeanResources.modTasks", "link" : "provingground\/interface\/LeanResources$.html#modTasks:Map[String,monix.eval.Task[Vector[trepplein.Modification]]]", "kind" : "val"}, {"label" : "index", "tail" : "(): IndexedSeq[String]", "member" : "provingground.interface.LeanResources.index", "link" : "provingground\/interface\/LeanResources$.html#index:IndexedSeq[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/interface\/LeanResources$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/interface\/LeanResources$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/interface\/LeanResources$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/interface\/LeanResources$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/interface\/LeanResources$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/interface\/LeanResources$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/interface\/LeanResources$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/LeanResources$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/LeanResources$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/LeanResources$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/interface\/LeanResources$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/interface\/LeanResources$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/interface\/LeanResources$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/interface\/LeanResources$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/interface\/LeanResources$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/interface\/LeanResources$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/interface\/LeanResources$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/interface\/LeanResources$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/interface\/LeanResources$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.interface.LeanRoutes", "shortDescription" : "", "object" : "provingground\/interface\/LeanRoutes$.html", "members_object" : [{"label" : "saveCode", "tail" : "(): String", "member" : "provingground.interface.LeanRoutes.saveCode", "link" : "provingground\/interface\/LeanRoutes$.html#saveCode():String", "kind" : "def"}, {"label" : "inducDefn", "tail" : "(request: Request): String", "member" : "provingground.interface.LeanRoutes.inducDefn", "link" : "provingground\/interface\/LeanRoutes$.html#inducDefn(request:cask.Request):String", "kind" : "def"}, {"label" : "cancelParse", "tail" : "(request: Request): String", "member" : "provingground.interface.LeanRoutes.cancelParse", "link" : "provingground\/interface\/LeanRoutes$.html#cancelParse(request:cask.Request):String", "kind" : "def"}, {"label" : "parse", "tail" : "(request: Request): String", "member" : "provingground.interface.LeanRoutes.parse", "link" : "provingground\/interface\/LeanRoutes$.html#parse(request:cask.Request):String", "kind" : "def"}, {"label" : "loadFile", "tail" : "(name: String): Task[Unit]", "member" : "provingground.interface.LeanRoutes.loadFile", "link" : "provingground\/interface\/LeanRoutes$.html#loadFile(name:String):monix.eval.Task[Unit]", "kind" : "def"}, {"label" : "loadFileReq", "tail" : "(request: Request): String", "member" : "provingground.interface.LeanRoutes.loadFileReq", "link" : "provingground\/interface\/LeanRoutes$.html#loadFileReq(request:cask.Request):String", "kind" : "def"}, {"label" : "parser", "tail" : "(): LeanParser", "member" : "provingground.interface.LeanRoutes.parser", "link" : "provingground\/interface\/LeanRoutes$.html#parser:provingground.interface.LeanParser", "kind" : "def"}, {"label" : "messenger", "tail" : "(): Logger", "member" : "provingground.interface.LeanRoutes.messenger", "link" : "provingground\/interface\/LeanRoutes$.html#messenger:provingground.interface.LeanParser.Logger", "kind" : "def"}, {"label" : "sendLogger", "tail" : ": Logger", "member" : "provingground.interface.LeanRoutes.sendLogger", "link" : "provingground\/interface\/LeanRoutes$.html#sendLogger:provingground.interface.LeanParser.Logger", "kind" : "val"}, {"label" : "sendErr", "tail" : "(s: String): Unit", "member" : "provingground.interface.LeanRoutes.sendErr", "link" : "provingground\/interface\/LeanRoutes$.html#sendErr(s:String):Unit", "kind" : "def"}, {"label" : "sendLog", "tail" : "(s: String): Unit", "member" : "provingground.interface.LeanRoutes.sendLog", "link" : "provingground\/interface\/LeanRoutes$.html#sendLog(s:String):Unit", "kind" : "def"}, {"label" : "send", "tail" : "(s: String): Unit", "member" : "provingground.interface.LeanRoutes.send", "link" : "provingground\/interface\/LeanRoutes$.html#send(s:String):Unit", "kind" : "def"}, {"label" : "showUserProfile", "tail" : "(): WebsocketResult", "member" : "provingground.interface.LeanRoutes.showUserProfile", "link" : "provingground\/interface\/LeanRoutes$.html#showUserProfile():cask.WebsocketResult", "kind" : "def"}, {"label" : "channels", "tail" : ": ArrayBuffer[WebSocketChannel]", "member" : "provingground.interface.LeanRoutes.channels", "link" : "provingground\/interface\/LeanRoutes$.html#channels:scala.collection.mutable.ArrayBuffer[io.undertow.websockets.core.WebSocketChannel]", "kind" : "var"}, {"label" : "getMods", "tail" : "(file: String): String", "member" : "provingground.interface.LeanRoutes.getMods", "link" : "provingground\/interface\/LeanRoutes$.html#getMods(file:String):String", "kind" : "def"}, {"label" : "memInducDefs", "tail" : "(): String", "member" : "provingground.interface.LeanRoutes.memInducDefs", "link" : "provingground\/interface\/LeanRoutes$.html#memInducDefs():String", "kind" : "def"}, {"label" : "memDefs", "tail" : "(): String", "member" : "provingground.interface.LeanRoutes.memDefs", "link" : "provingground\/interface\/LeanRoutes$.html#memDefs():String", "kind" : "def"}, {"label" : "codeGenInducDefs", "tail" : "(): String", "member" : "provingground.interface.LeanRoutes.codeGenInducDefs", "link" : "provingground\/interface\/LeanRoutes$.html#codeGenInducDefs():String", "kind" : "def"}, {"label" : "codeGenDefs", "tail" : "(): String", "member" : "provingground.interface.LeanRoutes.codeGenDefs", "link" : "provingground\/interface\/LeanRoutes$.html#codeGenDefs():String", "kind" : "def"}, {"label" : "files", "tail" : "(): String", "member" : "provingground.interface.LeanRoutes.files", "link" : "provingground\/interface\/LeanRoutes$.html#files():String", "kind" : "def"}, {"label" : "initialize", "tail" : "()(routes: RoutesEndpointsMetadata[LeanRoutes.this.type]): Unit", "member" : "cask.main.Routes.initialize", "link" : "provingground\/interface\/LeanRoutes$.html#initialize()(implicitroutes:cask.main.Routes.RoutesEndpointsMetadata[Routes.this.type]):Unit", "kind" : "def"}, {"label" : "caskMetadata", "tail" : "(): RoutesEndpointsMetadata[LeanRoutes.this.type]", "member" : "cask.main.Routes.caskMetadata", "link" : "provingground\/interface\/LeanRoutes$.html#caskMetadata:cask.main.Routes.RoutesEndpointsMetadata[Routes.this.type]", "kind" : "def"}, {"label" : "decorators", "tail" : "(): Seq[Decorator]", "member" : "cask.main.Routes.decorators", "link" : "provingground\/interface\/LeanRoutes$.html#decorators:Seq[cask.main.Decorator]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/interface\/LeanRoutes$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/interface\/LeanRoutes$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/interface\/LeanRoutes$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/interface\/LeanRoutes$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/interface\/LeanRoutes$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/interface\/LeanRoutes$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/interface\/LeanRoutes$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/LeanRoutes$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/LeanRoutes$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/LeanRoutes$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/interface\/LeanRoutes$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/interface\/LeanRoutes$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/interface\/LeanRoutes$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/interface\/LeanRoutes$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/interface\/LeanRoutes$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/interface\/LeanRoutes$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/interface\/LeanRoutes$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/interface\/LeanRoutes$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/interface\/LeanRoutes$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.interface.LeanToTerm", "shortDescription" : "", "object" : "provingground\/interface\/LeanToTerm$.html", "members_object" : [{"label" : "optSequence", "tail" : "(vec: Vector[Option[A]]): Option[Vector[A]]", "member" : "provingground.interface.LeanToTerm.optSequence", "link" : "provingground\/interface\/LeanToTerm$.html#optSequence[A](vec:Vector[Option[A]]):Option[Vector[A]]", "kind" : "def"}, {"label" : "proofLiftOpt", "tail" : ": (Term, Term) ⇒ Option[Term]", "member" : "provingground.interface.LeanToTerm.proofLiftOpt", "link" : "provingground\/interface\/LeanToTerm$.html#proofLiftOpt:(provingground.HoTT.Term,provingground.HoTT.Term)=>Option[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "proofLift", "tail" : ": (Term, Term) ⇒ Try[Term]", "member" : "provingground.interface.LeanToTerm.proofLift", "link" : "provingground\/interface\/LeanToTerm$.html#proofLift:(provingground.HoTT.Term,provingground.HoTT.Term)=>scala.util.Try[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "isPropn", "tail" : ": (Expr) ⇒ Boolean", "member" : "provingground.interface.LeanToTerm.isPropn", "link" : "provingground\/interface\/LeanToTerm$.html#isPropn:trepplein.Expr=>Boolean", "kind" : "val"}, {"label" : "getValue", "tail" : "(t: Term, n: Int, accum: Vector[Term]): Try[(Term, Vector[Term])]", "member" : "provingground.interface.LeanToTerm.getValue", "link" : "provingground\/interface\/LeanToTerm$.html#getValue(t:provingground.HoTT.Term,n:Int,accum:Vector[provingground.HoTT.Term]):scala.util.Try[(provingground.HoTT.Term,Vector[provingground.HoTT.Term])]", "kind" : "def"}, {"label" : "getValueOpt", "tail" : "(t: Term, n: Int, accum: Vector[Term]): Option[(Term, Vector[Term])]", "member" : "provingground.interface.LeanToTerm.getValueOpt", "link" : "provingground\/interface\/LeanToTerm$.html#getValueOpt(t:provingground.HoTT.Term,n:Int,accum:Vector[provingground.HoTT.Term]):Option[(provingground.HoTT.Term,Vector[provingground.HoTT.Term])]", "kind" : "def"}, {"label" : "iterApTyp", "tail" : "(name: Name, length: Int, typOpt: Option[Typ[Term]]): (Expr) ⇒ Option[Vector[(Expr, Option[Typ[Term]])]]", "member" : "provingground.interface.LeanToTerm.iterApTyp", "link" : "provingground\/interface\/LeanToTerm$.html#iterApTyp(name:trepplein.Name,length:Int,typOpt:Option[provingground.HoTT.Typ[provingground.HoTT.Term]]):trepplein.Expr=>Option[Vector[(trepplein.Expr,Option[provingground.HoTT.Typ[provingground.HoTT.Term]])]]", "kind" : "def"}, {"label" : "iterAp", "tail" : "(name: Name, length: Int): (Expr) ⇒ Option[Vector[Expr]]", "member" : "provingground.interface.LeanToTerm.iterAp", "link" : "provingground\/interface\/LeanToTerm$.html#iterAp(name:trepplein.Name,length:Int):trepplein.Expr=>Option[Vector[trepplein.Expr]]", "kind" : "def"}, {"label" : "RecIterAp", "tail" : "", "member" : "provingground.interface.LeanToTerm.RecIterAp", "link" : "provingground\/interface\/LeanToTerm$.html#RecIterAp", "kind" : "object"}, {"label" : "OptParser", "tail" : "", "member" : "provingground.interface.LeanToTerm.OptParser", "link" : "provingground\/interface\/LeanToTerm$.html#OptParser=(trepplein.Expr,Vector[provingground.HoTT.Term])=>Option[provingground.HoTT.Term]", "kind" : "type"}, {"label" : "Parser", "tail" : "", "member" : "provingground.interface.LeanToTerm.Parser", "link" : "provingground\/interface\/LeanToTerm$.html#Parser=(trepplein.Expr,Vector[provingground.HoTT.Term])=>scala.util.Try[provingground.HoTT.Term]", "kind" : "type"}, {"label" : "TypedParser", "tail" : "", "member" : "provingground.interface.LeanToTerm.TypedParser", "link" : "provingground\/interface\/LeanToTerm$.html#TypedParser=(trepplein.Expr,Option[provingground.HoTT.Typ[provingground.HoTT.Term]])=>Option[provingground.HoTT.Term]", "kind" : "type"}, {"label" : "iterModsOpt", "tail" : "(mods: Vector[Modification], init: LeanToTerm): Iterator[LeanToTerm]", "member" : "provingground.interface.LeanToTerm.iterModsOpt", "link" : "provingground\/interface\/LeanToTerm$.html#iterModsOpt(mods:Vector[trepplein.Modification],init:provingground.interface.LeanToTerm):Iterator[provingground.interface.LeanToTerm]", "kind" : "def"}, {"label" : "iterMods", "tail" : "(mods: Vector[Modification], init: LeanToTerm): Iterator[LeanToTerm]", "member" : "provingground.interface.LeanToTerm.iterMods", "link" : "provingground\/interface\/LeanToTerm$.html#iterMods(mods:Vector[trepplein.Modification],init:provingground.interface.LeanToTerm):Iterator[provingground.interface.LeanToTerm]", "kind" : "def"}, {"label" : "fromModsOpt", "tail" : "(mods: Vector[Modification], init: LeanToTerm): LeanToTerm", "member" : "provingground.interface.LeanToTerm.fromModsOpt", "link" : "provingground\/interface\/LeanToTerm$.html#fromModsOpt(mods:Vector[trepplein.Modification],init:provingground.interface.LeanToTerm):provingground.interface.LeanToTerm", "kind" : "def"}, {"label" : "fromMods", "tail" : "(mods: Vector[Modification], init: LeanToTerm): LeanToTerm", "member" : "provingground.interface.LeanToTerm.fromMods", "link" : "provingground\/interface\/LeanToTerm$.html#fromMods(mods:Vector[trepplein.Modification],init:provingground.interface.LeanToTerm):provingground.interface.LeanToTerm", "kind" : "def"}, {"label" : "empty", "tail" : ": LeanToTerm", "member" : "provingground.interface.LeanToTerm.empty", "link" : "provingground\/interface\/LeanToTerm$.html#empty:provingground.interface.LeanToTerm", "kind" : "val"}, {"label" : "emptyRecParser", "tail" : "(base: ⇒ Parser)(e: Expr, vars: Vector[Term]): None.type", "member" : "provingground.interface.LeanToTerm.emptyRecParser", "link" : "provingground\/interface\/LeanToTerm$.html#emptyRecParser(base:=>provingground.interface.LeanToTerm.Parser)(e:trepplein.Expr,vars:Vector[provingground.HoTT.Term]):None.type", "kind" : "def"}, {"label" : "appFailure", "tail" : ": ArrayBuffer[(Expr, Expr, Expr, Option[Typ[Term]], LeanToTerm)]", "member" : "provingground.interface.LeanToTerm.appFailure", "link" : "provingground\/interface\/LeanToTerm$.html#appFailure:scala.collection.mutable.ArrayBuffer[(trepplein.Expr,trepplein.Expr,trepplein.Expr,Option[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.interface.LeanToTerm)]", "kind" : "val"}, {"label" : "badConsts", "tail" : ": ArrayBuffer[Const]", "member" : "provingground.interface.LeanToTerm.badConsts", "link" : "provingground\/interface\/LeanToTerm$.html#badConsts:scala.collection.mutable.ArrayBuffer[trepplein.Const]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/interface\/LeanToTerm$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/interface\/LeanToTerm$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/interface\/LeanToTerm$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/interface\/LeanToTerm$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/interface\/LeanToTerm$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/interface\/LeanToTerm$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/interface\/LeanToTerm$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/LeanToTerm$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/LeanToTerm$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/LeanToTerm$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/interface\/LeanToTerm$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/interface\/LeanToTerm$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/interface\/LeanToTerm$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/interface\/LeanToTerm$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/interface\/LeanToTerm$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/interface\/LeanToTerm$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/interface\/LeanToTerm$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/interface\/LeanToTerm$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/interface\/LeanToTerm$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "Predef", "tail" : "", "member" : "provingground.interface.LeanParse.Predef", "link" : "provingground\/interface\/LeanParse.html#Predef", "kind" : "object"}, {"label" : "addOpt", "tail" : "(mod: Modification): LeanToTerm", "member" : "provingground.interface.LeanToTerm.addOpt", "link" : "provingground\/interface\/LeanToTerm.html#addOpt(mod:trepplein.Modification):provingground.interface.LeanToTerm", "kind" : "def"}, {"label" : "add", "tail" : "(mod: Modification): LeanToTerm", "member" : "provingground.interface.LeanToTerm.add", "link" : "provingground\/interface\/LeanToTerm.html#add(mod:trepplein.Modification):provingground.interface.LeanToTerm", "kind" : "def"}, {"label" : "addQuotModOpt", "tail" : "(): LeanToTerm", "member" : "provingground.interface.LeanToTerm.addQuotModOpt", "link" : "provingground\/interface\/LeanToTerm.html#addQuotModOpt:provingground.interface.LeanToTerm", "kind" : "def"}, {"label" : "addQuotMod", "tail" : "(): LeanToTerm", "member" : "provingground.interface.LeanToTerm.addQuotMod", "link" : "provingground\/interface\/LeanToTerm.html#addQuotMod:provingground.interface.LeanToTerm", "kind" : "def"}, {"label" : "addDefModOpt", "tail" : "(df: DefMod): LeanToTerm", "member" : "provingground.interface.LeanToTerm.addDefModOpt", "link" : "provingground\/interface\/LeanToTerm.html#addDefModOpt(df:trepplein.DefMod):provingground.interface.LeanToTerm", "kind" : "def"}, {"label" : "addAxiomModOpt", "tail" : "(ax: AxiomMod): LeanToTerm", "member" : "provingground.interface.LeanToTerm.addAxiomModOpt", "link" : "provingground\/interface\/LeanToTerm.html#addAxiomModOpt(ax:trepplein.AxiomMod):provingground.interface.LeanToTerm", "kind" : "def"}, {"label" : "addDefMod", "tail" : "(df: DefMod): LeanToTerm", "member" : "provingground.interface.LeanToTerm.addDefMod", "link" : "provingground\/interface\/LeanToTerm.html#addDefMod(df:trepplein.DefMod):provingground.interface.LeanToTerm", "kind" : "def"}, {"label" : "addAxiomMod", "tail" : "(ax: AxiomMod): LeanToTerm", "member" : "provingground.interface.LeanToTerm.addAxiomMod", "link" : "provingground\/interface\/LeanToTerm.html#addAxiomMod(ax:trepplein.AxiomMod):provingground.interface.LeanToTerm", "kind" : "def"}, {"label" : "addIndModOpt", "tail" : "(ind: IndMod): LeanToTerm", "member" : "provingground.interface.LeanToTerm.addIndModOpt", "link" : "provingground\/interface\/LeanToTerm.html#addIndModOpt(ind:trepplein.IndMod):provingground.interface.LeanToTerm", "kind" : "def"}, {"label" : "addIndMod", "tail" : "(ind: IndMod): LeanToTerm", "member" : "provingground.interface.LeanToTerm.addIndMod", "link" : "provingground\/interface\/LeanToTerm.html#addIndMod(ind:trepplein.IndMod):provingground.interface.LeanToTerm", "kind" : "def"}, {"label" : "addAxiomsOpt", "tail" : "(axs: Vector[(Name, Expr)]): LeanToTerm", "member" : "provingground.interface.LeanToTerm.addAxiomsOpt", "link" : "provingground\/interface\/LeanToTerm.html#addAxiomsOpt(axs:Vector[(trepplein.Name,trepplein.Expr)]):provingground.interface.LeanToTerm", "kind" : "def"}, {"label" : "addAxioms", "tail" : "(axs: Vector[(Name, Expr)]): LeanToTerm", "member" : "provingground.interface.LeanToTerm.addAxioms", "link" : "provingground\/interface\/LeanToTerm.html#addAxioms(axs:Vector[(trepplein.Name,trepplein.Expr)]):provingground.interface.LeanToTerm", "kind" : "def"}, {"label" : "addAxiomOpt", "tail" : "(name: Name, ty: Expr): LeanToTerm", "member" : "provingground.interface.LeanToTerm.addAxiomOpt", "link" : "provingground\/interface\/LeanToTerm.html#addAxiomOpt(name:trepplein.Name,ty:trepplein.Expr):provingground.interface.LeanToTerm", "kind" : "def"}, {"label" : "addAxiom", "tail" : "(name: Name, ty: Expr): LeanToTerm", "member" : "provingground.interface.LeanToTerm.addAxiom", "link" : "provingground\/interface\/LeanToTerm.html#addAxiom(name:trepplein.Name,ty:trepplein.Expr):provingground.interface.LeanToTerm", "kind" : "def"}, {"label" : "addDefnValOpt", "tail" : "(name: Name, value: Expr, tp: Expr): LeanToTerm", "member" : "provingground.interface.LeanToTerm.addDefnValOpt", "link" : "provingground\/interface\/LeanToTerm.html#addDefnValOpt(name:trepplein.Name,value:trepplein.Expr,tp:trepplein.Expr):provingground.interface.LeanToTerm", "kind" : "def"}, {"label" : "addDefnVal", "tail" : "(name: Name, value: Expr, tp: Expr): LeanToTerm", "member" : "provingground.interface.LeanToTerm.addDefnVal", "link" : "provingground\/interface\/LeanToTerm.html#addDefnVal(name:trepplein.Name,value:trepplein.Expr,tp:trepplein.Expr):provingground.interface.LeanToTerm", "kind" : "def"}, {"label" : "addDefnMap", "tail" : "(name: Name, term: Term): LeanToTerm", "member" : "provingground.interface.LeanToTerm.addDefnMap", "link" : "provingground\/interface\/LeanToTerm.html#addDefnMap(name:trepplein.Name,term:provingground.HoTT.Term):provingground.interface.LeanToTerm", "kind" : "def"}, {"member" : "provingground.interface.LeanToTerm#<init>", "error" : "unsupported entity"}, {"label" : "unparsed", "tail" : ": Vector[Name]", "member" : "provingground.interface.LeanToTerm.unparsed", "link" : "provingground\/interface\/LeanToTerm.html#unparsed:Vector[trepplein.Name]", "kind" : "val"}, {"label" : "termIndModMap", "tail" : ": Map[Name, TermIndMod]", "member" : "provingground.interface.LeanToTerm.termIndModMap", "link" : "provingground\/interface\/LeanToTerm.html#termIndModMap:Map[trepplein.Name,provingground.interface.TermIndMod]", "kind" : "val"}, {"label" : "defnMap", "tail" : ": Map[Name, Term]", "member" : "provingground.interface.LeanToTerm.defnMap", "link" : "provingground\/interface\/LeanToTerm.html#defnMap:Map[trepplein.Name,provingground.HoTT.Term]", "kind" : "val"}, {"label" : "toTermIndModOpt", "tail" : "(ind: IndMod): Option[TermIndMod]", "member" : "provingground.interface.LeanParse.toTermIndModOpt", "link" : "provingground\/interface\/LeanToTerm.html#toTermIndModOpt(ind:trepplein.IndMod):Option[provingground.interface.TermIndMod]", "kind" : "def"}, {"label" : "toTermIndModTry", "tail" : "(ind: IndMod): Try[TermIndMod]", "member" : "provingground.interface.LeanParse.toTermIndModTry", "link" : "provingground\/interface\/LeanToTerm.html#toTermIndModTry(ind:trepplein.IndMod):scala.util.Try[provingground.interface.TermIndMod]", "kind" : "def"}, {"label" : "parseVar", "tail" : "(b: Binding, vars: Vector[Term]): Try[Term with Subs[Term]]", "member" : "provingground.interface.LeanParse.parseVar", "link" : "provingground\/interface\/LeanToTerm.html#parseVar(b:trepplein.Binding,vars:Vector[provingground.HoTT.Term]):scala.util.Try[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "parseSym", "tail" : "(name: Name, ty: Expr, vars: Vector[Term]): Try[Term with Subs[Term]]", "member" : "provingground.interface.LeanParse.parseSym", "link" : "provingground\/interface\/LeanToTerm.html#parseSym(name:trepplein.Name,ty:trepplein.Expr,vars:Vector[provingground.HoTT.Term]):scala.util.Try[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "parseSymOpt", "tail" : "(name: Name, ty: Expr, vars: Vector[Term]): Option[U with Subs[U] forSome {type U <: Term with Subs[U]}]", "member" : "provingground.interface.LeanParse.parseSymOpt", "link" : "provingground\/interface\/LeanToTerm.html#parseSymOpt(name:trepplein.Name,ty:trepplein.Expr,vars:Vector[provingground.HoTT.Term]):Option[Uwithprovingground.HoTT.Subs[U]forSome{typeU<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]}]", "kind" : "def"}, {"label" : "parseSymVecOpt", "tail" : "(vec: Vector[(Name, Expr)], vars: Vector[Term]): Option[Vector[Term]]", "member" : "provingground.interface.LeanParse.parseSymVecOpt", "link" : "provingground\/interface\/LeanToTerm.html#parseSymVecOpt(vec:Vector[(trepplein.Name,trepplein.Expr)],vars:Vector[provingground.HoTT.Term]):Option[Vector[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "parseSymVec", "tail" : "(vec: Vector[(Name, Expr)], vars: Vector[Term]): Try[Vector[Term]]", "member" : "provingground.interface.LeanParse.parseSymVec", "link" : "provingground\/interface\/LeanToTerm.html#parseSymVec(vec:Vector[(trepplein.Name,trepplein.Expr)],vars:Vector[provingground.HoTT.Term]):scala.util.Try[Vector[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "parseTypVec", "tail" : "(vec: Vector[Expr], vars: Vector[Term]): Try[Vector[Typ[Term]]]", "member" : "provingground.interface.LeanParse.parseTypVec", "link" : "provingground\/interface\/LeanToTerm.html#parseTypVec(vec:Vector[trepplein.Expr],vars:Vector[provingground.HoTT.Term]):scala.util.Try[Vector[provingground.HoTT.Typ[provingground.HoTT.Term]]]", "kind" : "def"}, {"label" : "parseVecOpt", "tail" : "(vec: Vector[Expr], vars: Vector[Term]): Option[Vector[Term]]", "member" : "provingground.interface.LeanParse.parseVecOpt", "link" : "provingground\/interface\/LeanToTerm.html#parseVecOpt(vec:Vector[trepplein.Expr],vars:Vector[provingground.HoTT.Term]):Option[Vector[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "parseVec", "tail" : "(vec: Vector[Expr], vars: Vector[Term]): Try[Vector[Term]]", "member" : "provingground.interface.LeanParse.parseVec", "link" : "provingground\/interface\/LeanToTerm.html#parseVec(vec:Vector[trepplein.Expr],vars:Vector[provingground.HoTT.Term]):scala.util.Try[Vector[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "parseTyp", "tail" : "(x: Expr, vars: Vector[Term]): Try[Typ[Term]]", "member" : "provingground.interface.LeanParse.parseTyp", "link" : "provingground\/interface\/LeanToTerm.html#parseTyp(x:trepplein.Expr,vars:Vector[provingground.HoTT.Term]):scala.util.Try[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "parseTypOpt", "tail" : "(x: Expr, vars: Vector[Term]): Option[Typ[U] forSome {type U <: Term with Subs[U]}]", "member" : "provingground.interface.LeanParse.parseTypOpt", "link" : "provingground\/interface\/LeanToTerm.html#parseTypOpt(x:trepplein.Expr,vars:Vector[provingground.HoTT.Term]):Option[provingground.HoTT.Typ[U]forSome{typeU<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]}]", "kind" : "def"}, {"label" : "recParser", "tail" : "(rec: ⇒ Parser)(exp: Expr, vars: Vector[Term]): Try[Term]", "member" : "provingground.interface.LeanParse.recParser", "link" : "provingground\/interface\/LeanToTerm.html#recParser(rec:=>provingground.interface.LeanToTerm.Parser)(exp:trepplein.Expr,vars:Vector[provingground.HoTT.Term]):scala.util.Try[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "recOptParser", "tail" : "(rec: ⇒ OptParser)(exp: Expr, vars: Vector[Term]): Option[Term]", "member" : "provingground.interface.LeanParse.recOptParser", "link" : "provingground\/interface\/LeanToTerm.html#recOptParser(rec:=>provingground.interface.LeanToTerm.OptParser)(exp:trepplein.Expr,vars:Vector[provingground.HoTT.Term]):Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "applyFuncPropOpt", "tail" : "(func: Term, arg: Term): Option[Term]", "member" : "provingground.interface.LeanParse.applyFuncPropOpt", "link" : "provingground\/interface\/LeanToTerm.html#applyFuncPropOpt(func:provingground.HoTT.Term,arg:provingground.HoTT.Term):Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "applyFuncProp", "tail" : "(func: Term, arg: Term, vars: Vector[Term], data: Vector[Expr]): Term", "member" : "provingground.interface.LeanParse.applyFuncProp", "link" : "provingground\/interface\/LeanToTerm.html#applyFuncProp(func:provingground.HoTT.Term,arg:provingground.HoTT.Term,vars:Vector[provingground.HoTT.Term],data:Vector[trepplein.Expr]):provingground.HoTT.Term", "kind" : "def"}, {"label" : "inPropFamily", "tail" : ": (Term) ⇒ Boolean", "member" : "provingground.interface.LeanParse.inPropFamily", "link" : "provingground\/interface\/LeanToTerm.html#inPropFamily:provingground.HoTT.Term=>Boolean", "kind" : "val"}, {"label" : "defnOpt", "tail" : "(exp: Expr): Option[Term]", "member" : "provingground.interface.LeanParse.defnOpt", "link" : "provingground\/interface\/LeanToTerm.html#defnOpt(exp:trepplein.Expr):Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "parseOpt", "tail" : ": OptParser", "member" : "provingground.interface.LeanParse.parseOpt", "link" : "provingground\/interface\/LeanToTerm.html#parseOpt:provingground.interface.LeanToTerm.OptParser", "kind" : "val"}, {"label" : "parse", "tail" : ": Parser", "member" : "provingground.interface.LeanParse.parse", "link" : "provingground\/interface\/LeanToTerm.html#parse:provingground.interface.LeanToTerm.Parser", "kind" : "val"}, {"label" : "defns", "tail" : "(exp: Expr, typOpt: Option[Typ[Term]]): Option[Term]", "member" : "provingground.interface.LeanParse.defns", "link" : "provingground\/interface\/LeanToTerm.html#defns(exp:trepplein.Expr,typOpt:Option[provingground.HoTT.Typ[provingground.HoTT.Term]]):Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/interface\/LeanToTerm.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/interface\/LeanToTerm.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/interface\/LeanToTerm.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/interface\/LeanToTerm.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/interface\/LeanToTerm.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/interface\/LeanToTerm.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/interface\/LeanToTerm.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/LeanToTerm.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/LeanToTerm.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/LeanToTerm.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/interface\/LeanToTerm.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/interface\/LeanToTerm.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/interface\/LeanToTerm.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/interface\/LeanToTerm.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/interface\/LeanToTerm.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/interface\/LeanToTerm.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/interface\/LeanToTerm.html", "kind" : "case class"}, {"name" : "provingground.interface.LeanToTermMonix", "shortDescription" : "", "object" : "provingground\/interface\/LeanToTermMonix$.html", "members_object" : [{"label" : "indModFromMod", "tail" : "(name: Name, ltm: LeanToTermMonix, mods: Vector[Modification]): Option[Task[(TermIndMod, LeanToTermMonix)]]", "member" : "provingground.interface.LeanToTermMonix.indModFromMod", "link" : "provingground\/interface\/LeanToTermMonix$.html#indModFromMod(name:trepplein.Name,ltm:provingground.interface.LeanToTermMonix,mods:Vector[trepplein.Modification]):Option[monix.eval.Task[(provingground.interface.TermIndMod,provingground.interface.LeanToTermMonix)]]", "kind" : "def"}, {"label" : "defFromMod", "tail" : "(name: Name, ltm: LeanToTermMonix, mods: Vector[Modification]): Option[Task[(Term, LeanToTermMonix)]]", "member" : "provingground.interface.LeanToTermMonix.defFromMod", "link" : "provingground\/interface\/LeanToTermMonix$.html#defFromMod(name:trepplein.Name,ltm:provingground.interface.LeanToTermMonix,mods:Vector[trepplein.Modification]):Option[monix.eval.Task[(provingground.HoTT.Term,provingground.interface.LeanToTermMonix)]]", "kind" : "def"}, {"label" : "findMod", "tail" : "(name: Name, mods: Vector[Modification]): Option[Modification]", "member" : "provingground.interface.LeanToTermMonix.findMod", "link" : "provingground\/interface\/LeanToTermMonix$.html#findMod(name:trepplein.Name,mods:Vector[trepplein.Modification]):Option[trepplein.Modification]", "kind" : "def"}, {"label" : "modNames", "tail" : "(mod: Modification): Vector[Name]", "member" : "provingground.interface.LeanToTermMonix.modNames", "link" : "provingground\/interface\/LeanToTermMonix$.html#modNames(mod:trepplein.Modification):Vector[trepplein.Name]", "kind" : "def"}, {"label" : "withMod", "tail" : "(mod: Modification, ltm: LeanToTermMonix, mods: Vector[Modification]): Task[LeanToTermMonix]", "member" : "provingground.interface.LeanToTermMonix.withMod", "link" : "provingground\/interface\/LeanToTermMonix$.html#withMod(mod:trepplein.Modification,ltm:provingground.interface.LeanToTermMonix,mods:Vector[trepplein.Modification]):monix.eval.Task[provingground.interface.LeanToTermMonix]", "kind" : "def"}, {"label" : "foldAxiomSeq", "tail" : "(accum: Vector[Term], axs: Vector[(Name, Expr)], ltmT: Task[LeanToTermMonix], mods: Vector[Modification]): Task[(Vector[Term], LeanToTermMonix)]", "member" : "provingground.interface.LeanToTermMonix.foldAxiomSeq", "link" : "provingground\/interface\/LeanToTermMonix$.html#foldAxiomSeq(accum:Vector[provingground.HoTT.Term],axs:Vector[(trepplein.Name,trepplein.Expr)],ltmT:monix.eval.Task[provingground.interface.LeanToTermMonix],mods:Vector[trepplein.Modification]):monix.eval.Task[(Vector[provingground.HoTT.Term],provingground.interface.LeanToTermMonix)]", "kind" : "def"}, {"label" : "withAxiomSeq", "tail" : "(axs: Vector[(Name, Expr)], ltmT: Task[LeanToTermMonix], mods: Vector[Modification]): Task[LeanToTermMonix]", "member" : "provingground.interface.LeanToTermMonix.withAxiomSeq", "link" : "provingground\/interface\/LeanToTermMonix$.html#withAxiomSeq(axs:Vector[(trepplein.Name,trepplein.Expr)],ltmT:monix.eval.Task[provingground.interface.LeanToTermMonix],mods:Vector[trepplein.Modification]):monix.eval.Task[provingground.interface.LeanToTermMonix]", "kind" : "def"}, {"label" : "withAxiom", "tail" : "(name: Name, ty: Expr, ltm: LeanToTermMonix, mods: Vector[Modification]): Task[LeanToTermMonix]", "member" : "provingground.interface.LeanToTermMonix.withAxiom", "link" : "provingground\/interface\/LeanToTermMonix$.html#withAxiom(name:trepplein.Name,ty:trepplein.Expr,ltm:provingground.interface.LeanToTermMonix,mods:Vector[trepplein.Modification]):monix.eval.Task[provingground.interface.LeanToTermMonix]", "kind" : "def"}, {"label" : "withDefn", "tail" : "(name: Name, exp: Expr, ltm: LeanToTermMonix, mods: Vector[Modification]): Task[LeanToTermMonix]", "member" : "provingground.interface.LeanToTermMonix.withDefn", "link" : "provingground\/interface\/LeanToTermMonix$.html#withDefn(name:trepplein.Name,exp:trepplein.Expr,ltm:provingground.interface.LeanToTermMonix,mods:Vector[trepplein.Modification]):monix.eval.Task[provingground.interface.LeanToTermMonix]", "kind" : "def"}, {"label" : "getValue", "tail" : "(t: Term, n: Int, accum: Vector[Term]): Task[(Term, Vector[Term])]", "member" : "provingground.interface.LeanToTermMonix.getValue", "link" : "provingground\/interface\/LeanToTermMonix$.html#getValue(t:provingground.HoTT.Term,n:Int,accum:Vector[provingground.HoTT.Term]):monix.eval.Task[(provingground.HoTT.Term,Vector[provingground.HoTT.Term])]", "kind" : "def"}, {"label" : "parseVec", "tail" : "(vec: Vector[Expr], vars: Vector[Term], ltm: LeanToTermMonix, mods: Vector[Modification]): Task[(Vector[Term], LeanToTermMonix)]", "member" : "provingground.interface.LeanToTermMonix.parseVec", "link" : "provingground\/interface\/LeanToTermMonix$.html#parseVec(vec:Vector[trepplein.Expr],vars:Vector[provingground.HoTT.Term],ltm:provingground.interface.LeanToTermMonix,mods:Vector[trepplein.Modification]):monix.eval.Task[(Vector[provingground.HoTT.Term],provingground.interface.LeanToTermMonix)]", "kind" : "def"}, {"label" : "parse", "tail" : "(exp: Expr, vars: Vector[Term], ltm: LeanToTermMonix, mods: Vector[Modification]): Task[(Term, LeanToTermMonix)]", "member" : "provingground.interface.LeanToTermMonix.parse", "link" : "provingground\/interface\/LeanToTermMonix$.html#parse(exp:trepplein.Expr,vars:Vector[provingground.HoTT.Term],ltm:provingground.interface.LeanToTermMonix,mods:Vector[trepplein.Modification]):monix.eval.Task[(provingground.HoTT.Term,provingground.interface.LeanToTermMonix)]", "kind" : "def"}, {"label" : "RecIterAp", "tail" : "", "member" : "provingground.interface.LeanToTermMonix.RecIterAp", "link" : "provingground\/interface\/LeanToTermMonix$.html#RecIterAp", "kind" : "object"}, {"label" : "iterant", "tail" : "(mods: Vector[Modification], init: LeanToTermMonix, limit: FiniteDuration, logErr: (Modification, Throwable) ⇒ Unit, recoverAll: Boolean): Iterant[Task, LeanToTermMonix]", "member" : "provingground.interface.LeanToTermMonix.iterant", "link" : "provingground\/interface\/LeanToTermMonix$.html#iterant(mods:Vector[trepplein.Modification],init:provingground.interface.LeanToTermMonix,limit:scala.concurrent.duration.FiniteDuration,logErr:(trepplein.Modification,Throwable)=>Unit,recoverAll:Boolean):monix.tail.Iterant[monix.eval.Task,provingground.interface.LeanToTermMonix]", "kind" : "def"}, {"label" : "observable", "tail" : "(mods: Vector[Modification], init: LeanToTermMonix, limit: FiniteDuration, logErr: (Modification, Throwable) ⇒ Unit): Observable[LeanToTermMonix]", "member" : "provingground.interface.LeanToTermMonix.observable", "link" : "provingground\/interface\/LeanToTermMonix$.html#observable(mods:Vector[trepplein.Modification],init:provingground.interface.LeanToTermMonix,limit:scala.concurrent.duration.FiniteDuration,logErr:(trepplein.Modification,Throwable)=>Unit):monix.reactive.Observable[provingground.interface.LeanToTermMonix]", "kind" : "def"}, {"label" : "addChunk", "tail" : "(mods: Vector[Modification], init: Task[LeanToTermMonix], limit: FiniteDuration): Task[LeanToTermMonix]", "member" : "provingground.interface.LeanToTermMonix.addChunk", "link" : "provingground\/interface\/LeanToTermMonix$.html#addChunk(mods:Vector[trepplein.Modification],init:monix.eval.Task[provingground.interface.LeanToTermMonix],limit:scala.concurrent.duration.FiniteDuration):monix.eval.Task[provingground.interface.LeanToTermMonix]", "kind" : "def"}, {"label" : "fromMods", "tail" : "(mods: Vector[Modification], init: LeanToTermMonix): Task[LeanToTermMonix]", "member" : "provingground.interface.LeanToTermMonix.fromMods", "link" : "provingground\/interface\/LeanToTermMonix$.html#fromMods(mods:Vector[trepplein.Modification],init:provingground.interface.LeanToTermMonix):monix.eval.Task[provingground.interface.LeanToTermMonix]", "kind" : "def"}, {"label" : "empty", "tail" : ": LeanToTermMonix", "member" : "provingground.interface.LeanToTermMonix.empty", "link" : "provingground\/interface\/LeanToTermMonix$.html#empty:provingground.interface.LeanToTermMonix", "kind" : "val"}, {"label" : "TaskParser", "tail" : "", "member" : "provingground.interface.LeanToTermMonix.TaskParser", "link" : "provingground\/interface\/LeanToTermMonix$.html#TaskParser=(trepplein.Expr,Vector[provingground.HoTT.Term])=>monix.eval.Task[provingground.HoTT.Term]", "kind" : "type"}, {"label" : "getRecIndexed", "tail" : "(ind: IndexedIndMod, argsFmlyTerm: Task[Vector[Term]]): Task[Term]", "member" : "provingground.interface.LeanToTermMonix.getRecIndexed", "link" : "provingground\/interface\/LeanToTermMonix$.html#getRecIndexed(ind:provingground.interface.IndexedIndMod,argsFmlyTerm:monix.eval.Task[Vector[provingground.HoTT.Term]]):monix.eval.Task[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "getRecSimple", "tail" : "(ind: SimpleIndMod, argsFmlyTerm: Task[Vector[Term]]): Task[Term]", "member" : "provingground.interface.LeanToTermMonix.getRecSimple", "link" : "provingground\/interface\/LeanToTermMonix$.html#getRecSimple(ind:provingground.interface.SimpleIndMod,argsFmlyTerm:monix.eval.Task[Vector[provingground.HoTT.Term]]):monix.eval.Task[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "getRec", "tail" : "(ind: TermIndMod, argsFmlyTerm: Vector[Term]): Task[Term]", "member" : "provingground.interface.LeanToTermMonix.getRec", "link" : "provingground\/interface\/LeanToTermMonix$.html#getRec(ind:provingground.interface.TermIndMod,argsFmlyTerm:Vector[provingground.HoTT.Term]):monix.eval.Task[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "introsFold", "tail" : "(ind: TermIndMod, p: Vector[Term]): Vector[Term]", "member" : "provingground.interface.LeanToTermMonix.introsFold", "link" : "provingground\/interface\/LeanToTermMonix$.html#introsFold(ind:provingground.interface.TermIndMod,p:Vector[provingground.HoTT.Term]):Vector[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "applyFuncOptWitFold", "tail" : "(ft: Task[Option[Term]], v: Vector[Option[Term]]): Task[Option[Term]]", "member" : "provingground.interface.LeanToTermMonix.applyFuncOptWitFold", "link" : "provingground\/interface\/LeanToTermMonix$.html#applyFuncOptWitFold(ft:monix.eval.Task[Option[provingground.HoTT.Term]],v:Vector[Option[provingground.HoTT.Term]]):monix.eval.Task[Option[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "applyFuncWitFold", "tail" : "(ft: Task[Term], v: Vector[Term]): Task[Term]", "member" : "provingground.interface.LeanToTermMonix.applyFuncWitFold", "link" : "provingground\/interface\/LeanToTermMonix$.html#applyFuncWitFold(ft:monix.eval.Task[provingground.HoTT.Term],v:Vector[provingground.HoTT.Term]):monix.eval.Task[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "applyOptFuncWit", "tail" : "(fo: Option[Term], xo: Option[Term]): Option[Term]", "member" : "provingground.interface.LeanToTermMonix.applyOptFuncWit", "link" : "provingground\/interface\/LeanToTermMonix$.html#applyOptFuncWit(fo:Option[provingground.HoTT.Term],xo:Option[provingground.HoTT.Term]):Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "applyFuncWit", "tail" : "(f: Term, x: Term): Term", "member" : "provingground.interface.LeanToTermMonix.applyFuncWit", "link" : "provingground\/interface\/LeanToTermMonix$.html#applyFuncWit(f:provingground.HoTT.Term,x:provingground.HoTT.Term):provingground.HoTT.Term", "kind" : "def"}, {"label" : "applyFuncWitOpt", "tail" : "(f: Term, x: Term): Option[Term]", "member" : "provingground.interface.LeanToTermMonix.applyFuncWitOpt", "link" : "provingground\/interface\/LeanToTermMonix$.html#applyFuncWitOpt(f:provingground.HoTT.Term,x:provingground.HoTT.Term):Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "parseWork", "tail" : ": Set[Expr]", "member" : "provingground.interface.LeanToTermMonix.parseWork", "link" : "provingground\/interface\/LeanToTermMonix$.html#parseWork:scala.collection.mutable.Set[trepplein.Expr]", "kind" : "val"}, {"label" : "applWork", "tail" : ": Set[(Term, Term)]", "member" : "provingground.interface.LeanToTermMonix.applWork", "link" : "provingground\/interface\/LeanToTermMonix$.html#applWork:scala.collection.mutable.Set[(provingground.HoTT.Term,provingground.HoTT.Term)]", "kind" : "val"}, {"label" : "arg", "tail" : ": Term", "member" : "provingground.interface.LeanToTermMonix.arg", "link" : "provingground\/interface\/LeanToTermMonix$.html#arg:provingground.HoTT.Term", "kind" : "var"}, {"label" : "func", "tail" : ": Term", "member" : "provingground.interface.LeanToTermMonix.func", "link" : "provingground\/interface\/LeanToTermMonix$.html#func:provingground.HoTT.Term", "kind" : "var"}, {"label" : "applyWitUnify", "tail" : "(f: Term, x: Term): Option[Term]", "member" : "provingground.interface.LeanToTermMonix.applyWitUnify", "link" : "provingground\/interface\/LeanToTermMonix$.html#applyWitUnify(f:provingground.HoTT.Term,x:provingground.HoTT.Term):Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "witUnify", "tail" : "(x: Term, typ: Typ[Term]): Option[Term]", "member" : "provingground.interface.LeanToTermMonix.witUnify", "link" : "provingground\/interface\/LeanToTermMonix$.html#witUnify(x:provingground.HoTT.Term,typ:provingground.HoTT.Typ[provingground.HoTT.Term]):Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "feedWit", "tail" : "(t: Term): Option[Term]", "member" : "provingground.interface.LeanToTermMonix.feedWit", "link" : "provingground\/interface\/LeanToTermMonix$.html#feedWit(t:provingground.HoTT.Term):Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "proofLift", "tail" : "(): (Term, Term) ⇒ Task[Term]", "member" : "provingground.interface.LeanToTermMonix.proofLift", "link" : "provingground\/interface\/LeanToTermMonix$.html#proofLift:(provingground.HoTT.Term,provingground.HoTT.Term)=>monix.eval.Task[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "isPropnFn", "tail" : "(e: Expr): Boolean", "member" : "provingground.interface.LeanToTermMonix.isPropnFn", "link" : "provingground\/interface\/LeanToTermMonix$.html#isPropnFn(e:trepplein.Expr):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/interface\/LeanToTermMonix$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/interface\/LeanToTermMonix$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/interface\/LeanToTermMonix$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/interface\/LeanToTermMonix$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/interface\/LeanToTermMonix$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/interface\/LeanToTermMonix$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/interface\/LeanToTermMonix$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/LeanToTermMonix$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/LeanToTermMonix$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/LeanToTermMonix$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/interface\/LeanToTermMonix$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/interface\/LeanToTermMonix$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/interface\/LeanToTermMonix$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/interface\/LeanToTermMonix$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/interface\/LeanToTermMonix$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/interface\/LeanToTermMonix$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/interface\/LeanToTermMonix$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/interface\/LeanToTermMonix$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/interface\/LeanToTermMonix$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "add", "tail" : "(mod: Modification): Task[LeanToTermMonix]", "member" : "provingground.interface.LeanToTermMonix.add", "link" : "provingground\/interface\/LeanToTermMonix.html#add(mod:trepplein.Modification):monix.eval.Task[provingground.interface.LeanToTermMonix]", "kind" : "def"}, {"label" : "addIndMod", "tail" : "(ind: IndMod): Task[LeanToTermMonix]", "member" : "provingground.interface.LeanToTermMonix.addIndMod", "link" : "provingground\/interface\/LeanToTermMonix.html#addIndMod(ind:trepplein.IndMod):monix.eval.Task[provingground.interface.LeanToTermMonix]", "kind" : "def"}, {"label" : "addQuotMod", "tail" : "(): Task[LeanToTermMonix]", "member" : "provingground.interface.LeanToTermMonix.addQuotMod", "link" : "provingground\/interface\/LeanToTermMonix.html#addQuotMod:monix.eval.Task[provingground.interface.LeanToTermMonix]", "kind" : "def"}, {"label" : "addDefMod", "tail" : "(df: DefMod): Task[LeanToTermMonix]", "member" : "provingground.interface.LeanToTermMonix.addDefMod", "link" : "provingground\/interface\/LeanToTermMonix.html#addDefMod(df:trepplein.DefMod):monix.eval.Task[provingground.interface.LeanToTermMonix]", "kind" : "def"}, {"label" : "addAxiomMod", "tail" : "(ax: AxiomMod): Task[LeanToTermMonix]", "member" : "provingground.interface.LeanToTermMonix.addAxiomMod", "link" : "provingground\/interface\/LeanToTermMonix.html#addAxiomMod(ax:trepplein.AxiomMod):monix.eval.Task[provingground.interface.LeanToTermMonix]", "kind" : "def"}, {"label" : "addAxiomSeq", "tail" : "(axs: Vector[(Name, Expr)]): Task[LeanToTermMonix]", "member" : "provingground.interface.LeanToTermMonix.addAxiomSeq", "link" : "provingground\/interface\/LeanToTermMonix.html#addAxiomSeq(axs:Vector[(trepplein.Name,trepplein.Expr)]):monix.eval.Task[provingground.interface.LeanToTermMonix]", "kind" : "def"}, {"label" : "addAxioms", "tail" : "(axs: Vector[(Name, Expr)]): Task[LeanToTermMonix]", "member" : "provingground.interface.LeanToTermMonix.addAxioms", "link" : "provingground\/interface\/LeanToTermMonix.html#addAxioms(axs:Vector[(trepplein.Name,trepplein.Expr)]):monix.eval.Task[provingground.interface.LeanToTermMonix]", "kind" : "def"}, {"label" : "addAxiom", "tail" : "(name: Name, ty: Expr): Task[LeanToTermMonix]", "member" : "provingground.interface.LeanToTermMonix.addAxiom", "link" : "provingground\/interface\/LeanToTermMonix.html#addAxiom(name:trepplein.Name,ty:trepplein.Expr):monix.eval.Task[provingground.interface.LeanToTermMonix]", "kind" : "def"}, {"label" : "addDefnVal", "tail" : "(name: Name, value: Expr, tp: Expr): Task[LeanToTermMonix]", "member" : "provingground.interface.LeanToTermMonix.addDefnVal", "link" : "provingground\/interface\/LeanToTermMonix.html#addDefnVal(name:trepplein.Name,value:trepplein.Expr,tp:trepplein.Expr):monix.eval.Task[provingground.interface.LeanToTermMonix]", "kind" : "def"}, {"label" : "addDefnMap", "tail" : "(name: Name, term: Term): LeanToTermMonix", "member" : "provingground.interface.LeanToTermMonix.addDefnMap", "link" : "provingground\/interface\/LeanToTermMonix.html#addDefnMap(name:trepplein.Name,term:provingground.HoTT.Term):provingground.interface.LeanToTermMonix", "kind" : "def"}, {"label" : "parseVar", "tail" : "(b: Binding, vars: Vector[Term]): Task[Term with Subs[Term]]", "member" : "provingground.interface.LeanToTermMonix.parseVar", "link" : "provingground\/interface\/LeanToTermMonix.html#parseVar(b:trepplein.Binding,vars:Vector[provingground.HoTT.Term]):monix.eval.Task[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "parseSym", "tail" : "(name: Name, ty: Expr, vars: Vector[Term]): Task[Term with Subs[Term]]", "member" : "provingground.interface.LeanToTermMonix.parseSym", "link" : "provingground\/interface\/LeanToTermMonix.html#parseSym(name:trepplein.Name,ty:trepplein.Expr,vars:Vector[provingground.HoTT.Term]):monix.eval.Task[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "parseSymVec", "tail" : "(vec: Vector[(Name, Expr)], vars: Vector[Term]): Task[Vector[(Name, Term)]]", "member" : "provingground.interface.LeanToTermMonix.parseSymVec", "link" : "provingground\/interface\/LeanToTermMonix.html#parseSymVec(vec:Vector[(trepplein.Name,trepplein.Expr)],vars:Vector[provingground.HoTT.Term]):monix.eval.Task[Vector[(trepplein.Name,provingground.HoTT.Term)]]", "kind" : "def"}, {"label" : "parseTypVec", "tail" : "(vec: Vector[Expr], vars: Vector[Term]): Task[Vector[Typ[Term]]]", "member" : "provingground.interface.LeanToTermMonix.parseTypVec", "link" : "provingground\/interface\/LeanToTermMonix.html#parseTypVec(vec:Vector[trepplein.Expr],vars:Vector[provingground.HoTT.Term]):monix.eval.Task[Vector[provingground.HoTT.Typ[provingground.HoTT.Term]]]", "kind" : "def"}, {"label" : "parseVec", "tail" : "(vec: Vector[Expr], vars: Vector[Term]): Task[Vector[Term]]", "member" : "provingground.interface.LeanToTermMonix.parseVec", "link" : "provingground\/interface\/LeanToTermMonix.html#parseVec(vec:Vector[trepplein.Expr],vars:Vector[provingground.HoTT.Term]):monix.eval.Task[Vector[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "parseTyp", "tail" : "(x: Expr, vars: Vector[Term]): Task[Typ[Term]]", "member" : "provingground.interface.LeanToTermMonix.parseTyp", "link" : "provingground\/interface\/LeanToTermMonix.html#parseTyp(x:trepplein.Expr,vars:Vector[provingground.HoTT.Term]):monix.eval.Task[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "parse", "tail" : "(exp: Expr, vars: Vector[Term]): Task[Term]", "member" : "provingground.interface.LeanToTermMonix.parse", "link" : "provingground\/interface\/LeanToTermMonix.html#parse(exp:trepplein.Expr,vars:Vector[provingground.HoTT.Term]):monix.eval.Task[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "Predef", "tail" : "", "member" : "provingground.interface.LeanToTermMonix.Predef", "link" : "provingground\/interface\/LeanToTermMonix.html#Predef", "kind" : "object"}, {"label" : "defnOpt", "tail" : "(exp: Expr): Option[Term]", "member" : "provingground.interface.LeanToTermMonix.defnOpt", "link" : "provingground\/interface\/LeanToTermMonix.html#defnOpt(exp:trepplein.Expr):Option[provingground.HoTT.Term]", "kind" : "def"}, {"member" : "provingground.interface.LeanToTermMonix#<init>", "error" : "unsupported entity"}, {"label" : "termIndModMap", "tail" : ": Map[Name, TermIndMod]", "member" : "provingground.interface.LeanToTermMonix.termIndModMap", "link" : "provingground\/interface\/LeanToTermMonix.html#termIndModMap:Map[trepplein.Name,provingground.interface.TermIndMod]", "kind" : "val"}, {"label" : "defnMap", "tail" : ": Map[Name, Term]", "member" : "provingground.interface.LeanToTermMonix.defnMap", "link" : "provingground\/interface\/LeanToTermMonix.html#defnMap:Map[trepplein.Name,provingground.HoTT.Term]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/interface\/LeanToTermMonix.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/interface\/LeanToTermMonix.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/interface\/LeanToTermMonix.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/interface\/LeanToTermMonix.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/interface\/LeanToTermMonix.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/interface\/LeanToTermMonix.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/interface\/LeanToTermMonix.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/LeanToTermMonix.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/LeanToTermMonix.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/LeanToTermMonix.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/interface\/LeanToTermMonix.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/interface\/LeanToTermMonix.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/interface\/LeanToTermMonix.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/interface\/LeanToTermMonix.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/interface\/LeanToTermMonix.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/interface\/LeanToTermMonix.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/interface\/LeanToTermMonix.html", "kind" : "object"}, {"name" : "provingground.interface.LeanToTermMut", "shortDescription" : "", "object" : "provingground\/interface\/LeanToTermMut$.html", "members_object" : [{"label" : "fromModsOpt", "tail" : "(mods: Seq[Modification]): LeanToTermMut", "member" : "provingground.interface.LeanToTermMut.fromModsOpt", "link" : "provingground\/interface\/LeanToTermMut$.html#fromModsOpt(mods:Seq[trepplein.Modification]):provingground.interface.LeanToTermMut", "kind" : "def"}, {"label" : "fromMods", "tail" : "(mods: Seq[Modification]): LeanToTermMut", "member" : "provingground.interface.LeanToTermMut.fromMods", "link" : "provingground\/interface\/LeanToTermMut$.html#fromMods(mods:Seq[trepplein.Modification]):provingground.interface.LeanToTermMut", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/interface\/LeanToTermMut$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/interface\/LeanToTermMut$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/interface\/LeanToTermMut$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/interface\/LeanToTermMut$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/interface\/LeanToTermMut$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/interface\/LeanToTermMut$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/interface\/LeanToTermMut$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/LeanToTermMut$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/LeanToTermMut$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/LeanToTermMut$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/interface\/LeanToTermMut$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/interface\/LeanToTermMut$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/interface\/LeanToTermMut$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/interface\/LeanToTermMut$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/interface\/LeanToTermMut$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/interface\/LeanToTermMut$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/interface\/LeanToTermMut$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/interface\/LeanToTermMut$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/interface\/LeanToTermMut$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "Predef", "tail" : "", "member" : "provingground.interface.LeanParse.Predef", "link" : "provingground\/interface\/LeanParse.html#Predef", "kind" : "object"}, {"label" : "addOpt", "tail" : "(mod: Modification): LeanParse", "member" : "provingground.interface.LeanToTermMut.addOpt", "link" : "provingground\/interface\/LeanToTermMut.html#addOpt(mod:trepplein.Modification):provingground.interface.LeanParse", "kind" : "def"}, {"label" : "add", "tail" : "(mod: Modification): LeanParse", "member" : "provingground.interface.LeanToTermMut.add", "link" : "provingground\/interface\/LeanToTermMut.html#add(mod:trepplein.Modification):provingground.interface.LeanParse", "kind" : "def"}, {"label" : "addQuotModOpt", "tail" : "(): LeanParse", "member" : "provingground.interface.LeanToTermMut.addQuotModOpt", "link" : "provingground\/interface\/LeanToTermMut.html#addQuotModOpt:provingground.interface.LeanParse", "kind" : "def"}, {"label" : "addQuotMod", "tail" : "(): LeanParse", "member" : "provingground.interface.LeanToTermMut.addQuotMod", "link" : "provingground\/interface\/LeanToTermMut.html#addQuotMod:provingground.interface.LeanParse", "kind" : "def"}, {"label" : "addDefModOpt", "tail" : "(df: DefMod): LeanParse", "member" : "provingground.interface.LeanToTermMut.addDefModOpt", "link" : "provingground\/interface\/LeanToTermMut.html#addDefModOpt(df:trepplein.DefMod):provingground.interface.LeanParse", "kind" : "def"}, {"label" : "addAxiomModOpt", "tail" : "(ax: AxiomMod): LeanParse", "member" : "provingground.interface.LeanToTermMut.addAxiomModOpt", "link" : "provingground\/interface\/LeanToTermMut.html#addAxiomModOpt(ax:trepplein.AxiomMod):provingground.interface.LeanParse", "kind" : "def"}, {"label" : "addDefMod", "tail" : "(df: DefMod): LeanParse", "member" : "provingground.interface.LeanToTermMut.addDefMod", "link" : "provingground\/interface\/LeanToTermMut.html#addDefMod(df:trepplein.DefMod):provingground.interface.LeanParse", "kind" : "def"}, {"label" : "addAxiomMod", "tail" : "(ax: AxiomMod): LeanParse", "member" : "provingground.interface.LeanToTermMut.addAxiomMod", "link" : "provingground\/interface\/LeanToTermMut.html#addAxiomMod(ax:trepplein.AxiomMod):provingground.interface.LeanParse", "kind" : "def"}, {"label" : "addIndModOpt", "tail" : "(ind: IndMod): LeanParse", "member" : "provingground.interface.LeanToTermMut.addIndModOpt", "link" : "provingground\/interface\/LeanToTermMut.html#addIndModOpt(ind:trepplein.IndMod):provingground.interface.LeanParse", "kind" : "def"}, {"label" : "addIndMod", "tail" : "(ind: IndMod): LeanParse", "member" : "provingground.interface.LeanToTermMut.addIndMod", "link" : "provingground\/interface\/LeanToTermMut.html#addIndMod(ind:trepplein.IndMod):provingground.interface.LeanParse", "kind" : "def"}, {"label" : "addAxiomsOpt", "tail" : "(axs: Vector[(Name, Expr)]): LeanToTermMut", "member" : "provingground.interface.LeanToTermMut.addAxiomsOpt", "link" : "provingground\/interface\/LeanToTermMut.html#addAxiomsOpt(axs:Vector[(trepplein.Name,trepplein.Expr)]):provingground.interface.LeanToTermMut", "kind" : "def"}, {"label" : "addAxioms", "tail" : "(axs: Vector[(Name, Expr)]): LeanParse", "member" : "provingground.interface.LeanToTermMut.addAxioms", "link" : "provingground\/interface\/LeanToTermMut.html#addAxioms(axs:Vector[(trepplein.Name,trepplein.Expr)]):provingground.interface.LeanParse", "kind" : "def"}, {"label" : "addAxiomOpt", "tail" : "(name: Name, ty: Expr): LeanParse", "member" : "provingground.interface.LeanToTermMut.addAxiomOpt", "link" : "provingground\/interface\/LeanToTermMut.html#addAxiomOpt(name:trepplein.Name,ty:trepplein.Expr):provingground.interface.LeanParse", "kind" : "def"}, {"label" : "putAxiomOpt", "tail" : "(name: Name, ty: Expr): Unit", "member" : "provingground.interface.LeanToTermMut.putAxiomOpt", "link" : "provingground\/interface\/LeanToTermMut.html#putAxiomOpt(name:trepplein.Name,ty:trepplein.Expr):Unit", "kind" : "def"}, {"label" : "addAxiom", "tail" : "(name: Name, ty: Expr): LeanParse", "member" : "provingground.interface.LeanToTermMut.addAxiom", "link" : "provingground\/interface\/LeanToTermMut.html#addAxiom(name:trepplein.Name,ty:trepplein.Expr):provingground.interface.LeanParse", "kind" : "def"}, {"label" : "putAxiom", "tail" : "(name: Name, ty: Expr): Unit", "member" : "provingground.interface.LeanToTermMut.putAxiom", "link" : "provingground\/interface\/LeanToTermMut.html#putAxiom(name:trepplein.Name,ty:trepplein.Expr):Unit", "kind" : "def"}, {"label" : "addDefnValOpt", "tail" : "(name: Name, value: Expr, tp: Expr): LeanParse", "member" : "provingground.interface.LeanToTermMut.addDefnValOpt", "link" : "provingground\/interface\/LeanToTermMut.html#addDefnValOpt(name:trepplein.Name,value:trepplein.Expr,tp:trepplein.Expr):provingground.interface.LeanParse", "kind" : "def"}, {"label" : "addDefnVal", "tail" : "(name: Name, value: Expr, tp: Expr): LeanParse", "member" : "provingground.interface.LeanToTermMut.addDefnVal", "link" : "provingground\/interface\/LeanToTermMut.html#addDefnVal(name:trepplein.Name,value:trepplein.Expr,tp:trepplein.Expr):provingground.interface.LeanParse", "kind" : "def"}, {"label" : "addDefnMap", "tail" : "(name: Name, term: Term): LeanParse", "member" : "provingground.interface.LeanToTermMut.addDefnMap", "link" : "provingground\/interface\/LeanToTermMut.html#addDefnMap(name:trepplein.Name,term:provingground.HoTT.Term):provingground.interface.LeanParse", "kind" : "def"}, {"member" : "provingground.interface.LeanToTermMut#<init>", "error" : "unsupported entity"}, {"label" : "unparsed", "tail" : ": ArrayBuffer[Name]", "member" : "provingground.interface.LeanToTermMut.unparsed", "link" : "provingground\/interface\/LeanToTermMut.html#unparsed:scala.collection.mutable.ArrayBuffer[trepplein.Name]", "kind" : "val"}, {"label" : "termIndModMap", "tail" : ": Map[Name, TermIndMod]", "member" : "provingground.interface.LeanToTermMut.termIndModMap", "link" : "provingground\/interface\/LeanToTermMut.html#termIndModMap:scala.collection.mutable.Map[trepplein.Name,provingground.interface.TermIndMod]", "kind" : "val"}, {"label" : "defnMap", "tail" : ": Map[Name, Term]", "member" : "provingground.interface.LeanToTermMut.defnMap", "link" : "provingground\/interface\/LeanToTermMut.html#defnMap:scala.collection.mutable.Map[trepplein.Name,provingground.HoTT.Term]", "kind" : "val"}, {"label" : "toTermIndModOpt", "tail" : "(ind: IndMod): Option[TermIndMod]", "member" : "provingground.interface.LeanParse.toTermIndModOpt", "link" : "provingground\/interface\/LeanToTermMut.html#toTermIndModOpt(ind:trepplein.IndMod):Option[provingground.interface.TermIndMod]", "kind" : "def"}, {"label" : "toTermIndModTry", "tail" : "(ind: IndMod): Try[TermIndMod]", "member" : "provingground.interface.LeanParse.toTermIndModTry", "link" : "provingground\/interface\/LeanToTermMut.html#toTermIndModTry(ind:trepplein.IndMod):scala.util.Try[provingground.interface.TermIndMod]", "kind" : "def"}, {"label" : "parseVar", "tail" : "(b: Binding, vars: Vector[Term]): Try[Term with Subs[Term]]", "member" : "provingground.interface.LeanParse.parseVar", "link" : "provingground\/interface\/LeanToTermMut.html#parseVar(b:trepplein.Binding,vars:Vector[provingground.HoTT.Term]):scala.util.Try[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "parseSym", "tail" : "(name: Name, ty: Expr, vars: Vector[Term]): Try[Term with Subs[Term]]", "member" : "provingground.interface.LeanParse.parseSym", "link" : "provingground\/interface\/LeanToTermMut.html#parseSym(name:trepplein.Name,ty:trepplein.Expr,vars:Vector[provingground.HoTT.Term]):scala.util.Try[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "parseSymOpt", "tail" : "(name: Name, ty: Expr, vars: Vector[Term]): Option[U with Subs[U] forSome {type U <: Term with Subs[U]}]", "member" : "provingground.interface.LeanParse.parseSymOpt", "link" : "provingground\/interface\/LeanToTermMut.html#parseSymOpt(name:trepplein.Name,ty:trepplein.Expr,vars:Vector[provingground.HoTT.Term]):Option[Uwithprovingground.HoTT.Subs[U]forSome{typeU<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]}]", "kind" : "def"}, {"label" : "parseSymVecOpt", "tail" : "(vec: Vector[(Name, Expr)], vars: Vector[Term]): Option[Vector[Term]]", "member" : "provingground.interface.LeanParse.parseSymVecOpt", "link" : "provingground\/interface\/LeanToTermMut.html#parseSymVecOpt(vec:Vector[(trepplein.Name,trepplein.Expr)],vars:Vector[provingground.HoTT.Term]):Option[Vector[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "parseSymVec", "tail" : "(vec: Vector[(Name, Expr)], vars: Vector[Term]): Try[Vector[Term]]", "member" : "provingground.interface.LeanParse.parseSymVec", "link" : "provingground\/interface\/LeanToTermMut.html#parseSymVec(vec:Vector[(trepplein.Name,trepplein.Expr)],vars:Vector[provingground.HoTT.Term]):scala.util.Try[Vector[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "parseTypVec", "tail" : "(vec: Vector[Expr], vars: Vector[Term]): Try[Vector[Typ[Term]]]", "member" : "provingground.interface.LeanParse.parseTypVec", "link" : "provingground\/interface\/LeanToTermMut.html#parseTypVec(vec:Vector[trepplein.Expr],vars:Vector[provingground.HoTT.Term]):scala.util.Try[Vector[provingground.HoTT.Typ[provingground.HoTT.Term]]]", "kind" : "def"}, {"label" : "parseVecOpt", "tail" : "(vec: Vector[Expr], vars: Vector[Term]): Option[Vector[Term]]", "member" : "provingground.interface.LeanParse.parseVecOpt", "link" : "provingground\/interface\/LeanToTermMut.html#parseVecOpt(vec:Vector[trepplein.Expr],vars:Vector[provingground.HoTT.Term]):Option[Vector[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "parseVec", "tail" : "(vec: Vector[Expr], vars: Vector[Term]): Try[Vector[Term]]", "member" : "provingground.interface.LeanParse.parseVec", "link" : "provingground\/interface\/LeanToTermMut.html#parseVec(vec:Vector[trepplein.Expr],vars:Vector[provingground.HoTT.Term]):scala.util.Try[Vector[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "parseTyp", "tail" : "(x: Expr, vars: Vector[Term]): Try[Typ[Term]]", "member" : "provingground.interface.LeanParse.parseTyp", "link" : "provingground\/interface\/LeanToTermMut.html#parseTyp(x:trepplein.Expr,vars:Vector[provingground.HoTT.Term]):scala.util.Try[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "parseTypOpt", "tail" : "(x: Expr, vars: Vector[Term]): Option[Typ[U] forSome {type U <: Term with Subs[U]}]", "member" : "provingground.interface.LeanParse.parseTypOpt", "link" : "provingground\/interface\/LeanToTermMut.html#parseTypOpt(x:trepplein.Expr,vars:Vector[provingground.HoTT.Term]):Option[provingground.HoTT.Typ[U]forSome{typeU<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]}]", "kind" : "def"}, {"label" : "recParser", "tail" : "(rec: ⇒ Parser)(exp: Expr, vars: Vector[Term]): Try[Term]", "member" : "provingground.interface.LeanParse.recParser", "link" : "provingground\/interface\/LeanToTermMut.html#recParser(rec:=>provingground.interface.LeanToTerm.Parser)(exp:trepplein.Expr,vars:Vector[provingground.HoTT.Term]):scala.util.Try[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "recOptParser", "tail" : "(rec: ⇒ OptParser)(exp: Expr, vars: Vector[Term]): Option[Term]", "member" : "provingground.interface.LeanParse.recOptParser", "link" : "provingground\/interface\/LeanToTermMut.html#recOptParser(rec:=>provingground.interface.LeanToTerm.OptParser)(exp:trepplein.Expr,vars:Vector[provingground.HoTT.Term]):Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "applyFuncPropOpt", "tail" : "(func: Term, arg: Term): Option[Term]", "member" : "provingground.interface.LeanParse.applyFuncPropOpt", "link" : "provingground\/interface\/LeanToTermMut.html#applyFuncPropOpt(func:provingground.HoTT.Term,arg:provingground.HoTT.Term):Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "applyFuncProp", "tail" : "(func: Term, arg: Term, vars: Vector[Term], data: Vector[Expr]): Term", "member" : "provingground.interface.LeanParse.applyFuncProp", "link" : "provingground\/interface\/LeanToTermMut.html#applyFuncProp(func:provingground.HoTT.Term,arg:provingground.HoTT.Term,vars:Vector[provingground.HoTT.Term],data:Vector[trepplein.Expr]):provingground.HoTT.Term", "kind" : "def"}, {"label" : "inPropFamily", "tail" : ": (Term) ⇒ Boolean", "member" : "provingground.interface.LeanParse.inPropFamily", "link" : "provingground\/interface\/LeanToTermMut.html#inPropFamily:provingground.HoTT.Term=>Boolean", "kind" : "val"}, {"label" : "defnOpt", "tail" : "(exp: Expr): Option[Term]", "member" : "provingground.interface.LeanParse.defnOpt", "link" : "provingground\/interface\/LeanToTermMut.html#defnOpt(exp:trepplein.Expr):Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "parseOpt", "tail" : ": OptParser", "member" : "provingground.interface.LeanParse.parseOpt", "link" : "provingground\/interface\/LeanToTermMut.html#parseOpt:provingground.interface.LeanToTerm.OptParser", "kind" : "val"}, {"label" : "parse", "tail" : ": Parser", "member" : "provingground.interface.LeanParse.parse", "link" : "provingground\/interface\/LeanToTermMut.html#parse:provingground.interface.LeanToTerm.Parser", "kind" : "val"}, {"label" : "defns", "tail" : "(exp: Expr, typOpt: Option[Typ[Term]]): Option[Term]", "member" : "provingground.interface.LeanParse.defns", "link" : "provingground\/interface\/LeanToTermMut.html#defns(exp:trepplein.Expr,typOpt:Option[provingground.HoTT.Typ[provingground.HoTT.Term]]):Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/interface\/LeanToTermMut.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/interface\/LeanToTermMut.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/interface\/LeanToTermMut.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/interface\/LeanToTermMut.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/interface\/LeanToTermMut.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/interface\/LeanToTermMut.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/interface\/LeanToTermMut.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/LeanToTermMut.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/LeanToTermMut.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/LeanToTermMut.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/interface\/LeanToTermMut.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/interface\/LeanToTermMut.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/interface\/LeanToTermMut.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/interface\/LeanToTermMut.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/interface\/LeanToTermMut.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/interface\/LeanToTermMut.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/interface\/LeanToTermMut.html", "kind" : "object"}, {"name" : "provingground.interface.MantleCask", "shortDescription" : "", "object" : "provingground\/interface\/MantleCask$.html", "members_object" : [{"label" : "host", "tail" : "(): String", "member" : "provingground.interface.MantleCask.host", "link" : "provingground\/interface\/MantleCask$.html#host:String", "kind" : "def"}, {"label" : "port", "tail" : "(): Int", "member" : "provingground.interface.MantleCask.port", "link" : "provingground\/interface\/MantleCask$.html#port:Int", "kind" : "def"}, {"label" : "allRoutes", "tail" : "(): Seq[Routes]", "member" : "cask.main.Main.allRoutes", "link" : "provingground\/interface\/MantleCask$.html#allRoutes:Seq[cask.main.Routes]", "kind" : "def"}, {"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "cask.main.BaseMain.main", "link" : "provingground\/interface\/MantleCask$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "handleEndpointError", "tail" : "(exchange: HttpServerExchange, routes: Routes, metadata: EndpointMetadata[_], e: Error): Response", "member" : "cask.main.BaseMain.handleEndpointError", "link" : "provingground\/interface\/MantleCask$.html#handleEndpointError(exchange:io.undertow.server.HttpServerExchange,routes:cask.main.Routes,metadata:cask.main.Routes.EndpointMetadata[_],e:cask.internal.Router.Result.Error):cask.model.Response", "kind" : "def"}, {"label" : "writeResponseHandler", "tail" : "(r: Response): BlockingHandler", "member" : "cask.main.BaseMain.writeResponseHandler", "link" : "provingground\/interface\/MantleCask$.html#writeResponseHandler(r:cask.endpoints.WebsocketResult.Response):io.undertow.server.handlers.BlockingHandler", "kind" : "def"}, {"label" : "defaultHandler", "tail" : "(): BlockingHandler", "member" : "cask.main.BaseMain.defaultHandler", "link" : "provingground\/interface\/MantleCask$.html#defaultHandler:io.undertow.server.handlers.BlockingHandler", "kind" : "def"}, {"label" : "handleNotFound", "tail" : "(): Response", "member" : "cask.main.BaseMain.handleNotFound", "link" : "provingground\/interface\/MantleCask$.html#handleNotFound():cask.model.Response", "kind" : "def"}, {"label" : "writeResponse", "tail" : "(exchange: HttpServerExchange, response: Response): Unit", "member" : "cask.main.BaseMain.writeResponse", "link" : "provingground\/interface\/MantleCask$.html#writeResponse(exchange:io.undertow.server.HttpServerExchange,response:cask.model.Response):Unit", "kind" : "def"}, {"label" : "routeTries", "tail" : ": Map[String, DispatchTrie[(Routes, EndpointMetadata[_])]]", "member" : "cask.main.BaseMain.routeTries", "link" : "provingground\/interface\/MantleCask$.html#routeTries:scala.collection.immutable.Map[String,cask.internal.DispatchTrie[(cask.main.Routes,cask.main.Routes.EndpointMetadata[_])]]", "kind" : "lazy val"}, {"label" : "routeList", "tail" : ": Seq[(Routes, EndpointMetadata[_$1]) forSome {type _$1}]", "member" : "cask.main.BaseMain.routeList", "link" : "provingground\/interface\/MantleCask$.html#routeList:Seq[(cask.main.Routes,cask.main.Routes.EndpointMetadata[_$1])forSome{type_$1}]", "kind" : "lazy val"}, {"label" : "debugMode", "tail" : "(): Boolean", "member" : "cask.main.BaseMain.debugMode", "link" : "provingground\/interface\/MantleCask$.html#debugMode:Boolean", "kind" : "def"}, {"label" : "mainDecorators", "tail" : "(): Seq[Decorator]", "member" : "cask.main.BaseMain.mainDecorators", "link" : "provingground\/interface\/MantleCask$.html#mainDecorators:Seq[cask.main.Decorator]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/interface\/MantleCask$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/interface\/MantleCask$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/interface\/MantleCask$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/interface\/MantleCask$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/interface\/MantleCask$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/interface\/MantleCask$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/interface\/MantleCask$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/MantleCask$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/MantleCask$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/MantleCask$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/interface\/MantleCask$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/interface\/MantleCask$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/interface\/MantleCask$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/interface\/MantleCask$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/interface\/MantleCask$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/interface\/MantleCask$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/interface\/MantleCask$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/interface\/MantleCask$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/interface\/MantleCask$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.interface.MantleRoutes", "shortDescription" : "", "object" : "provingground\/interface\/MantleRoutes$.html", "members_object" : [{"label" : "showUserProfile", "tail" : "(): WebsocketResult", "member" : "provingground.interface.MantleRoutes.showUserProfile", "link" : "provingground\/interface\/MantleRoutes$.html#showUserProfile():cask.WebsocketResult", "kind" : "def"}, {"label" : "sendProof", "tail" : "(channel: WebSocketChannel): Unit", "member" : "provingground.interface.MantleRoutes.sendProof", "link" : "provingground\/interface\/MantleRoutes$.html#sendProof(channel:io.undertow.websockets.core.WebSocketChannel):Unit", "kind" : "def"}, {"label" : "repl", "tail" : "(request: Request): String", "member" : "provingground.interface.MantleRoutes.repl", "link" : "provingground\/interface\/MantleRoutes$.html#repl(request:cask.Request):String", "kind" : "def"}, {"label" : "fiddle", "tail" : "(): String", "member" : "provingground.interface.MantleRoutes.fiddle", "link" : "provingground\/interface\/MantleRoutes$.html#fiddle():String", "kind" : "def"}, {"label" : "site", "tail" : "(request: Request): String", "member" : "provingground.interface.MantleRoutes.site", "link" : "provingground\/interface\/MantleRoutes$.html#site(request:cask.Request):String", "kind" : "def"}, {"label" : "seek", "tail" : "(): String", "member" : "provingground.interface.MantleRoutes.seek", "link" : "provingground\/interface\/MantleRoutes$.html#seek():String", "kind" : "def"}, {"label" : "leanlib", "tail" : "(): String", "member" : "provingground.interface.MantleRoutes.leanlib", "link" : "provingground\/interface\/MantleRoutes$.html#leanlib():String", "kind" : "def"}, {"label" : "prover", "tail" : "(): String", "member" : "provingground.interface.MantleRoutes.prover", "link" : "provingground\/interface\/MantleRoutes$.html#prover():String", "kind" : "def"}, {"label" : "index", "tail" : "(): String", "member" : "provingground.interface.MantleRoutes.index", "link" : "provingground\/interface\/MantleRoutes$.html#index():String", "kind" : "def"}, {"label" : "root", "tail" : "(): String", "member" : "provingground.interface.MantleRoutes.root", "link" : "provingground\/interface\/MantleRoutes$.html#root():String", "kind" : "def"}, {"label" : "public", "tail" : "(): String", "member" : "provingground.interface.MantleRoutes.public", "link" : "provingground\/interface\/MantleRoutes$.html#public():String", "kind" : "def"}, {"label" : "docsRoute", "tail" : "(): String", "member" : "provingground.interface.MantleRoutes.docsRoute", "link" : "provingground\/interface\/MantleRoutes$.html#docsRoute():String", "kind" : "def"}, {"label" : "initialize", "tail" : "()(routes: RoutesEndpointsMetadata[MantleRoutes.this.type]): Unit", "member" : "cask.main.Routes.initialize", "link" : "provingground\/interface\/MantleRoutes$.html#initialize()(implicitroutes:cask.main.Routes.RoutesEndpointsMetadata[Routes.this.type]):Unit", "kind" : "def"}, {"label" : "caskMetadata", "tail" : "(): RoutesEndpointsMetadata[MantleRoutes.this.type]", "member" : "cask.main.Routes.caskMetadata", "link" : "provingground\/interface\/MantleRoutes$.html#caskMetadata:cask.main.Routes.RoutesEndpointsMetadata[Routes.this.type]", "kind" : "def"}, {"label" : "decorators", "tail" : "(): Seq[Decorator]", "member" : "cask.main.Routes.decorators", "link" : "provingground\/interface\/MantleRoutes$.html#decorators:Seq[cask.main.Decorator]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/interface\/MantleRoutes$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/interface\/MantleRoutes$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/interface\/MantleRoutes$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/interface\/MantleRoutes$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/interface\/MantleRoutes$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/interface\/MantleRoutes$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/interface\/MantleRoutes$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/MantleRoutes$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/MantleRoutes$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/MantleRoutes$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/interface\/MantleRoutes$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/interface\/MantleRoutes$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/interface\/MantleRoutes$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/interface\/MantleRoutes$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/interface\/MantleRoutes$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/interface\/MantleRoutes$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/interface\/MantleRoutes$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/interface\/MantleRoutes$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/interface\/MantleRoutes$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.interface.MantleServer", "shortDescription" : "", "object" : "provingground\/interface\/MantleServer$.html", "members_object" : [{"label" : "parser", "tail" : ": OptionParser[Config]", "member" : "provingground.interface.MantleServer.parser", "link" : "provingground\/interface\/MantleServer$.html#parser:scopt.OptionParser[provingground.interface.MantleServer.Config]", "kind" : "val"}, {"label" : "Config", "tail" : "", "member" : "provingground.interface.MantleServer.Config", "link" : "provingground\/interface\/MantleServer$.html#ConfigextendsProductwithSerializable", "kind" : "case class"}, {"label" : "pathRead", "tail" : ": Read[Path]", "member" : "provingground.interface.MantleServer.pathRead", "link" : "provingground\/interface\/MantleServer$.html#pathRead:scopt.Read[ammonite.ops.Path]", "kind" : "implicit val"}, {"label" : "path", "tail" : "(s: String): Path", "member" : "provingground.interface.MantleServer.path", "link" : "provingground\/interface\/MantleServer$.html#path(s:String):ammonite.ops.Path", "kind" : "def"}, {"label" : "executionContext", "tail" : ": ExecutionContextExecutor", "member" : "provingground.interface.MantleServer.executionContext", "link" : "provingground\/interface\/MantleServer$.html#executionContext:scala.concurrent.ExecutionContextExecutor", "kind" : "implicit val"}, {"label" : "materializer", "tail" : ": ActorMaterializer", "member" : "provingground.interface.MantleServer.materializer", "link" : "provingground\/interface\/MantleServer$.html#materializer:akka.stream.ActorMaterializer", "kind" : "implicit val"}, {"label" : "system", "tail" : ": ActorSystem", "member" : "provingground.interface.MantleServer.system", "link" : "provingground\/interface\/MantleServer$.html#system:akka.actor.ActorSystem", "kind" : "implicit val"}, {"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "scala.App.main", "link" : "provingground\/interface\/MantleServer$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "delayedInit", "tail" : "(body: ⇒ Unit): Unit", "member" : "scala.App.delayedInit", "link" : "provingground\/interface\/MantleServer$.html#delayedInit(body:=>Unit):Unit", "kind" : "def"}, {"label" : "args", "tail" : "(): Array[String]", "member" : "scala.App.args", "link" : "provingground\/interface\/MantleServer$.html#args:Array[String]", "kind" : "def"}, {"label" : "executionStart", "tail" : ": Long", "member" : "scala.App.executionStart", "link" : "provingground\/interface\/MantleServer$.html#executionStart:Long", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/interface\/MantleServer$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/interface\/MantleServer$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/interface\/MantleServer$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/interface\/MantleServer$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/interface\/MantleServer$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/interface\/MantleServer$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/interface\/MantleServer$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/MantleServer$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/MantleServer$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/MantleServer$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/interface\/MantleServer$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/interface\/MantleServer$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/interface\/MantleServer$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/interface\/MantleServer$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/interface\/MantleServer$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/interface\/MantleServer$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/interface\/MantleServer$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/interface\/MantleServer$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/interface\/MantleServer$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.interface.MantleService", "shortDescription" : "", "object" : "provingground\/interface\/MantleService$.html", "members_class" : [{"label" : "route", "tail" : ": Route", "member" : "provingground.interface.MantleService.route", "link" : "provingground\/interface\/MantleService.html#route:akka.http.scaladsl.server.Route", "kind" : "val"}, {"label" : "mantleRoute", "tail" : ": Route", "member" : "provingground.interface.MantleService.mantleRoute", "link" : "provingground\/interface\/MantleService.html#mantleRoute:akka.http.scaladsl.server.Route", "kind" : "val"}, {"label" : "sseSource", "tail" : ": Source[ServerSentEvent, NotUsed]", "member" : "provingground.interface.MantleService.sseSource", "link" : "provingground\/interface\/MantleService.html#sseSource:akka.stream.scaladsl.Source[akka.http.scaladsl.model.sse.ServerSentEvent,akka.NotUsed]", "kind" : "val"}, {"label" : "sseQueue", "tail" : ": SourceQueueWithComplete[String]", "member" : "provingground.interface.MantleService.sseQueue", "link" : "provingground\/interface\/MantleService.html#sseQueue:akka.stream.scaladsl.SourceQueueWithComplete[String]", "kind" : "val"}, {"label" : "buildRoute", "tail" : ": Route", "member" : "provingground.interface.MantleService.buildRoute", "link" : "provingground\/interface\/MantleService.html#buildRoute:akka.http.scaladsl.server.Route", "kind" : "val"}, {"label" : "baseRoute", "tail" : ": Route", "member" : "provingground.interface.MantleService.baseRoute", "link" : "provingground\/interface\/MantleService.html#baseRoute:akka.http.scaladsl.server.Route", "kind" : "val"}, {"label" : "keepAlive", "tail" : ": Boolean", "member" : "provingground.interface.MantleService.keepAlive", "link" : "provingground\/interface\/MantleService.html#keepAlive:Boolean", "kind" : "var"}, {"member" : "provingground.interface.MantleService#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/interface\/MantleService.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/interface\/MantleService.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/interface\/MantleService.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/interface\/MantleService.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/interface\/MantleService.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/interface\/MantleService.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/interface\/MantleService.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/MantleService.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/MantleService.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/MantleService.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/interface\/MantleService.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/interface\/MantleService.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/interface\/MantleService.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/interface\/MantleService.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/interface\/MantleService.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/interface\/MantleService.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/interface\/MantleService.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/interface\/MantleService.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/interface\/MantleService.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "trySite", "tail" : "()(ec: ExecutionContext): String", "member" : "provingground.interface.MantleService.trySite", "link" : "provingground\/interface\/MantleService$.html#trySite()(implicitec:scala.concurrent.ExecutionContext):String", "kind" : "def"}, {"label" : "leanlibHTML", "tail" : ": String", "member" : "provingground.interface.MantleService.leanlibHTML", "link" : "provingground\/interface\/MantleService$.html#leanlibHTML:String", "kind" : "val"}, {"label" : "proverHTML", "tail" : ": String", "member" : "provingground.interface.MantleService.proverHTML", "link" : "provingground\/interface\/MantleService$.html#proverHTML:String", "kind" : "val"}, {"label" : "indexHTML", "tail" : ": String", "member" : "provingground.interface.MantleService.indexHTML", "link" : "provingground\/interface\/MantleService$.html#indexHTML:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/interface\/MantleService$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/interface\/MantleService$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/interface\/MantleService$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/interface\/MantleService$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/interface\/MantleService$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/interface\/MantleService$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/interface\/MantleService$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/MantleService$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/MantleService$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/MantleService$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/interface\/MantleService$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/interface\/MantleService$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/interface\/MantleService$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/interface\/MantleService$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/interface\/MantleService$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/interface\/MantleService$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/interface\/MantleService$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/interface\/MantleService$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/interface\/MantleService$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/interface\/MantleService.html", "kind" : "object"}, {"name" : "provingground.interface.MonoidServer", "shortDescription" : "", "object" : "provingground\/interface\/MonoidServer$.html", "members_object" : [{"label" : "seekResultFut", "tail" : "(): Future[Value]", "member" : "provingground.interface.MonoidServer.seekResultFut", "link" : "provingground\/interface\/MonoidServer$.html#seekResultFut:scala.concurrent.Future[ujson.Js.Value]", "kind" : "def"}, {"label" : "seekResult", "tail" : ": Task[Value]", "member" : "provingground.interface.MonoidServer.seekResult", "link" : "provingground\/interface\/MonoidServer$.html#seekResult:monix.eval.Task[ujson.Js.Value]", "kind" : "val"}, {"label" : "seek", "tail" : ": Task[Option[(Term, Vector[Term])]]", "member" : "provingground.interface.MonoidServer.seek", "link" : "provingground\/interface\/MonoidServer$.html#seek:monix.eval.Task[Option[(provingground.HoTT.Term,Vector[provingground.HoTT.Term])]]", "kind" : "val"}, {"label" : "tv", "tail" : ": TermEvolver", "member" : "provingground.interface.MonoidServer.tv", "link" : "provingground\/interface\/MonoidServer$.html#tv:provingground.learning.TermEvolver", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/interface\/MonoidServer$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/interface\/MonoidServer$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/interface\/MonoidServer$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/interface\/MonoidServer$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/interface\/MonoidServer$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/interface\/MonoidServer$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/interface\/MonoidServer$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/MonoidServer$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/MonoidServer$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/MonoidServer$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/interface\/MonoidServer$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/interface\/MonoidServer$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/interface\/MonoidServer$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/interface\/MonoidServer$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/interface\/MonoidServer$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/interface\/MonoidServer$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/interface\/MonoidServer$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/interface\/MonoidServer$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/interface\/MonoidServer$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.interface.NewParseDiffersException", "shortDescription" : "", "members_case class" : [{"member" : "provingground.interface.NewParseDiffersException#<init>", "error" : "unsupported entity"}, {"label" : "p", "tail" : ": Try[Term]", "member" : "provingground.interface.NewParseDiffersException.p", "link" : "provingground\/interface\/NewParseDiffersException.html#p:scala.util.Try[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "old", "tail" : ": Term", "member" : "provingground.interface.NewParseDiffersException.old", "link" : "provingground\/interface\/NewParseDiffersException.html#old:provingground.HoTT.Term", "kind" : "val"}, {"label" : "value", "tail" : ": Expr", "member" : "provingground.interface.NewParseDiffersException.value", "link" : "provingground\/interface\/NewParseDiffersException.html#value:trepplein.Expr", "kind" : "val"}, {"label" : "name", "tail" : ": Name", "member" : "provingground.interface.NewParseDiffersException.name", "link" : "provingground\/interface\/NewParseDiffersException.html#name:trepplein.Name", "kind" : "val"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "provingground\/interface\/NewParseDiffersException.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "provingground\/interface\/NewParseDiffersException.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "provingground\/interface\/NewParseDiffersException.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "provingground\/interface\/NewParseDiffersException.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "provingground\/interface\/NewParseDiffersException.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "provingground\/interface\/NewParseDiffersException.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "provingground\/interface\/NewParseDiffersException.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "provingground\/interface\/NewParseDiffersException.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "provingground\/interface\/NewParseDiffersException.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "provingground\/interface\/NewParseDiffersException.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "provingground\/interface\/NewParseDiffersException.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "provingground\/interface\/NewParseDiffersException.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "provingground\/interface\/NewParseDiffersException.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/interface\/NewParseDiffersException.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/interface\/NewParseDiffersException.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/interface\/NewParseDiffersException.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/interface\/NewParseDiffersException.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/interface\/NewParseDiffersException.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/interface\/NewParseDiffersException.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/interface\/NewParseDiffersException.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/NewParseDiffersException.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/NewParseDiffersException.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/NewParseDiffersException.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/interface\/NewParseDiffersException.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/interface\/NewParseDiffersException.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/interface\/NewParseDiffersException.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/interface\/NewParseDiffersException.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/interface\/NewParseDiffersException.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/interface\/NewParseDiffersException.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/interface\/NewParseDiffersException.html", "kind" : "case class"}, {"name" : "provingground.interface.NoConstantException", "shortDescription" : "", "members_case class" : [{"member" : "provingground.interface.NoConstantException#<init>", "error" : "unsupported entity"}, {"label" : "name", "tail" : ": Name", "member" : "provingground.interface.NoConstantException.name", "link" : "provingground\/interface\/NoConstantException.html#name:trepplein.Name", "kind" : "val"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "provingground\/interface\/NoConstantException.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "provingground\/interface\/NoConstantException.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "provingground\/interface\/NoConstantException.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "provingground\/interface\/NoConstantException.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "provingground\/interface\/NoConstantException.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "provingground\/interface\/NoConstantException.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "provingground\/interface\/NoConstantException.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "provingground\/interface\/NoConstantException.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "provingground\/interface\/NoConstantException.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "provingground\/interface\/NoConstantException.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "provingground\/interface\/NoConstantException.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "provingground\/interface\/NoConstantException.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "provingground\/interface\/NoConstantException.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/interface\/NoConstantException.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/interface\/NoConstantException.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/interface\/NoConstantException.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/interface\/NoConstantException.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/interface\/NoConstantException.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/interface\/NoConstantException.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/interface\/NoConstantException.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/NoConstantException.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/NoConstantException.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/NoConstantException.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/interface\/NoConstantException.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/interface\/NoConstantException.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/interface\/NoConstantException.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/interface\/NoConstantException.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/interface\/NoConstantException.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/interface\/NoConstantException.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/interface\/NoConstantException.html", "kind" : "case class"}, {"name" : "provingground.interface.NoIndexedInducE", "shortDescription" : "", "members_case class" : [{"member" : "provingground.interface.NoIndexedInducE#<init>", "error" : "unsupported entity"}, {"label" : "newParams", "tail" : ": Vector[Term]", "member" : "provingground.interface.NoIndexedInducE.newParams", "link" : "provingground\/interface\/NoIndexedInducE.html#newParams:Vector[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "family", "tail" : ": Any", "member" : "provingground.interface.NoIndexedInducE.family", "link" : "provingground\/interface\/NoIndexedInducE.html#family:Any", "kind" : "val"}, {"label" : "W", "tail" : ": Term", "member" : "provingground.interface.NoIndexedInducE.W", "link" : "provingground\/interface\/NoIndexedInducE.html#W:provingground.HoTT.Term", "kind" : "val"}, {"label" : "exp", "tail" : ": Expr", "member" : "provingground.interface.NoIndexedInducE.exp", "link" : "provingground\/interface\/NoIndexedInducE.html#exp:trepplein.Expr", "kind" : "val"}, {"label" : "fmlOpt", "tail" : ": Option[Term]", "member" : "provingground.interface.NoIndexedInducE.fmlOpt", "link" : "provingground\/interface\/NoIndexedInducE.html#fmlOpt:Option[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "mod", "tail" : ": IndexedIndMod", "member" : "provingground.interface.NoIndexedInducE.mod", "link" : "provingground\/interface\/NoIndexedInducE.html#mod:provingground.interface.IndexedIndMod", "kind" : "val"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "provingground\/interface\/NoIndexedInducE.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "provingground\/interface\/NoIndexedInducE.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "provingground\/interface\/NoIndexedInducE.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "provingground\/interface\/NoIndexedInducE.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "provingground\/interface\/NoIndexedInducE.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "provingground\/interface\/NoIndexedInducE.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "provingground\/interface\/NoIndexedInducE.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "provingground\/interface\/NoIndexedInducE.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "provingground\/interface\/NoIndexedInducE.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "provingground\/interface\/NoIndexedInducE.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "provingground\/interface\/NoIndexedInducE.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "provingground\/interface\/NoIndexedInducE.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "provingground\/interface\/NoIndexedInducE.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/interface\/NoIndexedInducE.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/interface\/NoIndexedInducE.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/interface\/NoIndexedInducE.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/interface\/NoIndexedInducE.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/interface\/NoIndexedInducE.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/interface\/NoIndexedInducE.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/interface\/NoIndexedInducE.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/NoIndexedInducE.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/NoIndexedInducE.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/NoIndexedInducE.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/interface\/NoIndexedInducE.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/interface\/NoIndexedInducE.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/interface\/NoIndexedInducE.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/interface\/NoIndexedInducE.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/interface\/NoIndexedInducE.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/interface\/NoIndexedInducE.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/interface\/NoIndexedInducE.html", "kind" : "case class"}, {"name" : "provingground.interface.ParserServer", "shortDescription" : "", "object" : "provingground\/interface\/ParserServer$.html", "members_object" : [{"label" : "parser", "tail" : ": OptionParser[Config]", "member" : "provingground.interface.ParserServer.parser", "link" : "provingground\/interface\/ParserServer$.html#parser:scopt.OptionParser[provingground.interface.ParserServer.Config]", "kind" : "val"}, {"label" : "Config", "tail" : "", "member" : "provingground.interface.ParserServer.Config", "link" : "provingground\/interface\/ParserServer$.html#ConfigextendsProductwithSerializable", "kind" : "case class"}, {"label" : "pathRead", "tail" : ": Read[Path]", "member" : "provingground.interface.ParserServer.pathRead", "link" : "provingground\/interface\/ParserServer$.html#pathRead:scopt.Read[ammonite.ops.Path]", "kind" : "implicit val"}, {"label" : "path", "tail" : "(s: String): Path", "member" : "provingground.interface.ParserServer.path", "link" : "provingground\/interface\/ParserServer$.html#path(s:String):ammonite.ops.Path", "kind" : "def"}, {"label" : "executionContext", "tail" : ": ExecutionContextExecutor", "member" : "provingground.interface.ParserServer.executionContext", "link" : "provingground\/interface\/ParserServer$.html#executionContext:scala.concurrent.ExecutionContextExecutor", "kind" : "implicit val"}, {"label" : "materializer", "tail" : ": ActorMaterializer", "member" : "provingground.interface.ParserServer.materializer", "link" : "provingground\/interface\/ParserServer$.html#materializer:akka.stream.ActorMaterializer", "kind" : "implicit val"}, {"label" : "system", "tail" : ": ActorSystem", "member" : "provingground.interface.ParserServer.system", "link" : "provingground\/interface\/ParserServer$.html#system:akka.actor.ActorSystem", "kind" : "implicit val"}, {"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "scala.App.main", "link" : "provingground\/interface\/ParserServer$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "delayedInit", "tail" : "(body: ⇒ Unit): Unit", "member" : "scala.App.delayedInit", "link" : "provingground\/interface\/ParserServer$.html#delayedInit(body:=>Unit):Unit", "kind" : "def"}, {"label" : "args", "tail" : "(): Array[String]", "member" : "scala.App.args", "link" : "provingground\/interface\/ParserServer$.html#args:Array[String]", "kind" : "def"}, {"label" : "executionStart", "tail" : ": Long", "member" : "scala.App.executionStart", "link" : "provingground\/interface\/ParserServer$.html#executionStart:Long", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/interface\/ParserServer$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/interface\/ParserServer$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/interface\/ParserServer$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/interface\/ParserServer$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/interface\/ParserServer$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/interface\/ParserServer$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/interface\/ParserServer$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/ParserServer$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/ParserServer$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/ParserServer$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/interface\/ParserServer$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/interface\/ParserServer$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/interface\/ParserServer$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/interface\/ParserServer$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/interface\/ParserServer$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/interface\/ParserServer$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/interface\/ParserServer$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/interface\/ParserServer$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/interface\/ParserServer$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.interface.ParserService", "shortDescription" : "", "members_class" : [{"label" : "mainHTML", "tail" : ": String", "member" : "provingground.interface.ParserService.mainHTML", "link" : "provingground\/interface\/ParserService.html#mainHTML:String", "kind" : "val"}, {"label" : "ammRoute", "tail" : ": Route", "member" : "provingground.interface.ParserService.ammRoute", "link" : "provingground\/interface\/ParserService.html#ammRoute:akka.http.scaladsl.server.Route", "kind" : "val"}, {"label" : "route", "tail" : ": Route", "member" : "provingground.interface.ParserService.route", "link" : "provingground\/interface\/ParserService.html#route:akka.http.scaladsl.server.Route", "kind" : "val"}, {"label" : "parserRoute", "tail" : ": Route", "member" : "provingground.interface.ParserService.parserRoute", "link" : "provingground\/interface\/ParserService.html#parserRoute:akka.http.scaladsl.server.Route", "kind" : "val"}, {"label" : "mantleService", "tail" : ": MantleService", "member" : "provingground.interface.ParserService.mantleService", "link" : "provingground\/interface\/ParserService.html#mantleService:provingground.interface.MantleService", "kind" : "val"}, {"label" : "parseResult", "tail" : "(txt: String): Obj", "member" : "provingground.interface.ParserService.parseResult", "link" : "provingground\/interface\/ParserService.html#parseResult(txt:String):upickle.Js.Obj", "kind" : "def"}, {"member" : "provingground.interface.ParserService#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/interface\/ParserService.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/interface\/ParserService.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/interface\/ParserService.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/interface\/ParserService.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/interface\/ParserService.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/interface\/ParserService.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/interface\/ParserService.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/ParserService.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/ParserService.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/ParserService.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/interface\/ParserService.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/interface\/ParserService.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/interface\/ParserService.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/interface\/ParserService.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/interface\/ParserService.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/interface\/ParserService.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/interface\/ParserService.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/interface\/ParserService.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/interface\/ParserService.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/interface\/ParserService.html", "kind" : "class"}, {"name" : "provingground.interface.QDI", "shortDescription" : "", "object" : "provingground\/interface\/QDI$.html", "members_object" : [{"label" : "head", "tail" : ": Elem", "member" : "provingground.interface.QDI.head", "link" : "provingground\/interface\/QDI$.html#head:scala.xml.Elem", "kind" : "val"}, {"label" : "css", "tail" : ": String", "member" : "provingground.interface.QDI.css", "link" : "provingground\/interface\/QDI$.html#css:String", "kind" : "val"}, {"label" : "run", "tail" : "(init: A, dyn: (A) ⇒ A, steps: Int, threads: Int): IndexedSeq[Future[A]]", "member" : "provingground.interface.QDI.run", "link" : "provingground\/interface\/QDI$.html#run[A](init:A,dyn:A=>A,steps:Int,threads:Int):scala.collection.immutable.IndexedSeq[scala.concurrent.Future[A]]", "kind" : "def"}, {"label" : "asyncIterLog", "tail" : "(init: A, dyn: (A) ⇒ A, steps: Int, logger: Logger): Future[A]", "member" : "provingground.interface.QDI.asyncIterLog", "link" : "provingground\/interface\/QDI$.html#asyncIterLog[A](init:A,dyn:A=>A,steps:Int,logger:provingground.interface.QDI.Logger):scala.concurrent.Future[A]", "kind" : "def"}, {"label" : "iterLog", "tail" : "(init: A, dyn: (A) ⇒ A, steps: Int, logger: Logger): A", "member" : "provingground.interface.QDI.iterLog", "link" : "provingground\/interface\/QDI$.html#iterLog[A](init:A,dyn:A=>A,steps:Int,logger:provingground.interface.QDI.Logger):A", "kind" : "def"}, {"label" : "fdRead", "tail" : "(): ReadString[List[String]]", "member" : "provingground.interface.QDI.fdRead", "link" : "provingground\/interface\/QDI$.html#fdRead:provingground.translation.StringParse.ReadString[List[String]]", "kind" : "implicit def"}, {"label" : "tableRead", "tail" : "(): ReadString[List[List[String]]]", "member" : "provingground.interface.QDI.tableRead", "link" : "provingground\/interface\/QDI$.html#tableRead:provingground.translation.StringParse.ReadString[List[List[String]]]", "kind" : "implicit def"}, {"label" : "fdWrite", "tail" : "(): WriteString[FiniteDistribution[A]]", "member" : "provingground.interface.QDI.fdWrite", "link" : "provingground\/interface\/QDI$.html#fdWrite[A]:provingground.translation.StringParse.WriteString[provingground.FiniteDistribution[A]]", "kind" : "implicit def"}, {"label" : "tableWrite", "tail" : "(): WriteString[List[List[A]]]", "member" : "provingground.interface.QDI.tableWrite", "link" : "provingground\/interface\/QDI$.html#tableWrite[A]:provingground.translation.StringParse.WriteString[List[List[A]]]", "kind" : "implicit def"}, {"label" : "readFile", "tail" : "(filename: String): Iterator[String]", "member" : "provingground.interface.QDI.readFile", "link" : "provingground\/interface\/QDI$.html#readFile(filename:String):Iterator[String]", "kind" : "def"}, {"label" : "FileLog", "tail" : "", "member" : "provingground.interface.QDI.FileLog", "link" : "provingground\/interface\/QDI$.html#FileLogextendsQDI.Logger", "kind" : "class"}, {"label" : "MemLog", "tail" : "", "member" : "provingground.interface.QDI.MemLog", "link" : "provingground\/interface\/QDI$.html#MemLogextendsQDI.Logger", "kind" : "class"}, {"label" : "Logger", "tail" : "", "member" : "provingground.interface.QDI.Logger", "link" : "provingground\/interface\/QDI$.html#LoggerextendsAnyRef", "kind" : "trait"}, {"label" : "tableString", "tail" : "(xy: List[List[Any]]): String", "member" : "provingground.interface.QDI.tableString", "link" : "provingground\/interface\/QDI$.html#tableString(xy:List[List[Any]]):String", "kind" : "implicit def"}, {"label" : "tableDiv", "tail" : "(xy: List[List[Any]]): Elem", "member" : "provingground.interface.QDI.tableDiv", "link" : "provingground\/interface\/QDI$.html#tableDiv(xy:List[List[Any]]):scala.xml.Elem", "kind" : "implicit def"}, {"label" : "row", "tail" : "(xs: List[String]): Elem", "member" : "provingground.interface.QDI.row", "link" : "provingground\/interface\/QDI$.html#row(xs:List[String]):scala.xml.Elem", "kind" : "def"}, {"label" : "fdListList", "tail" : "(fd: FiniteDistribution[A]): List[List[Any]]", "member" : "provingground.interface.QDI.fdListList", "link" : "provingground\/interface\/QDI$.html#fdListList[A](fd:provingground.FiniteDistribution[A]):List[List[Any]]", "kind" : "implicit def"}, {"label" : "fdString", "tail" : "(fd: FiniteDistribution[A]): String", "member" : "provingground.interface.QDI.fdString", "link" : "provingground\/interface\/QDI$.html#fdString[A](fd:provingground.FiniteDistribution[A]):String", "kind" : "implicit def"}, {"label" : "fdListDiv", "tail" : "(fds: List[FiniteDistribution[A]]): Node", "member" : "provingground.interface.QDI.fdListDiv", "link" : "provingground\/interface\/QDI$.html#fdListDiv[A](fds:List[provingground.FiniteDistribution[A]]):scala.xml.Node", "kind" : "implicit def"}, {"label" : "fdDiv", "tail" : "(fd: FiniteDistribution[A]): Node", "member" : "provingground.interface.QDI.fdDiv", "link" : "provingground\/interface\/QDI$.html#fdDiv[A](fd:provingground.FiniteDistribution[A]):scala.xml.Node", "kind" : "implicit def"}, {"label" : "listView", "tail" : "(arg0: WebView[A]): WebView[List[A]]", "member" : "provingground.interface.QDI.listView", "link" : "provingground\/interface\/QDI$.html#listView[A](implicitevidence$2:provingground.interface.QDI.WebView[A]):provingground.interface.QDI.WebView[List[A]]", "kind" : "implicit def"}, {"label" : "toXML", "tail" : "(a: A)(arg0: WebView[A]): Node", "member" : "provingground.interface.QDI.toXML", "link" : "provingground\/interface\/QDI$.html#toXML[A](a:A)(implicitevidence$1:provingground.interface.QDI.WebView[A]):scala.xml.Node", "kind" : "implicit def"}, {"label" : "WebView", "tail" : "", "member" : "provingground.interface.QDI.WebView", "link" : "provingground\/interface\/QDI$.html#WebView[A]extendsAnyRef", "kind" : "trait"}, {"label" : "p", "tail" : "(s: String): Node", "member" : "provingground.interface.QDI.p", "link" : "provingground\/interface\/QDI$.html#p(s:String):scala.xml.Node", "kind" : "def"}, {"label" : "view", "tail" : "(ps: Node*): Unit", "member" : "provingground.interface.QDI.view", "link" : "provingground\/interface\/QDI$.html#view(ps:scala.xml.Node*):Unit", "kind" : "def"}, {"label" : "viewPage", "tail" : "(body: Node, fileName: String): Unit", "member" : "provingground.interface.QDI.viewPage", "link" : "provingground\/interface\/QDI$.html#viewPage(body:scala.xml.Node,fileName:String):Unit", "kind" : "def"}, {"label" : "writeFile", "tail" : "(text: String, fileName: String, append: Boolean): Unit", "member" : "provingground.interface.QDI.writeFile", "link" : "provingground\/interface\/QDI$.html#writeFile(text:String,fileName:String,append:Boolean):Unit", "kind" : "def"}, {"label" : "datafile", "tail" : "(): String", "member" : "provingground.interface.QDI.datafile", "link" : "provingground\/interface\/QDI$.html#datafile:String", "kind" : "def"}, {"label" : "desktop", "tail" : ": Desktop", "member" : "provingground.interface.QDI.desktop", "link" : "provingground\/interface\/QDI$.html#desktop:java.awt.Desktop", "kind" : "lazy val"}, {"label" : "timed", "tail" : "(result: ⇒ A): A", "member" : "provingground.interface.QDI.timed", "link" : "provingground\/interface\/QDI$.html#timed[A](result:=>A):A", "kind" : "def"}, {"label" : "gc", "tail" : "(): Unit", "member" : "provingground.interface.QDI.gc", "link" : "provingground\/interface\/QDI$.html#gc:Unit", "kind" : "def"}, {"label" : "totalMem", "tail" : "(): Long", "member" : "provingground.interface.QDI.totalMem", "link" : "provingground\/interface\/QDI$.html#totalMem:Long", "kind" : "def"}, {"label" : "maxMem", "tail" : "(): Long", "member" : "provingground.interface.QDI.maxMem", "link" : "provingground\/interface\/QDI$.html#maxMem:Long", "kind" : "def"}, {"label" : "freeMem", "tail" : "(): Long", "member" : "provingground.interface.QDI.freeMem", "link" : "provingground\/interface\/QDI$.html#freeMem:Long", "kind" : "def"}, {"label" : "runTime", "tail" : ": Runtime", "member" : "provingground.interface.QDI.runTime", "link" : "provingground\/interface\/QDI$.html#runTime:Runtime", "kind" : "lazy val"}, {"label" : "runForFut", "tail" : "(f: (A) ⇒ A, init: A, duration: Long): Future[A]", "member" : "provingground.interface.QDI.runForFut", "link" : "provingground\/interface\/QDI$.html#runForFut[A](f:A=>A,init:A,duration:Long):scala.concurrent.Future[A]", "kind" : "def"}, {"label" : "runForFut", "tail" : "(f: (A) ⇒ A, init: A, duration: Long, save: (A, Int) ⇒ Unit): Future[A]", "member" : "provingground.interface.QDI.runForFut", "link" : "provingground\/interface\/QDI$.html#runForFut[A](f:A=>A,init:A,duration:Long,save:(A,Int)=>Unit):scala.concurrent.Future[A]", "kind" : "def"}, {"label" : "runFor", "tail" : "(f: (A) ⇒ A, init: A, duration: Long): A", "member" : "provingground.interface.QDI.runFor", "link" : "provingground\/interface\/QDI$.html#runFor[A](f:A=>A,init:A,duration:Long):A", "kind" : "def"}, {"label" : "runFor", "tail" : "(f: (A) ⇒ A, init: A, duration: Long, save: (A, Int) ⇒ Unit): A", "member" : "provingground.interface.QDI.runFor", "link" : "provingground\/interface\/QDI$.html#runFor[A](f:A=>A,init:A,duration:Long,save:(A,Int)=>Unit):A", "kind" : "def"}, {"label" : "readFD", "tail" : "(filename: String, dir: String): FiniteDistribution[String]", "member" : "provingground.interface.QDI.readFD", "link" : "provingground\/interface\/QDI$.html#readFD(filename:String,dir:String):provingground.FiniteDistribution[String]", "kind" : "def"}, {"label" : "writeFD", "tail" : "(fd: FiniteDistribution[String], filename: String, dir: String): Unit", "member" : "provingground.interface.QDI.writeFD", "link" : "provingground\/interface\/QDI$.html#writeFD(fd:provingground.FiniteDistribution[String],filename:String,dir:String):Unit", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/interface\/QDI$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/interface\/QDI$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/interface\/QDI$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/interface\/QDI$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/interface\/QDI$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/interface\/QDI$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/interface\/QDI$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/QDI$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/QDI$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/QDI$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/interface\/QDI$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/interface\/QDI$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/interface\/QDI$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/interface\/QDI$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/interface\/QDI$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/interface\/QDI$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/interface\/QDI$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/interface\/QDI$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/interface\/QDI$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.interface.RecFoldException", "shortDescription" : "", "members_case class" : [{"member" : "provingground.interface.RecFoldException#<init>", "error" : "unsupported entity"}, {"label" : "fail", "tail" : ": ApplnFailException", "member" : "provingground.interface.RecFoldException.fail", "link" : "provingground\/interface\/RecFoldException.html#fail:provingground.HoTT.ApplnFailException", "kind" : "val"}, {"label" : "vec", "tail" : ": Vector[Term]", "member" : "provingground.interface.RecFoldException.vec", "link" : "provingground\/interface\/RecFoldException.html#vec:Vector[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "argsFmlyTerm", "tail" : ": Vector[Term]", "member" : "provingground.interface.RecFoldException.argsFmlyTerm", "link" : "provingground\/interface\/RecFoldException.html#argsFmlyTerm:Vector[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "recFn", "tail" : ": Term", "member" : "provingground.interface.RecFoldException.recFn", "link" : "provingground\/interface\/RecFoldException.html#recFn:provingground.HoTT.Term", "kind" : "val"}, {"label" : "indMod", "tail" : ": TermIndMod", "member" : "provingground.interface.RecFoldException.indMod", "link" : "provingground\/interface\/RecFoldException.html#indMod:provingground.interface.TermIndMod", "kind" : "val"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "provingground\/interface\/RecFoldException.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "provingground\/interface\/RecFoldException.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "provingground\/interface\/RecFoldException.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "provingground\/interface\/RecFoldException.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "provingground\/interface\/RecFoldException.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "provingground\/interface\/RecFoldException.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "provingground\/interface\/RecFoldException.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "provingground\/interface\/RecFoldException.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "provingground\/interface\/RecFoldException.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "provingground\/interface\/RecFoldException.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "provingground\/interface\/RecFoldException.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "provingground\/interface\/RecFoldException.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "provingground\/interface\/RecFoldException.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/interface\/RecFoldException.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/interface\/RecFoldException.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/interface\/RecFoldException.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/interface\/RecFoldException.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/interface\/RecFoldException.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/interface\/RecFoldException.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/interface\/RecFoldException.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/RecFoldException.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/RecFoldException.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/RecFoldException.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/interface\/RecFoldException.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/interface\/RecFoldException.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/interface\/RecFoldException.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/interface\/RecFoldException.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/interface\/RecFoldException.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/interface\/RecFoldException.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/interface\/RecFoldException.html", "kind" : "case class"}, {"name" : "provingground.interface.RecFuncException", "shortDescription" : "", "members_case class" : [{"member" : "provingground.interface.RecFuncException#<init>", "error" : "unsupported entity"}, {"label" : "exception", "tail" : ": Throwable", "member" : "provingground.interface.RecFuncException.exception", "link" : "provingground\/interface\/RecFuncException.html#exception:Throwable", "kind" : "val"}, {"label" : "xs", "tail" : ": Vector[Try[Term]]", "member" : "provingground.interface.RecFuncException.xs", "link" : "provingground\/interface\/RecFuncException.html#xs:Vector[scala.util.Try[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "argsFmly", "tail" : ": Vector[Try[Term]]", "member" : "provingground.interface.RecFuncException.argsFmly", "link" : "provingground\/interface\/RecFuncException.html#argsFmly:Vector[scala.util.Try[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "indMod", "tail" : ": TermIndMod", "member" : "provingground.interface.RecFuncException.indMod", "link" : "provingground\/interface\/RecFuncException.html#indMod:provingground.interface.TermIndMod", "kind" : "val"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "provingground\/interface\/RecFuncException.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "provingground\/interface\/RecFuncException.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "provingground\/interface\/RecFuncException.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "provingground\/interface\/RecFuncException.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "provingground\/interface\/RecFuncException.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "provingground\/interface\/RecFuncException.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "provingground\/interface\/RecFuncException.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "provingground\/interface\/RecFuncException.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "provingground\/interface\/RecFuncException.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "provingground\/interface\/RecFuncException.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "provingground\/interface\/RecFuncException.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "provingground\/interface\/RecFuncException.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "provingground\/interface\/RecFuncException.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/interface\/RecFuncException.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/interface\/RecFuncException.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/interface\/RecFuncException.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/interface\/RecFuncException.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/interface\/RecFuncException.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/interface\/RecFuncException.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/interface\/RecFuncException.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/RecFuncException.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/RecFuncException.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/RecFuncException.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/interface\/RecFuncException.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/interface\/RecFuncException.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/interface\/RecFuncException.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/interface\/RecFuncException.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/interface\/RecFuncException.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/interface\/RecFuncException.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/interface\/RecFuncException.html", "kind" : "case class"}, {"name" : "provingground.interface.ReflPickle", "shortDescription" : "Reflection based picking for case objects which are terms.", "object" : "provingground\/interface\/ReflPickle$.html", "members_object" : [{"label" : "unpickle", "tail" : "(str: String): Term", "member" : "provingground.interface.ReflPickle.unpickle", "link" : "provingground\/interface\/ReflPickle$.html#unpickle(str:String):provingground.HoTT.Term", "kind" : "def"}, {"label" : "mirror", "tail" : ": Mirror", "member" : "provingground.interface.ReflPickle.mirror", "link" : "provingground\/interface\/ReflPickle$.html#mirror:reflect.runtime.universe.Mirror", "kind" : "lazy val"}, {"label" : "pickle", "tail" : "(t: Term): String", "member" : "provingground.interface.ReflPickle.pickle", "link" : "provingground\/interface\/ReflPickle$.html#pickle(t:provingground.HoTT.Term):String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/interface\/ReflPickle$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/interface\/ReflPickle$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/interface\/ReflPickle$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/interface\/ReflPickle$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/interface\/ReflPickle$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/interface\/ReflPickle$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/interface\/ReflPickle$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/ReflPickle$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/ReflPickle$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/ReflPickle$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/interface\/ReflPickle$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/interface\/ReflPickle$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/interface\/ReflPickle$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/interface\/ReflPickle$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/interface\/ReflPickle$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/interface\/ReflPickle$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/interface\/ReflPickle$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/interface\/ReflPickle$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/interface\/ReflPickle$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.interface.Sampler", "shortDescription" : "", "object" : "provingground\/interface\/Sampler$.html", "members_object" : [{"label" : "sample", "tail" : "(pd: ProbabilityDistribution[A], n: Int): Map[A, Int]", "member" : "provingground.interface.Sampler.sample", "link" : "provingground\/interface\/Sampler$.html#sample[A](pd:provingground.ProbabilityDistribution[A],n:Int):Map[A,Int]", "kind" : "def"}, {"label" : "binomial", "tail" : "(n: Int, p: Double): Int", "member" : "provingground.interface.Sampler.binomial", "link" : "provingground\/interface\/Sampler$.html#binomial(n:Int,p:Double):Int", "kind" : "def"}, {"label" : "reSample", "tail" : "(samp: Map[A, Int], n: Int): Map[A, Int]", "member" : "provingground.interface.Sampler.reSample", "link" : "provingground\/interface\/Sampler$.html#reSample[A](samp:Map[A,Int],n:Int):Map[A,Int]", "kind" : "def"}, {"label" : "MonixBreezeSamples", "tail" : "", "member" : "provingground.interface.Sampler.MonixBreezeSamples", "link" : "provingground\/interface\/Sampler$.html#MonixBreezeSamples", "kind" : "implicit object"}, {"label" : "grouped", "tail" : "(vec: Vector[A]): Map[A, Int]", "member" : "provingground.interface.Sampler.grouped", "link" : "provingground\/interface\/Sampler$.html#grouped[A](vec:Vector[A]):scala.collection.immutable.Map[A,Int]", "kind" : "def"}, {"label" : "linear", "tail" : "(m: Map[A, Int]): Vector[A]", "member" : "provingground.interface.Sampler.linear", "link" : "provingground\/interface\/Sampler$.html#linear[A](m:Map[A,Int]):scala.collection.immutable.Vector[A]", "kind" : "def"}, {"label" : "toFD", "tail" : "(sample: Map[A, Int]): FiniteDistribution[A]", "member" : "provingground.interface.Sampler.toFD", "link" : "provingground\/interface\/Sampler$.html#toFD[A](sample:Map[A,Int]):provingground.FiniteDistribution[A]", "kind" : "def"}, {"label" : "getMultinomial", "tail" : "(xs: Vector[A], ps: Vector[Double], size: Int): Map[A, Int]", "member" : "provingground.interface.Sampler.getMultinomial", "link" : "provingground\/interface\/Sampler$.html#getMultinomial[A](xs:Vector[A],ps:Vector[Double],size:Int):Map[A,Int]", "kind" : "def"}, {"label" : "getBucketSizes", "tail" : "(xs: Vector[A], ps: Vector[Double], sample: Vector[Double]): Map[A, Int]", "member" : "provingground.interface.Sampler.getBucketSizes", "link" : "provingground\/interface\/Sampler$.html#getBucketSizes[A](xs:Vector[A],ps:Vector[Double],sample:Vector[Double]):Map[A,Int]", "kind" : "def"}, {"label" : "fromPMF", "tail" : "(pmf: Vector[Weighted[A]], size: Int): Map[A, Int]", "member" : "provingground.interface.Sampler.fromPMF", "link" : "provingground\/interface\/Sampler$.html#fromPMF[A](pmf:Vector[provingground.Weighted[A]],size:Int):Map[A,Int]", "kind" : "def"}, {"label" : "combineAll", "tail" : "(xs: Vector[Map[A, Int]]): Map[A, Int]", "member" : "provingground.interface.Sampler.combineAll", "link" : "provingground\/interface\/Sampler$.html#combineAll[A](xs:Vector[Map[A,Int]]):scala.collection.immutable.Map[A,Int]", "kind" : "def"}, {"label" : "collapse", "tail" : "(ps: Vector[(A, Int)]): Map[A, Int]", "member" : "provingground.interface.Sampler.collapse", "link" : "provingground\/interface\/Sampler$.html#collapse[A](ps:Vector[(A,Int)]):scala.collection.immutable.Map[A,Int]", "kind" : "def"}, {"label" : "combine", "tail" : "(x: Map[A, Int], y: Map[A, Int]): Map[A, Int]", "member" : "provingground.interface.Sampler.combine", "link" : "provingground\/interface\/Sampler$.html#combine[A](x:Map[A,Int],y:Map[A,Int]):scala.collection.immutable.Map[A,Int]", "kind" : "def"}, {"label" : "total", "tail" : "(x: Vector[(A, Int)]): Int", "member" : "provingground.interface.Sampler.total", "link" : "provingground\/interface\/Sampler$.html#total[A](x:Vector[(A,Int)]):Int", "kind" : "def"}, {"label" : "rand", "tail" : ": Random", "member" : "provingground.interface.Sampler.rand", "link" : "provingground\/interface\/Sampler$.html#rand:scala.util.Random", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/interface\/Sampler$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/interface\/Sampler$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/interface\/Sampler$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/interface\/Sampler$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/interface\/Sampler$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/interface\/Sampler$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/interface\/Sampler$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/Sampler$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/Sampler$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/Sampler$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/interface\/Sampler$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/interface\/Sampler$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/interface\/Sampler$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/interface\/Sampler$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/interface\/Sampler$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/interface\/Sampler$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/interface\/Sampler$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/interface\/Sampler$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/interface\/Sampler$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.interface.ScriptServer", "shortDescription" : "", "object" : "provingground\/interface\/ScriptServer$.html", "members_object" : [{"label" : "parser", "tail" : ": OptionParser[Config]", "member" : "provingground.interface.ScriptServer.parser", "link" : "provingground\/interface\/ScriptServer$.html#parser:scopt.OptionParser[provingground.interface.ScriptServer.Config]", "kind" : "val"}, {"label" : "config", "tail" : ": Config", "member" : "provingground.interface.ScriptServer.config", "link" : "provingground\/interface\/ScriptServer$.html#config:provingground.interface.ScriptServer.Config", "kind" : "val"}, {"label" : "Config", "tail" : "", "member" : "provingground.interface.ScriptServer.Config", "link" : "provingground\/interface\/ScriptServer$.html#ConfigextendsProductwithSerializable", "kind" : "case class"}, {"label" : "pathRead", "tail" : ": Read[Path]", "member" : "provingground.interface.ScriptServer.pathRead", "link" : "provingground\/interface\/ScriptServer$.html#pathRead:scopt.Read[ammonite.ops.Path]", "kind" : "implicit val"}, {"label" : "path", "tail" : "(s: String): Path", "member" : "provingground.interface.ScriptServer.path", "link" : "provingground\/interface\/ScriptServer$.html#path(s:String):ammonite.ops.Path", "kind" : "def"}, {"label" : "executionContext", "tail" : ": ExecutionContextExecutor", "member" : "provingground.interface.ScriptServer.executionContext", "link" : "provingground\/interface\/ScriptServer$.html#executionContext:scala.concurrent.ExecutionContextExecutor", "kind" : "implicit val"}, {"label" : "materializer", "tail" : ": ActorMaterializer", "member" : "provingground.interface.ScriptServer.materializer", "link" : "provingground\/interface\/ScriptServer$.html#materializer:akka.stream.ActorMaterializer", "kind" : "implicit val"}, {"label" : "system", "tail" : ": ActorSystem", "member" : "provingground.interface.ScriptServer.system", "link" : "provingground\/interface\/ScriptServer$.html#system:akka.actor.ActorSystem", "kind" : "implicit val"}, {"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "scala.App.main", "link" : "provingground\/interface\/ScriptServer$.html#main(args:Array[String]):Unit", "kind" : "def"}, {"label" : "delayedInit", "tail" : "(body: ⇒ Unit): Unit", "member" : "scala.App.delayedInit", "link" : "provingground\/interface\/ScriptServer$.html#delayedInit(body:=>Unit):Unit", "kind" : "def"}, {"label" : "args", "tail" : "(): Array[String]", "member" : "scala.App.args", "link" : "provingground\/interface\/ScriptServer$.html#args:Array[String]", "kind" : "def"}, {"label" : "executionStart", "tail" : ": Long", "member" : "scala.App.executionStart", "link" : "provingground\/interface\/ScriptServer$.html#executionStart:Long", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/interface\/ScriptServer$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/interface\/ScriptServer$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/interface\/ScriptServer$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/interface\/ScriptServer$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/interface\/ScriptServer$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/interface\/ScriptServer$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/interface\/ScriptServer$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/ScriptServer$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/ScriptServer$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/ScriptServer$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/interface\/ScriptServer$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/interface\/ScriptServer$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/interface\/ScriptServer$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/interface\/ScriptServer$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/interface\/ScriptServer$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/interface\/ScriptServer$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/interface\/ScriptServer$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/interface\/ScriptServer$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/interface\/ScriptServer$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.interface.ServerStart", "shortDescription" : "", "members_class" : [{"label" : "stop", "tail" : "(): Unit", "member" : "provingground.interface.ServerStart.stop", "link" : "provingground\/interface\/ServerStart.html#stop():Unit", "kind" : "def"}, {"label" : "bindingFuture", "tail" : ": Future[ServerBinding]", "member" : "provingground.interface.ServerStart.bindingFuture", "link" : "provingground\/interface\/ServerStart.html#bindingFuture:scala.concurrent.Future[akka.http.scaladsl.Http.ServerBinding]", "kind" : "val"}, {"label" : "route", "tail" : ": Route", "member" : "provingground.interface.ServerStart.route", "link" : "provingground\/interface\/ServerStart.html#route:akka.http.scaladsl.server.Route", "kind" : "val"}, {"member" : "provingground.interface.ServerStart#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/interface\/ServerStart.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/interface\/ServerStart.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/interface\/ServerStart.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/interface\/ServerStart.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/interface\/ServerStart.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/interface\/ServerStart.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/interface\/ServerStart.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/ServerStart.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/ServerStart.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/ServerStart.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/interface\/ServerStart.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/interface\/ServerStart.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/interface\/ServerStart.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/interface\/ServerStart.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/interface\/ServerStart.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/interface\/ServerStart.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/interface\/ServerStart.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/interface\/ServerStart.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/interface\/ServerStart.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/interface\/ServerStart.html", "kind" : "class"}, {"name" : "provingground.interface.SimpleIndMod", "shortDescription" : "", "members_case class" : [{"label" : "getRecTry", "tail" : "(argsFmlyTerm: Try[Vector[Term]]): Try[Term]", "member" : "provingground.interface.SimpleIndMod.getRecTry", "link" : "provingground\/interface\/SimpleIndMod.html#getRecTry(argsFmlyTerm:scala.util.Try[Vector[provingground.HoTT.Term]]):scala.util.Try[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "getRecOpt", "tail" : "(argsFmlyTerm: Option[Vector[Term]]): Option[Term]", "member" : "provingground.interface.SimpleIndMod.getRecOpt", "link" : "provingground\/interface\/SimpleIndMod.html#getRecOpt(argsFmlyTerm:Option[Vector[provingground.HoTT.Term]]):Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "getInd", "tail" : "(p: Vector[Term]): ConstructorSeqTL[getInd._1.type.SS, Term, getInd._1.type.Intros] forSome {val _1: Exst}", "member" : "provingground.interface.SimpleIndMod.getInd", "link" : "provingground\/interface\/SimpleIndMod.html#getInd(p:Vector[provingground.HoTT.Term]):provingground.induction.ConstructorSeqTL[_1.SS,provingground.HoTT.Term,_1.Intros]forSome{val_1:provingground.induction.ConstructorSeqTL.Exst}", "kind" : "def"}, {"member" : "provingground.interface.SimpleIndMod#<init>", "error" : "unsupported entity"}, {"label" : "isPropn", "tail" : ": Boolean", "member" : "provingground.interface.SimpleIndMod.isPropn", "link" : "provingground\/interface\/SimpleIndMod.html#isPropn:Boolean", "kind" : "val"}, {"label" : "numParams", "tail" : ": Int", "member" : "provingground.interface.SimpleIndMod.numParams", "link" : "provingground\/interface\/SimpleIndMod.html#numParams:Int", "kind" : "val"}, {"label" : "intros", "tail" : ": Vector[Term]", "member" : "provingground.interface.SimpleIndMod.intros", "link" : "provingground\/interface\/SimpleIndMod.html#intros:Vector[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "typF", "tail" : ": Term", "member" : "provingground.interface.SimpleIndMod.typF", "link" : "provingground\/interface\/SimpleIndMod.html#typF:provingground.HoTT.Term", "kind" : "val"}, {"label" : "name", "tail" : ": Name", "member" : "provingground.interface.SimpleIndMod.name", "link" : "provingground\/interface\/SimpleIndMod.html#name:trepplein.Name", "kind" : "val"}, {"label" : "recName", "tail" : ": Str", "member" : "provingground.interface.TermIndMod.recName", "link" : "provingground\/interface\/SimpleIndMod.html#recName:trepplein.Name.Str", "kind" : "val"}, {"label" : "introsFold", "tail" : "(p: Vector[Term]): Vector[Term]", "member" : "provingground.interface.TermIndMod.introsFold", "link" : "provingground\/interface\/SimpleIndMod.html#introsFold(p:Vector[provingground.HoTT.Term]):Vector[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/interface\/SimpleIndMod.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/interface\/SimpleIndMod.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/interface\/SimpleIndMod.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/interface\/SimpleIndMod.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/interface\/SimpleIndMod.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/interface\/SimpleIndMod.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/interface\/SimpleIndMod.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/SimpleIndMod.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/SimpleIndMod.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/SimpleIndMod.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/interface\/SimpleIndMod.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/interface\/SimpleIndMod.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/interface\/SimpleIndMod.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/interface\/SimpleIndMod.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/interface\/SimpleIndMod.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/interface\/SimpleIndMod.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/interface\/SimpleIndMod.html", "kind" : "case class"}, {"name" : "provingground.interface.Site", "shortDescription" : "", "object" : "provingground\/interface\/Site$.html", "members_object" : [{"label" : "mkSite", "tail" : "(): Unit", "member" : "provingground.interface.Site.mkSite", "link" : "provingground\/interface\/Site$.html#mkSite():Unit", "kind" : "def"}, {"label" : "mkPosts", "tail" : "(): Unit", "member" : "provingground.interface.Site.mkPosts", "link" : "provingground\/interface\/Site$.html#mkPosts():Unit", "kind" : "def"}, {"label" : "mkTuts", "tail" : "(): Unit", "member" : "provingground.interface.Site.mkTuts", "link" : "provingground\/interface\/Site$.html#mkTuts():Unit", "kind" : "def"}, {"label" : "mkLists", "tail" : "(): Unit", "member" : "provingground.interface.Site.mkLists", "link" : "provingground\/interface\/Site$.html#mkLists():Unit", "kind" : "def"}, {"label" : "mkHome", "tail" : "(): Unit", "member" : "provingground.interface.Site.mkHome", "link" : "provingground\/interface\/Site$.html#mkHome():Unit", "kind" : "def"}, {"label" : "home", "tail" : "(): String", "member" : "provingground.interface.Site.home", "link" : "provingground\/interface\/Site$.html#home:String", "kind" : "def"}, {"label" : "page", "tail" : "(s: String, relDocsPath: String, t: String, haltButton: Boolean): String", "member" : "provingground.interface.Site.page", "link" : "provingground\/interface\/Site$.html#page(s:String,relDocsPath:String,t:String,haltButton:Boolean):String", "kind" : "def"}, {"label" : "postList", "tail" : "(relDocsPath: String): Seq[Elem]", "member" : "provingground.interface.Site.postList", "link" : "provingground\/interface\/Site$.html#postList(relDocsPath:String):Seq[scala.xml.Elem]", "kind" : "def"}, {"label" : "allPosts", "tail" : "(): Seq[Post]", "member" : "provingground.interface.Site.allPosts", "link" : "provingground\/interface\/Site$.html#allPosts:Seq[provingground.interface.Site.Post]", "kind" : "def"}, {"label" : "postsDir", "tail" : "(): Path", "member" : "provingground.interface.Site.postsDir", "link" : "provingground\/interface\/Site$.html#postsDir:ammonite.ops.Path", "kind" : "def"}, {"label" : "getPost", "tail" : "(p: Path): Post", "member" : "provingground.interface.Site.getPost", "link" : "provingground\/interface\/Site$.html#getPost(p:ammonite.ops.Path):provingground.interface.Site.Post", "kind" : "def"}, {"label" : "Post", "tail" : "", "member" : "provingground.interface.Site.Post", "link" : "provingground\/interface\/Site$.html#PostextendsProductwithSerializable", "kind" : "case class"}, {"label" : "dateOpt", "tail" : "(l: Vector[String]): Option[(Int, Int, Int)]", "member" : "provingground.interface.Site.dateOpt", "link" : "provingground\/interface\/Site$.html#dateOpt(l:Vector[String]):Option[(Int,Int,Int)]", "kind" : "def"}, {"label" : "tutList", "tail" : "(relDocsPath: String): Seq[Elem]", "member" : "provingground.interface.Site.tutList", "link" : "provingground\/interface\/Site$.html#tutList(relDocsPath:String):Seq[scala.xml.Elem]", "kind" : "def"}, {"label" : "allTuts", "tail" : "(): Seq[Tut]", "member" : "provingground.interface.Site.allTuts", "link" : "provingground\/interface\/Site$.html#allTuts:Seq[provingground.interface.Site.Tut]", "kind" : "def"}, {"label" : "getTut", "tail" : "(p: Path): Tut", "member" : "provingground.interface.Site.getTut", "link" : "provingground\/interface\/Site$.html#getTut(p:ammonite.ops.Path):provingground.interface.Site.Tut", "kind" : "def"}, {"label" : "Tut", "tail" : "", "member" : "provingground.interface.Site.Tut", "link" : "provingground\/interface\/Site$.html#TutextendsProductwithSerializable", "kind" : "case class"}, {"label" : "filename", "tail" : "(s: String): String", "member" : "provingground.interface.Site.filename", "link" : "provingground\/interface\/Site$.html#filename(s:String):String", "kind" : "def"}, {"label" : "titleOpt", "tail" : "(l: Vector[String]): Option[String]", "member" : "provingground.interface.Site.titleOpt", "link" : "provingground\/interface\/Site$.html#titleOpt(l:Vector[String]):Option[String]", "kind" : "def"}, {"label" : "topmatter", "tail" : "(lines: Vector[String]): Option[Vector[String]]", "member" : "provingground.interface.Site.topmatter", "link" : "provingground\/interface\/Site$.html#topmatter(lines:Vector[String]):Option[scala.collection.immutable.Vector[String]]", "kind" : "def"}, {"label" : "body", "tail" : "(l: Vector[String]): Vector[String]", "member" : "provingground.interface.Site.body", "link" : "provingground\/interface\/Site$.html#body(l:Vector[String]):scala.collection.immutable.Vector[String]", "kind" : "def"}, {"label" : "withTop", "tail" : "(l: Vector[String]): Boolean", "member" : "provingground.interface.Site.withTop", "link" : "provingground\/interface\/Site$.html#withTop(l:Vector[String]):Boolean", "kind" : "def"}, {"label" : "threeDash", "tail" : "(s: String): Boolean", "member" : "provingground.interface.Site.threeDash", "link" : "provingground\/interface\/Site$.html#threeDash(s:String):Boolean", "kind" : "def"}, {"label" : "fromMD", "tail" : "(s: String): String", "member" : "provingground.interface.Site.fromMD", "link" : "provingground\/interface\/Site$.html#fromMD(s:String):String", "kind" : "def"}, {"label" : "foot", "tail" : "(relDocsPath: String): String", "member" : "provingground.interface.Site.foot", "link" : "provingground\/interface\/Site$.html#foot(relDocsPath:String):String", "kind" : "def"}, {"label" : "nav", "tail" : "(relDocsPath: String): Elem", "member" : "provingground.interface.Site.nav", "link" : "provingground\/interface\/Site$.html#nav(relDocsPath:String):scala.xml.Elem", "kind" : "def"}, {"label" : "head", "tail" : "(relDocsPath: String, t: String): String", "member" : "provingground.interface.Site.head", "link" : "provingground\/interface\/Site$.html#head(relDocsPath:String,t:String):String", "kind" : "def"}, {"label" : "mathjax", "tail" : ": String", "member" : "provingground.interface.Site.mathjax", "link" : "provingground\/interface\/Site$.html#mathjax:String", "kind" : "val"}, {"label" : "assemble", "tail" : "(): CommandResult", "member" : "provingground.interface.Site.assemble", "link" : "provingground\/interface\/Site$.html#assemble():ammonite.ops.CommandResult", "kind" : "def"}, {"label" : "mkDocs", "tail" : "(): CommandResult", "member" : "provingground.interface.Site.mkDocs", "link" : "provingground\/interface\/Site$.html#mkDocs():ammonite.ops.CommandResult", "kind" : "def"}, {"label" : "pack", "tail" : "(): CommandResult", "member" : "provingground.interface.Site.pack", "link" : "provingground\/interface\/Site$.html#pack():ammonite.ops.CommandResult", "kind" : "def"}, {"label" : "wd", "tail" : ": Path", "member" : "provingground.interface.Site.wd", "link" : "provingground\/interface\/Site$.html#wd:ammonite.ops.Path", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/interface\/Site$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/interface\/Site$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/interface\/Site$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/interface\/Site$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/interface\/Site$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/interface\/Site$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/interface\/Site$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/Site$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/Site$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/Site$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/interface\/Site$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/interface\/Site$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/interface\/Site$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/interface\/Site$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/interface\/Site$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/interface\/Site$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/interface\/Site$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/interface\/Site$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/interface\/Site$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.interface.SvgPlot", "shortDescription" : "", "object" : "provingground\/interface\/SvgPlot$.html", "members_class" : [{"label" : "scatter", "tail" : "(points: List[Point], radius: Double): Seq[Node]", "member" : "provingground.interface.SvgPlot.scatter", "link" : "provingground\/interface\/SvgPlot.html#scatter(points:List[provingground.interface.SvgPlot.Point],radius:Double):Seq[scala.xml.Node]", "kind" : "def"}, {"label" : "draw", "tail" : "(c: Circle): Elem", "member" : "provingground.interface.SvgPlot.draw", "link" : "provingground\/interface\/SvgPlot.html#draw(c:provingground.interface.SvgPlot.Circle):scala.xml.Elem", "kind" : "def"}, {"label" : "draw", "tail" : "(l: Line): Elem", "member" : "provingground.interface.SvgPlot.draw", "link" : "provingground\/interface\/SvgPlot.html#draw(l:provingground.interface.SvgPlot.Line):scala.xml.Elem", "kind" : "def"}, {"label" : "plotAll", "tail" : "(nodes: Node*): Elem", "member" : "provingground.interface.SvgPlot.plotAll", "link" : "provingground\/interface\/SvgPlot.html#plotAll(nodes:scala.xml.Node*):scala.xml.Elem", "kind" : "def"}, {"label" : "plot", "tail" : "(nodes: Seq[Node]): Elem", "member" : "provingground.interface.SvgPlot.plot", "link" : "provingground\/interface\/SvgPlot.html#plot(nodes:Seq[scala.xml.Node]):scala.xml.Elem", "kind" : "def"}, {"label" : "axes", "tail" : ": List[Elem]", "member" : "provingground.interface.SvgPlot.axes", "link" : "provingground\/interface\/SvgPlot.html#axes:List[scala.xml.Elem]", "kind" : "val"}, {"label" : "circle", "tail" : "(x1: Double, y1: Double, r: Double, colour: String): Elem", "member" : "provingground.interface.SvgPlot.circle", "link" : "provingground\/interface\/SvgPlot.html#circle(x1:Double,y1:Double,r:Double,colour:String):scala.xml.Elem", "kind" : "def"}, {"label" : "graph", "tail" : "(points: Seq[(Double, Double)], colour: String): Seq[Elem]", "member" : "provingground.interface.SvgPlot.graph", "link" : "provingground\/interface\/SvgPlot.html#graph(points:Seq[(Double,Double)],colour:String):Seq[scala.xml.Elem]", "kind" : "def"}, {"label" : "polyline", "tail" : "(pts: (Double, Double)*): Elem", "member" : "provingground.interface.SvgPlot.polyline", "link" : "provingground\/interface\/SvgPlot.html#polyline(pts:(Double,Double)*):scala.xml.Elem", "kind" : "def"}, {"label" : "line", "tail" : "(x1: Double, y1: Double, x2: Double, y2: Double, colour: String): Elem", "member" : "provingground.interface.SvgPlot.line", "link" : "provingground\/interface\/SvgPlot.html#line(x1:Double,y1:Double,x2:Double,y2:Double,colour:String):scala.xml.Elem", "kind" : "def"}, {"label" : "yval", "tail" : "(y: Double): Int", "member" : "provingground.interface.SvgPlot.yval", "link" : "provingground\/interface\/SvgPlot.html#yval(y:Double):Int", "kind" : "def"}, {"label" : "xval", "tail" : "(x: Double): Int", "member" : "provingground.interface.SvgPlot.xval", "link" : "provingground\/interface\/SvgPlot.html#xval(x:Double):Int", "kind" : "def"}, {"label" : "ymax", "tail" : ": Double", "member" : "provingground.interface.SvgPlot.ymax", "link" : "provingground\/interface\/SvgPlot.html#ymax:Double", "kind" : "val"}, {"label" : "xmax", "tail" : ": Double", "member" : "provingground.interface.SvgPlot.xmax", "link" : "provingground\/interface\/SvgPlot.html#xmax:Double", "kind" : "val"}, {"member" : "provingground.interface.SvgPlot#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/interface\/SvgPlot.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/interface\/SvgPlot.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/interface\/SvgPlot.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/interface\/SvgPlot.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/interface\/SvgPlot.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/interface\/SvgPlot.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/interface\/SvgPlot.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/SvgPlot.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/SvgPlot.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/SvgPlot.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/interface\/SvgPlot.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/interface\/SvgPlot.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/interface\/SvgPlot.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/interface\/SvgPlot.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/interface\/SvgPlot.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/interface\/SvgPlot.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/interface\/SvgPlot.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/interface\/SvgPlot.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/interface\/SvgPlot.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "pairPoint", "tail" : "(ab: (Double, Double)): Point", "member" : "provingground.interface.SvgPlot.pairPoint", "link" : "provingground\/interface\/SvgPlot$.html#pairPoint(ab:(Double,Double)):provingground.interface.SvgPlot.Point", "kind" : "implicit def"}, {"label" : "Line", "tail" : "", "member" : "provingground.interface.SvgPlot.Line", "link" : "provingground\/interface\/SvgPlot$.html#LineextendsProductwithSerializable", "kind" : "case class"}, {"label" : "Circle", "tail" : "", "member" : "provingground.interface.SvgPlot.Circle", "link" : "provingground\/interface\/SvgPlot$.html#CircleextendsProductwithSerializable", "kind" : "case class"}, {"label" : "Point", "tail" : "", "member" : "provingground.interface.SvgPlot.Point", "link" : "provingground\/interface\/SvgPlot$.html#PointextendsProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/interface\/SvgPlot$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/interface\/SvgPlot$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/interface\/SvgPlot$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/interface\/SvgPlot$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/interface\/SvgPlot$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/interface\/SvgPlot$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/interface\/SvgPlot$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/SvgPlot$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/SvgPlot$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/SvgPlot$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/interface\/SvgPlot$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/interface\/SvgPlot$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/interface\/SvgPlot$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/interface\/SvgPlot$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/interface\/SvgPlot$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/interface\/SvgPlot$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/interface\/SvgPlot$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/interface\/SvgPlot$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/interface\/SvgPlot$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/interface\/SvgPlot.html", "kind" : "class"}, {"name" : "provingground.interface.TermIndMod", "members_trait" : [{"label" : "recName", "tail" : ": Str", "member" : "provingground.interface.TermIndMod.recName", "link" : "provingground\/interface\/TermIndMod.html#recName:trepplein.Name.Str", "kind" : "val"}, {"label" : "introsFold", "tail" : "(p: Vector[Term]): Vector[Term]", "member" : "provingground.interface.TermIndMod.introsFold", "link" : "provingground\/interface\/TermIndMod.html#introsFold(p:Vector[provingground.HoTT.Term]):Vector[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/interface\/TermIndMod.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/interface\/TermIndMod.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/interface\/TermIndMod.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/interface\/TermIndMod.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/interface\/TermIndMod.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/interface\/TermIndMod.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/interface\/TermIndMod.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/TermIndMod.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/TermIndMod.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/TermIndMod.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/interface\/TermIndMod.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/interface\/TermIndMod.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/interface\/TermIndMod.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/interface\/TermIndMod.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/interface\/TermIndMod.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/interface\/TermIndMod.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/interface\/TermIndMod.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/interface\/TermIndMod.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/interface\/TermIndMod.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "getRecOpt", "tail" : "(argsFmlyTerm: Option[Vector[Term]]): Option[Term]", "member" : "provingground.interface.TermIndMod.getRecOpt", "link" : "provingground\/interface\/TermIndMod.html#getRecOpt(argsFmlyTerm:Option[Vector[provingground.HoTT.Term]]):Option[provingground.HoTT.Term]", "kind" : "abstract def"}, {"label" : "getRecTry", "tail" : "(argsFmlyTerm: Try[Vector[Term]]): Try[Term]", "member" : "provingground.interface.TermIndMod.getRecTry", "link" : "provingground\/interface\/TermIndMod.html#getRecTry(argsFmlyTerm:scala.util.Try[Vector[provingground.HoTT.Term]]):scala.util.Try[provingground.HoTT.Term]", "kind" : "abstract def"}, {"label" : "typF", "tail" : ": Term", "member" : "provingground.interface.TermIndMod.typF", "link" : "provingground\/interface\/TermIndMod.html#typF:provingground.HoTT.Term", "kind" : "abstract val"}, {"label" : "isPropn", "tail" : ": Boolean", "member" : "provingground.interface.TermIndMod.isPropn", "link" : "provingground\/interface\/TermIndMod.html#isPropn:Boolean", "kind" : "abstract val"}, {"label" : "numParams", "tail" : ": Int", "member" : "provingground.interface.TermIndMod.numParams", "link" : "provingground\/interface\/TermIndMod.html#numParams:Int", "kind" : "abstract val"}, {"label" : "intros", "tail" : ": Vector[Term]", "member" : "provingground.interface.TermIndMod.intros", "link" : "provingground\/interface\/TermIndMod.html#intros:Vector[provingground.HoTT.Term]", "kind" : "abstract val"}, {"label" : "name", "tail" : ": Name", "member" : "provingground.interface.TermIndMod.name", "link" : "provingground\/interface\/TermIndMod.html#name:trepplein.Name", "kind" : "abstract val"}], "shortDescription" : "", "trait" : "provingground\/interface\/TermIndMod.html", "kind" : "trait"}, {"name" : "provingground.interface.TermJson", "shortDescription" : "", "object" : "provingground\/interface\/TermJson$.html", "members_object" : [{"label" : "jsonToTermBase", "tail" : ": OrElse[Value, Term]", "member" : "provingground.interface.TermJson.jsonToTermBase", "link" : "provingground\/interface\/TermJson$.html#jsonToTermBase:provingground.translation.Translator.OrElse[upickle.Js.Value,provingground.HoTT.Term]", "kind" : "val"}, {"label" : "jsonToTerm", "tail" : "(inds: (Typ[Term]) ⇒ Option[ConstructorSeqTL[_, Term, _]], indexedInds: (Term) ⇒ Option[IndexedConstructorSeqDom[_, Term, _, _, _]]): OrElse[Value, Term]", "member" : "provingground.interface.TermJson.jsonToTerm", "link" : "provingground\/interface\/TermJson$.html#jsonToTerm(inds:provingground.HoTT.Typ[provingground.HoTT.Term]=>Option[provingground.induction.ConstructorSeqTL[_,provingground.HoTT.Term,_]],indexedInds:provingground.HoTT.Term=>Option[provingground.induction.IndexedConstructorSeqDom[_,provingground.HoTT.Term,_,_,_]]):provingground.translation.Translator.OrElse[upickle.Js.Value,provingground.HoTT.Term]", "kind" : "def"}, {"label" : "termToJson", "tail" : ": OrElse[Term, Value]", "member" : "provingground.interface.TermJson.termToJson", "link" : "provingground\/interface\/TermJson$.html#termToJson:provingground.translation.Translator.OrElse[provingground.HoTT.Term,upickle.Js.Value]", "kind" : "val"}, {"label" : "travNamed", "tail" : ": Traverse[Named]", "member" : "provingground.interface.TermJson.travNamed", "link" : "provingground\/interface\/TermJson$.html#travNamed:cats.Traverse[provingground.translation.Functors.Named]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/interface\/TermJson$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/interface\/TermJson$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/interface\/TermJson$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/interface\/TermJson$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/interface\/TermJson$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/interface\/TermJson$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/interface\/TermJson$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/TermJson$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/TermJson$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/TermJson$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/interface\/TermJson$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/interface\/TermJson$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/interface\/TermJson$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/interface\/TermJson$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/interface\/TermJson$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/interface\/TermJson$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/interface\/TermJson$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/interface\/TermJson$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/interface\/TermJson$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.interface.TermObj", "shortDescription" : "", "object" : "provingground\/interface\/TermObj$.html", "members_object" : [{"label" : "objCase", "tail" : ": PartialFunction[String, Term]", "member" : "provingground.interface.TermObj.objCase", "link" : "provingground\/interface\/TermObj$.html#objCase:PartialFunction[String,provingground.HoTT.Term]", "kind" : "val"}, {"label" : "unapply", "tail" : "(str: String): Option[Term]", "member" : "provingground.interface.TermObj.unapply", "link" : "provingground\/interface\/TermObj$.html#unapply(str:String):Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "apply", "tail" : "(t: Term): String", "member" : "provingground.interface.TermObj.apply", "link" : "provingground\/interface\/TermObj$.html#apply(t:provingground.HoTT.Term):String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/interface\/TermObj$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/interface\/TermObj$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/interface\/TermObj$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/interface\/TermObj$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/interface\/TermObj$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/interface\/TermObj$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/interface\/TermObj$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/TermObj$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/TermObj$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/TermObj$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/interface\/TermObj$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/interface\/TermObj$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/interface\/TermObj$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/interface\/TermObj$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/interface\/TermObj$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/interface\/TermObj$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/interface\/TermObj$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/interface\/TermObj$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/interface\/TermObj$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.interface.TermSampler", "shortDescription" : "", "object" : "provingground\/interface\/TermSampler$.html", "members_class" : [{"label" : "NextSample", "tail" : "", "member" : "provingground.interface.TermSampler.NextSample", "link" : "provingground\/interface\/TermSampler.html#NextSampleextendsProductwithSerializable", "kind" : "case class"}, {"label" : "loggedBuffer", "tail" : "(init: FiniteDistribution[Term], sampleSize: Int, derSampleSize: Int, epsilon: Double, sc: Double, inertia: Double): ArrayBuffer[NextSample]", "member" : "provingground.interface.TermSampler.loggedBuffer", "link" : "provingground\/interface\/TermSampler.html#loggedBuffer(init:provingground.FiniteDistribution[provingground.HoTT.Term],sampleSize:Int,derSampleSize:Int,epsilon:Double,sc:Double,inertia:Double):scala.collection.mutable.ArrayBuffer[TermSampler.this.NextSample]", "kind" : "def"}, {"label" : "stop", "tail" : "(): Unit", "member" : "provingground.interface.TermSampler.stop", "link" : "provingground\/interface\/TermSampler.html#stop():Unit", "kind" : "def"}, {"label" : "live", "tail" : ": Boolean", "member" : "provingground.interface.TermSampler.live", "link" : "provingground\/interface\/TermSampler.html#live:Boolean", "kind" : "var"}, {"label" : "loggedIterator", "tail" : "(init: FiniteDistribution[Term], sampleSize: Int, derSampleSize: Int, epsilon: Double, sc: Double, inertia: Double): Iterator[NextSample]", "member" : "provingground.interface.TermSampler.loggedIterator", "link" : "provingground\/interface\/TermSampler.html#loggedIterator(init:provingground.FiniteDistribution[provingground.HoTT.Term],sampleSize:Int,derSampleSize:Int,epsilon:Double,sc:Double,inertia:Double):Iterator[TermSampler.this.NextSample]", "kind" : "def"}, {"label" : "iterator", "tail" : "(init: FiniteDistribution[Term], sampleSize: Int, derSampleSize: Int, epsilon: Double, sc: Double, inertia: Double): Iterator[FiniteDistribution[Term]]", "member" : "provingground.interface.TermSampler.iterator", "link" : "provingground\/interface\/TermSampler.html#iterator(init:provingground.FiniteDistribution[provingground.HoTT.Term],sampleSize:Int,derSampleSize:Int,epsilon:Double,sc:Double,inertia:Double):Iterator[provingground.FiniteDistribution[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "flow", "tail" : "(sampleSize: Int, derSampleSize: Int, epsilon: Double, sc: Double, inertia: Double): (FiniteDistribution[Term]) ⇒ FiniteDistribution[Term]", "member" : "provingground.interface.TermSampler.flow", "link" : "provingground\/interface\/TermSampler.html#flow(sampleSize:Int,derSampleSize:Int,epsilon:Double,sc:Double,inertia:Double):provingground.FiniteDistribution[provingground.HoTT.Term]=>provingground.FiniteDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"member" : "provingground.interface.TermSampler#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/interface\/TermSampler.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/interface\/TermSampler.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/interface\/TermSampler.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/interface\/TermSampler.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/interface\/TermSampler.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/interface\/TermSampler.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/interface\/TermSampler.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/TermSampler.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/TermSampler.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/TermSampler.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/interface\/TermSampler.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/interface\/TermSampler.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/interface\/TermSampler.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/interface\/TermSampler.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/interface\/TermSampler.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/interface\/TermSampler.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/interface\/TermSampler.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/interface\/TermSampler.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/interface\/TermSampler.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "thmEntropies", "tail" : "(sample: Map[Term, Int], d: BasicDeducer): ThmEntropies", "member" : "provingground.interface.TermSampler.thmEntropies", "link" : "provingground\/interface\/TermSampler$.html#thmEntropies(sample:Map[provingground.HoTT.Term,Int],d:provingground.learning.BasicDeducer):provingground.learning.ThmEntropies", "kind" : "def"}, {"label" : "thmEntropies", "tail" : "(sample: Map[Term, Int]): ThmEntropies", "member" : "provingground.interface.TermSampler.thmEntropies", "link" : "provingground\/interface\/TermSampler$.html#thmEntropies(sample:Map[provingground.HoTT.Term,Int]):provingground.learning.ThmEntropies", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/interface\/TermSampler$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/interface\/TermSampler$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/interface\/TermSampler$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/interface\/TermSampler$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/interface\/TermSampler$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/interface\/TermSampler$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/interface\/TermSampler$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/TermSampler$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/TermSampler$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/TermSampler$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/interface\/TermSampler$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/interface\/TermSampler$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/interface\/TermSampler$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/interface\/TermSampler$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/interface\/TermSampler$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/interface\/TermSampler$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/interface\/TermSampler$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/interface\/TermSampler$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/interface\/TermSampler$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/interface\/TermSampler.html", "kind" : "object"}, {"name" : "provingground.interface.Tuts", "shortDescription" : "", "object" : "provingground\/interface\/Tuts$.html", "members_object" : [{"label" : "outdir", "tail" : "(): Path", "member" : "provingground.interface.Tuts.outdir", "link" : "provingground\/interface\/Tuts$.html#outdir:ammonite.ops.Path", "kind" : "def"}, {"label" : "mkTut", "tail" : "(f: String): String", "member" : "provingground.interface.Tuts.mkTut", "link" : "provingground\/interface\/Tuts$.html#mkTut(f:String):String", "kind" : "def"}, {"label" : "gitBranch", "tail" : "(): String", "member" : "provingground.interface.Tuts.gitBranch", "link" : "provingground\/interface\/Tuts$.html#gitBranch:String", "kind" : "def"}, {"label" : "gitHash", "tail" : "(): String", "member" : "provingground.interface.Tuts.gitHash", "link" : "provingground\/interface\/Tuts$.html#gitHash:String", "kind" : "def"}, {"label" : "tutdir", "tail" : "(): Path", "member" : "provingground.interface.Tuts.tutdir", "link" : "provingground\/interface\/Tuts$.html#tutdir:ammonite.ops.Path", "kind" : "def"}, {"label" : "wd", "tail" : ": Path", "member" : "provingground.interface.Tuts.wd", "link" : "provingground\/interface\/Tuts$.html#wd:ammonite.ops.Path", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/interface\/Tuts$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/interface\/Tuts$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/interface\/Tuts$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/interface\/Tuts$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/interface\/Tuts$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/interface\/Tuts$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/interface\/Tuts$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/Tuts$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/Tuts$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/Tuts$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/interface\/Tuts$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/interface\/Tuts$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/interface\/Tuts$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/interface\/Tuts$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/interface\/Tuts$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/interface\/Tuts$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/interface\/Tuts$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/interface\/Tuts$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/interface\/Tuts$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.interface.UnParsedException", "shortDescription" : "", "members_case class" : [{"member" : "provingground.interface.UnParsedException#<init>", "error" : "unsupported entity"}, {"label" : "exp", "tail" : ": Expr", "member" : "provingground.interface.UnParsedException.exp", "link" : "provingground\/interface\/UnParsedException.html#exp:trepplein.Expr", "kind" : "val"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "provingground\/interface\/UnParsedException.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "provingground\/interface\/UnParsedException.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "provingground\/interface\/UnParsedException.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "provingground\/interface\/UnParsedException.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "provingground\/interface\/UnParsedException.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "provingground\/interface\/UnParsedException.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "provingground\/interface\/UnParsedException.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "provingground\/interface\/UnParsedException.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "java.lang.Throwable.toString", "link" : "provingground\/interface\/UnParsedException.html#toString():String", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "provingground\/interface\/UnParsedException.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "provingground\/interface\/UnParsedException.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "provingground\/interface\/UnParsedException.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "provingground\/interface\/UnParsedException.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/interface\/UnParsedException.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/interface\/UnParsedException.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/interface\/UnParsedException.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/interface\/UnParsedException.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/interface\/UnParsedException.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/interface\/UnParsedException.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/interface\/UnParsedException.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/UnParsedException.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/UnParsedException.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/UnParsedException.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/interface\/UnParsedException.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/interface\/UnParsedException.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/interface\/UnParsedException.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/interface\/UnParsedException.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/interface\/UnParsedException.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/interface\/UnParsedException.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/interface\/UnParsedException.html", "kind" : "case class"}, {"name" : "provingground.interface.WebServer", "shortDescription" : "", "object" : "provingground\/interface\/WebServer$.html", "members_object" : [{"label" : "stop", "tail" : "(): Unit", "member" : "provingground.interface.WebServer.stop", "link" : "provingground\/interface\/WebServer$.html#stop:Unit", "kind" : "def"}, {"label" : "bind", "tail" : "(): Unit", "member" : "provingground.interface.WebServer.bind", "link" : "provingground\/interface\/WebServer$.html#bind:Unit", "kind" : "def"}, {"label" : "bindingFuture", "tail" : ": Future[ServerBinding]", "member" : "provingground.interface.WebServer.bindingFuture", "link" : "provingground\/interface\/WebServer$.html#bindingFuture:scala.concurrent.Future[akka.http.scaladsl.Http.ServerBinding]", "kind" : "lazy val"}, {"label" : "helloRoute", "tail" : ": Route", "member" : "provingground.interface.WebServer.helloRoute", "link" : "provingground\/interface\/WebServer$.html#helloRoute:akka.http.scaladsl.server.Route", "kind" : "val"}, {"label" : "route", "tail" : ": Route", "member" : "provingground.interface.WebServer.route", "link" : "provingground\/interface\/WebServer$.html#route:akka.http.scaladsl.server.Route", "kind" : "val"}, {"label" : "mixin", "tail" : "(route: Route): Route", "member" : "provingground.interface.WebServer.mixin", "link" : "provingground\/interface\/WebServer$.html#mixin(route:akka.http.scaladsl.server.Route):akka.http.scaladsl.server.Route", "kind" : "def"}, {"label" : "addRoute", "tail" : "(route: Route): Unit", "member" : "provingground.interface.WebServer.addRoute", "link" : "provingground\/interface\/WebServer$.html#addRoute(route:akka.http.scaladsl.server.Route):Unit", "kind" : "def"}, {"label" : "otherRoutes", "tail" : ": Option[Route]", "member" : "provingground.interface.WebServer.otherRoutes", "link" : "provingground\/interface\/WebServer$.html#otherRoutes:Option[akka.http.scaladsl.server.Route]", "kind" : "var"}, {"label" : "resourceRoute", "tail" : ": (RequestContext) ⇒ Future[RouteResult]", "member" : "provingground.interface.WebServer.resourceRoute", "link" : "provingground\/interface\/WebServer$.html#resourceRoute:akka.http.scaladsl.server.RequestContext=>scala.concurrent.Future[akka.http.scaladsl.server.RouteResult]", "kind" : "val"}, {"label" : "dataRoute", "tail" : ": (RequestContext) ⇒ Future[RouteResult]", "member" : "provingground.interface.WebServer.dataRoute", "link" : "provingground\/interface\/WebServer$.html#dataRoute:akka.http.scaladsl.server.RequestContext=>scala.concurrent.Future[akka.http.scaladsl.server.RouteResult]", "kind" : "val"}, {"label" : "textRoute", "tail" : ": (RequestContext) ⇒ Future[RouteResult]", "member" : "provingground.interface.WebServer.textRoute", "link" : "provingground\/interface\/WebServer$.html#textRoute:akka.http.scaladsl.server.RequestContext=>scala.concurrent.Future[akka.http.scaladsl.server.RouteResult]", "kind" : "val"}, {"label" : "htmlRoute", "tail" : ": (RequestContext) ⇒ Future[RouteResult]", "member" : "provingground.interface.WebServer.htmlRoute", "link" : "provingground\/interface\/WebServer$.html#htmlRoute:akka.http.scaladsl.server.RequestContext=>scala.concurrent.Future[akka.http.scaladsl.server.RouteResult]", "kind" : "val"}, {"label" : "getText", "tail" : "(name: String): String", "member" : "provingground.interface.WebServer.getText", "link" : "provingground\/interface\/WebServer$.html#getText(name:String):String", "kind" : "def"}, {"label" : "showDummy", "tail" : "(): Unit", "member" : "provingground.interface.WebServer.showDummy", "link" : "provingground\/interface\/WebServer$.html#showDummy:Unit", "kind" : "def"}, {"label" : "dummy", "tail" : ": String", "member" : "provingground.interface.WebServer.dummy", "link" : "provingground\/interface\/WebServer$.html#dummy:String", "kind" : "val"}, {"label" : "fdRoute", "tail" : ": Route", "member" : "provingground.interface.WebServer.fdRoute", "link" : "provingground\/interface\/WebServer$.html#fdRoute:akka.http.scaladsl.server.Route", "kind" : "val"}, {"label" : "pingQueue", "tail" : ": Source[Unit, SourceQueueWithComplete[Unit]]", "member" : "provingground.interface.WebServer.pingQueue", "link" : "provingground\/interface\/WebServer$.html#pingQueue:akka.stream.scaladsl.Source[Unit,akka.stream.scaladsl.SourceQueueWithComplete[Unit]]", "kind" : "val"}, {"label" : "getTimeSeries", "tail" : "(): List[(String, Vector[Double])]", "member" : "provingground.interface.WebServer.getTimeSeries", "link" : "provingground\/interface\/WebServer$.html#getTimeSeries:List[(String,Vector[Double])]", "kind" : "def"}, {"label" : "display", "tail" : "(buf: BufferedRun): Unit", "member" : "provingground.interface.WebServer.display", "link" : "provingground\/interface\/WebServer$.html#display(buf:provingground.learning.Deducer#BufferedRun):Unit", "kind" : "def"}, {"label" : "displayTS", "tail" : "(fds: Vector[FiniteDistribution[Term]], names: Vector[(Term, String)]): Unit", "member" : "provingground.interface.WebServer.displayTS", "link" : "provingground\/interface\/WebServer$.html#displayTS(fds:Vector[provingground.FiniteDistribution[provingground.HoTT.Term]],names:Vector[(provingground.HoTT.Term,String)]):Unit", "kind" : "def"}, {"label" : "viewTypes", "tail" : ": Set[Typ[Term]]", "member" : "provingground.interface.WebServer.viewTypes", "link" : "provingground\/interface\/WebServer$.html#viewTypes:scala.collection.mutable.Set[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "viewTerms", "tail" : ": Set[Term]", "member" : "provingground.interface.WebServer.viewTerms", "link" : "provingground\/interface\/WebServer$.html#viewTerms:scala.collection.mutable.Set[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "showFDs", "tail" : "(fds: Vector[FiniteDistribution[U]], terms: Set[U], typs: Set[Typ[Term]], names: Vector[(Term, String)]): Unit", "member" : "provingground.interface.WebServer.showFDs", "link" : "provingground\/interface\/WebServer$.html#showFDs[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](fds:Vector[provingground.FiniteDistribution[U]],terms:Set[U],typs:Set[provingground.HoTT.Typ[provingground.HoTT.Term]],names:Vector[(provingground.HoTT.Term,String)]):Unit", "kind" : "def"}, {"label" : "showTimeSeries", "tail" : "(term: U, ts: Vector[Double], names: Vector[(Term, String)]): Unit", "member" : "provingground.interface.WebServer.showTimeSeries", "link" : "provingground\/interface\/WebServer$.html#showTimeSeries[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](term:U,ts:Vector[Double],names:Vector[(provingground.HoTT.Term,String)]):Unit", "kind" : "def"}, {"label" : "showDist", "tail" : "(fd: FiniteDistribution[U], names: Vector[(Term, String)]): Unit", "member" : "provingground.interface.WebServer.showDist", "link" : "provingground\/interface\/WebServer$.html#showDist[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](fd:provingground.FiniteDistribution[U],names:Vector[(provingground.HoTT.Term,String)]):Unit", "kind" : "def"}, {"label" : "typTimeSeries", "tail" : ": Map[String, Vector[Double]]", "member" : "provingground.interface.WebServer.typTimeSeries", "link" : "provingground\/interface\/WebServer$.html#typTimeSeries:scala.collection.mutable.Map[String,Vector[Double]]", "kind" : "val"}, {"label" : "timeSeries", "tail" : ": Map[String, Vector[Double]]", "member" : "provingground.interface.WebServer.timeSeries", "link" : "provingground\/interface\/WebServer$.html#timeSeries:scala.collection.mutable.Map[String,Vector[Double]]", "kind" : "val"}, {"label" : "fdVec", "tail" : ": Vector[(String, String, Double)]", "member" : "provingground.interface.WebServer.fdVec", "link" : "provingground\/interface\/WebServer$.html#fdVec:Vector[(String,String,Double)]", "kind" : "var"}, {"label" : "termsView", "tail" : ": String", "member" : "provingground.interface.WebServer.termsView", "link" : "provingground\/interface\/WebServer$.html#termsView:String", "kind" : "val"}, {"label" : "fdView", "tail" : ": String", "member" : "provingground.interface.WebServer.fdView", "link" : "provingground\/interface\/WebServer$.html#fdView:String", "kind" : "val"}, {"label" : "makePage", "tail" : "(divs: String): String", "member" : "provingground.interface.WebServer.makePage", "link" : "provingground\/interface\/WebServer$.html#makePage(divs:String):String", "kind" : "def"}, {"label" : "katex", "tail" : ": String", "member" : "provingground.interface.WebServer.katex", "link" : "provingground\/interface\/WebServer$.html#katex:String", "kind" : "val"}, {"label" : "getView", "tail" : "(name: String): String", "member" : "provingground.interface.WebServer.getView", "link" : "provingground\/interface\/WebServer$.html#getView(name:String):String", "kind" : "def"}, {"label" : "getData", "tail" : "(name: String): String", "member" : "provingground.interface.WebServer.getData", "link" : "provingground\/interface\/WebServer$.html#getData(name:String):String", "kind" : "def"}, {"label" : "showData", "tail" : "(name: String, dataVal: () ⇒ String): Unit", "member" : "provingground.interface.WebServer.showData", "link" : "provingground\/interface\/WebServer$.html#showData(name:String,dataVal:()=>String):Unit", "kind" : "def"}, {"label" : "showText", "tail" : "(name: String, data: String): Unit", "member" : "provingground.interface.WebServer.showText", "link" : "provingground\/interface\/WebServer$.html#showText(name:String,data:String):Unit", "kind" : "def"}, {"label" : "showView", "tail" : "(name: String, data: String): Unit", "member" : "provingground.interface.WebServer.showView", "link" : "provingground\/interface\/WebServer$.html#showView(name:String,data:String):Unit", "kind" : "def"}, {"label" : "dummyData", "tail" : "(): () ⇒ String", "member" : "provingground.interface.WebServer.dummyData", "link" : "provingground\/interface\/WebServer$.html#dummyData:()=>String", "kind" : "def"}, {"label" : "executionContext", "tail" : ": ExecutionContextExecutor", "member" : "provingground.interface.WebServer.executionContext", "link" : "provingground\/interface\/WebServer$.html#executionContext:scala.concurrent.ExecutionContextExecutor", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/interface\/WebServer$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/interface\/WebServer$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/interface\/WebServer$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/interface\/WebServer$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/interface\/WebServer$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/interface\/WebServer$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/interface\/WebServer$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/WebServer$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/WebServer$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/interface\/WebServer$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/interface\/WebServer$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/interface\/WebServer$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/interface\/WebServer$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/interface\/WebServer$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/interface\/WebServer$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/interface\/WebServer$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/interface\/WebServer$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/interface\/WebServer$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/interface\/WebServer$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "scala" : [], "scala.meta.tokenizers" : [], "provingground.examples" : [{"name" : "provingground.examples.IfThen", "shortDescription" : "", "object" : "provingground\/examples\/IfThen$.html", "members_object" : [{"label" : "matches2", "tail" : ": List[IV[Tree]]", "member" : "provingground.examples.IfThen.matches2", "link" : "provingground\/examples\/IfThen$.html#matches2:List[provingground.translation.Functors.IV[edu.stanford.nlp.trees.Tree]]", "kind" : "val"}, {"label" : "st2", "tail" : ": List[Tree]", "member" : "provingground.examples.IfThen.st2", "link" : "provingground\/examples\/IfThen$.html#st2:List[edu.stanford.nlp.trees.Tree]", "kind" : "val"}, {"label" : "tree2", "tail" : ": Tree", "member" : "provingground.examples.IfThen.tree2", "link" : "provingground\/examples\/IfThen$.html#tree2:edu.stanford.nlp.trees.Tree", "kind" : "val"}, {"label" : "sent2", "tail" : ": Sentence", "member" : "provingground.examples.IfThen.sent2", "link" : "provingground\/examples\/IfThen$.html#sent2:edu.stanford.nlp.simple.Sentence", "kind" : "val"}, {"label" : "matches", "tail" : ": List[IV[Tree]]", "member" : "provingground.examples.IfThen.matches", "link" : "provingground\/examples\/IfThen$.html#matches:List[provingground.translation.Functors.IV[edu.stanford.nlp.trees.Tree]]", "kind" : "val"}, {"label" : "st", "tail" : ": List[Tree]", "member" : "provingground.examples.IfThen.st", "link" : "provingground\/examples\/IfThen$.html#st:List[edu.stanford.nlp.trees.Tree]", "kind" : "val"}, {"label" : "tree", "tail" : ": Tree", "member" : "provingground.examples.IfThen.tree", "link" : "provingground\/examples\/IfThen$.html#tree:edu.stanford.nlp.trees.Tree", "kind" : "val"}, {"label" : "sent", "tail" : ": Sentence", "member" : "provingground.examples.IfThen.sent", "link" : "provingground\/examples\/IfThen$.html#sent:edu.stanford.nlp.simple.Sentence", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/examples\/IfThen$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/examples\/IfThen$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/examples\/IfThen$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/examples\/IfThen$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/examples\/IfThen$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/examples\/IfThen$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/examples\/IfThen$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/examples\/IfThen$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/examples\/IfThen$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/examples\/IfThen$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/examples\/IfThen$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/examples\/IfThen$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/examples\/IfThen$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/examples\/IfThen$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/examples\/IfThen$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/examples\/IfThen$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/examples\/IfThen$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/examples\/IfThen$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/examples\/IfThen$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "provingground.induction.coarse" : [{"name" : "provingground.induction.coarse.BaseConstructorTypes", "shortDescription" : "", "object" : "provingground\/induction\/coarse\/BaseConstructorTypes$.html", "members_object" : [{"label" : "NatCons", "tail" : ": List[ConstructorDefn[_ >: Func[Term, Term] <: Term, Term, Term]]", "member" : "provingground.induction.coarse.BaseConstructorTypes.NatCons", "link" : "provingground\/induction\/coarse\/BaseConstructorTypes$.html#NatCons:List[provingground.induction.coarse.ConstructorDefn[_>:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]<:provingground.HoTT.Term,provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "one", "tail" : ": Term", "member" : "provingground.induction.coarse.BaseConstructorTypes.one", "link" : "provingground\/induction\/coarse\/BaseConstructorTypes$.html#one:provingground.HoTT.Term", "kind" : "val"}, {"label" : "succ", "tail" : ": Term", "member" : "provingground.induction.coarse.BaseConstructorTypes.succ", "link" : "provingground\/induction\/coarse\/BaseConstructorTypes$.html#succ:provingground.HoTT.Term", "kind" : "val"}, {"label" : "zero", "tail" : ": Term", "member" : "provingground.induction.coarse.BaseConstructorTypes.zero", "link" : "provingground\/induction\/coarse\/BaseConstructorTypes$.html#zero:provingground.HoTT.Term", "kind" : "val"}, {"label" : "succC", "tail" : ": ConstructorDefn[Func[Term, Term], Term, Term]", "member" : "provingground.induction.coarse.BaseConstructorTypes.succC", "link" : "provingground\/induction\/coarse\/BaseConstructorTypes$.html#succC:provingground.induction.coarse.ConstructorDefn[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term],provingground.HoTT.Term,provingground.HoTT.Term]", "kind" : "val"}, {"label" : "zeroC", "tail" : ": ConstructorDefn[ConstructorPattern.IdW.ConstructorType, Term, Term]", "member" : "provingground.induction.coarse.BaseConstructorTypes.zeroC", "link" : "provingground\/induction\/coarse\/BaseConstructorTypes$.html#zeroC:provingground.induction.coarse.ConstructorDefn[provingground.induction.coarse.BaseConstructorTypes.W.ConstructorType,provingground.HoTT.Term,provingground.HoTT.Term]", "kind" : "val"}, {"label" : "BoolCons", "tail" : ": List[ConstructorDefn[Term, Term, Term]]", "member" : "provingground.induction.coarse.BaseConstructorTypes.BoolCons", "link" : "provingground\/induction\/coarse\/BaseConstructorTypes$.html#BoolCons:List[provingground.induction.coarse.ConstructorDefn[provingground.HoTT.Term,provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "ff", "tail" : ": Term", "member" : "provingground.induction.coarse.BaseConstructorTypes.ff", "link" : "provingground\/induction\/coarse\/BaseConstructorTypes$.html#ff:provingground.HoTT.Term", "kind" : "val"}, {"label" : "tt", "tail" : ": Term", "member" : "provingground.induction.coarse.BaseConstructorTypes.tt", "link" : "provingground\/induction\/coarse\/BaseConstructorTypes$.html#tt:provingground.HoTT.Term", "kind" : "val"}, {"label" : "ffC", "tail" : ": ConstructorDefn[ConstructorPattern.IdW.ConstructorType, Term, Term]", "member" : "provingground.induction.coarse.BaseConstructorTypes.ffC", "link" : "provingground\/induction\/coarse\/BaseConstructorTypes$.html#ffC:provingground.induction.coarse.ConstructorDefn[provingground.induction.coarse.BaseConstructorTypes.W.ConstructorType,provingground.HoTT.Term,provingground.HoTT.Term]", "kind" : "val"}, {"label" : "ttC", "tail" : ": ConstructorDefn[ConstructorPattern.IdW.ConstructorType, Term, Term]", "member" : "provingground.induction.coarse.BaseConstructorTypes.ttC", "link" : "provingground\/induction\/coarse\/BaseConstructorTypes$.html#ttC:provingground.induction.coarse.ConstructorDefn[provingground.induction.coarse.BaseConstructorTypes.W.ConstructorType,provingground.HoTT.Term,provingground.HoTT.Term]", "kind" : "val"}, {"label" : "W", "tail" : ": IdW[Term]", "member" : "provingground.induction.coarse.BaseConstructorTypes.W", "link" : "provingground\/induction\/coarse\/BaseConstructorTypes$.html#W:provingground.induction.coarse.ConstructorPattern.IdW[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "SmallNat", "tail" : "", "member" : "provingground.induction.coarse.BaseConstructorTypes.SmallNat", "link" : "provingground\/induction\/coarse\/BaseConstructorTypes$.html#SmallNat", "kind" : "object"}, {"label" : "SmallBool", "tail" : "", "member" : "provingground.induction.coarse.BaseConstructorTypes.SmallBool", "link" : "provingground\/induction\/coarse\/BaseConstructorTypes$.html#SmallBool", "kind" : "object"}, {"label" : "WAsPtn", "tail" : "(w: IdW[H]): IdFmlyPtn[H, Term]", "member" : "provingground.induction.coarse.BaseConstructorTypes.WAsPtn", "link" : "provingground\/induction\/coarse\/BaseConstructorTypes$.html#WAsPtn[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H]](w:provingground.induction.coarse.ConstructorPattern.IdW[H]):provingground.induction.coarse.FmlyPtn.IdFmlyPtn[H,provingground.HoTT.Term]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/coarse\/BaseConstructorTypes$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/coarse\/BaseConstructorTypes$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/coarse\/BaseConstructorTypes$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/coarse\/BaseConstructorTypes$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/coarse\/BaseConstructorTypes$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/coarse\/BaseConstructorTypes$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/coarse\/BaseConstructorTypes$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/BaseConstructorTypes$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/BaseConstructorTypes$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/BaseConstructorTypes$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/coarse\/BaseConstructorTypes$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/coarse\/BaseConstructorTypes$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/coarse\/BaseConstructorTypes$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/coarse\/BaseConstructorTypes$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/coarse\/BaseConstructorTypes$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/coarse\/BaseConstructorTypes$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/coarse\/BaseConstructorTypes$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/coarse\/BaseConstructorTypes$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/coarse\/BaseConstructorTypes$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.induction.coarse.Constructor", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/coarse\/Constructor.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/coarse\/Constructor.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/coarse\/Constructor.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/coarse\/Constructor.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/coarse\/Constructor.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/coarse\/Constructor.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/coarse\/Constructor.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/Constructor.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/Constructor.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/Constructor.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/coarse\/Constructor.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/coarse\/Constructor.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/coarse\/Constructor.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/coarse\/Constructor.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/coarse\/Constructor.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/coarse\/Constructor.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/coarse\/Constructor.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/coarse\/Constructor.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/coarse\/Constructor.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "subs", "tail" : "(x: Term, y: Term): Constructor[Cod, H]", "member" : "provingground.induction.coarse.Constructor.subs", "link" : "provingground\/induction\/coarse\/Constructor.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.induction.coarse.Constructor[Cod,H]", "kind" : "abstract def"}, {"label" : "withCod", "tail" : "(): Constructor[CC, H]", "member" : "provingground.induction.coarse.Constructor.withCod", "link" : "provingground\/induction\/coarse\/Constructor.html#withCod[CC<:provingground.HoTT.Termwithprovingground.HoTT.Subs[CC]]:provingground.induction.coarse.Constructor[CC,H]", "kind" : "abstract def"}, {"label" : "W", "tail" : ": Typ[H]", "member" : "provingground.induction.coarse.Constructor.W", "link" : "provingground\/induction\/coarse\/Constructor.html#W:provingground.HoTT.Typ[H]", "kind" : "abstract val"}, {"label" : "cons", "tail" : ": ConstructorPattern.ConstructorType", "member" : "provingground.induction.coarse.Constructor.cons", "link" : "provingground\/induction\/coarse\/Constructor.html#cons:Constructor.this.pattern.ConstructorType", "kind" : "abstract val"}, {"label" : "pattern", "tail" : ": ConstructorPattern[Cod, ConstructorType, H]", "member" : "provingground.induction.coarse.Constructor.pattern", "link" : "provingground\/induction\/coarse\/Constructor.html#pattern:provingground.induction.coarse.ConstructorPattern[Cod,Constructor.this.ConstructorType,H]", "kind" : "abstract val"}, {"member" : "provingground.induction.coarse.Constructor.ConstructorType", "error" : "unsupported entity"}], "shortDescription" : "Constructor for an inductive type, with given scala type and poly-pattern of this type.", "object" : "provingground\/induction\/coarse\/Constructor$.html", "members_object" : [{"label" : "fromFormal", "tail" : "(consType: Term, w: Typ[Term]): (Typ[Term]) ⇒ Constructor[Term, Term]", "member" : "provingground.induction.coarse.Constructor.fromFormal", "link" : "provingground\/induction\/coarse\/Constructor$.html#fromFormal(consType:provingground.HoTT.Term,w:provingground.HoTT.Typ[provingground.HoTT.Term]):provingground.HoTT.Typ[provingground.HoTT.Term]=>provingground.induction.coarse.Constructor[provingground.HoTT.Term,provingground.HoTT.Term]", "kind" : "def"}, {"label" : "fromName", "tail" : "(pattern: ConstructorPattern[C, U, H], name: String): (Typ[H]) ⇒ ConstructorDefn[U, C, H]", "member" : "provingground.induction.coarse.Constructor.fromName", "link" : "provingground\/induction\/coarse\/Constructor$.html#fromName[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H]](pattern:provingground.induction.coarse.ConstructorPattern[C,U,H],name:String):provingground.HoTT.Typ[H]=>provingground.induction.coarse.ConstructorDefn[U,C,H]", "kind" : "def"}, {"label" : "InducSym", "tail" : "", "member" : "provingground.induction.coarse.Constructor.InducSym", "link" : "provingground\/induction\/coarse\/Constructor$.html#InducSym[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H]]extendsHoTT.AnySymwithProductwithSerializable", "kind" : "case class"}, {"label" : "RecSym", "tail" : "", "member" : "provingground.induction.coarse.Constructor.RecSym", "link" : "provingground\/induction\/coarse\/Constructor$.html#RecSym[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H]]extendsHoTT.AnySymwithProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/coarse\/Constructor$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/coarse\/Constructor$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/coarse\/Constructor$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/coarse\/Constructor$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/coarse\/Constructor$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/coarse\/Constructor$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/coarse\/Constructor$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/Constructor$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/Constructor$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/Constructor$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/coarse\/Constructor$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/coarse\/Constructor$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/coarse\/Constructor$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/coarse\/Constructor$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/coarse\/Constructor$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/coarse\/Constructor$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/coarse\/Constructor$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/coarse\/Constructor$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/coarse\/Constructor$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/induction\/coarse\/Constructor.html", "kind" : "trait"}, {"name" : "provingground.induction.coarse.ConstructorDefn", "shortDescription" : "a constructor given by its parameters.", "members_case class" : [{"label" : "withCod", "tail" : "(): ConstructorDefn[U, CC, H]", "member" : "provingground.induction.coarse.ConstructorDefn.withCod", "link" : "provingground\/induction\/coarse\/ConstructorDefn.html#withCod[CC<:provingground.HoTT.Termwithprovingground.HoTT.Subs[CC]]:provingground.induction.coarse.ConstructorDefn[U,CC,H]", "kind" : "def"}, {"label" : "subs", "tail" : "(x: Term, y: Term): ConstructorDefn[U with Subs[U], C, H]", "member" : "provingground.induction.coarse.ConstructorDefn.subs", "link" : "provingground\/induction\/coarse\/ConstructorDefn.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.induction.coarse.ConstructorDefn[Uwithprovingground.HoTT.Subs[U],C,H]", "kind" : "def"}, {"label" : "ConstructorType", "tail" : "", "member" : "provingground.induction.coarse.ConstructorDefn.ConstructorType", "link" : "provingground\/induction\/coarse\/ConstructorDefn.html#ConstructorType=U", "kind" : "type"}, {"member" : "provingground.induction.coarse.ConstructorDefn#<init>", "error" : "unsupported entity"}, {"label" : "W", "tail" : ": Typ[H]", "member" : "provingground.induction.coarse.ConstructorDefn.W", "link" : "provingground\/induction\/coarse\/ConstructorDefn.html#W:provingground.HoTT.Typ[H]", "kind" : "val"}, {"label" : "cons", "tail" : ": U", "member" : "provingground.induction.coarse.ConstructorDefn.cons", "link" : "provingground\/induction\/coarse\/ConstructorDefn.html#cons:U", "kind" : "val"}, {"label" : "pattern", "tail" : ": ConstructorPattern[C, U, H]", "member" : "provingground.induction.coarse.ConstructorDefn.pattern", "link" : "provingground\/induction\/coarse\/ConstructorDefn.html#pattern:provingground.induction.coarse.ConstructorPattern[C,U,H]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/coarse\/ConstructorDefn.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/coarse\/ConstructorDefn.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/coarse\/ConstructorDefn.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/coarse\/ConstructorDefn.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/coarse\/ConstructorDefn.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/coarse\/ConstructorDefn.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/coarse\/ConstructorDefn.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/ConstructorDefn.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/ConstructorDefn.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/ConstructorDefn.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/coarse\/ConstructorDefn.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/coarse\/ConstructorDefn.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/coarse\/ConstructorDefn.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/coarse\/ConstructorDefn.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/coarse\/ConstructorDefn.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/coarse\/ConstructorDefn.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/induction\/coarse\/ConstructorDefn.html", "kind" : "case class"}, {"name" : "provingground.induction.coarse.ConstructorPattern", "members_trait" : [{"label" : "cons", "tail" : "(tp: ⇒ Typ[H]): Constructor.ConstructorType", "member" : "provingground.induction.coarse.ConstructorPattern.cons", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#cons(tp:=>provingground.HoTT.Typ[H]):provingground.induction.coarse.Constructor[Cod,H]#ConstructorType", "kind" : "def"}, {"label" : "newconstructor", "tail" : "(tp: Typ[H]): Constructor[Cod, H]", "member" : "provingground.induction.coarse.ConstructorPattern.newconstructor", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#newconstructor(tp:provingground.HoTT.Typ[H]):provingground.induction.coarse.Constructor[Cod,H]", "kind" : "def"}, {"label" : "cons", "tail" : "(tp: ⇒ Typ[H], name: AnySym): CnstrctrType", "member" : "provingground.induction.coarse.ConstructorPattern.cons", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#cons(tp:=>provingground.HoTT.Typ[H],name:provingground.HoTT.AnySym):CnstrctrType", "kind" : "def"}, {"label" : "constructor", "tail" : "(tp: ⇒ Typ[H], name: AnySym): ConstructorDefn[ConstructorType, Cod, H]", "member" : "provingground.induction.coarse.ConstructorPattern.constructor", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#constructor(tp:=>provingground.HoTT.Typ[H],name:provingground.HoTT.AnySym):provingground.induction.coarse.ConstructorDefn[ConstructorPattern.this.ConstructorType,Cod,H]", "kind" : "def"}, {"label" : "~>:", "tail" : "(tailVar: T): CnstDepFuncPtn[T, (<refinement>.this)#RecDataType, (<refinement>.this)#InducDataType, Cod, CnstrctrType, H]", "member" : "provingground.induction.coarse.ConstructorPattern.~>:", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#~>:[T<:provingground.HoTT.Termwithprovingground.HoTT.Subs[T]](tailVar:T):provingground.induction.coarse.ConstructorPattern.CnstDepFuncPtn[T,this.RecDataType,this.InducDataType,Cod,CnstrctrType,H]", "kind" : "def"}, {"label" : "->:", "tail" : "(tail: Typ[T]): CnstFncPtn[T, Cod, CnstrctrType, H]", "member" : "provingground.induction.coarse.ConstructorPattern.->:", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#->:[T<:provingground.HoTT.Termwithprovingground.HoTT.Subs[T]](tail:provingground.HoTT.Typ[T]):provingground.induction.coarse.ConstructorPattern.CnstFncPtn[T,Cod,CnstrctrType,H]", "kind" : "def"}, {"label" : "-->:", "tail" : "(that: IdW[_]): FuncPtn[Cod, H, CnstrctrType, H]", "member" : "provingground.induction.coarse.ConstructorPattern.-->:", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#-->:(that:provingground.induction.coarse.ConstructorPattern.IdW[_]):provingground.induction.coarse.ConstructorPattern.FuncPtn[Cod,H,CnstrctrType,H]", "kind" : "def"}, {"label" : "-->:", "tail" : "(that: IterFuncPtn[H, Cod, F]): FuncPtn[Cod, F, CnstrctrType, H]", "member" : "provingground.induction.coarse.ConstructorPattern.-->:", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#-->:[F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F]](that:provingground.induction.coarse.IterFuncPattern.IterFuncPtn[H,Cod,F]):provingground.induction.coarse.ConstructorPattern.FuncPtn[Cod,F,CnstrctrType,H]", "kind" : "def"}, {"label" : "ConstructorType", "tail" : "", "member" : "provingground.induction.coarse.ConstructorPattern.ConstructorType", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#ConstructorType=CnstrctrType", "kind" : "type"}, {"label" : "DomainType", "tail" : "", "member" : "provingground.induction.coarse.ConstructorPattern.DomainType", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#DomainType=H", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "univLevel", "tail" : ": Int", "member" : "provingground.induction.coarse.ConstructorPattern.univLevel", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#univLevel:Int", "kind" : "abstract val"}, {"label" : "inducDefCase", "tail" : "(cons: ConstructorType, data: InducDataType, f: ⇒ FuncLike[H, Cod]): (H) ⇒ Option[Cod]", "member" : "provingground.induction.coarse.ConstructorPattern.inducDefCase", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#inducDefCase(cons:ConstructorPattern.this.ConstructorType,data:ConstructorPattern.this.InducDataType,f:=>provingground.HoTT.FuncLike[H,Cod]):H=>Option[Cod]", "kind" : "abstract def"}, {"label" : "recDefCase", "tail" : "(cons: ConstructorType, data: RecDataType, f: ⇒ Func[H, Cod]): (H) ⇒ Option[Cod]", "member" : "provingground.induction.coarse.ConstructorPattern.recDefCase", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#recDefCase(cons:ConstructorPattern.this.ConstructorType,data:ConstructorPattern.this.RecDataType,f:=>provingground.HoTT.Func[H,Cod]):H=>Option[Cod]", "kind" : "abstract def"}, {"label" : "inducDataTyp", "tail" : "(w: Typ[H], xs: Func[H, Typ[Cod]])(cons: ConstructorType): Typ[InducDataType]", "member" : "provingground.induction.coarse.ConstructorPattern.inducDataTyp", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#inducDataTyp(w:provingground.HoTT.Typ[H],xs:provingground.HoTT.Func[H,provingground.HoTT.Typ[Cod]])(cons:ConstructorPattern.this.ConstructorType):provingground.HoTT.Typ[ConstructorPattern.this.InducDataType]", "kind" : "abstract def"}, {"label" : "recDataTyp", "tail" : "(w: Typ[H], x: Typ[Cod]): Typ[RecDataType]", "member" : "provingground.induction.coarse.ConstructorPattern.recDataTyp", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#recDataTyp(w:provingground.HoTT.Typ[H],x:provingground.HoTT.Typ[Cod]):provingground.HoTT.Typ[ConstructorPattern.this.RecDataType]", "kind" : "abstract def"}, {"member" : "provingground.induction.coarse.ConstructorPattern.InducDataType", "error" : "unsupported entity"}, {"member" : "provingground.induction.coarse.ConstructorPattern.RecDataType", "error" : "unsupported entity"}, {"label" : "apply", "tail" : "(tp: Typ[H]): Typ[ConstructorType]", "member" : "provingground.induction.coarse.ConstructorPattern.apply", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#apply(tp:provingground.HoTT.Typ[H]):provingground.HoTT.Typ[ConstructorPattern.this.ConstructorType]", "kind" : "abstract def"}, {"label" : "subs", "tail" : "(x: Term, y: Term): ConstructorPattern[Cod, CnstrctrType, H]", "member" : "provingground.induction.coarse.ConstructorPattern.subs", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.induction.coarse.ConstructorPattern[Cod,CnstrctrType,H]", "kind" : "abstract def"}, {"label" : "withCod", "tail" : "(w: Typ[H]): ConstructorPattern[CC, ConstructorType, H]", "member" : "provingground.induction.coarse.ConstructorPattern.withCod", "link" : "provingground\/induction\/coarse\/ConstructorPattern.html#withCod[CC<:provingground.HoTT.Termwithprovingground.HoTT.Subs[CC]](w:provingground.HoTT.Typ[H]):provingground.induction.coarse.ConstructorPattern[CC,ConstructorPattern.this.ConstructorType,H]", "kind" : "abstract def"}], "shortDescription" : "A composite pattern for inductive types.", "object" : "provingground\/induction\/coarse\/ConstructorPattern$.html", "members_object" : [{"label" : "DepFuncPtn", "tail" : "", "member" : "provingground.induction.coarse.ConstructorPattern.DepFuncPtn", "link" : "provingground\/induction\/coarse\/ConstructorPattern$.html#DepFuncPtn[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V],VV<:provingground.HoTT.Termwithprovingground.HoTT.Subs[VV],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H]]extendsConstructorPattern.RecursiveConstructorPattern[C,F,U,provingground.HoTT.FuncLike[F,U],H]withProductwithSerializable", "kind" : "case class"}, {"label" : "CnstDepFuncPtn", "tail" : "", "member" : "provingground.induction.coarse.ConstructorPattern.CnstDepFuncPtn", "link" : "provingground\/induction\/coarse\/ConstructorPattern$.html#CnstDepFuncPtn[T<:provingground.HoTT.Termwithprovingground.HoTT.Subs[T],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V],VV<:provingground.HoTT.Termwithprovingground.HoTT.Subs[VV],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],HC<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HC],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H]]extendsConstructorPattern.RecursiveConstructorPattern[C,T,HC,provingground.HoTT.FuncLike[T,HC],H]withProductwithSerializable", "kind" : "case class"}, {"label" : "CnstFncPtn", "tail" : "", "member" : "provingground.induction.coarse.ConstructorPattern.CnstFncPtn", "link" : "provingground\/induction\/coarse\/ConstructorPattern$.html#CnstFncPtn[T<:provingground.HoTT.Termwithprovingground.HoTT.Subs[T],Cod<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Cod],HC<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HC],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H]]extendsConstructorPattern.RecursiveConstructorPattern[Cod,T,HC,provingground.HoTT.Func[T,HC],H]withProductwithSerializable", "kind" : "case class"}, {"label" : "FuncPtn", "tail" : "", "member" : "provingground.induction.coarse.ConstructorPattern.FuncPtn", "link" : "provingground\/induction\/coarse\/ConstructorPattern$.html#FuncPtn[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],HC<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HC],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H]]extendsConstructorPattern.RecursiveConstructorPattern[C,F,HC,provingground.HoTT.Func[F,HC],H]withProductwithSerializable", "kind" : "case class"}, {"label" : "RecursiveConstructorPattern", "tail" : "", "member" : "provingground.induction.coarse.ConstructorPattern.RecursiveConstructorPattern", "link" : "provingground\/induction\/coarse\/ConstructorPattern$.html#RecursiveConstructorPattern[Cod<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Cod],ArgT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[ArgT],HeadT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HeadT],CT<:provingground.HoTT.FuncLike[ArgT,HeadT]withprovingground.HoTT.Subs[CT],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H]]extendsConstructorPattern[Cod,CT,H]", "kind" : "sealed trait"}, {"label" : "IdTarg", "tail" : "", "member" : "provingground.induction.coarse.ConstructorPattern.IdTarg", "link" : "provingground\/induction\/coarse\/ConstructorPattern$.html#IdTarg[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H]]extendsConstructorPattern[C,H,H]withProductwithSerializable", "kind" : "case class"}, {"label" : "IdW", "tail" : "", "member" : "provingground.induction.coarse.ConstructorPattern.IdW", "link" : "provingground\/induction\/coarse\/ConstructorPattern$.html#IdW[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H]]extendsConstructorPattern[provingground.HoTT.Term,H,H]withProductwithSerializable", "kind" : "case class"}, {"label" : "get", "tail" : "(constype: Cnstr, w: Typ[H]): ConstructorPattern[Term, Cnstr, H]", "member" : "provingground.induction.coarse.ConstructorPattern.get", "link" : "provingground\/induction\/coarse\/ConstructorPattern$.html#get[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],Cnstr<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Cnstr]](constype:Cnstr,w:provingground.HoTT.Typ[H]):provingground.induction.coarse.ConstructorPattern[provingground.HoTT.Term,Cnstr,H]", "kind" : "def"}, {"label" : "Head", "tail" : ": IdW[Term]", "member" : "provingground.induction.coarse.ConstructorPattern.Head", "link" : "provingground\/induction\/coarse\/ConstructorPattern$.html#Head:provingground.induction.coarse.ConstructorPattern.IdW[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/coarse\/ConstructorPattern$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/coarse\/ConstructorPattern$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/coarse\/ConstructorPattern$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/coarse\/ConstructorPattern$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/coarse\/ConstructorPattern$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/coarse\/ConstructorPattern$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/coarse\/ConstructorPattern$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/ConstructorPattern$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/ConstructorPattern$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/ConstructorPattern$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/coarse\/ConstructorPattern$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/coarse\/ConstructorPattern$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/coarse\/ConstructorPattern$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/coarse\/ConstructorPattern$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/coarse\/ConstructorPattern$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/coarse\/ConstructorPattern$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/coarse\/ConstructorPattern$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/coarse\/ConstructorPattern$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/coarse\/ConstructorPattern$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/induction\/coarse\/ConstructorPattern.html", "kind" : "trait"}, {"name" : "provingground.induction.coarse.ConstructorSeq", "members_trait" : [{"label" : "|:", "tail" : "(head: Constructor[C, H]): Cons[C, H]", "member" : "provingground.induction.coarse.ConstructorSeq.|:", "link" : "provingground\/induction\/coarse\/ConstructorSeq.html#|:(head:provingground.induction.coarse.Constructor[C,H]):provingground.induction.coarse.ConstructorSeq.Cons[C,H]", "kind" : "def"}, {"label" : "induc", "tail" : "(fibre: Func[H, Typ[C]]): InducType", "member" : "provingground.induction.coarse.ConstructorSeq.induc", "link" : "provingground\/induction\/coarse\/ConstructorSeq.html#induc(fibre:provingground.HoTT.Func[H,provingground.HoTT.Typ[C]]):ConstructorSeq.this.InducType", "kind" : "def"}, {"label" : "rec", "tail" : "(X: Typ[C]): RecType", "member" : "provingground.induction.coarse.ConstructorSeq.rec", "link" : "provingground\/induction\/coarse\/ConstructorSeq.html#rec(X:provingground.HoTT.Typ[C]):ConstructorSeq.this.RecType", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/coarse\/ConstructorSeq.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/coarse\/ConstructorSeq.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/coarse\/ConstructorSeq.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/coarse\/ConstructorSeq.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/coarse\/ConstructorSeq.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/coarse\/ConstructorSeq.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/coarse\/ConstructorSeq.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/ConstructorSeq.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/ConstructorSeq.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/ConstructorSeq.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/coarse\/ConstructorSeq.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/coarse\/ConstructorSeq.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/coarse\/ConstructorSeq.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/coarse\/ConstructorSeq.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/coarse\/ConstructorSeq.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/coarse\/ConstructorSeq.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/coarse\/ConstructorSeq.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/coarse\/ConstructorSeq.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/coarse\/ConstructorSeq.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "intros", "tail" : ": List[Term]", "member" : "provingground.induction.coarse.ConstructorSeq.intros", "link" : "provingground\/induction\/coarse\/ConstructorSeq.html#intros:List[provingground.HoTT.Term]", "kind" : "abstract val"}, {"label" : "inducDataLambda", "tail" : "(fibre: Func[H, Typ[C]]): (FuncLike[H, C]) ⇒ InducType", "member" : "provingground.induction.coarse.ConstructorSeq.inducDataLambda", "link" : "provingground\/induction\/coarse\/ConstructorSeq.html#inducDataLambda(fibre:provingground.HoTT.Func[H,provingground.HoTT.Typ[C]]):provingground.HoTT.FuncLike[H,C]=>ConstructorSeq.this.InducType", "kind" : "abstract def"}, {"member" : "provingground.induction.coarse.ConstructorSeq.InducType", "error" : "unsupported entity"}, {"label" : "inducDefn", "tail" : "(fibre: Func[H, Typ[C]]): InductiveDefinition[H, C]", "member" : "provingground.induction.coarse.ConstructorSeq.inducDefn", "link" : "provingground\/induction\/coarse\/ConstructorSeq.html#inducDefn(fibre:provingground.HoTT.Func[H,provingground.HoTT.Typ[C]]):provingground.induction.InductiveDefinition[H,C]", "kind" : "abstract def"}, {"label" : "recDataLambda", "tail" : "(X: Typ[C]): (Func[H, C]) ⇒ RecType", "member" : "provingground.induction.coarse.ConstructorSeq.recDataLambda", "link" : "provingground\/induction\/coarse\/ConstructorSeq.html#recDataLambda(X:provingground.HoTT.Typ[C]):provingground.HoTT.Func[H,C]=>ConstructorSeq.this.RecType", "kind" : "abstract def"}, {"member" : "provingground.induction.coarse.ConstructorSeq.RecType", "error" : "unsupported entity"}, {"label" : "W", "tail" : ": Typ[H]", "member" : "provingground.induction.coarse.ConstructorSeq.W", "link" : "provingground\/induction\/coarse\/ConstructorSeq.html#W:provingground.HoTT.Typ[H]", "kind" : "abstract val"}, {"label" : "recDefn", "tail" : "(X: Typ[C]): RecursiveDefinition[H, C]", "member" : "provingground.induction.coarse.ConstructorSeq.recDefn", "link" : "provingground\/induction\/coarse\/ConstructorSeq.html#recDefn(X:provingground.HoTT.Typ[C]):provingground.induction.RecursiveDefinition[H,C]", "kind" : "abstract def"}], "shortDescription" : "", "object" : "provingground\/induction\/coarse\/ConstructorSeq$.html", "members_object" : [{"label" : "inducFn", "tail" : "(cs: List[Constructor[C, H]], W: Typ[H], Xs: Func[H, Typ[C]]): InducType", "member" : "provingground.induction.coarse.ConstructorSeq.inducFn", "link" : "provingground\/induction\/coarse\/ConstructorSeq$.html#inducFn[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H]](cs:List[provingground.induction.coarse.Constructor[C,H]],W:provingground.HoTT.Typ[H],Xs:provingground.HoTT.Func[H,provingground.HoTT.Typ[C]]):provingground.induction.coarse.ConstructorSeq[C,H]#InducType", "kind" : "def"}, {"label" : "recFn", "tail" : "(cs: List[Constructor[C, H]], W: Typ[H], X: Typ[C]): RecType", "member" : "provingground.induction.coarse.ConstructorSeq.recFn", "link" : "provingground\/induction\/coarse\/ConstructorSeq$.html#recFn[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H]](cs:List[provingground.induction.coarse.Constructor[C,H]],W:provingground.HoTT.Typ[H],X:provingground.HoTT.Typ[C]):provingground.induction.coarse.ConstructorSeq[C,H]#RecType", "kind" : "def"}, {"label" : "fold", "tail" : "(W: Typ[H]): (List[Constructor[C, H]]) ⇒ ConstructorSeq[C, H]", "member" : "provingground.induction.coarse.ConstructorSeq.fold", "link" : "provingground\/induction\/coarse\/ConstructorSeq$.html#fold[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H]](W:provingground.HoTT.Typ[H]):List[provingground.induction.coarse.Constructor[C,H]]=>provingground.induction.coarse.ConstructorSeq[C,H]", "kind" : "def"}, {"label" : "Cons", "tail" : "", "member" : "provingground.induction.coarse.ConstructorSeq.Cons", "link" : "provingground\/induction\/coarse\/ConstructorSeq$.html#Cons[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H]]extendsConstructorSeq[C,H]withProductwithSerializable", "kind" : "case class"}, {"label" : "Empty", "tail" : "", "member" : "provingground.induction.coarse.ConstructorSeq.Empty", "link" : "provingground\/induction\/coarse\/ConstructorSeq$.html#Empty[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H]]extendsConstructorSeq[C,H]withProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/coarse\/ConstructorSeq$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/coarse\/ConstructorSeq$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/coarse\/ConstructorSeq$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/coarse\/ConstructorSeq$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/coarse\/ConstructorSeq$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/coarse\/ConstructorSeq$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/coarse\/ConstructorSeq$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/ConstructorSeq$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/ConstructorSeq$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/ConstructorSeq$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/coarse\/ConstructorSeq$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/coarse\/ConstructorSeq$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/coarse\/ConstructorSeq$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/coarse\/ConstructorSeq$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/coarse\/ConstructorSeq$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/coarse\/ConstructorSeq$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/coarse\/ConstructorSeq$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/coarse\/ConstructorSeq$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/coarse\/ConstructorSeq$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/induction\/coarse\/ConstructorSeq.html", "kind" : "trait"}, {"name" : "provingground.induction.coarse.ConstructorTyp", "shortDescription" : "Constructor pattern with type, for convenient building.", "object" : "provingground\/induction\/coarse\/ConstructorTyp$.html", "members_object" : [{"label" : "head", "tail" : "(typ: Typ[H]): ConstructorTyp[C, H, H]", "member" : "provingground.induction.coarse.ConstructorTyp.head", "link" : "provingground\/induction\/coarse\/ConstructorTyp$.html#head[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C]](typ:provingground.HoTT.Typ[H]):provingground.induction.coarse.ConstructorTyp[C,H,H]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/coarse\/ConstructorTyp$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/coarse\/ConstructorTyp$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/coarse\/ConstructorTyp$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/coarse\/ConstructorTyp$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/coarse\/ConstructorTyp$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/coarse\/ConstructorTyp$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/coarse\/ConstructorTyp$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/ConstructorTyp$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/ConstructorTyp$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/ConstructorTyp$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/coarse\/ConstructorTyp$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/coarse\/ConstructorTyp$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/coarse\/ConstructorTyp$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/coarse\/ConstructorTyp$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/coarse\/ConstructorTyp$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/coarse\/ConstructorTyp$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/coarse\/ConstructorTyp$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/coarse\/ConstructorTyp$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/coarse\/ConstructorTyp$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "~>>:", "tail" : "(thatVar: H): ConstructorTyp[C, FuncLike[H, F], H]", "member" : "provingground.induction.coarse.ConstructorTyp.~>>:", "link" : "provingground\/induction\/coarse\/ConstructorTyp.html#~>>:[T<:provingground.HoTT.Termwithprovingground.HoTT.Subs[T]](thatVar:H):provingground.induction.coarse.ConstructorTyp[C,provingground.HoTT.FuncLike[H,F],H]", "kind" : "def"}, {"label" : "->>:", "tail" : "(that: Typ[T]): ConstructorTyp[C, Func[T, F], H]", "member" : "provingground.induction.coarse.ConstructorTyp.->>:", "link" : "provingground\/induction\/coarse\/ConstructorTyp.html#->>:[T<:provingground.HoTT.Termwithprovingground.HoTT.Subs[T]](that:provingground.HoTT.Typ[T]):provingground.induction.coarse.ConstructorTyp[C,provingground.HoTT.Func[T,F],H]", "kind" : "def"}, {"label" : "-->>:", "tail" : "(that: IterFuncTyp[H, C, FF]): ConstructorTyp[C, Func[FF, F], H]", "member" : "provingground.induction.coarse.ConstructorTyp.-->>:", "link" : "provingground\/induction\/coarse\/ConstructorTyp.html#-->>:[FF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[FF]](that:provingground.induction.coarse.IterFuncPattern.IterFuncTyp[H,C,FF]):provingground.induction.coarse.ConstructorTyp[C,provingground.HoTT.Func[FF,F],H]", "kind" : "def"}, {"label" : "-->>:", "tail" : "(that: Typ[H]): ConstructorTyp[C, Func[H, F], H]", "member" : "provingground.induction.coarse.ConstructorTyp.-->>:", "link" : "provingground\/induction\/coarse\/ConstructorTyp.html#-->>:(that:provingground.HoTT.Typ[H]):provingground.induction.coarse.ConstructorTyp[C,provingground.HoTT.Func[H,F],H]", "kind" : "def"}, {"label" : ">::", "tail" : "(cons: F): ConstructorDefn[F, C, H]", "member" : "provingground.induction.coarse.ConstructorTyp.>::", "link" : "provingground\/induction\/coarse\/ConstructorTyp.html#>::(cons:F):provingground.induction.coarse.ConstructorDefn[F,C,H]", "kind" : "def"}, {"label" : ":::", "tail" : "(name: AnySym): Constructor[C, H]", "member" : "provingground.induction.coarse.ConstructorTyp.:::", "link" : "provingground\/induction\/coarse\/ConstructorTyp.html#:::(name:provingground.HoTT.AnySym):provingground.induction.coarse.Constructor[C,H]", "kind" : "def"}, {"member" : "provingground.induction.coarse.ConstructorTyp#<init>", "error" : "unsupported entity"}, {"label" : "typ", "tail" : ": Typ[H]", "member" : "provingground.induction.coarse.ConstructorTyp.typ", "link" : "provingground\/induction\/coarse\/ConstructorTyp.html#typ:provingground.HoTT.Typ[H]", "kind" : "val"}, {"label" : "pattern", "tail" : ": ConstructorPattern[C, F, H]", "member" : "provingground.induction.coarse.ConstructorTyp.pattern", "link" : "provingground\/induction\/coarse\/ConstructorTyp.html#pattern:provingground.induction.coarse.ConstructorPattern[C,F,H]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/coarse\/ConstructorTyp.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/coarse\/ConstructorTyp.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/coarse\/ConstructorTyp.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/coarse\/ConstructorTyp.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/coarse\/ConstructorTyp.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/coarse\/ConstructorTyp.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/coarse\/ConstructorTyp.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/ConstructorTyp.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/ConstructorTyp.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/ConstructorTyp.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/coarse\/ConstructorTyp.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/coarse\/ConstructorTyp.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/coarse\/ConstructorTyp.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/coarse\/ConstructorTyp.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/coarse\/ConstructorTyp.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/coarse\/ConstructorTyp.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/induction\/coarse\/ConstructorTyp.html", "kind" : "case class"}, {"name" : "provingground.induction.coarse.Curry", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/coarse\/Curry.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/coarse\/Curry.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/coarse\/Curry.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/coarse\/Curry.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/coarse\/Curry.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/coarse\/Curry.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/coarse\/Curry.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/Curry.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/Curry.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/Curry.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/coarse\/Curry.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/coarse\/Curry.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/coarse\/Curry.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/coarse\/Curry.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/coarse\/Curry.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/coarse\/Curry.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/coarse\/Curry.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/coarse\/Curry.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/coarse\/Curry.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "unCurry", "tail" : "(cfn: Iter): Func[Total, Cod]", "member" : "provingground.induction.coarse.Curry.unCurry", "link" : "provingground\/induction\/coarse\/Curry.html#unCurry(cfn:Iter):provingground.HoTT.Func[Total,Cod]", "kind" : "abstract def"}, {"label" : "curry", "tail" : "(fn: Func[Total, Cod]): Iter", "member" : "provingground.induction.coarse.Curry.curry", "link" : "provingground\/induction\/coarse\/Curry.html#curry(fn:provingground.HoTT.Func[Total,Cod]):Iter", "kind" : "abstract def"}], "shortDescription" : "", "object" : "provingground\/induction\/coarse\/Curry$.html", "members_object" : [{"label" : "funcCurry", "tail" : "(base: Curry[Iter, Total, Cod]): Curry[Func[Dom, Iter], PairTerm[Dom, Total], Cod]", "member" : "provingground.induction.coarse.Curry.funcCurry", "link" : "provingground\/induction\/coarse\/Curry$.html#funcCurry[Dom<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Dom],Iter<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Iter],Total<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Total],Cod<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Cod]](implicitbase:provingground.induction.coarse.Curry[Iter,Total,Cod]):provingground.induction.coarse.Curry[provingground.HoTT.Func[Dom,Iter],provingground.HoTT.PairTerm[Dom,Total],Cod]", "kind" : "implicit def"}, {"label" : "idCurry", "tail" : "(): Curry[Func[D, C], D, C]", "member" : "provingground.induction.coarse.Curry.idCurry", "link" : "provingground\/induction\/coarse\/Curry$.html#idCurry[D<:provingground.HoTT.Termwithprovingground.HoTT.Subs[D],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C]]:provingground.induction.coarse.Curry[provingground.HoTT.Func[D,C],D,C]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/coarse\/Curry$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/coarse\/Curry$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/coarse\/Curry$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/coarse\/Curry$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/coarse\/Curry$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/coarse\/Curry$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/coarse\/Curry$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/Curry$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/Curry$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/Curry$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/coarse\/Curry$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/coarse\/Curry$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/coarse\/Curry$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/coarse\/Curry$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/coarse\/Curry$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/coarse\/Curry$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/coarse\/Curry$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/coarse\/Curry$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/coarse\/Curry$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/induction\/coarse\/Curry.html", "kind" : "trait"}, {"name" : "provingground.induction.coarse.FmlyPtn", "members_trait" : [{"label" : "~>:", "tail" : "(tailVar: TT): FmlyPtn[O, C, FuncLike[TT, F]]", "member" : "provingground.induction.coarse.FmlyPtn.~>:", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#~>:[TT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TT]](tailVar:TT):provingground.induction.coarse.FmlyPtn[O,C,provingground.HoTT.FuncLike[TT,F]]", "kind" : "def"}, {"label" : "->:", "tail" : "(tail: Typ[TT]): FmlyPtn[O, C, Func[TT, F]]", "member" : "provingground.induction.coarse.FmlyPtn.->:", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#->:[TT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TT]](tail:provingground.HoTT.Typ[TT]):provingground.induction.coarse.FmlyPtn[O,C,provingground.HoTT.Func[TT,F]]", "kind" : "def"}, {"label" : "me", "tail" : ": FmlyPtn[O, C, F] { ... \/* 5 definitions in type refinement *\/ }", "member" : "provingground.induction.coarse.FmlyPtn.me", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#me:provingground.induction.coarse.FmlyPtn[O,C,F]{typeIterFunc=FmlyPtn.this.IterFunc;typeIterTypFunc=FmlyPtn.this.IterTypFunc;typeIterDepFunc=FmlyPtn.this.IterDepFunc;typeArgType=FmlyPtn.this.ArgType;typeTotal=FmlyPtn.this.Total}", "kind" : "val"}, {"label" : "FamilyType", "tail" : "", "member" : "provingground.induction.coarse.FmlyPtn.FamilyType", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#FamilyType=F", "kind" : "type"}, {"label" : "Cod", "tail" : "", "member" : "provingground.induction.coarse.FmlyPtn.Cod", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#Cod=C", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/coarse\/FmlyPtn.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "subs", "tail" : "(x: Term, y: Term): FmlyPtn[O, C, F]", "member" : "provingground.induction.coarse.FmlyPtn.subs", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.induction.coarse.FmlyPtn[O,C,F]", "kind" : "abstract def"}, {"label" : "withCod", "tail" : "(w: Typ[O]): FmlyPtn[O, CC, F]", "member" : "provingground.induction.coarse.FmlyPtn.withCod", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#withCod[CC<:provingground.HoTT.Termwithprovingground.HoTT.Subs[CC]](w:provingground.HoTT.Typ[O]):provingground.induction.coarse.FmlyPtn[O,CC,F]", "kind" : "abstract def"}, {"label" : "incl", "tail" : "(term: O, arg: ArgType, w: FamilyType): Total", "member" : "provingground.induction.coarse.FmlyPtn.incl", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#incl(term:O,arg:FmlyPtn.this.ArgType,w:FmlyPtn.this.FamilyType):FmlyPtn.this.Total", "kind" : "abstract def"}, {"label" : "argOpt", "tail" : "(l: List[Term]): Option[ArgType]", "member" : "provingground.induction.coarse.FmlyPtn.argOpt", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#argOpt(l:List[provingground.HoTT.Term]):Option[FmlyPtn.this.ArgType]", "kind" : "abstract def"}, {"member" : "provingground.induction.coarse.FmlyPtn.ArgType", "error" : "unsupported entity"}, {"label" : "contractType", "tail" : "(w: FamilyType)(arg: ArgType): Typ[O]", "member" : "provingground.induction.coarse.FmlyPtn.contractType", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#contractType(w:FmlyPtn.this.FamilyType)(arg:FmlyPtn.this.ArgType):provingground.HoTT.Typ[O]", "kind" : "abstract def"}, {"label" : "depUncurry", "tail" : "(g: IterDepFunc): FuncLike[Total, Cod]", "member" : "provingground.induction.coarse.FmlyPtn.depUncurry", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#depUncurry(g:FmlyPtn.this.IterDepFunc):provingground.HoTT.FuncLike[FmlyPtn.this.Total,FmlyPtn.this.Cod]", "kind" : "abstract def"}, {"label" : "depTotalDomain", "tail" : "(g: IterDepFunc): Typ[Total]", "member" : "provingground.induction.coarse.FmlyPtn.depTotalDomain", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#depTotalDomain(g:FmlyPtn.this.IterDepFunc):provingground.HoTT.Typ[FmlyPtn.this.Total]", "kind" : "abstract def"}, {"label" : "depCurry", "tail" : "(f: FuncLike[Total, Cod]): IterDepFunc", "member" : "provingground.induction.coarse.FmlyPtn.depCurry", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#depCurry(f:provingground.HoTT.FuncLike[FmlyPtn.this.Total,FmlyPtn.this.Cod]):FmlyPtn.this.IterDepFunc", "kind" : "abstract def"}, {"label" : "uncurryTyp", "tail" : "(g: IterTypFunc): Func[Total, Typ[Cod]]", "member" : "provingground.induction.coarse.FmlyPtn.uncurryTyp", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#uncurryTyp(g:FmlyPtn.this.IterTypFunc):provingground.HoTT.Func[FmlyPtn.this.Total,provingground.HoTT.Typ[FmlyPtn.this.Cod]]", "kind" : "abstract def"}, {"label" : "uncurry", "tail" : "(g: IterFunc): Func[Total, Cod]", "member" : "provingground.induction.coarse.FmlyPtn.uncurry", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#uncurry(g:FmlyPtn.this.IterFunc):provingground.HoTT.Func[FmlyPtn.this.Total,FmlyPtn.this.Cod]", "kind" : "abstract def"}, {"label" : "totalTypDomain", "tail" : "(g: IterTypFunc): Typ[Total]", "member" : "provingground.induction.coarse.FmlyPtn.totalTypDomain", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#totalTypDomain(g:FmlyPtn.this.IterTypFunc):provingground.HoTT.Typ[FmlyPtn.this.Total]", "kind" : "abstract def"}, {"label" : "totalDomain", "tail" : "(g: IterFunc): Typ[Total]", "member" : "provingground.induction.coarse.FmlyPtn.totalDomain", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#totalDomain(g:FmlyPtn.this.IterFunc):provingground.HoTT.Typ[FmlyPtn.this.Total]", "kind" : "abstract def"}, {"label" : "curryTyp", "tail" : "(w: Func[Total, Typ[Cod]]): IterTypFunc", "member" : "provingground.induction.coarse.FmlyPtn.curryTyp", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#curryTyp(w:provingground.HoTT.Func[FmlyPtn.this.Total,provingground.HoTT.Typ[FmlyPtn.this.Cod]]):FmlyPtn.this.IterTypFunc", "kind" : "abstract def"}, {"label" : "curry", "tail" : "(f: Func[Total, Cod]): IterFunc", "member" : "provingground.induction.coarse.FmlyPtn.curry", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#curry(f:provingground.HoTT.Func[FmlyPtn.this.Total,FmlyPtn.this.Cod]):FmlyPtn.this.IterFunc", "kind" : "abstract def"}, {"label" : "depFill", "tail" : "(g: IterDepFunc)(arg: ArgType): FuncLike[O, C]", "member" : "provingground.induction.coarse.FmlyPtn.depFill", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#depFill(g:FmlyPtn.this.IterDepFunc)(arg:FmlyPtn.this.ArgType):provingground.HoTT.FuncLike[O,C]", "kind" : "abstract def"}, {"label" : "fill", "tail" : "(g: IterFunc)(arg: ArgType): Func[O, C]", "member" : "provingground.induction.coarse.FmlyPtn.fill", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#fill(g:FmlyPtn.this.IterFunc)(arg:FmlyPtn.this.ArgType):provingground.HoTT.Func[O,C]", "kind" : "abstract def"}, {"label" : "domTotal", "tail" : "(w: FamilyType): Typ[Total]", "member" : "provingground.induction.coarse.FmlyPtn.domTotal", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#domTotal(w:FmlyPtn.this.FamilyType):provingground.HoTT.Typ[FmlyPtn.this.Total]", "kind" : "abstract def"}, {"label" : "iterDepFuncTyp", "tail" : "(w: FamilyType, xs: IterTypFunc): Typ[IterDepFunc]", "member" : "provingground.induction.coarse.FmlyPtn.iterDepFuncTyp", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#iterDepFuncTyp(w:FmlyPtn.this.FamilyType,xs:FmlyPtn.this.IterTypFunc):provingground.HoTT.Typ[FmlyPtn.this.IterDepFunc]", "kind" : "abstract def"}, {"label" : "iterFuncTyp", "tail" : "(w: FamilyType, x: Typ[Cod]): Typ[IterFunc]", "member" : "provingground.induction.coarse.FmlyPtn.iterFuncTyp", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#iterFuncTyp(w:FmlyPtn.this.FamilyType,x:provingground.HoTT.Typ[FmlyPtn.this.Cod]):provingground.HoTT.Typ[FmlyPtn.this.IterFunc]", "kind" : "abstract def"}, {"member" : "provingground.induction.coarse.FmlyPtn.IterDepFunc", "error" : "unsupported entity"}, {"member" : "provingground.induction.coarse.FmlyPtn.IterTypFunc", "error" : "unsupported entity"}, {"member" : "provingground.induction.coarse.FmlyPtn.IterFunc", "error" : "unsupported entity"}, {"label" : "value", "tail" : "(x: Total): O", "member" : "provingground.induction.coarse.FmlyPtn.value", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#value(x:FmlyPtn.this.Total):O", "kind" : "abstract def"}, {"member" : "provingground.induction.coarse.FmlyPtn.Total", "error" : "unsupported entity"}, {"label" : "univLevel", "tail" : ": Int", "member" : "provingground.induction.coarse.FmlyPtn.univLevel", "link" : "provingground\/induction\/coarse\/FmlyPtn.html#univLevel:Int", "kind" : "abstract val"}], "shortDescription" : "A pattern for families, e.g.", "object" : "provingground\/induction\/coarse\/FmlyPtn$.html", "members_object" : [{"label" : "DepFuncFmlyPtn", "tail" : "", "member" : "provingground.induction.coarse.FmlyPtn.DepFuncFmlyPtn", "link" : "provingground\/induction\/coarse\/FmlyPtn$.html#DepFuncFmlyPtn[TT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TT],FV<:provingground.HoTT.Termwithprovingground.HoTT.Subs[FV],I<:provingground.HoTT.Termwithprovingground.HoTT.Subs[I],IT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IT],DI<:provingground.HoTT.Termwithprovingground.HoTT.Subs[DI],S<:provingground.HoTT.Termwithprovingground.HoTT.Subs[S],O<:provingground.HoTT.Termwithprovingground.HoTT.Subs[O],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],HTot<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HTot]]extendsFmlyPtn.RecFmlyPtn[TT,FV,provingground.HoTT.FuncLike[TT,FV],S,O,C]withProductwithSerializable", "kind" : "case class"}, {"label" : "FuncFmlyPtn", "tail" : "", "member" : "provingground.induction.coarse.FmlyPtn.FuncFmlyPtn", "link" : "provingground\/induction\/coarse\/FmlyPtn$.html#FuncFmlyPtn[TT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TT],FV<:provingground.HoTT.Termwithprovingground.HoTT.Subs[FV],I<:provingground.HoTT.Termwithprovingground.HoTT.Subs[I],IT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[IT],DI<:provingground.HoTT.Termwithprovingground.HoTT.Subs[DI],S<:provingground.HoTT.Termwithprovingground.HoTT.Subs[S],O<:provingground.HoTT.Termwithprovingground.HoTT.Subs[O],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],HTot<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HTot]]extendsFmlyPtn[O,C,provingground.HoTT.Func[TT,FV]]withProductwithSerializable", "kind" : "case class"}, {"label" : "RecFmlyPtn", "tail" : "", "member" : "provingground.induction.coarse.FmlyPtn.RecFmlyPtn", "link" : "provingground\/induction\/coarse\/FmlyPtn$.html#RecFmlyPtn[TT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TT],FV<:provingground.HoTT.Termwithprovingground.HoTT.Subs[FV],F<:provingground.HoTT.FuncLike[TT,FV]withprovingground.HoTT.Subs[F],S<:provingground.HoTT.Termwithprovingground.HoTT.Subs[S],O<:provingground.HoTT.Termwithprovingground.HoTT.Subs[O],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C]]extendsFmlyPtn[O,C,F]", "kind" : "trait"}, {"label" : "IdFmlyPtn", "tail" : "", "member" : "provingground.induction.coarse.FmlyPtn.IdFmlyPtn", "link" : "provingground\/induction\/coarse\/FmlyPtn$.html#IdFmlyPtn[O<:provingground.HoTT.Termwithprovingground.HoTT.Subs[O],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C]]extendsFmlyPtn[O,C,provingground.HoTT.Typ[O]]withProductwithSerializable", "kind" : "case class"}, {"label" : "get", "tail" : "(typ: Typ[O], fmlyTyp: Typ[F]): FmlyPtn[O, Term, F]", "member" : "provingground.induction.coarse.FmlyPtn.get", "link" : "provingground\/induction\/coarse\/FmlyPtn$.html#get[O<:provingground.HoTT.Termwithprovingground.HoTT.Subs[O],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F]](typ:provingground.HoTT.Typ[O],fmlyTyp:provingground.HoTT.Typ[F]):provingground.induction.coarse.FmlyPtn[O,provingground.HoTT.Term,F]", "kind" : "def"}, {"label" : "getOpt", "tail" : "(typ: Typ[O], fmlyTyp: Typ[F]): Option[FmlyPtn[O, Term, F]]", "member" : "provingground.induction.coarse.FmlyPtn.getOpt", "link" : "provingground\/induction\/coarse\/FmlyPtn$.html#getOpt[O<:provingground.HoTT.Termwithprovingground.HoTT.Subs[O],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F]](typ:provingground.HoTT.Typ[O],fmlyTyp:provingground.HoTT.Typ[F]):Option[provingground.induction.coarse.FmlyPtn[O,provingground.HoTT.Term,F]]", "kind" : "def"}, {"label" : "fmly", "tail" : "(ptn: FmlyPtn[Term, C, F])(name: AnySym): F", "member" : "provingground.induction.coarse.FmlyPtn.fmly", "link" : "provingground\/induction\/coarse\/FmlyPtn$.html#fmly[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F]](ptn:provingground.induction.coarse.FmlyPtn[provingground.HoTT.Term,C,F])(name:provingground.HoTT.AnySym):F", "kind" : "def"}, {"label" : "fmlyTyp", "tail" : "(ptn: FmlyPtn[Term, C, F]): Typ[F]", "member" : "provingground.induction.coarse.FmlyPtn.fmlyTyp", "link" : "provingground\/induction\/coarse\/FmlyPtn$.html#fmlyTyp[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F]](ptn:provingground.induction.coarse.FmlyPtn[provingground.HoTT.Term,C,F]):provingground.HoTT.Typ[F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/coarse\/FmlyPtn$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/coarse\/FmlyPtn$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/coarse\/FmlyPtn$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/coarse\/FmlyPtn$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/coarse\/FmlyPtn$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/coarse\/FmlyPtn$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/coarse\/FmlyPtn$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/FmlyPtn$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/FmlyPtn$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/FmlyPtn$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/coarse\/FmlyPtn$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/coarse\/FmlyPtn$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/coarse\/FmlyPtn$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/coarse\/FmlyPtn$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/coarse\/FmlyPtn$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/coarse\/FmlyPtn$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/coarse\/FmlyPtn$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/coarse\/FmlyPtn$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/coarse\/FmlyPtn$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/induction\/coarse\/FmlyPtn.html", "kind" : "trait"}, {"name" : "provingground.induction.coarse.Implicits", "shortDescription" : "", "object" : "provingground\/induction\/coarse\/Implicits$.html", "members_object" : [{"label" : "UnifAppln", "tail" : "", "member" : "provingground.induction.coarse.Implicits.UnifAppln", "link" : "provingground\/induction\/coarse\/Implicits$.html#UnifApplnextendsAnyRef", "kind" : "implicit class"}, {"label" : "IndTypFmly", "tail" : "", "member" : "provingground.induction.coarse.Implicits.IndTypFmly", "link" : "provingground\/induction\/coarse\/Implicits$.html#IndTypFmly[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F]]extendsAnyRef", "kind" : "implicit class"}, {"label" : "IterFuncTypHead", "tail" : "", "member" : "provingground.induction.coarse.Implicits.IterFuncTypHead", "link" : "provingground\/induction\/coarse\/Implicits$.html#IterFuncTypHead[O<:provingground.HoTT.Termwithprovingground.HoTT.Subs[O]]extendsAnyRef", "kind" : "implicit class"}, {"label" : "TypAsSeqHead", "tail" : "", "member" : "provingground.induction.coarse.Implicits.TypAsSeqHead", "link" : "provingground\/induction\/coarse\/Implicits$.html#TypAsSeqHead[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H]]extendsAnyRef", "kind" : "implicit class"}, {"label" : "SymbFmly", "tail" : "", "member" : "provingground.induction.coarse.Implicits.SymbFmly", "link" : "provingground\/induction\/coarse\/Implicits$.html#SymbFmly[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F]]extendsAnyRef", "kind" : "implicit class"}, {"label" : "ConstructorHead", "tail" : "", "member" : "provingground.induction.coarse.Implicits.ConstructorHead", "link" : "provingground\/induction\/coarse\/Implicits$.html#ConstructorHead[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H]]extendsAnyRef", "kind" : "implicit class"}, {"label" : "Types", "tail" : ": IdFmlyPtn[Term, Term]", "member" : "provingground.induction.coarse.Implicits.Types", "link" : "provingground\/induction\/coarse\/Implicits$.html#Types:provingground.induction.coarse.FmlyPtn.IdFmlyPtn[provingground.HoTT.Term,provingground.HoTT.Term]", "kind" : "val"}, {"label" : "stringSym", "tail" : "(name: String): Name", "member" : "provingground.induction.coarse.Implicits.stringSym", "link" : "provingground\/induction\/coarse\/Implicits$.html#stringSym(name:String):provingground.HoTT.Name", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/coarse\/Implicits$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/coarse\/Implicits$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/coarse\/Implicits$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/coarse\/Implicits$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/coarse\/Implicits$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/coarse\/Implicits$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/coarse\/Implicits$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/Implicits$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/Implicits$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/Implicits$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/coarse\/Implicits$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/coarse\/Implicits$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/coarse\/Implicits$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/coarse\/Implicits$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/coarse\/Implicits$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/coarse\/Implicits$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/coarse\/Implicits$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/coarse\/Implicits$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/coarse\/Implicits$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.induction.coarse.IndexedConstructorPatterns", "shortDescription" : "", "object" : "provingground\/induction\/coarse\/IndexedConstructorPatterns$.html", "members_class" : [{"label" : "iConstructorSeq", "tail" : "", "member" : "provingground.induction.coarse.IndexedConstructorPatterns.iConstructorSeq", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#iConstructorSeq", "kind" : "object"}, {"label" : "Family", "tail" : "", "member" : "provingground.induction.coarse.IndexedConstructorPatterns.Family", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#FamilyextendsProductwithSerializable", "kind" : "case class"}, {"label" : "iConstructorSeq", "tail" : "", "member" : "provingground.induction.coarse.IndexedConstructorPatterns.iConstructorSeq", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#iConstructorSeqextendsAnyRef", "kind" : "sealed trait"}, {"label" : "PartialiConstructorSeq", "tail" : "", "member" : "provingground.induction.coarse.IndexedConstructorPatterns.PartialiConstructorSeq", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#PartialiConstructorSeq[FF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[FF]]extendsProductwithSerializable", "kind" : "case class"}, {"label" : "iConstructorDefn", "tail" : "", "member" : "provingground.induction.coarse.IndexedConstructorPatterns.iConstructorDefn", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#iConstructorDefn[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]]extendsIndexedConstructorPatterns.this.iConstructorwithProductwithSerializable", "kind" : "case class"}, {"label" : "iConstructor", "tail" : "", "member" : "provingground.induction.coarse.IndexedConstructorPatterns.iConstructor", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#iConstructor", "kind" : "object"}, {"label" : "iConstructor", "tail" : "", "member" : "provingground.induction.coarse.IndexedConstructorPatterns.iConstructor", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#iConstructorextendsAnyRef", "kind" : "trait"}, {"label" : "CnstDepFuncPtn", "tail" : "", "member" : "provingground.induction.coarse.IndexedConstructorPatterns.CnstDepFuncPtn", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#CnstDepFuncPtn[TT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TT],U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V],VV<:provingground.HoTT.Termwithprovingground.HoTT.Subs[VV],W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W]]extendsIndexedConstructorPatterns.this.RecursiveiConstructorPattern[TT,U,provingground.HoTT.FuncLike[TT,U]]withProductwithSerializable", "kind" : "case class"}, {"label" : "DepFuncPtn", "tail" : "", "member" : "provingground.induction.coarse.IndexedConstructorPatterns.DepFuncPtn", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#DepFuncPtn[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V],VV<:provingground.HoTT.Termwithprovingground.HoTT.Subs[VV],W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],TF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TF]]extendsIndexedConstructorPatterns.this.RecursiveiConstructorPattern[TF,U,provingground.HoTT.FuncLike[TF,U]]withProductwithSerializable", "kind" : "case class"}, {"label" : "CnstFncPtn", "tail" : "", "member" : "provingground.induction.coarse.IndexedConstructorPatterns.CnstFncPtn", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#CnstFncPtn[TT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TT],HC<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HC]]extendsIndexedConstructorPatterns.this.RecursiveiConstructorPattern[TT,HC,provingground.HoTT.Func[TT,HC]]withProductwithSerializable", "kind" : "case class"}, {"label" : "FuncPtn", "tail" : "", "member" : "provingground.induction.coarse.IndexedConstructorPatterns.FuncPtn", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#FuncPtn[TF<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TF],HC<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HC]]extendsIndexedConstructorPatterns.this.RecursiveiConstructorPattern[TF,HC,provingground.HoTT.Func[TF,HC]]withProductwithSerializable", "kind" : "case class"}, {"label" : "RecursiveiConstructorPattern", "tail" : "", "member" : "provingground.induction.coarse.IndexedConstructorPatterns.RecursiveiConstructorPattern", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#RecursiveiConstructorPattern[ArgT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[ArgT],HeadT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[HeadT],CT<:provingground.HoTT.FuncLike[ArgT,HeadT]withprovingground.HoTT.Subs[CT]]extendsIndexedConstructorPatterns.this.iConstructorPattern[CT]", "kind" : "sealed trait"}, {"label" : "iW", "tail" : "", "member" : "provingground.induction.coarse.IndexedConstructorPatterns.iW", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#iWextendsIndexedConstructorPatterns.this.iConstructorPattern[H]withProductwithSerializable", "kind" : "case class"}, {"label" : "iConstructorTyp", "tail" : "", "member" : "provingground.induction.coarse.IndexedConstructorPatterns.iConstructorTyp", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#iConstructorTyp", "kind" : "object"}, {"label" : "iConstructorTyp", "tail" : "", "member" : "provingground.induction.coarse.IndexedConstructorPatterns.iConstructorTyp", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#iConstructorTyp[Cnstr<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Cnstr]]extendsProductwithSerializable", "kind" : "case class"}, {"label" : "iConstructorPattern", "tail" : "", "member" : "provingground.induction.coarse.IndexedConstructorPatterns.iConstructorPattern", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#iConstructorPattern[Cnstr<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Cnstr]]extendsAnyRef", "kind" : "sealed trait"}, {"label" : "Cod", "tail" : "", "member" : "provingground.induction.coarse.IndexedConstructorPatterns.Cod", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#Cod=C", "kind" : "type"}, {"label" : "DI", "tail" : "", "member" : "provingground.induction.coarse.IndexedConstructorPatterns.DI", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#DI=IndexedConstructorPatterns.this.typFmlyPtn.IterDepFunc", "kind" : "type"}, {"label" : "IT", "tail" : "", "member" : "provingground.induction.coarse.IndexedConstructorPatterns.IT", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#IT=IndexedConstructorPatterns.this.typFmlyPtn.IterTypFunc", "kind" : "type"}, {"label" : "I", "tail" : "", "member" : "provingground.induction.coarse.IndexedConstructorPatterns.I", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#I=IndexedConstructorPatterns.this.typFmlyPtn.IterFunc", "kind" : "type"}, {"label" : "Ind", "tail" : "", "member" : "provingground.induction.coarse.IndexedConstructorPatterns.Ind", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#Ind=IndexedConstructorPatterns.this.typFmlyPtn.ArgType", "kind" : "type"}, {"label" : "getTotalArg", "tail" : "(typ: Typ[Term], fmly: F): ArgType", "member" : "provingground.induction.coarse.IndexedConstructorPatterns.getTotalArg", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#getTotalArg(typ:provingground.HoTT.Typ[provingground.HoTT.Term],fmly:F):IndexedConstructorPatterns.this.typFmlyPtn.ArgType", "kind" : "def"}, {"label" : "totalArg", "tail" : "(typ: Term, fmly: F, accum: Term): Term", "member" : "provingground.induction.coarse.IndexedConstructorPatterns.totalArg", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#totalArg(typ:provingground.HoTT.Term,fmly:F,accum:provingground.HoTT.Term):provingground.HoTT.Term", "kind" : "def"}, {"member" : "provingground.induction.coarse.IndexedConstructorPatterns#<init>", "error" : "unsupported entity"}, {"label" : "typFmlyPtn", "tail" : ": FmlyPtn[H, C, F]", "member" : "provingground.induction.coarse.IndexedConstructorPatterns.typFmlyPtn", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#typFmlyPtn:provingground.induction.coarse.FmlyPtn[H,C,F]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "emptySeq", "tail" : "(typFmlyPtn: FmlyPtn[H, C, F], fmly: F): iConstructorSeq", "member" : "provingground.induction.coarse.IndexedConstructorPatterns.emptySeq", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns$.html#emptySeq[C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F]](typFmlyPtn:provingground.induction.coarse.FmlyPtn[H,C,F],fmly:F):provingground.induction.coarse.IndexedConstructorPatterns[C,H,F]#iConstructorSeq", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/coarse\/IndexedConstructorPatterns$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/induction\/coarse\/IndexedConstructorPatterns.html", "kind" : "class"}, {"name" : "provingground.induction.coarse.InductiveTyp", "members_trait" : [{"label" : "Elem", "tail" : "", "member" : "provingground.HoTT.Typ.Elem", "link" : "provingground\/HoTT$$Typ.html#Elem", "kind" : "object"}, {"label" : "constructorFns", "tail" : ": List[Term]", "member" : "provingground.induction.coarse.InductiveTyp.constructorFns", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#constructorFns:List[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "ptns", "tail" : ": List[ConstructorPattern[C, ptns.$anonfun.x$1.type.ConstructorType, H] forSome {val x$1: Constructor[C, H]}]", "member" : "provingground.induction.coarse.InductiveTyp.ptns", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#ptns:List[provingground.induction.coarse.ConstructorPattern[C,x$1.ConstructorType,H]forSome{valx$1:provingground.induction.coarse.Constructor[C,H]}]", "kind" : "val"}, {"label" : "induc", "tail" : "(Xs: Func[H, Typ[C]]): InducType", "member" : "provingground.induction.coarse.InductiveTyp.induc", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#induc(Xs:provingground.HoTT.Func[H,provingground.HoTT.Typ[C]]):provingground.induction.coarse.ConstructorSeq[C,H]#InducType", "kind" : "def"}, {"label" : "rec", "tail" : "(X: Typ[C]): RecType", "member" : "provingground.induction.coarse.InductiveTyp.rec", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#rec(X:provingground.HoTT.Typ[C]):provingground.induction.coarse.ConstructorSeq[C,H]#RecType", "kind" : "def"}, {"label" : "++", "tail" : "(those: V): SigmaTyp[UU, VV]", "member" : "provingground.HoTT.Typ.++", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#++[UU>:provingground.HoTT.Typ[U]<:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[UU],VV<:provingground.HoTT.Termwithprovingground.HoTT.Subs[VV],V<:provingground.HoTT.Typ[VV]withprovingground.HoTT.Subs[V]](those:V):provingground.HoTT.SigmaTyp[UU,VV]", "kind" : "def"}, {"label" : "||", "tail" : "(that: Typ[V]): PlusTyp[UU, V]", "member" : "provingground.HoTT.Typ.||", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#||[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](that:provingground.HoTT.Typ[V]):provingground.HoTT.PlusTyp[UU,V]", "kind" : "def"}, {"label" : "&&", "tail" : "(that: Typ[V]): ProdTyp[UU, V]", "member" : "provingground.HoTT.Typ.&&", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#&&[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](that:provingground.HoTT.Typ[V]):provingground.HoTT.ProdTyp[UU,V]", "kind" : "def"}, {"label" : "~>:", "tail" : "(variable: V): GenFuncTyp[V, UU]", "member" : "provingground.HoTT.Typ.~>:", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#~>:[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](variable:V):provingground.HoTT.GenFuncTyp[V,UU]", "kind" : "def"}, {"label" : "->:", "tail" : "(that: Typ[W]): FuncTyp[W, UU]", "member" : "provingground.HoTT.Typ.->:", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#->:[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU]](that:provingground.HoTT.Typ[W]):provingground.HoTT.FuncTyp[W,UU]", "kind" : "def"}, {"label" : "typedVar", "tail" : "(factory: NameFactory): TypedTerm[H]", "member" : "provingground.HoTT.Typ.typedVar", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#typedVar(implicitfactory:provingground.HoTT.NameFactory):provingground.HoTT.TypedTerm[U]", "kind" : "def"}, {"label" : "Var", "tail" : "(factory: NameFactory): H with Subs[H]", "member" : "provingground.HoTT.Typ.Var", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#Var(implicitfactory:provingground.HoTT.NameFactory):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "sym", "tail" : "(name: Name): H with Subs[H]", "member" : "provingground.HoTT.Typ.sym", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#sym(implicitname:sourcecode.Name):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "::", "tail" : "(name: String): H with Subs[H]", "member" : "provingground.HoTT.Typ.::", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#::(name:String):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "typedVar", "tail" : "(name: AnySym): TypedTerm[H]", "member" : "provingground.HoTT.Typ.typedVar", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#typedVar(name:provingground.HoTT.AnySym):provingground.HoTT.TypedTerm[U]", "kind" : "def"}, {"label" : "symbObj", "tail" : "(name: AnySym): H with Subs[H]", "member" : "provingground.HoTT.Typ.symbObj", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#symbObj(name:provingground.HoTT.AnySym):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "typlevel", "tail" : ": Int", "member" : "provingground.HoTT.Typ.typlevel", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#typlevel:Int", "kind" : "lazy val"}, {"label" : "typed", "tail" : ": TypedTerm[Typ[Term]]", "member" : "provingground.HoTT.Typ.typed", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#typed:provingground.HoTT.TypedTerm[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "!:", "tail" : "(term: Term): H", "member" : "provingground.HoTT.Typ.!:", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#!:(term:provingground.HoTT.Term):U", "kind" : "def"}, {"label" : "obj", "tail" : "(): H", "member" : "provingground.HoTT.Typ.obj", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#obj:U", "kind" : "def"}, {"label" : "usesVar", "tail" : "(t: Term): Boolean", "member" : "provingground.HoTT.Term.usesVar", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#usesVar(t:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "indepOf", "tail" : "(that: Term): Boolean", "member" : "provingground.HoTT.Term.indepOf", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#indepOf(that:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "dependsOn", "tail" : "(that: Term): Boolean", "member" : "provingground.HoTT.Term.dependsOn", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#dependsOn(that:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "replace", "tail" : "(x: Term, y: Term): Typ[H] with Subs[Typ[H]]", "member" : "provingground.HoTT.Subs.replace", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#replace(x:provingground.HoTT.Term,y:provingground.HoTT.Term):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/coarse\/InductiveTyp.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "constructors", "tail" : ": List[Constructor[C, H]]", "member" : "provingground.induction.coarse.InductiveTyp.constructors", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#constructors:List[provingground.induction.coarse.Constructor[C,H]]", "kind" : "abstract val"}, {"label" : "variable", "tail" : "(name: AnySym): Obj with Subs[Obj]", "member" : "provingground.HoTT.Typ.variable", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#variable(name:provingground.HoTT.AnySym):Typ.this.Objwithprovingground.HoTT.Subs[Typ.this.Obj]", "kind" : "abstract def"}, {"label" : "typ", "tail" : ": Univ", "member" : "provingground.HoTT.Typ.typ", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#typ:provingground.HoTT.Univ", "kind" : "abstract val"}, {"member" : "provingground.HoTT.Typ.Obj", "error" : "unsupported entity"}, {"label" : "newobj", "tail" : "(): Typ[H] with Subs[Typ[H]]", "member" : "provingground.HoTT.Subs.newobj", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#newobj:Uwithprovingground.HoTT.Subs[U]", "kind" : "abstract def"}, {"label" : "subs", "tail" : "(x: Term, y: Term): Typ[H] with Subs[Typ[H]]", "member" : "provingground.HoTT.Subs.subs", "link" : "provingground\/induction\/coarse\/InductiveTyp.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):Uwithprovingground.HoTT.Subs[U]", "kind" : "abstract def"}], "shortDescription" : "", "object" : "provingground\/induction\/coarse\/InductiveTyp$.html", "members_object" : [{"label" : "fromFormal", "tail" : "(formalCons: List[Term], formalTyp: Typ[Term]): InductiveTypDefinition[Term]", "member" : "provingground.induction.coarse.InductiveTyp.fromFormal", "link" : "provingground\/induction\/coarse\/InductiveTyp$.html#fromFormal(formalCons:List[provingground.HoTT.Term],formalTyp:provingground.HoTT.Typ[provingground.HoTT.Term]):provingground.induction.coarse.InductiveTypDefinition[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/coarse\/InductiveTyp$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/coarse\/InductiveTyp$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/coarse\/InductiveTyp$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/coarse\/InductiveTyp$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/coarse\/InductiveTyp$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/coarse\/InductiveTyp$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/coarse\/InductiveTyp$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/InductiveTyp$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/InductiveTyp$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/InductiveTyp$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/coarse\/InductiveTyp$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/coarse\/InductiveTyp$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/coarse\/InductiveTyp$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/coarse\/InductiveTyp$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/coarse\/InductiveTyp$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/coarse\/InductiveTyp$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/coarse\/InductiveTyp$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/coarse\/InductiveTyp$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/coarse\/InductiveTyp$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/induction\/coarse\/InductiveTyp.html", "kind" : "trait"}, {"name" : "provingground.induction.coarse.InductiveTypDefinition", "shortDescription" : "", "members_case class" : [{"label" : "Elem", "tail" : "", "member" : "provingground.HoTT.Typ.Elem", "link" : "provingground\/HoTT$$Typ.html#Elem", "kind" : "object"}, {"label" : "inducFn", "tail" : "(Xs: Func[Term, Typ[CC]]): InducType", "member" : "provingground.induction.coarse.InductiveTypDefinition.inducFn", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#inducFn[CC<:provingground.HoTT.Termwithprovingground.HoTT.Subs[CC]](Xs:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[CC]]):provingground.induction.coarse.ConstructorSeq[CC,provingground.HoTT.Term]#InducType", "kind" : "def"}, {"label" : "recFn", "tail" : "(X: Typ[CC]): RecType", "member" : "provingground.induction.coarse.InductiveTypDefinition.recFn", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#recFn[CC<:provingground.HoTT.Termwithprovingground.HoTT.Subs[CC]](X:provingground.HoTT.Typ[CC]):provingground.induction.coarse.ConstructorSeq[CC,provingground.HoTT.Term]#RecType", "kind" : "def"}, {"label" : "withCod", "tail" : "(): InductiveTypDefinition[CC]", "member" : "provingground.induction.coarse.InductiveTypDefinition.withCod", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#withCod[CC<:provingground.HoTT.Termwithprovingground.HoTT.Subs[CC]]:provingground.induction.coarse.InductiveTypDefinition[CC]", "kind" : "def"}, {"label" : "variable", "tail" : "(name: AnySym): SymbObj[Term]", "member" : "provingground.induction.coarse.InductiveTypDefinition.variable", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#variable(name:provingground.HoTT.AnySym):provingground.HoTT.SymbObj[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "Obj", "tail" : "", "member" : "provingground.induction.coarse.InductiveTypDefinition.Obj", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#Obj=provingground.HoTT.Term", "kind" : "type"}, {"label" : "newobj", "tail" : "(): Nothing", "member" : "provingground.induction.coarse.InductiveTypDefinition.newobj", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#newobj:Nothing", "kind" : "def"}, {"label" : "subs", "tail" : "(x: Term, y: Term): InductiveTypDefinition[C]", "member" : "provingground.induction.coarse.InductiveTypDefinition.subs", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):provingground.induction.coarse.InductiveTypDefinition[C]", "kind" : "def"}, {"label" : "constructors", "tail" : ": List[Constructor[C, Term]]", "member" : "provingground.induction.coarse.InductiveTypDefinition.constructors", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#constructors:List[provingground.induction.coarse.Constructor[C,provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "typ", "tail" : ": Universe", "member" : "provingground.induction.coarse.InductiveTypDefinition.typ", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#typ:provingground.HoTT.Universe", "kind" : "val"}, {"member" : "provingground.induction.coarse.InductiveTypDefinition#<init>", "error" : "unsupported entity"}, {"label" : "constructorDefs", "tail" : ": List[(Typ[Term]) ⇒ Constructor[C, Term]]", "member" : "provingground.induction.coarse.InductiveTypDefinition.constructorDefs", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#constructorDefs:List[provingground.HoTT.Typ[provingground.HoTT.Term]=>provingground.induction.coarse.Constructor[C,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "constructorFns", "tail" : ": List[Term]", "member" : "provingground.induction.coarse.InductiveTyp.constructorFns", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#constructorFns:List[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "ptns", "tail" : ": List[ConstructorPattern[C, InductiveTyp.ptns.$anonfun.x$1.type.ConstructorType, Term] forSome {val x$1: Constructor[C, Term]}]", "member" : "provingground.induction.coarse.InductiveTyp.ptns", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#ptns:List[provingground.induction.coarse.ConstructorPattern[C,x$1.ConstructorType,H]forSome{valx$1:provingground.induction.coarse.Constructor[C,H]}]", "kind" : "val"}, {"label" : "induc", "tail" : "(Xs: Func[Term, Typ[C]]): InducType", "member" : "provingground.induction.coarse.InductiveTyp.induc", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#induc(Xs:provingground.HoTT.Func[H,provingground.HoTT.Typ[C]]):provingground.induction.coarse.ConstructorSeq[C,H]#InducType", "kind" : "def"}, {"label" : "rec", "tail" : "(X: Typ[C]): RecType", "member" : "provingground.induction.coarse.InductiveTyp.rec", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#rec(X:provingground.HoTT.Typ[C]):provingground.induction.coarse.ConstructorSeq[C,H]#RecType", "kind" : "def"}, {"label" : "++", "tail" : "(those: V): SigmaTyp[UU, VV]", "member" : "provingground.HoTT.Typ.++", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#++[UU>:provingground.HoTT.Typ[U]<:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[UU],VV<:provingground.HoTT.Termwithprovingground.HoTT.Subs[VV],V<:provingground.HoTT.Typ[VV]withprovingground.HoTT.Subs[V]](those:V):provingground.HoTT.SigmaTyp[UU,VV]", "kind" : "def"}, {"label" : "||", "tail" : "(that: Typ[V]): PlusTyp[UU, V]", "member" : "provingground.HoTT.Typ.||", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#||[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](that:provingground.HoTT.Typ[V]):provingground.HoTT.PlusTyp[UU,V]", "kind" : "def"}, {"label" : "&&", "tail" : "(that: Typ[V]): ProdTyp[UU, V]", "member" : "provingground.HoTT.Typ.&&", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#&&[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](that:provingground.HoTT.Typ[V]):provingground.HoTT.ProdTyp[UU,V]", "kind" : "def"}, {"label" : "~>:", "tail" : "(variable: V): GenFuncTyp[V, UU]", "member" : "provingground.HoTT.Typ.~>:", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#~>:[UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V]](variable:V):provingground.HoTT.GenFuncTyp[V,UU]", "kind" : "def"}, {"label" : "->:", "tail" : "(that: Typ[W]): FuncTyp[W, UU]", "member" : "provingground.HoTT.Typ.->:", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#->:[W<:provingground.HoTT.Termwithprovingground.HoTT.Subs[W],UU>:U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[UU]](that:provingground.HoTT.Typ[W]):provingground.HoTT.FuncTyp[W,UU]", "kind" : "def"}, {"label" : "typedVar", "tail" : "(factory: NameFactory): TypedTerm[Term]", "member" : "provingground.HoTT.Typ.typedVar", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#typedVar(implicitfactory:provingground.HoTT.NameFactory):provingground.HoTT.TypedTerm[U]", "kind" : "def"}, {"label" : "Var", "tail" : "(factory: NameFactory): Term with Subs[Term]", "member" : "provingground.HoTT.Typ.Var", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#Var(implicitfactory:provingground.HoTT.NameFactory):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "sym", "tail" : "(name: Name): Term with Subs[Term]", "member" : "provingground.HoTT.Typ.sym", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#sym(implicitname:sourcecode.Name):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "::", "tail" : "(name: String): Term with Subs[Term]", "member" : "provingground.HoTT.Typ.::", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#::(name:String):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "typedVar", "tail" : "(name: AnySym): TypedTerm[Term]", "member" : "provingground.HoTT.Typ.typedVar", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#typedVar(name:provingground.HoTT.AnySym):provingground.HoTT.TypedTerm[U]", "kind" : "def"}, {"label" : "symbObj", "tail" : "(name: AnySym): Term with Subs[Term]", "member" : "provingground.HoTT.Typ.symbObj", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#symbObj(name:provingground.HoTT.AnySym):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "typlevel", "tail" : ": Int", "member" : "provingground.HoTT.Typ.typlevel", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#typlevel:Int", "kind" : "lazy val"}, {"label" : "typed", "tail" : ": TypedTerm[Typ[Term]]", "member" : "provingground.HoTT.Typ.typed", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#typed:provingground.HoTT.TypedTerm[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "!:", "tail" : "(term: Term): Term", "member" : "provingground.HoTT.Typ.!:", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#!:(term:provingground.HoTT.Term):U", "kind" : "def"}, {"label" : "obj", "tail" : "(): Term", "member" : "provingground.HoTT.Typ.obj", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#obj:U", "kind" : "def"}, {"label" : "usesVar", "tail" : "(t: Term): Boolean", "member" : "provingground.HoTT.Term.usesVar", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#usesVar(t:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "indepOf", "tail" : "(that: Term): Boolean", "member" : "provingground.HoTT.Term.indepOf", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#indepOf(that:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "dependsOn", "tail" : "(that: Term): Boolean", "member" : "provingground.HoTT.Term.dependsOn", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#dependsOn(that:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "replace", "tail" : "(x: Term, y: Term): Typ[Term] with Subs[Typ[Term]]", "member" : "provingground.HoTT.Subs.replace", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#replace(x:provingground.HoTT.Term,y:provingground.HoTT.Term):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/coarse\/InductiveTypDefinition.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/induction\/coarse\/InductiveTypDefinition.html", "kind" : "case class"}, {"name" : "provingground.induction.coarse.IterFuncPattern", "shortDescription" : "", "object" : "provingground\/induction\/coarse\/IterFuncPattern$.html", "members_object" : [{"label" : "DepFuncIterPtn", "tail" : "", "member" : "provingground.induction.coarse.IterFuncPattern.DepFuncIterPtn", "link" : "provingground\/induction\/coarse\/IterFuncPattern$.html#DepFuncIterPtn[TT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TT],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V],T<:provingground.HoTT.Termwithprovingground.HoTT.Subs[T],D<:provingground.HoTT.Termwithprovingground.HoTT.Subs[D],O<:provingground.HoTT.Termwithprovingground.HoTT.Subs[O],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C]]extendsIterFuncPattern.RecIterPtn[TT,V,T,D,O,C]withProductwithSerializable", "kind" : "case class"}, {"label" : "FuncIterPtn", "tail" : "", "member" : "provingground.induction.coarse.IterFuncPattern.FuncIterPtn", "link" : "provingground\/induction\/coarse\/IterFuncPattern$.html#FuncIterPtn[TT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TT],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V],T<:provingground.HoTT.Termwithprovingground.HoTT.Subs[T],D<:provingground.HoTT.Termwithprovingground.HoTT.Subs[D],O<:provingground.HoTT.Termwithprovingground.HoTT.Subs[O],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C]]extendsIterFuncPattern.IterFuncPtn[O,C,provingground.HoTT.Func[TT,V]]withProductwithSerializable", "kind" : "case class"}, {"label" : "RecIterPtn", "tail" : "", "member" : "provingground.induction.coarse.IterFuncPattern.RecIterPtn", "link" : "provingground\/induction\/coarse\/IterFuncPattern$.html#RecIterPtn[TT<:provingground.HoTT.Termwithprovingground.HoTT.Subs[TT],V<:provingground.HoTT.Termwithprovingground.HoTT.Subs[V],T<:provingground.HoTT.Termwithprovingground.HoTT.Subs[T],D<:provingground.HoTT.Termwithprovingground.HoTT.Subs[D],O<:provingground.HoTT.Termwithprovingground.HoTT.Subs[O],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C]]extendsIterFuncPattern.IterFuncPtn[O,C,provingground.HoTT.FuncLike[TT,V]]", "kind" : "trait"}, {"label" : "IdIterPtn", "tail" : "", "member" : "provingground.induction.coarse.IterFuncPattern.IdIterPtn", "link" : "provingground\/induction\/coarse\/IterFuncPattern$.html#IdIterPtn[O<:provingground.HoTT.Termwithprovingground.HoTT.Subs[O],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C]]extendsIterFuncPattern.IterFuncPtn[O,C,O]withProductwithSerializable", "kind" : "case class"}, {"label" : "IterFuncTyp", "tail" : "", "member" : "provingground.induction.coarse.IterFuncPattern.IterFuncTyp", "link" : "provingground\/induction\/coarse\/IterFuncPattern$.html#IterFuncTyp[O<:provingground.HoTT.Termwithprovingground.HoTT.Subs[O],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F]]extendsProductwithSerializable", "kind" : "case class"}, {"label" : "IterFuncPtn", "tail" : "", "member" : "provingground.induction.coarse.IterFuncPattern.IterFuncPtn", "link" : "provingground\/induction\/coarse\/IterFuncPattern$.html#IterFuncPtn", "kind" : "object"}, {"label" : "IterFuncPtn", "tail" : "", "member" : "provingground.induction.coarse.IterFuncPattern.IterFuncPtn", "link" : "provingground\/induction\/coarse\/IterFuncPattern$.html#IterFuncPtn[O<:provingground.HoTT.Termwithprovingground.HoTT.Subs[O],C<:provingground.HoTT.Termwithprovingground.HoTT.Subs[C],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F]]extendsAnyRef", "kind" : "sealed trait"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/induction\/coarse\/IterFuncPattern$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/induction\/coarse\/IterFuncPattern$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/induction\/coarse\/IterFuncPattern$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/induction\/coarse\/IterFuncPattern$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/induction\/coarse\/IterFuncPattern$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/induction\/coarse\/IterFuncPattern$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/induction\/coarse\/IterFuncPattern$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/IterFuncPattern$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/IterFuncPattern$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/induction\/coarse\/IterFuncPattern$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/induction\/coarse\/IterFuncPattern$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/induction\/coarse\/IterFuncPattern$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/induction\/coarse\/IterFuncPattern$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/induction\/coarse\/IterFuncPattern$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/induction\/coarse\/IterFuncPattern$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/induction\/coarse\/IterFuncPattern$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/induction\/coarse\/IterFuncPattern$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/induction\/coarse\/IterFuncPattern$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/induction\/coarse\/IterFuncPattern$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "scala.meta.quasiquotes" : [], "provingground.andrewscurtis.batch" : [{"name" : "provingground.andrewscurtis.batch.Dec_15_2015", "shortDescription" : "", "object" : "provingground\/andrewscurtis\/batch\/Dec_15_2015$.html", "members_object" : [{"label" : "pluto", "tail" : ": StartData", "member" : "provingground.andrewscurtis.batch.Dec_15_2015.pluto", "link" : "provingground\/andrewscurtis\/batch\/Dec_15_2015$.html#pluto:provingground.andrewscurtis.StartData", "kind" : "val"}, {"label" : "goofy", "tail" : ": StartData", "member" : "provingground.andrewscurtis.batch.Dec_15_2015.goofy", "link" : "provingground\/andrewscurtis\/batch\/Dec_15_2015$.html#goofy:provingground.andrewscurtis.StartData", "kind" : "val"}, {"label" : "donald", "tail" : ": StartData", "member" : "provingground.andrewscurtis.batch.Dec_15_2015.donald", "link" : "provingground\/andrewscurtis\/batch\/Dec_15_2015$.html#donald:provingground.andrewscurtis.StartData", "kind" : "val"}, {"label" : "mickey", "tail" : ": StartData", "member" : "provingground.andrewscurtis.batch.Dec_15_2015.mickey", "link" : "provingground\/andrewscurtis\/batch\/Dec_15_2015$.html#mickey:provingground.andrewscurtis.StartData", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/andrewscurtis\/batch\/Dec_15_2015$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/andrewscurtis\/batch\/Dec_15_2015$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/andrewscurtis\/batch\/Dec_15_2015$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/andrewscurtis\/batch\/Dec_15_2015$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/andrewscurtis\/batch\/Dec_15_2015$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/andrewscurtis\/batch\/Dec_15_2015$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/andrewscurtis\/batch\/Dec_15_2015$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/batch\/Dec_15_2015$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/batch\/Dec_15_2015$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/andrewscurtis\/batch\/Dec_15_2015$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/andrewscurtis\/batch\/Dec_15_2015$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/andrewscurtis\/batch\/Dec_15_2015$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/andrewscurtis\/batch\/Dec_15_2015$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/andrewscurtis\/batch\/Dec_15_2015$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/andrewscurtis\/batch\/Dec_15_2015$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/andrewscurtis\/batch\/Dec_15_2015$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/andrewscurtis\/batch\/Dec_15_2015$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/andrewscurtis\/batch\/Dec_15_2015$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/andrewscurtis\/batch\/Dec_15_2015$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "ammonite" : [], "scala.meta" : [], "provingground.translation" : [{"name" : "provingground.translation.CodeGen", "shortDescription" : "", "object" : "provingground\/translation\/CodeGen$.html", "members_object" : [{"label" : "indName", "tail" : "(t: Term): Option[Term]", "member" : "provingground.translation.CodeGen.indName", "link" : "provingground\/translation\/CodeGen$.html#indName(t:provingground.HoTT.Term):Option[scala.meta.Term]", "kind" : "def"}, {"label" : "getName", "tail" : "(t: Term): Option[String]", "member" : "provingground.translation.CodeGen.getName", "link" : "provingground\/translation\/CodeGen$.html#getName(t:provingground.HoTT.Term):Option[String]", "kind" : "def"}, {"label" : "base", "tail" : ": OrElse[Term, Term]", "member" : "provingground.translation.CodeGen.base", "link" : "provingground\/translation\/CodeGen$.html#base:provingground.translation.Translator.OrElse[provingground.HoTT.Term,scala.meta.Term]", "kind" : "val"}, {"label" : "mkIndObject", "tail" : "(name: String, code: Term): Object", "member" : "provingground.translation.CodeGen.mkIndObject", "link" : "provingground\/translation\/CodeGen$.html#mkIndObject(name:String,code:scala.meta.Term):meta.Defn.Object", "kind" : "def"}, {"label" : "mkObject", "tail" : "(name: String, code: Term): Object", "member" : "provingground.translation.CodeGen.mkObject", "link" : "provingground\/translation\/CodeGen$.html#mkObject(name:String,code:scala.meta.Term):meta.Defn.Object", "kind" : "def"}, {"label" : "mkDefs", "tail" : "(ncs: (String, Term)*): Block", "member" : "provingground.translation.CodeGen.mkDefs", "link" : "provingground\/translation\/CodeGen$.html#mkDefs(ncs:(String,scala.meta.Term)*):meta.Term.Block", "kind" : "def"}, {"label" : "mkDef", "tail" : "(name: String, code: Term): Val", "member" : "provingground.translation.CodeGen.mkDef", "link" : "provingground\/translation\/CodeGen$.html#mkDef(name:String,code:scala.meta.Term):meta.Defn.Val", "kind" : "def"}, {"label" : "objNames", "tail" : "(termNames: Seq[String], indNames: Seq[String]): CodeGen", "member" : "provingground.translation.CodeGen.objNames", "link" : "provingground\/translation\/CodeGen$.html#objNames(termNames:Seq[String],indNames:Seq[String]):provingground.translation.CodeGen", "kind" : "def"}, {"label" : "fromNames", "tail" : "(indMap: Map[String, Term], termMap: Map[String, Term]): CodeGen", "member" : "provingground.translation.CodeGen.fromNames", "link" : "provingground\/translation\/CodeGen$.html#fromNames(indMap:Map[String,scala.meta.Term],termMap:Map[String,scala.meta.Term]):provingground.translation.CodeGen", "kind" : "def"}, {"label" : "escape", "tail" : "(s: String): String", "member" : "provingground.translation.CodeGen.escape", "link" : "provingground\/translation\/CodeGen$.html#escape(s:String):String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/CodeGen$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/CodeGen$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/CodeGen$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/CodeGen$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/CodeGen$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/CodeGen$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/CodeGen$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/CodeGen$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/CodeGen$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/CodeGen$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/CodeGen$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/CodeGen$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/CodeGen$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/CodeGen$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/CodeGen$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/CodeGen$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/CodeGen$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/CodeGen$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/CodeGen$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "termObjectOpt", "tail" : "(name: String, term: Term): Option[Val]", "member" : "provingground.translation.CodeGen.termObjectOpt", "link" : "provingground\/translation\/CodeGen.html#termObjectOpt(name:String,term:provingground.HoTT.Term):Option[meta.Defn.Val]", "kind" : "def"}, {"label" : "termDefs", "tail" : "(nts: (String, Term)*): Block", "member" : "provingground.translation.CodeGen.termDefs", "link" : "provingground\/translation\/CodeGen.html#termDefs(nts:(String,provingground.HoTT.Term)*):meta.Term.Block", "kind" : "def"}, {"label" : "termDefOpt", "tail" : "(name: String, term: Term): Option[Val]", "member" : "provingground.translation.CodeGen.termDefOpt", "link" : "provingground\/translation\/CodeGen.html#termDefOpt(name:String,term:provingground.HoTT.Term):Option[meta.Defn.Val]", "kind" : "def"}, {"label" : "indexedConsSeqDom", "tail" : "(seqDom: IndexedConstructorSeqDom[SS, H, F, Index, Intros]): Option[Term]", "member" : "provingground.translation.CodeGen.indexedConsSeqDom", "link" : "provingground\/translation\/CodeGen.html#indexedConsSeqDom[SS<:shapeless.HList,H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],Index<:shapeless.HList,Intros<:shapeless.HList](seqDom:provingground.induction.IndexedConstructorSeqDom[SS,H,F,Index,Intros]):Option[scala.meta.Term]", "kind" : "def"}, {"label" : "indexedConsShape", "tail" : "(shape: IndexedConstructorShape[S, H, Fb, ConstructorType, Index], w: Fb): Option[Term]", "member" : "provingground.translation.CodeGen.indexedConsShape", "link" : "provingground\/translation\/CodeGen.html#indexedConsShape[S<:shapeless.HList,H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],Fb<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Fb],ConstructorType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[ConstructorType],Index<:shapeless.HList](shape:provingground.induction.IndexedConstructorShape[S,H,Fb,ConstructorType,Index],w:Fb):Option[scala.meta.Term]", "kind" : "def"}, {"label" : "indexedIterFunc", "tail" : "(iterFunc: IndexedIterFuncShape[H, F, Fb, Index], w: Fb): Option[Term]", "member" : "provingground.translation.CodeGen.indexedIterFunc", "link" : "provingground\/translation\/CodeGen.html#indexedIterFunc[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],Fb<:provingground.HoTT.Termwithprovingground.HoTT.Subs[Fb],Index<:shapeless.HList](iterFunc:provingground.induction.IndexedIterFuncShape[H,F,Fb,Index],w:Fb):Option[scala.meta.Term]", "kind" : "def"}, {"label" : "index", "tail" : "(ind: Index): Option[Term]", "member" : "provingground.translation.CodeGen.index", "link" : "provingground\/translation\/CodeGen.html#index[Index](ind:Index):Option[scala.meta.Term]", "kind" : "def"}, {"label" : "typFamilyPtn", "tail" : "(ptn: TypFamilyPtn[H, F, Index], typ: Typ[H]): Option[Term]", "member" : "provingground.translation.CodeGen.typFamilyPtn", "link" : "provingground\/translation\/CodeGen.html#typFamilyPtn[H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F],Index<:shapeless.HList](ptn:provingground.induction.TypFamilyPtn[H,F,Index],typ:provingground.HoTT.Typ[H]):Option[scala.meta.Term]", "kind" : "def"}, {"label" : "consSeq", "tail" : "(seq: ConstructorSeqTL[SS, H, Intros]): Option[Term]", "member" : "provingground.translation.CodeGen.consSeq", "link" : "provingground\/translation\/CodeGen.html#consSeq[SS<:shapeless.HList,H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],Intros<:shapeless.HList](seq:provingground.induction.ConstructorSeqTL[SS,H,Intros]):Option[scala.meta.Term]", "kind" : "def"}, {"label" : "consSeqDom", "tail" : "(seqDom: ConstructorSeqDom[SS, H, Intros], typ: Typ[H]): Option[Term]", "member" : "provingground.translation.CodeGen.consSeqDom", "link" : "provingground\/translation\/CodeGen.html#consSeqDom[SS<:shapeless.HList,H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],Intros<:shapeless.HList](seqDom:provingground.induction.ConstructorSeqDom[SS,H,Intros],typ:provingground.HoTT.Typ[H]):Option[scala.meta.Term]", "kind" : "def"}, {"label" : "symCode", "tail" : "(sym: AnySym): Term", "member" : "provingground.translation.CodeGen.symCode", "link" : "provingground\/translation\/CodeGen.html#symCode(sym:provingground.HoTT.AnySym):scala.meta.Term", "kind" : "def"}, {"label" : "consShape", "tail" : "(shape: ConstructorShape[S, H, ConstructorType], typ: Typ[H]): Option[Term]", "member" : "provingground.translation.CodeGen.consShape", "link" : "provingground\/translation\/CodeGen.html#consShape[S<:shapeless.HList,H<:provingground.HoTT.Termwithprovingground.HoTT.Subs[H],ConstructorType<:provingground.HoTT.Termwithprovingground.HoTT.Subs[ConstructorType]](shape:provingground.induction.ConstructorShape[S,H,ConstructorType],typ:provingground.HoTT.Typ[H]):Option[scala.meta.Term]", "kind" : "def"}, {"label" : "iterFunc", "tail" : "(s: IterFuncShape[O, F], typ: Typ[O]): Option[Term]", "member" : "provingground.translation.CodeGen.iterFunc", "link" : "provingground\/translation\/CodeGen.html#iterFunc[O<:provingground.HoTT.Termwithprovingground.HoTT.Subs[O],F<:provingground.HoTT.Termwithprovingground.HoTT.Subs[F]](s:provingground.induction.IterFuncShape[O,F],typ:provingground.HoTT.Typ[O]):Option[scala.meta.Term]", "kind" : "def"}, {"label" : "onTerm", "tail" : ": (Term) ⇒ Option[Term]", "member" : "provingground.translation.CodeGen.onTerm", "link" : "provingground\/translation\/CodeGen.html#onTerm:provingground.HoTT.Term=>Option[scala.meta.Term]", "kind" : "val"}, {"label" : "apply", "tail" : "(t: Term): Option[Term]", "member" : "provingground.translation.CodeGen.apply", "link" : "provingground\/translation\/CodeGen.html#apply(t:provingground.HoTT.Term):Option[scala.meta.Term]", "kind" : "def"}, {"member" : "provingground.translation.CodeGen#<init>", "error" : "unsupported entity"}, {"label" : "defns", "tail" : ": Map[String, Term]", "member" : "provingground.translation.CodeGen.defns", "link" : "provingground\/translation\/CodeGen.html#defns:Map[String,scala.meta.Term]", "kind" : "val"}, {"label" : "inducNames", "tail" : ": (Term) ⇒ Option[Term]", "member" : "provingground.translation.CodeGen.inducNames", "link" : "provingground\/translation\/CodeGen.html#inducNames:provingground.HoTT.Term=>Option[scala.meta.Term]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/CodeGen.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/CodeGen.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/CodeGen.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/CodeGen.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/CodeGen.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/CodeGen.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/CodeGen.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/CodeGen.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/CodeGen.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/CodeGen.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/CodeGen.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/CodeGen.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/CodeGen.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/CodeGen.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/CodeGen.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/CodeGen.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/translation\/CodeGen.html", "kind" : "case class"}, {"name" : "provingground.translation.CompositeFunctors", "members_trait" : [{"label" : "traverseCompose", "tail" : "(arg0: Traverse[X], arg1: Traverse[Y]): Traverse[[A]X[Y[A]]]", "member" : "provingground.translation.CompositeFunctors.traverseCompose", "link" : "provingground\/translation\/CompositeFunctors.html#traverseCompose[X[_],Y[_]](implicitevidence$2:cats.Traverse[X],implicitevidence$3:cats.Traverse[Y]):cats.Traverse[[A]X[Y[A]]]", "kind" : "implicit def"}, {"label" : "traverseHCons", "tail" : "(tx: Lazy[Traverse[X]], YT: Traverse[Y]): Traverse[[A]::[X[A], Y[A]]]", "member" : "provingground.translation.CompositeFunctors.traverseHCons", "link" : "provingground\/translation\/CompositeFunctors.html#traverseHCons[X[_],Y[_]<:shapeless.HList](implicittx:shapeless.Lazy[cats.Traverse[X]],implicitYT:cats.Traverse[Y]):cats.Traverse[[A]X[A]::Y[A]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/CompositeFunctors.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/CompositeFunctors.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/CompositeFunctors.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/CompositeFunctors.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/CompositeFunctors.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/CompositeFunctors.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/CompositeFunctors.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/CompositeFunctors.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/CompositeFunctors.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/CompositeFunctors.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/CompositeFunctors.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/CompositeFunctors.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/CompositeFunctors.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/CompositeFunctors.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/CompositeFunctors.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/CompositeFunctors.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/CompositeFunctors.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/CompositeFunctors.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/CompositeFunctors.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "lower priority Functor and Traverese type classes to be extended in Functors", "trait" : "provingground\/translation\/CompositeFunctors.html", "kind" : "trait"}, {"name" : "provingground.translation.ConeRestriction", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/ConeRestriction.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/ConeRestriction.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/ConeRestriction.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/ConeRestriction.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/ConeRestriction.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/ConeRestriction.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/ConeRestriction.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/ConeRestriction.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/ConeRestriction.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/ConeRestriction.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/ConeRestriction.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/ConeRestriction.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/ConeRestriction.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/ConeRestriction.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/ConeRestriction.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/ConeRestriction.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/ConeRestriction.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/ConeRestriction.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/ConeRestriction.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "restrict", "tail" : "(): (G[Y[I]]) ⇒ G[X[I]]", "member" : "provingground.translation.ConeRestriction.restrict", "link" : "provingground\/translation\/ConeRestriction.html#restrict[I]:G[Y[I]]=>G[X[I]]", "kind" : "abstract def"}], "shortDescription" : "restriction of cone on functors", "trait" : "provingground\/translation\/ConeRestriction.html", "kind" : "trait"}, {"name" : "provingground.translation.ContextTranslator", "members_trait" : [{"label" : "addJunction1", "tail" : "(split: PartialFunction[X[I], Y[I]], build: PartialFunction[Y[O], X[O]])(arg0: Traverse[Z], incl: Inclusion[Y, [A]Z[X[A]]], rest: OptRestriction[Y, [A]Z[X[A]]]): OrElse[I, O, X, Ctx]", "member" : "provingground.translation.ContextTranslator.addJunction1", "link" : "provingground\/translation\/ContextTranslator.html#addJunction1[Y[_],Z[_]](split:PartialFunction[X[I],Y[I]],build:PartialFunction[Y[O],X[O]])(implicitevidence$18:cats.Traverse[Z],implicitincl:provingground.translation.Inclusion[Y,[A]Z[X[A]]],implicitrest:provingground.translation.OptRestriction[Y,[A]Z[X[A]]]):provingground.translation.ContextTranslator.OrElse[I,O,X,Ctx]", "kind" : "def"}, {"label" : "addJunction", "tail" : "(split: (Ctx[I, O]) ⇒ (X[I]) ⇒ Option[Y[I]], build: (Ctx[I, O]) ⇒ (Y[O]) ⇒ Option[X[O]])(arg0: Traverse[Z], incl: Inclusion[Y, [A]Z[X[A]]], rest: OptRestriction[Y, [A]Z[X[A]]]): OrElse[I, O, X, Ctx]", "member" : "provingground.translation.ContextTranslator.addJunction", "link" : "provingground\/translation\/ContextTranslator.html#addJunction[Y[_],Z[_]](split:Ctx[I,O]=>(X[I]=>Option[Y[I]]),build:Ctx[I,O]=>(Y[O]=>Option[X[O]]))(implicitevidence$17:cats.Traverse[Z],implicitincl:provingground.translation.Inclusion[Y,[A]Z[X[A]]],implicitrest:provingground.translation.OptRestriction[Y,[A]Z[X[A]]]):provingground.translation.ContextTranslator.OrElse[I,O,X,Ctx]", "kind" : "def"}, {"label" : "||", "tail" : "(that: ContextTranslator[I, O, X, Ctx]): OrElse[I, O, X, Ctx]", "member" : "provingground.translation.ContextTranslator.||", "link" : "provingground\/translation\/ContextTranslator.html#||(that:provingground.translation.ContextTranslator[I,O,X,Ctx]):provingground.translation.ContextTranslator.OrElse[I,O,X,Ctx]", "kind" : "def"}, {"label" : "apply", "tail" : "(ctx: Ctx[I, O]): (X[I]) ⇒ Option[X[O]]", "member" : "provingground.translation.ContextTranslator.apply", "link" : "provingground\/translation\/ContextTranslator.html#apply(ctx:Ctx[I,O]):X[I]=>Option[X[O]]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Function1.toString", "link" : "provingground\/translation\/ContextTranslator.html#toString():String", "kind" : "def"}, {"label" : "andThen", "tail" : "(g: ((X[I]) ⇒ Option[X[O]]) ⇒ A): (Ctx[I, O]) ⇒ A", "member" : "scala.Function1.andThen", "link" : "provingground\/translation\/ContextTranslator.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) ⇒ Ctx[I, O]): (A) ⇒ (X[I]) ⇒ Option[X[O]]", "member" : "scala.Function1.compose", "link" : "provingground\/translation\/ContextTranslator.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/ContextTranslator.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/ContextTranslator.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/ContextTranslator.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/ContextTranslator.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/ContextTranslator.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/ContextTranslator.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/ContextTranslator.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/ContextTranslator.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/ContextTranslator.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/ContextTranslator.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/ContextTranslator.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/ContextTranslator.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/ContextTranslator.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/ContextTranslator.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/ContextTranslator.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/ContextTranslator.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/ContextTranslator.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/ContextTranslator.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "recTranslate", "tail" : "(leafMap: ⇒ (Ctx[I, O]) ⇒ (X[I]) ⇒ Option[X[O]]): (Ctx[I, O]) ⇒ (X[I]) ⇒ Option[X[O]]", "member" : "provingground.translation.ContextTranslator.recTranslate", "link" : "provingground\/translation\/ContextTranslator.html#recTranslate(leafMap:=>Ctx[I,O]=>(X[I]=>Option[X[O]])):Ctx[I,O]=>(X[I]=>Option[X[O]])", "kind" : "abstract def"}], "shortDescription" : "context dependent version of Translator", "object" : "provingground\/translation\/ContextTranslator$.html", "members_object" : [{"label" : "Junction", "tail" : "", "member" : "provingground.translation.ContextTranslator.Junction", "link" : "provingground\/translation\/ContextTranslator$.html#Junction[I,O,X[_],Ctx[_,_],Y[_],Z[_]]extendsContextTranslator[I,O,X,Ctx]withProductwithSerializable", "kind" : "case class"}, {"label" : "OrElse", "tail" : "", "member" : "provingground.translation.ContextTranslator.OrElse", "link" : "provingground\/translation\/ContextTranslator$.html#OrElse[I,O,X[_],Ctx[_,_]]extendsContextTranslator[I,O,X,Ctx]withProductwithSerializable", "kind" : "case class"}, {"label" : "Empty", "tail" : "", "member" : "provingground.translation.ContextTranslator.Empty", "link" : "provingground\/translation\/ContextTranslator$.html#Empty[I,O,X[_],Ctx[_,_]]extendsContextTranslator[I,O,X,Ctx]withProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/ContextTranslator$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/ContextTranslator$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/ContextTranslator$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/ContextTranslator$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/ContextTranslator$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/ContextTranslator$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/ContextTranslator$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/ContextTranslator$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/ContextTranslator$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/ContextTranslator$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/ContextTranslator$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/ContextTranslator$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/ContextTranslator$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/ContextTranslator$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/ContextTranslator$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/ContextTranslator$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/ContextTranslator$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/ContextTranslator$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/ContextTranslator$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/translation\/ContextTranslator.html", "kind" : "trait"}, {"name" : "provingground.translation.CoreNLP", "shortDescription" : "direct interface to the Stanford parser; the StanfordParser object which handles LaTeX is used instead.", "object" : "provingground\/translation\/CoreNLP$.html", "members_object" : [{"label" : "namedentity", "tail" : "(token: CoreLabel): String", "member" : "provingground.translation.CoreNLP.namedentity", "link" : "provingground\/translation\/CoreNLP$.html#namedentity(token:edu.stanford.nlp.ling.CoreLabel):String", "kind" : "def"}, {"label" : "pos", "tail" : "(token: CoreLabel): String", "member" : "provingground.translation.CoreNLP.pos", "link" : "provingground\/translation\/CoreNLP$.html#pos(token:edu.stanford.nlp.ling.CoreLabel):String", "kind" : "def"}, {"label" : "word", "tail" : "(token: CoreLabel): String", "member" : "provingground.translation.CoreNLP.word", "link" : "provingground\/translation\/CoreNLP$.html#word(token:edu.stanford.nlp.ling.CoreLabel):String", "kind" : "def"}, {"label" : "coreLabelList", "tail" : "(sentence: CoreMap): List[CoreLabel]", "member" : "provingground.translation.CoreNLP.coreLabelList", "link" : "provingground\/translation\/CoreNLP$.html#coreLabelList(sentence:edu.stanford.nlp.util.CoreMap):List[edu.stanford.nlp.ling.CoreLabel]", "kind" : "def"}, {"label" : "proseTrees", "tail" : "(text: String)(pipe: StanfordCoreNLP): List[ProseTree]", "member" : "provingground.translation.CoreNLP.proseTrees", "link" : "provingground\/translation\/CoreNLP$.html#proseTrees(text:String)(implicitpipe:edu.stanford.nlp.pipeline.StanfordCoreNLP):List[provingground.translation.NlpProse.ProseTree]", "kind" : "def"}, {"label" : "depRelIterable", "tail" : "(sentence: CoreMap): Iterable[DepRel]", "member" : "provingground.translation.CoreNLP.depRelIterable", "link" : "provingground\/translation\/CoreNLP$.html#depRelIterable(sentence:edu.stanford.nlp.util.CoreMap):Iterable[provingground.translation.NlpProse.DepRel]", "kind" : "def"}, {"label" : "sentences", "tail" : "(document: Annotation): List[CoreMap]", "member" : "provingground.translation.CoreNLP.sentences", "link" : "provingground\/translation\/CoreNLP$.html#sentences(document:edu.stanford.nlp.pipeline.Annotation):List[edu.stanford.nlp.util.CoreMap]", "kind" : "def"}, {"label" : "annotatedDoc", "tail" : "(text: String, pipe: StanfordCoreNLP): Annotation", "member" : "provingground.translation.CoreNLP.annotatedDoc", "link" : "provingground\/translation\/CoreNLP$.html#annotatedDoc(text:String,pipe:edu.stanford.nlp.pipeline.StanfordCoreNLP):edu.stanford.nlp.pipeline.Annotation", "kind" : "def"}, {"label" : "pipe", "tail" : ": StanfordCoreNLP", "member" : "provingground.translation.CoreNLP.pipe", "link" : "provingground\/translation\/CoreNLP$.html#pipe:edu.stanford.nlp.pipeline.StanfordCoreNLP", "kind" : "implicit lazy val"}, {"label" : "newPipe", "tail" : "(): StanfordCoreNLP", "member" : "provingground.translation.CoreNLP.newPipe", "link" : "provingground\/translation\/CoreNLP$.html#newPipe:edu.stanford.nlp.pipeline.StanfordCoreNLP", "kind" : "def"}, {"label" : "depType", "tail" : "(e: SemanticGraphEdge): String", "member" : "provingground.translation.CoreNLP.depType", "link" : "provingground\/translation\/CoreNLP$.html#depType(e:edu.stanford.nlp.semgraph.SemanticGraphEdge):String", "kind" : "def"}, {"label" : "depWord", "tail" : "(short: String, specific: String): String", "member" : "provingground.translation.CoreNLP.depWord", "link" : "provingground\/translation\/CoreNLP$.html#depWord(short:String,specific:String):String", "kind" : "def"}, {"label" : "dep", "tail" : "(e: SemanticGraphEdge): Token", "member" : "provingground.translation.CoreNLP.dep", "link" : "provingground\/translation\/CoreNLP$.html#dep(e:edu.stanford.nlp.semgraph.SemanticGraphEdge):provingground.translation.NlpProse.Token", "kind" : "def"}, {"label" : "gov", "tail" : "(e: SemanticGraphEdge): Token", "member" : "provingground.translation.CoreNLP.gov", "link" : "provingground\/translation\/CoreNLP$.html#gov(e:edu.stanford.nlp.semgraph.SemanticGraphEdge):provingground.translation.NlpProse.Token", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/CoreNLP$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/CoreNLP$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/CoreNLP$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/CoreNLP$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/CoreNLP$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/CoreNLP$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/CoreNLP$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/CoreNLP$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/CoreNLP$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/CoreNLP$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/CoreNLP$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/CoreNLP$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/CoreNLP$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/CoreNLP$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/CoreNLP$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/CoreNLP$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/CoreNLP$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/CoreNLP$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/CoreNLP$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.translation.CoreNLPTest", "shortDescription" : "", "object" : "provingground\/translation\/CoreNLPTest$.html", "members_object" : [{"label" : "tree", "tail" : ": ProseTree", "member" : "provingground.translation.CoreNLPTest.tree", "link" : "provingground\/translation\/CoreNLPTest$.html#tree:provingground.translation.NlpProse.ProseTree", "kind" : "val"}, {"label" : "depTrees", "tail" : ": List[Iterable[DepRel]]", "member" : "provingground.translation.CoreNLPTest.depTrees", "link" : "provingground\/translation\/CoreNLPTest$.html#depTrees:List[Iterable[provingground.translation.NlpProse.DepRel]]", "kind" : "val"}, {"label" : "sentences", "tail" : ": List[CoreMap]", "member" : "provingground.translation.CoreNLPTest.sentences", "link" : "provingground\/translation\/CoreNLPTest$.html#sentences:List[edu.stanford.nlp.util.CoreMap]", "kind" : "val"}, {"label" : "sentencesJava", "tail" : ": List[CoreMap]", "member" : "provingground.translation.CoreNLPTest.sentencesJava", "link" : "provingground\/translation\/CoreNLPTest$.html#sentencesJava:java.util.List[edu.stanford.nlp.util.CoreMap]", "kind" : "val"}, {"label" : "document", "tail" : ": Annotation", "member" : "provingground.translation.CoreNLPTest.document", "link" : "provingground\/translation\/CoreNLPTest$.html#document:edu.stanford.nlp.pipeline.Annotation", "kind" : "val"}, {"label" : "text", "tail" : ": String", "member" : "provingground.translation.CoreNLPTest.text", "link" : "provingground\/translation\/CoreNLPTest$.html#text:String", "kind" : "val"}, {"label" : "pipeline", "tail" : ": StanfordCoreNLP", "member" : "provingground.translation.CoreNLPTest.pipeline", "link" : "provingground\/translation\/CoreNLPTest$.html#pipeline:edu.stanford.nlp.pipeline.StanfordCoreNLP", "kind" : "val"}, {"label" : "props", "tail" : ": Properties", "member" : "provingground.translation.CoreNLPTest.props", "link" : "provingground\/translation\/CoreNLPTest$.html#props:java.util.Properties", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/CoreNLPTest$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/CoreNLPTest$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/CoreNLPTest$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/CoreNLPTest$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/CoreNLPTest$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/CoreNLPTest$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/CoreNLPTest$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/CoreNLPTest$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/CoreNLPTest$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/CoreNLPTest$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/CoreNLPTest$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/CoreNLPTest$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/CoreNLPTest$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/CoreNLPTest$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/CoreNLPTest$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/CoreNLPTest$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/CoreNLPTest$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/CoreNLPTest$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/CoreNLPTest$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.translation.Domain", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/Domain.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/Domain.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/Domain.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/Domain.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/Domain.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/Domain.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/Domain.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Domain.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Domain.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Domain.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/Domain.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/Domain.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/Domain.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/Domain.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/Domain.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/Domain.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/Domain.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/Domain.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/Domain.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "domain", "tail" : "(): (E) ⇒ Option[E]", "member" : "provingground.translation.Domain.domain", "link" : "provingground\/translation\/Domain.html#domain:E=>Option[E]", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "provingground\/translation\/Domain.html", "kind" : "trait"}, {"name" : "provingground.translation.Equiv", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/Equiv.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/Equiv.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/Equiv.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/Equiv.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/Equiv.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/Equiv.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/Equiv.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Equiv.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Equiv.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Equiv.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/Equiv.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/Equiv.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/Equiv.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/Equiv.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/Equiv.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/Equiv.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/Equiv.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/Equiv.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/Equiv.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "inv", "tail" : "(): (Y[A]) ⇒ X[A]", "member" : "provingground.translation.Equiv.inv", "link" : "provingground\/translation\/Equiv.html#inv[A]:Y[A]=>X[A]", "kind" : "abstract def"}, {"label" : "map", "tail" : "(): (X[A]) ⇒ Y[A]", "member" : "provingground.translation.Equiv.map", "link" : "provingground\/translation\/Equiv.html#map[A]:X[A]=>Y[A]", "kind" : "abstract def"}], "shortDescription" : "Equivalence of Functors (without laws)", "object" : "provingground\/translation\/Equiv$.html", "members_object" : [{"label" : "idEquiv", "tail" : "(): Equiv[X, X]", "member" : "provingground.translation.Equiv.idEquiv", "link" : "provingground\/translation\/Equiv$.html#idEquiv[X[_]]:provingground.translation.Equiv[X,X]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/Equiv$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/Equiv$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/Equiv$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/Equiv$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/Equiv$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/Equiv$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/Equiv$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Equiv$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Equiv$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Equiv$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/Equiv$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/Equiv$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/Equiv$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/Equiv$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/Equiv$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/Equiv$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/Equiv$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/Equiv$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/Equiv$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/translation\/Equiv.html", "kind" : "trait"}, {"name" : "provingground.translation.ExprApplnOps", "shortDescription" : "", "members_class" : [{"label" : "shiftArg", "tail" : "(f: E, x: E): Option[E]", "member" : "provingground.translation.ExprApplnOps.shiftArg", "link" : "provingground\/translation\/ExprApplnOps.html#shiftArg(f:E,x:E):Option[E]", "kind" : "def"}, {"label" : "convert", "tail" : "(cs: TruncatedDistribution[(E) ⇒ Option[E]])(f: E, x: E): Option[TruncatedDistribution[E]]", "member" : "provingground.translation.ExprApplnOps.convert", "link" : "provingground\/translation\/ExprApplnOps.html#convert(cs:provingground.learning.TruncatedDistribution[E=>Option[E]])(f:E,x:E):Option[provingground.learning.TruncatedDistribution[E]]", "kind" : "def"}, {"label" : "flip", "tail" : "(f: E, x: E): Option[E]", "member" : "provingground.translation.ExprApplnOps.flip", "link" : "provingground\/translation\/ExprApplnOps.html#flip(f:E,x:E):Option[E]", "kind" : "def"}, {"label" : "base", "tail" : "(f: E, x: E): Option[E]", "member" : "provingground.translation.ExprApplnOps.base", "link" : "provingground\/translation\/ExprApplnOps.html#base(f:E,x:E):Option[E]", "kind" : "def"}, {"member" : "provingground.translation.ExprApplnOps#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/ExprApplnOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/ExprApplnOps.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/ExprApplnOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/ExprApplnOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/ExprApplnOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/ExprApplnOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/ExprApplnOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/ExprApplnOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/ExprApplnOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/ExprApplnOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/ExprApplnOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/ExprApplnOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/ExprApplnOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/ExprApplnOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/ExprApplnOps.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/ExprApplnOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/ExprApplnOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/ExprApplnOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/ExprApplnOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/translation\/ExprApplnOps.html", "kind" : "class"}, {"name" : "provingground.translation.ExprEgs", "shortDescription" : "Examples to experiment and illustrate expression level NLP parsingIssues revealed:", "object" : "provingground\/translation\/ExprEgs$.html", "members_object" : [{"label" : "exprs", "tail" : ": Map[String, Option[MathExpr]]", "member" : "provingground.translation.ExprEgs.exprs", "link" : "provingground\/translation\/ExprEgs$.html#exprs:scala.collection.immutable.Map[String,Option[provingground.translation.MathExpr]]", "kind" : "lazy val"}, {"label" : "parsed", "tail" : ": Map[String, Option[MathExpr]]", "member" : "provingground.translation.ExprEgs.parsed", "link" : "provingground\/translation\/ExprEgs$.html#parsed:scala.collection.immutable.Map[String,Option[provingground.translation.MathExpr]]", "kind" : "lazy val"}, {"label" : "parseT", "tail" : "(s: String): Option[MathExpr]", "member" : "provingground.translation.ExprEgs.parseT", "link" : "provingground\/translation\/ExprEgs$.html#parseT(s:String):Option[provingground.translation.MathExpr]", "kind" : "def"}, {"label" : "parse", "tail" : "(s: String): Option[MathExpr]", "member" : "provingground.translation.ExprEgs.parse", "link" : "provingground\/translation\/ExprEgs$.html#parse(s:String):Option[provingground.translation.MathExpr]", "kind" : "def"}, {"label" : "assertions", "tail" : ": Vector[String]", "member" : "provingground.translation.ExprEgs.assertions", "link" : "provingground\/translation\/ExprEgs$.html#assertions:scala.collection.immutable.Vector[String]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/ExprEgs$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/ExprEgs$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/ExprEgs$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/ExprEgs$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/ExprEgs$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/ExprEgs$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/ExprEgs$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/ExprEgs$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/ExprEgs$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/ExprEgs$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/ExprEgs$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/ExprEgs$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/ExprEgs$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/ExprEgs$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/ExprEgs$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/ExprEgs$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/ExprEgs$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/ExprEgs$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/ExprEgs$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.translation.ExprLang", "members_trait" : [{"label" : "applyAll", "tail" : "(funcOpt: Option[E], args: Vector[E]): Option[E]", "member" : "provingground.translation.ExprLang.applyAll", "link" : "provingground\/translation\/ExprLang.html#applyAll(funcOpt:Option[E],args:Vector[E]):Option[E]", "kind" : "def"}, {"label" : "i2", "tail" : "(typ: E, value: E): Option[E]", "member" : "provingground.translation.ExprLang.i2", "link" : "provingground\/translation\/ExprLang.html#i2(typ:E,value:E):Option[E]", "kind" : "def"}, {"label" : "i1", "tail" : "(typ: E, value: E): Option[E]", "member" : "provingground.translation.ExprLang.i1", "link" : "provingground\/translation\/ExprLang.html#i1(typ:E,value:E):Option[E]", "kind" : "def"}, {"label" : "funcTyp", "tail" : "(dom: E, codom: E): Option[E]", "member" : "provingground.translation.ExprLang.funcTyp", "link" : "provingground\/translation\/ExprLang.html#funcTyp(dom:E,codom:E):Option[E]", "kind" : "def"}, {"label" : "pairTyp", "tail" : "(first: E, second: E): Option[E]", "member" : "provingground.translation.ExprLang.pairTyp", "link" : "provingground\/translation\/ExprLang.html#pairTyp(first:E,second:E):Option[E]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/ExprLang.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/ExprLang.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/ExprLang.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/ExprLang.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/ExprLang.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/ExprLang.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/ExprLang.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/ExprLang.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/ExprLang.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/ExprLang.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/ExprLang.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/ExprLang.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/ExprLang.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/ExprLang.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/ExprLang.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/ExprLang.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/ExprLang.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/ExprLang.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/ExprLang.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "numeral", "tail" : "(n: Int): Option[E]", "member" : "provingground.translation.ExprLang.numeral", "link" : "provingground\/translation\/ExprLang.html#numeral(n:Int):Option[E]", "kind" : "abstract def"}, {"label" : "orCases", "tail" : "(first: E, second: E): Option[E]", "member" : "provingground.translation.ExprLang.orCases", "link" : "provingground\/translation\/ExprLang.html#orCases(first:E,second:E):Option[E]", "kind" : "abstract def"}, {"label" : "ff", "tail" : "(): Option[E]", "member" : "provingground.translation.ExprLang.ff", "link" : "provingground\/translation\/ExprLang.html#ff:Option[E]", "kind" : "abstract def"}, {"label" : "qed", "tail" : "(): Option[E]", "member" : "provingground.translation.ExprLang.qed", "link" : "provingground\/translation\/ExprLang.html#qed:Option[E]", "kind" : "abstract def"}, {"label" : "tt", "tail" : "(): Option[E]", "member" : "provingground.translation.ExprLang.tt", "link" : "provingground\/translation\/ExprLang.html#tt:Option[E]", "kind" : "abstract def"}, {"label" : "incl2", "tail" : "(typ: E): Option[E]", "member" : "provingground.translation.ExprLang.incl2", "link" : "provingground\/translation\/ExprLang.html#incl2(typ:E):Option[E]", "kind" : "abstract def"}, {"label" : "incl1", "tail" : "(typ: E): Option[E]", "member" : "provingground.translation.ExprLang.incl1", "link" : "provingground\/translation\/ExprLang.html#incl1(typ:E):Option[E]", "kind" : "abstract def"}, {"label" : "or", "tail" : "(first: E, second: E): Option[E]", "member" : "provingground.translation.ExprLang.or", "link" : "provingground\/translation\/ExprLang.html#or(first:E,second:E):Option[E]", "kind" : "abstract def"}, {"label" : "proj2", "tail" : "(xy: E): Option[E]", "member" : "provingground.translation.ExprLang.proj2", "link" : "provingground\/translation\/ExprLang.html#proj2(xy:E):Option[E]", "kind" : "abstract def"}, {"label" : "proj1", "tail" : "(xy: E): Option[E]", "member" : "provingground.translation.ExprLang.proj1", "link" : "provingground\/translation\/ExprLang.html#proj1(xy:E):Option[E]", "kind" : "abstract def"}, {"label" : "pair", "tail" : "(x: E, y: E): Option[E]", "member" : "provingground.translation.ExprLang.pair", "link" : "provingground\/translation\/ExprLang.html#pair(x:E,y:E):Option[E]", "kind" : "abstract def"}, {"label" : "sigma", "tail" : "(variable: E, typFamily: E): Option[E]", "member" : "provingground.translation.ExprLang.sigma", "link" : "provingground\/translation\/ExprLang.html#sigma(variable:E,typFamily:E):Option[E]", "kind" : "abstract def"}, {"label" : "equality", "tail" : "(lhs: E, rhs: E): Option[E]", "member" : "provingground.translation.ExprLang.equality", "link" : "provingground\/translation\/ExprLang.html#equality(lhs:E,rhs:E):Option[E]", "kind" : "abstract def"}, {"label" : "appln", "tail" : "(func: E, arg: E): Option[E]", "member" : "provingground.translation.ExprLang.appln", "link" : "provingground\/translation\/ExprLang.html#appln(func:E,arg:E):Option[E]", "kind" : "abstract def"}, {"label" : "pi", "tail" : "(variable: E, typ: E): Option[E]", "member" : "provingground.translation.ExprLang.pi", "link" : "provingground\/translation\/ExprLang.html#pi(variable:E,typ:E):Option[E]", "kind" : "abstract def"}, {"label" : "lambda", "tail" : "(variable: E, value: E): Option[E]", "member" : "provingground.translation.ExprLang.lambda", "link" : "provingground\/translation\/ExprLang.html#lambda(variable:E,value:E):Option[E]", "kind" : "abstract def"}, {"label" : "metaVar", "tail" : "(typ: E): Option[E]", "member" : "provingground.translation.ExprLang.metaVar", "link" : "provingground\/translation\/ExprLang.html#metaVar(typ:E):Option[E]", "kind" : "abstract def"}, {"label" : "anonVar", "tail" : "(typ: E): Option[E]", "member" : "provingground.translation.ExprLang.anonVar", "link" : "provingground\/translation\/ExprLang.html#anonVar(typ:E):Option[E]", "kind" : "abstract def"}, {"label" : "typVariable", "tail" : "(name: S, level: Int): Option[E]", "member" : "provingground.translation.ExprLang.typVariable", "link" : "provingground\/translation\/ExprLang.html#typVariable[S](name:S,level:Int):Option[E]", "kind" : "abstract def"}, {"label" : "variable", "tail" : "(name: S, typ: E): Option[E]", "member" : "provingground.translation.ExprLang.variable", "link" : "provingground\/translation\/ExprLang.html#variable[S](name:S,typ:E):Option[E]", "kind" : "abstract def"}], "shortDescription" : "Abstraction (as a type class) of a language for mathematical expressions, i.e., of", "object" : "provingground\/translation\/ExprLang$.html", "members_object" : [{"label" : "applnQ", "tail" : "(func: E, arg: E)(arg0: ExprLang[E]): Option[E]", "member" : "provingground.translation.ExprLang.applnQ", "link" : "provingground\/translation\/ExprLang$.html#applnQ[E](func:E,arg:E)(implicitevidence$24:provingground.translation.ExprLang[E]):Option[E]", "kind" : "def"}, {"label" : "qed", "tail" : "(arg0: ExprLang[E]): Option[E]", "member" : "provingground.translation.ExprLang.qed", "link" : "provingground\/translation\/ExprLang$.html#qed[E](implicitevidence$23:provingground.translation.ExprLang[E]):Option[E]", "kind" : "def"}, {"label" : "ff", "tail" : "(arg0: ExprLang[E]): Option[E]", "member" : "provingground.translation.ExprLang.ff", "link" : "provingground\/translation\/ExprLang$.html#ff[E](implicitevidence$22:provingground.translation.ExprLang[E]):Option[E]", "kind" : "def"}, {"label" : "tt", "tail" : "(arg0: ExprLang[E]): Option[E]", "member" : "provingground.translation.ExprLang.tt", "link" : "provingground\/translation\/ExprLang$.html#tt[E](implicitevidence$21:provingground.translation.ExprLang[E]):Option[E]", "kind" : "def"}, {"label" : "variable", "tail" : "(arg0: ExprLang[E]): ((String, E)) ⇒ Option[E]", "member" : "provingground.translation.ExprLang.variable", "link" : "provingground\/translation\/ExprLang$.html#variable[E](implicitevidence$20:provingground.translation.ExprLang[E]):((String,E))=>Option[E]", "kind" : "def"}, {"label" : "numeral", "tail" : "(arg0: ExprLang[E]): (Int) ⇒ Option[E]", "member" : "provingground.translation.ExprLang.numeral", "link" : "provingground\/translation\/ExprLang$.html#numeral[E](implicitevidence$19:provingground.translation.ExprLang[E]):Int=>Option[E]", "kind" : "def"}, {"label" : "metaVar", "tail" : "(arg0: ExprLang[E]): (E) ⇒ Option[E]", "member" : "provingground.translation.ExprLang.metaVar", "link" : "provingground\/translation\/ExprLang$.html#metaVar[E](implicitevidence$18:provingground.translation.ExprLang[E]):E=>Option[E]", "kind" : "def"}, {"label" : "anonVar", "tail" : "(arg0: ExprLang[E]): (E) ⇒ Option[E]", "member" : "provingground.translation.ExprLang.anonVar", "link" : "provingground\/translation\/ExprLang$.html#anonVar[E](implicitevidence$17:provingground.translation.ExprLang[E]):E=>Option[E]", "kind" : "def"}, {"label" : "proj2", "tail" : "(arg0: ExprLang[E]): (E) ⇒ Option[E]", "member" : "provingground.translation.ExprLang.proj2", "link" : "provingground\/translation\/ExprLang$.html#proj2[E](implicitevidence$16:provingground.translation.ExprLang[E]):E=>Option[E]", "kind" : "def"}, {"label" : "proj1", "tail" : "(arg0: ExprLang[E]): (E) ⇒ Option[E]", "member" : "provingground.translation.ExprLang.proj1", "link" : "provingground\/translation\/ExprLang$.html#proj1[E](implicitevidence$15:provingground.translation.ExprLang[E]):E=>Option[E]", "kind" : "def"}, {"label" : "incl2", "tail" : "(arg0: ExprLang[E]): (E) ⇒ Option[E]", "member" : "provingground.translation.ExprLang.incl2", "link" : "provingground\/translation\/ExprLang$.html#incl2[E](implicitevidence$14:provingground.translation.ExprLang[E]):E=>Option[E]", "kind" : "def"}, {"label" : "incl1", "tail" : "(arg0: ExprLang[E]): (E) ⇒ Option[E]", "member" : "provingground.translation.ExprLang.incl1", "link" : "provingground\/translation\/ExprLang$.html#incl1[E](implicitevidence$13:provingground.translation.ExprLang[E]):E=>Option[E]", "kind" : "def"}, {"label" : "i2", "tail" : "(arg0: ExprLang[E]): ((E, E)) ⇒ Option[E]", "member" : "provingground.translation.ExprLang.i2", "link" : "provingground\/translation\/ExprLang$.html#i2[E](implicitevidence$12:provingground.translation.ExprLang[E]):((E,E))=>Option[E]", "kind" : "def"}, {"label" : "i1", "tail" : "(arg0: ExprLang[E]): ((E, E)) ⇒ Option[E]", "member" : "provingground.translation.ExprLang.i1", "link" : "provingground\/translation\/ExprLang$.html#i1[E](implicitevidence$11:provingground.translation.ExprLang[E]):((E,E))=>Option[E]", "kind" : "def"}, {"label" : "orCases", "tail" : "(arg0: ExprLang[E]): ((E, E)) ⇒ Option[E]", "member" : "provingground.translation.ExprLang.orCases", "link" : "provingground\/translation\/ExprLang$.html#orCases[E](implicitevidence$10:provingground.translation.ExprLang[E]):((E,E))=>Option[E]", "kind" : "def"}, {"label" : "or", "tail" : "(arg0: ExprLang[E]): ((E, E)) ⇒ Option[E]", "member" : "provingground.translation.ExprLang.or", "link" : "provingground\/translation\/ExprLang$.html#or[E](implicitevidence$9:provingground.translation.ExprLang[E]):((E,E))=>Option[E]", "kind" : "def"}, {"label" : "sigma", "tail" : "(arg0: ExprLang[E]): ((E, E)) ⇒ Option[E]", "member" : "provingground.translation.ExprLang.sigma", "link" : "provingground\/translation\/ExprLang$.html#sigma[E](implicitevidence$8:provingground.translation.ExprLang[E]):((E,E))=>Option[E]", "kind" : "def"}, {"label" : "func", "tail" : "(arg0: ExprLang[E]): ((E, E)) ⇒ Option[E]", "member" : "provingground.translation.ExprLang.func", "link" : "provingground\/translation\/ExprLang$.html#func[E](implicitevidence$7:provingground.translation.ExprLang[E]):((E,E))=>Option[E]", "kind" : "def"}, {"label" : "pi", "tail" : "(arg0: ExprLang[E]): ((E, E)) ⇒ Option[E]", "member" : "provingground.translation.ExprLang.pi", "link" : "provingground\/translation\/ExprLang$.html#pi[E](implicitevidence$6:provingground.translation.ExprLang[E]):((E,E))=>Option[E]", "kind" : "def"}, {"label" : "equality", "tail" : "(arg0: ExprLang[E]): ((E, E)) ⇒ Option[E]", "member" : "provingground.translation.ExprLang.equality", "link" : "provingground\/translation\/ExprLang$.html#equality[E](implicitevidence$5:provingground.translation.ExprLang[E]):((E,E))=>Option[E]", "kind" : "def"}, {"label" : "pairTyp", "tail" : "(arg0: ExprLang[E]): ((E, E)) ⇒ Option[E]", "member" : "provingground.translation.ExprLang.pairTyp", "link" : "provingground\/translation\/ExprLang$.html#pairTyp[E](implicitevidence$4:provingground.translation.ExprLang[E]):((E,E))=>Option[E]", "kind" : "def"}, {"label" : "pair", "tail" : "(arg0: ExprLang[E]): ((E, E)) ⇒ Option[E]", "member" : "provingground.translation.ExprLang.pair", "link" : "provingground\/translation\/ExprLang$.html#pair[E](implicitevidence$3:provingground.translation.ExprLang[E]):((E,E))=>Option[E]", "kind" : "def"}, {"label" : "lambda", "tail" : "(arg0: ExprLang[E]): ((E, E)) ⇒ Option[E]", "member" : "provingground.translation.ExprLang.lambda", "link" : "provingground\/translation\/ExprLang$.html#lambda[E](implicitevidence$2:provingground.translation.ExprLang[E]):((E,E))=>Option[E]", "kind" : "def"}, {"label" : "appln", "tail" : "(arg0: ExprLang[E]): ((E, E)) ⇒ Option[E]", "member" : "provingground.translation.ExprLang.appln", "link" : "provingground\/translation\/ExprLang$.html#appln[E](implicitevidence$1:provingground.translation.ExprLang[E]):((E,E))=>Option[E]", "kind" : "def"}, {"label" : "All", "tail" : "", "member" : "provingground.translation.ExprLang.All", "link" : "provingground\/translation\/ExprLang$.html#All[E]extendsProductwithSerializable", "kind" : "case class"}, {"label" : "Exists", "tail" : "", "member" : "provingground.translation.ExprLang.Exists", "link" : "provingground\/translation\/ExprLang$.html#Exists[E]extendsProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/ExprLang$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/ExprLang$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/ExprLang$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/ExprLang$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/ExprLang$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/ExprLang$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/ExprLang$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/ExprLang$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/ExprLang$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/ExprLang$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/ExprLang$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/ExprLang$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/ExprLang$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/ExprLang$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/ExprLang$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/ExprLang$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/ExprLang$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/ExprLang$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/ExprLang$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/translation\/ExprLang.html", "kind" : "trait"}, {"name" : "provingground.translation.ExprPatterns", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/ExprPatterns.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/ExprPatterns.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/ExprPatterns.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/ExprPatterns.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/ExprPatterns.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/ExprPatterns.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/ExprPatterns.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/ExprPatterns.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/ExprPatterns.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/ExprPatterns.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/ExprPatterns.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/ExprPatterns.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/ExprPatterns.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/ExprPatterns.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/ExprPatterns.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/ExprPatterns.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/ExprPatterns.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/ExprPatterns.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/ExprPatterns.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "isPi", "tail" : "(): (E) ⇒ Option[(E, E)]", "member" : "provingground.translation.ExprPatterns.isPi", "link" : "provingground\/translation\/ExprPatterns.html#isPi:E=>Option[(E,E)]", "kind" : "abstract def"}, {"label" : "isSigma", "tail" : "(): (E) ⇒ Option[(E, E)]", "member" : "provingground.translation.ExprPatterns.isSigma", "link" : "provingground\/translation\/ExprPatterns.html#isSigma:E=>Option[(E,E)]", "kind" : "abstract def"}, {"label" : "isPair", "tail" : "(): (E) ⇒ Option[(E, E)]", "member" : "provingground.translation.ExprPatterns.isPair", "link" : "provingground\/translation\/ExprPatterns.html#isPair:E=>Option[(E,E)]", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "provingground\/translation\/ExprPatterns.html", "kind" : "trait"}, {"name" : "provingground.translation.FansiShow", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/FansiShow.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/FansiShow.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/FansiShow.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/FansiShow.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/FansiShow.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/FansiShow.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/FansiShow.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/FansiShow.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/FansiShow.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/FansiShow.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/FansiShow.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/FansiShow.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/FansiShow.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/FansiShow.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/FansiShow.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/FansiShow.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/FansiShow.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/FansiShow.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/FansiShow.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "show", "tail" : "(x: U): String", "member" : "provingground.translation.FansiShow.show", "link" : "provingground\/translation\/FansiShow.html#show(x:U):String", "kind" : "abstract def"}], "shortDescription" : "", "object" : "provingground\/translation\/FansiShow$.html", "members_object" : [{"label" : "fd", "tail" : "(arg0: FansiShow[U]): FansiShow[FiniteDistribution[U]]", "member" : "provingground.translation.FansiShow.fd", "link" : "provingground\/translation\/FansiShow$.html#fd[U](implicitevidence$18:provingground.translation.FansiShow[U]):provingground.translation.FansiShow[provingground.FiniteDistribution[U]]", "kind" : "implicit def"}, {"label" : "weighted", "tail" : "(arg0: FansiShow[U]): FansiShow[Weighted[U]]", "member" : "provingground.translation.FansiShow.weighted", "link" : "provingground\/translation\/FansiShow$.html#weighted[U](implicitevidence$17:provingground.translation.FansiShow[U]):provingground.translation.FansiShow[provingground.Weighted[U]]", "kind" : "implicit def"}, {"label" : "mapp", "tail" : "(arg0: FansiShow[U], arg1: FansiShow[V]): FansiShow[Map[U, V]]", "member" : "provingground.translation.FansiShow.mapp", "link" : "provingground\/translation\/FansiShow$.html#mapp[U,V](implicitevidence$15:provingground.translation.FansiShow[U],implicitevidence$16:provingground.translation.FansiShow[V]):provingground.translation.FansiShow[Map[U,V]]", "kind" : "implicit def"}, {"label" : "num", "tail" : "(arg0: Numeric[U]): FansiShow[U]", "member" : "provingground.translation.FansiShow.num", "link" : "provingground\/translation\/FansiShow$.html#num[U](implicitevidence$14:Numeric[U]):provingground.translation.FansiShow[U]", "kind" : "implicit def"}, {"label" : "string", "tail" : "(): FansiShow[String]", "member" : "provingground.translation.FansiShow.string", "link" : "provingground\/translation\/FansiShow$.html#string:provingground.translation.FansiShow[String]", "kind" : "implicit def"}, {"label" : "tuple4", "tail" : "(arg0: FansiShow[U1], arg1: FansiShow[U2], arg2: FansiShow[U3], arg3: FansiShow[U4]): FansiShow[(U1, U2, U3, U4)]", "member" : "provingground.translation.FansiShow.tuple4", "link" : "provingground\/translation\/FansiShow$.html#tuple4[U1,U2,U3,U4](implicitevidence$10:provingground.translation.FansiShow[U1],implicitevidence$11:provingground.translation.FansiShow[U2],implicitevidence$12:provingground.translation.FansiShow[U3],implicitevidence$13:provingground.translation.FansiShow[U4]):provingground.translation.FansiShow[(U1,U2,U3,U4)]", "kind" : "implicit def"}, {"label" : "tuple3", "tail" : "(arg0: FansiShow[U1], arg1: FansiShow[U2], arg2: FansiShow[U3]): FansiShow[(U1, U2, U3)]", "member" : "provingground.translation.FansiShow.tuple3", "link" : "provingground\/translation\/FansiShow$.html#tuple3[U1,U2,U3](implicitevidence$7:provingground.translation.FansiShow[U1],implicitevidence$8:provingground.translation.FansiShow[U2],implicitevidence$9:provingground.translation.FansiShow[U3]):provingground.translation.FansiShow[(U1,U2,U3)]", "kind" : "implicit def"}, {"label" : "tuple2", "tail" : "(arg0: FansiShow[U1], arg1: FansiShow[U2]): FansiShow[(U1, U2)]", "member" : "provingground.translation.FansiShow.tuple2", "link" : "provingground\/translation\/FansiShow$.html#tuple2[U1,U2](implicitevidence$5:provingground.translation.FansiShow[U1],implicitevidence$6:provingground.translation.FansiShow[U2]):provingground.translation.FansiShow[(U1,U2)]", "kind" : "implicit def"}, {"label" : "set", "tail" : "(arg0: FansiShow[U]): FansiShow[Set[U]]", "member" : "provingground.translation.FansiShow.set", "link" : "provingground\/translation\/FansiShow$.html#set[U](implicitevidence$4:provingground.translation.FansiShow[U]):provingground.translation.FansiShow[Set[U]]", "kind" : "implicit def"}, {"label" : "vec", "tail" : "(arg0: FansiShow[U]): FansiShow[Vector[U]]", "member" : "provingground.translation.FansiShow.vec", "link" : "provingground\/translation\/FansiShow$.html#vec[U](implicitevidence$3:provingground.translation.FansiShow[U]):provingground.translation.FansiShow[Vector[U]]", "kind" : "implicit def"}, {"label" : "list", "tail" : "(arg0: FansiShow[U]): FansiShow[List[U]]", "member" : "provingground.translation.FansiShow.list", "link" : "provingground\/translation\/FansiShow$.html#list[U](implicitevidence$2:provingground.translation.FansiShow[U]):provingground.translation.FansiShow[List[U]]", "kind" : "implicit def"}, {"label" : "simplePrint", "tail" : ": PPrinter", "member" : "provingground.translation.FansiShow.simplePrint", "link" : "provingground\/translation\/FansiShow$.html#simplePrint:pprint.PPrinter", "kind" : "val"}, {"label" : "simpleHandler", "tail" : ": PartialFunction[Any, Tree]", "member" : "provingground.translation.FansiShow.simpleHandler", "link" : "provingground\/translation\/FansiShow$.html#simpleHandler:PartialFunction[Any,pprint.Tree]", "kind" : "val"}, {"label" : "fansiPrint", "tail" : ": PPrinter", "member" : "provingground.translation.FansiShow.fansiPrint", "link" : "provingground\/translation\/FansiShow$.html#fansiPrint:pprint.PPrinter", "kind" : "val"}, {"label" : "fansiHandler", "tail" : ": PartialFunction[Any, Tree]", "member" : "provingground.translation.FansiShow.fansiHandler", "link" : "provingground\/translation\/FansiShow$.html#fansiHandler:PartialFunction[Any,pprint.Tree]", "kind" : "val"}, {"label" : "term", "tail" : "(): FansiShow[U]", "member" : "provingground.translation.FansiShow.term", "link" : "provingground\/translation\/FansiShow$.html#term[U<:provingground.HoTT.Term]:provingground.translation.FansiShow[U]", "kind" : "implicit def"}, {"label" : "View", "tail" : "", "member" : "provingground.translation.FansiShow.View", "link" : "provingground\/translation\/FansiShow$.html#View[U]extendsAnyRef", "kind" : "implicit class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/FansiShow$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/FansiShow$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/FansiShow$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/FansiShow$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/FansiShow$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/FansiShow$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/FansiShow$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/FansiShow$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/FansiShow$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/FansiShow$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/FansiShow$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/FansiShow$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/FansiShow$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/FansiShow$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/FansiShow$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/FansiShow$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/FansiShow$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/FansiShow$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/FansiShow$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/translation\/FansiShow.html", "kind" : "trait"}, {"name" : "provingground.translation.FansiTranslate", "shortDescription" : "", "object" : "provingground\/translation\/FansiTranslate$.html", "members_object" : [{"label" : "fansiTrans", "tail" : ": OrElse[Term, Str]", "member" : "provingground.translation.FansiTranslate.fansiTrans", "link" : "provingground\/translation\/FansiTranslate$.html#fansiTrans:provingground.translation.Translator.OrElse[provingground.HoTT.Term,fansi.Str]", "kind" : "val"}, {"label" : "apply", "tail" : "(x: Term): String", "member" : "provingground.translation.FansiTranslate.apply", "link" : "provingground\/translation\/FansiTranslate$.html#apply(x:provingground.HoTT.Term):String", "kind" : "def"}, {"label" : "syms", "tail" : ": UnicodeSyms.type", "member" : "provingground.translation.FansiTranslate.syms", "link" : "provingground\/translation\/FansiTranslate$.html#syms:provingground.HoTT.UnicodeSyms.type", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/FansiTranslate$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/FansiTranslate$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/FansiTranslate$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/FansiTranslate$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/FansiTranslate$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/FansiTranslate$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/FansiTranslate$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/FansiTranslate$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/FansiTranslate$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/FansiTranslate$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/FansiTranslate$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/FansiTranslate$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/FansiTranslate$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/FansiTranslate$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/FansiTranslate$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/FansiTranslate$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/FansiTranslate$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/FansiTranslate$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/FansiTranslate$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.translation.FoldedTerm", "members_trait" : [{"label" : "usesVar", "tail" : "(t: Term): Boolean", "member" : "provingground.HoTT.Term.usesVar", "link" : "provingground\/translation\/FoldedTerm.html#usesVar(t:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "indepOf", "tail" : "(that: Term): Boolean", "member" : "provingground.HoTT.Term.indepOf", "link" : "provingground\/translation\/FoldedTerm.html#indepOf(that:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "dependsOn", "tail" : "(that: Term): Boolean", "member" : "provingground.HoTT.Term.dependsOn", "link" : "provingground\/translation\/FoldedTerm.html#dependsOn(that:provingground.HoTT.Term):Boolean", "kind" : "def"}, {"label" : "typed", "tail" : ": TypedTerm[U] forSome {type U >: FoldedTerm.this.type <: Term with Subs[U]}", "member" : "provingground.HoTT.Term.typed", "link" : "provingground\/translation\/FoldedTerm.html#typed:provingground.HoTT.TypedTerm[U]forSome{typeU>:Term.this.type<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]}", "kind" : "lazy val"}, {"label" : "replace", "tail" : "(x: Term, y: Term): Term with Subs[Term]", "member" : "provingground.HoTT.Subs.replace", "link" : "provingground\/translation\/FoldedTerm.html#replace(x:provingground.HoTT.Term,y:provingground.HoTT.Term):Uwithprovingground.HoTT.Subs[U]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/FoldedTerm.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/FoldedTerm.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/FoldedTerm.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/FoldedTerm.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/FoldedTerm.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/FoldedTerm.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/FoldedTerm.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/FoldedTerm.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/FoldedTerm.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/FoldedTerm.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/FoldedTerm.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/FoldedTerm.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/FoldedTerm.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/FoldedTerm.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/FoldedTerm.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/FoldedTerm.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/FoldedTerm.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/FoldedTerm.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/FoldedTerm.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "elems", "tail" : ": Traversable[U]", "member" : "provingground.translation.FoldedTerm.elems", "link" : "provingground\/translation\/FoldedTerm.html#elems:Traversable[U]", "kind" : "abstract val"}, {"label" : "op", "tail" : ": Func[U, Func[U, U]]", "member" : "provingground.translation.FoldedTerm.op", "link" : "provingground\/translation\/FoldedTerm.html#op:provingground.HoTT.Func[U,provingground.HoTT.Func[U,U]]", "kind" : "abstract val"}, {"label" : "typ", "tail" : ": Typ[U] forSome {type U >: FoldedTerm.this.type <: Term with Subs[U]}", "member" : "provingground.HoTT.Term.typ", "link" : "provingground\/translation\/FoldedTerm.html#typ:provingground.HoTT.Typ[U]forSome{typeU>:Term.this.type<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]}", "kind" : "abstract val"}, {"label" : "newobj", "tail" : "(): Term with Subs[Term]", "member" : "provingground.HoTT.Subs.newobj", "link" : "provingground\/translation\/FoldedTerm.html#newobj:Uwithprovingground.HoTT.Subs[U]", "kind" : "abstract def"}, {"label" : "subs", "tail" : "(x: Term, y: Term): Term with Subs[Term]", "member" : "provingground.HoTT.Subs.subs", "link" : "provingground\/translation\/FoldedTerm.html#subs(x:provingground.HoTT.Term,y:provingground.HoTT.Term):Uwithprovingground.HoTT.Subs[U]", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "provingground\/translation\/FoldedTerm.html", "kind" : "trait"}, {"name" : "provingground.translation.FormalExpr", "shortDescription" : "", "object" : "provingground\/translation\/FormalExpr$.html", "members_object" : [{"label" : "translator", "tail" : "(): OrElse[Tree, MathExpr]", "member" : "provingground.translation.FormalExpr.translator", "link" : "provingground\/translation\/FormalExpr$.html#translator:provingground.translation.Translator.OrElse[edu.stanford.nlp.trees.Tree,provingground.translation.MathExpr]", "kind" : "def"}, {"label" : "Vec", "tail" : "", "member" : "provingground.translation.FormalExpr.Vec", "link" : "provingground\/translation\/FormalExpr$.html#Vec", "kind" : "object"}, {"label" : "Vec", "tail" : "", "member" : "provingground.translation.FormalExpr.Vec", "link" : "provingground\/translation\/FormalExpr$.html#VecextendsMathExprwithProductwithSerializable", "kind" : "case class"}, {"label" : "SL", "tail" : "", "member" : "provingground.translation.FormalExpr.SL", "link" : "provingground\/translation\/FormalExpr$.html#SL[A]=(provingground.translation.Functors.S[A],Vector[A])", "kind" : "type"}, {"label" : "FormalNode", "tail" : "", "member" : "provingground.translation.FormalExpr.FormalNode", "link" : "provingground\/translation\/FormalExpr$.html#FormalNode", "kind" : "object"}, {"label" : "FormalNode", "tail" : "", "member" : "provingground.translation.FormalExpr.FormalNode", "link" : "provingground\/translation\/FormalExpr$.html#FormalNodeextendsMathExprwithProductwithSerializable", "kind" : "case class"}, {"label" : "FormalLeaf", "tail" : "", "member" : "provingground.translation.FormalExpr.FormalLeaf", "link" : "provingground\/translation\/FormalExpr$.html#FormalLeaf", "kind" : "object"}, {"label" : "FormalLeaf", "tail" : "", "member" : "provingground.translation.FormalExpr.FormalLeaf", "link" : "provingground\/translation\/FormalExpr$.html#FormalLeafextendsMathExprwithProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/FormalExpr$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/FormalExpr$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/FormalExpr$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/FormalExpr$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/FormalExpr$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/FormalExpr$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/FormalExpr$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/FormalExpr$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/FormalExpr$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/FormalExpr$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/FormalExpr$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/FormalExpr$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/FormalExpr$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/FormalExpr$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/FormalExpr$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/FormalExpr$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/FormalExpr$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/FormalExpr$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/FormalExpr$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.translation.FormulaParser", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/FormulaParser.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/FormulaParser.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/FormulaParser.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/FormulaParser.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/FormulaParser.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/FormulaParser.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/FormulaParser.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/FormulaParser.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/FormulaParser.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/FormulaParser.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/FormulaParser.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/FormulaParser.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/FormulaParser.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/FormulaParser.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/FormulaParser.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/FormulaParser.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/FormulaParser.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/FormulaParser.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/FormulaParser.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "formula", "tail" : "(fmla: String): Option[E]", "member" : "provingground.translation.FormulaParser.formula", "link" : "provingground\/translation\/FormulaParser.html#formula(fmla:String):Option[E]", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "provingground\/translation\/FormulaParser.html", "kind" : "trait"}, {"name" : "provingground.translation.FreeExpr", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/FreeExpr.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/FreeExpr.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/FreeExpr.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/FreeExpr.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/FreeExpr.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/FreeExpr.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/FreeExpr.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/FreeExpr.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/FreeExpr.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/FreeExpr.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/FreeExpr.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/FreeExpr.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/FreeExpr.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/FreeExpr.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/FreeExpr.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/FreeExpr.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/FreeExpr.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/FreeExpr.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/FreeExpr.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "as", "tail" : "(l: ExprLang[E]): Option[E]", "member" : "provingground.translation.FreeExpr.as", "link" : "provingground\/translation\/FreeExpr.html#as[E](implicitl:provingground.translation.ExprLang[E]):Option[E]", "kind" : "abstract def"}], "shortDescription" : "", "object" : "provingground\/translation\/FreeExpr$.html", "members_object" : [{"label" : "readTyp", "tail" : "(s: String): Typ[Term]", "member" : "provingground.translation.FreeExpr.readTyp", "link" : "provingground\/translation\/FreeExpr$.html#readTyp(s:String):provingground.HoTT.Typ[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "readDist", "tail" : "(s: String, names: Vector[(Term, String)]): FiniteDistribution[Term]", "member" : "provingground.translation.FreeExpr.readDist", "link" : "provingground\/translation\/FreeExpr$.html#readDist(s:String,names:Vector[(provingground.HoTT.Term,String)]):provingground.FiniteDistribution[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "writeDist", "tail" : "(fd: FiniteDistribution[Term], names: Vector[(Term, String)]): String", "member" : "provingground.translation.FreeExpr.writeDist", "link" : "provingground\/translation\/FreeExpr$.html#writeDist(fd:provingground.FiniteDistribution[provingground.HoTT.Term],names:Vector[(provingground.HoTT.Term,String)]):String", "kind" : "def"}, {"label" : "readTerm", "tail" : "(s: String): Term", "member" : "provingground.translation.FreeExpr.readTerm", "link" : "provingground\/translation\/FreeExpr$.html#readTerm(s:String):provingground.HoTT.Term", "kind" : "def"}, {"label" : "writeTerm", "tail" : "(t: Term): String", "member" : "provingground.translation.FreeExpr.writeTerm", "link" : "provingground\/translation\/FreeExpr$.html#writeTerm(t:provingground.HoTT.Term):String", "kind" : "def"}, {"label" : "writeExpr", "tail" : "(fr: FreeExpr): String", "member" : "provingground.translation.FreeExpr.writeExpr", "link" : "provingground\/translation\/FreeExpr$.html#writeExpr(fr:provingground.translation.FreeExpr):String", "kind" : "def"}, {"label" : "fromTerm", "tail" : "(t: Term): Option[FreeExpr]", "member" : "provingground.translation.FreeExpr.fromTerm", "link" : "provingground\/translation\/FreeExpr$.html#fromTerm(t:provingground.HoTT.Term):Option[provingground.translation.FreeExpr]", "kind" : "def"}, {"label" : "FromTerm", "tail" : "", "member" : "provingground.translation.FreeExpr.FromTerm", "link" : "provingground\/translation\/FreeExpr$.html#FromTerm", "kind" : "object"}, {"label" : "FreeLang", "tail" : "", "member" : "provingground.translation.FreeExpr.FreeLang", "link" : "provingground\/translation\/FreeExpr$.html#FreeLang", "kind" : "implicit object"}, {"label" : "Univ", "tail" : "", "member" : "provingground.translation.FreeExpr.Univ", "link" : "provingground\/translation\/FreeExpr$.html#Univ", "kind" : "object"}, {"label" : "Special", "tail" : "", "member" : "provingground.translation.FreeExpr.Special", "link" : "provingground\/translation\/FreeExpr$.html#Special", "kind" : "object"}, {"label" : "Special", "tail" : "", "member" : "provingground.translation.FreeExpr.Special", "link" : "provingground\/translation\/FreeExpr$.html#SpecialextendsFreeExprwithProductwithSerializable", "kind" : "case class"}, {"label" : "Numeral", "tail" : "", "member" : "provingground.translation.FreeExpr.Numeral", "link" : "provingground\/translation\/FreeExpr$.html#Numeral", "kind" : "object"}, {"label" : "Numeral", "tail" : "", "member" : "provingground.translation.FreeExpr.Numeral", "link" : "provingground\/translation\/FreeExpr$.html#NumeralextendsFreeExprwithProductwithSerializable", "kind" : "case class"}, {"label" : "QED", "tail" : "", "member" : "provingground.translation.FreeExpr.QED", "link" : "provingground\/translation\/FreeExpr$.html#QED", "kind" : "object"}, {"label" : "FF", "tail" : "", "member" : "provingground.translation.FreeExpr.FF", "link" : "provingground\/translation\/FreeExpr$.html#FF", "kind" : "object"}, {"label" : "TT", "tail" : "", "member" : "provingground.translation.FreeExpr.TT", "link" : "provingground\/translation\/FreeExpr$.html#TT", "kind" : "object"}, {"label" : "Or", "tail" : "", "member" : "provingground.translation.FreeExpr.Or", "link" : "provingground\/translation\/FreeExpr$.html#Or", "kind" : "object"}, {"label" : "Or", "tail" : "", "member" : "provingground.translation.FreeExpr.Or", "link" : "provingground\/translation\/FreeExpr$.html#OrextendsFreeExprwithProductwithSerializable", "kind" : "case class"}, {"label" : "OrCases", "tail" : "", "member" : "provingground.translation.FreeExpr.OrCases", "link" : "provingground\/translation\/FreeExpr$.html#OrCases", "kind" : "object"}, {"label" : "OrCases", "tail" : "", "member" : "provingground.translation.FreeExpr.OrCases", "link" : "provingground\/translation\/FreeExpr$.html#OrCasesextendsFreeExprwithProductwithSerializable", "kind" : "case class"}, {"label" : "FreePair", "tail" : "", "member" : "provingground.translation.FreeExpr.FreePair", "link" : "provingground\/translation\/FreeExpr$.html#FreePair", "kind" : "object"}, {"label" : "FreePair", "tail" : "", "member" : "provingground.translation.FreeExpr.FreePair", "link" : "provingground\/translation\/FreeExpr$.html#FreePairextendsFreeExprwithProductwithSerializable", "kind" : "case class"}, {"label" : "FreeSigma", "tail" : "", "member" : "provingground.translation.FreeExpr.FreeSigma", "link" : "provingground\/translation\/FreeExpr$.html#FreeSigma", "kind" : "object"}, {"label" : "FreeSigma", "tail" : "", "member" : "provingground.translation.FreeExpr.FreeSigma", "link" : "provingground\/translation\/FreeExpr$.html#FreeSigmaextendsFreeExprwithProductwithSerializable", "kind" : "case class"}, {"label" : "FreeEquality", "tail" : "", "member" : "provingground.translation.FreeExpr.FreeEquality", "link" : "provingground\/translation\/FreeExpr$.html#FreeEquality", "kind" : "object"}, {"label" : "FreeEquality", "tail" : "", "member" : "provingground.translation.FreeExpr.FreeEquality", "link" : "provingground\/translation\/FreeExpr$.html#FreeEqualityextendsFreeExprwithProductwithSerializable", "kind" : "case class"}, {"label" : "FreeAppln", "tail" : "", "member" : "provingground.translation.FreeExpr.FreeAppln", "link" : "provingground\/translation\/FreeExpr$.html#FreeAppln", "kind" : "object"}, {"label" : "FreeAppln", "tail" : "", "member" : "provingground.translation.FreeExpr.FreeAppln", "link" : "provingground\/translation\/FreeExpr$.html#FreeApplnextendsFreeExprwithProductwithSerializable", "kind" : "case class"}, {"label" : "FreePi", "tail" : "", "member" : "provingground.translation.FreeExpr.FreePi", "link" : "provingground\/translation\/FreeExpr$.html#FreePi", "kind" : "object"}, {"label" : "FreePi", "tail" : "", "member" : "provingground.translation.FreeExpr.FreePi", "link" : "provingground\/translation\/FreeExpr$.html#FreePiextendsFreeExprwithProductwithSerializable", "kind" : "case class"}, {"label" : "FreeLambda", "tail" : "", "member" : "provingground.translation.FreeExpr.FreeLambda", "link" : "provingground\/translation\/FreeExpr$.html#FreeLambda", "kind" : "object"}, {"label" : "FreeLambda", "tail" : "", "member" : "provingground.translation.FreeExpr.FreeLambda", "link" : "provingground\/translation\/FreeExpr$.html#FreeLambdaextendsFreeExprwithProductwithSerializable", "kind" : "case class"}, {"label" : "FreeProj2", "tail" : "", "member" : "provingground.translation.FreeExpr.FreeProj2", "link" : "provingground\/translation\/FreeExpr$.html#FreeProj2", "kind" : "object"}, {"label" : "FreeProj2", "tail" : "", "member" : "provingground.translation.FreeExpr.FreeProj2", "link" : "provingground\/translation\/FreeExpr$.html#FreeProj2extendsFreeExprwithProductwithSerializable", "kind" : "case class"}, {"label" : "FreeProj1", "tail" : "", "member" : "provingground.translation.FreeExpr.FreeProj1", "link" : "provingground\/translation\/FreeExpr$.html#FreeProj1", "kind" : "object"}, {"label" : "FreeProj1", "tail" : "", "member" : "provingground.translation.FreeExpr.FreeProj1", "link" : "provingground\/translation\/FreeExpr$.html#FreeProj1extendsFreeExprwithProductwithSerializable", "kind" : "case class"}, {"label" : "FreeIncl2", "tail" : "", "member" : "provingground.translation.FreeExpr.FreeIncl2", "link" : "provingground\/translation\/FreeExpr$.html#FreeIncl2", "kind" : "object"}, {"label" : "FreeIncl2", "tail" : "", "member" : "provingground.translation.FreeExpr.FreeIncl2", "link" : "provingground\/translation\/FreeExpr$.html#FreeIncl2extendsFreeExprwithProductwithSerializable", "kind" : "case class"}, {"label" : "FreeIncl1", "tail" : "", "member" : "provingground.translation.FreeExpr.FreeIncl1", "link" : "provingground\/translation\/FreeExpr$.html#FreeIncl1", "kind" : "object"}, {"label" : "FreeIncl1", "tail" : "", "member" : "provingground.translation.FreeExpr.FreeIncl1", "link" : "provingground\/translation\/FreeExpr$.html#FreeIncl1extendsFreeExprwithProductwithSerializable", "kind" : "case class"}, {"label" : "MetaVar", "tail" : "", "member" : "provingground.translation.FreeExpr.MetaVar", "link" : "provingground\/translation\/FreeExpr$.html#MetaVar", "kind" : "object"}, {"label" : "MetaVar", "tail" : "", "member" : "provingground.translation.FreeExpr.MetaVar", "link" : "provingground\/translation\/FreeExpr$.html#MetaVarextendsFreeExprwithProductwithSerializable", "kind" : "case class"}, {"label" : "AnonVar", "tail" : "", "member" : "provingground.translation.FreeExpr.AnonVar", "link" : "provingground\/translation\/FreeExpr$.html#AnonVar", "kind" : "object"}, {"label" : "AnonVar", "tail" : "", "member" : "provingground.translation.FreeExpr.AnonVar", "link" : "provingground\/translation\/FreeExpr$.html#AnonVarextendsFreeExprwithProductwithSerializable", "kind" : "case class"}, {"label" : "TypVariable", "tail" : "", "member" : "provingground.translation.FreeExpr.TypVariable", "link" : "provingground\/translation\/FreeExpr$.html#TypVariable", "kind" : "object"}, {"label" : "TypVariable", "tail" : "", "member" : "provingground.translation.FreeExpr.TypVariable", "link" : "provingground\/translation\/FreeExpr$.html#TypVariableextendsFreeExprwithProductwithSerializable", "kind" : "case class"}, {"label" : "Variable", "tail" : "", "member" : "provingground.translation.FreeExpr.Variable", "link" : "provingground\/translation\/FreeExpr$.html#Variable", "kind" : "object"}, {"label" : "Variable", "tail" : "", "member" : "provingground.translation.FreeExpr.Variable", "link" : "provingground\/translation\/FreeExpr$.html#VariableextendsFreeExprwithProductwithSerializable", "kind" : "case class"}, {"label" : "rw", "tail" : "(): upickle.default.ReadWriter[FreeExpr]", "member" : "provingground.translation.FreeExpr.rw", "link" : "provingground\/translation\/FreeExpr$.html#rw:upickle.default.ReadWriter[provingground.translation.FreeExpr]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/FreeExpr$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/FreeExpr$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/FreeExpr$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/FreeExpr$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/FreeExpr$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/FreeExpr$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/FreeExpr$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/FreeExpr$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/FreeExpr$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/FreeExpr$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/FreeExpr$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/FreeExpr$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/FreeExpr$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/FreeExpr$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/FreeExpr$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/FreeExpr$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/FreeExpr$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/FreeExpr$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/FreeExpr$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/translation\/FreeExpr.html", "kind" : "trait"}, {"name" : "provingground.translation.FreeExprHLPatterns", "shortDescription" : "", "object" : "provingground\/translation\/FreeExprHLPatterns$.html", "members_object" : [{"label" : "qed", "tail" : ": SubTypePattern[FreeExpr, QED.type, HN]", "member" : "provingground.translation.FreeExprHLPatterns.qed", "link" : "provingground\/translation\/FreeExprHLPatterns$.html#qed:provingground.translation.SubTypePattern[provingground.translation.FreeExpr,provingground.translation.FreeExpr.QED.type,provingground.translation.Functors.HN]", "kind" : "val"}, {"label" : "ff", "tail" : ": SubTypePattern[FreeExpr, FF.type, HN]", "member" : "provingground.translation.FreeExprHLPatterns.ff", "link" : "provingground\/translation\/FreeExprHLPatterns$.html#ff:provingground.translation.SubTypePattern[provingground.translation.FreeExpr,provingground.translation.FreeExpr.FF.type,provingground.translation.Functors.HN]", "kind" : "val"}, {"label" : "tt", "tail" : ": SubTypePattern[FreeExpr, TT.type, HN]", "member" : "provingground.translation.FreeExprHLPatterns.tt", "link" : "provingground\/translation\/FreeExprHLPatterns$.html#tt:provingground.translation.SubTypePattern[provingground.translation.FreeExpr,provingground.translation.FreeExpr.TT.type,provingground.translation.Functors.HN]", "kind" : "val"}, {"label" : "equality", "tail" : ": SubTypePattern[FreeExpr, FreeEquality, IdIdHN]", "member" : "provingground.translation.FreeExprHLPatterns.equality", "link" : "provingground\/translation\/FreeExprHLPatterns$.html#equality:provingground.translation.SubTypePattern[provingground.translation.FreeExpr,provingground.translation.FreeExpr.FreeEquality,provingground.translation.Functors.IdIdHN]", "kind" : "val"}, {"label" : "coprodElim", "tail" : ": SubTypePattern[FreeExpr, OrCases, IdIdHN]", "member" : "provingground.translation.FreeExprHLPatterns.coprodElim", "link" : "provingground\/translation\/FreeExprHLPatterns$.html#coprodElim:provingground.translation.SubTypePattern[provingground.translation.FreeExpr,provingground.translation.FreeExpr.OrCases,provingground.translation.Functors.IdIdHN]", "kind" : "val"}, {"label" : "coprod", "tail" : ": SubTypePattern[FreeExpr, Or, IdIdHN]", "member" : "provingground.translation.FreeExprHLPatterns.coprod", "link" : "provingground\/translation\/FreeExprHLPatterns$.html#coprod:provingground.translation.SubTypePattern[provingground.translation.FreeExpr,provingground.translation.FreeExpr.Or,provingground.translation.Functors.IdIdHN]", "kind" : "val"}, {"label" : "pair", "tail" : ": SubTypePattern[FreeExpr, FreePair, IdIdHN]", "member" : "provingground.translation.FreeExprHLPatterns.pair", "link" : "provingground\/translation\/FreeExprHLPatterns$.html#pair:provingground.translation.SubTypePattern[provingground.translation.FreeExpr,provingground.translation.FreeExpr.FreePair,provingground.translation.Functors.IdIdHN]", "kind" : "val"}, {"label" : "applnPat", "tail" : ": SubTypePattern[FreeExpr, FreeAppln, IdIdHN]", "member" : "provingground.translation.FreeExprHLPatterns.applnPat", "link" : "provingground\/translation\/FreeExprHLPatterns$.html#applnPat:provingground.translation.SubTypePattern[provingground.translation.FreeExpr,provingground.translation.FreeExpr.FreeAppln,provingground.translation.Functors.IdIdHN]", "kind" : "val"}, {"label" : "sigmaPat", "tail" : ": SubTypePattern[FreeExpr, FreeSigma, IdIdHN]", "member" : "provingground.translation.FreeExprHLPatterns.sigmaPat", "link" : "provingground\/translation\/FreeExprHLPatterns$.html#sigmaPat:provingground.translation.SubTypePattern[provingground.translation.FreeExpr,provingground.translation.FreeExpr.FreeSigma,provingground.translation.Functors.IdIdHN]", "kind" : "val"}, {"label" : "piPat", "tail" : ": SubTypePattern[FreeExpr, FreePi, IdIdHN]", "member" : "provingground.translation.FreeExprHLPatterns.piPat", "link" : "provingground\/translation\/FreeExprHLPatterns$.html#piPat:provingground.translation.SubTypePattern[provingground.translation.FreeExpr,provingground.translation.FreeExpr.FreePi,provingground.translation.Functors.IdIdHN]", "kind" : "val"}, {"label" : "lambdaPat", "tail" : ": SubTypePattern[FreeExpr, FreeLambda, IdIdHN]", "member" : "provingground.translation.FreeExprHLPatterns.lambdaPat", "link" : "provingground\/translation\/FreeExprHLPatterns$.html#lambdaPat:provingground.translation.SubTypePattern[provingground.translation.FreeExpr,provingground.translation.FreeExpr.FreeLambda,provingground.translation.Functors.IdIdHN]", "kind" : "val"}, {"label" : "proj2", "tail" : ": SubTypePattern[FreeExpr, FreeProj2, IdHN]", "member" : "provingground.translation.FreeExprHLPatterns.proj2", "link" : "provingground\/translation\/FreeExprHLPatterns$.html#proj2:provingground.translation.SubTypePattern[provingground.translation.FreeExpr,provingground.translation.FreeExpr.FreeProj2,provingground.translation.Functors.IdHN]", "kind" : "val"}, {"label" : "proj1", "tail" : ": SubTypePattern[FreeExpr, FreeProj1, IdHN]", "member" : "provingground.translation.FreeExprHLPatterns.proj1", "link" : "provingground\/translation\/FreeExprHLPatterns$.html#proj1:provingground.translation.SubTypePattern[provingground.translation.FreeExpr,provingground.translation.FreeExpr.FreeProj1,provingground.translation.Functors.IdHN]", "kind" : "val"}, {"label" : "inR", "tail" : ": SubTypePattern[FreeExpr, FreeIncl2, IdHN]", "member" : "provingground.translation.FreeExprHLPatterns.inR", "link" : "provingground\/translation\/FreeExprHLPatterns$.html#inR:provingground.translation.SubTypePattern[provingground.translation.FreeExpr,provingground.translation.FreeExpr.FreeIncl2,provingground.translation.Functors.IdHN]", "kind" : "val"}, {"label" : "inL", "tail" : ": SubTypePattern[FreeExpr, FreeIncl1, IdHN]", "member" : "provingground.translation.FreeExprHLPatterns.inL", "link" : "provingground\/translation\/FreeExprHLPatterns$.html#inL:provingground.translation.SubTypePattern[provingground.translation.FreeExpr,provingground.translation.FreeExpr.FreeIncl1,provingground.translation.Functors.IdHN]", "kind" : "val"}, {"label" : "metaVar", "tail" : ": SubTypePattern[FreeExpr, MetaVar, IdHN]", "member" : "provingground.translation.FreeExprHLPatterns.metaVar", "link" : "provingground\/translation\/FreeExprHLPatterns$.html#metaVar:provingground.translation.SubTypePattern[provingground.translation.FreeExpr,provingground.translation.FreeExpr.MetaVar,provingground.translation.Functors.IdHN]", "kind" : "val"}, {"label" : "typVariable", "tail" : ": SubTypePattern[FreeExpr, TypVariable, StIntHN]", "member" : "provingground.translation.FreeExprHLPatterns.typVariable", "link" : "provingground\/translation\/FreeExprHLPatterns$.html#typVariable:provingground.translation.SubTypePattern[provingground.translation.FreeExpr,provingground.translation.FreeExpr.TypVariable,provingground.translation.Functors.StIntHN]", "kind" : "val"}, {"label" : "anonVar", "tail" : ": SubTypePattern[FreeExpr, AnonVar, IdHN]", "member" : "provingground.translation.FreeExprHLPatterns.anonVar", "link" : "provingground\/translation\/FreeExprHLPatterns$.html#anonVar:provingground.translation.SubTypePattern[provingground.translation.FreeExpr,provingground.translation.FreeExpr.AnonVar,provingground.translation.Functors.IdHN]", "kind" : "val"}, {"label" : "variable", "tail" : ": SubTypePattern[FreeExpr, Variable, StIdHN]", "member" : "provingground.translation.FreeExprHLPatterns.variable", "link" : "provingground\/translation\/FreeExprHLPatterns$.html#variable:provingground.translation.SubTypePattern[provingground.translation.FreeExpr,provingground.translation.FreeExpr.Variable,provingground.translation.Functors.StIdHN]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/FreeExprHLPatterns$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/FreeExprHLPatterns$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/FreeExprHLPatterns$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/FreeExprHLPatterns$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/FreeExprHLPatterns$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/FreeExprHLPatterns$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/FreeExprHLPatterns$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/FreeExprHLPatterns$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/FreeExprHLPatterns$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/FreeExprHLPatterns$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/FreeExprHLPatterns$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/FreeExprHLPatterns$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/FreeExprHLPatterns$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/FreeExprHLPatterns$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/FreeExprHLPatterns$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/FreeExprHLPatterns$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/FreeExprHLPatterns$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/FreeExprHLPatterns$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/FreeExprHLPatterns$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.translation.FreeExprPatterns", "shortDescription" : "", "object" : "provingground\/translation\/FreeExprPatterns$.html", "members_object" : [{"label" : "termToFree", "tail" : ": OrElse[Term, FreeExpr]", "member" : "provingground.translation.FreeExprPatterns.termToFree", "link" : "provingground\/translation\/FreeExprPatterns$.html#termToFree:provingground.translation.Translator.OrElse[provingground.HoTT.Term,provingground.translation.FreeExpr]", "kind" : "val"}, {"label" : "freeToTerm", "tail" : ": OrElse[FreeExpr, Term]", "member" : "provingground.translation.FreeExprPatterns.freeToTerm", "link" : "provingground\/translation\/FreeExprPatterns$.html#freeToTerm:provingground.translation.Translator.OrElse[provingground.translation.FreeExpr,provingground.HoTT.Term]", "kind" : "val"}, {"label" : "univ", "tail" : ": Pattern[FreeExpr, N]", "member" : "provingground.translation.FreeExprPatterns.univ", "link" : "provingground\/translation\/FreeExprPatterns$.html#univ:provingground.translation.Translator.Pattern[provingground.translation.FreeExpr,provingground.translation.Functors.N]", "kind" : "val"}, {"label" : "freeToExpr", "tail" : "(arg0: ExprLang[E]): OrElse[FreeExpr, E]", "member" : "provingground.translation.FreeExprPatterns.freeToExpr", "link" : "provingground\/translation\/FreeExprPatterns$.html#freeToExpr[E](implicitevidence$1:provingground.translation.ExprLang[E]):provingground.translation.Translator.OrElse[provingground.translation.FreeExpr,E]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/FreeExprPatterns$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/FreeExprPatterns$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/FreeExprPatterns$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/FreeExprPatterns$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/FreeExprPatterns$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/FreeExprPatterns$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/FreeExprPatterns$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/FreeExprPatterns$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/FreeExprPatterns$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/FreeExprPatterns$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/FreeExprPatterns$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/FreeExprPatterns$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/FreeExprPatterns$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/FreeExprPatterns$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/FreeExprPatterns$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/FreeExprPatterns$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/FreeExprPatterns$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/FreeExprPatterns$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/FreeExprPatterns$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.translation.Functors", "shortDescription" : "Functor and Traverse typeclasses for Tuples, HLists and Compositions of Functors,and for Constant functors.", "object" : "provingground\/translation\/Functors$.html", "members_object" : [{"label" : "Pickled", "tail" : "", "member" : "provingground.translation.Functors.Pickled", "link" : "provingground\/translation\/Functors$.html#Pickled=provingground.translation.Functors.Coded[String]", "kind" : "type"}, {"label" : "trCod", "tail" : "(): Traverse[Coded]", "member" : "provingground.translation.Functors.trCod", "link" : "provingground\/translation\/Functors$.html#trCod:cats.Traverse[provingground.translation.Functors.Coded]", "kind" : "implicit def"}, {"label" : "trCnst", "tail" : "(): Traverse[[A]X]", "member" : "provingground.translation.Functors.trCnst", "link" : "provingground\/translation\/Functors$.html#trCnst[X]:cats.Traverse[[A]X]", "kind" : "implicit def"}, {"label" : "Coded", "tail" : "", "member" : "provingground.translation.Functors.Coded", "link" : "provingground\/translation\/Functors$.html#Coded[A]=(provingground.translation.Functors.S[A],provingground.translation.Functors.IL[A])", "kind" : "type"}, {"label" : "Un", "tail" : "", "member" : "provingground.translation.Functors.Un", "link" : "provingground\/translation\/Functors$.html#Un[A]=provingground.translation.Functors.C[A,Unit]", "kind" : "type"}, {"label" : "S", "tail" : "", "member" : "provingground.translation.Functors.S", "link" : "provingground\/translation\/Functors$.html#S[A]=provingground.translation.Functors.C[A,String]", "kind" : "type"}, {"label" : "N", "tail" : "", "member" : "provingground.translation.Functors.N", "link" : "provingground\/translation\/Functors$.html#N[A]=provingground.translation.Functors.C[A,Int]", "kind" : "type"}, {"label" : "C", "tail" : "", "member" : "provingground.translation.Functors.C", "link" : "provingground\/translation\/Functors$.html#C[A,X]=X", "kind" : "type"}, {"label" : "traverseEquiv", "tail" : "(equiv: Equiv[F, Y], TY: Traverse[Y]): Traverse[F]", "member" : "provingground.translation.Functors.traverseEquiv", "link" : "provingground\/translation\/Functors$.html#traverseEquiv[F[_],Y[_]](implicitequiv:provingground.translation.Equiv[F,Y],implicitTY:cats.Traverse[Y]):cats.Traverse[F]", "kind" : "implicit def"}, {"label" : "StIntHN", "tail" : "", "member" : "provingground.translation.Functors.StIntHN", "link" : "provingground\/translation\/Functors$.html#StIntHN[A]=provingground.translation.Functors.St[A]::provingground.translation.Functors.InHN[A]", "kind" : "type"}, {"label" : "InHN", "tail" : "", "member" : "provingground.translation.Functors.InHN", "link" : "provingground\/translation\/Functors$.html#InHN[A]=provingground.translation.Functors.In[A]::provingground.translation.Functors.HN[A]", "kind" : "type"}, {"label" : "In", "tail" : "", "member" : "provingground.translation.Functors.In", "link" : "provingground\/translation\/Functors$.html#In[A]=Int", "kind" : "type"}, {"label" : "StIdHN", "tail" : "", "member" : "provingground.translation.Functors.StIdHN", "link" : "provingground\/translation\/Functors$.html#StIdHN[A]=provingground.translation.Functors.St[A]::provingground.translation.Functors.IdHN[A]", "kind" : "type"}, {"label" : "StHN", "tail" : "", "member" : "provingground.translation.Functors.StHN", "link" : "provingground\/translation\/Functors$.html#StHN[A]=provingground.translation.Functors.St[A]::provingground.translation.Functors.HN[A]", "kind" : "type"}, {"label" : "St", "tail" : "", "member" : "provingground.translation.Functors.St", "link" : "provingground\/translation\/Functors$.html#St[A]=String", "kind" : "type"}, {"label" : "IdIdIdHN", "tail" : "", "member" : "provingground.translation.Functors.IdIdIdHN", "link" : "provingground\/translation\/Functors$.html#IdIdIdHN[A]=cats.Id[A]::provingground.translation.Functors.IdIdHN[A]", "kind" : "type"}, {"label" : "IdIdHN", "tail" : "", "member" : "provingground.translation.Functors.IdIdHN", "link" : "provingground\/translation\/Functors$.html#IdIdHN[A]=cats.Id[A]::provingground.translation.Functors.IdHN[A]", "kind" : "type"}, {"label" : "IdHN", "tail" : "", "member" : "provingground.translation.Functors.IdHN", "link" : "provingground\/translation\/Functors$.html#IdHN[A]=cats.Id[A]::provingground.translation.Functors.HN[A]", "kind" : "type"}, {"label" : "HN", "tail" : "", "member" : "provingground.translation.Functors.HN", "link" : "provingground\/translation\/Functors$.html#HN[A]=shapeless.HNil", "kind" : "type"}, {"label" : "traversePair", "tail" : "(arg0: Traverse[X], arg1: Traverse[Y]): Traverse[[A](X[A], Y[A])]", "member" : "provingground.translation.Functors.traversePair", "link" : "provingground\/translation\/Functors$.html#traversePair[X[_],Y[_]](implicitevidence$11:cats.Traverse[X],implicitevidence$12:cats.Traverse[Y]):cats.Traverse[[A](X[A],Y[A])]", "kind" : "implicit def"}, {"label" : "II", "tail" : "", "member" : "provingground.translation.Functors.II", "link" : "provingground\/translation\/Functors$.html#II[A]=(cats.Id[A],cats.Id[A])", "kind" : "type"}, {"label" : "IL", "tail" : "", "member" : "provingground.translation.Functors.IL", "link" : "provingground\/translation\/Functors$.html#IL[A]=(cats.Id[A],List[A])", "kind" : "type"}, {"label" : "SV", "tail" : "", "member" : "provingground.translation.Functors.SV", "link" : "provingground\/translation\/Functors$.html#SV[A]=(provingground.translation.Functors.S[A],Vector[A])", "kind" : "type"}, {"label" : "SVO", "tail" : "", "member" : "provingground.translation.Functors.SVO", "link" : "provingground\/translation\/Functors$.html#SVO[A]=(provingground.translation.Functors.S[A],provingground.translation.Functors.VO[A])", "kind" : "type"}, {"label" : "SVII", "tail" : "", "member" : "provingground.translation.Functors.SVII", "link" : "provingground\/translation\/Functors$.html#SVII[A]=(provingground.translation.Functors.S[A],provingground.translation.Functors.VII[A])", "kind" : "type"}, {"label" : "VII", "tail" : "", "member" : "provingground.translation.Functors.VII", "link" : "provingground\/translation\/Functors$.html#VII[A]=(Vector[A],provingground.translation.Functors.II[A])", "kind" : "type"}, {"label" : "SVI", "tail" : "", "member" : "provingground.translation.Functors.SVI", "link" : "provingground\/translation\/Functors$.html#SVI[A]=(provingground.translation.Functors.S[A],provingground.translation.Functors.VI[A])", "kind" : "type"}, {"label" : "IIIV", "tail" : "", "member" : "provingground.translation.Functors.IIIV", "link" : "provingground\/translation\/Functors$.html#IIIV[A]=(cats.Id[A],provingground.translation.Functors.IIV[A])", "kind" : "type"}, {"label" : "III", "tail" : "", "member" : "provingground.translation.Functors.III", "link" : "provingground\/translation\/Functors$.html#III[A]=(provingground.translation.Functors.II[A],cats.Id[A])", "kind" : "type"}, {"label" : "IVIIV", "tail" : "", "member" : "provingground.translation.Functors.IVIIV", "link" : "provingground\/translation\/Functors$.html#IVIIV[A]=(cats.Id[A],provingground.translation.Functors.VIIV[A])", "kind" : "type"}, {"label" : "VIIV", "tail" : "", "member" : "provingground.translation.Functors.VIIV", "link" : "provingground\/translation\/Functors$.html#VIIV[A]=(Vector[A],provingground.translation.Functors.IIV[A])", "kind" : "type"}, {"label" : "IIV", "tail" : "", "member" : "provingground.translation.Functors.IIV", "link" : "provingground\/translation\/Functors$.html#IIV[A]=(cats.Id[A],provingground.translation.Functors.IV[A])", "kind" : "type"}, {"label" : "IVI", "tail" : "", "member" : "provingground.translation.Functors.IVI", "link" : "provingground\/translation\/Functors$.html#IVI[A]=(cats.Id[A],provingground.translation.Functors.VI[A])", "kind" : "type"}, {"label" : "VO", "tail" : "", "member" : "provingground.translation.Functors.VO", "link" : "provingground\/translation\/Functors$.html#VO[A]=(Vector[A],Option[A])", "kind" : "type"}, {"label" : "VI", "tail" : "", "member" : "provingground.translation.Functors.VI", "link" : "provingground\/translation\/Functors$.html#VI[A]=(Vector[A],cats.Id[A])", "kind" : "type"}, {"label" : "IV", "tail" : "", "member" : "provingground.translation.Functors.IV", "link" : "provingground\/translation\/Functors$.html#IV[A]=(cats.Id[A],Vector[A])", "kind" : "type"}, {"label" : "VV", "tail" : "", "member" : "provingground.translation.Functors.VV", "link" : "provingground\/translation\/Functors$.html#VV[A]=(Vector[A],Vector[A])", "kind" : "type"}, {"label" : "LL", "tail" : "", "member" : "provingground.translation.Functors.LL", "link" : "provingground\/translation\/Functors$.html#LL[A]=(List[A],List[A])", "kind" : "type"}, {"label" : "t2", "tail" : "(arg0: Functor[X], arg1: Functor[Y]): Functor[[A](X[A], Y[A])]", "member" : "provingground.translation.Functors.t2", "link" : "provingground\/translation\/Functors$.html#t2[X[_],Y[_]](implicitevidence$9:cats.Functor[X],implicitevidence$10:cats.Functor[Y]):cats.Functor[[A](X[A],Y[A])]", "kind" : "implicit def"}, {"label" : "namedTrav", "tail" : ": Traverse[Named]", "member" : "provingground.translation.Functors.namedTrav", "link" : "provingground\/translation\/Functors$.html#namedTrav:cats.Traverse[provingground.translation.Functors.Named]", "kind" : "implicit val"}, {"label" : "Named", "tail" : "", "member" : "provingground.translation.Functors.Named", "link" : "provingground\/translation\/Functors$.html#Named[A]=(provingground.translation.Functors.S[A],cats.Id[A])", "kind" : "type"}, {"label" : "augmentedFunctor", "tail" : "(arg0: Functor[X]): Functor[[A](Cn, X[A])]", "member" : "provingground.translation.Functors.augmentedFunctor", "link" : "provingground\/translation\/Functors$.html#augmentedFunctor[Cn,X[_]](implicitevidence$8:cats.Functor[X]):cats.Functor[[A](Cn,X[A])]", "kind" : "implicit def"}, {"label" : "constantFunctor", "tail" : "(): Functor[[A]Cn]", "member" : "provingground.translation.Functors.constantFunctor", "link" : "provingground\/translation\/Functors$.html#constantFunctor[Cn]:cats.Functor[[A]Cn]", "kind" : "implicit def"}, {"label" : "composeFunctors", "tail" : "(arg0: Functor[X], arg1: Functor[Y]): Functor[[A]X[Y[A]]]", "member" : "provingground.translation.Functors.composeFunctors", "link" : "provingground\/translation\/Functors$.html#composeFunctors[X[_],Y[_]](implicitevidence$6:cats.Functor[X],implicitevidence$7:cats.Functor[Y]):cats.Functor[[A]X[Y[A]]]", "kind" : "implicit def"}, {"label" : "liftMap", "tail" : "(fa: F[A], f: (A) ⇒ B)(arg0: Functor[F]): F[B]", "member" : "provingground.translation.Functors.liftMap", "link" : "provingground\/translation\/Functors$.html#liftMap[A,B,F[_]](fa:F[A],f:A=>B)(implicitevidence$5:cats.Functor[F]):F[B]", "kind" : "def"}, {"label" : "traverseCompose", "tail" : "(arg0: Traverse[X], arg1: Traverse[Y]): Traverse[[A]X[Y[A]]]", "member" : "provingground.translation.CompositeFunctors.traverseCompose", "link" : "provingground\/translation\/Functors$.html#traverseCompose[X[_],Y[_]](implicitevidence$2:cats.Traverse[X],implicitevidence$3:cats.Traverse[Y]):cats.Traverse[[A]X[Y[A]]]", "kind" : "implicit def"}, {"label" : "traverseHCons", "tail" : "(tx: Lazy[Traverse[X]], YT: Traverse[Y]): Traverse[[A]::[X[A], Y[A]]]", "member" : "provingground.translation.CompositeFunctors.traverseHCons", "link" : "provingground\/translation\/Functors$.html#traverseHCons[X[_],Y[_]<:shapeless.HList](implicittx:shapeless.Lazy[cats.Traverse[X]],implicitYT:cats.Traverse[Y]):cats.Traverse[[A]X[A]::Y[A]]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/Functors$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/Functors$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/Functors$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/Functors$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/Functors$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/Functors$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/Functors$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Functors$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Functors$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Functors$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/Functors$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/Functors$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/Functors$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/Functors$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/Functors$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/Functors$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/Functors$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/Functors$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/Functors$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.translation.HoTTParser", "shortDescription" : "", "object" : "provingground\/translation\/HoTTParser$.html", "members_object" : [{"label" : "Block", "tail" : "", "member" : "provingground.translation.HoTTParser.Block", "link" : "provingground\/translation\/HoTTParser$.html#BlockextendsProductwithSerializable", "kind" : "case class"}, {"label" : "Defn", "tail" : "", "member" : "provingground.translation.HoTTParser.Defn", "link" : "provingground\/translation\/HoTTParser$.html#DefnextendsHoTTParser.StatwithProductwithSerializable", "kind" : "case class"}, {"label" : "Expr", "tail" : "", "member" : "provingground.translation.HoTTParser.Expr", "link" : "provingground\/translation\/HoTTParser$.html#ExprextendsHoTTParser.StatwithProductwithSerializable", "kind" : "case class"}, {"label" : "Stat", "tail" : "", "member" : "provingground.translation.HoTTParser.Stat", "link" : "provingground\/translation\/HoTTParser$.html#StatextendsAnyRef", "kind" : "sealed trait"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/HoTTParser$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/HoTTParser$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/HoTTParser$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/HoTTParser$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/HoTTParser$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/HoTTParser$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/HoTTParser$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/HoTTParser$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/HoTTParser$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/HoTTParser$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/HoTTParser$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/HoTTParser$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/HoTTParser$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/HoTTParser$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/HoTTParser$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/HoTTParser$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/HoTTParser$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/HoTTParser$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/HoTTParser$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "block", "tail" : ": fastparse.noApi.P[Block]", "member" : "provingground.translation.HoTTParser.block", "link" : "provingground\/translation\/HoTTParser.html#block:fastparse.noApi.P[provingground.translation.HoTTParser.Block]", "kind" : "val"}, {"label" : "stat", "tail" : ": fastparse.noApi.P[Stat]", "member" : "provingground.translation.HoTTParser.stat", "link" : "provingground\/translation\/HoTTParser.html#stat:fastparse.noApi.P[provingground.translation.HoTTParser.Stat]", "kind" : "val"}, {"label" : "expr", "tail" : ": Parser[Expr, Char, String]", "member" : "provingground.translation.HoTTParser.expr", "link" : "provingground\/translation\/HoTTParser.html#expr:fastparse.core.Parser[provingground.translation.HoTTParser.Expr,Char,String]", "kind" : "val"}, {"label" : "defn", "tail" : ": Parser[Defn, Char, String]", "member" : "provingground.translation.HoTTParser.defn", "link" : "provingground\/translation\/HoTTParser.html#defn:fastparse.core.Parser[provingground.translation.HoTTParser.Defn,Char,String]", "kind" : "val"}, {"label" : "spc", "tail" : ": fastparse.all.P[Unit]", "member" : "provingground.translation.HoTTParser.spc", "link" : "provingground\/translation\/HoTTParser.html#spc:fastparse.all.P[Unit]", "kind" : "val"}, {"label" : "break", "tail" : ": Parser[Unit, Char, String]", "member" : "provingground.translation.HoTTParser.break", "link" : "provingground\/translation\/HoTTParser.html#break:fastparse.core.Parser[Unit,Char,String]", "kind" : "val"}, {"label" : "term", "tail" : ": fastparse.noApi.P[Term]", "member" : "provingground.translation.HoTTParser.term", "link" : "provingground\/translation\/HoTTParser.html#term:fastparse.noApi.P[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "simpleterm", "tail" : ": fastparse.noApi.P[Term]", "member" : "provingground.translation.HoTTParser.simpleterm", "link" : "provingground\/translation\/HoTTParser.html#simpleterm:fastparse.noApi.P[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "applnP", "tail" : ": Parser[Term, Char, String]", "member" : "provingground.translation.HoTTParser.applnP", "link" : "provingground\/translation\/HoTTParser.html#applnP:fastparse.core.Parser[provingground.HoTT.Term,Char,String]", "kind" : "val"}, {"label" : "piTyp", "tail" : ": Parser[GenFuncTyp[Term, U] forSome {type U <: Term with Subs[U]}, Char, String]", "member" : "provingground.translation.HoTTParser.piTyp", "link" : "provingground\/translation\/HoTTParser.html#piTyp:fastparse.core.Parser[provingground.HoTT.GenFuncTyp[provingground.HoTT.Term,U]forSome{typeU<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]},Char,String]", "kind" : "val"}, {"label" : "funcTyp", "tail" : ": Parser[FuncTyp[U, U] forSome {type U <: Term with Subs[U], type U <: Term with Subs[U]}, Char, String]", "member" : "provingground.translation.HoTTParser.funcTyp", "link" : "provingground\/translation\/HoTTParser.html#funcTyp:fastparse.core.Parser[provingground.HoTT.FuncTyp[U,U]forSome{typeU<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U];typeU<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]},Char,String]", "kind" : "val"}, {"label" : "lambdaP", "tail" : ": fastparse.noApi.P[Term]", "member" : "provingground.translation.HoTTParser.lambdaP", "link" : "provingground\/translation\/HoTTParser.html#lambdaP:fastparse.noApi.P[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "lmbdaP", "tail" : ": fastparse.noApi.P[Term]", "member" : "provingground.translation.HoTTParser.lmbdaP", "link" : "provingground\/translation\/HoTTParser.html#lmbdaP:fastparse.noApi.P[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "parens", "tail" : ": fastparse.noApi.P[Term]", "member" : "provingground.translation.HoTTParser.parens", "link" : "provingground\/translation\/HoTTParser.html#parens:fastparse.noApi.P[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "symbolic", "tail" : ": fastparse.noApi.P[Term]", "member" : "provingground.translation.HoTTParser.symbolic", "link" : "provingground\/translation\/HoTTParser.html#symbolic:fastparse.noApi.P[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "name", "tail" : ": fastparse.noApi.P[String]", "member" : "provingground.translation.HoTTParser.name", "link" : "provingground\/translation\/HoTTParser.html#name:fastparse.noApi.P[String]", "kind" : "val"}, {"label" : "str", "tail" : ": Parser[String, Char, String]", "member" : "provingground.translation.HoTTParser.str", "link" : "provingground\/translation\/HoTTParser.html#str:fastparse.core.Parser[String,Char,String]", "kind" : "val"}, {"label" : "alphanum", "tail" : ": IndexedSeq[Char]", "member" : "provingground.translation.HoTTParser.alphanum", "link" : "provingground\/translation\/HoTTParser.html#alphanum:scala.collection.immutable.IndexedSeq[Char]", "kind" : "val"}, {"label" : "alphachar", "tail" : ": IndexedSeq[Char]", "member" : "provingground.translation.HoTTParser.alphachar", "link" : "provingground\/translation\/HoTTParser.html#alphachar:scala.collection.immutable.IndexedSeq[Char]", "kind" : "val"}, {"label" : "named", "tail" : ": fastparse.noApi.P[Term]", "member" : "provingground.translation.HoTTParser.named", "link" : "provingground\/translation\/HoTTParser.html#named:fastparse.noApi.P[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "predefs", "tail" : ": fastparse.noApi.P[Term]", "member" : "provingground.translation.HoTTParser.predefs", "link" : "provingground\/translation\/HoTTParser.html#predefs:fastparse.noApi.P[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "+", "tail" : "(dfn: Defn): HoTTParser", "member" : "provingground.translation.HoTTParser.+", "link" : "provingground\/translation\/HoTTParser.html#+(dfn:provingground.translation.HoTTParser.Defn):provingground.translation.HoTTParser", "kind" : "def"}, {"label" : "+", "tail" : "(n: String, t: Term): HoTTParser", "member" : "provingground.translation.HoTTParser.+", "link" : "provingground\/translation\/HoTTParser.html#+(n:String,t:provingground.HoTT.Term):provingground.translation.HoTTParser", "kind" : "def"}, {"label" : "White", "tail" : ": Wrapper", "member" : "provingground.translation.HoTTParser.White", "link" : "provingground\/translation\/HoTTParser.html#White:fastparse.WhitespaceApi.Wrapper", "kind" : "val"}, {"member" : "provingground.translation.HoTTParser#<init>", "error" : "unsupported entity"}, {"label" : "names", "tail" : ": Map[String, Term]", "member" : "provingground.translation.HoTTParser.names", "link" : "provingground\/translation\/HoTTParser.html#names:Map[String,provingground.HoTT.Term]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/HoTTParser.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/HoTTParser.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/HoTTParser.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/HoTTParser.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/HoTTParser.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/HoTTParser.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/HoTTParser.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/HoTTParser.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/HoTTParser.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/HoTTParser.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/HoTTParser.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/HoTTParser.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/HoTTParser.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/HoTTParser.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/HoTTParser.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/HoTTParser.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/translation\/HoTTParser.html", "kind" : "object"}, {"name" : "provingground.translation.Inclusion", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/Inclusion.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/Inclusion.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/Inclusion.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/Inclusion.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/Inclusion.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/Inclusion.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/Inclusion.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Inclusion.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Inclusion.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Inclusion.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/Inclusion.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/Inclusion.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/Inclusion.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/Inclusion.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/Inclusion.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/Inclusion.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/Inclusion.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/Inclusion.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/Inclusion.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "incl", "tail" : "(): (X[I]) ⇒ Y[I]", "member" : "provingground.translation.Inclusion.incl", "link" : "provingground\/translation\/Inclusion.html#incl[I]:X[I]=>Y[I]", "kind" : "abstract def"}], "shortDescription" : "inclusion of functors", "object" : "provingground\/translation\/Inclusion$.html", "members_object" : [{"label" : "pairInclusion", "tail" : "(incl1: Inclusion[X1, Y1], incl2: Inclusion[X2, Y2]): Inclusion[[A](X1[A], X2[A]), [A](Y1[A], Y2[A])]", "member" : "provingground.translation.Inclusion.pairInclusion", "link" : "provingground\/translation\/Inclusion$.html#pairInclusion[X1[_],Y1[_],X2[_],Y2[_]](implicitincl1:provingground.translation.Inclusion[X1,Y1],implicitincl2:provingground.translation.Inclusion[X2,Y2]):provingground.translation.Inclusion[[A](X1[A],X2[A]),[A](Y1[A],Y2[A])]", "kind" : "implicit def"}, {"label" : "subtypIncl", "tail" : "(): Inclusion[X, Y]", "member" : "provingground.translation.Inclusion.subtypIncl", "link" : "provingground\/translation\/Inclusion$.html#subtypIncl[X[_],Y[_]>:X[_]]:provingground.translation.Inclusion[X,Y]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/Inclusion$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/Inclusion$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/Inclusion$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/Inclusion$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/Inclusion$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/Inclusion$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/Inclusion$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Inclusion$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Inclusion$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Inclusion$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/Inclusion$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/Inclusion$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/Inclusion$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/Inclusion$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/Inclusion$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/Inclusion$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/Inclusion$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/Inclusion$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/Inclusion$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/translation\/Inclusion.html", "kind" : "trait"}, {"name" : "provingground.translation.MathExpr", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/MathExpr.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/MathExpr.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/MathExpr.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/MathExpr.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/MathExpr.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/MathExpr.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/MathExpr.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/MathExpr.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/MathExpr.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/MathExpr.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/MathExpr.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/MathExpr.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/MathExpr.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/MathExpr.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/MathExpr.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/MathExpr.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/MathExpr.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/MathExpr.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/MathExpr.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Expression in a language to represent terms in HoTT andtrees representing them in prose, including partially collapsed trees.", "object" : "provingground\/translation\/MathExpr$.html", "members_object" : [{"label" : "ThatIsSP", "tail" : "", "member" : "provingground.translation.MathExpr.ThatIsSP", "link" : "provingground\/translation\/MathExpr$.html#ThatIsSP", "kind" : "object"}, {"label" : "ThatIsSP", "tail" : "", "member" : "provingground.translation.MathExpr.ThatIsSP", "link" : "provingground\/translation\/MathExpr$.html#ThatIsSPextendsMathExpr.SententialPhrasewithProductwithSerializable", "kind" : "case class"}, {"label" : "DisjSP", "tail" : "", "member" : "provingground.translation.MathExpr.DisjSP", "link" : "provingground\/translation\/MathExpr$.html#DisjSP", "kind" : "object"}, {"label" : "DisjSP", "tail" : "", "member" : "provingground.translation.MathExpr.DisjSP", "link" : "provingground\/translation\/MathExpr$.html#DisjSPextendsMathExpr.SententialPhrasewithProductwithSerializable", "kind" : "case class"}, {"label" : "ConjSP", "tail" : "", "member" : "provingground.translation.MathExpr.ConjSP", "link" : "provingground\/translation\/MathExpr$.html#ConjSP", "kind" : "object"}, {"label" : "ConjSP", "tail" : "", "member" : "provingground.translation.MathExpr.ConjSP", "link" : "provingground\/translation\/MathExpr$.html#ConjSPextendsMathExpr.SententialPhrasewithProductwithSerializable", "kind" : "case class"}, {"label" : "NegSP", "tail" : "", "member" : "provingground.translation.MathExpr.NegSP", "link" : "provingground\/translation\/MathExpr$.html#NegSP", "kind" : "object"}, {"label" : "NegSP", "tail" : "", "member" : "provingground.translation.MathExpr.NegSP", "link" : "provingground\/translation\/MathExpr$.html#NegSPextendsMathExpr.SententialPhrasewithProductwithSerializable", "kind" : "case class"}, {"label" : "ExistentialSP", "tail" : "", "member" : "provingground.translation.MathExpr.ExistentialSP", "link" : "provingground\/translation\/MathExpr$.html#ExistentialSP", "kind" : "object"}, {"label" : "ExistentialSP", "tail" : "", "member" : "provingground.translation.MathExpr.ExistentialSP", "link" : "provingground\/translation\/MathExpr$.html#ExistentialSPextendsMathExpr.SententialPhrasewithProductwithSerializable", "kind" : "case class"}, {"label" : "ForAllSP", "tail" : "", "member" : "provingground.translation.MathExpr.ForAllSP", "link" : "provingground\/translation\/MathExpr$.html#ForAllSP", "kind" : "object"}, {"label" : "ForAllSP", "tail" : "", "member" : "provingground.translation.MathExpr.ForAllSP", "link" : "provingground\/translation\/MathExpr$.html#ForAllSPextendsMathExpr.SententialPhrasewithProductwithSerializable", "kind" : "case class"}, {"label" : "VerbPP", "tail" : "", "member" : "provingground.translation.MathExpr.VerbPP", "link" : "provingground\/translation\/MathExpr$.html#VerbPP", "kind" : "object"}, {"label" : "VerbPP", "tail" : "", "member" : "provingground.translation.MathExpr.VerbPP", "link" : "provingground\/translation\/MathExpr$.html#VerbPPextendsMathExpr.VerbPhrasewithProductwithSerializable", "kind" : "case class"}, {"label" : "IsPrep", "tail" : "", "member" : "provingground.translation.MathExpr.IsPrep", "link" : "provingground\/translation\/MathExpr$.html#IsPrep", "kind" : "object"}, {"label" : "IsPrep", "tail" : "", "member" : "provingground.translation.MathExpr.IsPrep", "link" : "provingground\/translation\/MathExpr$.html#IsPrepextendsMathExpr.VerbPhrasewithProductwithSerializable", "kind" : "case class"}, {"label" : "IsSuchThat", "tail" : "", "member" : "provingground.translation.MathExpr.IsSuchThat", "link" : "provingground\/translation\/MathExpr$.html#IsSuchThat", "kind" : "object"}, {"label" : "IsSuchThat", "tail" : "", "member" : "provingground.translation.MathExpr.IsSuchThat", "link" : "provingground\/translation\/MathExpr$.html#IsSuchThatextendsMathExpr.VerbPhrasewithProductwithSerializable", "kind" : "case class"}, {"label" : "IsAdjPrep", "tail" : "", "member" : "provingground.translation.MathExpr.IsAdjPrep", "link" : "provingground\/translation\/MathExpr$.html#IsAdjPrep", "kind" : "object"}, {"label" : "IsAdjPrep", "tail" : "", "member" : "provingground.translation.MathExpr.IsAdjPrep", "link" : "provingground\/translation\/MathExpr$.html#IsAdjPrepextendsMathExpr.VerbPhrasewithProductwithSerializable", "kind" : "case class"}, {"label" : "AreAdj", "tail" : "", "member" : "provingground.translation.MathExpr.AreAdj", "link" : "provingground\/translation\/MathExpr$.html#AreAdj", "kind" : "object"}, {"label" : "AreAdj", "tail" : "", "member" : "provingground.translation.MathExpr.AreAdj", "link" : "provingground\/translation\/MathExpr$.html#AreAdjextendsMathExpr.VerbPhrasewithProductwithSerializable", "kind" : "case class"}, {"label" : "IsAdj", "tail" : "", "member" : "provingground.translation.MathExpr.IsAdj", "link" : "provingground\/translation\/MathExpr$.html#IsAdj", "kind" : "object"}, {"label" : "IsAdj", "tail" : "", "member" : "provingground.translation.MathExpr.IsAdj", "link" : "provingground\/translation\/MathExpr$.html#IsAdjextendsMathExpr.VerbPhrasewithProductwithSerializable", "kind" : "case class"}, {"label" : "IsNoun", "tail" : "", "member" : "provingground.translation.MathExpr.IsNoun", "link" : "provingground\/translation\/MathExpr$.html#IsNoun", "kind" : "object"}, {"label" : "IsNoun", "tail" : "", "member" : "provingground.translation.MathExpr.IsNoun", "link" : "provingground\/translation\/MathExpr$.html#IsNounextendsMathExpr.VerbPhrasewithProductwithSerializable", "kind" : "case class"}, {"label" : "VPIf", "tail" : "", "member" : "provingground.translation.MathExpr.VPIf", "link" : "provingground\/translation\/MathExpr$.html#VPIf", "kind" : "object"}, {"label" : "VPIf", "tail" : "", "member" : "provingground.translation.MathExpr.VPIf", "link" : "provingground\/translation\/MathExpr$.html#VPIfextendsMathExprwithProductwithSerializable", "kind" : "case class"}, {"label" : "Exists", "tail" : "", "member" : "provingground.translation.MathExpr.Exists", "link" : "provingground\/translation\/MathExpr$.html#Exists", "kind" : "object"}, {"label" : "VerbAdj", "tail" : "", "member" : "provingground.translation.MathExpr.VerbAdj", "link" : "provingground\/translation\/MathExpr$.html#VerbAdj", "kind" : "object"}, {"label" : "VerbAdj", "tail" : "", "member" : "provingground.translation.MathExpr.VerbAdj", "link" : "provingground\/translation\/MathExpr$.html#VerbAdjextendsMathExpr.VerbPhrasewithProductwithSerializable", "kind" : "case class"}, {"label" : "Core", "tail" : "", "member" : "provingground.translation.MathExpr.Core", "link" : "provingground\/translation\/MathExpr$.html#Core", "kind" : "object"}, {"label" : "Core", "tail" : "", "member" : "provingground.translation.MathExpr.Core", "link" : "provingground\/translation\/MathExpr$.html#CoreextendsMathExprwithProductwithSerializable", "kind" : "case class"}, {"label" : "DP", "tail" : "", "member" : "provingground.translation.MathExpr.DP", "link" : "provingground\/translation\/MathExpr$.html#DP", "kind" : "object"}, {"label" : "DP", "tail" : "", "member" : "provingground.translation.MathExpr.DP", "link" : "provingground\/translation\/MathExpr$.html#DPextendsMathExprwithProductwithSerializable", "kind" : "case class"}, {"label" : "SuchThat", "tail" : "", "member" : "provingground.translation.MathExpr.SuchThat", "link" : "provingground\/translation\/MathExpr$.html#SuchThat", "kind" : "object"}, {"label" : "SuchThat", "tail" : "", "member" : "provingground.translation.MathExpr.SuchThat", "link" : "provingground\/translation\/MathExpr$.html#SuchThatextendsMathExpr.PostModifierwithProductwithSerializable", "kind" : "case class"}, {"label" : "PostModifier", "tail" : "", "member" : "provingground.translation.MathExpr.PostModifier", "link" : "provingground\/translation\/MathExpr$.html#PostModifier=provingground.translation.MathExpr", "kind" : "type"}, {"label" : "Variable", "tail" : "", "member" : "provingground.translation.MathExpr.Variable", "link" : "provingground\/translation\/MathExpr$.html#Variable", "kind" : "object"}, {"label" : "Variable", "tail" : "", "member" : "provingground.translation.MathExpr.Variable", "link" : "provingground\/translation\/MathExpr$.html#VariableextendsMathExpr.QuantTermwithProductwithSerializable", "kind" : "case class"}, {"label" : "QuantTerm", "tail" : "", "member" : "provingground.translation.MathExpr.QuantTerm", "link" : "provingground\/translation\/MathExpr$.html#QuantTerm=provingground.translation.MathExpr", "kind" : "type"}, {"label" : "PP", "tail" : "", "member" : "provingground.translation.MathExpr.PP", "link" : "provingground\/translation\/MathExpr$.html#PP", "kind" : "object"}, {"label" : "PP", "tail" : "", "member" : "provingground.translation.MathExpr.PP", "link" : "provingground\/translation\/MathExpr$.html#PPextendsMathExpr.PostModifierwithProductwithSerializable", "kind" : "case class"}, {"label" : "JJPP", "tail" : "", "member" : "provingground.translation.MathExpr.JJPP", "link" : "provingground\/translation\/MathExpr$.html#JJPP", "kind" : "object"}, {"label" : "JJPP", "tail" : "", "member" : "provingground.translation.MathExpr.JJPP", "link" : "provingground\/translation\/MathExpr$.html#JJPPextendsMathExpr.AdjectivalPhrasewithProductwithSerializable", "kind" : "case class"}, {"label" : "JJ", "tail" : "", "member" : "provingground.translation.MathExpr.JJ", "link" : "provingground\/translation\/MathExpr$.html#JJ", "kind" : "object"}, {"label" : "JJ", "tail" : "", "member" : "provingground.translation.MathExpr.JJ", "link" : "provingground\/translation\/MathExpr$.html#JJextendsMathExpr.AdjectivalPhrasewithProductwithSerializable", "kind" : "case class"}, {"label" : "AP", "tail" : "", "member" : "provingground.translation.MathExpr.AP", "link" : "provingground\/translation\/MathExpr$.html#AP", "kind" : "object"}, {"label" : "AP", "tail" : "", "member" : "provingground.translation.MathExpr.AP", "link" : "provingground\/translation\/MathExpr$.html#APextendsMathExpr.AdjectivalPhrasewithProductwithSerializable", "kind" : "case class"}, {"label" : "AdjectivalPhrase", "tail" : "", "member" : "provingground.translation.MathExpr.AdjectivalPhrase", "link" : "provingground\/translation\/MathExpr$.html#AdjectivalPhrase=provingground.translation.MathExpr", "kind" : "type"}, {"label" : "Determiner", "tail" : "", "member" : "provingground.translation.MathExpr.Determiner", "link" : "provingground\/translation\/MathExpr$.html#Determiner=provingground.translation.MathExpr", "kind" : "type"}, {"label" : "Determiner", "tail" : "", "member" : "provingground.translation.MathExpr.Determiner", "link" : "provingground\/translation\/MathExpr$.html#Determiner", "kind" : "object"}, {"label" : "Preposition", "tail" : "", "member" : "provingground.translation.MathExpr.Preposition", "link" : "provingground\/translation\/MathExpr$.html#Preposition=provingground.translation.MathExpr", "kind" : "type"}, {"label" : "Prep", "tail" : "", "member" : "provingground.translation.MathExpr.Prep", "link" : "provingground\/translation\/MathExpr$.html#Prep", "kind" : "object"}, {"label" : "Prep", "tail" : "", "member" : "provingground.translation.MathExpr.Prep", "link" : "provingground\/translation\/MathExpr$.html#PrepextendsMathExpr.PrepositionwithProductwithSerializable", "kind" : "case class"}, {"label" : "Preposition", "tail" : "", "member" : "provingground.translation.MathExpr.Preposition", "link" : "provingground\/translation\/MathExpr$.html#Preposition", "kind" : "object"}, {"label" : "NPVP", "tail" : "", "member" : "provingground.translation.MathExpr.NPVP", "link" : "provingground\/translation\/MathExpr$.html#NPVP", "kind" : "object"}, {"label" : "NPVP", "tail" : "", "member" : "provingground.translation.MathExpr.NPVP", "link" : "provingground\/translation\/MathExpr$.html#NPVPextendsMathExpr.SententialPhrasewithProductwithSerializable", "kind" : "case class"}, {"label" : "VerbObj", "tail" : "", "member" : "provingground.translation.MathExpr.VerbObj", "link" : "provingground\/translation\/MathExpr$.html#VerbObj", "kind" : "object"}, {"label" : "VerbObj", "tail" : "", "member" : "provingground.translation.MathExpr.VerbObj", "link" : "provingground\/translation\/MathExpr$.html#VerbObjextendsMathExpr.VerbPhrasewithProductwithSerializable", "kind" : "case class"}, {"label" : "NegVP", "tail" : "", "member" : "provingground.translation.MathExpr.NegVP", "link" : "provingground\/translation\/MathExpr$.html#NegVP", "kind" : "object"}, {"label" : "NegVP", "tail" : "", "member" : "provingground.translation.MathExpr.NegVP", "link" : "provingground\/translation\/MathExpr$.html#NegVPextendsMathExpr.VerbPhrasewithProductwithSerializable", "kind" : "case class"}, {"label" : "VB", "tail" : "", "member" : "provingground.translation.MathExpr.VB", "link" : "provingground\/translation\/MathExpr$.html#VB", "kind" : "object"}, {"label" : "VB", "tail" : "", "member" : "provingground.translation.MathExpr.VB", "link" : "provingground\/translation\/MathExpr$.html#VBextendsMathExpr.VerbPhrasewithProductwithSerializable", "kind" : "case class"}, {"label" : "VP", "tail" : "", "member" : "provingground.translation.MathExpr.VP", "link" : "provingground\/translation\/MathExpr$.html#VP", "kind" : "object"}, {"label" : "VP", "tail" : "", "member" : "provingground.translation.MathExpr.VP", "link" : "provingground\/translation\/MathExpr$.html#VPextendsMathExpr.VerbPhrasewithProductwithSerializable", "kind" : "case class"}, {"label" : "VerbPhrase", "tail" : "", "member" : "provingground.translation.MathExpr.VerbPhrase", "link" : "provingground\/translation\/MathExpr$.html#VerbPhrase=provingground.translation.MathExpr", "kind" : "type"}, {"label" : "DisjunctNP", "tail" : "", "member" : "provingground.translation.MathExpr.DisjunctNP", "link" : "provingground\/translation\/MathExpr$.html#DisjunctNP", "kind" : "object"}, {"label" : "DisjunctNP", "tail" : "", "member" : "provingground.translation.MathExpr.DisjunctNP", "link" : "provingground\/translation\/MathExpr$.html#DisjunctNPextendsMathExpr.NounPhrasewithProductwithSerializable", "kind" : "case class"}, {"label" : "ConjunctNP", "tail" : "", "member" : "provingground.translation.MathExpr.ConjunctNP", "link" : "provingground\/translation\/MathExpr$.html#ConjunctNP", "kind" : "object"}, {"label" : "ConjunctNP", "tail" : "", "member" : "provingground.translation.MathExpr.ConjunctNP", "link" : "provingground\/translation\/MathExpr$.html#ConjunctNPextendsMathExpr.NounPhrasewithProductwithSerializable", "kind" : "case class"}, {"label" : "Formula", "tail" : "", "member" : "provingground.translation.MathExpr.Formula", "link" : "provingground\/translation\/MathExpr$.html#Formula", "kind" : "object"}, {"label" : "Formula", "tail" : "", "member" : "provingground.translation.MathExpr.Formula", "link" : "provingground\/translation\/MathExpr$.html#FormulaextendsMathExpr.NounPhrasewithProductwithSerializable", "kind" : "case class"}, {"label" : "NN", "tail" : "", "member" : "provingground.translation.MathExpr.NN", "link" : "provingground\/translation\/MathExpr$.html#NN", "kind" : "object"}, {"label" : "NN", "tail" : "", "member" : "provingground.translation.MathExpr.NN", "link" : "provingground\/translation\/MathExpr$.html#NNextendsMathExpr.NounPhrasewithProductwithSerializable", "kind" : "case class"}, {"label" : "NP", "tail" : "", "member" : "provingground.translation.MathExpr.NP", "link" : "provingground\/translation\/MathExpr$.html#NP", "kind" : "object"}, {"label" : "NP", "tail" : "", "member" : "provingground.translation.MathExpr.NP", "link" : "provingground\/translation\/MathExpr$.html#NPextendsMathExpr.NounPhrasewithProductwithSerializable", "kind" : "case class"}, {"label" : "NounPhrase", "tail" : "", "member" : "provingground.translation.MathExpr.NounPhrase", "link" : "provingground\/translation\/MathExpr$.html#NounPhrase=provingground.translation.MathExpr", "kind" : "type"}, {"label" : "They", "tail" : "", "member" : "provingground.translation.MathExpr.They", "link" : "provingground\/translation\/MathExpr$.html#They", "kind" : "object"}, {"label" : "They", "tail" : "", "member" : "provingground.translation.MathExpr.They", "link" : "provingground\/translation\/MathExpr$.html#TheyextendsMathExprwithProductwithSerializable", "kind" : "case class"}, {"label" : "It", "tail" : "", "member" : "provingground.translation.MathExpr.It", "link" : "provingground\/translation\/MathExpr$.html#It", "kind" : "object"}, {"label" : "It", "tail" : "", "member" : "provingground.translation.MathExpr.It", "link" : "provingground\/translation\/MathExpr$.html#ItextendsMathExprwithProductwithSerializable", "kind" : "case class"}, {"label" : "Iff", "tail" : "", "member" : "provingground.translation.MathExpr.Iff", "link" : "provingground\/translation\/MathExpr$.html#Iff", "kind" : "object"}, {"label" : "Iff", "tail" : "", "member" : "provingground.translation.MathExpr.Iff", "link" : "provingground\/translation\/MathExpr$.html#IffextendsMathExpr.SententialPhrasewithProductwithSerializable", "kind" : "case class"}, {"label" : "IfThen", "tail" : "", "member" : "provingground.translation.MathExpr.IfThen", "link" : "provingground\/translation\/MathExpr$.html#IfThen", "kind" : "object"}, {"label" : "IfThen", "tail" : "", "member" : "provingground.translation.MathExpr.IfThen", "link" : "provingground\/translation\/MathExpr$.html#IfThenextendsMathExpr.SententialPhrasewithProductwithSerializable", "kind" : "case class"}, {"label" : "DisjuctSP", "tail" : "", "member" : "provingground.translation.MathExpr.DisjuctSP", "link" : "provingground\/translation\/MathExpr$.html#DisjuctSP", "kind" : "object"}, {"label" : "DisjuctSP", "tail" : "", "member" : "provingground.translation.MathExpr.DisjuctSP", "link" : "provingground\/translation\/MathExpr$.html#DisjuctSPextendsMathExpr.SententialPhrasewithProductwithSerializable", "kind" : "case class"}, {"label" : "ConjuctSP", "tail" : "", "member" : "provingground.translation.MathExpr.ConjuctSP", "link" : "provingground\/translation\/MathExpr$.html#ConjuctSP", "kind" : "object"}, {"label" : "ConjuctSP", "tail" : "", "member" : "provingground.translation.MathExpr.ConjuctSP", "link" : "provingground\/translation\/MathExpr$.html#ConjuctSPextendsMathExpr.SententialPhrasewithProductwithSerializable", "kind" : "case class"}, {"label" : "SP", "tail" : "", "member" : "provingground.translation.MathExpr.SP", "link" : "provingground\/translation\/MathExpr$.html#SP", "kind" : "object"}, {"label" : "SP", "tail" : "", "member" : "provingground.translation.MathExpr.SP", "link" : "provingground\/translation\/MathExpr$.html#SPextendsMathExpr.SententialPhrasewithProductwithSerializable", "kind" : "case class"}, {"label" : "SententialPhrase", "tail" : "", "member" : "provingground.translation.MathExpr.SententialPhrase", "link" : "provingground\/translation\/MathExpr$.html#SententialPhrase=provingground.translation.MathExpr", "kind" : "type"}, {"label" : "rwT", "tail" : "(): upickle.default.ReadWriter[T]", "member" : "provingground.translation.MathExpr.rwT", "link" : "provingground\/translation\/MathExpr$.html#rwT:upickle.default.ReadWriter[provingground.translation.MathExpr.T]", "kind" : "implicit def"}, {"label" : "T", "tail" : "", "member" : "provingground.translation.MathExpr.T", "link" : "provingground\/translation\/MathExpr$.html#T=edu.stanford.nlp.trees.Tree", "kind" : "type"}, {"label" : "tq", "tail" : ": String", "member" : "provingground.translation.MathExpr.tq", "link" : "provingground\/translation\/MathExpr$.html#tq:String", "kind" : "val"}, {"label" : "rw", "tail" : "(): upickle.default.ReadWriter[MathExpr]", "member" : "provingground.translation.MathExpr.rw", "link" : "provingground\/translation\/MathExpr$.html#rw:upickle.default.ReadWriter[provingground.translation.MathExpr]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/MathExpr$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/MathExpr$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/MathExpr$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/MathExpr$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/MathExpr$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/MathExpr$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/MathExpr$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/MathExpr$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/MathExpr$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/MathExpr$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/MathExpr$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/MathExpr$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/MathExpr$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/MathExpr$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/MathExpr$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/MathExpr$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/MathExpr$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/MathExpr$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/MathExpr$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/translation\/MathExpr.html", "kind" : "trait"}, {"name" : "provingground.translation.MathReader", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/MathReader.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/MathReader.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/MathReader.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/MathReader.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/MathReader.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/MathReader.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/MathReader.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/MathReader.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/MathReader.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/MathReader.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/MathReader.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/MathReader.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/MathReader.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/MathReader.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/MathReader.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/MathReader.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/MathReader.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/MathReader.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/MathReader.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "contexts", "tail" : "(doc: D): Map[Scoped[Statement[E]], Vector[Scoped[Statement[E]]]]", "member" : "provingground.translation.MathReader.contexts", "link" : "provingground\/translation\/MathReader.html#contexts(doc:D):Map[provingground.translation.Scoped[provingground.translation.Statement[E]],Vector[provingground.translation.Scoped[provingground.translation.Statement[E]]]]", "kind" : "abstract def"}, {"label" : "read", "tail" : "(doc: D): Vector[Scoped[Statement[E]]]", "member" : "provingground.translation.MathReader.read", "link" : "provingground\/translation\/MathReader.html#read(doc:D):Vector[provingground.translation.Scoped[provingground.translation.Statement[E]]]", "kind" : "abstract def"}], "shortDescription" : "", "object" : "provingground\/translation\/MathReader$.html", "members_object" : [{"label" : "nestedDocReader", "tail" : "(): MathReader[NestedDoc[Statement[E]], E]", "member" : "provingground.translation.MathReader.nestedDocReader", "link" : "provingground\/translation\/MathReader$.html#nestedDocReader[E]:provingground.translation.MathReader[provingground.translation.NestedDoc[provingground.translation.Statement[E]],E]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/MathReader$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/MathReader$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/MathReader$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/MathReader$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/MathReader$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/MathReader$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/MathReader$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/MathReader$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/MathReader$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/MathReader$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/MathReader$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/MathReader$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/MathReader$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/MathReader$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/MathReader$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/MathReader$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/MathReader$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/MathReader$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/MathReader$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/translation\/MathReader.html", "kind" : "trait"}, {"name" : "provingground.translation.MathText", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/MathText.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/MathText.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/MathText.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/MathText.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/MathText.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/MathText.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/MathText.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/MathText.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/MathText.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/MathText.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/MathText.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/MathText.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/MathText.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/MathText.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/MathText.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/MathText.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/MathText.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/MathText.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/MathText.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "object" : "provingground\/translation\/MathText$.html", "members_object" : [{"label" : "VariableType", "tail" : "", "member" : "provingground.translation.MathText.VariableType", "link" : "provingground\/translation\/MathText$.html#VariableType", "kind" : "object"}, {"label" : "VariableType", "tail" : "", "member" : "provingground.translation.MathText.VariableType", "link" : "provingground\/translation\/MathText$.html#VariableTypeextendsProductwithSerializable", "kind" : "case class"}, {"label" : "CopulaDefinition", "tail" : "", "member" : "provingground.translation.MathText.CopulaDefinition", "link" : "provingground\/translation\/MathText$.html#CopulaDefinition", "kind" : "object"}, {"label" : "CopulaDefinition", "tail" : "", "member" : "provingground.translation.MathText.CopulaDefinition", "link" : "provingground\/translation\/MathText$.html#CopulaDefinitionextendsMathExpr.SententialPhrasewithProductwithSerializable", "kind" : "case class"}, {"label" : "BiEquationalDefinition", "tail" : "", "member" : "provingground.translation.MathText.BiEquationalDefinition", "link" : "provingground\/translation\/MathText$.html#BiEquationalDefinition", "kind" : "object"}, {"label" : "BiEquationalDefinition", "tail" : "", "member" : "provingground.translation.MathText.BiEquationalDefinition", "link" : "provingground\/translation\/MathText$.html#BiEquationalDefinitionextendsMathExpr.SententialPhrasewithProductwithSerializable", "kind" : "case class"}, {"label" : "CopulaDefinitionSP", "tail" : "", "member" : "provingground.translation.MathText.CopulaDefinitionSP", "link" : "provingground\/translation\/MathText$.html#CopulaDefinitionSP", "kind" : "object"}, {"label" : "CopulaDefinitionSP", "tail" : "", "member" : "provingground.translation.MathText.CopulaDefinitionSP", "link" : "provingground\/translation\/MathText$.html#CopulaDefinitionSPextendsMathExpr.SententialPhrasewithProductwithSerializable", "kind" : "case class"}, {"label" : "BiEquationalDefinitionSP", "tail" : "", "member" : "provingground.translation.MathText.BiEquationalDefinitionSP", "link" : "provingground\/translation\/MathText$.html#BiEquationalDefinitionSP", "kind" : "object"}, {"label" : "BiEquationalDefinitionSP", "tail" : "", "member" : "provingground.translation.MathText.BiEquationalDefinitionSP", "link" : "provingground\/translation\/MathText$.html#BiEquationalDefinitionSPextendsMathExpr.SententialPhrasewithProductwithSerializable", "kind" : "case class"}, {"label" : "CopulaDefiniendum", "tail" : "", "member" : "provingground.translation.MathText.CopulaDefiniendum", "link" : "provingground\/translation\/MathText$.html#CopulaDefiniendum", "kind" : "object"}, {"label" : "CopulaDefiniendum", "tail" : "", "member" : "provingground.translation.MathText.CopulaDefiniendum", "link" : "provingground\/translation\/MathText$.html#CopulaDefiniendumextendsMathExprwithProductwithSerializable", "kind" : "case class"}, {"label" : "CopulaDefiniendumNP", "tail" : "", "member" : "provingground.translation.MathText.CopulaDefiniendumNP", "link" : "provingground\/translation\/MathText$.html#CopulaDefiniendumNP", "kind" : "object"}, {"label" : "CopulaDefiniendumNP", "tail" : "", "member" : "provingground.translation.MathText.CopulaDefiniendumNP", "link" : "provingground\/translation\/MathText$.html#CopulaDefiniendumNPextendsMathExpr.NounPhrasewithProductwithSerializable", "kind" : "case class"}, {"label" : "BiImplicationDefiniendum", "tail" : "", "member" : "provingground.translation.MathText.BiImplicationDefiniendum", "link" : "provingground\/translation\/MathText$.html#BiImplicationDefiniendum", "kind" : "object"}, {"label" : "BiImplicationDefiniendum", "tail" : "", "member" : "provingground.translation.MathText.BiImplicationDefiniendum", "link" : "provingground\/translation\/MathText$.html#BiImplicationDefiniendumextendsMathExprwithProductwithSerializable", "kind" : "case class"}, {"label" : "BiImplicationDefiniendumSP", "tail" : "", "member" : "provingground.translation.MathText.BiImplicationDefiniendumSP", "link" : "provingground\/translation\/MathText$.html#BiImplicationDefiniendumSP", "kind" : "object"}, {"label" : "BiImplicationDefiniendumSP", "tail" : "", "member" : "provingground.translation.MathText.BiImplicationDefiniendumSP", "link" : "provingground\/translation\/MathText$.html#BiImplicationDefiniendumSPextendsMathExpr.SententialPhrasewithProductwithSerializable", "kind" : "case class"}, {"label" : "Assume", "tail" : "", "member" : "provingground.translation.MathText.Assume", "link" : "provingground\/translation\/MathText$.html#AssumeextendsMathTextwithProductwithSerializable", "kind" : "case class"}, {"label" : "Assert", "tail" : "", "member" : "provingground.translation.MathText.Assert", "link" : "provingground\/translation\/MathText$.html#AssertextendsMathTextwithProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/MathText$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/MathText$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/MathText$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/MathText$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/MathText$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/MathText$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/MathText$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/MathText$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/MathText$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/MathText$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/MathText$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/MathText$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/MathText$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/MathText$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/MathText$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/MathText$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/MathText$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/MathText$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/MathText$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/translation\/MathText.html", "kind" : "trait"}, {"name" : "provingground.translation.MathWriter", "members_trait" : [{"label" : "appendTry", "tail" : "(s: ⇒ Statement[E], doc: D): D", "member" : "provingground.translation.MathWriter.appendTry", "link" : "provingground\/translation\/MathWriter.html#appendTry(s:=>provingground.translation.Statement[E],doc:D):D", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/MathWriter.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/MathWriter.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/MathWriter.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/MathWriter.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/MathWriter.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/MathWriter.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/MathWriter.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/MathWriter.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/MathWriter.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/MathWriter.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/MathWriter.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/MathWriter.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/MathWriter.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/MathWriter.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/MathWriter.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/MathWriter.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/MathWriter.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/MathWriter.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/MathWriter.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "end", "tail" : "(e: Beginning, doc: D): D", "member" : "provingground.translation.MathWriter.end", "link" : "provingground\/translation\/MathWriter.html#end(e:provingground.translation.Statement.Beginning,doc:D):D", "kind" : "abstract def"}, {"label" : "begin", "tail" : "(b: Beginning, doc: D): D", "member" : "provingground.translation.MathWriter.begin", "link" : "provingground\/translation\/MathWriter.html#begin(b:provingground.translation.Statement.Beginning,doc:D):D", "kind" : "abstract def"}, {"label" : "append", "tail" : "(s: Statement[E], doc: D): D", "member" : "provingground.translation.MathWriter.append", "link" : "provingground\/translation\/MathWriter.html#append(s:provingground.translation.Statement[E],doc:D):D", "kind" : "abstract def"}], "shortDescription" : "Type-class for  writing to a document of type D in terms of expressions of type E.", "object" : "provingground\/translation\/MathWriter$.html", "members_object" : [{"label" : "nestedDocWriter", "tail" : "(): MathWriter[NestedDoc[Statement[E]], E]", "member" : "provingground.translation.MathWriter.nestedDocWriter", "link" : "provingground\/translation\/MathWriter$.html#nestedDocWriter[E]:provingground.translation.MathWriter[provingground.translation.NestedDoc[provingground.translation.Statement[E]],E]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/MathWriter$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/MathWriter$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/MathWriter$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/MathWriter$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/MathWriter$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/MathWriter$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/MathWriter$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/MathWriter$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/MathWriter$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/MathWriter$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/MathWriter$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/MathWriter$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/MathWriter$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/MathWriter$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/MathWriter$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/MathWriter$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/MathWriter$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/MathWriter$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/MathWriter$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/translation\/MathWriter.html", "kind" : "trait"}, {"name" : "provingground.translation.NestedDoc", "members_trait" : [{"label" : "begin", "tail" : "(label: L): AppendOpenBlock[T]", "member" : "provingground.translation.NestedDoc.begin", "link" : "provingground\/translation\/NestedDoc.html#begin[L](label:L):provingground.translation.NestedDoc.AppendOpenBlock[T]", "kind" : "def"}, {"label" : "beginSimple", "tail" : "(): AppendOpenBlock[T]", "member" : "provingground.translation.NestedDoc.beginSimple", "link" : "provingground\/translation\/NestedDoc.html#beginSimple:provingground.translation.NestedDoc.AppendOpenBlock[T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/NestedDoc.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/NestedDoc.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/NestedDoc.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/NestedDoc.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/NestedDoc.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/NestedDoc.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/NestedDoc.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/NestedDoc.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/NestedDoc.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/NestedDoc.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/NestedDoc.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/NestedDoc.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/NestedDoc.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/NestedDoc.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/NestedDoc.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/NestedDoc.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/NestedDoc.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/NestedDoc.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/NestedDoc.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "contexts", "tail" : "(): Map[Scoped[T], Vector[Scoped[T]]]", "member" : "provingground.translation.NestedDoc.contexts", "link" : "provingground\/translation\/NestedDoc.html#contexts:Map[provingground.translation.Scoped[T],Vector[provingground.translation.Scoped[T]]]", "kind" : "abstract def"}, {"label" : "read", "tail" : "(): Vector[Scoped[T]]", "member" : "provingground.translation.NestedDoc.read", "link" : "provingground\/translation\/NestedDoc.html#read:Vector[provingground.translation.Scoped[T]]", "kind" : "abstract def"}, {"label" : "export", "tail" : "(): (Scoped[T]) ⇒ Scoped[T]", "member" : "provingground.translation.NestedDoc.export", "link" : "provingground\/translation\/NestedDoc.html#export:provingground.translation.Scoped[T]=>provingground.translation.Scoped[T]", "kind" : "abstract def"}, {"label" : "end", "tail" : "(label: L): NestedDoc[T]", "member" : "provingground.translation.NestedDoc.end", "link" : "provingground\/translation\/NestedDoc.html#end[L](label:L):provingground.translation.NestedDoc[T]", "kind" : "abstract def"}, {"label" : "endSimple", "tail" : "(): NestedDoc[T]", "member" : "provingground.translation.NestedDoc.endSimple", "link" : "provingground\/translation\/NestedDoc.html#endSimple:provingground.translation.NestedDoc[T]", "kind" : "abstract def"}, {"label" : "sameLabel", "tail" : "(label: X): Boolean", "member" : "provingground.translation.NestedDoc.sameLabel", "link" : "provingground\/translation\/NestedDoc.html#sameLabel[X](label:X):Boolean", "kind" : "abstract def"}, {"label" : "hasLabel", "tail" : "(): Boolean", "member" : "provingground.translation.NestedDoc.hasLabel", "link" : "provingground\/translation\/NestedDoc.html#hasLabel:Boolean", "kind" : "abstract def"}, {"label" : "append", "tail" : "(t: T): NestedDoc[T]", "member" : "provingground.translation.NestedDoc.append", "link" : "provingground\/translation\/NestedDoc.html#append(t:T):provingground.translation.NestedDoc[T]", "kind" : "abstract def"}], "shortDescription" : "", "object" : "provingground\/translation\/NestedDoc$.html", "members_object" : [{"label" : "AppendOpenBlock", "tail" : "", "member" : "provingground.translation.NestedDoc.AppendOpenBlock", "link" : "provingground\/translation\/NestedDoc$.html#AppendOpenBlock[T]extendsNestedDoc[T]withNestedDoc.RecBlockDoc[T]withProductwithSerializable", "kind" : "case class"}, {"label" : "AppendBlock", "tail" : "", "member" : "provingground.translation.NestedDoc.AppendBlock", "link" : "provingground\/translation\/NestedDoc$.html#AppendBlock[T]extendsNestedDoc.ClosedDoc[T]withNestedDoc.RecBlockDoc[T]withProductwithSerializable", "kind" : "case class"}, {"label" : "Append", "tail" : "", "member" : "provingground.translation.NestedDoc.Append", "link" : "provingground\/translation\/NestedDoc$.html#Append[T]extendsNestedDoc.ClosedDoc[T]withNestedDoc.RecDoc[T]withProductwithSerializable", "kind" : "case class"}, {"label" : "RecBlockDoc", "tail" : "", "member" : "provingground.translation.NestedDoc.RecBlockDoc", "link" : "provingground\/translation\/NestedDoc$.html#RecBlockDoc[T]extendsNestedDoc.RecDoc[T]", "kind" : "trait"}, {"label" : "RecDoc", "tail" : "", "member" : "provingground.translation.NestedDoc.RecDoc", "link" : "provingground\/translation\/NestedDoc$.html#RecDoc[T]extendsAnyRef", "kind" : "trait"}, {"label" : "SimpleEmpty", "tail" : "", "member" : "provingground.translation.NestedDoc.SimpleEmpty", "link" : "provingground\/translation\/NestedDoc$.html#SimpleEmpty[T]extendsNestedDoc.Empty[T]withProductwithSerializable", "kind" : "case class"}, {"label" : "LabelledEmpty", "tail" : "", "member" : "provingground.translation.NestedDoc.LabelledEmpty", "link" : "provingground\/translation\/NestedDoc$.html#LabelledEmpty[L,T]extendsNestedDoc.Empty[T]withProductwithSerializable", "kind" : "case class"}, {"label" : "Empty", "tail" : "", "member" : "provingground.translation.NestedDoc.Empty", "link" : "provingground\/translation\/NestedDoc$.html#Empty[T]extendsNestedDoc.ClosedDoc[T]", "kind" : "trait"}, {"label" : "ClosedDoc", "tail" : "", "member" : "provingground.translation.NestedDoc.ClosedDoc", "link" : "provingground\/translation\/NestedDoc$.html#ClosedDoc[T]extendsNestedDoc[T]", "kind" : "trait"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/NestedDoc$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/NestedDoc$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/NestedDoc$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/NestedDoc$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/NestedDoc$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/NestedDoc$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/NestedDoc$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/NestedDoc$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/NestedDoc$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/NestedDoc$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/NestedDoc$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/NestedDoc$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/NestedDoc$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/NestedDoc$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/NestedDoc$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/NestedDoc$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/NestedDoc$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/NestedDoc$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/NestedDoc$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/translation\/NestedDoc.html", "kind" : "trait"}, {"name" : "provingground.translation.NLPHoTT", "shortDescription" : "Parses prose to HoTT Gives context-free expressions, not actual typed terms.", "object" : "provingground\/translation\/NLPHoTT$.html", "members_object" : [{"label" : "parse", "tail" : ": (ProseTree) ⇒ Term", "member" : "provingground.translation.NLPHoTT.parse", "link" : "provingground\/translation\/NLPHoTT$.html#parse:provingground.translation.NlpProse.ProseTree=>provingground.translation.TheoryTypes.Term", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/NLPHoTT$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/NLPHoTT$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/NLPHoTT$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/NLPHoTT$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/NLPHoTT$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/NLPHoTT$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/NLPHoTT$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/NLPHoTT$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/NLPHoTT$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/NLPHoTT$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/NLPHoTT$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/NLPHoTT$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/NLPHoTT$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/NLPHoTT$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/NLPHoTT$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/NLPHoTT$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/NLPHoTT$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/NLPHoTT$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/NLPHoTT$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.translation.NlpProse", "shortDescription" : "Stanford dependency trees and associated methods", "object" : "provingground\/translation\/NlpProse$.html", "members_object" : [{"label" : "Parataxis", "tail" : "", "member" : "provingground.translation.NlpProse.Parataxis", "link" : "provingground\/translation\/NlpProse$.html#Parataxis", "kind" : "object"}, {"label" : "Which", "tail" : "", "member" : "provingground.translation.NlpProse.Which", "link" : "provingground\/translation\/NlpProse$.html#Which", "kind" : "object"}, {"label" : "Cop", "tail" : "", "member" : "provingground.translation.NlpProse.Cop", "link" : "provingground\/translation\/NlpProse$.html#Cop", "kind" : "object"}, {"label" : "Ccomp", "tail" : "", "member" : "provingground.translation.NlpProse.Ccomp", "link" : "provingground\/translation\/NlpProse$.html#Ccomp", "kind" : "object"}, {"label" : "Rcmod", "tail" : "", "member" : "provingground.translation.NlpProse.Rcmod", "link" : "provingground\/translation\/NlpProse$.html#Rcmod", "kind" : "object"}, {"label" : "Nsubj", "tail" : "", "member" : "provingground.translation.NlpProse.Nsubj", "link" : "provingground\/translation\/NlpProse$.html#Nsubj", "kind" : "object"}, {"label" : "CopRel", "tail" : "", "member" : "provingground.translation.NlpProse.CopRel", "link" : "provingground\/translation\/NlpProse$.html#CopRel", "kind" : "object"}, {"label" : "Lt", "tail" : "", "member" : "provingground.translation.NlpProse.Lt", "link" : "provingground\/translation\/NlpProse$.html#Lt", "kind" : "object"}, {"label" : "Gt", "tail" : "", "member" : "provingground.translation.NlpProse.Gt", "link" : "provingground\/translation\/NlpProse$.html#Gt", "kind" : "object"}, {"label" : "QuantMod", "tail" : "", "member" : "provingground.translation.NlpProse.QuantMod", "link" : "provingground\/translation\/NlpProse$.html#QuantMod", "kind" : "object"}, {"label" : "IfMark", "tail" : "", "member" : "provingground.translation.NlpProse.IfMark", "link" : "provingground\/translation\/NlpProse$.html#IfMark", "kind" : "object"}, {"label" : "Advcl", "tail" : "", "member" : "provingground.translation.NlpProse.Advcl", "link" : "provingground\/translation\/NlpProse$.html#Advcl", "kind" : "object"}, {"label" : "Argument", "tail" : "", "member" : "provingground.translation.NlpProse.Argument", "link" : "provingground\/translation\/NlpProse$.html#Argument", "kind" : "object"}, {"label" : "Modifier", "tail" : "", "member" : "provingground.translation.NlpProse.Modifier", "link" : "provingground\/translation\/NlpProse$.html#Modifier", "kind" : "object"}, {"label" : "Prep", "tail" : "", "member" : "provingground.translation.NlpProse.Prep", "link" : "provingground\/translation\/NlpProse$.html#Prep", "kind" : "object"}, {"label" : "Conj", "tail" : "", "member" : "provingground.translation.NlpProse.Conj", "link" : "provingground\/translation\/NlpProse$.html#Conj", "kind" : "object"}, {"label" : "TypeListMatch", "tail" : "", "member" : "provingground.translation.NlpProse.TypeListMatch", "link" : "provingground\/translation\/NlpProse$.html#TypeListMatchextendsAnyRef", "kind" : "class"}, {"label" : "TypeWordMatch", "tail" : "", "member" : "provingground.translation.NlpProse.TypeWordMatch", "link" : "provingground\/translation\/NlpProse$.html#TypeWordMatchextendsAnyRef", "kind" : "class"}, {"label" : "TypeMatch", "tail" : "", "member" : "provingground.translation.NlpProse.TypeMatch", "link" : "provingground\/translation\/NlpProse$.html#TypeMatchextendsAnyRef", "kind" : "class"}, {"label" : "ProseExtractor", "tail" : "", "member" : "provingground.translation.NlpProse.ProseExtractor", "link" : "provingground\/translation\/NlpProse$.html#ProseExtractor[A]extendsAnyRef", "kind" : "class"}, {"label" : "mweFold", "tail" : "(t: ProseTree): ProseTree", "member" : "provingground.translation.NlpProse.mweFold", "link" : "provingground\/translation\/NlpProse$.html#mweFold(t:provingground.translation.NlpProse.ProseTree):provingground.translation.NlpProse.ProseTree", "kind" : "def"}, {"label" : "mweMerge", "tail" : "(t: ProseTree, d: DepRel): DepRel", "member" : "provingground.translation.NlpProse.mweMerge", "link" : "provingground\/translation\/NlpProse$.html#mweMerge(t:provingground.translation.NlpProse.ProseTree,d:provingground.translation.NlpProse.DepRel):provingground.translation.NlpProse.DepRel", "kind" : "def"}, {"label" : "SplitTree", "tail" : "", "member" : "provingground.translation.NlpProse.SplitTree", "link" : "provingground\/translation\/NlpProse$.html#SplitTreeextendsProductwithSerializable", "kind" : "case class"}, {"label" : "mweTail", "tail" : "(t: ProseTree, node: Token): Token", "member" : "provingground.translation.NlpProse.mweTail", "link" : "provingground\/translation\/NlpProse$.html#mweTail(t:provingground.translation.NlpProse.ProseTree,node:provingground.translation.NlpProse.Token):provingground.translation.NlpProse.Token", "kind" : "def"}, {"label" : "ProseTree", "tail" : "", "member" : "provingground.translation.NlpProse.ProseTree", "link" : "provingground\/translation\/NlpProse$.html#ProseTreeextendsNlpProse.ParseDatawithProductwithSerializable", "kind" : "case class"}, {"label" : "ProseTree", "tail" : "", "member" : "provingground.translation.NlpProse.ProseTree", "link" : "provingground\/translation\/NlpProse$.html#ProseTree", "kind" : "object"}, {"label" : "findroot", "tail" : "(t: List[DepRel]): Token", "member" : "provingground.translation.NlpProse.findroot", "link" : "provingground\/translation\/NlpProse$.html#findroot(t:List[provingground.translation.NlpProse.DepRel]):provingground.translation.NlpProse.Token", "kind" : "def"}, {"label" : "DepRel", "tail" : "", "member" : "provingground.translation.NlpProse.DepRel", "link" : "provingground\/translation\/NlpProse$.html#DepRelextendsProductwithSerializable", "kind" : "case class"}, {"label" : "Token", "tail" : "", "member" : "provingground.translation.NlpProse.Token", "link" : "provingground\/translation\/NlpProse$.html#TokenextendsProductwithSerializable", "kind" : "case class"}, {"label" : "ParseData", "tail" : "", "member" : "provingground.translation.NlpProse.ParseData", "link" : "provingground\/translation\/NlpProse$.html#ParseDataextendsAnyRef", "kind" : "trait"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/NlpProse$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/NlpProse$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/NlpProse$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/NlpProse$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/NlpProse$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/NlpProse$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/NlpProse$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/NlpProse$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/NlpProse$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/NlpProse$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/NlpProse$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/NlpProse$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/NlpProse$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/NlpProse$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/NlpProse$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/NlpProse$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/NlpProse$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/NlpProse$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/NlpProse$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.translation.OptRestriction", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/OptRestriction.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/OptRestriction.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/OptRestriction.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/OptRestriction.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/OptRestriction.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/OptRestriction.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/OptRestriction.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/OptRestriction.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/OptRestriction.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/OptRestriction.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/OptRestriction.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/OptRestriction.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/OptRestriction.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/OptRestriction.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/OptRestriction.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/OptRestriction.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/OptRestriction.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/OptRestriction.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/OptRestriction.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "restrict", "tail" : "(): (Option[Y[I]]) ⇒ Option[X[I]]", "member" : "provingground.translation.ConeRestriction.restrict", "link" : "provingground\/translation\/OptRestriction.html#restrict[I]:G[Y[I]]=>G[X[I]]", "kind" : "abstract def"}], "shortDescription" : "restriction on optional functor", "object" : "provingground\/translation\/OptRestriction$.html", "members_object" : [{"label" : "pairRestriction", "tail" : "(rest1: OptRestriction[X1, Y1], rest2: OptRestriction[X2, Y2]): OptRestriction[[A](X1[A], X2[A]), [A](Y1[A], Y2[A])]", "member" : "provingground.translation.OptRestriction.pairRestriction", "link" : "provingground\/translation\/OptRestriction$.html#pairRestriction[X1[_],Y1[_],X2[_],Y2[_],G[_]](implicitrest1:provingground.translation.OptRestriction[X1,Y1],implicitrest2:provingground.translation.OptRestriction[X2,Y2]):provingground.translation.OptRestriction[[A](X1[A],X2[A]),[A](Y1[A],Y2[A])]", "kind" : "implicit def"}, {"label" : "subtypRestriction", "tail" : "(): OptRestriction[X, Y]", "member" : "provingground.translation.OptRestriction.subtypRestriction", "link" : "provingground\/translation\/OptRestriction$.html#subtypRestriction[X[_],Y[_]>:X[_]]:provingground.translation.OptRestriction[X,Y]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/OptRestriction$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/OptRestriction$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/OptRestriction$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/OptRestriction$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/OptRestriction$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/OptRestriction$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/OptRestriction$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/OptRestriction$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/OptRestriction$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/OptRestriction$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/OptRestriction$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/OptRestriction$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/OptRestriction$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/OptRestriction$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/OptRestriction$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/OptRestriction$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/OptRestriction$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/OptRestriction$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/OptRestriction$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/translation\/OptRestriction.html", "kind" : "trait"}, {"name" : "provingground.translation.PennTrees", "shortDescription" : "", "object" : "provingground\/translation\/PennTrees$.html", "members_object" : [{"label" : "sentence", "tail" : "(children: Vector[Tree]): Tree", "member" : "provingground.translation.PennTrees.sentence", "link" : "provingground\/translation\/PennTrees$.html#sentence(children:Vector[edu.stanford.nlp.trees.Tree]):edu.stanford.nlp.trees.Tree", "kind" : "def"}, {"label" : "mkTree", "tail" : "(children: Vector[Tree], tag: String, parent: Tree): Tree", "member" : "provingground.translation.PennTrees.mkTree", "link" : "provingground\/translation\/PennTrees$.html#mkTree(children:Vector[edu.stanford.nlp.trees.Tree],tag:String,parent:edu.stanford.nlp.trees.Tree):edu.stanford.nlp.trees.Tree", "kind" : "def"}, {"label" : "ShowString", "tail" : "", "member" : "provingground.translation.PennTrees.ShowString", "link" : "provingground\/translation\/PennTrees$.html#ShowStringextendsAnyRef", "kind" : "implicit class"}, {"label" : "ShowModel", "tail" : "", "member" : "provingground.translation.PennTrees.ShowModel", "link" : "provingground\/translation\/PennTrees$.html#ShowModelextendsAnyRef", "kind" : "implicit class"}, {"label" : "model", "tail" : "(t: Tree): TreeModel", "member" : "provingground.translation.PennTrees.model", "link" : "provingground\/translation\/PennTrees$.html#model(t:edu.stanford.nlp.trees.Tree):provingground.translation.TreeModel", "kind" : "def"}, {"label" : "DashWordDash", "tail" : "", "member" : "provingground.translation.PennTrees.DashWordDash", "link" : "provingground\/translation\/PennTrees$.html#DashWordDash", "kind" : "object"}, {"label" : "DashDashWord", "tail" : "", "member" : "provingground.translation.PennTrees.DashDashWord", "link" : "provingground\/translation\/PennTrees$.html#DashDashWord", "kind" : "object"}, {"label" : "DashWord", "tail" : "", "member" : "provingground.translation.PennTrees.DashWord", "link" : "provingground\/translation\/PennTrees$.html#DashWord", "kind" : "object"}, {"label" : "WordDashDash", "tail" : "", "member" : "provingground.translation.PennTrees.WordDashDash", "link" : "provingground\/translation\/PennTrees$.html#WordDashDash", "kind" : "object"}, {"label" : "WordDash", "tail" : "", "member" : "provingground.translation.PennTrees.WordDash", "link" : "provingground\/translation\/PennTrees$.html#WordDash", "kind" : "object"}, {"label" : "RightBinTree", "tail" : "", "member" : "provingground.translation.PennTrees.RightBinTree", "link" : "provingground\/translation\/PennTrees$.html#RightBinTree", "kind" : "object"}, {"label" : "LeftBinTree", "tail" : "", "member" : "provingground.translation.PennTrees.LeftBinTree", "link" : "provingground\/translation\/PennTrees$.html#LeftBinTree", "kind" : "object"}, {"label" : "Twig", "tail" : "", "member" : "provingground.translation.PennTrees.Twig", "link" : "provingground\/translation\/PennTrees$.html#Twig", "kind" : "object"}, {"label" : "Node", "tail" : "", "member" : "provingground.translation.PennTrees.Node", "link" : "provingground\/translation\/PennTrees$.html#Node", "kind" : "object"}, {"label" : "Leaf", "tail" : "", "member" : "provingground.translation.PennTrees.Leaf", "link" : "provingground\/translation\/PennTrees$.html#Leaf", "kind" : "object"}, {"label" : "fromJson", "tail" : "(js: Value): Tree", "member" : "provingground.translation.PennTrees.fromJson", "link" : "provingground\/translation\/PennTrees$.html#fromJson(js:ujson.Js.Value):edu.stanford.nlp.trees.Tree", "kind" : "def"}, {"label" : "toJson", "tail" : "(tree: Tree): Value", "member" : "provingground.translation.PennTrees.toJson", "link" : "provingground\/translation\/PennTrees$.html#toJson(tree:edu.stanford.nlp.trees.Tree):ujson.Js.Value", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/PennTrees$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/PennTrees$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/PennTrees$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/PennTrees$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/PennTrees$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/PennTrees$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/PennTrees$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/PennTrees$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/PennTrees$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/PennTrees$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/PennTrees$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/PennTrees$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/PennTrees$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/PennTrees$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/PennTrees$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/PennTrees$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/PennTrees$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/PennTrees$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/PennTrees$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.translation.QuasiInclHList", "shortDescription" : "inclusion of type Y in F(X) with F(_) an HList", "members_class" : [{"member" : "provingground.translation.QuasiInclHList#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/QuasiInclHList.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/QuasiInclHList.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/QuasiInclHList.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/QuasiInclHList.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/QuasiInclHList.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/QuasiInclHList.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/QuasiInclHList.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/QuasiInclHList.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/QuasiInclHList.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/QuasiInclHList.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/QuasiInclHList.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/QuasiInclHList.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/QuasiInclHList.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/QuasiInclHList.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/QuasiInclHList.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/QuasiInclHList.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/QuasiInclHList.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/QuasiInclHList.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/QuasiInclHList.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "proj", "tail" : "(fa: F[X]): Option[Y]", "member" : "provingground.translation.QuasiInclHList.proj", "link" : "provingground\/translation\/QuasiInclHList.html#proj(fa:F[X]):Option[Y]", "kind" : "abstract def"}, {"label" : "incl", "tail" : "(y: Y): F[X]", "member" : "provingground.translation.QuasiInclHList.incl", "link" : "provingground\/translation\/QuasiInclHList.html#incl(y:Y):F[X]", "kind" : "abstract def"}], "class" : "provingground\/translation\/QuasiInclHList.html", "kind" : "class"}, {"name" : "provingground.translation.QuasiInclusion", "shortDescription" : "inclusion of type Y in F(X)", "object" : "provingground\/translation\/QuasiInclusion$.html", "members_class" : [{"member" : "provingground.translation.QuasiInclusion#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/QuasiInclusion.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/QuasiInclusion.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/QuasiInclusion.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/QuasiInclusion.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/QuasiInclusion.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/QuasiInclusion.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/QuasiInclusion.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/QuasiInclusion.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/QuasiInclusion.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/QuasiInclusion.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/QuasiInclusion.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/QuasiInclusion.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/QuasiInclusion.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/QuasiInclusion.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/QuasiInclusion.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/QuasiInclusion.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/QuasiInclusion.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/QuasiInclusion.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/QuasiInclusion.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "proj", "tail" : "(fa: F[X]): Option[Y]", "member" : "provingground.translation.QuasiInclusion.proj", "link" : "provingground\/translation\/QuasiInclusion.html#proj(fa:F[X]):Option[Y]", "kind" : "abstract def"}, {"label" : "incl", "tail" : "(y: Y): F[X]", "member" : "provingground.translation.QuasiInclusion.incl", "link" : "provingground\/translation\/QuasiInclusion.html#incl(y:Y):F[X]", "kind" : "abstract def"}], "members_object" : [{"label" : "travQI", "tail" : "(arg0: Traverse[F], arg1: Traverse[G], qi: QuasiInclusion[X, Y, F]): QuasiInclusion[X, G[Y], [A]G[F[A]]]", "member" : "provingground.translation.QuasiInclusion.travQI", "link" : "provingground\/translation\/QuasiInclusion$.html#travQI[X,Y,F[_],G[_]](implicitevidence$7:cats.Traverse[F],implicitevidence$8:cats.Traverse[G],implicitqi:provingground.translation.QuasiInclusion[X,Y,F]):provingground.translation.QuasiInclusion[X,G[Y],[A]G[F[A]]]", "kind" : "implicit def"}, {"label" : "genericIncl", "tail" : "(arg0: Traverse[F1], gen: Lazy[Aux[Y, R]], qi: QuasiInclHList[X, R, F1]): QuasiInclHList[X, Y, F1]", "member" : "provingground.translation.QuasiInclusion.genericIncl", "link" : "provingground\/translation\/QuasiInclusion$.html#genericIncl[X,Y,R,F1[_]<:shapeless.HList](implicitevidence$6:cats.Traverse[F1],implicitgen:shapeless.Lazy[shapeless.Generic.Aux[Y,R]],implicitqi:provingground.translation.QuasiInclHList[X,R,F1]):provingground.translation.QuasiInclHList[X,Y,F1]", "kind" : "implicit def"}, {"label" : "hConsIncl", "tail" : "(arg0: Traverse[F1], arg1: Traverse[F2], qi1: Lazy[QuasiInclusion[X, Y1, F1]], qi2: QuasiInclHList[X, Y2, F2]): QuasiInclHList[X, ::[Y1, Y2], [A]::[F1[A], F2[A]]]", "member" : "provingground.translation.QuasiInclusion.hConsIncl", "link" : "provingground\/translation\/QuasiInclusion$.html#hConsIncl[X,Y1,Y2<:shapeless.HList,F1[_],F2[_]<:shapeless.HList](implicitevidence$4:cats.Traverse[F1],implicitevidence$5:cats.Traverse[F2],implicitqi1:shapeless.Lazy[provingground.translation.QuasiInclusion[X,Y1,F1]],implicitqi2:provingground.translation.QuasiInclHList[X,Y2,F2]):provingground.translation.QuasiInclHList[X,Y1::Y2,[A]F1[A]::F2[A]]", "kind" : "implicit def"}, {"label" : "hnilIncl", "tail" : "(): QuasiInclHList[X, HNil, HN]", "member" : "provingground.translation.QuasiInclusion.hnilIncl", "link" : "provingground\/translation\/QuasiInclusion$.html#hnilIncl[X]:provingground.translation.QuasiInclHList[X,shapeless.HNil,provingground.translation.Functors.HN]", "kind" : "implicit def"}, {"label" : "numQI", "tail" : "(arg0: Numeric[NT]): QuasiInclusion[X, NT, [A]NT]", "member" : "provingground.translation.QuasiInclusion.numQI", "link" : "provingground\/translation\/QuasiInclusion$.html#numQI[X,NT](implicitevidence$3:Numeric[NT]):provingground.translation.QuasiInclusion[X,NT,[A]NT]", "kind" : "implicit def"}, {"label" : "stringQI", "tail" : "(): QuasiInclusion[X, String, [A]String]", "member" : "provingground.translation.QuasiInclusion.stringQI", "link" : "provingground\/translation\/QuasiInclusion$.html#stringQI[X]:provingground.translation.QuasiInclusion[X,String,[A]String]", "kind" : "implicit def"}, {"label" : "constQI", "tail" : "(): QuasiInclusion[X, Cnst, [A]Cnst]", "member" : "provingground.translation.QuasiInclusion.constQI", "link" : "provingground\/translation\/QuasiInclusion$.html#constQI[X,Cnst]:provingground.translation.QuasiInclusion[X,Cnst,[A]Cnst]", "kind" : "def"}, {"label" : "componentIncl", "tail" : "(qp: QuasiProjection[X, Y]): QuasiInclusion[X, Y, Id]", "member" : "provingground.translation.QuasiInclusion.componentIncl", "link" : "provingground\/translation\/QuasiInclusion$.html#componentIncl[X,Y](implicitqp:provingground.translation.QuasiProjection[X,Y]):provingground.translation.QuasiInclusion[X,Y,cats.Id]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/QuasiInclusion$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/QuasiInclusion$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/QuasiInclusion$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/QuasiInclusion$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/QuasiInclusion$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/QuasiInclusion$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/QuasiInclusion$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/QuasiInclusion$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/QuasiInclusion$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/QuasiInclusion$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/QuasiInclusion$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/QuasiInclusion$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/QuasiInclusion$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/QuasiInclusion$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/QuasiInclusion$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/QuasiInclusion$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/QuasiInclusion$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/QuasiInclusion$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/QuasiInclusion$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/translation\/QuasiInclusion.html", "kind" : "class"}, {"name" : "provingground.translation.QuasiProjection", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/QuasiProjection.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/QuasiProjection.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/QuasiProjection.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/QuasiProjection.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/QuasiProjection.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/QuasiProjection.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/QuasiProjection.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/QuasiProjection.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/QuasiProjection.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/QuasiProjection.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/QuasiProjection.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/QuasiProjection.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/QuasiProjection.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/QuasiProjection.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/QuasiProjection.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/QuasiProjection.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/QuasiProjection.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/QuasiProjection.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/QuasiProjection.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "incl", "tail" : "(y: Y): X", "member" : "provingground.translation.QuasiProjection.incl", "link" : "provingground\/translation\/QuasiProjection.html#incl(y:Y):X", "kind" : "abstract def"}, {"label" : "proj", "tail" : "(x: X): Option[Y]", "member" : "provingground.translation.QuasiProjection.proj", "link" : "provingground\/translation\/QuasiProjection.html#proj(x:X):Option[Y]", "kind" : "abstract def"}], "shortDescription" : "projection of X onto Y", "object" : "provingground\/translation\/QuasiProjection$.html", "members_object" : [{"label" : "genericProjection", "tail" : "(gen: Aux[X, R], qp: QuasiProjection[R, Y]): QuasiProjection[X, Y]", "member" : "provingground.translation.QuasiProjection.genericProjection", "link" : "provingground\/translation\/QuasiProjection$.html#genericProjection[X,Y,R](implicitgen:shapeless.Generic.Aux[X,R],implicitqp:provingground.translation.QuasiProjection[R,Y]):provingground.translation.QuasiProjection[X,Y]", "kind" : "implicit def"}, {"label" : "rightProjection", "tail" : "(qp: QuasiProjection[X2, Y]): QuasiProjection[:+:[X1, X2], Y]", "member" : "provingground.translation.QuasiProjection.rightProjection", "link" : "provingground\/translation\/QuasiProjection$.html#rightProjection[X1,X2<:shapeless.Coproduct,Y](implicitqp:provingground.translation.QuasiProjection[X2,Y]):provingground.translation.QuasiProjection[X1:+:X2,Y]", "kind" : "implicit def"}, {"label" : "leftProjection", "tail" : "(qp: QuasiProjection[X1, Y]): QuasiProjection[:+:[X1, X2], Y]", "member" : "provingground.translation.QuasiProjection.leftProjection", "link" : "provingground\/translation\/QuasiProjection$.html#leftProjection[X1,X2<:shapeless.Coproduct,Y](implicitqp:provingground.translation.QuasiProjection[X1,Y]):provingground.translation.QuasiProjection[X1:+:X2,Y]", "kind" : "implicit def"}, {"label" : "idProj", "tail" : "(): QuasiProjection[X, X]", "member" : "provingground.translation.QuasiProjection.idProj", "link" : "provingground\/translation\/QuasiProjection$.html#idProj[X]:provingground.translation.QuasiProjection[X,X]", "kind" : "implicit def"}, {"label" : "apply", "tail" : "(p: (X) ⇒ Option[Y], i: (Y) ⇒ X): QuasiProjection[X, Y]", "member" : "provingground.translation.QuasiProjection.apply", "link" : "provingground\/translation\/QuasiProjection$.html#apply[X,Y](p:X=>Option[Y],i:Y=>X):provingground.translation.QuasiProjection[X,Y]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/QuasiProjection$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/QuasiProjection$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/QuasiProjection$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/QuasiProjection$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/QuasiProjection$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/QuasiProjection$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/QuasiProjection$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/QuasiProjection$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/QuasiProjection$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/QuasiProjection$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/QuasiProjection$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/QuasiProjection$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/QuasiProjection$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/QuasiProjection$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/QuasiProjection$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/QuasiProjection$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/QuasiProjection$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/QuasiProjection$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/QuasiProjection$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/translation\/QuasiProjection.html", "kind" : "trait"}, {"name" : "provingground.translation.Raw", "shortDescription" : "An unparsed tree, the default parse for iterative debugging.", "object" : "provingground\/translation\/Raw$.html", "members_object" : [{"label" : "rw", "tail" : "(): upickle.default.ReadWriter[Raw]", "member" : "provingground.translation.Raw.rw", "link" : "provingground\/translation\/Raw$.html#rw:upickle.default.ReadWriter[provingground.translation.Raw]", "kind" : "implicit def"}, {"label" : "translator", "tail" : ": Simple[Tree, MathExpr]", "member" : "provingground.translation.Raw.translator", "link" : "provingground\/translation\/Raw$.html#translator:provingground.translation.Translator.Simple[edu.stanford.nlp.trees.Tree,provingground.translation.MathExpr]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/Raw$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/Raw$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/Raw$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/Raw$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/Raw$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/Raw$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/Raw$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Raw$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Raw$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Raw$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/Raw$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/Raw$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/Raw$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/Raw$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/Raw$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/Raw$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/Raw$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/Raw$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/Raw$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"member" : "provingground.translation.Raw#<init>", "error" : "unsupported entity"}, {"label" : "model", "tail" : ": TreeModel", "member" : "provingground.translation.Raw.model", "link" : "provingground\/translation\/Raw.html#model:provingground.translation.TreeModel", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/Raw.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/Raw.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/Raw.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/Raw.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/Raw.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/Raw.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/Raw.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Raw.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Raw.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Raw.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/Raw.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/Raw.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/Raw.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/Raw.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/Raw.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/Raw.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "provingground\/translation\/Raw.html", "kind" : "case class"}, {"name" : "provingground.translation.RefineTerms", "shortDescription" : "", "object" : "provingground\/translation\/RefineTerms$.html", "members_object" : [{"label" : "refineTyp", "tail" : "(typ: Typ[Term]): Typ[Term]", "member" : "provingground.translation.RefineTerms.refineTyp", "link" : "provingground\/translation\/RefineTerms$.html#refineTyp(typ:provingground.HoTT.Typ[provingground.HoTT.Term]):provingground.HoTT.Typ[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "refine", "tail" : "(term: Term): Term", "member" : "provingground.translation.RefineTerms.refine", "link" : "provingground\/translation\/RefineTerms$.html#refine(term:provingground.HoTT.Term):provingground.HoTT.Term", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/RefineTerms$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/RefineTerms$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/RefineTerms$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/RefineTerms$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/RefineTerms$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/RefineTerms$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/RefineTerms$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/RefineTerms$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/RefineTerms$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/RefineTerms$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/RefineTerms$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/RefineTerms$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/RefineTerms$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/RefineTerms$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/RefineTerms$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/RefineTerms$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/RefineTerms$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/RefineTerms$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/RefineTerms$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.translation.Scoped", "members_trait" : [{"label" : "::", "tail" : "(label: L): Cons[L, S]", "member" : "provingground.translation.Scoped.::", "link" : "provingground\/translation\/Scoped.html#::[L](label:L):provingground.translation.Scoped.Cons[L,S]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/Scoped.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/Scoped.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/Scoped.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/Scoped.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/Scoped.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/Scoped.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/Scoped.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Scoped.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Scoped.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Scoped.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/Scoped.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/Scoped.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/Scoped.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/Scoped.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/Scoped.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/Scoped.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/Scoped.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/Scoped.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/Scoped.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "object" : "provingground\/translation\/Scoped$.html", "members_object" : [{"label" : "Cons", "tail" : "", "member" : "provingground.translation.Scoped.Cons", "link" : "provingground\/translation\/Scoped$.html#Cons[L,S]extendsScoped[S]withProductwithSerializable", "kind" : "case class"}, {"label" : "Outer", "tail" : "", "member" : "provingground.translation.Scoped.Outer", "link" : "provingground\/translation\/Scoped$.html#Outer[S]extendsScoped[S]withProductwithSerializable", "kind" : "case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/Scoped$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/Scoped$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/Scoped$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/Scoped$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/Scoped$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/Scoped$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/Scoped$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Scoped$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Scoped$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Scoped$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/Scoped$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/Scoped$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/Scoped$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/Scoped$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/Scoped$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/Scoped$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/Scoped$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/Scoped$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/Scoped$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/translation\/Scoped.html", "kind" : "trait"}, {"name" : "provingground.translation.Script", "shortDescription" : "", "object" : "provingground\/translation\/Script$.html", "members_object" : [{"label" : "parse", "tail" : "(s: String): Tree", "member" : "provingground.translation.Script.parse", "link" : "provingground\/translation\/Script$.html#parse(s:String):edu.stanford.nlp.trees.Tree", "kind" : "def"}, {"label" : "saveQuote", "tail" : "(s: String): Unit", "member" : "provingground.translation.Script.saveQuote", "link" : "provingground\/translation\/Script$.html#saveQuote(s:String):Unit", "kind" : "def"}, {"label" : "saveCode", "tail" : "(s: String): Unit", "member" : "provingground.translation.Script.saveCode", "link" : "provingground\/translation\/Script$.html#saveCode(s:String):Unit", "kind" : "def"}, {"label" : "save", "tail" : "(s: String): Unit", "member" : "provingground.translation.Script.save", "link" : "provingground\/translation\/Script$.html#save(s:String):Unit", "kind" : "def"}, {"label" : "file", "tail" : ": Path", "member" : "provingground.translation.Script.file", "link" : "provingground\/translation\/Script$.html#file:ammonite.ops.Path", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/Script$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/Script$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/Script$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/Script$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/Script$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/Script$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/Script$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Script$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Script$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Script$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/Script$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/Script$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/Script$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/Script$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/Script$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/Script$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/Script$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/Script$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/Script$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.translation.ShapeTree", "members_trait" : [{"label" : "subTrees", "tail" : ": Set[ShapeTree]", "member" : "provingground.translation.ShapeTree.subTrees", "link" : "provingground\/translation\/ShapeTree.html#subTrees:scala.collection.immutable.Set[provingground.translation.ShapeTree]", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/ShapeTree.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/ShapeTree.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/ShapeTree.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/ShapeTree.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/ShapeTree.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/ShapeTree.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/ShapeTree.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/ShapeTree.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/ShapeTree.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/ShapeTree.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/ShapeTree.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/ShapeTree.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/ShapeTree.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/ShapeTree.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/ShapeTree.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/ShapeTree.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/ShapeTree.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/ShapeTree.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/ShapeTree.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "recSubTrees", "tail" : "(): Set[ShapeTree]", "member" : "provingground.translation.ShapeTree.recSubTrees", "link" : "provingground\/translation\/ShapeTree.html#recSubTrees:Set[provingground.translation.ShapeTree]", "kind" : "abstract def"}], "shortDescription" : "", "object" : "provingground\/translation\/ShapeTree$.html", "members_object" : [{"label" : "PlusNode", "tail" : "", "member" : "provingground.translation.ShapeTree.PlusNode", "link" : "provingground\/translation\/ShapeTree$.html#PlusNodeextendsShapeTreewithProductwithSerializable", "kind" : "case class"}, {"label" : "PairNode", "tail" : "", "member" : "provingground.translation.ShapeTree.PairNode", "link" : "provingground\/translation\/ShapeTree$.html#PairNodeextendsShapeTreewithProductwithSerializable", "kind" : "case class"}, {"label" : "EqualityNode", "tail" : "", "member" : "provingground.translation.ShapeTree.EqualityNode", "link" : "provingground\/translation\/ShapeTree$.html#EqualityNodeextendsShapeTreewithProductwithSerializable", "kind" : "case class"}, {"label" : "LambdaNode", "tail" : "", "member" : "provingground.translation.ShapeTree.LambdaNode", "link" : "provingground\/translation\/ShapeTree$.html#LambdaNodeextendsShapeTreewithProductwithSerializable", "kind" : "case class"}, {"label" : "SigmaNode", "tail" : "", "member" : "provingground.translation.ShapeTree.SigmaNode", "link" : "provingground\/translation\/ShapeTree$.html#SigmaNodeextendsShapeTreewithProductwithSerializable", "kind" : "case class"}, {"label" : "PiNode", "tail" : "", "member" : "provingground.translation.ShapeTree.PiNode", "link" : "provingground\/translation\/ShapeTree$.html#PiNodeextendsShapeTreewithProductwithSerializable", "kind" : "case class"}, {"label" : "ArrowNode", "tail" : "", "member" : "provingground.translation.ShapeTree.ArrowNode", "link" : "provingground\/translation\/ShapeTree$.html#ArrowNodeextendsShapeTreewithProductwithSerializable", "kind" : "case class"}, {"label" : "ApplnNode", "tail" : "", "member" : "provingground.translation.ShapeTree.ApplnNode", "link" : "provingground\/translation\/ShapeTree$.html#ApplnNodeextendsShapeTreewithProductwithSerializable", "kind" : "case class"}, {"label" : "UnivLeaf", "tail" : "", "member" : "provingground.translation.ShapeTree.UnivLeaf", "link" : "provingground\/translation\/ShapeTree$.html#UnivLeaf", "kind" : "object"}, {"label" : "TypLeaf", "tail" : "", "member" : "provingground.translation.ShapeTree.TypLeaf", "link" : "provingground\/translation\/ShapeTree$.html#TypLeaf", "kind" : "object"}, {"label" : "Leaf", "tail" : "", "member" : "provingground.translation.ShapeTree.Leaf", "link" : "provingground\/translation\/ShapeTree$.html#Leaf", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/ShapeTree$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/ShapeTree$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/ShapeTree$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/ShapeTree$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/ShapeTree$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/ShapeTree$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/ShapeTree$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/ShapeTree$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/ShapeTree$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/ShapeTree$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/ShapeTree$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/ShapeTree$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/ShapeTree$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/ShapeTree$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/ShapeTree$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/ShapeTree$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/ShapeTree$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/ShapeTree$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/ShapeTree$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/translation\/ShapeTree.html", "kind" : "trait"}, {"name" : "provingground.translation.ShapeTreeFormat", "shortDescription" : "", "members_class" : [{"label" : "univ", "tail" : "(n: Int): ShapeTree", "member" : "provingground.translation.ShapeTreeFormat.univ", "link" : "provingground\/translation\/ShapeTreeFormat.html#univ(n:Int):provingground.translation.ShapeTree", "kind" : "def"}, {"label" : "symbolic", "tail" : "(name: AnySym, typ: Typ[Term]): ShapeTree", "member" : "provingground.translation.ShapeTreeFormat.symbolic", "link" : "provingground\/translation\/ShapeTreeFormat.html#symbolic(name:provingground.HoTT.AnySym,typ:provingground.HoTT.Typ[provingground.HoTT.Term]):provingground.translation.ShapeTree", "kind" : "def"}, {"label" : "symbtyp", "tail" : "(term: SymbTyp): ShapeTree", "member" : "provingground.translation.ShapeTreeFormat.symbtyp", "link" : "provingground\/translation\/ShapeTreeFormat.html#symbtyp(term:provingground.HoTT.SymbTyp):provingground.translation.ShapeTree", "kind" : "def"}, {"label" : "symbobj", "tail" : "(term: SymbObj[Term]): ShapeTree", "member" : "provingground.translation.ShapeTreeFormat.symbobj", "link" : "provingground\/translation\/ShapeTreeFormat.html#symbobj(term:provingground.HoTT.SymbObj[provingground.HoTT.Term]):provingground.translation.ShapeTree", "kind" : "def"}, {"label" : "pair", "tail" : "(first: ShapeTree, second: ShapeTree): ShapeTree", "member" : "provingground.translation.ShapeTreeFormat.pair", "link" : "provingground\/translation\/ShapeTreeFormat.html#pair(first:provingground.translation.ShapeTree,second:provingground.translation.ShapeTree):provingground.translation.ShapeTree", "kind" : "def"}, {"label" : "equality", "tail" : "(dom: ShapeTree, lhs: ShapeTree, rhs: ShapeTree): ShapeTree", "member" : "provingground.translation.ShapeTreeFormat.equality", "link" : "provingground\/translation\/ShapeTreeFormat.html#equality(dom:provingground.translation.ShapeTree,lhs:provingground.translation.ShapeTree,rhs:provingground.translation.ShapeTree):provingground.translation.ShapeTree", "kind" : "def"}, {"label" : "plus", "tail" : "(first: ShapeTree, second: ShapeTree): ShapeTree", "member" : "provingground.translation.ShapeTreeFormat.plus", "link" : "provingground\/translation\/ShapeTreeFormat.html#plus(first:provingground.translation.ShapeTree,second:provingground.translation.ShapeTree):provingground.translation.ShapeTree", "kind" : "def"}, {"label" : "sigma", "tail" : "(fibre: ShapeTree): ShapeTree", "member" : "provingground.translation.ShapeTreeFormat.sigma", "link" : "provingground\/translation\/ShapeTreeFormat.html#sigma(fibre:provingground.translation.ShapeTree):provingground.translation.ShapeTree", "kind" : "def"}, {"label" : "pi", "tail" : "(fibre: ShapeTree): ShapeTree", "member" : "provingground.translation.ShapeTreeFormat.pi", "link" : "provingground\/translation\/ShapeTreeFormat.html#pi(fibre:provingground.translation.ShapeTree):provingground.translation.ShapeTree", "kind" : "def"}, {"label" : "lambda", "tail" : "(variable: ShapeTree, typ: ShapeTree, value: ShapeTree): ShapeTree", "member" : "provingground.translation.ShapeTreeFormat.lambda", "link" : "provingground\/translation\/ShapeTreeFormat.html#lambda(variable:provingground.translation.ShapeTree,typ:provingground.translation.ShapeTree,value:provingground.translation.ShapeTree):provingground.translation.ShapeTree", "kind" : "def"}, {"label" : "arrow", "tail" : "(dom: ShapeTree, codom: ShapeTree): ShapeTree", "member" : "provingground.translation.ShapeTreeFormat.arrow", "link" : "provingground\/translation\/ShapeTreeFormat.html#arrow(dom:provingground.translation.ShapeTree,codom:provingground.translation.ShapeTree):provingground.translation.ShapeTree", "kind" : "def"}, {"label" : "appln", "tail" : "(func: ShapeTree, arg: ShapeTree): ShapeTree", "member" : "provingground.translation.ShapeTreeFormat.appln", "link" : "provingground\/translation\/ShapeTreeFormat.html#appln(func:provingground.translation.ShapeTree,arg:provingground.translation.ShapeTree):provingground.translation.ShapeTree", "kind" : "def"}, {"label" : "fromString", "tail" : "(str: String)(typ: Typ[Term]): ShapeTree", "member" : "provingground.translation.ShapeTreeFormat.fromString", "link" : "provingground\/translation\/ShapeTreeFormat.html#fromString(str:String)(implicittyp:provingground.HoTT.Typ[provingground.HoTT.Term]):provingground.translation.ShapeTree", "kind" : "def"}, {"label" : "specialTerms", "tail" : ": PartialFunction[Term, ShapeTree]", "member" : "provingground.translation.ShapeTreeFormat.specialTerms", "link" : "provingground\/translation\/ShapeTreeFormat.html#specialTerms:PartialFunction[provingground.HoTT.Term,provingground.translation.ShapeTree]", "kind" : "val"}, {"member" : "provingground.translation.ShapeTreeFormat#<init>", "error" : "unsupported entity"}, {"label" : "apply", "tail" : "(term: Term): ShapeTree", "member" : "provingground.translation.TermRec.apply", "link" : "provingground\/translation\/ShapeTreeFormat.html#apply(term:provingground.HoTT.Term):U", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/ShapeTreeFormat.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/ShapeTreeFormat.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/ShapeTreeFormat.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/ShapeTreeFormat.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/ShapeTreeFormat.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/ShapeTreeFormat.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/ShapeTreeFormat.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/ShapeTreeFormat.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/ShapeTreeFormat.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/ShapeTreeFormat.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/ShapeTreeFormat.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/ShapeTreeFormat.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/ShapeTreeFormat.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/ShapeTreeFormat.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/ShapeTreeFormat.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/ShapeTreeFormat.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/ShapeTreeFormat.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/ShapeTreeFormat.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/ShapeTreeFormat.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/translation\/ShapeTreeFormat.html", "kind" : "class"}, {"name" : "provingground.translation.SpecialTerms", "shortDescription" : "", "object" : "provingground\/translation\/SpecialTerms$.html", "members_object" : [{"label" : "freeToTerm", "tail" : ": OrElse[FreeExpr, Term]", "member" : "provingground.translation.SpecialTerms.freeToTerm", "link" : "provingground\/translation\/SpecialTerms$.html#freeToTerm:provingground.translation.Translator.OrElse[provingground.translation.FreeExpr,provingground.HoTT.Term]", "kind" : "val"}, {"label" : "termToFree", "tail" : ": OrElse[Term, FreeExpr]", "member" : "provingground.translation.SpecialTerms.termToFree", "link" : "provingground\/translation\/SpecialTerms$.html#termToFree:provingground.translation.Translator.OrElse[provingground.HoTT.Term,provingground.translation.FreeExpr]", "kind" : "val"}, {"label" : "build", "tail" : ": (Coded[Term]) ⇒ Term", "member" : "provingground.translation.SpecialTerms.build", "link" : "provingground\/translation\/SpecialTerms$.html#build:provingground.translation.Functors.Coded[provingground.HoTT.Term]=>provingground.HoTT.Term", "kind" : "val"}, {"label" : "Decompose", "tail" : "", "member" : "provingground.translation.SpecialTerms.Decompose", "link" : "provingground\/translation\/SpecialTerms$.html#Decompose", "kind" : "object"}, {"label" : "Names", "tail" : "", "member" : "provingground.translation.SpecialTerms.Names", "link" : "provingground\/translation\/SpecialTerms$.html#Names", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/SpecialTerms$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/SpecialTerms$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/SpecialTerms$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/SpecialTerms$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/SpecialTerms$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/SpecialTerms$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/SpecialTerms$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/SpecialTerms$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/SpecialTerms$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/SpecialTerms$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/SpecialTerms$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/SpecialTerms$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/SpecialTerms$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/SpecialTerms$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/SpecialTerms$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/SpecialTerms$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/SpecialTerms$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/SpecialTerms$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/SpecialTerms$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.translation.StanfordParser", "shortDescription" : "Interface to the Stanford parser, handling (inline) TeX by separating tokenizing and POS tagging from parsing.", "object" : "provingground\/translation\/StanfordParser$.html", "members_object" : [{"label" : "proseTree", "tail" : "(s: String, wordTags: Vector[(String, String)], mweSubs: Vector[(Vector[String], TaggedWord)]): ProseTree", "member" : "provingground.translation.StanfordParser.proseTree", "link" : "provingground\/translation\/StanfordParser$.html#proseTree(s:String,wordTags:Vector[(String,String)],mweSubs:Vector[(Vector[String],edu.stanford.nlp.ling.TaggedWord)]):provingground.translation.NlpProse.ProseTree", "kind" : "def"}, {"label" : "texParse", "tail" : "(s: String, wordTags: Vector[(String, String)], mweSubs: Vector[(Vector[String], TaggedWord)]): Tree", "member" : "provingground.translation.StanfordParser.texParse", "link" : "provingground\/translation\/StanfordParser$.html#texParse(s:String,wordTags:Vector[(String,String)],mweSubs:Vector[(Vector[String],edu.stanford.nlp.ling.TaggedWord)]):edu.stanford.nlp.trees.Tree", "kind" : "def"}, {"label" : "baseMweSubs", "tail" : ": Vector[(Vector[String], TaggedWord)]", "member" : "provingground.translation.StanfordParser.baseMweSubs", "link" : "provingground\/translation\/StanfordParser$.html#baseMweSubs:scala.collection.immutable.Vector[(scala.collection.immutable.Vector[String],edu.stanford.nlp.ling.TaggedWord)]", "kind" : "val"}, {"label" : "baseWordTags", "tail" : ": Vector[(String, String)]", "member" : "provingground.translation.StanfordParser.baseWordTags", "link" : "provingground\/translation\/StanfordParser$.html#baseWordTags:scala.collection.immutable.Vector[(String,String)]", "kind" : "val"}, {"label" : "TeXParsed", "tail" : "", "member" : "provingground.translation.StanfordParser.TeXParsed", "link" : "provingground\/translation\/StanfordParser$.html#TeXParsedextendsProductwithSerializable", "kind" : "case class"}, {"label" : "mergeSubs", "tail" : "(mwe: Vector[String], tw: TaggedWord)(tws: Vector[TaggedWord]): Vector[TaggedWord]", "member" : "provingground.translation.StanfordParser.mergeSubs", "link" : "provingground\/translation\/StanfordParser$.html#mergeSubs(mwe:Vector[String],tw:edu.stanford.nlp.ling.TaggedWord)(tws:Vector[edu.stanford.nlp.ling.TaggedWord]):Vector[edu.stanford.nlp.ling.TaggedWord]", "kind" : "def"}, {"label" : "mergeTag", "tail" : "(mwe: Vector[String], tag: String)(tws: Vector[TaggedWord]): Vector[TaggedWord]", "member" : "provingground.translation.StanfordParser.mergeTag", "link" : "provingground\/translation\/StanfordParser$.html#mergeTag(mwe:Vector[String],tag:String)(tws:Vector[edu.stanford.nlp.ling.TaggedWord]):Vector[edu.stanford.nlp.ling.TaggedWord]", "kind" : "def"}, {"label" : "reTag", "tail" : "(word: String, tag: String)(tw: TaggedWord): TaggedWord", "member" : "provingground.translation.StanfordParser.reTag", "link" : "provingground\/translation\/StanfordParser$.html#reTag(word:String,tag:String)(tw:edu.stanford.nlp.ling.TaggedWord):edu.stanford.nlp.ling.TaggedWord", "kind" : "def"}, {"label" : "texDisplay", "tail" : "(s: String): MatchIterator", "member" : "provingground.translation.StanfordParser.texDisplay", "link" : "provingground\/translation\/StanfordParser$.html#texDisplay(s:String):scala.util.matching.Regex.MatchIterator", "kind" : "def"}, {"label" : "texInline", "tail" : "(s: String): MatchIterator", "member" : "provingground.translation.StanfordParser.texInline", "link" : "provingground\/translation\/StanfordParser$.html#texInline(s:String):scala.util.matching.Regex.MatchIterator", "kind" : "def"}, {"label" : "parse", "tail" : "(s: String): Tree", "member" : "provingground.translation.StanfordParser.parse", "link" : "provingground\/translation\/StanfordParser$.html#parse(s:String):edu.stanford.nlp.trees.Tree", "kind" : "def"}, {"label" : "words", "tail" : "(s: String): Buffer[Word]", "member" : "provingground.translation.StanfordParser.words", "link" : "provingground\/translation\/StanfordParser$.html#words(s:String):scala.collection.mutable.Buffer[edu.stanford.nlp.ling.Word]", "kind" : "def"}, {"label" : "coreLabels", "tail" : "(s: String): List[CoreLabel]", "member" : "provingground.translation.StanfordParser.coreLabels", "link" : "provingground\/translation\/StanfordParser$.html#coreLabels(s:String):java.util.List[edu.stanford.nlp.ling.CoreLabel]", "kind" : "def"}, {"label" : "tokenizerFactory", "tail" : ": TokenizerFactory[CoreLabel]", "member" : "provingground.translation.StanfordParser.tokenizerFactory", "link" : "provingground\/translation\/StanfordParser$.html#tokenizerFactory:edu.stanford.nlp.process.TokenizerFactory[edu.stanford.nlp.ling.CoreLabel]", "kind" : "val"}, {"label" : "tagger", "tail" : ": MaxentTagger", "member" : "provingground.translation.StanfordParser.tagger", "link" : "provingground\/translation\/StanfordParser$.html#tagger:edu.stanford.nlp.tagger.maxent.MaxentTagger", "kind" : "val"}, {"label" : "gsf", "tail" : ": GrammaticalStructureFactory", "member" : "provingground.translation.StanfordParser.gsf", "link" : "provingground\/translation\/StanfordParser$.html#gsf:edu.stanford.nlp.trees.GrammaticalStructureFactory", "kind" : "lazy val"}, {"label" : "tlp", "tail" : ": PennTreebankLanguagePack", "member" : "provingground.translation.StanfordParser.tlp", "link" : "provingground\/translation\/StanfordParser$.html#tlp:edu.stanford.nlp.trees.PennTreebankLanguagePack", "kind" : "lazy val"}, {"label" : "lp", "tail" : ": LexicalizedParser", "member" : "provingground.translation.StanfordParser.lp", "link" : "provingground\/translation\/StanfordParser$.html#lp:edu.stanford.nlp.parser.lexparser.LexicalizedParser", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/StanfordParser$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/StanfordParser$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/StanfordParser$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/StanfordParser$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/StanfordParser$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/StanfordParser$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/StanfordParser$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/StanfordParser$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/StanfordParser$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/StanfordParser$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/StanfordParser$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/StanfordParser$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/StanfordParser$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/StanfordParser$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/StanfordParser$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/StanfordParser$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/StanfordParser$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/StanfordParser$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/StanfordParser$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.translation.Statement", "members_trait" : [{"label" : "appendTo", "tail" : "(doc: D)(dw: MathWriter[D, E]): D", "member" : "provingground.translation.Statement.appendTo", "link" : "provingground\/translation\/Statement.html#appendTo[D](doc:D)(implicitdw:provingground.translation.MathWriter[D,E]):D", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/Statement.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/Statement.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/Statement.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/Statement.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/Statement.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/Statement.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/Statement.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Statement.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Statement.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Statement.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/Statement.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/Statement.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/Statement.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/Statement.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/Statement.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/Statement.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/Statement.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/Statement.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/Statement.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "A statement obtained from source which affects a document.", "object" : "provingground\/translation\/Statement$.html", "members_object" : [{"label" : "BeginPropn", "tail" : "", "member" : "provingground.translation.Statement.BeginPropn", "link" : "provingground\/translation\/Statement$.html#BeginPropnextendsStatement.Beginning", "kind" : "class"}, {"label" : "BeginProof", "tail" : "", "member" : "provingground.translation.Statement.BeginProof", "link" : "provingground\/translation\/Statement$.html#BeginProof[E]extendsStatement.BeginningwithProductwithSerializable", "kind" : "case class"}, {"label" : "End", "tail" : "", "member" : "provingground.translation.Statement.End", "link" : "provingground\/translation\/Statement$.html#EndextendsProductwithSerializable", "kind" : "case class"}, {"label" : "Beginning", "tail" : "", "member" : "provingground.translation.Statement.Beginning", "link" : "provingground\/translation\/Statement$.html#BeginningextendsAnyRef", "kind" : "trait"}, {"label" : "Assume", "tail" : "", "member" : "provingground.translation.Statement.Assume", "link" : "provingground\/translation\/Statement$.html#Assume", "kind" : "object"}, {"label" : "Fix", "tail" : "", "member" : "provingground.translation.Statement.Fix", "link" : "provingground\/translation\/Statement$.html#Fix", "kind" : "object"}, {"label" : "Fix", "tail" : "", "member" : "provingground.translation.Statement.Fix", "link" : "provingground\/translation\/Statement$.html#Fix[E]extendsStatement[E]withProductwithSerializable", "kind" : "case class"}, {"label" : "DefnPropn", "tail" : "", "member" : "provingground.translation.Statement.DefnPropn", "link" : "provingground\/translation\/Statement$.html#DefnPropn[S,E]extendsStatement.Define[S,E]withProductwithSerializable", "kind" : "case class"}, {"label" : "Definition", "tail" : "", "member" : "provingground.translation.Statement.Definition", "link" : "provingground\/translation\/Statement$.html#Definition[S,E]extendsStatement.Define[S,E]withProductwithSerializable", "kind" : "case class"}, {"label" : "Define", "tail" : "", "member" : "provingground.translation.Statement.Define", "link" : "provingground\/translation\/Statement$.html#Define[S,E]extendsStatement[E]withStatement.Assertion[E]", "kind" : "abstract class"}, {"label" : "EndCase", "tail" : "", "member" : "provingground.translation.Statement.EndCase", "link" : "provingground\/translation\/Statement$.html#EndCase[E]extendsStatement[E]withProductwithSerializable", "kind" : "case class"}, {"label" : "Case", "tail" : "", "member" : "provingground.translation.Statement.Case", "link" : "provingground\/translation\/Statement$.html#Case[E]extendsStatement.Assertion[E]withProductwithSerializable", "kind" : "case class"}, {"label" : "Using", "tail" : "", "member" : "provingground.translation.Statement.Using", "link" : "provingground\/translation\/Statement$.html#Using[E]extendsStatement.Assertion[E]withProductwithSerializable", "kind" : "case class"}, {"label" : "Conclude", "tail" : "", "member" : "provingground.translation.Statement.Conclude", "link" : "provingground\/translation\/Statement$.html#Conclude[E]extendsStatement.Assertion[E]withProductwithSerializable", "kind" : "case class"}, {"label" : "Propn", "tail" : "", "member" : "provingground.translation.Statement.Propn", "link" : "provingground\/translation\/Statement$.html#Propn[E]extendsStatement.Assertion[E]", "kind" : "class"}, {"label" : "Assert", "tail" : "", "member" : "provingground.translation.Statement.Assert", "link" : "provingground\/translation\/Statement$.html#Assert[E]extendsStatement.Assertion[E]withProductwithSerializable", "kind" : "case class"}, {"label" : "Assertion", "tail" : "", "member" : "provingground.translation.Statement.Assertion", "link" : "provingground\/translation\/Statement$.html#Assertion[E]extendsStatement[E]", "kind" : "trait"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/Statement$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/Statement$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/Statement$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/Statement$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/Statement$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/Statement$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/Statement$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Statement$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Statement$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Statement$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/Statement$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/Statement$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/Statement$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/Statement$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/Statement$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/Statement$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/Statement$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/Statement$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/Statement$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/translation\/Statement.html", "kind" : "trait"}, {"name" : "provingground.translation.StringParse", "shortDescription" : "", "object" : "provingground\/translation\/StringParse$.html", "members_object" : [{"label" : "idWrite", "tail" : "(): WriteString[String]", "member" : "provingground.translation.StringParse.idWrite", "link" : "provingground\/translation\/StringParse$.html#idWrite:provingground.translation.StringParse.WriteString[String]", "kind" : "implicit def"}, {"label" : "read", "tail" : "(str: String)(arg0: ReadString[A]): A", "member" : "provingground.translation.StringParse.read", "link" : "provingground\/translation\/StringParse$.html#read[A](str:String)(implicitevidence$2:provingground.translation.StringParse.ReadString[A]):A", "kind" : "def"}, {"label" : "write", "tail" : "(a: A)(arg0: WriteString[A]): String", "member" : "provingground.translation.StringParse.write", "link" : "provingground\/translation\/StringParse$.html#write[A](a:A)(implicitevidence$1:provingground.translation.StringParse.WriteString[A]):String", "kind" : "def"}, {"label" : "ReadString", "tail" : "", "member" : "provingground.translation.StringParse.ReadString", "link" : "provingground\/translation\/StringParse$.html#ReadString", "kind" : "object"}, {"label" : "ReadString", "tail" : "", "member" : "provingground.translation.StringParse.ReadString", "link" : "provingground\/translation\/StringParse$.html#ReadString[A]extendsAnyRef", "kind" : "trait"}, {"label" : "WriteString", "tail" : "", "member" : "provingground.translation.StringParse.WriteString", "link" : "provingground\/translation\/StringParse$.html#WriteString", "kind" : "object"}, {"label" : "WriteString", "tail" : "", "member" : "provingground.translation.StringParse.WriteString", "link" : "provingground\/translation\/StringParse$.html#WriteString[A]extendsAnyRef", "kind" : "trait"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/StringParse$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/StringParse$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/StringParse$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/StringParse$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/StringParse$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/StringParse$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/StringParse$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/StringParse$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/StringParse$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/StringParse$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/StringParse$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/StringParse$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/StringParse$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/StringParse$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/StringParse$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/StringParse$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/StringParse$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/StringParse$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/StringParse$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.translation.SubType", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/SubType.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/SubType.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/SubType.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/SubType.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/SubType.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/SubType.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/SubType.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/SubType.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/SubType.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/SubType.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/SubType.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/SubType.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/SubType.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/SubType.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/SubType.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/SubType.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/SubType.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/SubType.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/SubType.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "restrict", "tail" : "(): (Option[Y[I]]) ⇒ Option[X[I]]", "member" : "provingground.translation.ConeRestriction.restrict", "link" : "provingground\/translation\/SubType.html#restrict[I]:G[Y[I]]=>G[X[I]]", "kind" : "abstract def"}, {"label" : "incl", "tail" : "(): (X[I]) ⇒ Y[I]", "member" : "provingground.translation.Inclusion.incl", "link" : "provingground\/translation\/SubType.html#incl[I]:X[I]=>Y[I]", "kind" : "abstract def"}], "shortDescription" : "subtype relation between functors, giving inclusion and optional restriction,explicit, not depending on scala type checking", "trait" : "provingground\/translation\/SubType.html", "kind" : "trait"}, {"name" : "provingground.translation.SubTypePattern", "shortDescription" : "Pattern and builder for matching whether, for a term x: X, F(x) is in the subtype Y.", "object" : "provingground\/translation\/SubTypePattern$.html", "members_class" : [{"label" : "on", "tail" : "(split: PartialFunction[I, F[I]]): Junction[I, X, F]", "member" : "provingground.translation.SubTypePattern.on", "link" : "provingground\/translation\/SubTypePattern.html#on[I](split:PartialFunction[I,F[I]]):provingground.translation.Translator.Junction[I,X,F]", "kind" : "def"}, {"label" : ">>>", "tail" : "(build: (F[O]) ⇒ O): Junction[X, O, F]", "member" : "provingground.translation.SubTypePattern.>>>", "link" : "provingground\/translation\/SubTypePattern.html#>>>[O](build:F[O]=>O):provingground.translation.Translator.Junction[X,O,F]", "kind" : "def"}, {"label" : ">>", "tail" : "(build: (F[O]) ⇒ Option[O]): Junction[X, O, F]", "member" : "provingground.translation.SubTypePattern.>>", "link" : "provingground\/translation\/SubTypePattern.html#>>[O](build:F[O]=>Option[O]):provingground.translation.Translator.Junction[X,O,F]", "kind" : "def"}, {"label" : "builder", "tail" : ": Builder[X, F]", "member" : "provingground.translation.SubTypePattern.builder", "link" : "provingground\/translation\/SubTypePattern.html#builder:provingground.translation.Translator.Builder[X,F]", "kind" : "val"}, {"label" : "pattern", "tail" : ": Pattern[X, F]", "member" : "provingground.translation.SubTypePattern.pattern", "link" : "provingground\/translation\/SubTypePattern.html#pattern:provingground.translation.Translator.Pattern[X,F]", "kind" : "val"}, {"label" : "build", "tail" : ": (F[X]) ⇒ Option[X]", "member" : "provingground.translation.SubTypePattern.build", "link" : "provingground\/translation\/SubTypePattern.html#build:F[X]=>Option[X]", "kind" : "val"}, {"label" : "split", "tail" : ": (X) ⇒ Option[F[X]]", "member" : "provingground.translation.SubTypePattern.split", "link" : "provingground\/translation\/SubTypePattern.html#split:X=>Option[F[X]]", "kind" : "val"}, {"member" : "provingground.translation.SubTypePattern#<init>", "error" : "unsupported entity"}, {"label" : "qp", "tail" : ": QuasiProjection[X, Y]", "member" : "provingground.translation.SubTypePattern.qp", "link" : "provingground\/translation\/SubTypePattern.html#qp:provingground.translation.QuasiProjection[X,Y]", "kind" : "implicit val"}, {"label" : "qi", "tail" : ": QuasiInclusion[X, Y, F]", "member" : "provingground.translation.SubTypePattern.qi", "link" : "provingground\/translation\/SubTypePattern.html#qi:provingground.translation.QuasiInclusion[X,Y,F]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/SubTypePattern.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/SubTypePattern.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/SubTypePattern.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/SubTypePattern.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/SubTypePattern.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/SubTypePattern.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/SubTypePattern.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/SubTypePattern.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/SubTypePattern.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/SubTypePattern.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/SubTypePattern.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/SubTypePattern.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/SubTypePattern.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/SubTypePattern.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/SubTypePattern.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/SubTypePattern.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/SubTypePattern.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/SubTypePattern.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/SubTypePattern.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "Test", "tail" : "", "member" : "provingground.translation.SubTypePattern.Test", "link" : "provingground\/translation\/SubTypePattern$.html#Test", "kind" : "object"}, {"label" : "pattern", "tail" : "(arg0: Traverse[F], qi: QuasiInclHList[X, Y, F], qp: QuasiProjection[X, Y]): SubTypePattern[X, Y, F]", "member" : "provingground.translation.SubTypePattern.pattern", "link" : "provingground\/translation\/SubTypePattern$.html#pattern[X,Y,F[_]<:shapeless.HList](implicitevidence$10:cats.Traverse[F],implicitqi:provingground.translation.QuasiInclHList[X,Y,F],implicitqp:provingground.translation.QuasiProjection[X,Y]):provingground.translation.SubTypePattern[X,Y,F]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/SubTypePattern$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/SubTypePattern$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/SubTypePattern$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/SubTypePattern$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/SubTypePattern$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/SubTypePattern$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/SubTypePattern$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/SubTypePattern$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/SubTypePattern$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/SubTypePattern$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/SubTypePattern$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/SubTypePattern$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/SubTypePattern$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/SubTypePattern$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/SubTypePattern$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/SubTypePattern$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/SubTypePattern$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/SubTypePattern$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/SubTypePattern$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/translation\/SubTypePattern.html", "kind" : "class"}, {"name" : "provingground.translation.TermLang", "shortDescription" : "", "object" : "provingground\/translation\/TermLang$.html", "members_object" : [{"label" : "termLang", "tail" : "(): ExprLang[Term]", "member" : "provingground.translation.TermLang.termLang", "link" : "provingground\/translation\/TermLang$.html#termLang:provingground.translation.ExprLang[provingground.HoTT.Term]", "kind" : "implicit def"}, {"label" : "domain", "tail" : "(): (Term) ⇒ Option[Term]", "member" : "provingground.translation.TermLang.domain", "link" : "provingground\/translation\/TermLang$.html#domain:provingground.HoTT.Term=>Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "isPi", "tail" : "(): (Term) ⇒ Option[(Term, Term)]", "member" : "provingground.translation.TermLang.isPi", "link" : "provingground\/translation\/TermLang$.html#isPi:provingground.HoTT.Term=>Option[(provingground.HoTT.Term,provingground.HoTT.Term)]", "kind" : "def"}, {"label" : "isSigma", "tail" : "(): (Term) ⇒ Option[(Term, Term)]", "member" : "provingground.translation.TermLang.isSigma", "link" : "provingground\/translation\/TermLang$.html#isSigma:provingground.HoTT.Term=>Option[(provingground.HoTT.Term,provingground.HoTT.Term)]", "kind" : "def"}, {"label" : "isPair", "tail" : "(): (Term) ⇒ Option[(Term, Term)]", "member" : "provingground.translation.TermLang.isPair", "link" : "provingground\/translation\/TermLang$.html#isPair:provingground.HoTT.Term=>Option[(provingground.HoTT.Term,provingground.HoTT.Term)]", "kind" : "def"}, {"label" : "numeral", "tail" : "(n: Int): Option[Term]", "member" : "provingground.translation.TermLang.numeral", "link" : "provingground\/translation\/TermLang$.html#numeral(n:Int):Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "orCases", "tail" : "(first: Term, second: Term): Option[Term]", "member" : "provingground.translation.TermLang.orCases", "link" : "provingground\/translation\/TermLang$.html#orCases(first:provingground.HoTT.Term,second:provingground.HoTT.Term):Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "ff", "tail" : "(): Option[Term]", "member" : "provingground.translation.TermLang.ff", "link" : "provingground\/translation\/TermLang$.html#ff:Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "qed", "tail" : "(): Option[Term]", "member" : "provingground.translation.TermLang.qed", "link" : "provingground\/translation\/TermLang$.html#qed:Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "tt", "tail" : "(): Option[Term]", "member" : "provingground.translation.TermLang.tt", "link" : "provingground\/translation\/TermLang$.html#tt:Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "incl2", "tail" : "(typ: Term): Option[Term]", "member" : "provingground.translation.TermLang.incl2", "link" : "provingground\/translation\/TermLang$.html#incl2(typ:provingground.HoTT.Term):Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "incl1", "tail" : "(typ: Term): Option[Term]", "member" : "provingground.translation.TermLang.incl1", "link" : "provingground\/translation\/TermLang$.html#incl1(typ:provingground.HoTT.Term):Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "or", "tail" : "(first: Term, second: Term): Option[Term]", "member" : "provingground.translation.TermLang.or", "link" : "provingground\/translation\/TermLang$.html#or(first:provingground.HoTT.Term,second:provingground.HoTT.Term):Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "proj2", "tail" : "(xy: Term): Option[Term]", "member" : "provingground.translation.TermLang.proj2", "link" : "provingground\/translation\/TermLang$.html#proj2(xy:provingground.HoTT.Term):Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "proj1", "tail" : "(xy: Term): Option[Term]", "member" : "provingground.translation.TermLang.proj1", "link" : "provingground\/translation\/TermLang$.html#proj1(xy:provingground.HoTT.Term):Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "pair", "tail" : "(x: Term, y: Term): Option[Term]", "member" : "provingground.translation.TermLang.pair", "link" : "provingground\/translation\/TermLang$.html#pair(x:provingground.HoTT.Term,y:provingground.HoTT.Term):Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "sigma", "tail" : "(variable: Term, typ: Term): Option[Term]", "member" : "provingground.translation.TermLang.sigma", "link" : "provingground\/translation\/TermLang$.html#sigma(variable:provingground.HoTT.Term,typ:provingground.HoTT.Term):Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "equality", "tail" : "(lhs: Term, rhs: Term): Option[Term]", "member" : "provingground.translation.TermLang.equality", "link" : "provingground\/translation\/TermLang$.html#equality(lhs:provingground.HoTT.Term,rhs:provingground.HoTT.Term):Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "domTyp", "tail" : "(func: Term): Option[Typ[Term]]", "member" : "provingground.translation.TermLang.domTyp", "link" : "provingground\/translation\/TermLang$.html#domTyp(func:provingground.HoTT.Term):Option[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "applnFold", "tail" : "(func: Term, args: Vector[Term]): Option[Term]", "member" : "provingground.translation.TermLang.applnFold", "link" : "provingground\/translation\/TermLang$.html#applnFold(func:provingground.HoTT.Term,args:Vector[provingground.HoTT.Term]):Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "appln", "tail" : "(func: Term, arg: Term): Option[Term]", "member" : "provingground.translation.TermLang.appln", "link" : "provingground\/translation\/TermLang$.html#appln(func:provingground.HoTT.Term,arg:provingground.HoTT.Term):Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "pi", "tail" : "(variable: Term, typ: Term): Option[Term]", "member" : "provingground.translation.TermLang.pi", "link" : "provingground\/translation\/TermLang$.html#pi(variable:provingground.HoTT.Term,typ:provingground.HoTT.Term):Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "lambda", "tail" : "(variable: Term, value: Term): Option[Term]", "member" : "provingground.translation.TermLang.lambda", "link" : "provingground\/translation\/TermLang$.html#lambda(variable:provingground.HoTT.Term,value:provingground.HoTT.Term):Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "metaVar", "tail" : "(typ: Term): Option[Term]", "member" : "provingground.translation.TermLang.metaVar", "link" : "provingground\/translation\/TermLang$.html#metaVar(typ:provingground.HoTT.Term):Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "anonVar", "tail" : "(typ: Term): Option[Term]", "member" : "provingground.translation.TermLang.anonVar", "link" : "provingground\/translation\/TermLang$.html#anonVar(typ:provingground.HoTT.Term):Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "typVariable", "tail" : "(name: S, level: Int): Option[Term]", "member" : "provingground.translation.TermLang.typVariable", "link" : "provingground\/translation\/TermLang$.html#typVariable[S](name:S,level:Int):Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "variable", "tail" : "(name: S, typ: Term): Option[Term]", "member" : "provingground.translation.TermLang.variable", "link" : "provingground\/translation\/TermLang$.html#variable[S](name:S,typ:provingground.HoTT.Term):Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "applyAll", "tail" : "(funcOpt: Option[Term], args: Vector[Term]): Option[Term]", "member" : "provingground.translation.ExprLang.applyAll", "link" : "provingground\/translation\/TermLang$.html#applyAll(funcOpt:Option[E],args:Vector[E]):Option[E]", "kind" : "def"}, {"label" : "i2", "tail" : "(typ: Term, value: Term): Option[Term]", "member" : "provingground.translation.ExprLang.i2", "link" : "provingground\/translation\/TermLang$.html#i2(typ:E,value:E):Option[E]", "kind" : "def"}, {"label" : "i1", "tail" : "(typ: Term, value: Term): Option[Term]", "member" : "provingground.translation.ExprLang.i1", "link" : "provingground\/translation\/TermLang$.html#i1(typ:E,value:E):Option[E]", "kind" : "def"}, {"label" : "funcTyp", "tail" : "(dom: Term, codom: Term): Option[Term]", "member" : "provingground.translation.ExprLang.funcTyp", "link" : "provingground\/translation\/TermLang$.html#funcTyp(dom:E,codom:E):Option[E]", "kind" : "def"}, {"label" : "pairTyp", "tail" : "(first: Term, second: Term): Option[Term]", "member" : "provingground.translation.ExprLang.pairTyp", "link" : "provingground\/translation\/TermLang$.html#pairTyp(first:E,second:E):Option[E]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/TermLang$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/TermLang$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/TermLang$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/TermLang$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/TermLang$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/TermLang$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/TermLang$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TermLang$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TermLang$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TermLang$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/TermLang$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/TermLang$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/TermLang$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/TermLang$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/TermLang$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/TermLang$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/TermLang$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.translation.TermParser", "shortDescription" : "", "members_class" : [{"label" : "OnceParser", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.OnceParser", "link" : "provingground\/translation\/TermParser.html#OnceParser[+T<:<?>]extendsParsers.this.Parser[T]", "kind" : "trait"}, {"label" : "~", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.~", "link" : "provingground\/translation\/TermParser.html#~[+a,+b]extendsProductwithSerializable", "kind" : "case class"}, {"label" : "Parser", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.Parser", "link" : "provingground\/translation\/TermParser.html#Parser[+T]extendsParsers.this.Input=>Parsers.this.ParseResult[T]", "kind" : "abstract class"}, {"label" : "Success", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.Success", "link" : "provingground\/translation\/TermParser.html#Success[+T<:<?>]extendsParsers.this.ParseResult[T]withProductwithSerializable", "kind" : "case class"}, {"label" : "Failure", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.Failure", "link" : "provingground\/translation\/TermParser.html#FailureextendsParsers.this.NoSuccesswithProductwithSerializable", "kind" : "case class"}, {"label" : "Error", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.Error", "link" : "provingground\/translation\/TermParser.html#ErrorextendsParsers.this.NoSuccesswithProductwithSerializable", "kind" : "case class"}, {"label" : "NoSuccess", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.NoSuccess", "link" : "provingground\/translation\/TermParser.html#NoSuccessextendsParsers.this.ParseResult[Nothing]", "kind" : "sealed abstract class"}, {"label" : "ParseResult", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.ParseResult", "link" : "provingground\/translation\/TermParser.html#ParseResult[+T<:<?>]extendsAnyRef", "kind" : "sealed abstract class"}, {"label" : "appln", "tail" : "(): Parser[Term]", "member" : "provingground.translation.TermParser.appln", "link" : "provingground\/translation\/TermParser.html#appln:TermParser.this.Parser[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "lambdaTerm", "tail" : "(): Parser[Term]", "member" : "provingground.translation.TermParser.lambdaTerm", "link" : "provingground\/translation\/TermParser.html#lambdaTerm:TermParser.this.Parser[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "term", "tail" : "(): Parser[Term]", "member" : "provingground.translation.TermParser.term", "link" : "provingground\/translation\/TermParser.html#term:TermParser.this.Parser[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "pair", "tail" : "(): Parser[Term]", "member" : "provingground.translation.TermParser.pair", "link" : "provingground\/translation\/TermParser.html#pair:TermParser.this.Parser[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "symbTerm", "tail" : "(): Parser[Term]", "member" : "provingground.translation.TermParser.symbTerm", "link" : "provingground\/translation\/TermParser.html#symbTerm:TermParser.this.Parser[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "uni", "tail" : "(): Parser[Typ[Typ[Term]]]", "member" : "provingground.translation.TermParser.uni", "link" : "provingground\/translation\/TermParser.html#uni:TermParser.this.Parser[provingground.HoTT.Typ[provingground.HoTT.Typ[provingground.HoTT.Term]]]", "kind" : "def"}, {"label" : "typ", "tail" : "(): Parser[Typ[Term]]", "member" : "provingground.translation.TermParser.typ", "link" : "provingground\/translation\/TermParser.html#typ:TermParser.this.Parser[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "sigmaTyp", "tail" : "(): Parser[Typ[Term]]", "member" : "provingground.translation.TermParser.sigmaTyp", "link" : "provingground\/translation\/TermParser.html#sigmaTyp:TermParser.this.Parser[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "piTyp", "tail" : "(): Parser[Typ[Term]]", "member" : "provingground.translation.TermParser.piTyp", "link" : "provingground\/translation\/TermParser.html#piTyp:TermParser.this.Parser[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "arrowTyp", "tail" : "(): Parser[Typ[Term]]", "member" : "provingground.translation.TermParser.arrowTyp", "link" : "provingground\/translation\/TermParser.html#arrowTyp:TermParser.this.Parser[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "symbTyp", "tail" : "(): Parser[Typ[Term]]", "member" : "provingground.translation.TermParser.symbTyp", "link" : "provingground\/translation\/TermParser.html#symbTyp:TermParser.this.Parser[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "name", "tail" : "(): Parser[AnySym]", "member" : "provingground.translation.TermParser.name", "link" : "provingground\/translation\/TermParser.html#name:TermParser.this.Parser[provingground.HoTT.AnySym]", "kind" : "def"}, {"label" : "makeSymbol", "tail" : "(s: String): AnySym", "member" : "provingground.translation.TermParser.makeSymbol", "link" : "provingground\/translation\/TermParser.html#makeSymbol(s:String):provingground.HoTT.AnySym", "kind" : "def"}, {"label" : "colon", "tail" : "(): Parser[String]", "member" : "provingground.translation.TermParser.colon", "link" : "provingground\/translation\/TermParser.html#colon:TermParser.this.Parser[String]", "kind" : "def"}, {"label" : "sigma", "tail" : "(): Parser[Any]", "member" : "provingground.translation.TermParser.sigma", "link" : "provingground\/translation\/TermParser.html#sigma:TermParser.this.Parser[Any]", "kind" : "def"}, {"label" : "prod", "tail" : "(): Parser[Any]", "member" : "provingground.translation.TermParser.prod", "link" : "provingground\/translation\/TermParser.html#prod:TermParser.this.Parser[Any]", "kind" : "def"}, {"label" : "univ", "tail" : "(): Parser[Any]", "member" : "provingground.translation.TermParser.univ", "link" : "provingground\/translation\/TermParser.html#univ:TermParser.this.Parser[Any]", "kind" : "def"}, {"label" : "mapsto", "tail" : "(): Parser[Any]", "member" : "provingground.translation.TermParser.mapsto", "link" : "provingground\/translation\/TermParser.html#mapsto:TermParser.this.Parser[Any]", "kind" : "def"}, {"label" : "arrow", "tail" : "(): Parser[Any]", "member" : "provingground.translation.TermParser.arrow", "link" : "provingground\/translation\/TermParser.html#arrow:TermParser.this.Parser[Any]", "kind" : "def"}, {"member" : "provingground.translation.TermParser#<init>", "error" : "unsupported entity"}, {"label" : "floatingPointNumber", "tail" : "(): Parser[String]", "member" : "scala.util.parsing.combinator.JavaTokenParsers.floatingPointNumber", "link" : "provingground\/translation\/TermParser.html#floatingPointNumber:JavaTokenParsers.this.Parser[String]", "kind" : "def"}, {"label" : "stringLiteral", "tail" : "(): Parser[String]", "member" : "scala.util.parsing.combinator.JavaTokenParsers.stringLiteral", "link" : "provingground\/translation\/TermParser.html#stringLiteral:JavaTokenParsers.this.Parser[String]", "kind" : "def"}, {"label" : "decimalNumber", "tail" : "(): Parser[String]", "member" : "scala.util.parsing.combinator.JavaTokenParsers.decimalNumber", "link" : "provingground\/translation\/TermParser.html#decimalNumber:JavaTokenParsers.this.Parser[String]", "kind" : "def"}, {"label" : "wholeNumber", "tail" : "(): Parser[String]", "member" : "scala.util.parsing.combinator.JavaTokenParsers.wholeNumber", "link" : "provingground\/translation\/TermParser.html#wholeNumber:JavaTokenParsers.this.Parser[String]", "kind" : "def"}, {"label" : "ident", "tail" : "(): Parser[String]", "member" : "scala.util.parsing.combinator.JavaTokenParsers.ident", "link" : "provingground\/translation\/TermParser.html#ident:JavaTokenParsers.this.Parser[String]", "kind" : "def"}, {"label" : "parseAll", "tail" : "(p: Parser[T], in: CharSequence): ParseResult[T]", "member" : "scala.util.parsing.combinator.RegexParsers.parseAll", "link" : "provingground\/translation\/TermParser.html#parseAll[T](p:RegexParsers.this.Parser[T],in:CharSequence):RegexParsers.this.ParseResult[T]", "kind" : "def"}, {"label" : "parseAll", "tail" : "(p: Parser[T], in: Reader): ParseResult[T]", "member" : "scala.util.parsing.combinator.RegexParsers.parseAll", "link" : "provingground\/translation\/TermParser.html#parseAll[T](p:RegexParsers.this.Parser[T],in:java.io.Reader):RegexParsers.this.ParseResult[T]", "kind" : "def"}, {"label" : "parseAll", "tail" : "(p: Parser[T], in: Reader[Char]): ParseResult[T]", "member" : "scala.util.parsing.combinator.RegexParsers.parseAll", "link" : "provingground\/translation\/TermParser.html#parseAll[T](p:RegexParsers.this.Parser[T],in:scala.util.parsing.input.Reader[Char]):RegexParsers.this.ParseResult[T]", "kind" : "def"}, {"label" : "parse", "tail" : "(p: Parser[T], in: Reader): ParseResult[T]", "member" : "scala.util.parsing.combinator.RegexParsers.parse", "link" : "provingground\/translation\/TermParser.html#parse[T](p:RegexParsers.this.Parser[T],in:java.io.Reader):RegexParsers.this.ParseResult[T]", "kind" : "def"}, {"label" : "parse", "tail" : "(p: Parser[T], in: CharSequence): ParseResult[T]", "member" : "scala.util.parsing.combinator.RegexParsers.parse", "link" : "provingground\/translation\/TermParser.html#parse[T](p:RegexParsers.this.Parser[T],in:CharSequence):RegexParsers.this.ParseResult[T]", "kind" : "def"}, {"label" : "parse", "tail" : "(p: Parser[T], in: Reader[Char]): ParseResult[T]", "member" : "scala.util.parsing.combinator.RegexParsers.parse", "link" : "provingground\/translation\/TermParser.html#parse[T](p:RegexParsers.this.Parser[T],in:scala.util.parsing.input.Reader[Char]):RegexParsers.this.ParseResult[T]", "kind" : "def"}, {"label" : "phrase", "tail" : "(p: Parser[T]): Parser[T]", "member" : "scala.util.parsing.combinator.RegexParsers.phrase", "link" : "provingground\/translation\/TermParser.html#phrase[T](p:RegexParsers.this.Parser[T]):RegexParsers.this.Parser[T]", "kind" : "def"}, {"label" : "positioned", "tail" : "(p: ⇒ Parser[T]): Parser[T]", "member" : "scala.util.parsing.combinator.RegexParsers.positioned", "link" : "provingground\/translation\/TermParser.html#positioned[T<:scala.util.parsing.input.Positional](p:=>RegexParsers.this.Parser[T]):RegexParsers.this.Parser[T]", "kind" : "def"}, {"label" : "regex", "tail" : "(r: Regex): Parser[String]", "member" : "scala.util.parsing.combinator.RegexParsers.regex", "link" : "provingground\/translation\/TermParser.html#regex(r:scala.util.matching.Regex):RegexParsers.this.Parser[String]", "kind" : "implicit def"}, {"label" : "literal", "tail" : "(s: String): Parser[String]", "member" : "scala.util.parsing.combinator.RegexParsers.literal", "link" : "provingground\/translation\/TermParser.html#literal(s:String):RegexParsers.this.Parser[String]", "kind" : "implicit def"}, {"label" : "handleWhiteSpace", "tail" : "(source: CharSequence, offset: Int): Int", "member" : "scala.util.parsing.combinator.RegexParsers.handleWhiteSpace", "link" : "provingground\/translation\/TermParser.html#handleWhiteSpace(source:CharSequence,offset:Int):Int", "kind" : "def"}, {"label" : "skipWhitespace", "tail" : "(): Boolean", "member" : "scala.util.parsing.combinator.RegexParsers.skipWhitespace", "link" : "provingground\/translation\/TermParser.html#skipWhitespace:Boolean", "kind" : "def"}, {"label" : "whiteSpace", "tail" : ": Regex", "member" : "scala.util.parsing.combinator.RegexParsers.whiteSpace", "link" : "provingground\/translation\/TermParser.html#whiteSpace:scala.util.matching.Regex", "kind" : "val"}, {"label" : "Elem", "tail" : "", "member" : "scala.util.parsing.combinator.RegexParsers.Elem", "link" : "provingground\/translation\/TermParser.html#Elem=Char", "kind" : "type"}, {"label" : "mkList", "tail" : "(): (~[T, List[T]]) ⇒ List[T]", "member" : "scala.util.parsing.combinator.Parsers.mkList", "link" : "provingground\/translation\/TermParser.html#mkList[T]:T~List[T]=>List[T]", "kind" : "def"}, {"label" : "guard", "tail" : "(p: ⇒ Parser[T]): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.guard", "link" : "provingground\/translation\/TermParser.html#guard[T](p:=>Parsers.this.Parser[T]):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "not", "tail" : "(p: ⇒ Parser[T]): Parser[Unit]", "member" : "scala.util.parsing.combinator.Parsers.not", "link" : "provingground\/translation\/TermParser.html#not[T](p:=>Parsers.this.Parser[T]):Parsers.this.Parser[Unit]", "kind" : "def"}, {"label" : "opt", "tail" : "(p: ⇒ Parser[T]): Parser[Option[T]]", "member" : "scala.util.parsing.combinator.Parsers.opt", "link" : "provingground\/translation\/TermParser.html#opt[T](p:=>Parsers.this.Parser[T]):Parsers.this.Parser[Option[T]]", "kind" : "def"}, {"label" : "chainr1", "tail" : "(p: ⇒ Parser[T], q: ⇒ Parser[(T, U) ⇒ U], combine: (T, U) ⇒ U, first: U): Parser[U]", "member" : "scala.util.parsing.combinator.Parsers.chainr1", "link" : "provingground\/translation\/TermParser.html#chainr1[T,U](p:=>Parsers.this.Parser[T],q:=>Parsers.this.Parser[(T,U)=>U],combine:(T,U)=>U,first:U):Parsers.this.Parser[U]", "kind" : "def"}, {"label" : "chainl1", "tail" : "(first: ⇒ Parser[T], p: ⇒ Parser[U], q: ⇒ Parser[(T, U) ⇒ T]): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.chainl1", "link" : "provingground\/translation\/TermParser.html#chainl1[T,U](first:=>Parsers.this.Parser[T],p:=>Parsers.this.Parser[U],q:=>Parsers.this.Parser[(T,U)=>T]):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "chainl1", "tail" : "(p: ⇒ Parser[T], q: ⇒ Parser[(T, T) ⇒ T]): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.chainl1", "link" : "provingground\/translation\/TermParser.html#chainl1[T](p:=>Parsers.this.Parser[T],q:=>Parsers.this.Parser[(T,T)=>T]):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "rep1sep", "tail" : "(p: ⇒ Parser[T], q: ⇒ Parser[Any]): Parser[List[T]]", "member" : "scala.util.parsing.combinator.Parsers.rep1sep", "link" : "provingground\/translation\/TermParser.html#rep1sep[T](p:=>Parsers.this.Parser[T],q:=>Parsers.this.Parser[Any]):Parsers.this.Parser[List[T]]", "kind" : "def"}, {"label" : "repN", "tail" : "(num: Int, p: ⇒ Parser[T]): Parser[List[T]]", "member" : "scala.util.parsing.combinator.Parsers.repN", "link" : "provingground\/translation\/TermParser.html#repN[T](num:Int,p:=>Parsers.this.Parser[T]):Parsers.this.Parser[List[T]]", "kind" : "def"}, {"label" : "rep1", "tail" : "(first: ⇒ Parser[T], p0: ⇒ Parser[T]): Parser[List[T]]", "member" : "scala.util.parsing.combinator.Parsers.rep1", "link" : "provingground\/translation\/TermParser.html#rep1[T](first:=>Parsers.this.Parser[T],p0:=>Parsers.this.Parser[T]):Parsers.this.Parser[List[T]]", "kind" : "def"}, {"label" : "rep1", "tail" : "(p: ⇒ Parser[T]): Parser[List[T]]", "member" : "scala.util.parsing.combinator.Parsers.rep1", "link" : "provingground\/translation\/TermParser.html#rep1[T](p:=>Parsers.this.Parser[T]):Parsers.this.Parser[List[T]]", "kind" : "def"}, {"label" : "repsep", "tail" : "(p: ⇒ Parser[T], q: ⇒ Parser[Any]): Parser[List[T]]", "member" : "scala.util.parsing.combinator.Parsers.repsep", "link" : "provingground\/translation\/TermParser.html#repsep[T](p:=>Parsers.this.Parser[T],q:=>Parsers.this.Parser[Any]):Parsers.this.Parser[List[T]]", "kind" : "def"}, {"label" : "rep", "tail" : "(p: ⇒ Parser[T]): Parser[List[T]]", "member" : "scala.util.parsing.combinator.Parsers.rep", "link" : "provingground\/translation\/TermParser.html#rep[T](p:=>Parsers.this.Parser[T]):Parsers.this.Parser[List[T]]", "kind" : "def"}, {"label" : "log", "tail" : "(p: ⇒ Parser[T])(name: String): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.log", "link" : "provingground\/translation\/TermParser.html#log[T](p:=>Parsers.this.Parser[T])(name:String):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "success", "tail" : "(v: T): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.success", "link" : "provingground\/translation\/TermParser.html#success[T](v:T):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "err", "tail" : "(msg: String): Parser[Nothing]", "member" : "scala.util.parsing.combinator.Parsers.err", "link" : "provingground\/translation\/TermParser.html#err(msg:String):Parsers.this.Parser[Nothing]", "kind" : "def"}, {"label" : "failure", "tail" : "(msg: String): Parser[Nothing]", "member" : "scala.util.parsing.combinator.Parsers.failure", "link" : "provingground\/translation\/TermParser.html#failure(msg:String):Parsers.this.Parser[Nothing]", "kind" : "def"}, {"label" : "acceptSeq", "tail" : "(es: ES)(arg0: (ES) ⇒ Iterable[Elem]): Parser[List[Elem]]", "member" : "scala.util.parsing.combinator.Parsers.acceptSeq", "link" : "provingground\/translation\/TermParser.html#acceptSeq[ES](es:ES)(implicitevidence$2:ES=>Iterable[Parsers.this.Elem]):Parsers.this.Parser[List[Parsers.this.Elem]]", "kind" : "def"}, {"label" : "acceptMatch", "tail" : "(expected: String, f: PartialFunction[Elem, U]): Parser[U]", "member" : "scala.util.parsing.combinator.Parsers.acceptMatch", "link" : "provingground\/translation\/TermParser.html#acceptMatch[U](expected:String,f:PartialFunction[Parsers.this.Elem,U]):Parsers.this.Parser[U]", "kind" : "def"}, {"label" : "acceptIf", "tail" : "(p: (Elem) ⇒ Boolean)(err: (Elem) ⇒ String): Parser[Elem]", "member" : "scala.util.parsing.combinator.Parsers.acceptIf", "link" : "provingground\/translation\/TermParser.html#acceptIf(p:Parsers.this.Elem=>Boolean)(err:Parsers.this.Elem=>String):Parsers.this.Parser[Parsers.this.Elem]", "kind" : "def"}, {"label" : "accept", "tail" : "(expected: String, f: PartialFunction[Elem, U]): Parser[U]", "member" : "scala.util.parsing.combinator.Parsers.accept", "link" : "provingground\/translation\/TermParser.html#accept[U](expected:String,f:PartialFunction[Parsers.this.Elem,U]):Parsers.this.Parser[U]", "kind" : "def"}, {"label" : "accept", "tail" : "(es: ES)(arg0: (ES) ⇒ List[Elem]): Parser[List[Elem]]", "member" : "scala.util.parsing.combinator.Parsers.accept", "link" : "provingground\/translation\/TermParser.html#accept[ES](es:ES)(implicitevidence$1:ES=>List[Parsers.this.Elem]):Parsers.this.Parser[List[Parsers.this.Elem]]", "kind" : "def"}, {"label" : "accept", "tail" : "(e: Elem): Parser[Elem]", "member" : "scala.util.parsing.combinator.Parsers.accept", "link" : "provingground\/translation\/TermParser.html#accept(e:Parsers.this.Elem):Parsers.this.Parser[Parsers.this.Elem]", "kind" : "implicit def"}, {"label" : "elem", "tail" : "(e: Elem): Parser[Elem]", "member" : "scala.util.parsing.combinator.Parsers.elem", "link" : "provingground\/translation\/TermParser.html#elem(e:Parsers.this.Elem):Parsers.this.Parser[Parsers.this.Elem]", "kind" : "def"}, {"label" : "elem", "tail" : "(kind: String, p: (Elem) ⇒ Boolean): Parser[Elem]", "member" : "scala.util.parsing.combinator.Parsers.elem", "link" : "provingground\/translation\/TermParser.html#elem(kind:String,p:Parsers.this.Elem=>Boolean):Parsers.this.Parser[Parsers.this.Elem]", "kind" : "def"}, {"label" : "commit", "tail" : "(p: ⇒ Parser[T]): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.commit", "link" : "provingground\/translation\/TermParser.html#commit[T](p:=>Parsers.this.Parser[T]):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "OnceParser", "tail" : "(f: (Input) ⇒ ParseResult[T]): Parser[T] with OnceParser[T]", "member" : "scala.util.parsing.combinator.Parsers.OnceParser", "link" : "provingground\/translation\/TermParser.html#OnceParser[T](f:Parsers.this.Input=>Parsers.this.ParseResult[T]):Parsers.this.Parser[T]withParsers.this.OnceParser[T]", "kind" : "def"}, {"label" : "Parser", "tail" : "(f: (Input) ⇒ ParseResult[T]): Parser[T]", "member" : "scala.util.parsing.combinator.Parsers.Parser", "link" : "provingground\/translation\/TermParser.html#Parser[T](f:Parsers.this.Input=>Parsers.this.ParseResult[T]):Parsers.this.Parser[T]", "kind" : "def"}, {"label" : "Input", "tail" : "", "member" : "scala.util.parsing.combinator.Parsers.Input", "link" : "provingground\/translation\/TermParser.html#Input=scala.util.parsing.input.Reader[Parsers.this.Elem]", "kind" : "type"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/TermParser.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/TermParser.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/TermParser.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/TermParser.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/TermParser.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/TermParser.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/TermParser.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TermParser.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TermParser.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TermParser.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/TermParser.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/TermParser.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/TermParser.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/TermParser.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/TermParser.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/TermParser.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/TermParser.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/TermParser.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/TermParser.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/translation\/TermParser.html", "kind" : "class"}, {"name" : "provingground.translation.TermPatterns", "shortDescription" : "Patterns, in the sense of Translator.Pattern, as well as some buildersfor various kinds of HoTT terms.", "object" : "provingground\/translation\/TermPatterns$.html", "members_object" : [{"label" : "buildIndIndDef", "tail" : "(inds: (Term) ⇒ Option[IndexedConstructorSeqDom[_, Term, _, _, _]]): (Vector[Term], (Term, (Term, Vector[Term]))) ⇒ Option[Term]", "member" : "provingground.translation.TermPatterns.buildIndIndDef", "link" : "provingground\/translation\/TermPatterns$.html#buildIndIndDef(inds:provingground.HoTT.Term=>Option[provingground.induction.IndexedConstructorSeqDom[_,provingground.HoTT.Term,_,_,_]]):(Vector[provingground.HoTT.Term],(provingground.HoTT.Term,(provingground.HoTT.Term,Vector[provingground.HoTT.Term])))=>Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "buildIndDef", "tail" : "(inds: (Typ[Term]) ⇒ Option[ConstructorSeqTL[_, Term, _]]): (Term, (Term, Vector[Term])) ⇒ Option[Term]", "member" : "provingground.translation.TermPatterns.buildIndDef", "link" : "provingground\/translation\/TermPatterns$.html#buildIndDef(inds:provingground.HoTT.Typ[provingground.HoTT.Term]=>Option[provingground.induction.ConstructorSeqTL[_,provingground.HoTT.Term,_]]):(provingground.HoTT.Term,(provingground.HoTT.Term,Vector[provingground.HoTT.Term]))=>Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "fm", "tail" : "(dom: Typ[U], fmly: Term): Func[U with Subs[U], Typ[_]] forSome {type _ <: Term with Subs[_]}", "member" : "provingground.translation.TermPatterns.fm", "link" : "provingground\/translation\/TermPatterns$.html#fm[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](dom:provingground.HoTT.Typ[U],fmly:provingground.HoTT.Term):provingground.HoTT.Func[Uwithprovingground.HoTT.Subs[U],provingground.HoTT.Typ[_]]forSome{type_<:provingground.HoTT.Termwithprovingground.HoTT.Subs[_]}", "kind" : "def"}, {"label" : "buildIndRecDef", "tail" : "(inds: (Term) ⇒ Option[IndexedConstructorSeqDom[_, Term, _, _, _]]): (Vector[Term], (Term, (Term, Vector[Term]))) ⇒ Option[Term]", "member" : "provingground.translation.TermPatterns.buildIndRecDef", "link" : "provingground\/translation\/TermPatterns$.html#buildIndRecDef(inds:provingground.HoTT.Term=>Option[provingground.induction.IndexedConstructorSeqDom[_,provingground.HoTT.Term,_,_,_]]):(Vector[provingground.HoTT.Term],(provingground.HoTT.Term,(provingground.HoTT.Term,Vector[provingground.HoTT.Term])))=>Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "buildRecDef", "tail" : "(inds: (Typ[Term]) ⇒ Option[ConstructorSeqTL[_, _, _]]): (Term, (Term, Vector[Term])) ⇒ Option[Term]", "member" : "provingground.translation.TermPatterns.buildRecDef", "link" : "provingground\/translation\/TermPatterns$.html#buildRecDef(inds:provingground.HoTT.Typ[provingground.HoTT.Term]=>Option[provingground.induction.ConstructorSeqTL[_,_,_]]):(provingground.HoTT.Term,(provingground.HoTT.Term,Vector[provingground.HoTT.Term]))=>Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "termToExpr", "tail" : "(univ: (Int) ⇒ Option[E])(arg0: ExprLang[E]): OrElse[Term, E]", "member" : "provingground.translation.TermPatterns.termToExpr", "link" : "provingground\/translation\/TermPatterns$.html#termToExpr[E](univ:Int=>Option[E])(implicitevidence$2:provingground.translation.ExprLang[E]):provingground.translation.Translator.OrElse[provingground.HoTT.Term,E]", "kind" : "def"}, {"label" : "termToExprRaw", "tail" : "(arg0: ExprLang[E]): OrElse[Term, E]", "member" : "provingground.translation.TermPatterns.termToExprRaw", "link" : "provingground\/translation\/TermPatterns$.html#termToExprRaw[E](implicitevidence$1:provingground.translation.ExprLang[E]):provingground.translation.Translator.OrElse[provingground.HoTT.Term,E]", "kind" : "def"}, {"label" : "stringRep", "tail" : ": Pattern[Term, S]", "member" : "provingground.translation.TermPatterns.stringRep", "link" : "provingground\/translation\/TermPatterns$.html#stringRep:provingground.translation.Translator.Pattern[provingground.HoTT.Term,provingground.translation.Functors.S]", "kind" : "val"}, {"label" : "symString", "tail" : ": Pattern[Term, S]", "member" : "provingground.translation.TermPatterns.symString", "link" : "provingground\/translation\/TermPatterns$.html#symString:provingground.translation.Translator.Pattern[provingground.HoTT.Term,provingground.translation.Functors.S]", "kind" : "val"}, {"label" : "symName", "tail" : ": Pattern[Term, S]", "member" : "provingground.translation.TermPatterns.symName", "link" : "provingground\/translation\/TermPatterns$.html#symName:provingground.translation.Translator.Pattern[provingground.HoTT.Term,provingground.translation.Functors.S]", "kind" : "val"}, {"label" : "hashSymbolic", "tail" : ": Pattern[Term, Named]", "member" : "provingground.translation.TermPatterns.hashSymbolic", "link" : "provingground\/translation\/TermPatterns$.html#hashSymbolic:provingground.translation.Translator.Pattern[provingground.HoTT.Term,provingground.translation.Functors.Named]", "kind" : "val"}, {"label" : "symbolic", "tail" : ": Pattern[Term, Named]", "member" : "provingground.translation.TermPatterns.symbolic", "link" : "provingground\/translation\/TermPatterns$.html#symbolic:provingground.translation.Translator.Pattern[provingground.HoTT.Term,provingground.translation.Functors.Named]", "kind" : "val"}, {"label" : "prop", "tail" : ": Pattern[Term, Un]", "member" : "provingground.translation.TermPatterns.prop", "link" : "provingground\/translation\/TermPatterns$.html#prop:provingground.translation.Translator.Pattern[provingground.HoTT.Term,provingground.translation.Functors.Un]", "kind" : "val"}, {"label" : "propUniv", "tail" : ": Pattern[Term, Un]", "member" : "provingground.translation.TermPatterns.propUniv", "link" : "provingground\/translation\/TermPatterns$.html#propUniv:provingground.translation.Translator.Pattern[provingground.HoTT.Term,provingground.translation.Functors.Un]", "kind" : "val"}, {"label" : "universe", "tail" : ": Pattern[Term, N]", "member" : "provingground.translation.TermPatterns.universe", "link" : "provingground\/translation\/TermPatterns$.html#universe:provingground.translation.Translator.Pattern[provingground.HoTT.Term,provingground.translation.Functors.N]", "kind" : "val"}, {"label" : "zero", "tail" : ": Pattern[Term, Un]", "member" : "provingground.translation.TermPatterns.zero", "link" : "provingground\/translation\/TermPatterns$.html#zero:provingground.translation.Translator.Pattern[provingground.HoTT.Term,provingground.translation.Functors.Un]", "kind" : "val"}, {"label" : "unit", "tail" : ": Pattern[Term, Un]", "member" : "provingground.translation.TermPatterns.unit", "link" : "provingground\/translation\/TermPatterns$.html#unit:provingground.translation.Translator.Pattern[provingground.HoTT.Term,provingground.translation.Functors.Un]", "kind" : "val"}, {"label" : "star", "tail" : ": Pattern[Term, Un]", "member" : "provingground.translation.TermPatterns.star", "link" : "provingground\/translation\/TermPatterns$.html#star:provingground.translation.Translator.Pattern[provingground.HoTT.Term,provingground.translation.Functors.Un]", "kind" : "val"}, {"label" : "refl", "tail" : ": Pattern[Term, II]", "member" : "provingground.translation.TermPatterns.refl", "link" : "provingground\/translation\/TermPatterns$.html#refl:provingground.translation.Translator.Pattern[provingground.HoTT.Term,provingground.translation.Functors.II]", "kind" : "val"}, {"label" : "secondIncl", "tail" : ": Pattern[Term, II]", "member" : "provingground.translation.TermPatterns.secondIncl", "link" : "provingground\/translation\/TermPatterns$.html#secondIncl:provingground.translation.Translator.Pattern[provingground.HoTT.Term,provingground.translation.Functors.II]", "kind" : "val"}, {"label" : "firstIncl", "tail" : ": Pattern[Term, II]", "member" : "provingground.translation.TermPatterns.firstIncl", "link" : "provingground\/translation\/TermPatterns$.html#firstIncl:provingground.translation.Translator.Pattern[provingground.HoTT.Term,provingground.translation.Functors.II]", "kind" : "val"}, {"label" : "equation", "tail" : ": Pattern[Term, II]", "member" : "provingground.translation.TermPatterns.equation", "link" : "provingground\/translation\/TermPatterns$.html#equation:provingground.translation.Translator.Pattern[provingground.HoTT.Term,provingground.translation.Functors.II]", "kind" : "val"}, {"label" : "identityTyp", "tail" : ": Pattern[Term, III]", "member" : "provingground.translation.TermPatterns.identityTyp", "link" : "provingground\/translation\/TermPatterns$.html#identityTyp:provingground.translation.Translator.Pattern[provingground.HoTT.Term,provingground.translation.Functors.III]", "kind" : "val"}, {"label" : "indInducFunc", "tail" : ": Pattern[Term, IVIIV]", "member" : "provingground.translation.TermPatterns.indInducFunc", "link" : "provingground\/translation\/TermPatterns$.html#indInducFunc:provingground.translation.Translator.Pattern[provingground.HoTT.Term,provingground.translation.Functors.IVIIV]", "kind" : "val"}, {"label" : "inducFuncApplied", "tail" : "(inds: (Typ[Term]) ⇒ Option[ConstructorSeqTL[_, Term, _]]): Pattern[Term, Id]", "member" : "provingground.translation.TermPatterns.inducFuncApplied", "link" : "provingground\/translation\/TermPatterns$.html#inducFuncApplied(inds:provingground.HoTT.Typ[provingground.HoTT.Term]=>Option[provingground.induction.ConstructorSeqTL[_,provingground.HoTT.Term,_]]):provingground.translation.Translator.Pattern[provingground.HoTT.Term,cats.Id]", "kind" : "def"}, {"label" : "inducFunc", "tail" : ": Pattern[Term, IIV]", "member" : "provingground.translation.TermPatterns.inducFunc", "link" : "provingground\/translation\/TermPatterns$.html#inducFunc:provingground.translation.Translator.Pattern[provingground.HoTT.Term,provingground.translation.Functors.IIV]", "kind" : "val"}, {"label" : "indRecFunc", "tail" : ": Pattern[Term, IVIIV]", "member" : "provingground.translation.TermPatterns.indRecFunc", "link" : "provingground\/translation\/TermPatterns$.html#indRecFunc:provingground.translation.Translator.Pattern[provingground.HoTT.Term,provingground.translation.Functors.IVIIV]", "kind" : "val"}, {"label" : "recFuncApplied", "tail" : "(inds: (Typ[Term]) ⇒ Option[ConstructorSeqTL[_, _, _]]): Pattern[Term, Id]", "member" : "provingground.translation.TermPatterns.recFuncApplied", "link" : "provingground\/translation\/TermPatterns$.html#recFuncApplied(inds:provingground.HoTT.Typ[provingground.HoTT.Term]=>Option[provingground.induction.ConstructorSeqTL[_,_,_]]):provingground.translation.Translator.Pattern[provingground.HoTT.Term,cats.Id]", "kind" : "def"}, {"label" : "recFunc", "tail" : ": Pattern[Term, IIV]", "member" : "provingground.translation.TermPatterns.recFunc", "link" : "provingground\/translation\/TermPatterns$.html#recFunc:provingground.translation.Translator.Pattern[provingground.HoTT.Term,provingground.translation.Functors.IIV]", "kind" : "val"}, {"label" : "funcTyp", "tail" : ": Pattern[Term, II]", "member" : "provingground.translation.TermPatterns.funcTyp", "link" : "provingground\/translation\/TermPatterns$.html#funcTyp:provingground.translation.Translator.Pattern[provingground.HoTT.Term,provingground.translation.Functors.II]", "kind" : "val"}, {"label" : "prodTyp", "tail" : ": Pattern[Term, II]", "member" : "provingground.translation.TermPatterns.prodTyp", "link" : "provingground\/translation\/TermPatterns$.html#prodTyp:provingground.translation.Translator.Pattern[provingground.HoTT.Term,provingground.translation.Functors.II]", "kind" : "val"}, {"label" : "depPairTerm", "tail" : ": Pattern[Term, III]", "member" : "provingground.translation.TermPatterns.depPairTerm", "link" : "provingground\/translation\/TermPatterns$.html#depPairTerm:provingground.translation.Translator.Pattern[provingground.HoTT.Term,provingground.translation.Functors.III]", "kind" : "val"}, {"label" : "pairTerm", "tail" : ": Pattern[Term, II]", "member" : "provingground.translation.TermPatterns.pairTerm", "link" : "provingground\/translation\/TermPatterns$.html#pairTerm:provingground.translation.Translator.Pattern[provingground.HoTT.Term,provingground.translation.Functors.II]", "kind" : "val"}, {"label" : "absPair", "tail" : ": Pattern[Term, II]", "member" : "provingground.translation.TermPatterns.absPair", "link" : "provingground\/translation\/TermPatterns$.html#absPair:provingground.translation.Translator.Pattern[provingground.HoTT.Term,provingground.translation.Functors.II]", "kind" : "val"}, {"label" : "plusTyp", "tail" : ": Pattern[Term, II]", "member" : "provingground.translation.TermPatterns.plusTyp", "link" : "provingground\/translation\/TermPatterns$.html#plusTyp:provingground.translation.Translator.Pattern[provingground.HoTT.Term,provingground.translation.Functors.II]", "kind" : "val"}, {"label" : "sigmaLam", "tail" : ": Pattern[Term, II]", "member" : "provingground.translation.TermPatterns.sigmaLam", "link" : "provingground\/translation\/TermPatterns$.html#sigmaLam:provingground.translation.Translator.Pattern[provingground.HoTT.Term,provingground.translation.Functors.II]", "kind" : "val"}, {"label" : "sigmaTyp", "tail" : ": Pattern[Term, Id]", "member" : "provingground.translation.TermPatterns.sigmaTyp", "link" : "provingground\/translation\/TermPatterns$.html#sigmaTyp:provingground.translation.Translator.Pattern[provingground.HoTT.Term,cats.Id]", "kind" : "val"}, {"label" : "piLam", "tail" : ": Pattern[Term, II]", "member" : "provingground.translation.TermPatterns.piLam", "link" : "provingground\/translation\/TermPatterns$.html#piLam:provingground.translation.Translator.Pattern[provingground.HoTT.Term,provingground.translation.Functors.II]", "kind" : "val"}, {"label" : "piTyp", "tail" : ": Pattern[Term, Id]", "member" : "provingground.translation.TermPatterns.piTyp", "link" : "provingground\/translation\/TermPatterns$.html#piTyp:provingground.translation.Translator.Pattern[provingground.HoTT.Term,cats.Id]", "kind" : "val"}, {"label" : "sigmaTriple", "tail" : ": Pattern[Term, III]", "member" : "provingground.translation.TermPatterns.sigmaTriple", "link" : "provingground\/translation\/TermPatterns$.html#sigmaTriple:provingground.translation.Translator.Pattern[provingground.HoTT.Term,provingground.translation.Functors.III]", "kind" : "val"}, {"label" : "piTriple", "tail" : ": Pattern[Term, III]", "member" : "provingground.translation.TermPatterns.piTriple", "link" : "provingground\/translation\/TermPatterns$.html#piTriple:provingground.translation.Translator.Pattern[provingground.HoTT.Term,provingground.translation.Functors.III]", "kind" : "val"}, {"label" : "lambdaFixedTriple", "tail" : ": Pattern[Term, III]", "member" : "provingground.translation.TermPatterns.lambdaFixedTriple", "link" : "provingground\/translation\/TermPatterns$.html#lambdaFixedTriple:provingground.translation.Translator.Pattern[provingground.HoTT.Term,provingground.translation.Functors.III]", "kind" : "val"}, {"label" : "lambdaTriple", "tail" : ": Pattern[Term, III]", "member" : "provingground.translation.TermPatterns.lambdaTriple", "link" : "provingground\/translation\/TermPatterns$.html#lambdaTriple:provingground.translation.Translator.Pattern[provingground.HoTT.Term,provingground.translation.Functors.III]", "kind" : "val"}, {"label" : "lambdaAppln", "tail" : ": Pattern[Term, II]", "member" : "provingground.translation.TermPatterns.lambdaAppln", "link" : "provingground\/translation\/TermPatterns$.html#lambdaAppln:provingground.translation.Translator.Pattern[provingground.HoTT.Term,provingground.translation.Functors.II]", "kind" : "val"}, {"label" : "formalAppln", "tail" : ": Pattern[Term, II]", "member" : "provingground.translation.TermPatterns.formalAppln", "link" : "provingground\/translation\/TermPatterns$.html#formalAppln:provingground.translation.Translator.Pattern[provingground.HoTT.Term,provingground.translation.Functors.II]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/TermPatterns$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/TermPatterns$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/TermPatterns$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/TermPatterns$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/TermPatterns$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/TermPatterns$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/TermPatterns$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TermPatterns$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TermPatterns$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TermPatterns$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/TermPatterns$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/TermPatterns$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/TermPatterns$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/TermPatterns$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/TermPatterns$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/TermPatterns$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/TermPatterns$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/TermPatterns$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/TermPatterns$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.translation.TermRec", "members_trait" : [{"label" : "apply", "tail" : "(term: Term): U", "member" : "provingground.translation.TermRec.apply", "link" : "provingground\/translation\/TermRec.html#apply(term:provingground.HoTT.Term):U", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/TermRec.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/TermRec.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/TermRec.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/TermRec.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/TermRec.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/TermRec.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/TermRec.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TermRec.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TermRec.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TermRec.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/TermRec.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/TermRec.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/TermRec.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/TermRec.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/TermRec.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/TermRec.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/TermRec.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/TermRec.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/TermRec.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "univ", "tail" : "(n: Int): U", "member" : "provingground.translation.TermRec.univ", "link" : "provingground\/translation\/TermRec.html#univ(n:Int):U", "kind" : "abstract def"}, {"label" : "symbolic", "tail" : "(name: AnySym, typ: Typ[Term]): U", "member" : "provingground.translation.TermRec.symbolic", "link" : "provingground\/translation\/TermRec.html#symbolic(name:provingground.HoTT.AnySym,typ:provingground.HoTT.Typ[provingground.HoTT.Term]):U", "kind" : "abstract def"}, {"label" : "symbtyp", "tail" : "(term: SymbTyp): U", "member" : "provingground.translation.TermRec.symbtyp", "link" : "provingground\/translation\/TermRec.html#symbtyp(term:provingground.HoTT.SymbTyp):U", "kind" : "abstract def"}, {"label" : "symbobj", "tail" : "(term: SymbObj[Term]): U", "member" : "provingground.translation.TermRec.symbobj", "link" : "provingground\/translation\/TermRec.html#symbobj(term:provingground.HoTT.SymbObj[provingground.HoTT.Term]):U", "kind" : "abstract def"}, {"label" : "pair", "tail" : "(first: U, second: U): U", "member" : "provingground.translation.TermRec.pair", "link" : "provingground\/translation\/TermRec.html#pair(first:U,second:U):U", "kind" : "abstract def"}, {"label" : "equality", "tail" : "(dom: U, lhs: U, rhs: U): U", "member" : "provingground.translation.TermRec.equality", "link" : "provingground\/translation\/TermRec.html#equality(dom:U,lhs:U,rhs:U):U", "kind" : "abstract def"}, {"label" : "plus", "tail" : "(first: U, second: U): U", "member" : "provingground.translation.TermRec.plus", "link" : "provingground\/translation\/TermRec.html#plus(first:U,second:U):U", "kind" : "abstract def"}, {"label" : "sigma", "tail" : "(fibre: U): U", "member" : "provingground.translation.TermRec.sigma", "link" : "provingground\/translation\/TermRec.html#sigma(fibre:U):U", "kind" : "abstract def"}, {"label" : "pi", "tail" : "(fibre: U): U", "member" : "provingground.translation.TermRec.pi", "link" : "provingground\/translation\/TermRec.html#pi(fibre:U):U", "kind" : "abstract def"}, {"label" : "lambda", "tail" : "(variable: U, typ: U, value: U): U", "member" : "provingground.translation.TermRec.lambda", "link" : "provingground\/translation\/TermRec.html#lambda(variable:U,typ:U,value:U):U", "kind" : "abstract def"}, {"label" : "arrow", "tail" : "(dom: U, codom: U): U", "member" : "provingground.translation.TermRec.arrow", "link" : "provingground\/translation\/TermRec.html#arrow(dom:U,codom:U):U", "kind" : "abstract def"}, {"label" : "appln", "tail" : "(func: U, arg: U): U", "member" : "provingground.translation.TermRec.appln", "link" : "provingground\/translation\/TermRec.html#appln(func:U,arg:U):U", "kind" : "abstract def"}, {"label" : "fromString", "tail" : "(str: String)(typ: Typ[Term]): U", "member" : "provingground.translation.TermRec.fromString", "link" : "provingground\/translation\/TermRec.html#fromString(str:String)(implicittyp:provingground.HoTT.Typ[provingground.HoTT.Term]):U", "kind" : "abstract def"}, {"label" : "specialTerms", "tail" : ": PartialFunction[Term, U]", "member" : "provingground.translation.TermRec.specialTerms", "link" : "provingground\/translation\/TermRec.html#specialTerms:PartialFunction[provingground.HoTT.Term,U]", "kind" : "abstract val"}], "shortDescription" : "", "trait" : "provingground\/translation\/TermRec.html", "kind" : "trait"}, {"name" : "provingground.translation.TermShapeTree", "shortDescription" : "", "object" : "provingground\/translation\/TermShapeTree$.html", "members_object" : [{"label" : "univ", "tail" : "(n: Int): ShapeTree", "member" : "provingground.translation.ShapeTreeFormat.univ", "link" : "provingground\/translation\/TermShapeTree$.html#univ(n:Int):provingground.translation.ShapeTree", "kind" : "def"}, {"label" : "symbolic", "tail" : "(name: AnySym, typ: Typ[Term]): ShapeTree", "member" : "provingground.translation.ShapeTreeFormat.symbolic", "link" : "provingground\/translation\/TermShapeTree$.html#symbolic(name:provingground.HoTT.AnySym,typ:provingground.HoTT.Typ[provingground.HoTT.Term]):provingground.translation.ShapeTree", "kind" : "def"}, {"label" : "symbtyp", "tail" : "(term: SymbTyp): ShapeTree", "member" : "provingground.translation.ShapeTreeFormat.symbtyp", "link" : "provingground\/translation\/TermShapeTree$.html#symbtyp(term:provingground.HoTT.SymbTyp):provingground.translation.ShapeTree", "kind" : "def"}, {"label" : "symbobj", "tail" : "(term: SymbObj[Term]): ShapeTree", "member" : "provingground.translation.ShapeTreeFormat.symbobj", "link" : "provingground\/translation\/TermShapeTree$.html#symbobj(term:provingground.HoTT.SymbObj[provingground.HoTT.Term]):provingground.translation.ShapeTree", "kind" : "def"}, {"label" : "pair", "tail" : "(first: ShapeTree, second: ShapeTree): ShapeTree", "member" : "provingground.translation.ShapeTreeFormat.pair", "link" : "provingground\/translation\/TermShapeTree$.html#pair(first:provingground.translation.ShapeTree,second:provingground.translation.ShapeTree):provingground.translation.ShapeTree", "kind" : "def"}, {"label" : "equality", "tail" : "(dom: ShapeTree, lhs: ShapeTree, rhs: ShapeTree): ShapeTree", "member" : "provingground.translation.ShapeTreeFormat.equality", "link" : "provingground\/translation\/TermShapeTree$.html#equality(dom:provingground.translation.ShapeTree,lhs:provingground.translation.ShapeTree,rhs:provingground.translation.ShapeTree):provingground.translation.ShapeTree", "kind" : "def"}, {"label" : "plus", "tail" : "(first: ShapeTree, second: ShapeTree): ShapeTree", "member" : "provingground.translation.ShapeTreeFormat.plus", "link" : "provingground\/translation\/TermShapeTree$.html#plus(first:provingground.translation.ShapeTree,second:provingground.translation.ShapeTree):provingground.translation.ShapeTree", "kind" : "def"}, {"label" : "sigma", "tail" : "(fibre: ShapeTree): ShapeTree", "member" : "provingground.translation.ShapeTreeFormat.sigma", "link" : "provingground\/translation\/TermShapeTree$.html#sigma(fibre:provingground.translation.ShapeTree):provingground.translation.ShapeTree", "kind" : "def"}, {"label" : "pi", "tail" : "(fibre: ShapeTree): ShapeTree", "member" : "provingground.translation.ShapeTreeFormat.pi", "link" : "provingground\/translation\/TermShapeTree$.html#pi(fibre:provingground.translation.ShapeTree):provingground.translation.ShapeTree", "kind" : "def"}, {"label" : "lambda", "tail" : "(variable: ShapeTree, typ: ShapeTree, value: ShapeTree): ShapeTree", "member" : "provingground.translation.ShapeTreeFormat.lambda", "link" : "provingground\/translation\/TermShapeTree$.html#lambda(variable:provingground.translation.ShapeTree,typ:provingground.translation.ShapeTree,value:provingground.translation.ShapeTree):provingground.translation.ShapeTree", "kind" : "def"}, {"label" : "arrow", "tail" : "(dom: ShapeTree, codom: ShapeTree): ShapeTree", "member" : "provingground.translation.ShapeTreeFormat.arrow", "link" : "provingground\/translation\/TermShapeTree$.html#arrow(dom:provingground.translation.ShapeTree,codom:provingground.translation.ShapeTree):provingground.translation.ShapeTree", "kind" : "def"}, {"label" : "appln", "tail" : "(func: ShapeTree, arg: ShapeTree): ShapeTree", "member" : "provingground.translation.ShapeTreeFormat.appln", "link" : "provingground\/translation\/TermShapeTree$.html#appln(func:provingground.translation.ShapeTree,arg:provingground.translation.ShapeTree):provingground.translation.ShapeTree", "kind" : "def"}, {"label" : "fromString", "tail" : "(str: String)(typ: Typ[Term]): ShapeTree", "member" : "provingground.translation.ShapeTreeFormat.fromString", "link" : "provingground\/translation\/TermShapeTree$.html#fromString(str:String)(implicittyp:provingground.HoTT.Typ[provingground.HoTT.Term]):provingground.translation.ShapeTree", "kind" : "def"}, {"label" : "specialTerms", "tail" : ": PartialFunction[Term, ShapeTree]", "member" : "provingground.translation.ShapeTreeFormat.specialTerms", "link" : "provingground\/translation\/TermShapeTree$.html#specialTerms:PartialFunction[provingground.HoTT.Term,provingground.translation.ShapeTree]", "kind" : "val"}, {"label" : "apply", "tail" : "(term: Term): ShapeTree", "member" : "provingground.translation.TermRec.apply", "link" : "provingground\/translation\/TermShapeTree$.html#apply(term:provingground.HoTT.Term):U", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/TermShapeTree$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/TermShapeTree$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/TermShapeTree$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/TermShapeTree$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/TermShapeTree$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/TermShapeTree$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/TermShapeTree$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TermShapeTree$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TermShapeTree$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TermShapeTree$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/TermShapeTree$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/TermShapeTree$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/TermShapeTree$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/TermShapeTree$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/TermShapeTree$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/TermShapeTree$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/TermShapeTree$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/TermShapeTree$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/TermShapeTree$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.translation.TermToExpr", "shortDescription" : "", "object" : "provingground\/translation\/TermToExpr$.html", "members_class" : [{"label" : "apply", "tail" : "(term: Term): Option[E]", "member" : "provingground.translation.TermToExpr.apply", "link" : "provingground\/translation\/TermToExpr.html#apply(term:provingground.HoTT.Term):Option[E]", "kind" : "def"}, {"label" : "expr", "tail" : "(): (Term) ⇒ Option[E]", "member" : "provingground.translation.TermToExpr.expr", "link" : "provingground\/translation\/TermToExpr.html#expr:provingground.HoTT.Term=>Option[E]", "kind" : "def"}, {"member" : "provingground.translation.TermToExpr#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/TermToExpr.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/TermToExpr.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/TermToExpr.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/TermToExpr.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/TermToExpr.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/TermToExpr.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/TermToExpr.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TermToExpr.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TermToExpr.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TermToExpr.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/TermToExpr.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/TermToExpr.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/TermToExpr.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/TermToExpr.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/TermToExpr.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/TermToExpr.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/TermToExpr.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/TermToExpr.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/TermToExpr.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "rebuildMap", "tail" : "(m: Map[Term, Set[(U, Term)]], prefix: String): Map[Term, Set[(U, Term)]]", "member" : "provingground.translation.TermToExpr.rebuildMap", "link" : "provingground\/translation\/TermToExpr$.html#rebuildMap[U<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U]](m:Map[provingground.HoTT.Term,Set[(U,provingground.HoTT.Term)]],prefix:String):scala.collection.immutable.Map[provingground.HoTT.Term,scala.collection.immutable.Set[(U,provingground.HoTT.Term)]]", "kind" : "def"}, {"label" : "rebuildList", "tail" : "(ts: List[Term], prefix: String): List[Term]", "member" : "provingground.translation.TermToExpr.rebuildList", "link" : "provingground\/translation\/TermToExpr$.html#rebuildList(ts:List[provingground.HoTT.Term],prefix:String):List[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "rebuildTyp", "tail" : "(t: Typ[Term], prefix: String): Typ[Term]", "member" : "provingground.translation.TermToExpr.rebuildTyp", "link" : "provingground\/translation\/TermToExpr$.html#rebuildTyp(t:provingground.HoTT.Typ[provingground.HoTT.Term],prefix:String):provingground.HoTT.Typ[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "rebuild", "tail" : "(t: Term, prefix: String): Term", "member" : "provingground.translation.TermToExpr.rebuild", "link" : "provingground\/translation\/TermToExpr$.html#rebuild(t:provingground.HoTT.Term,prefix:String):provingground.HoTT.Term", "kind" : "def"}, {"label" : "newTermOpt", "tail" : "(term: Term, prefix: String): Option[Term]", "member" : "provingground.translation.TermToExpr.newTermOpt", "link" : "provingground\/translation\/TermToExpr$.html#newTermOpt(term:provingground.HoTT.Term,prefix:String):Option[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "NewNameFactory", "tail" : "", "member" : "provingground.translation.TermToExpr.NewNameFactory", "link" : "provingground\/translation\/TermToExpr$.html#NewNameFactoryextendsAnyRef", "kind" : "class"}, {"label" : "decode", "tail" : "(names: Vector[(Term, String)]): (Term) ⇒ Term", "member" : "provingground.translation.TermToExpr.decode", "link" : "provingground\/translation\/TermToExpr$.html#decode(names:Vector[(provingground.HoTT.Term,String)]):provingground.HoTT.Term=>provingground.HoTT.Term", "kind" : "def"}, {"label" : "encode", "tail" : "(names: Vector[(Term, String)]): (Term) ⇒ Term", "member" : "provingground.translation.TermToExpr.encode", "link" : "provingground\/translation\/TermToExpr$.html#encode(names:Vector[(provingground.HoTT.Term,String)]):provingground.HoTT.Term=>provingground.HoTT.Term", "kind" : "def"}, {"label" : "fromFormalInduc", "tail" : "(term: Term): (Typ[Term], FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], Term]])", "member" : "provingground.translation.TermToExpr.fromFormalInduc", "link" : "provingground\/translation\/TermToExpr$.html#fromFormalInduc(term:provingground.HoTT.Term):(provingground.HoTT.Typ[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]])", "kind" : "def"}, {"label" : "formalIdInduc", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], FuncLike[Equality[Term with Subs[Term]] with Subs[Equality[Term with Subs[Term]]], Typ[Term]]]] with Subs[FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], FuncLike[Equality[Term with Subs[Term]] with Subs[Equality[Term with Subs[Term]]], Typ[Term]]]]], Func[FuncLike[Term with Subs[Term] with Subs[Term with Subs[Term]], Term] with Subs[FuncLike[Term with Subs[Term] with Subs[Term with Subs[Term]], Term]], FuncLike[Term with Subs[Term] with Subs[Term with Subs[Term]], FuncLike[Term with Subs[Term] with Subs[Term with Subs[Term]], Func[Equality[Term with Subs[Term] with Subs[Term with Subs[Term]]] with Subs[Equality[Term with Subs[Term] with Subs[Term with Subs[Term]]]], Term]]]] with Subs[Func[FuncLike[Term with Subs[Term] with Subs[Term with Subs[Term]], Term] with Subs[FuncLike[Term with Subs[Term] with Subs[Term with Subs[Term]], Term]], FuncLike[Term with Subs[Term] with Subs[Term with Subs[Term]], FuncLike[Term with Subs[Term] with Subs[Term with Subs[Term]], Func[Equality[Term with Subs[Term] with Subs[Term with Subs[Term]]] with Subs[Equality[Term with Subs[Term] with Subs[Term with Subs[Term]]]], Term]]]]]]]", "member" : "provingground.translation.TermToExpr.formalIdInduc", "link" : "provingground\/translation\/TermToExpr$.html#formalIdInduc:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Equality[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Equality[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]],provingground.HoTT.Typ[provingground.HoTT.Term]]]]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Equality[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Equality[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]],provingground.HoTT.Typ[provingground.HoTT.Term]]]]],provingground.HoTT.Func[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]],provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]],provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]],provingground.HoTT.Func[provingground.HoTT.Equality[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]]withprovingground.HoTT.Subs[provingground.HoTT.Equality[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]]],provingground.HoTT.Term]]]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]],provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]],provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]],provingground.HoTT.Func[provingground.HoTT.Equality[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]]withprovingground.HoTT.Subs[provingground.HoTT.Equality[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]]],provingground.HoTT.Term]]]]]]]", "kind" : "val"}, {"label" : "idInduc", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], FuncLike[Equality[Term with Subs[Term]] with Subs[Equality[Term with Subs[Term]]], Typ[Term]]]] with Subs[FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], FuncLike[Equality[Term with Subs[Term]] with Subs[Equality[Term with Subs[Term]]], Typ[Term]]]]], Func[FuncLike[Term with Subs[Term] with Subs[Term with Subs[Term]], Term] with Subs[FuncLike[Term with Subs[Term] with Subs[Term with Subs[Term]], Term]], FuncLike[Term with Subs[Term] with Subs[Term with Subs[Term]], FuncLike[Term with Subs[Term] with Subs[Term with Subs[Term]], Func[Equality[Term with Subs[Term] with Subs[Term with Subs[Term]]] with Subs[Equality[Term with Subs[Term] with Subs[Term with Subs[Term]]]], Term]]]]]]", "member" : "provingground.translation.TermToExpr.idInduc", "link" : "provingground\/translation\/TermToExpr$.html#idInduc:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Equality[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Equality[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]],provingground.HoTT.Typ[provingground.HoTT.Term]]]]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Equality[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Equality[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]],provingground.HoTT.Typ[provingground.HoTT.Term]]]]],provingground.HoTT.Func[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]],provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]],provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]],provingground.HoTT.Func[provingground.HoTT.Equality[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]]withprovingground.HoTT.Subs[provingground.HoTT.Equality[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]]],provingground.HoTT.Term]]]]]]", "kind" : "val"}, {"label" : "formalIdRec", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Typ[Term] with Subs[Typ[Term]], U with Subs[U]]] forSome {type U >: _1.type <: Term with Subs[U], val _1: Term}", "member" : "provingground.translation.TermToExpr.formalIdRec", "link" : "provingground\/translation\/TermToExpr$.html#formalIdRec:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],Uwithprovingground.HoTT.Subs[U]]]forSome{typeU>:_1.type<:provingground.HoTT.Termwithprovingground.HoTT.Subs[U];val_1:provingground.HoTT.Term}", "kind" : "val"}, {"label" : "idRec", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Typ[Term] with Subs[Typ[Term]], Term]]", "member" : "provingground.translation.TermToExpr.idRec", "link" : "provingground\/translation\/TermToExpr$.html#idRec:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "formalRefl", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Term with Subs[Term], Equality[Term with Subs[Term]]]] with Subs[FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Term with Subs[Term], Equality[Term with Subs[Term]]]]]", "member" : "provingground.translation.TermToExpr.formalRefl", "link" : "provingground\/translation\/TermToExpr$.html#formalRefl:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Equality[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]]]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Equality[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]]]]", "kind" : "val"}, {"label" : "reflFn", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Term with Subs[Term], Refl[Term with Subs[Term]]]]", "member" : "provingground.translation.TermToExpr.reflFn", "link" : "provingground\/translation\/TermToExpr$.html#reflFn:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Refl[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/TermToExpr$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/TermToExpr$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/TermToExpr$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/TermToExpr$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/TermToExpr$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/TermToExpr$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/TermToExpr$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TermToExpr$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TermToExpr$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TermToExpr$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/TermToExpr$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/TermToExpr$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/TermToExpr$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/TermToExpr$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/TermToExpr$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/TermToExpr$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/TermToExpr$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/TermToExpr$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/TermToExpr$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "provingground\/translation\/TermToExpr.html", "kind" : "class"}, {"name" : "provingground.translation.TestTrait", "shortDescription" : "", "object" : "provingground\/translation\/TestTrait$.html", "members_object" : [{"label" : "B", "tail" : "", "member" : "provingground.translation.TestTrait.B", "link" : "provingground\/translation\/TestTrait$.html#BextendsTestTrait.AwithProductwithSerializable", "kind" : "case class"}, {"label" : "C", "tail" : "", "member" : "provingground.translation.TestTrait.C", "link" : "provingground\/translation\/TestTrait$.html#C", "kind" : "object"}, {"label" : "A", "tail" : "", "member" : "provingground.translation.TestTrait.A", "link" : "provingground\/translation\/TestTrait$.html#AextendsAnyRef", "kind" : "sealed trait"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/TestTrait$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/TestTrait$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/TestTrait$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/TestTrait$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/TestTrait$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/TestTrait$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/TestTrait$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TestTrait$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TestTrait$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TestTrait$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/TestTrait$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/TestTrait$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/TestTrait$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/TestTrait$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/TestTrait$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/TestTrait$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/TestTrait$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/TestTrait$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/TestTrait$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.translation.TeXTranslate", "shortDescription" : "", "object" : "provingground\/translation\/TeXTranslate$.html", "members_object" : [{"label" : "texTrans", "tail" : ": OrElse[Term, String]", "member" : "provingground.translation.TeXTranslate.texTrans", "link" : "provingground\/translation\/TeXTranslate$.html#texTrans:provingground.translation.Translator.OrElse[provingground.HoTT.Term,String]", "kind" : "val"}, {"label" : "apply", "tail" : "(x: Term): String", "member" : "provingground.translation.TeXTranslate.apply", "link" : "provingground\/translation\/TeXTranslate$.html#apply(x:provingground.HoTT.Term):String", "kind" : "def"}, {"label" : "hatDol", "tail" : "(s: String): String", "member" : "provingground.translation.TeXTranslate.hatDol", "link" : "provingground\/translation\/TeXTranslate$.html#hatDol(s:String):String", "kind" : "def"}, {"label" : "dolName", "tail" : ": Regex", "member" : "provingground.translation.TeXTranslate.dolName", "link" : "provingground\/translation\/TeXTranslate$.html#dolName:scala.util.matching.Regex", "kind" : "val"}, {"label" : "syms", "tail" : ": UnicodeSyms.type", "member" : "provingground.translation.TeXTranslate.syms", "link" : "provingground\/translation\/TeXTranslate$.html#syms:provingground.HoTT.UnicodeSyms.type", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/TeXTranslate$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/TeXTranslate$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/TeXTranslate$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/TeXTranslate$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/TeXTranslate$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/TeXTranslate$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/TeXTranslate$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TeXTranslate$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TeXTranslate$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TeXTranslate$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/TeXTranslate$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/TeXTranslate$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/TeXTranslate$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/TeXTranslate$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/TeXTranslate$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/TeXTranslate$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/TeXTranslate$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/TeXTranslate$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/TeXTranslate$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.translation.TextToInt", "shortDescription" : "Converts prose numbers to Integers without checking for bad cases", "object" : "provingground\/translation\/TextToInt$.html", "members_object" : [{"label" : "stringNumber", "tail" : "(t: String): Long", "member" : "provingground.translation.TextToInt.stringNumber", "link" : "provingground\/translation\/TextToInt$.html#stringNumber(t:String):Long", "kind" : "def"}, {"label" : "splitString", "tail" : "(t: String): List[String]", "member" : "provingground.translation.TextToInt.splitString", "link" : "provingground\/translation\/TextToInt$.html#splitString(t:String):List[String]", "kind" : "def"}, {"label" : "wordListNumber", "tail" : "(l: List[String]): Long", "member" : "provingground.translation.TextToInt.wordListNumber", "link" : "provingground\/translation\/TextToInt$.html#wordListNumber(l:List[String]):Long", "kind" : "def"}, {"label" : "wordNum", "tail" : "(w: String): Long", "member" : "provingground.translation.TextToInt.wordNum", "link" : "provingground\/translation\/TextToInt$.html#wordNum(w:String):Long", "kind" : "def"}, {"label" : "Int", "tail" : "", "member" : "provingground.translation.TextToInt.Int", "link" : "provingground\/translation\/TextToInt$.html#Int", "kind" : "object"}, {"label" : "Long", "tail" : "", "member" : "provingground.translation.TextToInt.Long", "link" : "provingground\/translation\/TextToInt$.html#Long", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/TextToInt$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/TextToInt$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/TextToInt$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/TextToInt$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/TextToInt$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/TextToInt$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/TextToInt$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TextToInt$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TextToInt$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TextToInt$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/TextToInt$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/TextToInt$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/TextToInt$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/TextToInt$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/TextToInt$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/TextToInt$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/TextToInt$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/TextToInt$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/TextToInt$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.translation.TheoryTypes", "shortDescription" : "deprecated informally designed language, replaced by the Naproche based MathExpr", "object" : "provingground\/translation\/TheoryTypes$.html", "members_object" : [{"label" : "Para", "tail" : "", "member" : "provingground.translation.TheoryTypes.Para", "link" : "provingground\/translation\/TheoryTypes$.html#ParaextendsTheoryTypes.TheoryTypwithProductwithSerializable", "kind" : "case class"}, {"label" : "Method", "tail" : "", "member" : "provingground.translation.TheoryTypes.Method", "link" : "provingground\/translation\/TheoryTypes$.html#MethodextendsAnyRef", "kind" : "trait"}, {"label" : "Using", "tail" : "", "member" : "provingground.translation.TheoryTypes.Using", "link" : "provingground\/translation\/TheoryTypes$.html#UsingextendsTheoryTypes.ClaimwithProductwithSerializable", "kind" : "case class"}, {"label" : "Claim", "tail" : "", "member" : "provingground.translation.TheoryTypes.Claim", "link" : "provingground\/translation\/TheoryTypes$.html#ClaimextendsTheoryTypes.TheoryTyp", "kind" : "trait"}, {"label" : "TextTyp", "tail" : "", "member" : "provingground.translation.TheoryTypes.TextTyp", "link" : "provingground\/translation\/TheoryTypes$.html#TextTypextendsTheoryTypes.TheoryTypwithProductwithSerializable", "kind" : "case class"}, {"label" : "TheoryTyp", "tail" : "", "member" : "provingground.translation.TheoryTypes.TheoryTyp", "link" : "provingground\/translation\/TheoryTypes$.html#TheoryTypextendsHoTT.SmallTyp", "kind" : "trait"}, {"label" : "ExpressionParser", "tail" : "", "member" : "provingground.translation.TheoryTypes.ExpressionParser", "link" : "provingground\/translation\/TheoryTypes$.html#ExpressionParserextendsJavaTokenParsers", "kind" : "class"}, {"label" : "RealSym", "tail" : "", "member" : "provingground.translation.TheoryTypes.RealSym", "link" : "provingground\/translation\/TheoryTypes$.html#RealSymextendsTheoryTypes.TermwithProductwithSerializable", "kind" : "case class"}, {"label" : "IntSym", "tail" : "", "member" : "provingground.translation.TheoryTypes.IntSym", "link" : "provingground\/translation\/TheoryTypes$.html#IntSymextendsTheoryTypes.TermwithProductwithSerializable", "kind" : "case class"}, {"label" : "Underscore", "tail" : "", "member" : "provingground.translation.TheoryTypes.Underscore", "link" : "provingground\/translation\/TheoryTypes$.html#Underscore", "kind" : "object"}, {"label" : "LambdaTerm", "tail" : "", "member" : "provingground.translation.TheoryTypes.LambdaTerm", "link" : "provingground\/translation\/TheoryTypes$.html#LambdaTermextendsTheoryTypes.TermwithProductwithSerializable", "kind" : "case class"}, {"label" : "TermSym", "tail" : "", "member" : "provingground.translation.TheoryTypes.TermSym", "link" : "provingground\/translation\/TheoryTypes$.html#TermSym[A]extendsTheoryTypes.TermwithProductwithSerializable", "kind" : "case class"}, {"label" : "SupScript", "tail" : "", "member" : "provingground.translation.TheoryTypes.SupScript", "link" : "provingground\/translation\/TheoryTypes$.html#SupScriptextendsTheoryTypes.TermwithProductwithSerializable", "kind" : "case class"}, {"label" : "SubScript", "tail" : "", "member" : "provingground.translation.TheoryTypes.SubScript", "link" : "provingground\/translation\/TheoryTypes$.html#SubScriptextendsTheoryTypes.TermwithProductwithSerializable", "kind" : "case class"}, {"label" : "Braces", "tail" : "", "member" : "provingground.translation.TheoryTypes.Braces", "link" : "provingground\/translation\/TheoryTypes$.html#BracesextendsTheoryTypes.TermwithProductwithSerializable", "kind" : "case class"}, {"label" : "BigOpTerm", "tail" : "", "member" : "provingground.translation.TheoryTypes.BigOpTerm", "link" : "provingground\/translation\/TheoryTypes$.html#BigOpTermextendsTheoryTypes.TermwithProductwithSerializable", "kind" : "case class"}, {"label" : "BinOpTerm", "tail" : "", "member" : "provingground.translation.TheoryTypes.BinOpTerm", "link" : "provingground\/translation\/TheoryTypes$.html#BinOpTermextendsTheoryTypes.TermwithProductwithSerializable", "kind" : "case class"}, {"label" : "Arrow", "tail" : "", "member" : "provingground.translation.TheoryTypes.Arrow", "link" : "provingground\/translation\/TheoryTypes$.html#ArrowextendsTheoryTypes.ExpressionwithProductwithSerializable", "kind" : "case class"}, {"label" : "FuncTypTerm", "tail" : "", "member" : "provingground.translation.TheoryTypes.FuncTypTerm", "link" : "provingground\/translation\/TheoryTypes$.html#FuncTypTermextendsTheoryTypes.TermwithProductwithSerializable", "kind" : "case class"}, {"label" : "MultiApply", "tail" : "", "member" : "provingground.translation.TheoryTypes.MultiApply", "link" : "provingground\/translation\/TheoryTypes$.html#MultiApply[L]extendsTheoryTypes.TermwithProductwithSerializable", "kind" : "case class"}, {"label" : "Apply", "tail" : "", "member" : "provingground.translation.TheoryTypes.Apply", "link" : "provingground\/translation\/TheoryTypes$.html#ApplyextendsTheoryTypes.TermwithProductwithSerializable", "kind" : "case class"}, {"label" : "Equality", "tail" : "", "member" : "provingground.translation.TheoryTypes.Equality", "link" : "provingground\/translation\/TheoryTypes$.html#EqualityextendsTheoryTypes.TermwithProductwithSerializable", "kind" : "case class"}, {"label" : "Prod", "tail" : "", "member" : "provingground.translation.TheoryTypes.Prod", "link" : "provingground\/translation\/TheoryTypes$.html#ProdextendsTheoryTypes.TermwithProductwithSerializable", "kind" : "case class"}, {"label" : "TypedTerm", "tail" : "", "member" : "provingground.translation.TheoryTypes.TypedTerm", "link" : "provingground\/translation\/TheoryTypes$.html#TypedTermextendsTheoryTypes.TermwithProductwithSerializable", "kind" : "case class"}, {"label" : "Colon", "tail" : "", "member" : "provingground.translation.TheoryTypes.Colon", "link" : "provingground\/translation\/TheoryTypes$.html#ColonextendsTheoryTypes.ExpressionwithProductwithSerializable", "kind" : "case class"}, {"label" : "ParaTerm", "tail" : "", "member" : "provingground.translation.TheoryTypes.ParaTerm", "link" : "provingground\/translation\/TheoryTypes$.html#ParaTermextendsTheoryTypes.TermwithProductwithSerializable", "kind" : "case class"}, {"label" : "Conjunct", "tail" : "", "member" : "provingground.translation.TheoryTypes.Conjunct", "link" : "provingground\/translation\/TheoryTypes$.html#ConjunctextendsTheoryTypes.TermwithProductwithSerializable", "kind" : "case class"}, {"label" : "Is", "tail" : "", "member" : "provingground.translation.TheoryTypes.Is", "link" : "provingground\/translation\/TheoryTypes$.html#IsextendsTheoryTypes.TermwithProductwithSerializable", "kind" : "case class"}, {"label" : "Or", "tail" : "", "member" : "provingground.translation.TheoryTypes.Or", "link" : "provingground\/translation\/TheoryTypes$.html#OrextendsTheoryTypes.TermwithProductwithSerializable", "kind" : "case class"}, {"label" : "And", "tail" : "", "member" : "provingground.translation.TheoryTypes.And", "link" : "provingground\/translation\/TheoryTypes$.html#AndextendsTheoryTypes.TermwithProductwithSerializable", "kind" : "case class"}, {"label" : "Term", "tail" : "", "member" : "provingground.translation.TheoryTypes.Term", "link" : "provingground\/translation\/TheoryTypes$.html#TermextendsTheoryTypes.Expression", "kind" : "trait"}, {"label" : "Expression", "tail" : "", "member" : "provingground.translation.TheoryTypes.Expression", "link" : "provingground\/translation\/TheoryTypes$.html#ExpressionextendsAnyRef", "kind" : "trait"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/TheoryTypes$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/TheoryTypes$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/TheoryTypes$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/TheoryTypes$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/TheoryTypes$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/TheoryTypes$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/TheoryTypes$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TheoryTypes$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TheoryTypes$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TheoryTypes$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/TheoryTypes$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/TheoryTypes$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/TheoryTypes$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/TheoryTypes$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/TheoryTypes$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/TheoryTypes$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/TheoryTypes$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/TheoryTypes$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/TheoryTypes$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.translation.Translator", "members_trait" : [{"label" : "map", "tail" : "(fn: (O) ⇒ X, ufn: (X) ⇒ O): Mapped[I, O, X]", "member" : "provingground.translation.Translator.map", "link" : "provingground\/translation\/Translator.html#map[X](fn:O=>X,ufn:X=>O):provingground.translation.Translator.Mapped[I,O,X]", "kind" : "def"}, {"label" : "||:", "tail" : "(that: Translator[I, O]): OrElse[I, O]", "member" : "provingground.translation.Translator.||:", "link" : "provingground\/translation\/Translator.html#||:(that:provingground.translation.Translator[I,O]):provingground.translation.Translator.OrElse[I,O]", "kind" : "def"}, {"label" : "||", "tail" : "(that: Translator[I, O]): OrElse[I, O]", "member" : "provingground.translation.Translator.||", "link" : "provingground\/translation\/Translator.html#||(that:provingground.translation.Translator[I,O]):provingground.translation.Translator.OrElse[I,O]", "kind" : "def"}, {"label" : "elseOr", "tail" : "(that: Translator[I, O]): OrElse[I, O]", "member" : "provingground.translation.Translator.elseOr", "link" : "provingground\/translation\/Translator.html#elseOr(that:provingground.translation.Translator[I,O]):provingground.translation.Translator.OrElse[I,O]", "kind" : "def"}, {"label" : "orElse", "tail" : "(that: Translator[I, O]): OrElse[I, O]", "member" : "provingground.translation.Translator.orElse", "link" : "provingground\/translation\/Translator.html#orElse(that:provingground.translation.Translator[I,O]):provingground.translation.Translator.OrElse[I,O]", "kind" : "def"}, {"label" : "apply", "tail" : "(inp: I): Option[O]", "member" : "provingground.translation.Translator.apply", "link" : "provingground\/translation\/Translator.html#apply(inp:I):Option[O]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Function1.toString", "link" : "provingground\/translation\/Translator.html#toString():String", "kind" : "def"}, {"label" : "andThen", "tail" : "(g: (Option[O]) ⇒ A): (I) ⇒ A", "member" : "scala.Function1.andThen", "link" : "provingground\/translation\/Translator.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) ⇒ I): (A) ⇒ Option[O]", "member" : "scala.Function1.compose", "link" : "provingground\/translation\/Translator.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/Translator.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/Translator.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/Translator.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/Translator.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/Translator.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/Translator.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/Translator.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Translator.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Translator.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Translator.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/Translator.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/Translator.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/Translator.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/Translator.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/Translator.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/Translator.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/Translator.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/Translator.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "recTranslate", "tail" : "(leafMap: ⇒ (I) ⇒ Option[O]): (I) ⇒ Option[O]", "member" : "provingground.translation.Translator.recTranslate", "link" : "provingground\/translation\/Translator.html#recTranslate(leafMap:=>I=>Option[O]):I=>Option[O]", "kind" : "abstract def"}], "shortDescription" : "Translator from an input I to an output O, designed to be built recursively.", "object" : "provingground\/translation\/Translator$.html", "members_object" : [{"label" : "VarWord", "tail" : "", "member" : "provingground.translation.Translator.VarWord", "link" : "provingground\/translation\/Translator$.html#VarWord[X[_],S]extendsProductwithSerializable", "kind" : "case class"}, {"label" : "Pattern", "tail" : "", "member" : "provingground.translation.Translator.Pattern", "link" : "provingground\/translation\/Translator$.html#Pattern", "kind" : "object"}, {"label" : "Pattern", "tail" : "", "member" : "provingground.translation.Translator.Pattern", "link" : "provingground\/translation\/Translator$.html#Pattern[I,X[_]]extendsAnyRef", "kind" : "class"}, {"label" : "Builder", "tail" : "", "member" : "provingground.translation.Translator.Builder", "link" : "provingground\/translation\/Translator$.html#Builder[O,X[_]]extendsProductwithSerializable", "kind" : "case class"}, {"label" : "Mapped", "tail" : "", "member" : "provingground.translation.Translator.Mapped", "link" : "provingground\/translation\/Translator$.html#Mapped[I,O,X]extendsTranslator[I,X]withProductwithSerializable", "kind" : "case class"}, {"label" : "PolyJunction", "tail" : "", "member" : "provingground.translation.Translator.PolyJunction", "link" : "provingground\/translation\/Translator$.html#PolyJunction[I,O,X[_]]extendsTranslator[I,O]withProductwithSerializable", "kind" : "case class"}, {"label" : "MixedJunction", "tail" : "", "member" : "provingground.translation.Translator.MixedJunction", "link" : "provingground\/translation\/Translator$.html#MixedJunction[I,O,X[_]]extendsTranslator[I,O]withProductwithSerializable", "kind" : "case class"}, {"label" : "Junction", "tail" : "", "member" : "provingground.translation.Translator.Junction", "link" : "provingground\/translation\/Translator$.html#Junction[I,O,X[_]]extendsTranslator[I,O]withProductwithSerializable", "kind" : "case class"}, {"label" : "OrElse", "tail" : "", "member" : "provingground.translation.Translator.OrElse", "link" : "provingground\/translation\/Translator$.html#OrElse[I,O]extendsTranslator[I,O]withProductwithSerializable", "kind" : "case class"}, {"label" : "Empty", "tail" : "", "member" : "provingground.translation.Translator.Empty", "link" : "provingground\/translation\/Translator$.html#Empty[I,O]extendsTranslator[I,O]withProductwithSerializable", "kind" : "case class"}, {"label" : "connect", "tail" : "(pattern: (I) ⇒ Option[S], literal: (S) ⇒ Option[O]): Simple[I, O]", "member" : "provingground.translation.Translator.connect", "link" : "provingground\/translation\/Translator$.html#connect[I,O,S](pattern:I=>Option[S],literal:S=>Option[O]):provingground.translation.Translator.Simple[I,O]", "kind" : "def"}, {"label" : "Simple", "tail" : "", "member" : "provingground.translation.Translator.Simple", "link" : "provingground\/translation\/Translator$.html#Simple[I,O]extendsTranslator[I,O]withProductwithSerializable", "kind" : "case class"}, {"label" : "unmatched", "tail" : "(args: A*): Nothing", "member" : "provingground.translation.Translator.unmatched", "link" : "provingground\/translation\/Translator$.html#unmatched[A](args:A*):Nothing", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/Translator$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/Translator$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/Translator$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/Translator$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/Translator$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/Translator$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/Translator$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Translator$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Translator$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Translator$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/Translator$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/Translator$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/Translator$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/Translator$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/Translator$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/Translator$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/Translator$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/Translator$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/Translator$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/translation\/Translator.html", "kind" : "trait"}, {"name" : "provingground.translation.TreeModel", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/TreeModel.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/TreeModel.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/TreeModel.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/TreeModel.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/TreeModel.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/TreeModel.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/TreeModel.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TreeModel.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TreeModel.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TreeModel.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/TreeModel.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/TreeModel.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/TreeModel.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/TreeModel.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/TreeModel.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/TreeModel.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/TreeModel.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/TreeModel.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/TreeModel.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "simpleTree", "tail" : "(): Tree", "member" : "provingground.translation.TreeModel.simpleTree", "link" : "provingground\/translation\/TreeModel.html#simpleTree:edu.stanford.nlp.trees.Tree", "kind" : "abstract def"}], "shortDescription" : "", "object" : "provingground\/translation\/TreeModel$.html", "members_object" : [{"label" : "Node", "tail" : "", "member" : "provingground.translation.TreeModel.Node", "link" : "provingground\/translation\/TreeModel$.html#Node", "kind" : "object"}, {"label" : "Node", "tail" : "", "member" : "provingground.translation.TreeModel.Node", "link" : "provingground\/translation\/TreeModel$.html#NodeextendsTreeModelwithProductwithSerializable", "kind" : "case class"}, {"label" : "Leaf", "tail" : "", "member" : "provingground.translation.TreeModel.Leaf", "link" : "provingground\/translation\/TreeModel$.html#Leaf", "kind" : "object"}, {"label" : "Leaf", "tail" : "", "member" : "provingground.translation.TreeModel.Leaf", "link" : "provingground\/translation\/TreeModel$.html#LeafextendsTreeModelwithProductwithSerializable", "kind" : "case class"}, {"label" : "factory", "tail" : ": SimpleTreeFactory", "member" : "provingground.translation.TreeModel.factory", "link" : "provingground\/translation\/TreeModel$.html#factory:edu.stanford.nlp.trees.SimpleTreeFactory", "kind" : "val"}, {"label" : "rw", "tail" : "(): upickle.default.ReadWriter[TreeModel]", "member" : "provingground.translation.TreeModel.rw", "link" : "provingground\/translation\/TreeModel$.html#rw:upickle.default.ReadWriter[provingground.translation.TreeModel]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/TreeModel$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/TreeModel$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/TreeModel$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/TreeModel$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/TreeModel$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/TreeModel$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/TreeModel$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TreeModel$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TreeModel$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TreeModel$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/TreeModel$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/TreeModel$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/TreeModel$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/TreeModel$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/TreeModel$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/TreeModel$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/TreeModel$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/TreeModel$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/TreeModel$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "provingground\/translation\/TreeModel.html", "kind" : "trait"}, {"name" : "provingground.translation.TreePatterns", "shortDescription" : "", "object" : "provingground\/translation\/TreePatterns$.html", "members_object" : [{"label" : "phrasesTrans", "tail" : "(ss: String*): Translator[Tree, MathExpr] with Product with Serializable", "member" : "provingground.translation.TreePatterns.phrasesTrans", "link" : "provingground\/translation\/TreePatterns$.html#phrasesTrans(ss:String*):provingground.translation.Translator[edu.stanford.nlp.trees.Tree,provingground.translation.MathExpr]withProductwithSerializable", "kind" : "def"}, {"label" : "phraseTrans", "tail" : "(s: String): Junction[Tree, MathExpr, Vector]", "member" : "provingground.translation.TreePatterns.phraseTrans", "link" : "provingground\/translation\/TreePatterns$.html#phraseTrans(s:String):provingground.translation.Translator.Junction[edu.stanford.nlp.trees.Tree,provingground.translation.MathExpr,Vector]", "kind" : "def"}, {"label" : "phrase", "tail" : "(s: String): Pattern[Tree, Vector]", "member" : "provingground.translation.TreePatterns.phrase", "link" : "provingground\/translation\/TreePatterns$.html#phrase(s:String):provingground.translation.Translator.Pattern[edu.stanford.nlp.trees.Tree,Vector]", "kind" : "def"}, {"label" : "phraseFromVec", "tail" : "(s: Vector[String]): Pattern[Tree, Vector]", "member" : "provingground.translation.TreePatterns.phraseFromVec", "link" : "provingground\/translation\/TreePatterns$.html#phraseFromVec(s:Vector[String]):provingground.translation.Translator.Pattern[edu.stanford.nlp.trees.Tree,Vector]", "kind" : "def"}, {"label" : "DropNP", "tail" : "", "member" : "provingground.translation.TreePatterns.DropNP", "link" : "provingground\/translation\/TreePatterns$.html#DropNP", "kind" : "object"}, {"label" : "DropRoot", "tail" : "", "member" : "provingground.translation.TreePatterns.DropRoot", "link" : "provingground\/translation\/TreePatterns$.html#DropRoot", "kind" : "object"}, {"label" : "Exists", "tail" : "", "member" : "provingground.translation.TreePatterns.Exists", "link" : "provingground\/translation\/TreePatterns$.html#Exists", "kind" : "object"}, {"label" : "They", "tail" : "", "member" : "provingground.translation.TreePatterns.They", "link" : "provingground\/translation\/TreePatterns$.html#They", "kind" : "object"}, {"label" : "It", "tail" : "", "member" : "provingground.translation.TreePatterns.It", "link" : "provingground\/translation\/TreePatterns$.html#It", "kind" : "object"}, {"label" : "IN", "tail" : "", "member" : "provingground.translation.TreePatterns.IN", "link" : "provingground\/translation\/TreePatterns$.html#IN", "kind" : "object"}, {"label" : "JJ", "tail" : "", "member" : "provingground.translation.TreePatterns.JJ", "link" : "provingground\/translation\/TreePatterns$.html#JJ", "kind" : "object"}, {"label" : "VB", "tail" : "", "member" : "provingground.translation.TreePatterns.VB", "link" : "provingground\/translation\/TreePatterns$.html#VB", "kind" : "object"}, {"label" : "ConjunctNP", "tail" : "", "member" : "provingground.translation.TreePatterns.ConjunctNP", "link" : "provingground\/translation\/TreePatterns$.html#ConjunctNP", "kind" : "object"}, {"label" : "DisjunctNP", "tail" : "", "member" : "provingground.translation.TreePatterns.DisjunctNP", "link" : "provingground\/translation\/TreePatterns$.html#DisjunctNP", "kind" : "object"}, {"label" : "NNP", "tail" : "", "member" : "provingground.translation.TreePatterns.NNP", "link" : "provingground\/translation\/TreePatterns$.html#NNP", "kind" : "object"}, {"label" : "NN", "tail" : "", "member" : "provingground.translation.TreePatterns.NN", "link" : "provingground\/translation\/TreePatterns$.html#NN", "kind" : "object"}, {"label" : "NotVP", "tail" : "", "member" : "provingground.translation.TreePatterns.NotVP", "link" : "provingground\/translation\/TreePatterns$.html#NotVP", "kind" : "object"}, {"label" : "isModalDo", "tail" : ": (Tree) ⇒ Boolean", "member" : "provingground.translation.TreePatterns.isModalDo", "link" : "provingground\/translation\/TreePatterns$.html#isModalDo:edu.stanford.nlp.trees.Tree=>Boolean", "kind" : "val"}, {"label" : "DPBaseQuantZero", "tail" : "", "member" : "provingground.translation.TreePatterns.DPBaseQuantZero", "link" : "provingground\/translation\/TreePatterns$.html#DPBaseQuantZero", "kind" : "object"}, {"label" : "DPBaseQuant", "tail" : "", "member" : "provingground.translation.TreePatterns.DPBaseQuant", "link" : "provingground\/translation\/TreePatterns$.html#DPBaseQuant", "kind" : "object"}, {"label" : "DPQuant", "tail" : "", "member" : "provingground.translation.TreePatterns.DPQuant", "link" : "provingground\/translation\/TreePatterns$.html#DPQuant", "kind" : "object"}, {"label" : "DPBaseZero", "tail" : "", "member" : "provingground.translation.TreePatterns.DPBaseZero", "link" : "provingground\/translation\/TreePatterns$.html#DPBaseZero", "kind" : "object"}, {"label" : "DPBase", "tail" : "", "member" : "provingground.translation.TreePatterns.DPBase", "link" : "provingground\/translation\/TreePatterns$.html#DPBase", "kind" : "object"}, {"label" : "Det", "tail" : "", "member" : "provingground.translation.TreePatterns.Det", "link" : "provingground\/translation\/TreePatterns$.html#Det", "kind" : "object"}, {"label" : "npvpPattern", "tail" : ": Pattern[Tree, II]", "member" : "provingground.translation.TreePatterns.npvpPattern", "link" : "provingground\/translation\/TreePatterns$.html#npvpPattern:provingground.translation.Translator.Pattern[edu.stanford.nlp.trees.Tree,provingground.translation.Functors.II]", "kind" : "val"}, {"label" : "Purge", "tail" : "", "member" : "provingground.translation.TreePatterns.Purge", "link" : "provingground\/translation\/TreePatterns$.html#Purge", "kind" : "object"}, {"label" : "SimpleNPVP", "tail" : "", "member" : "provingground.translation.TreePatterns.SimpleNPVP", "link" : "provingground\/translation\/TreePatterns$.html#SimpleNPVP", "kind" : "object"}, {"label" : "NPPPWH", "tail" : "", "member" : "provingground.translation.TreePatterns.NPPPWH", "link" : "provingground\/translation\/TreePatterns$.html#NPPPWH", "kind" : "object"}, {"label" : "NPWH", "tail" : "", "member" : "provingground.translation.TreePatterns.NPWH", "link" : "provingground\/translation\/TreePatterns$.html#NPWH", "kind" : "object"}, {"label" : "NPPP", "tail" : "", "member" : "provingground.translation.TreePatterns.NPPP", "link" : "provingground\/translation\/TreePatterns$.html#NPPP", "kind" : "object"}, {"label" : "PP", "tail" : "", "member" : "provingground.translation.TreePatterns.PP", "link" : "provingground\/translation\/TreePatterns$.html#PP", "kind" : "object"}, {"label" : "VerbPP", "tail" : "", "member" : "provingground.translation.TreePatterns.VerbPP", "link" : "provingground\/translation\/TreePatterns$.html#VerbPP", "kind" : "object"}, {"label" : "JJPP", "tail" : "", "member" : "provingground.translation.TreePatterns.JJPP", "link" : "provingground\/translation\/TreePatterns$.html#JJPP", "kind" : "object"}, {"label" : "VerbNotAdj", "tail" : "", "member" : "provingground.translation.TreePatterns.VerbNotAdj", "link" : "provingground\/translation\/TreePatterns$.html#VerbNotAdj", "kind" : "object"}, {"label" : "VerbAdj", "tail" : "", "member" : "provingground.translation.TreePatterns.VerbAdj", "link" : "provingground\/translation\/TreePatterns$.html#VerbAdj", "kind" : "object"}, {"label" : "VerbNotObj", "tail" : "", "member" : "provingground.translation.TreePatterns.VerbNotObj", "link" : "provingground\/translation\/TreePatterns$.html#VerbNotObj", "kind" : "object"}, {"label" : "VerbObj", "tail" : "", "member" : "provingground.translation.TreePatterns.VerbObj", "link" : "provingground\/translation\/TreePatterns$.html#VerbObj", "kind" : "object"}, {"label" : "NPVP", "tail" : "", "member" : "provingground.translation.TreePatterns.NPVP", "link" : "provingground\/translation\/TreePatterns$.html#NPVP", "kind" : "object"}, {"label" : "NP", "tail" : "", "member" : "provingground.translation.TreePatterns.NP", "link" : "provingground\/translation\/TreePatterns$.html#NP", "kind" : "object"}, {"label" : "VPIf", "tail" : "", "member" : "provingground.translation.TreePatterns.VPIf", "link" : "provingground\/translation\/TreePatterns$.html#VPIf", "kind" : "object"}, {"label" : "VP", "tail" : "", "member" : "provingground.translation.TreePatterns.VP", "link" : "provingground\/translation\/TreePatterns$.html#VP", "kind" : "object"}, {"label" : "Test", "tail" : "", "member" : "provingground.translation.TreePatterns.Test", "link" : "provingground\/translation\/TreePatterns$.html#Test", "kind" : "object"}, {"label" : "ifPattern", "tail" : ": Pattern[Tree, IV]", "member" : "provingground.translation.TreePatterns.ifPattern", "link" : "provingground\/translation\/TreePatterns$.html#ifPattern:provingground.translation.Translator.Pattern[edu.stanford.nlp.trees.Tree,provingground.translation.Functors.IV]", "kind" : "val"}, {"label" : "IfTreeSent", "tail" : "", "member" : "provingground.translation.TreePatterns.IfTreeSent", "link" : "provingground\/translation\/TreePatterns$.html#IfTreeSent", "kind" : "object"}, {"label" : "IfTree", "tail" : "", "member" : "provingground.translation.TreePatterns.IfTree", "link" : "provingground\/translation\/TreePatterns$.html#IfTree", "kind" : "object"}, {"label" : "ThenSent", "tail" : "", "member" : "provingground.translation.TreePatterns.ThenSent", "link" : "provingground\/translation\/TreePatterns$.html#ThenSent", "kind" : "object"}, {"label" : "Then", "tail" : "", "member" : "provingground.translation.TreePatterns.Then", "link" : "provingground\/translation\/TreePatterns$.html#Then", "kind" : "object"}, {"label" : "IfClause", "tail" : "", "member" : "provingground.translation.TreePatterns.IfClause", "link" : "provingground\/translation\/TreePatterns$.html#IfClause", "kind" : "object"}, {"label" : "word", "tail" : "", "member" : "provingground.translation.TreePatterns.word", "link" : "provingground\/translation\/TreePatterns$.html#word", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/TreePatterns$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/TreePatterns$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/TreePatterns$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/TreePatterns$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/TreePatterns$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/TreePatterns$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/TreePatterns$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TreePatterns$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TreePatterns$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TreePatterns$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/TreePatterns$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/TreePatterns$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/TreePatterns$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/TreePatterns$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/TreePatterns$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/TreePatterns$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/TreePatterns$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/TreePatterns$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/TreePatterns$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.translation.TreeToMath", "shortDescription" : "", "object" : "provingground\/translation\/TreeToMath$.html", "members_object" : [{"label" : "mathExprFormal", "tail" : "(ss: String*): OrElse[Tree, MathExpr]", "member" : "provingground.translation.TreeToMath.mathExprFormal", "link" : "provingground\/translation\/TreeToMath$.html#mathExprFormal(ss:String*):provingground.translation.Translator.OrElse[edu.stanford.nlp.trees.Tree,provingground.translation.MathExpr]", "kind" : "def"}, {"label" : "mathExprTree", "tail" : ": OrElse[Tree, MathExpr]", "member" : "provingground.translation.TreeToMath.mathExprTree", "link" : "provingground\/translation\/TreeToMath$.html#mathExprTree:provingground.translation.Translator.OrElse[edu.stanford.nlp.trees.Tree,provingground.translation.MathExpr]", "kind" : "val"}, {"label" : "mathExpr", "tail" : ": OrElse[Tree, MathExpr]", "member" : "provingground.translation.TreeToMath.mathExpr", "link" : "provingground\/translation\/TreeToMath$.html#mathExpr:provingground.translation.Translator.OrElse[edu.stanford.nlp.trees.Tree,provingground.translation.MathExpr]", "kind" : "val"}, {"label" : "dropThen", "tail" : ": Junction[Tree, MathExpr, Vector]", "member" : "provingground.translation.TreeToMath.dropThen", "link" : "provingground\/translation\/TreeToMath$.html#dropThen:provingground.translation.Translator.Junction[edu.stanford.nlp.trees.Tree,provingground.translation.MathExpr,Vector]", "kind" : "val"}, {"label" : "iff", "tail" : ": Junction[Tree, MathExpr, Vector]", "member" : "provingground.translation.TreeToMath.iff", "link" : "provingground\/translation\/TreeToMath$.html#iff:provingground.translation.Translator.Junction[edu.stanford.nlp.trees.Tree,provingground.translation.MathExpr,Vector]", "kind" : "val"}, {"label" : "notvp", "tail" : ": Junction[Tree, MathExpr, Id]", "member" : "provingground.translation.TreeToMath.notvp", "link" : "provingground\/translation\/TreeToMath$.html#notvp:provingground.translation.Translator.Junction[edu.stanford.nlp.trees.Tree,provingground.translation.MathExpr,cats.Id]", "kind" : "val"}, {"label" : "ifThen", "tail" : ": Junction[Tree, MathExpr, II]", "member" : "provingground.translation.TreeToMath.ifThen", "link" : "provingground\/translation\/TreeToMath$.html#ifThen:provingground.translation.Translator.Junction[edu.stanford.nlp.trees.Tree,provingground.translation.MathExpr,provingground.translation.Functors.II]", "kind" : "val"}, {"label" : "purge", "tail" : ": Junction[Tree, MathExpr, Id]", "member" : "provingground.translation.TreeToMath.purge", "link" : "provingground\/translation\/TreeToMath$.html#purge:provingground.translation.Translator.Junction[edu.stanford.nlp.trees.Tree,provingground.translation.MathExpr,cats.Id]", "kind" : "val"}, {"label" : "dropNP", "tail" : ": Junction[Tree, MathExpr, Vector]", "member" : "provingground.translation.TreeToMath.dropNP", "link" : "provingground\/translation\/TreeToMath$.html#dropNP:provingground.translation.Translator.Junction[edu.stanford.nlp.trees.Tree,provingground.translation.MathExpr,Vector]", "kind" : "val"}, {"label" : "dropRoot", "tail" : ": Junction[Tree, MathExpr, Id]", "member" : "provingground.translation.TreeToMath.dropRoot", "link" : "provingground\/translation\/TreeToMath$.html#dropRoot:provingground.translation.Translator.Junction[edu.stanford.nlp.trees.Tree,provingground.translation.MathExpr,cats.Id]", "kind" : "val"}, {"label" : "and", "tail" : ": Junction[Tree, MathExpr, Vector]", "member" : "provingground.translation.TreeToMath.and", "link" : "provingground\/translation\/TreeToMath$.html#and:provingground.translation.Translator.Junction[edu.stanford.nlp.trees.Tree,provingground.translation.MathExpr,Vector]", "kind" : "val"}, {"label" : "or", "tail" : ": Junction[Tree, MathExpr, Vector]", "member" : "provingground.translation.TreeToMath.or", "link" : "provingground\/translation\/TreeToMath$.html#or:provingground.translation.Translator.Junction[edu.stanford.nlp.trees.Tree,provingground.translation.MathExpr,Vector]", "kind" : "val"}, {"label" : "exists", "tail" : ": Junction[Tree, MathExpr, Un]", "member" : "provingground.translation.TreeToMath.exists", "link" : "provingground\/translation\/TreeToMath$.html#exists:provingground.translation.Translator.Junction[edu.stanford.nlp.trees.Tree,provingground.translation.MathExpr,provingground.translation.Functors.Un]", "kind" : "val"}, {"label" : "verbpp", "tail" : ": Junction[Tree, MathExpr, IV]", "member" : "provingground.translation.TreeToMath.verbpp", "link" : "provingground\/translation\/TreeToMath$.html#verbpp:provingground.translation.Translator.Junction[edu.stanford.nlp.trees.Tree,provingground.translation.MathExpr,provingground.translation.Functors.IV]", "kind" : "val"}, {"label" : "jjpp", "tail" : ": Junction[Tree, MathExpr, IV]", "member" : "provingground.translation.TreeToMath.jjpp", "link" : "provingground\/translation\/TreeToMath$.html#jjpp:provingground.translation.Translator.Junction[edu.stanford.nlp.trees.Tree,provingground.translation.MathExpr,provingground.translation.Functors.IV]", "kind" : "val"}, {"label" : "addPPST", "tail" : ": Junction[Tree, MathExpr, III]", "member" : "provingground.translation.TreeToMath.addPPST", "link" : "provingground\/translation\/TreeToMath$.html#addPPST:provingground.translation.Translator.Junction[edu.stanford.nlp.trees.Tree,provingground.translation.MathExpr,provingground.translation.Functors.III]", "kind" : "val"}, {"label" : "addST", "tail" : ": Junction[Tree, MathExpr, II]", "member" : "provingground.translation.TreeToMath.addST", "link" : "provingground\/translation\/TreeToMath$.html#addST:provingground.translation.Translator.Junction[edu.stanford.nlp.trees.Tree,provingground.translation.MathExpr,provingground.translation.Functors.II]", "kind" : "val"}, {"label" : "addPP", "tail" : ": Junction[Tree, MathExpr, II]", "member" : "provingground.translation.TreeToMath.addPP", "link" : "provingground\/translation\/TreeToMath$.html#addPP:provingground.translation.Translator.Junction[edu.stanford.nlp.trees.Tree,provingground.translation.MathExpr,provingground.translation.Functors.II]", "kind" : "val"}, {"label" : "dpBaseQuantZero", "tail" : ": Junction[Tree, MathExpr, VII]", "member" : "provingground.translation.TreeToMath.dpBaseQuantZero", "link" : "provingground\/translation\/TreeToMath$.html#dpBaseQuantZero:provingground.translation.Translator.Junction[edu.stanford.nlp.trees.Tree,provingground.translation.MathExpr,provingground.translation.Functors.VII]", "kind" : "val"}, {"label" : "dpBaseQuant", "tail" : ": Junction[Tree, MathExpr, SVII]", "member" : "provingground.translation.TreeToMath.dpBaseQuant", "link" : "provingground\/translation\/TreeToMath$.html#dpBaseQuant:provingground.translation.Translator.Junction[edu.stanford.nlp.trees.Tree,provingground.translation.MathExpr,provingground.translation.Functors.SVII]", "kind" : "val"}, {"label" : "dpQuant", "tail" : ": Junction[Tree, MathExpr, SVI]", "member" : "provingground.translation.TreeToMath.dpQuant", "link" : "provingground\/translation\/TreeToMath$.html#dpQuant:provingground.translation.Translator.Junction[edu.stanford.nlp.trees.Tree,provingground.translation.MathExpr,provingground.translation.Functors.SVI]", "kind" : "val"}, {"label" : "dpBaseZero", "tail" : ": Junction[Tree, MathExpr, VO]", "member" : "provingground.translation.TreeToMath.dpBaseZero", "link" : "provingground\/translation\/TreeToMath$.html#dpBaseZero:provingground.translation.Translator.Junction[edu.stanford.nlp.trees.Tree,provingground.translation.MathExpr,provingground.translation.Functors.VO]", "kind" : "val"}, {"label" : "dpBase", "tail" : ": Junction[Tree, MathExpr, SVO]", "member" : "provingground.translation.TreeToMath.dpBase", "link" : "provingground\/translation\/TreeToMath$.html#dpBase:provingground.translation.Translator.Junction[edu.stanford.nlp.trees.Tree,provingground.translation.MathExpr,provingground.translation.Functors.SVO]", "kind" : "val"}, {"label" : "they", "tail" : ": Junction[Tree, MathExpr, Un]", "member" : "provingground.translation.TreeToMath.they", "link" : "provingground\/translation\/TreeToMath$.html#they:provingground.translation.Translator.Junction[edu.stanford.nlp.trees.Tree,provingground.translation.MathExpr,provingground.translation.Functors.Un]", "kind" : "val"}, {"label" : "it", "tail" : ": Junction[Tree, MathExpr, Un]", "member" : "provingground.translation.TreeToMath.it", "link" : "provingground\/translation\/TreeToMath$.html#it:provingground.translation.Translator.Junction[edu.stanford.nlp.trees.Tree,provingground.translation.MathExpr,provingground.translation.Functors.Un]", "kind" : "val"}, {"label" : "prep", "tail" : ": Junction[Tree, MathExpr, S]", "member" : "provingground.translation.TreeToMath.prep", "link" : "provingground\/translation\/TreeToMath$.html#prep:provingground.translation.Translator.Junction[edu.stanford.nlp.trees.Tree,provingground.translation.MathExpr,provingground.translation.Functors.S]", "kind" : "val"}, {"label" : "jj", "tail" : ": Junction[Tree, MathExpr, S]", "member" : "provingground.translation.TreeToMath.jj", "link" : "provingground\/translation\/TreeToMath$.html#jj:provingground.translation.Translator.Junction[edu.stanford.nlp.trees.Tree,provingground.translation.MathExpr,provingground.translation.Functors.S]", "kind" : "val"}, {"label" : "vb", "tail" : ": Junction[Tree, MathExpr, S]", "member" : "provingground.translation.TreeToMath.vb", "link" : "provingground\/translation\/TreeToMath$.html#vb:provingground.translation.Translator.Junction[edu.stanford.nlp.trees.Tree,provingground.translation.MathExpr,provingground.translation.Functors.S]", "kind" : "val"}, {"label" : "fmla", "tail" : ": Junction[Tree, MathExpr, S]", "member" : "provingground.translation.TreeToMath.fmla", "link" : "provingground\/translation\/TreeToMath$.html#fmla:provingground.translation.Translator.Junction[edu.stanford.nlp.trees.Tree,provingground.translation.MathExpr,provingground.translation.Functors.S]", "kind" : "val"}, {"label" : "nn", "tail" : ": Junction[Tree, MathExpr, S]", "member" : "provingground.translation.TreeToMath.nn", "link" : "provingground\/translation\/TreeToMath$.html#nn:provingground.translation.Translator.Junction[edu.stanford.nlp.trees.Tree,provingground.translation.MathExpr,provingground.translation.Functors.S]", "kind" : "val"}, {"label" : "pp", "tail" : ": Junction[Tree, MathExpr, II]", "member" : "provingground.translation.TreeToMath.pp", "link" : "provingground\/translation\/TreeToMath$.html#pp:provingground.translation.Translator.Junction[edu.stanford.nlp.trees.Tree,provingground.translation.MathExpr,provingground.translation.Functors.II]", "kind" : "val"}, {"label" : "verbIf", "tail" : ": Junction[Tree, MathExpr, II]", "member" : "provingground.translation.TreeToMath.verbIf", "link" : "provingground\/translation\/TreeToMath$.html#verbIf:provingground.translation.Translator.Junction[edu.stanford.nlp.trees.Tree,provingground.translation.MathExpr,provingground.translation.Functors.II]", "kind" : "val"}, {"label" : "verbNotAdj", "tail" : ": Junction[Tree, MathExpr, II]", "member" : "provingground.translation.TreeToMath.verbNotAdj", "link" : "provingground\/translation\/TreeToMath$.html#verbNotAdj:provingground.translation.Translator.Junction[edu.stanford.nlp.trees.Tree,provingground.translation.MathExpr,provingground.translation.Functors.II]", "kind" : "val"}, {"label" : "verbNotObj", "tail" : ": Junction[Tree, MathExpr, II]", "member" : "provingground.translation.TreeToMath.verbNotObj", "link" : "provingground\/translation\/TreeToMath$.html#verbNotObj:provingground.translation.Translator.Junction[edu.stanford.nlp.trees.Tree,provingground.translation.MathExpr,provingground.translation.Functors.II]", "kind" : "val"}, {"label" : "verbAdj", "tail" : ": Junction[Tree, MathExpr, II]", "member" : "provingground.translation.TreeToMath.verbAdj", "link" : "provingground\/translation\/TreeToMath$.html#verbAdj:provingground.translation.Translator.Junction[edu.stanford.nlp.trees.Tree,provingground.translation.MathExpr,provingground.translation.Functors.II]", "kind" : "val"}, {"label" : "verbObj", "tail" : ": Junction[Tree, MathExpr, II]", "member" : "provingground.translation.TreeToMath.verbObj", "link" : "provingground\/translation\/TreeToMath$.html#verbObj:provingground.translation.Translator.Junction[edu.stanford.nlp.trees.Tree,provingground.translation.MathExpr,provingground.translation.Functors.II]", "kind" : "val"}, {"label" : "npvp", "tail" : ": Junction[Tree, MathExpr, II]", "member" : "provingground.translation.TreeToMath.npvp", "link" : "provingground\/translation\/TreeToMath$.html#npvp:provingground.translation.Translator.Junction[edu.stanford.nlp.trees.Tree,provingground.translation.MathExpr,provingground.translation.Functors.II]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/TreeToMath$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/TreeToMath$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/TreeToMath$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/TreeToMath$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/TreeToMath$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/TreeToMath$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/TreeToMath$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TreeToMath$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TreeToMath$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/TreeToMath$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/TreeToMath$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/TreeToMath$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/TreeToMath$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/TreeToMath$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/TreeToMath$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/TreeToMath$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/TreeToMath$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/TreeToMath$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/TreeToMath$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.translation.Vocabulary", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/Vocabulary.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/Vocabulary.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/Vocabulary.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/Vocabulary.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/Vocabulary.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/Vocabulary.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/Vocabulary.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Vocabulary.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Vocabulary.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/Vocabulary.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/Vocabulary.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/Vocabulary.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/Vocabulary.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/Vocabulary.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/Vocabulary.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/Vocabulary.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/Vocabulary.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/Vocabulary.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/Vocabulary.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "vocab", "tail" : "(name: String, context: C): Option[E]", "member" : "provingground.translation.Vocabulary.vocab", "link" : "provingground\/translation\/Vocabulary.html#vocab(name:String,context:C):Option[E]", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "provingground\/translation\/Vocabulary.html", "kind" : "trait"}, {"name" : "provingground.translation.XmlParse", "shortDescription" : "", "object" : "provingground\/translation\/XmlParse$.html", "members_object" : [{"label" : "proseTree", "tail" : "(filename: String): ProseTree", "member" : "provingground.translation.XmlParse.proseTree", "link" : "provingground\/translation\/XmlParse$.html#proseTree(filename:String):provingground.translation.NlpProse.ProseTree", "kind" : "def"}, {"label" : "depTree", "tail" : "(parse: NodeSeq): List[DepRel]", "member" : "provingground.translation.XmlParse.depTree", "link" : "provingground\/translation\/XmlParse$.html#depTree(parse:scala.xml.NodeSeq):List[provingground.translation.NlpProse.DepRel]", "kind" : "def"}, {"label" : "xmltoDepRel", "tail" : "(node: Node): DepRel", "member" : "provingground.translation.XmlParse.xmltoDepRel", "link" : "provingground\/translation\/XmlParse$.html#xmltoDepRel(node:scala.xml.Node):provingground.translation.NlpProse.DepRel", "kind" : "def"}, {"label" : "xmltoToken", "tail" : "(node: Node): Token", "member" : "provingground.translation.XmlParse.xmltoToken", "link" : "provingground\/translation\/XmlParse$.html#xmltoToken(node:scala.xml.Node):provingground.translation.NlpProse.Token", "kind" : "def"}, {"label" : "xmlSrc", "tail" : "(filename: String): Elem", "member" : "provingground.translation.XmlParse.xmlSrc", "link" : "provingground\/translation\/XmlParse$.html#xmlSrc(filename:String):scala.xml.Elem", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/translation\/XmlParse$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/translation\/XmlParse$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/translation\/XmlParse$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/translation\/XmlParse$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/translation\/XmlParse$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/translation\/XmlParse$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/translation\/XmlParse$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/XmlParse$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/XmlParse$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/translation\/XmlParse$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/translation\/XmlParse$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/translation\/XmlParse$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/translation\/XmlParse$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/translation\/XmlParse$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/translation\/XmlParse$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/translation\/XmlParse$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/translation\/XmlParse$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/translation\/XmlParse$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/translation\/XmlParse$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "reactivemongo" : [], "provingground.library" : [{"name" : "provingground.library.absurd", "shortDescription" : "", "object" : "provingground\/library\/absurd$.html", "members_object" : [{"label" : "value", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Typ[Term] with Subs[Typ[Term]], Func[Term with Subs[Term], Func[Func[Term, Term] with Subs[Func[Term, Term]], Term]]]]", "member" : "provingground.library.absurd.value", "link" : "provingground\/library\/absurd$.html#value:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.Func[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]],provingground.HoTT.Term]]]]", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/library\/absurd$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/library\/absurd$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/library\/absurd$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/library\/absurd$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/library\/absurd$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/library\/absurd$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/library\/absurd$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/absurd$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/absurd$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/absurd$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/library\/absurd$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/library\/absurd$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/library\/absurd$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/library\/absurd$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/library\/absurd$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/library\/absurd$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/library\/absurd$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/library\/absurd$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/library\/absurd$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.library.BinTrees", "shortDescription" : "", "object" : "provingground\/library\/BinTrees$.html", "members_object" : [{"label" : "leaves", "tail" : ": Func[Term, Term]", "member" : "provingground.library.BinTrees.leaves", "link" : "provingground\/library\/BinTrees$.html#leaves:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]", "kind" : "val"}, {"label" : "g", "tail" : ": Func[Term, Term] with Subs[Func[Term, Term]]", "member" : "provingground.library.BinTrees.g", "link" : "provingground\/library\/BinTrees$.html#g:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "f", "tail" : ": Func[Term, Term] with Subs[Func[Term, Term]]", "member" : "provingground.library.BinTrees.f", "link" : "provingground\/library\/BinTrees$.html#f:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "recBTN", "tail" : ": Func[Term, Func[Func[Func[Term, Term], Func[Func[Term, Term], Term]], Func[Term, Term]]]", "member" : "provingground.library.BinTrees.recBTN", "link" : "provingground\/library\/BinTrees$.html#recBTN:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Func[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term],provingground.HoTT.Term]],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "node", "tail" : ": Func[Func[Term, Term], Term]", "member" : "provingground.library.BinTrees.node", "link" : "provingground\/library\/BinTrees$.html#node:provingground.HoTT.Func[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term],provingground.HoTT.Term]", "kind" : "val"}, {"label" : "leaf", "tail" : ": Term", "member" : "provingground.library.BinTrees.leaf", "link" : "provingground\/library\/BinTrees$.html#leaf:provingground.HoTT.Term", "kind" : "val"}, {"label" : "BTInd", "tail" : ": ConstructorSeqTL[::[HNil, ::[::[FuncConsShape.type, HNil], HNil]], Term, ::[Term, ::[Func[Func[Term, Term], Term], HNil]]]", "member" : "provingground.library.BinTrees.BTInd", "link" : "provingground\/library\/BinTrees$.html#BTInd:provingground.induction.ConstructorSeqTL[shapeless.HNil::(provingground.induction.ConstructorShape.FuncConsShape.type::shapeless.HNil)::shapeless.HNil,provingground.HoTT.Term,provingground.HoTT.Term::provingground.HoTT.Func[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term],provingground.HoTT.Term]::shapeless.HNil]", "kind" : "val"}, {"label" : "BT", "tail" : ": Typ[Term] with Subs[Typ[Term]]", "member" : "provingground.library.BinTrees.BT", "link" : "provingground\/library\/BinTrees$.html#BT:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/library\/BinTrees$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/library\/BinTrees$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/library\/BinTrees$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/library\/BinTrees$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/library\/BinTrees$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/library\/BinTrees$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/library\/BinTrees$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/BinTrees$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/BinTrees$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/BinTrees$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/library\/BinTrees$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/library\/BinTrees$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/library\/BinTrees$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/library\/BinTrees$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/library\/BinTrees$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/library\/BinTrees$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/library\/BinTrees$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/library\/BinTrees$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/library\/BinTrees$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.library.bool$cases_on", "shortDescription" : "", "object" : "provingground\/library\/bool$cases_on$.html", "members_object" : [{"label" : "value", "tail" : ": FuncLike[Func[Term, Typ[Term]] with Subs[Func[Term, Typ[Term]]], FuncLike[Term with Subs[Term], Func[Term with Subs[Term], Func[Term with Subs[Term], Term]]]]", "member" : "provingground.library.bool$cases_on.value", "link" : "provingground\/library\/bool$cases_on$.html#value:provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]]]]", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/library\/bool$cases_on$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/library\/bool$cases_on$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/library\/bool$cases_on$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/library\/bool$cases_on$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/library\/bool$cases_on$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/library\/bool$cases_on$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/library\/bool$cases_on$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/bool$cases_on$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/bool$cases_on$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/bool$cases_on$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/library\/bool$cases_on$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/library\/bool$cases_on$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/library\/bool$cases_on$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/library\/bool$cases_on$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/library\/bool$cases_on$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/library\/bool$cases_on$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/library\/bool$cases_on$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/library\/bool$cases_on$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/library\/bool$cases_on$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.library.boolInd", "shortDescription" : "", "object" : "provingground\/library\/boolInd$.html", "members_object" : [{"label" : "value", "tail" : ": ConstructorSeqTL[::[HNil, ::[HNil, HNil]], Term, ::[Term, ::[Term, HNil]]]", "member" : "provingground.library.boolInd.value", "link" : "provingground\/library\/boolInd$.html#value:provingground.induction.ConstructorSeqTL[shapeless.HNil::shapeless.HNil::shapeless.HNil,provingground.HoTT.Term,provingground.HoTT.Term::provingground.HoTT.Term::shapeless.HNil]", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/library\/boolInd$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/library\/boolInd$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/library\/boolInd$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/library\/boolInd$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/library\/boolInd$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/library\/boolInd$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/library\/boolInd$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/boolInd$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/boolInd$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/boolInd$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/library\/boolInd$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/library\/boolInd$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/library\/boolInd$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/library\/boolInd$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/library\/boolInd$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/library\/boolInd$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/library\/boolInd$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/library\/boolInd$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/library\/boolInd$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.library.Bools", "shortDescription" : "", "object" : "provingground\/library\/Bools$.html", "members_object" : [{"label" : "or", "tail" : ": Func[Term, Func[Term, Term]]", "member" : "provingground.library.Bools.or", "link" : "provingground\/library\/Bools$.html#or:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "and", "tail" : ": Func[Term, Func[Term, Term]]", "member" : "provingground.library.Bools.and", "link" : "provingground\/library\/Bools$.html#and:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "recBBB", "tail" : ": Func[Func[Term, Term], Func[Func[Term, Term], Func[Term, Func[Term, Term]]]]", "member" : "provingground.library.Bools.recBBB", "link" : "provingground\/library\/Bools$.html#recBBB:provingground.HoTT.Func[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]]", "kind" : "val"}, {"label" : "b", "tail" : ": Term with Subs[Term]", "member" : "provingground.library.Bools.b", "link" : "provingground\/library\/Bools$.html#b:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "not", "tail" : ": Func[Term, Term]", "member" : "provingground.library.Bools.not", "link" : "provingground\/library\/Bools$.html#not:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]", "kind" : "val"}, {"label" : "recBoolBool", "tail" : ": Func[Term, Func[Term, Func[Term, Term]]]", "member" : "provingground.library.Bools.recBoolBool", "link" : "provingground\/library\/Bools$.html#recBoolBool:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "ff", "tail" : ": Term", "member" : "provingground.library.Bools.ff", "link" : "provingground\/library\/Bools$.html#ff:provingground.HoTT.Term", "kind" : "val"}, {"label" : "tt", "tail" : ": Term", "member" : "provingground.library.Bools.tt", "link" : "provingground\/library\/Bools$.html#tt:provingground.HoTT.Term", "kind" : "val"}, {"label" : "BoolInd", "tail" : ": ConstructorSeqTL[::[HNil, ::[HNil, HNil]], Term, ::[Term, ::[Term, HNil]]]", "member" : "provingground.library.Bools.BoolInd", "link" : "provingground\/library\/Bools$.html#BoolInd:provingground.induction.ConstructorSeqTL[shapeless.HNil::shapeless.HNil::shapeless.HNil,provingground.HoTT.Term,provingground.HoTT.Term::provingground.HoTT.Term::shapeless.HNil]", "kind" : "val"}, {"label" : "Bool", "tail" : ": Typ[Term] with Subs[Typ[Term]]", "member" : "provingground.library.Bools.Bool", "link" : "provingground\/library\/Bools$.html#Bool:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/library\/Bools$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/library\/Bools$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/library\/Bools$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/library\/Bools$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/library\/Bools$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/library\/Bools$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/library\/Bools$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/Bools$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/Bools$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/Bools$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/library\/Bools$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/library\/Bools$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/library\/Bools$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/library\/Bools$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/library\/Bools$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/library\/Bools$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/library\/Bools$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/library\/Bools$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/library\/Bools$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.library.decidable$cases_on", "shortDescription" : "", "object" : "provingground\/library\/decidable$cases_on$.html", "members_object" : [{"label" : "value", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Func[Term, Typ[Term]] with Subs[Func[Term, Typ[Term]]], FuncLike[Term with Subs[Term], Func[FuncLike[Func[Term, Term] with Subs[Func[Term, Term]], Term] with Subs[FuncLike[Func[Term, Term] with Subs[Func[Term, Term]], Term]], Func[FuncLike[Term with Subs[Term], Term] with Subs[FuncLike[Term with Subs[Term], Term]], Term]]]]]", "member" : "provingground.library.decidable$cases_on.value", "link" : "provingground\/library\/decidable$cases_on$.html#value:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]],provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]],provingground.HoTT.Term]],provingground.HoTT.Func[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]],provingground.HoTT.Term]]]]]", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/library\/decidable$cases_on$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/library\/decidable$cases_on$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/library\/decidable$cases_on$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/library\/decidable$cases_on$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/library\/decidable$cases_on$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/library\/decidable$cases_on$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/library\/decidable$cases_on$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/decidable$cases_on$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/decidable$cases_on$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/decidable$cases_on$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/library\/decidable$cases_on$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/library\/decidable$cases_on$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/library\/decidable$cases_on$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/library\/decidable$cases_on$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/library\/decidable$cases_on$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/library\/decidable$cases_on$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/library\/decidable$cases_on$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/library\/decidable$cases_on$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/library\/decidable$cases_on$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.library.decidableInd", "shortDescription" : "", "object" : "provingground\/library\/decidableInd$.html", "members_object" : [{"label" : "value", "tail" : ": Lambda[Typ[Term] with Subs[Typ[Term]], ConstructorSeqTL[::[::[CnstFuncConsShape.type, HNil], ::[::[CnstFuncConsShape.type, HNil], HNil]], Term, ::[Func[Func[Term, Term], Term], ::[Func[Term, Term], HNil]]]]", "member" : "provingground.library.decidableInd.value", "link" : "provingground\/library\/decidableInd$.html#value:provingground.Subst.Lambda[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.induction.ConstructorSeqTL[(provingground.induction.ConstructorShape.CnstFuncConsShape.type::shapeless.HNil)::(provingground.induction.ConstructorShape.CnstFuncConsShape.type::shapeless.HNil)::shapeless.HNil,provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term],provingground.HoTT.Term]::provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]::shapeless.HNil]]", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/library\/decidableInd$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/library\/decidableInd$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/library\/decidableInd$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/library\/decidableInd$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/library\/decidableInd$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/library\/decidableInd$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/library\/decidableInd$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/decidableInd$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/decidableInd$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/decidableInd$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/library\/decidableInd$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/library\/decidableInd$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/library\/decidableInd$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/library\/decidableInd$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/library\/decidableInd$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/library\/decidableInd$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/library\/decidableInd$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/library\/decidableInd$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/library\/decidableInd$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.library.DoubleEven", "shortDescription" : "", "object" : "provingground\/library\/DoubleEven$.html", "members_object" : [{"label" : "pf", "tail" : ": FuncLike[Term with Subs[Term], Term]", "member" : "provingground.library.DoubleEven.pf", "link" : "provingground\/library\/DoubleEven$.html#pf:provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]", "kind" : "val"}, {"label" : "inductor", "tail" : ": Func[Term, Func[FuncLike[Term, Func[Term, Term]], FuncLike[Term, Term]]]", "member" : "provingground.library.DoubleEven.inductor", "link" : "provingground\/library\/DoubleEven$.html#inductor:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "hyp", "tail" : ": Term with Subs[Term]", "member" : "provingground.library.DoubleEven.hyp", "link" : "provingground\/library\/DoubleEven$.html#hyp:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "thm", "tail" : ": GenFuncTyp[Term with Subs[Term], Term]", "member" : "provingground.library.DoubleEven.thm", "link" : "provingground\/library\/DoubleEven$.html#thm:provingground.HoTT.GenFuncTyp[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/library\/DoubleEven$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/library\/DoubleEven$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/library\/DoubleEven$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/library\/DoubleEven$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/library\/DoubleEven$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/library\/DoubleEven$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/library\/DoubleEven$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/DoubleEven$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/DoubleEven$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/DoubleEven$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/library\/DoubleEven$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/library\/DoubleEven$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/library\/DoubleEven$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/library\/DoubleEven$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/library\/DoubleEven$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/library\/DoubleEven$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/library\/DoubleEven$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/library\/DoubleEven$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/library\/DoubleEven$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.library.eq$subst", "shortDescription" : "", "object" : "provingground\/library\/eq$subst$.html", "members_object" : [{"label" : "value", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Func[Term, Typ[Term]] with Subs[Func[Term, Typ[Term]]], FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], Func[Term with Subs[Term], Func[Term with Subs[Term], Term with Subs[Term]]]]]]]", "member" : "provingground.library.eq$subst.value", "link" : "provingground\/library\/eq$subst$.html#value:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]]]]]]", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/library\/eq$subst$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/library\/eq$subst$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/library\/eq$subst$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/library\/eq$subst$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/library\/eq$subst$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/library\/eq$subst$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/library\/eq$subst$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/eq$subst$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/eq$subst$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/eq$subst$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/library\/eq$subst$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/library\/eq$subst$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/library\/eq$subst$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/library\/eq$subst$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/library\/eq$subst$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/library\/eq$subst$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/library\/eq$subst$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/library\/eq$subst$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/library\/eq$subst$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.library.eqInd", "shortDescription" : "", "object" : "provingground\/library\/eqInd$.html", "members_object" : [{"label" : "value", "tail" : ": Lambda[Typ[Term] with Subs[Typ[Term]], Lambda[Term with Subs[Term], Cons[HNil, HNil, Term, Func[Term, Typ[Term]], Term, ::[Term, HNil], HNil]]]", "member" : "provingground.library.eqInd.value", "link" : "provingground\/library\/eqInd$.html#value:provingground.Subst.Lambda[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.Subst.Lambda[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.induction.IndexedConstructorSeqDom.Cons[shapeless.HNil,shapeless.HNil,provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.Term,provingground.HoTT.Term::shapeless.HNil,shapeless.HNil]]]", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/library\/eqInd$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/library\/eqInd$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/library\/eqInd$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/library\/eqInd$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/library\/eqInd$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/library\/eqInd$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/library\/eqInd$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/eqInd$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/eqInd$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/eqInd$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/library\/eqInd$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/library\/eqInd$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/library\/eqInd$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/library\/eqInd$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/library\/eqInd$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/library\/eqInd$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/library\/eqInd$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/library\/eqInd$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/library\/eqInd$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.library.falseInd", "shortDescription" : "", "object" : "provingground\/library\/falseInd$.html", "members_object" : [{"label" : "value", "tail" : ": ConstructorSeqTL[HNil, Term, HNil]", "member" : "provingground.library.falseInd.value", "link" : "provingground\/library\/falseInd$.html#value:provingground.induction.ConstructorSeqTL[shapeless.HNil,provingground.HoTT.Term,shapeless.HNil]", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/library\/falseInd$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/library\/falseInd$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/library\/falseInd$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/library\/falseInd$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/library\/falseInd$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/library\/falseInd$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/library\/falseInd$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/falseInd$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/falseInd$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/falseInd$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/library\/falseInd$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/library\/falseInd$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/library\/falseInd$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/library\/falseInd$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/library\/falseInd$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/library\/falseInd$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/library\/falseInd$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/library\/falseInd$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/library\/falseInd$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.library.Group", "shortDescription" : "", "object" : "provingground\/library\/Group$.html", "members_object" : [{"label" : "rInv", "tail" : ": GenFuncTyp[Term with Subs[Term], Equality[Term]]", "member" : "provingground.library.Group.rInv", "link" : "provingground\/library\/Group$.html#rInv:provingground.HoTT.GenFuncTyp[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Equality[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "lInv", "tail" : ": GenFuncTyp[Term with Subs[Term], Equality[Term]]", "member" : "provingground.library.Group.lInv", "link" : "provingground\/library\/Group$.html#lInv:provingground.HoTT.GenFuncTyp[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Equality[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "i", "tail" : ": Func[Term, Term] with Subs[Func[Term, Term]]", "member" : "provingground.library.Group.i", "link" : "provingground\/library\/Group$.html#i:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/library\/Group$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/library\/Group$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/library\/Group$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/library\/Group$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/library\/Group$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/library\/Group$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/library\/Group$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/Group$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/Group$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/Group$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/library\/Group$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/library\/Group$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/library\/Group$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/library\/Group$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/library\/Group$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/library\/Group$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/library\/Group$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/library\/Group$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/library\/Group$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.library.group$mul", "shortDescription" : "", "object" : "provingground\/library\/group$mul$.html", "members_object" : [{"label" : "value", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], Func[Term, Func[Term, Func[Term, Term]]]]", "member" : "provingground.library.group$mul.value", "link" : "provingground\/library\/group$mul$.html#value:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]]", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/library\/group$mul$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/library\/group$mul$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/library\/group$mul$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/library\/group$mul$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/library\/group$mul$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/library\/group$mul$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/library\/group$mul$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/group$mul$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/group$mul$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/group$mul$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/library\/group$mul$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/library\/group$mul$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/library\/group$mul$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/library\/group$mul$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/library\/group$mul$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/library\/group$mul$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/library\/group$mul$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/library\/group$mul$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/library\/group$mul$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.library.groupInd", "shortDescription" : "", "object" : "provingground\/library\/groupInd$.html", "members_object" : [{"label" : "value", "tail" : ": Lambda[Typ[Term] with Subs[Typ[Term]], ConstructorSeqTL[::[::[CnstDepFuncConsShape.type, ::[CnstDepFuncConsShape.type, ::[CnstDepFuncConsShape.type, ::[CnstDepFuncConsShape.type, ::[CnstDepFuncConsShape.type, ::[CnstDepFuncConsShape.type, ::[CnstFuncConsShape.type, HNil]]]]]]], HNil], Term, ::[FuncLike[Func[Term, Func[Term, Term]] with Subs[Func[Term, Func[Term, Term]]], FuncLike[FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], Term]]] with Subs[FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], Term]]]], FuncLike[Term with Subs[Term], FuncLike[FuncLike[Term with Subs[Term], Term] with Subs[FuncLike[Term with Subs[Term], Term]], FuncLike[FuncLike[Term with Subs[Term], Term] with Subs[FuncLike[Term with Subs[Term], Term]], FuncLike[Func[Term, Term] with Subs[Func[Term, Term]], Func[FuncLike[Term with Subs[Term], Term], Term]]]]]]], HNil]]]", "member" : "provingground.library.groupInd.value", "link" : "provingground\/library\/groupInd$.html#value:provingground.Subst.Lambda[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.induction.ConstructorSeqTL[(provingground.induction.ConstructorShape.CnstDepFuncConsShape.type::provingground.induction.ConstructorShape.CnstDepFuncConsShape.type::provingground.induction.ConstructorShape.CnstDepFuncConsShape.type::provingground.induction.ConstructorShape.CnstDepFuncConsShape.type::provingground.induction.ConstructorShape.CnstDepFuncConsShape.type::provingground.induction.ConstructorShape.CnstDepFuncConsShape.type::provingground.induction.ConstructorShape.CnstFuncConsShape.type::shapeless.HNil)::shapeless.HNil,provingground.HoTT.Term,provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]],provingground.HoTT.FuncLike[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]]]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]]]],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]],provingground.HoTT.Func[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term],provingground.HoTT.Term]]]]]]]::shapeless.HNil]]", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/library\/groupInd$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/library\/groupInd$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/library\/groupInd$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/library\/groupInd$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/library\/groupInd$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/library\/groupInd$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/library\/groupInd$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/groupInd$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/groupInd$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/groupInd$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/library\/groupInd$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/library\/groupInd$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/library\/groupInd$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/library\/groupInd$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/library\/groupInd$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/library\/groupInd$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/library\/groupInd$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/library\/groupInd$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/library\/groupInd$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.library.has_inv$inv", "shortDescription" : "", "object" : "provingground\/library\/has_inv$inv$.html", "members_object" : [{"label" : "value", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], Func[Term, Func[Term, Term]]]", "member" : "provingground.library.has_inv$inv.value", "link" : "provingground\/library\/has_inv$inv$.html#value:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/library\/has_inv$inv$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/library\/has_inv$inv$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/library\/has_inv$inv$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/library\/has_inv$inv$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/library\/has_inv$inv$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/library\/has_inv$inv$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/library\/has_inv$inv$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/has_inv$inv$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/has_inv$inv$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/has_inv$inv$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/library\/has_inv$inv$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/library\/has_inv$inv$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/library\/has_inv$inv$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/library\/has_inv$inv$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/library\/has_inv$inv$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/library\/has_inv$inv$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/library\/has_inv$inv$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/library\/has_inv$inv$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/library\/has_inv$inv$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.library.has_invInd", "shortDescription" : "", "object" : "provingground\/library\/has_invInd$.html", "members_object" : [{"label" : "value", "tail" : ": Lambda[Typ[Term] with Subs[Typ[Term]], ConstructorSeqTL[::[::[CnstFuncConsShape.type, HNil], HNil], Term, ::[Func[Func[Term, Term], Term], HNil]]]", "member" : "provingground.library.has_invInd.value", "link" : "provingground\/library\/has_invInd$.html#value:provingground.Subst.Lambda[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.induction.ConstructorSeqTL[(provingground.induction.ConstructorShape.CnstFuncConsShape.type::shapeless.HNil)::shapeless.HNil,provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term],provingground.HoTT.Term]::shapeless.HNil]]", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/library\/has_invInd$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/library\/has_invInd$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/library\/has_invInd$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/library\/has_invInd$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/library\/has_invInd$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/library\/has_invInd$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/library\/has_invInd$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/has_invInd$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/has_invInd$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/has_invInd$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/library\/has_invInd$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/library\/has_invInd$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/library\/has_invInd$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/library\/has_invInd$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/library\/has_invInd$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/library\/has_invInd$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/library\/has_invInd$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/library\/has_invInd$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/library\/has_invInd$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.library.has_mul$mul", "shortDescription" : "", "object" : "provingground\/library\/has_mul$mul$.html", "members_object" : [{"label" : "value", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], Func[Term, Func[Term, Func[Term, Term]]]]", "member" : "provingground.library.has_mul$mul.value", "link" : "provingground\/library\/has_mul$mul$.html#value:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]]", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/library\/has_mul$mul$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/library\/has_mul$mul$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/library\/has_mul$mul$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/library\/has_mul$mul$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/library\/has_mul$mul$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/library\/has_mul$mul$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/library\/has_mul$mul$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/has_mul$mul$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/has_mul$mul$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/has_mul$mul$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/library\/has_mul$mul$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/library\/has_mul$mul$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/library\/has_mul$mul$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/library\/has_mul$mul$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/library\/has_mul$mul$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/library\/has_mul$mul$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/library\/has_mul$mul$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/library\/has_mul$mul$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/library\/has_mul$mul$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.library.has_mulInd", "shortDescription" : "", "object" : "provingground\/library\/has_mulInd$.html", "members_object" : [{"label" : "value", "tail" : ": Lambda[Typ[Term] with Subs[Typ[Term]], ConstructorSeqTL[::[::[CnstFuncConsShape.type, HNil], HNil], Term, ::[Func[Func[Term, Func[Term, Term]], Term], HNil]]]", "member" : "provingground.library.has_mulInd.value", "link" : "provingground\/library\/has_mulInd$.html#value:provingground.Subst.Lambda[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.induction.ConstructorSeqTL[(provingground.induction.ConstructorShape.CnstFuncConsShape.type::shapeless.HNil)::shapeless.HNil,provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]],provingground.HoTT.Term]::shapeless.HNil]]", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/library\/has_mulInd$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/library\/has_mulInd$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/library\/has_mulInd$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/library\/has_mulInd$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/library\/has_mulInd$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/library\/has_mulInd$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/library\/has_mulInd$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/has_mulInd$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/has_mulInd$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/has_mulInd$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/library\/has_mulInd$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/library\/has_mulInd$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/library\/has_mulInd$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/library\/has_mulInd$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/library\/has_mulInd$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/library\/has_mulInd$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/library\/has_mulInd$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/library\/has_mulInd$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/library\/has_mulInd$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.library.has_one$one", "shortDescription" : "", "object" : "provingground\/library\/has_one$one$.html", "members_object" : [{"label" : "value", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], Func[Term, Term]]", "member" : "provingground.library.has_one$one.value", "link" : "provingground\/library\/has_one$one$.html#value:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/library\/has_one$one$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/library\/has_one$one$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/library\/has_one$one$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/library\/has_one$one$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/library\/has_one$one$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/library\/has_one$one$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/library\/has_one$one$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/has_one$one$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/has_one$one$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/has_one$one$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/library\/has_one$one$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/library\/has_one$one$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/library\/has_one$one$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/library\/has_one$one$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/library\/has_one$one$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/library\/has_one$one$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/library\/has_one$one$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/library\/has_one$one$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/library\/has_one$one$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.library.has_oneInd", "shortDescription" : "", "object" : "provingground\/library\/has_oneInd$.html", "members_object" : [{"label" : "value", "tail" : ": Lambda[Typ[Term] with Subs[Typ[Term]], ConstructorSeqTL[::[::[CnstFuncConsShape.type, HNil], HNil], Term, ::[Func[Term, Term], HNil]]]", "member" : "provingground.library.has_oneInd.value", "link" : "provingground\/library\/has_oneInd$.html#value:provingground.Subst.Lambda[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.induction.ConstructorSeqTL[(provingground.induction.ConstructorShape.CnstFuncConsShape.type::shapeless.HNil)::shapeless.HNil,provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]::shapeless.HNil]]", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/library\/has_oneInd$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/library\/has_oneInd$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/library\/has_oneInd$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/library\/has_oneInd$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/library\/has_oneInd$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/library\/has_oneInd$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/library\/has_oneInd$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/has_oneInd$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/has_oneInd$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/has_oneInd$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/library\/has_oneInd$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/library\/has_oneInd$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/library\/has_oneInd$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/library\/has_oneInd$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/library\/has_oneInd$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/library\/has_oneInd$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/library\/has_oneInd$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/library\/has_oneInd$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/library\/has_oneInd$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.library.id_rhs", "shortDescription" : "", "object" : "provingground\/library\/id_rhs$.html", "members_object" : [{"label" : "value", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], Func[Term with Subs[Term], Term with Subs[Term]]]", "member" : "provingground.library.id_rhs.value", "link" : "provingground\/library\/id_rhs$.html#value:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.Func[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]]", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/library\/id_rhs$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/library\/id_rhs$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/library\/id_rhs$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/library\/id_rhs$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/library\/id_rhs$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/library\/id_rhs$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/library\/id_rhs$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/id_rhs$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/id_rhs$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/id_rhs$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/library\/id_rhs$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/library\/id_rhs$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/library\/id_rhs$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/library\/id_rhs$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/library\/id_rhs$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/library\/id_rhs$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/library\/id_rhs$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/library\/id_rhs$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/library\/id_rhs$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.library.LeanMemo", "shortDescription" : "", "object" : "provingground\/library\/LeanMemo$.html", "members_object" : [{"label" : "indTaskMap", "tail" : "(): Map[Name, Task[TermIndMod]]", "member" : "provingground.library.LeanMemo.indTaskMap", "link" : "provingground\/library\/LeanMemo$.html#indTaskMap:Map[trepplein.Name,monix.eval.Task[provingground.interface.TermIndMod]]", "kind" : "def"}, {"label" : "defTaskMap", "tail" : "(): Map[Name, Task[Term]]", "member" : "provingground.library.LeanMemo.defTaskMap", "link" : "provingground\/library\/LeanMemo$.html#defTaskMap:Map[trepplein.Name,monix.eval.Task[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "indMap", "tail" : "(): Map[Name, TermIndMod]", "member" : "provingground.library.LeanMemo.indMap", "link" : "provingground\/library\/LeanMemo$.html#indMap:Map[trepplein.Name,provingground.interface.TermIndMod]", "kind" : "def"}, {"label" : "defMap", "tail" : "(): Map[Name, Term]", "member" : "provingground.library.LeanMemo.defMap", "link" : "provingground\/library\/LeanMemo$.html#defMap:Map[trepplein.Name,provingground.HoTT.Term]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/library\/LeanMemo$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/library\/LeanMemo$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/library\/LeanMemo$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/library\/LeanMemo$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/library\/LeanMemo$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/library\/LeanMemo$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/library\/LeanMemo$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/LeanMemo$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/LeanMemo$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/LeanMemo$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/library\/LeanMemo$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/library\/LeanMemo$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/library\/LeanMemo$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/library\/LeanMemo$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/library\/LeanMemo$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/library\/LeanMemo$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/library\/LeanMemo$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/library\/LeanMemo$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/library\/LeanMemo$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.library.Lists", "shortDescription" : "", "object" : "provingground\/library\/Lists$.html", "members_object" : [{"label" : "size", "tail" : ": Func[Term, Term]", "member" : "provingground.library.Lists.size", "link" : "provingground\/library\/Lists$.html#size:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]", "kind" : "val"}, {"label" : "l", "tail" : ": Term with Subs[Term]", "member" : "provingground.library.Lists.l", "link" : "provingground\/library\/Lists$.html#l:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "a", "tail" : ": Term with Subs[Term]", "member" : "provingground.library.Lists.a", "link" : "provingground\/library\/Lists$.html#a:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "recLN", "tail" : ": Func[Term, Func[Func[Term, Func[Term, Func[Term, Term]]], Func[Term, Term]]]", "member" : "provingground.library.Lists.recLN", "link" : "provingground\/library\/Lists$.html#recLN:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "ListInd", "tail" : ": Lambda[Term, ConstructorSeqTL[::[HNil, ::[::[CnstFuncConsShape.type, ::[FuncConsShape.type, HNil]], HNil]], Term, ::[Term, ::[Func[Term, Func[Term, Term]], HNil]]]]", "member" : "provingground.library.Lists.ListInd", "link" : "provingground\/library\/Lists$.html#ListInd:provingground.Subst.Lambda[provingground.HoTT.Term,provingground.induction.ConstructorSeqTL[shapeless.HNil::(provingground.induction.ConstructorShape.CnstFuncConsShape.type::provingground.induction.ConstructorShape.FuncConsShape.type::shapeless.HNil)::shapeless.HNil,provingground.HoTT.Term,provingground.HoTT.Term::provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]::shapeless.HNil]]", "kind" : "val"}, {"label" : "cons", "tail" : ": Func[Term, Func[Term, Term]]", "member" : "provingground.library.Lists.cons", "link" : "provingground\/library\/Lists$.html#cons:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "nil", "tail" : ": Term", "member" : "provingground.library.Lists.nil", "link" : "provingground\/library\/Lists$.html#nil:provingground.HoTT.Term", "kind" : "val"}, {"label" : "ListAInd", "tail" : ": ConstructorSeqTL[::[HNil, ::[::[CnstFuncConsShape.type, ::[FuncConsShape.type, HNil]], HNil]], Term, ::[Term, ::[Func[Term, Func[Term, Term]], HNil]]]", "member" : "provingground.library.Lists.ListAInd", "link" : "provingground\/library\/Lists$.html#ListAInd:provingground.induction.ConstructorSeqTL[shapeless.HNil::(provingground.induction.ConstructorShape.CnstFuncConsShape.type::provingground.induction.ConstructorShape.FuncConsShape.type::shapeless.HNil)::shapeless.HNil,provingground.HoTT.Term,provingground.HoTT.Term::provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]::shapeless.HNil]", "kind" : "val"}, {"label" : "ListA", "tail" : ": Typ[Term] with Subs[Typ[Term]]", "member" : "provingground.library.Lists.ListA", "link" : "provingground\/library\/Lists$.html#ListA:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "A", "tail" : ": Typ[Term] with Subs[Typ[Term]]", "member" : "provingground.library.Lists.A", "link" : "provingground\/library\/Lists$.html#A:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/library\/Lists$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/library\/Lists$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/library\/Lists$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/library\/Lists$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/library\/Lists$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/library\/Lists$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/library\/Lists$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/Lists$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/Lists$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/Lists$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/library\/Lists$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/library\/Lists$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/library\/Lists$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/library\/Lists$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/library\/Lists$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/library\/Lists$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/library\/Lists$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/library\/Lists$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/library\/Lists$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.library.LocalConstImpliesConst", "shortDescription" : "", "object" : "provingground\/library\/LocalConstImpliesConst$.html", "members_object" : [{"label" : "pf", "tail" : ": FuncLike[Term with Subs[Term], Equality[Term]]", "member" : "provingground.library.LocalConstImpliesConst.pf", "link" : "provingground\/library\/LocalConstImpliesConst$.html#pf:provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Equality[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "inductor", "tail" : ": Func[Equality[Term], Func[FuncLike[Term, Func[Equality[Term], Equality[Term]]], FuncLike[Term, Equality[Term]]]]", "member" : "provingground.library.LocalConstImpliesConst.inductor", "link" : "provingground\/library\/LocalConstImpliesConst$.html#inductor:provingground.HoTT.Func[provingground.HoTT.Equality[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Equality[provingground.HoTT.Term],provingground.HoTT.Equality[provingground.HoTT.Term]]],provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Equality[provingground.HoTT.Term]]]]", "kind" : "val"}, {"label" : "thm", "tail" : ": GenFuncTyp[Term with Subs[Term], Equality[Term]]", "member" : "provingground.library.LocalConstImpliesConst.thm", "link" : "provingground\/library\/LocalConstImpliesConst$.html#thm:provingground.HoTT.GenFuncTyp[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Equality[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "step", "tail" : ": Func[Equality[Term] with Subs[Equality[Term]], Equality[Term with Subs[Term]]]", "member" : "provingground.library.LocalConstImpliesConst.step", "link" : "provingground\/library\/LocalConstImpliesConst$.html#step:provingground.HoTT.Func[provingground.HoTT.Equality[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Equality[provingground.HoTT.Term]],provingground.HoTT.Equality[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "hyp", "tail" : ": Equality[Term] with Subs[Equality[Term]]", "member" : "provingground.library.LocalConstImpliesConst.hyp", "link" : "provingground\/library\/LocalConstImpliesConst$.html#hyp:provingground.HoTT.Equality[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Equality[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "base", "tail" : ": Refl[Term]", "member" : "provingground.library.LocalConstImpliesConst.base", "link" : "provingground\/library\/LocalConstImpliesConst$.html#base:provingground.HoTT.Refl[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "claim", "tail" : ": Func[Term with Subs[Term], IdentityTyp[Term]]", "member" : "provingground.library.LocalConstImpliesConst.claim", "link" : "provingground\/library\/LocalConstImpliesConst$.html#claim:provingground.HoTT.Func[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.IdentityTyp[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "ass", "tail" : ": FuncLike[Term with Subs[Term], Equality[Term]] with Subs[FuncLike[Term with Subs[Term], Equality[Term]]]", "member" : "provingground.library.LocalConstImpliesConst.ass", "link" : "provingground\/library\/LocalConstImpliesConst$.html#ass:provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Equality[provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Equality[provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "f", "tail" : ": Func[Term, Term] with Subs[Func[Term, Term]]", "member" : "provingground.library.LocalConstImpliesConst.f", "link" : "provingground\/library\/LocalConstImpliesConst$.html#f:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "A", "tail" : ": Typ[Term] with Subs[Typ[Term]]", "member" : "provingground.library.LocalConstImpliesConst.A", "link" : "provingground\/library\/LocalConstImpliesConst$.html#A:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/library\/LocalConstImpliesConst$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/library\/LocalConstImpliesConst$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/library\/LocalConstImpliesConst$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/library\/LocalConstImpliesConst$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/library\/LocalConstImpliesConst$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/library\/LocalConstImpliesConst$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/library\/LocalConstImpliesConst$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/LocalConstImpliesConst$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/LocalConstImpliesConst$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/LocalConstImpliesConst$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/library\/LocalConstImpliesConst$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/library\/LocalConstImpliesConst$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/library\/LocalConstImpliesConst$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/library\/LocalConstImpliesConst$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/library\/LocalConstImpliesConst$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/library\/LocalConstImpliesConst$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/library\/LocalConstImpliesConst$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/library\/LocalConstImpliesConst$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/library\/LocalConstImpliesConst$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.library.Monoid", "shortDescription" : "", "object" : "provingground\/library\/Monoid$.html", "members_object" : [{"label" : "sigma", "tail" : "(t: Term): Term with Subs[Term]", "member" : "provingground.library.Monoid.sigma", "link" : "provingground\/library\/Monoid$.html#sigma(t:provingground.HoTT.Term):provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "def"}, {"label" : "smooth", "tail" : "(fd: FiniteDistribution[Term]): FiniteDistribution[Term with Subs[Term]]", "member" : "provingground.library.Monoid.smooth", "link" : "provingground\/library\/Monoid$.html#smooth(fd:provingground.FiniteDistribution[provingground.HoTT.Term]):provingground.FiniteDistribution[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]", "kind" : "def"}, {"label" : "ded", "tail" : ": Deducer", "member" : "provingground.library.Monoid.ded", "link" : "provingground\/library\/Monoid$.html#ded:provingground.learning.Deducer", "kind" : "val"}, {"label" : "smallDist", "tail" : ": FiniteDistribution[Term with Subs[Term]]", "member" : "provingground.library.Monoid.smallDist", "link" : "provingground\/library\/Monoid$.html#smallDist:provingground.FiniteDistribution[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "elemDist", "tail" : ": FiniteDistribution[Term with Subs[Term]]", "member" : "provingground.library.Monoid.elemDist", "link" : "provingground\/library\/Monoid$.html#elemDist:provingground.FiniteDistribution[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "dist", "tail" : ": FiniteDistribution[Term with Subs[Term]]", "member" : "provingground.library.Monoid.dist", "link" : "provingground\/library\/Monoid$.html#dist:provingground.FiniteDistribution[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "vars", "tail" : ": Vector[Term with Subs[Term]]", "member" : "provingground.library.Monoid.vars", "link" : "provingground\/library\/Monoid$.html#vars:scala.collection.immutable.Vector[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "elTyps", "tail" : ": Func[Term with Subs[Term], Func[Term with Subs[Term], IdentityTyp[Term with Subs[Term]]]]", "member" : "provingground.library.Monoid.elTyps", "link" : "provingground\/library\/Monoid$.html#elTyps:provingground.HoTT.Func[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.IdentityTyp[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]]]", "kind" : "val"}, {"label" : "names", "tail" : ": Vector[(FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Func[Term, Term] with Subs[Func[Term, Term]], FuncLike[Func[Term, Term] with Subs[Func[Term, Term]], FuncLike[Term with Subs[Term], Func[Equality[Func[Term, Term] with Subs[Func[Term, Term]]], Equality[Term]]]]]]] with Subs[FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Func[Term, Term] with Subs[Func[Term, Term]], FuncLike[Func[Term, Term] with Subs[Func[Term, Term]], FuncLike[Term with Subs[Term], Func[Equality[Func[Term, Term] with Subs[Func[Term, Term]]], Equality[Term]]]]]]]], String)]", "member" : "provingground.library.Monoid.names", "link" : "provingground\/library\/Monoid$.html#names:scala.collection.immutable.Vector[(provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Equality[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]],provingground.HoTT.Equality[provingground.HoTT.Term]]]]]]]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Equality[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]],provingground.HoTT.Equality[provingground.HoTT.Term]]]]]]]],String)]", "kind" : "val"}, {"label" : "transfer", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Func[Term, Term] with Subs[Func[Term, Term]], FuncLike[Func[Term, Term] with Subs[Func[Term, Term]], FuncLike[Term with Subs[Term], Func[Equality[Func[Term, Term] with Subs[Func[Term, Term]]], Equality[Term]]]]]]] with Subs[FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Func[Term, Term] with Subs[Func[Term, Term]], FuncLike[Func[Term, Term] with Subs[Func[Term, Term]], FuncLike[Term with Subs[Term], Func[Equality[Func[Term, Term] with Subs[Func[Term, Term]]], Equality[Term]]]]]]]]", "member" : "provingground.library.Monoid.transfer", "link" : "provingground\/library\/Monoid$.html#transfer:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Equality[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]],provingground.HoTT.Equality[provingground.HoTT.Term]]]]]]]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Equality[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]],provingground.HoTT.Equality[provingground.HoTT.Term]]]]]]]]", "kind" : "val"}, {"label" : "extensionality", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Func[Term, Term] with Subs[Func[Term, Term]], FuncLike[Term with Subs[Term] with Subs[Term with Subs[Term]], FuncLike[Term with Subs[Term] with Subs[Term with Subs[Term]], Func[Equality[Term with Subs[Term] with Subs[Term with Subs[Term]]] with Subs[Equality[Term with Subs[Term] with Subs[Term with Subs[Term]]]], Equality[Term]]]]]]]", "member" : "provingground.library.Monoid.extensionality", "link" : "provingground\/library\/Monoid$.html#extensionality:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]],provingground.HoTT.Func[provingground.HoTT.Equality[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]]withprovingground.HoTT.Subs[provingground.HoTT.Equality[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]]],provingground.HoTT.Equality[provingground.HoTT.Term]]]]]]]", "kind" : "val"}, {"label" : "x", "tail" : ": Term with Subs[Term]", "member" : "provingground.library.Monoid.x", "link" : "provingground\/library\/Monoid$.html#x:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "g", "tail" : ": Func[Term, Term] with Subs[Func[Term, Term]]", "member" : "provingground.library.Monoid.g", "link" : "provingground\/library\/Monoid$.html#g:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "f", "tail" : ": Func[Term, Term] with Subs[Func[Term, Term]]", "member" : "provingground.library.Monoid.f", "link" : "provingground\/library\/Monoid$.html#f:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "Y", "tail" : ": Typ[Term] with Subs[Typ[Term]]", "member" : "provingground.library.Monoid.Y", "link" : "provingground\/library\/Monoid$.html#Y:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "X", "tail" : ": Typ[Term] with Subs[Typ[Term]]", "member" : "provingground.library.Monoid.X", "link" : "provingground\/library\/Monoid$.html#X:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "MVars", "tail" : ": Vector[Weighted[Term]]", "member" : "provingground.library.Monoid.MVars", "link" : "provingground\/library\/Monoid$.html#MVars:scala.collection.immutable.Vector[provingground.Weighted[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "assoc", "tail" : ": FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], Equality[Term]]]] with Subs[FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], Equality[Term]]]]]", "member" : "provingground.library.Monoid.assoc", "link" : "provingground\/library\/Monoid$.html#assoc:provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Equality[provingground.HoTT.Term]]]]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Equality[provingground.HoTT.Term]]]]]", "kind" : "val"}, {"label" : "idUnique", "tail" : ": GenFuncTyp[Term with Subs[Term], Func[FuncLike[Term with Subs[Term], Equality[Term]], Equality[Term with Subs[Term]]]]", "member" : "provingground.library.Monoid.idUnique", "link" : "provingground\/library\/Monoid$.html#idUnique:provingground.HoTT.GenFuncTyp[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Equality[provingground.HoTT.Term]],provingground.HoTT.Equality[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]]]", "kind" : "val"}, {"label" : "refl", "tail" : ": FuncLike[Term with Subs[Term], Refl[Term with Subs[Term]]]", "member" : "provingground.library.Monoid.refl", "link" : "provingground\/library\/Monoid$.html#refl:provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Refl[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "rightId", "tail" : ": FuncLike[Term with Subs[Term], Equality[Term]] with Subs[FuncLike[Term with Subs[Term], Equality[Term]]]", "member" : "provingground.library.Monoid.rightId", "link" : "provingground\/library\/Monoid$.html#rightId:provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Equality[provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Equality[provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "leftId", "tail" : ": FuncLike[Term with Subs[Term], Equality[Term]] with Subs[FuncLike[Term with Subs[Term], Equality[Term]]]", "member" : "provingground.library.Monoid.leftId", "link" : "provingground\/library\/Monoid$.html#leftId:provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Equality[provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Equality[provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "op", "tail" : ": Func[Term, Func[Term, Term]] with Subs[Func[Term, Func[Term, Term]]]", "member" : "provingground.library.Monoid.op", "link" : "provingground\/library\/Monoid$.html#op:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "r", "tail" : ": Term with Subs[Term]", "member" : "provingground.library.Monoid.r", "link" : "provingground\/library\/Monoid$.html#r:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "l", "tail" : ": Term with Subs[Term]", "member" : "provingground.library.Monoid.l", "link" : "provingground\/library\/Monoid$.html#l:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "c", "tail" : ": Term with Subs[Term]", "member" : "provingground.library.Monoid.c", "link" : "provingground\/library\/Monoid$.html#c:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "b", "tail" : ": Term with Subs[Term]", "member" : "provingground.library.Monoid.b", "link" : "provingground\/library\/Monoid$.html#b:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "a", "tail" : ": Term with Subs[Term]", "member" : "provingground.library.Monoid.a", "link" : "provingground\/library\/Monoid$.html#a:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "trans", "tail" : ": FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], Func[Equality[Term with Subs[Term] with Subs[Term with Subs[Term]]] with Subs[Equality[Term with Subs[Term] with Subs[Term with Subs[Term]]]], Func[Equality[Term with Subs[Term]], Equality[Term with Subs[Term]]]]]]]", "member" : "provingground.library.Monoid.trans", "link" : "provingground\/library\/Monoid$.html#trans:provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Equality[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]]withprovingground.HoTT.Subs[provingground.HoTT.Equality[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]]],provingground.HoTT.Func[provingground.HoTT.Equality[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]],provingground.HoTT.Equality[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]]]]]]", "kind" : "val"}, {"label" : "sym", "tail" : ": FuncLike[Term with Subs[Term] with Subs[Term with Subs[Term]], FuncLike[Term with Subs[Term] with Subs[Term with Subs[Term]], Func[Equality[Term with Subs[Term] with Subs[Term with Subs[Term]]] with Subs[Equality[Term with Subs[Term] with Subs[Term with Subs[Term]]]], Equality[Term with Subs[Term]]]]]", "member" : "provingground.library.Monoid.sym", "link" : "provingground\/library\/Monoid$.html#sym:provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]],provingground.HoTT.Func[provingground.HoTT.Equality[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]]withprovingground.HoTT.Subs[provingground.HoTT.Equality[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]]],provingground.HoTT.Equality[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]]]]", "kind" : "val"}, {"label" : "M", "tail" : ": Typ[Term] with Subs[Typ[Term]]", "member" : "provingground.library.Monoid.M", "link" : "provingground\/library\/Monoid$.html#M:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/library\/Monoid$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/library\/Monoid$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/library\/Monoid$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/library\/Monoid$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/library\/Monoid$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/library\/Monoid$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/library\/Monoid$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/Monoid$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/Monoid$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/Monoid$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/library\/Monoid$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/library\/Monoid$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/library\/Monoid$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/library\/Monoid$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/library\/Monoid$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/library\/Monoid$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/library\/Monoid$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/library\/Monoid$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/library\/Monoid$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.library.monoid$mul", "shortDescription" : "", "object" : "provingground\/library\/monoid$mul$.html", "members_object" : [{"label" : "value", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], Func[Term, Func[Term, Func[Term, Term]]]]", "member" : "provingground.library.monoid$mul.value", "link" : "provingground\/library\/monoid$mul$.html#value:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]]", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/library\/monoid$mul$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/library\/monoid$mul$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/library\/monoid$mul$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/library\/monoid$mul$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/library\/monoid$mul$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/library\/monoid$mul$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/library\/monoid$mul$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/monoid$mul$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/monoid$mul$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/monoid$mul$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/library\/monoid$mul$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/library\/monoid$mul$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/library\/monoid$mul$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/library\/monoid$mul$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/library\/monoid$mul$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/library\/monoid$mul$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/library\/monoid$mul$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/library\/monoid$mul$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/library\/monoid$mul$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.library.monoid$mul_assoc", "shortDescription" : "", "object" : "provingground\/library\/monoid$mul_assoc$.html", "members_object" : [{"label" : "value", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Term, FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], Term]]]]]", "member" : "provingground.library.monoid$mul_assoc.value", "link" : "provingground\/library\/monoid$mul_assoc$.html#value:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]]]]]", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/library\/monoid$mul_assoc$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/library\/monoid$mul_assoc$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/library\/monoid$mul_assoc$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/library\/monoid$mul_assoc$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/library\/monoid$mul_assoc$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/library\/monoid$mul_assoc$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/library\/monoid$mul_assoc$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/monoid$mul_assoc$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/monoid$mul_assoc$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/monoid$mul_assoc$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/library\/monoid$mul_assoc$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/library\/monoid$mul_assoc$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/library\/monoid$mul_assoc$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/library\/monoid$mul_assoc$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/library\/monoid$mul_assoc$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/library\/monoid$mul_assoc$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/library\/monoid$mul_assoc$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/library\/monoid$mul_assoc$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/library\/monoid$mul_assoc$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.library.monoid$one", "shortDescription" : "", "object" : "provingground\/library\/monoid$one$.html", "members_object" : [{"label" : "value", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], Func[Term, Term]]", "member" : "provingground.library.monoid$one.value", "link" : "provingground\/library\/monoid$one$.html#value:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/library\/monoid$one$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/library\/monoid$one$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/library\/monoid$one$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/library\/monoid$one$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/library\/monoid$one$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/library\/monoid$one$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/library\/monoid$one$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/monoid$one$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/monoid$one$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/monoid$one$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/library\/monoid$one$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/library\/monoid$one$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/library\/monoid$one$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/library\/monoid$one$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/library\/monoid$one$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/library\/monoid$one$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/library\/monoid$one$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/library\/monoid$one$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/library\/monoid$one$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.library.monoid$to_has_one", "shortDescription" : "", "object" : "provingground\/library\/monoid$to_has_one$.html", "members_object" : [{"label" : "value", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], Func[Term with Subs[Term], Term]]", "member" : "provingground.library.monoid$to_has_one.value", "link" : "provingground\/library\/monoid$to_has_one$.html#value:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.Func[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/library\/monoid$to_has_one$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/library\/monoid$to_has_one$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/library\/monoid$to_has_one$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/library\/monoid$to_has_one$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/library\/monoid$to_has_one$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/library\/monoid$to_has_one$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/library\/monoid$to_has_one$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/monoid$to_has_one$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/monoid$to_has_one$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/monoid$to_has_one$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/library\/monoid$to_has_one$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/library\/monoid$to_has_one$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/library\/monoid$to_has_one$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/library\/monoid$to_has_one$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/library\/monoid$to_has_one$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/library\/monoid$to_has_one$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/library\/monoid$to_has_one$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/library\/monoid$to_has_one$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/library\/monoid$to_has_one$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.library.monoid$to_semigroup", "shortDescription" : "", "object" : "provingground\/library\/monoid$to_semigroup$.html", "members_object" : [{"label" : "value", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], Func[Term with Subs[Term], Term]]", "member" : "provingground.library.monoid$to_semigroup.value", "link" : "provingground\/library\/monoid$to_semigroup$.html#value:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.Func[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/library\/monoid$to_semigroup$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/library\/monoid$to_semigroup$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/library\/monoid$to_semigroup$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/library\/monoid$to_semigroup$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/library\/monoid$to_semigroup$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/library\/monoid$to_semigroup$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/library\/monoid$to_semigroup$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/monoid$to_semigroup$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/monoid$to_semigroup$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/monoid$to_semigroup$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/library\/monoid$to_semigroup$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/library\/monoid$to_semigroup$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/library\/monoid$to_semigroup$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/library\/monoid$to_semigroup$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/library\/monoid$to_semigroup$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/library\/monoid$to_semigroup$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/library\/monoid$to_semigroup$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/library\/monoid$to_semigroup$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/library\/monoid$to_semigroup$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.library.monoidInd", "shortDescription" : "", "object" : "provingground\/library\/monoidInd$.html", "members_object" : [{"label" : "value", "tail" : ": Lambda[Typ[Term] with Subs[Typ[Term]], ConstructorSeqTL[::[::[CnstDepFuncConsShape.type, ::[CnstDepFuncConsShape.type, ::[CnstDepFuncConsShape.type, ::[CnstFuncConsShape.type, ::[CnstFuncConsShape.type, HNil]]]]], HNil], Term, ::[FuncLike[Func[Term, Func[Term, Term]] with Subs[Func[Term, Func[Term, Term]]], FuncLike[FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], Term]]] with Subs[FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], Term]]]], FuncLike[Term with Subs[Term], Func[FuncLike[Term with Subs[Term], Term], Func[FuncLike[Term with Subs[Term], Term], Term]]]]], HNil]]]", "member" : "provingground.library.monoidInd.value", "link" : "provingground\/library\/monoidInd$.html#value:provingground.Subst.Lambda[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.induction.ConstructorSeqTL[(provingground.induction.ConstructorShape.CnstDepFuncConsShape.type::provingground.induction.ConstructorShape.CnstDepFuncConsShape.type::provingground.induction.ConstructorShape.CnstDepFuncConsShape.type::provingground.induction.ConstructorShape.CnstFuncConsShape.type::provingground.induction.ConstructorShape.CnstFuncConsShape.type::shapeless.HNil)::shapeless.HNil,provingground.HoTT.Term,provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]],provingground.HoTT.FuncLike[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]]]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]]]],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term],provingground.HoTT.Term]]]]]::shapeless.HNil]]", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/library\/monoidInd$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/library\/monoidInd$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/library\/monoidInd$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/library\/monoidInd$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/library\/monoidInd$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/library\/monoidInd$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/library\/monoidInd$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/monoidInd$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/monoidInd$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/monoidInd$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/library\/monoidInd$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/library\/monoidInd$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/library\/monoidInd$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/library\/monoidInd$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/library\/monoidInd$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/library\/monoidInd$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/library\/monoidInd$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/library\/monoidInd$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/library\/monoidInd$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.library.MonoidSimple", "shortDescription" : "", "object" : "provingground\/library\/MonoidSimple$.html", "members_object" : [{"label" : "elemDist", "tail" : ": FiniteDistribution[Term with Subs[Term]]", "member" : "provingground.library.MonoidSimple.elemDist", "link" : "provingground\/library\/MonoidSimple$.html#elemDist:provingground.FiniteDistribution[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "assoc", "tail" : ": FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], Term]]] with Subs[FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], Term]]]]", "member" : "provingground.library.MonoidSimple.assoc", "link" : "provingground\/library\/MonoidSimple$.html#assoc:provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]]]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]]]]", "kind" : "val"}, {"label" : "dist1", "tail" : ": FiniteDistribution[Term]", "member" : "provingground.library.MonoidSimple.dist1", "link" : "provingground\/library\/MonoidSimple$.html#dist1:provingground.FiniteDistribution[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "dist", "tail" : ": FiniteDistribution[Term]", "member" : "provingground.library.MonoidSimple.dist", "link" : "provingground\/library\/MonoidSimple$.html#dist:provingground.FiniteDistribution[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "refl", "tail" : ": FuncLike[Term with Subs[Term], Term] with Subs[FuncLike[Term with Subs[Term], Term]]", "member" : "provingground.library.MonoidSimple.refl", "link" : "provingground\/library\/MonoidSimple$.html#refl:provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "rightId", "tail" : ": FuncLike[Term with Subs[Term], Term] with Subs[FuncLike[Term with Subs[Term], Term]]", "member" : "provingground.library.MonoidSimple.rightId", "link" : "provingground\/library\/MonoidSimple$.html#rightId:provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "leftId", "tail" : ": FuncLike[Term with Subs[Term], Term] with Subs[FuncLike[Term with Subs[Term], Term]]", "member" : "provingground.library.MonoidSimple.leftId", "link" : "provingground\/library\/MonoidSimple$.html#leftId:provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "op", "tail" : ": Func[Term, Func[Term, Term]] with Subs[Func[Term, Func[Term, Term]]]", "member" : "provingground.library.MonoidSimple.op", "link" : "provingground\/library\/MonoidSimple$.html#op:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "r", "tail" : ": Term with Subs[Term]", "member" : "provingground.library.MonoidSimple.r", "link" : "provingground\/library\/MonoidSimple$.html#r:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "l", "tail" : ": Term with Subs[Term]", "member" : "provingground.library.MonoidSimple.l", "link" : "provingground\/library\/MonoidSimple$.html#l:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "trans", "tail" : ": FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], Func[Term, Func[Term, Term]]]]] with Subs[FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], Func[Term, Func[Term, Term]]]]]]", "member" : "provingground.library.MonoidSimple.trans", "link" : "provingground\/library\/MonoidSimple$.html#trans:provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]]]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]]]]", "kind" : "val"}, {"label" : "sym", "tail" : ": FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], Func[Term, Term]]] with Subs[FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], Func[Term, Term]]]]", "member" : "provingground.library.MonoidSimple.sym", "link" : "provingground\/library\/MonoidSimple$.html#sym:provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]]", "kind" : "val"}, {"label" : "c", "tail" : ": Term with Subs[Term]", "member" : "provingground.library.MonoidSimple.c", "link" : "provingground\/library\/MonoidSimple$.html#c:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "b", "tail" : ": Term with Subs[Term]", "member" : "provingground.library.MonoidSimple.b", "link" : "provingground\/library\/MonoidSimple$.html#b:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "a", "tail" : ": Term with Subs[Term]", "member" : "provingground.library.MonoidSimple.a", "link" : "provingground\/library\/MonoidSimple$.html#a:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "eqM", "tail" : ": Func[Term, Func[Term, Typ[Term]]] with Subs[Func[Term, Func[Term, Typ[Term]]]]", "member" : "provingground.library.MonoidSimple.eqM", "link" : "provingground\/library\/MonoidSimple$.html#eqM:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]]]", "kind" : "val"}, {"label" : "M", "tail" : ": Typ[Term] with Subs[Typ[Term]]", "member" : "provingground.library.MonoidSimple.M", "link" : "provingground\/library\/MonoidSimple$.html#M:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/library\/MonoidSimple$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/library\/MonoidSimple$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/library\/MonoidSimple$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/library\/MonoidSimple$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/library\/MonoidSimple$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/library\/MonoidSimple$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/library\/MonoidSimple$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/MonoidSimple$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/MonoidSimple$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/MonoidSimple$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/library\/MonoidSimple$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/library\/MonoidSimple$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/library\/MonoidSimple$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/library\/MonoidSimple$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/library\/MonoidSimple$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/library\/MonoidSimple$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/library\/MonoidSimple$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/library\/MonoidSimple$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/library\/MonoidSimple$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.library.nat$below", "shortDescription" : "", "object" : "provingground\/library\/nat$below$.html", "members_object" : [{"label" : "value", "tail" : ": Func[Func[Term, Typ[Term]] with Subs[Func[Term, Typ[Term]]], Func[Term, Typ[Term]]]", "member" : "provingground.library.nat$below.value", "link" : "provingground\/library\/nat$below$.html#value:provingground.HoTT.Func[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]]", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/library\/nat$below$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/library\/nat$below$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/library\/nat$below$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/library\/nat$below$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/library\/nat$below$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/library\/nat$below$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/library\/nat$below$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/nat$below$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/nat$below$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/nat$below$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/library\/nat$below$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/library\/nat$below$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/library\/nat$below$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/library\/nat$below$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/library\/nat$below$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/library\/nat$below$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/library\/nat$below$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/library\/nat$below$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/library\/nat$below$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.library.nat$brec_on", "shortDescription" : "", "object" : "provingground\/library\/nat$brec_on$.html", "members_object" : [{"label" : "value", "tail" : ": FuncLike[Func[Term, Typ[Term]] with Subs[Func[Term, Typ[Term]]], FuncLike[Term with Subs[Term], Func[FuncLike[Term with Subs[Term], Func[Term, Term]] with Subs[FuncLike[Term with Subs[Term], Func[Term, Term]]], Term]]]", "member" : "provingground.library.nat$brec_on.value", "link" : "provingground\/library\/nat$brec_on$.html#value:provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]],provingground.HoTT.Term]]]", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/library\/nat$brec_on$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/library\/nat$brec_on$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/library\/nat$brec_on$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/library\/nat$brec_on$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/library\/nat$brec_on$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/library\/nat$brec_on$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/library\/nat$brec_on$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/nat$brec_on$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/nat$brec_on$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/nat$brec_on$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/library\/nat$brec_on$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/library\/nat$brec_on$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/library\/nat$brec_on$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/library\/nat$brec_on$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/library\/nat$brec_on$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/library\/nat$brec_on$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/library\/nat$brec_on$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/library\/nat$brec_on$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/library\/nat$brec_on$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.library.nat$cases_on", "shortDescription" : "", "object" : "provingground\/library\/nat$cases_on$.html", "members_object" : [{"label" : "value", "tail" : ": FuncLike[Func[Term, Typ[Term]] with Subs[Func[Term, Typ[Term]]], FuncLike[Term with Subs[Term], Func[Term with Subs[Term], Func[FuncLike[Term with Subs[Term], Term] with Subs[FuncLike[Term with Subs[Term], Term]], Term]]]]", "member" : "provingground.library.nat$cases_on.value", "link" : "provingground\/library\/nat$cases_on$.html#value:provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]],provingground.HoTT.Term]]]]", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/library\/nat$cases_on$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/library\/nat$cases_on$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/library\/nat$cases_on$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/library\/nat$cases_on$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/library\/nat$cases_on$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/library\/nat$cases_on$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/library\/nat$cases_on$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/nat$cases_on$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/nat$cases_on$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/nat$cases_on$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/library\/nat$cases_on$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/library\/nat$cases_on$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/library\/nat$cases_on$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/library\/nat$cases_on$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/library\/nat$cases_on$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/library\/nat$cases_on$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/library\/nat$cases_on$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/library\/nat$cases_on$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/library\/nat$cases_on$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.library.nat$decidable_eq", "shortDescription" : "", "object" : "provingground\/library\/nat$decidable_eq$.html", "members_object" : [{"label" : "value", "tail" : ": FuncLike[Term with Subs[Term], Term]", "member" : "provingground.library.nat$decidable_eq.value", "link" : "provingground\/library\/nat$decidable_eq$.html#value:provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/library\/nat$decidable_eq$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/library\/nat$decidable_eq$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/library\/nat$decidable_eq$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/library\/nat$decidable_eq$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/library\/nat$decidable_eq$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/library\/nat$decidable_eq$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/library\/nat$decidable_eq$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/nat$decidable_eq$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/nat$decidable_eq$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/nat$decidable_eq$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/library\/nat$decidable_eq$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/library\/nat$decidable_eq$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/library\/nat$decidable_eq$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/library\/nat$decidable_eq$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/library\/nat$decidable_eq$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/library\/nat$decidable_eq$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/library\/nat$decidable_eq$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/library\/nat$decidable_eq$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/library\/nat$decidable_eq$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.library.nat$decidable_eq$_main", "shortDescription" : "", "object" : "provingground\/library\/nat$decidable_eq$_main$.html", "members_object" : [{"label" : "value", "tail" : ": FuncLike[Term with Subs[Term], Term]", "member" : "provingground.library.nat$decidable_eq$_main.value", "link" : "provingground\/library\/nat$decidable_eq$_main$.html#value:provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/library\/nat$decidable_eq$_main$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/library\/nat$decidable_eq$_main$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/library\/nat$decidable_eq$_main$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/library\/nat$decidable_eq$_main$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/library\/nat$decidable_eq$_main$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/library\/nat$decidable_eq$_main$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/library\/nat$decidable_eq$_main$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/nat$decidable_eq$_main$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/nat$decidable_eq$_main$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/nat$decidable_eq$_main$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/library\/nat$decidable_eq$_main$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/library\/nat$decidable_eq$_main$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/library\/nat$decidable_eq$_main$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/library\/nat$decidable_eq$_main$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/library\/nat$decidable_eq$_main$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/library\/nat$decidable_eq$_main$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/library\/nat$decidable_eq$_main$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/library\/nat$decidable_eq$_main$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/library\/nat$decidable_eq$_main$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.library.nat$decidable_eq$_match_1", "shortDescription" : "", "object" : "provingground\/library\/nat$decidable_eq$_match_1$.html", "members_object" : [{"label" : "value", "tail" : ": FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], FuncLike[Term, Term]]]", "member" : "provingground.library.nat$decidable_eq$_match_1.value", "link" : "provingground\/library\/nat$decidable_eq$_match_1$.html#value:provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term]]]", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/library\/nat$decidable_eq$_match_1$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/library\/nat$decidable_eq$_match_1$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/library\/nat$decidable_eq$_match_1$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/library\/nat$decidable_eq$_match_1$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/library\/nat$decidable_eq$_match_1$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/library\/nat$decidable_eq$_match_1$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/library\/nat$decidable_eq$_match_1$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/nat$decidable_eq$_match_1$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/nat$decidable_eq$_match_1$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/nat$decidable_eq$_match_1$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/library\/nat$decidable_eq$_match_1$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/library\/nat$decidable_eq$_match_1$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/library\/nat$decidable_eq$_match_1$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/library\/nat$decidable_eq$_match_1$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/library\/nat$decidable_eq$_match_1$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/library\/nat$decidable_eq$_match_1$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/library\/nat$decidable_eq$_match_1$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/library\/nat$decidable_eq$_match_1$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/library\/nat$decidable_eq$_match_1$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.library.nat$no_confusion", "shortDescription" : "", "object" : "provingground\/library\/nat$no_confusion$.html", "members_object" : [{"label" : "value", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], Func[Term, Term]]]]", "member" : "provingground.library.nat$no_confusion.value", "link" : "provingground\/library\/nat$no_confusion$.html#value:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]]", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/library\/nat$no_confusion$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/library\/nat$no_confusion$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/library\/nat$no_confusion$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/library\/nat$no_confusion$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/library\/nat$no_confusion$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/library\/nat$no_confusion$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/library\/nat$no_confusion$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/nat$no_confusion$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/nat$no_confusion$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/nat$no_confusion$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/library\/nat$no_confusion$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/library\/nat$no_confusion$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/library\/nat$no_confusion$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/library\/nat$no_confusion$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/library\/nat$no_confusion$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/library\/nat$no_confusion$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/library\/nat$no_confusion$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/library\/nat$no_confusion$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/library\/nat$no_confusion$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.library.nat$no_confusion_type", "shortDescription" : "", "object" : "provingground\/library\/nat$no_confusion_type$.html", "members_object" : [{"label" : "value", "tail" : ": Func[Typ[Term] with Subs[Typ[Term]], Func[Term with Subs[Term], Func[Term with Subs[Term], Typ[Term]]]]", "member" : "provingground.library.nat$no_confusion_type.value", "link" : "provingground\/library\/nat$no_confusion_type$.html#value:provingground.HoTT.Func[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.Func[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Typ[provingground.HoTT.Term]]]]", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/library\/nat$no_confusion_type$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/library\/nat$no_confusion_type$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/library\/nat$no_confusion_type$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/library\/nat$no_confusion_type$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/library\/nat$no_confusion_type$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/library\/nat$no_confusion_type$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/library\/nat$no_confusion_type$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/nat$no_confusion_type$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/nat$no_confusion_type$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/nat$no_confusion_type$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/library\/nat$no_confusion_type$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/library\/nat$no_confusion_type$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/library\/nat$no_confusion_type$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/library\/nat$no_confusion_type$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/library\/nat$no_confusion_type$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/library\/nat$no_confusion_type$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/library\/nat$no_confusion_type$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/library\/nat$no_confusion_type$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/library\/nat$no_confusion_type$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.library.natInd", "shortDescription" : "", "object" : "provingground\/library\/natInd$.html", "members_object" : [{"label" : "value", "tail" : ": ConstructorSeqTL[::[HNil, ::[::[FuncConsShape.type, HNil], HNil]], Term, ::[Term, ::[Func[Term, Term], HNil]]]", "member" : "provingground.library.natInd.value", "link" : "provingground\/library\/natInd$.html#value:provingground.induction.ConstructorSeqTL[shapeless.HNil::(provingground.induction.ConstructorShape.FuncConsShape.type::shapeless.HNil)::shapeless.HNil,provingground.HoTT.Term,provingground.HoTT.Term::provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]::shapeless.HNil]", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/library\/natInd$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/library\/natInd$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/library\/natInd$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/library\/natInd$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/library\/natInd$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/library\/natInd$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/library\/natInd$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/natInd$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/natInd$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/natInd$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/library\/natInd$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/library\/natInd$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/library\/natInd$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/library\/natInd$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/library\/natInd$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/library\/natInd$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/library\/natInd$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/library\/natInd$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/library\/natInd$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.library.Nats", "shortDescription" : "", "object" : "provingground\/library\/Nats$.html", "members_object" : [{"label" : "ack", "tail" : ": Func[Term, Func[Term, Term]]", "member" : "provingground.library.Nats.ack", "link" : "provingground\/library\/Nats$.html#ack:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "ackmp1n", "tail" : ": Term with Subs[Term]", "member" : "provingground.library.Nats.ackmp1n", "link" : "provingground\/library\/Nats$.html#ackmp1n:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "ackm", "tail" : ": Func[Term, Term] with Subs[Func[Term, Term]]", "member" : "provingground.library.Nats.ackm", "link" : "provingground\/library\/Nats$.html#ackm:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "sumTo", "tail" : ": Func[Term, Term]", "member" : "provingground.library.Nats.sumTo", "link" : "provingground\/library\/Nats$.html#sumTo:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]", "kind" : "lazy val"}, {"label" : "add", "tail" : ": Func[Term, Func[Term, Term]]", "member" : "provingground.library.Nats.add", "link" : "provingground\/library\/Nats$.html#add:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "addn", "tail" : ": Func[Term, Term] with Subs[Func[Term, Term]]", "member" : "provingground.library.Nats.addn", "link" : "provingground\/library\/Nats$.html#addn:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "recNNN", "tail" : ": Func[Func[Term, Term], Func[Func[Term, Func[Func[Term, Term], Func[Term, Term]]], Func[Term, Func[Term, Term]]]]", "member" : "provingground.library.Nats.recNNN", "link" : "provingground\/library\/Nats$.html#recNNN:provingground.HoTT.Func[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]]", "kind" : "val"}, {"label" : "double", "tail" : ": Func[Term, Term]", "member" : "provingground.library.Nats.double", "link" : "provingground\/library\/Nats$.html#double:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]", "kind" : "val"}, {"label" : "recNN", "tail" : ": Func[Term, Func[Func[Term, Func[Term, Term]], Func[Term, Term]]]", "member" : "provingground.library.Nats.recNN", "link" : "provingground\/library\/Nats$.html#recNN:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "m", "tail" : ": Term with Subs[Term]", "member" : "provingground.library.Nats.m", "link" : "provingground\/library\/Nats$.html#m:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "n", "tail" : ": Term with Subs[Term]", "member" : "provingground.library.Nats.n", "link" : "provingground\/library\/Nats$.html#n:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "N", "tail" : ": Stream[Term]", "member" : "provingground.library.Nats.N", "link" : "provingground\/library\/Nats$.html#N:scala.collection.immutable.Stream[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "succ", "tail" : ": Func[Term, Term]", "member" : "provingground.library.Nats.succ", "link" : "provingground\/library\/Nats$.html#succ:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]", "kind" : "val"}, {"label" : "zero", "tail" : ": Term", "member" : "provingground.library.Nats.zero", "link" : "provingground\/library\/Nats$.html#zero:provingground.HoTT.Term", "kind" : "val"}, {"label" : "NatInd", "tail" : ": ConstructorSeqTL[::[HNil, ::[::[FuncConsShape.type, HNil], HNil]], Term, ::[Term, ::[Func[Term, Term], HNil]]]", "member" : "provingground.library.Nats.NatInd", "link" : "provingground\/library\/Nats$.html#NatInd:provingground.induction.ConstructorSeqTL[shapeless.HNil::(provingground.induction.ConstructorShape.FuncConsShape.type::shapeless.HNil)::shapeless.HNil,provingground.HoTT.Term,provingground.HoTT.Term::provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]::shapeless.HNil]", "kind" : "val"}, {"label" : "Nat", "tail" : ": Typ[Term] with Subs[Typ[Term]]", "member" : "provingground.library.Nats.Nat", "link" : "provingground\/library\/Nats$.html#Nat:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/library\/Nats$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/library\/Nats$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/library\/Nats$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/library\/Nats$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/library\/Nats$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/library\/Nats$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/library\/Nats$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/Nats$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/Nats$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/Nats$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/library\/Nats$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/library\/Nats$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/library\/Nats$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/library\/Nats$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/library\/Nats$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/library\/Nats$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/library\/Nats$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/library\/Nats$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/library\/Nats$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.library.non_contradictory_em", "shortDescription" : "", "object" : "provingground\/library\/non_contradictory_em$.html", "members_object" : [{"label" : "value", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], Func[Func[Term, Term] with Subs[Func[Term, Term]], Term with Subs[Term]]]", "member" : "provingground.library.non_contradictory_em.value", "link" : "provingground\/library\/non_contradictory_em$.html#value:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.Func[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]],provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]]", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/library\/non_contradictory_em$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/library\/non_contradictory_em$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/library\/non_contradictory_em$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/library\/non_contradictory_em$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/library\/non_contradictory_em$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/library\/non_contradictory_em$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/library\/non_contradictory_em$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/non_contradictory_em$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/non_contradictory_em$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/non_contradictory_em$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/library\/non_contradictory_em$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/library\/non_contradictory_em$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/library\/non_contradictory_em$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/library\/non_contradictory_em$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/library\/non_contradictory_em$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/library\/non_contradictory_em$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/library\/non_contradictory_em$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/library\/non_contradictory_em$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/library\/non_contradictory_em$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.library.not", "shortDescription" : "", "object" : "provingground\/library\/not$.html", "members_object" : [{"label" : "value", "tail" : ": Func[Typ[Term] with Subs[Typ[Term]], FuncTyp[Term, Term]]", "member" : "provingground.library.not.value", "link" : "provingground\/library\/not$.html#value:provingground.HoTT.Func[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncTyp[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/library\/not$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/library\/not$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/library\/not$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/library\/not$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/library\/not$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/library\/not$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/library\/not$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/not$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/not$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/not$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/library\/not$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/library\/not$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/library\/not$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/library\/not$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/library\/not$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/library\/not$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/library\/not$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/library\/not$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/library\/not$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.library.orInd", "shortDescription" : "", "object" : "provingground\/library\/orInd$.html", "members_object" : [{"label" : "value", "tail" : ": Lambda[Typ[Term] with Subs[Typ[Term]], Lambda[Typ[Term] with Subs[Typ[Term]], ConstructorSeqTL[::[::[CnstFuncConsShape.type, HNil], ::[::[CnstFuncConsShape.type, HNil], HNil]], Term, ::[Func[Term, Term], ::[Func[Term, Term], HNil]]]]]", "member" : "provingground.library.orInd.value", "link" : "provingground\/library\/orInd$.html#value:provingground.Subst.Lambda[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.Subst.Lambda[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.induction.ConstructorSeqTL[(provingground.induction.ConstructorShape.CnstFuncConsShape.type::shapeless.HNil)::(provingground.induction.ConstructorShape.CnstFuncConsShape.type::shapeless.HNil)::shapeless.HNil,provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]::provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]::shapeless.HNil]]]", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/library\/orInd$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/library\/orInd$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/library\/orInd$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/library\/orInd$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/library\/orInd$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/library\/orInd$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/library\/orInd$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/orInd$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/orInd$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/orInd$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/library\/orInd$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/library\/orInd$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/library\/orInd$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/library\/orInd$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/library\/orInd$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/library\/orInd$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/library\/orInd$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/library\/orInd$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/library\/orInd$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.library.pprod$fst", "shortDescription" : "", "object" : "provingground\/library\/pprod$fst$.html", "members_object" : [{"label" : "value", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Typ[Term] with Subs[Typ[Term]], Func[Term, Term]]]", "member" : "provingground.library.pprod$fst.value", "link" : "provingground\/library\/pprod$fst$.html#value:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/library\/pprod$fst$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/library\/pprod$fst$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/library\/pprod$fst$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/library\/pprod$fst$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/library\/pprod$fst$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/library\/pprod$fst$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/library\/pprod$fst$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/pprod$fst$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/pprod$fst$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/pprod$fst$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/library\/pprod$fst$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/library\/pprod$fst$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/library\/pprod$fst$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/library\/pprod$fst$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/library\/pprod$fst$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/library\/pprod$fst$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/library\/pprod$fst$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/library\/pprod$fst$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/library\/pprod$fst$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.library.pprodInd", "shortDescription" : "", "object" : "provingground\/library\/pprodInd$.html", "members_object" : [{"label" : "value", "tail" : ": Lambda[Typ[Term] with Subs[Typ[Term]], Lambda[Typ[Term] with Subs[Typ[Term]], ConstructorSeqTL[::[::[CnstFuncConsShape.type, ::[CnstFuncConsShape.type, HNil]], HNil], Term, ::[Func[Term, Func[Term, Term]], HNil]]]]", "member" : "provingground.library.pprodInd.value", "link" : "provingground\/library\/pprodInd$.html#value:provingground.Subst.Lambda[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.Subst.Lambda[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.induction.ConstructorSeqTL[(provingground.induction.ConstructorShape.CnstFuncConsShape.type::provingground.induction.ConstructorShape.CnstFuncConsShape.type::shapeless.HNil)::shapeless.HNil,provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]::shapeless.HNil]]]", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/library\/pprodInd$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/library\/pprodInd$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/library\/pprodInd$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/library\/pprodInd$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/library\/pprodInd$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/library\/pprodInd$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/library\/pprodInd$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/pprodInd$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/pprodInd$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/pprodInd$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/library\/pprodInd$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/library\/pprodInd$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/library\/pprodInd$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/library\/pprodInd$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/library\/pprodInd$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/library\/pprodInd$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/library\/pprodInd$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/library\/pprodInd$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/library\/pprodInd$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.library.punitInd", "shortDescription" : "", "object" : "provingground\/library\/punitInd$.html", "members_object" : [{"label" : "value", "tail" : ": ConstructorSeqTL[::[HNil, HNil], Term, ::[Term, HNil]]", "member" : "provingground.library.punitInd.value", "link" : "provingground\/library\/punitInd$.html#value:provingground.induction.ConstructorSeqTL[shapeless.HNil::shapeless.HNil,provingground.HoTT.Term,provingground.HoTT.Term::shapeless.HNil]", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/library\/punitInd$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/library\/punitInd$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/library\/punitInd$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/library\/punitInd$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/library\/punitInd$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/library\/punitInd$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/library\/punitInd$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/punitInd$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/punitInd$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/punitInd$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/library\/punitInd$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/library\/punitInd$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/library\/punitInd$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/library\/punitInd$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/library\/punitInd$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/library\/punitInd$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/library\/punitInd$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/library\/punitInd$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/library\/punitInd$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.library.rfl", "shortDescription" : "", "object" : "provingground\/library\/rfl$.html", "members_object" : [{"label" : "value", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], FuncLike[Term with Subs[Term], Term with Subs[Term]]]", "member" : "provingground.library.rfl.value", "link" : "provingground\/library\/rfl$.html#value:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]]]", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/library\/rfl$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/library\/rfl$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/library\/rfl$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/library\/rfl$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/library\/rfl$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/library\/rfl$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/library\/rfl$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/rfl$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/rfl$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/rfl$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/library\/rfl$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/library\/rfl$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/library\/rfl$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/library\/rfl$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/library\/rfl$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/library\/rfl$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/library\/rfl$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/library\/rfl$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/library\/rfl$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.library.semigroup$mul", "shortDescription" : "", "object" : "provingground\/library\/semigroup$mul$.html", "members_object" : [{"label" : "value", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], Func[Term, Func[Term, Func[Term, Term]]]]", "member" : "provingground.library.semigroup$mul.value", "link" : "provingground\/library\/semigroup$mul$.html#value:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]]", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/library\/semigroup$mul$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/library\/semigroup$mul$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/library\/semigroup$mul$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/library\/semigroup$mul$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/library\/semigroup$mul$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/library\/semigroup$mul$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/library\/semigroup$mul$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/semigroup$mul$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/semigroup$mul$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/semigroup$mul$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/library\/semigroup$mul$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/library\/semigroup$mul$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/library\/semigroup$mul$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/library\/semigroup$mul$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/library\/semigroup$mul$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/library\/semigroup$mul$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/library\/semigroup$mul$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/library\/semigroup$mul$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/library\/semigroup$mul$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.library.semigroup$to_has_mul", "shortDescription" : "", "object" : "provingground\/library\/semigroup$to_has_mul$.html", "members_object" : [{"label" : "value", "tail" : ": FuncLike[Typ[Term] with Subs[Typ[Term]], Func[Term with Subs[Term], Term]]", "member" : "provingground.library.semigroup$to_has_mul.value", "link" : "provingground\/library\/semigroup$to_has_mul$.html#value:provingground.HoTT.FuncLike[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.HoTT.Func[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]]", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/library\/semigroup$to_has_mul$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/library\/semigroup$to_has_mul$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/library\/semigroup$to_has_mul$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/library\/semigroup$to_has_mul$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/library\/semigroup$to_has_mul$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/library\/semigroup$to_has_mul$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/library\/semigroup$to_has_mul$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/semigroup$to_has_mul$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/semigroup$to_has_mul$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/semigroup$to_has_mul$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/library\/semigroup$to_has_mul$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/library\/semigroup$to_has_mul$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/library\/semigroup$to_has_mul$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/library\/semigroup$to_has_mul$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/library\/semigroup$to_has_mul$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/library\/semigroup$to_has_mul$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/library\/semigroup$to_has_mul$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/library\/semigroup$to_has_mul$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/library\/semigroup$to_has_mul$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.library.semigroupInd", "shortDescription" : "", "object" : "provingground\/library\/semigroupInd$.html", "members_object" : [{"label" : "value", "tail" : ": Lambda[Typ[Term] with Subs[Typ[Term]], ConstructorSeqTL[::[::[CnstDepFuncConsShape.type, ::[CnstFuncConsShape.type, HNil]], HNil], Term, ::[FuncLike[Func[Term, Func[Term, Term]] with Subs[Func[Term, Func[Term, Term]]], Func[FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], Term]]], Term]], HNil]]]", "member" : "provingground.library.semigroupInd.value", "link" : "provingground\/library\/semigroupInd$.html#value:provingground.Subst.Lambda[provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]],provingground.induction.ConstructorSeqTL[(provingground.induction.ConstructorShape.CnstDepFuncConsShape.type::provingground.induction.ConstructorShape.CnstFuncConsShape.type::shapeless.HNil)::shapeless.HNil,provingground.HoTT.Term,provingground.HoTT.FuncLike[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]],provingground.HoTT.Func[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]]],provingground.HoTT.Term]]::shapeless.HNil]]", "kind" : "lazy val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/library\/semigroupInd$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/library\/semigroupInd$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/library\/semigroupInd$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/library\/semigroupInd$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/library\/semigroupInd$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/library\/semigroupInd$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/library\/semigroupInd$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/semigroupInd$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/semigroupInd$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/semigroupInd$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/library\/semigroupInd$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/library\/semigroupInd$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/library\/semigroupInd$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/library\/semigroupInd$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/library\/semigroupInd$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/library\/semigroupInd$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/library\/semigroupInd$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/library\/semigroupInd$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/library\/semigroupInd$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.library.SimpleEvens", "shortDescription" : "", "object" : "provingground\/library\/SimpleEvens$.html", "members_object" : [{"label" : "plusTwoEven", "tail" : ": FuncLike[Term with Subs[Term], Func[Term, Term]] with Subs[FuncLike[Term with Subs[Term], Func[Term, Term]]]", "member" : "provingground.library.SimpleEvens.plusTwoEven", "link" : "provingground\/library\/SimpleEvens$.html#plusTwoEven:provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "zeroEven", "tail" : ": Term with Subs[Term]", "member" : "provingground.library.SimpleEvens.zeroEven", "link" : "provingground\/library\/SimpleEvens$.html#zeroEven:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "isEven", "tail" : ": Func[Term, Typ[Term]] with Subs[Func[Term, Typ[Term]]]", "member" : "provingground.library.SimpleEvens.isEven", "link" : "provingground\/library\/SimpleEvens$.html#isEven:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/library\/SimpleEvens$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/library\/SimpleEvens$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/library\/SimpleEvens$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/library\/SimpleEvens$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/library\/SimpleEvens$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/library\/SimpleEvens$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/library\/SimpleEvens$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/SimpleEvens$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/SimpleEvens$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/SimpleEvens$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/library\/SimpleEvens$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/library\/SimpleEvens$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/library\/SimpleEvens$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/library\/SimpleEvens$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/library\/SimpleEvens$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/library\/SimpleEvens$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/library\/SimpleEvens$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/library\/SimpleEvens$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/library\/SimpleEvens$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.library.SimpleGroup", "shortDescription" : "", "object" : "provingground\/library\/SimpleGroup$.html", "members_object" : [{"label" : "dist", "tail" : ": FiniteDistribution[Term]", "member" : "provingground.library.SimpleGroup.dist", "link" : "provingground\/library\/SimpleGroup$.html#dist:provingground.FiniteDistribution[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "hyp", "tail" : ": Term with Subs[Term]", "member" : "provingground.library.SimpleGroup.hyp", "link" : "provingground\/library\/SimpleGroup$.html#hyp:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "f", "tail" : ": Func[Term, Term] with Subs[Func[Term, Term]]", "member" : "provingground.library.SimpleGroup.f", "link" : "provingground\/library\/SimpleGroup$.html#f:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "i", "tail" : ": Func[Term, Term] with Subs[Func[Term, Term]]", "member" : "provingground.library.SimpleGroup.i", "link" : "provingground\/library\/SimpleGroup$.html#i:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "op", "tail" : ": Func[Term, Func[Term, Term]] with Subs[Func[Term, Func[Term, Term]]]", "member" : "provingground.library.SimpleGroup.op", "link" : "provingground\/library\/SimpleGroup$.html#op:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "e", "tail" : ": Term with Subs[Term]", "member" : "provingground.library.SimpleGroup.e", "link" : "provingground\/library\/SimpleGroup$.html#e:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "c", "tail" : ": Term with Subs[Term]", "member" : "provingground.library.SimpleGroup.c", "link" : "provingground\/library\/SimpleGroup$.html#c:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "b", "tail" : ": Term with Subs[Term]", "member" : "provingground.library.SimpleGroup.b", "link" : "provingground\/library\/SimpleGroup$.html#b:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "a", "tail" : ": Term with Subs[Term]", "member" : "provingground.library.SimpleGroup.a", "link" : "provingground\/library\/SimpleGroup$.html#a:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "eqG", "tail" : ": Func[Term, Func[Term, Typ[Term]]] with Subs[Func[Term, Func[Term, Typ[Term]]]]", "member" : "provingground.library.SimpleGroup.eqG", "link" : "provingground\/library\/SimpleGroup$.html#eqG:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]]]", "kind" : "val"}, {"label" : "G", "tail" : ": Typ[Term] with Subs[Typ[Term]]", "member" : "provingground.library.SimpleGroup.G", "link" : "provingground\/library\/SimpleGroup$.html#G:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/library\/SimpleGroup$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/library\/SimpleGroup$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/library\/SimpleGroup$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/library\/SimpleGroup$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/library\/SimpleGroup$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/library\/SimpleGroup$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/library\/SimpleGroup$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/SimpleGroup$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/SimpleGroup$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/SimpleGroup$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/library\/SimpleGroup$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/library\/SimpleGroup$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/library\/SimpleGroup$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/library\/SimpleGroup$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/library\/SimpleGroup$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/library\/SimpleGroup$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/library\/SimpleGroup$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/library\/SimpleGroup$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/library\/SimpleGroup$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.library.SuccNOrNEven", "shortDescription" : "", "object" : "provingground\/library\/SuccNOrNEven$.html", "members_object" : [{"label" : "pf", "tail" : ": FuncLike[Term with Subs[Term], Term]", "member" : "provingground.library.SuccNOrNEven.pf", "link" : "provingground\/library\/SuccNOrNEven$.html#pf:provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]", "kind" : "val"}, {"label" : "inductor", "tail" : ": Func[Term, Func[FuncLike[Term, Func[Term, Term]], FuncLike[Term, Term]]]", "member" : "provingground.library.SuccNOrNEven.inductor", "link" : "provingground\/library\/SuccNOrNEven$.html#inductor:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "step", "tail" : ": FuncLike[Term with Subs[Term], Func[Term, Term]]", "member" : "provingground.library.SuccNOrNEven.step", "link" : "provingground\/library\/SuccNOrNEven$.html#step:provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "thm", "tail" : ": GenFuncTyp[Term with Subs[Term], Term]", "member" : "provingground.library.SuccNOrNEven.thm", "link" : "provingground\/library\/SuccNOrNEven$.html#thm:provingground.HoTT.GenFuncTyp[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Term]", "kind" : "val"}, {"label" : "hyp2", "tail" : ": Term with Subs[Term]", "member" : "provingground.library.SuccNOrNEven.hyp2", "link" : "provingground\/library\/SuccNOrNEven$.html#hyp2:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "hyp1", "tail" : ": Term with Subs[Term]", "member" : "provingground.library.SuccNOrNEven.hyp1", "link" : "provingground\/library\/SuccNOrNEven$.html#hyp1:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "base", "tail" : ": Term", "member" : "provingground.library.SuccNOrNEven.base", "link" : "provingground\/library\/SuccNOrNEven$.html#base:provingground.HoTT.Term", "kind" : "val"}, {"label" : "claim", "tail" : ": Func[Term with Subs[Term], PlusTyp[Term, Term]]", "member" : "provingground.library.SuccNOrNEven.claim", "link" : "provingground\/library\/SuccNOrNEven$.html#claim:provingground.HoTT.Func[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.PlusTyp[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/library\/SuccNOrNEven$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/library\/SuccNOrNEven$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/library\/SuccNOrNEven$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/library\/SuccNOrNEven$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/library\/SuccNOrNEven$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/library\/SuccNOrNEven$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/library\/SuccNOrNEven$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/SuccNOrNEven$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/SuccNOrNEven$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/SuccNOrNEven$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/library\/SuccNOrNEven$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/library\/SuccNOrNEven$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/library\/SuccNOrNEven$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/library\/SuccNOrNEven$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/library\/SuccNOrNEven$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/library\/SuccNOrNEven$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/library\/SuccNOrNEven$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/library\/SuccNOrNEven$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/library\/SuccNOrNEven$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.library.Trees", "shortDescription" : "", "object" : "provingground\/library\/Trees$.html", "members_object" : [{"label" : "vertices", "tail" : ": Func[Term, Term]", "member" : "provingground.library.Trees.vertices", "link" : "provingground\/library\/Trees$.html#vertices:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]", "kind" : "val"}, {"label" : "t2", "tail" : ": Term with Subs[Term]", "member" : "provingground.library.Trees.t2", "link" : "provingground\/library\/Trees$.html#t2:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "t1", "tail" : ": Term with Subs[Term]", "member" : "provingground.library.Trees.t1", "link" : "provingground\/library\/Trees$.html#t1:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "recTN", "tail" : ": Func[Term, Func[Func[Term, Func[Term, Func[Term, Func[Term, Term]]]], Func[Term, Term]]]", "member" : "provingground.library.Trees.recTN", "link" : "provingground\/library\/Trees$.html#recTN:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "node", "tail" : ": Func[Term, Func[Term, Term]]", "member" : "provingground.library.Trees.node", "link" : "provingground\/library\/Trees$.html#node:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "leaf", "tail" : ": Term", "member" : "provingground.library.Trees.leaf", "link" : "provingground\/library\/Trees$.html#leaf:provingground.HoTT.Term", "kind" : "val"}, {"label" : "TInd", "tail" : ": ConstructorSeqTL[::[HNil, ::[::[FuncConsShape.type, ::[FuncConsShape.type, HNil]], HNil]], Term, ::[Term, ::[Func[Term, Func[Term, Term]], HNil]]]", "member" : "provingground.library.Trees.TInd", "link" : "provingground\/library\/Trees$.html#TInd:provingground.induction.ConstructorSeqTL[shapeless.HNil::(provingground.induction.ConstructorShape.FuncConsShape.type::provingground.induction.ConstructorShape.FuncConsShape.type::shapeless.HNil)::shapeless.HNil,provingground.HoTT.Term,provingground.HoTT.Term::provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]::shapeless.HNil]", "kind" : "val"}, {"label" : "T", "tail" : ": Typ[Term] with Subs[Typ[Term]]", "member" : "provingground.library.Trees.T", "link" : "provingground\/library\/Trees$.html#T:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/library\/Trees$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/library\/Trees$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/library\/Trees$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/library\/Trees$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/library\/Trees$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/library\/Trees$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/library\/Trees$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/Trees$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/Trees$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/Trees$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/library\/Trees$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/library\/Trees$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/library\/Trees$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/library\/Trees$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/library\/Trees$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/library\/Trees$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/library\/Trees$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/library\/Trees$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/library\/Trees$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "provingground.library.Vecs", "shortDescription" : "", "object" : "provingground\/library\/Vecs$.html", "members_object" : [{"label" : "vconcat", "tail" : ": FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], Func[Term, Term]]]]", "member" : "provingground.library.Vecs.vconcat", "link" : "provingground\/library\/Vecs$.html#vconcat:provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]]", "kind" : "val"}, {"label" : "concatVn", "tail" : ": FuncLike[Term with Subs[Term], Func[Term, Term]] with Subs[FuncLike[Term with Subs[Term], Func[Term, Term]]]", "member" : "provingground.library.Vecs.concatVn", "link" : "provingground\/library\/Vecs$.html#concatVn:provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "indVVV", "tail" : ": Func[FuncLike[Term with Subs[Term], Func[Term, Term]], Func[FuncLike[Term with Subs[Term], FuncLike[Term, FuncLike[Term, Func[FuncLike[Term with Subs[Term], Func[Term, Term]], FuncLike[Term with Subs[Term], Func[Term, Term]]]]]], FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], FuncLike[Term with Subs[Term], Func[Term, Term]]]]]]", "member" : "provingground.library.Vecs.indVVV", "link" : "provingground\/library\/Vecs$.html#indVVV:provingground.HoTT.Func[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]],provingground.HoTT.Func[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]]]],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]]]]", "kind" : "val"}, {"label" : "VecInd", "tail" : ": Lambda[Term, IndexedConstructorSeqDom[::[HNil, ::[::[IndexedCnstDepFuncConsShape.type, ::[IndexedCnstFuncConsShape.type, ::[IndexedIndexedFuncConsShape.type, HNil]]], HNil]], Term, Func[Term, Typ[Term]] with Subs[Func[Term, Typ[Term]]], ::[Term, HNil], ::[Term, ::[FuncLike[Term with Subs[Term], Func[Term, Func[Term, Term]]], HNil]]]]", "member" : "provingground.library.Vecs.VecInd", "link" : "provingground\/library\/Vecs$.html#VecInd:provingground.Subst.Lambda[provingground.HoTT.Term,provingground.induction.IndexedConstructorSeqDom[shapeless.HNil::(provingground.induction.IndexedConstructorShape.IndexedCnstDepFuncConsShape.type::provingground.induction.IndexedConstructorShape.IndexedCnstFuncConsShape.type::provingground.induction.IndexedConstructorShape.IndexedIndexedFuncConsShape.type::shapeless.HNil)::shapeless.HNil,provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]],provingground.HoTT.Term::shapeless.HNil,provingground.HoTT.Term::provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]::shapeless.HNil]]", "kind" : "val"}, {"label" : "size", "tail" : ": FuncLike[Term, Func[Term, Term]]", "member" : "provingground.library.Vecs.size", "link" : "provingground\/library\/Vecs$.html#size:provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "recVN", "tail" : ": Func[Term, Func[FuncLike[Term with Subs[Term], Func[Term, Func[Term, Func[Term, Term]]]], FuncLike[Term, Func[Term, Term]]]]", "member" : "provingground.library.Vecs.recVN", "link" : "provingground\/library\/Vecs$.html#recVN:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]],provingground.HoTT.FuncLike[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]]", "kind" : "val"}, {"label" : "vm", "tail" : ": Term with Subs[Term]", "member" : "provingground.library.Vecs.vm", "link" : "provingground\/library\/Vecs$.html#vm:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "vn", "tail" : ": Term with Subs[Term]", "member" : "provingground.library.Vecs.vn", "link" : "provingground\/library\/Vecs$.html#vn:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "vcons", "tail" : ": FuncLike[Term with Subs[Term], Func[Term, Func[Term, Term]]]", "member" : "provingground.library.Vecs.vcons", "link" : "provingground\/library\/Vecs$.html#vcons:provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "vnil", "tail" : ": Term", "member" : "provingground.library.Vecs.vnil", "link" : "provingground\/library\/Vecs$.html#vnil:provingground.HoTT.Term", "kind" : "val"}, {"label" : "VecAInd", "tail" : ": IndexedConstructorSeqDom[::[HNil, ::[::[IndexedCnstDepFuncConsShape.type, ::[IndexedCnstFuncConsShape.type, ::[IndexedIndexedFuncConsShape.type, HNil]]], HNil]], Term, Func[Term, Typ[Term]] with Subs[Func[Term, Typ[Term]]], ::[Term, HNil], ::[Term, ::[FuncLike[Term with Subs[Term], Func[Term, Func[Term, Term]]], HNil]]]", "member" : "provingground.library.Vecs.VecAInd", "link" : "provingground\/library\/Vecs$.html#VecAInd:provingground.induction.IndexedConstructorSeqDom[shapeless.HNil::(provingground.induction.IndexedConstructorShape.IndexedCnstDepFuncConsShape.type::provingground.induction.IndexedConstructorShape.IndexedCnstFuncConsShape.type::provingground.induction.IndexedConstructorShape.IndexedIndexedFuncConsShape.type::shapeless.HNil)::shapeless.HNil,provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]],provingground.HoTT.Term::shapeless.HNil,provingground.HoTT.Term::provingground.HoTT.FuncLike[provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term],provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Term]]]::shapeless.HNil]", "kind" : "val"}, {"label" : "Vec", "tail" : ": Func[Term, Typ[Term]] with Subs[Func[Term, Typ[Term]]]", "member" : "provingground.library.Vecs.Vec", "link" : "provingground\/library\/Vecs$.html#Vec:provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]withprovingground.HoTT.Subs[provingground.HoTT.Func[provingground.HoTT.Term,provingground.HoTT.Typ[provingground.HoTT.Term]]]", "kind" : "val"}, {"label" : "a", "tail" : ": Term with Subs[Term]", "member" : "provingground.library.Vecs.a", "link" : "provingground\/library\/Vecs$.html#a:provingground.HoTT.Termwithprovingground.HoTT.Subs[provingground.HoTT.Term]", "kind" : "val"}, {"label" : "A", "tail" : ": Typ[Term] with Subs[Typ[Term]]", "member" : "provingground.library.Vecs.A", "link" : "provingground\/library\/Vecs$.html#A:provingground.HoTT.Typ[provingground.HoTT.Term]withprovingground.HoTT.Subs[provingground.HoTT.Typ[provingground.HoTT.Term]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "provingground\/library\/Vecs$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "provingground\/library\/Vecs$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "provingground\/library\/Vecs$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "provingground\/library\/Vecs$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "provingground\/library\/Vecs$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "provingground\/library\/Vecs$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "provingground\/library\/Vecs$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/Vecs$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/Vecs$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "provingground\/library\/Vecs$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "provingground\/library\/Vecs$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "provingground\/library\/Vecs$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "provingground\/library\/Vecs$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "provingground\/library\/Vecs$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "provingground\/library\/Vecs$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "provingground\/library\/Vecs$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "provingground\/library\/Vecs$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "provingground\/library\/Vecs$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "provingground\/library\/Vecs$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}]};